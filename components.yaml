components:
  schemas:
    readOnlyObject:
      type: object
      properties:
        string:
          type: string
          readOnly: true
          example: "hello"
        bool:
          type: boolean
          readOnly: true
          example: true
        num:
          type: number
          readOnly: true
          example: 1.0
      required:
        - string
        - bool
        - num
    writeOnlyObject:
      type: object
      properties:
        string:
          type: string
          writeOnly: true
          example: "hello"
        bool:
          type: boolean
          writeOnly: true
          example: true
        num:
          type: number
          writeOnly: true
          example: 1.0
      required:
        - string
        - bool
        - num
    readWriteObject:
      type: object
      properties:
        num1:
          type: integer
          writeOnly: true
          example: 1
        num2:
          type: integer
          writeOnly: true
          example: 2
        num3:
          type: integer
          example: 4
        sum:
          type: integer
          readOnly: true
          example: 7
      required:
        - num1
        - num2
        - num3
        - sum
    stronglyTypedOneOfObject:
      oneOf:
        - $ref: "#/components/schemas/simpleObjectWithType"
        - $ref: "#/components/schemas/deepObjectWithType"
      discriminator:
        propertyName: type
    stronglyTypedOneOfObjectWithNonStandardDiscriminatorName:
      oneOf:
        - $ref: "#/components/schemas/simpleObjectWithNonStandardTypeName"
        - $ref: "#/components/schemas/deepObjectWithNonStandardTypeName"
      discriminator:
        propertyName: 'obj.type'
    stronglyTypedOneOfDiscriminatedObject:
      oneOf:
        - $ref: "#/components/schemas/taggedObject1"
        - $ref: "#/components/schemas/taggedObject2"
        - $ref: "#/components/schemas/taggedObject3"
      discriminator:
        propertyName: tag
        mapping:
          tag1: "#/components/schemas/taggedObject1"
          tag2: "#/components/schemas/taggedObject2"
          tag3: "#/components/schemas/taggedObject3"
    weaklyTypedOneOfObject:
      oneOf:
        - $ref: "#/components/schemas/simpleObject"
        - $ref: "#/components/schemas/deepObject"
    weaklyTypedOneOfNullEnumObject:
      oneOf:
        - $ref: "#/components/schemas/simpleObject"
        - $ref: "#/components/schemas/deepObject"
        - enum: [null]
    weaklyTypedOneOfReadOnlyObject:
      oneOf:
        - $ref: "#/components/schemas/simpleObject"
        - $ref: "#/components/schemas/readOnlyObject"
    weaklyTypedOneOfWriteOnlyObject:
      oneOf:
        - $ref: "#/components/schemas/simpleObject"
        - $ref: "#/components/schemas/writeOnlyObject"
    weaklyTypedOneOfReadWriteObject:
      oneOf:
        - $ref: "#/components/schemas/simpleObject"
        - $ref: "#/components/schemas/readWriteObject"
    objectWithNullEnums:
      type: object
      required: [nullEnum]
      properties:
        nullEnum:
          enum: [null]
        optNullEnum:
          enum: [null]
    typedObjectOneOf:
      oneOf:
        - $ref: "#/components/schemas/typedObject1"
        - $ref: "#/components/schemas/typedObject2"
        - $ref: "#/components/schemas/typedObject3"
    typedObjectNullableOneOf:
      oneOf:
        - $ref: "#/components/schemas/typedObject1"
        - $ref: "#/components/schemas/typedObject2"
        - type: "null"
    flattenedTypedObject1:
      oneOf:
        - $ref: "#/components/schemas/typedObject1"
    nullableTypedObject1:
      oneOf:
        - $ref: "#/components/schemas/typedObject1"
        - type: "null"
    typedObject1:
      type: object
      properties:
        type:
          type: string
          enum:
            - "obj1"
        value:
          type: string
      required:
        - type
        - value
    typedObject2:
      type: object
      properties:
        type:
          type: string
          enum:
            - "obj2"
        value:
          type: string
      required:
        - type
        - value
    typedObject3:
      type: object
      properties:
        type:
          type: string
          enum:
            - "obj3"
        value:
          type: string
      required:
        - type
        - value
    taggedObject1:
      type: object
      properties:
        tag:
          type: string
          enum: [tag1]
        imageURL:
          type: string
      required:
        - tag
        - imageURL
    taggedObject2:
      type: object
      properties:
        tag:
          type: string
          enum: [tag2]
        profileId:
          type: string
      required:
        - tag
        - profileId
    taggedObject3:
      type: object
      properties:
        tag:
          type: string
          const: tag3
        phone:
          type: string
      required:
        - tag
        - phone
    httpBinSimpleJsonObject:
      type: object
      properties:
        slideshow:
          type: object
          properties:
            author:
              type: string
            date:
              type: string
            title:
              type: string
            slides:
              type: array
              items:
                type: object
                properties:
                  title:
                    type: string
                  type:
                    type: string
                  items:
                    type: array
                    items:
                      type: string
                required:
                  - title
                  - type
          required:
            - author
            - date
            - title
            - slides
      required:
        - slideshow
    enum:
      type: string
      description: "A string based enum"
      enum:
        - "one"
        - "two"
        - "three"
        - "four_and_more"
      example: "one"
    simpleObject:
      description: "A simple object that uses all our supported primitive types and enums and has optional properties."
      externalDocs:
        description: "A link to the external docs."
        url: "https://docs.speakeasyapi.dev"
      type: object
      properties:
        str:
          type: string
          description: "A string property."
          example: "test"
        bool:
          type: boolean
          description: "A boolean property."
          example: true
        int:
          type: integer
          description: "An integer property."
          example: 1
        int32:
          type: integer
          format: int32
          description: "An int32 property."
          example: 1
        num:
          type: number
          description: "A number property."
          example: 1.1
        float32:
          type: number
          format: float
          description: "A float32 property."
          example: 1.1
        enum:
          $ref: "#/components/schemas/enum"
        date:
          type: string
          format: date
          description: "A date property."
          example: "2020-01-01"
        dateTime:
          type: string
          format: date-time
          description: "A date-time property."
          example: "2020-01-01T00:00:00.000001Z"
        any:
          description: "An any property."
          example: "any"
        strOpt:
          type: string
          description: "An optional string property."
          example: "testOptional"
        boolOpt:
          type: boolean
          description: "An optional boolean property."
          example: true
        intOptNull:
          type: integer
          description: "An optional integer property will be null for tests."
        numOptNull:
          type: number
          description: "An optional number property will be null for tests."
        intEnum:
          type: integer
          description: "An integer enum property."
          enum:
            - 1
            - 2
            - 3
          example: 2
          x-speakeasy-enums:
            - First
            - Second
            - Third
        int32Enum:
          type: integer
          format: int32
          description: "An int32 enum property."
          enum:
            - 55
            - 69
            - 181
          example: 55
        bigint:
          type: integer
          format: bigint
          example: 8821239038968084
        bigintStr:
          type: string
          format: bigint
          example: "9223372036854775808"
        decimal:
          type: number
          format: decimal
          example: 3.141592653589793
        decimalStr:
          type: string
          format: decimal
          example: "3.14159265358979344719667586"
      required:
        - str
        - bool
        - int
        - int32
        - num
        - float32
        - enum
        - date
        - dateTime
        - any
        - intEnum
        - int32Enum
    simpleObjectCamelCase:
      description: "A simple object that uses all our supported primitive types and enums and has optional properties."
      externalDocs:
        description: "A link to the external docs."
        url: "https://docs.speakeasyapi.dev"
      type: object
      properties:
        str_val:
          type: string
          description: "A string property."
          example: "example"
        bool_val:
          type: boolean
          description: "A boolean property."
          example: true
        int_val:
          type: integer
          description: "An integer property."
          example: 999999
        int32_val:
          type: integer
          format: int32
          description: "An int32 property."
          example: 1
        num_val:
          type: number
          description: "A number property."
          example: 1.1
        float32_val:
          type: number
          format: float
          description: "A float32 property."
          example: 2.2222222
        enum_val:
          $ref: "#/components/schemas/enum"
        date_val:
          type: string
          format: date
          description: "A date property."
          example: "2020-01-01"
        date_time_val:
          type: string
          format: date-time
          description: "A date-time property."
          example: "2020-01-01T00:00:00Z"
        any_val:
          description: "An any property."
          example: "any example"
        str_opt_val:
          type: string
          description: "An optional string property."
          example: "optional example"
        bool_opt_val:
          type: boolean
          description: "An optional boolean property."
          example: true
        int_opt_null_val:
          type: integer
          description: "An optional integer property will be null for tests."
          example: 999999
        num_opt_null_val:
          type: number
          description: "An optional number property will be null for tests."
          example: 1.1
        int_enum_val:
          type: integer
          description: "An integer enum property."
          enum:
            - 1
            - 2
            - 3
          example: 3
          x-speakeasy-enums:
            - First
            - Second
            - Third
        int32_enum_val:
          type: integer
          format: int32
          description: "An int32 enum property."
          enum:
            - 55
            - 69
            - 181
          example: 69
        bigint_val:
          type: integer
          format: bigint
        bigint_str_val:
          type: string
          format: bigint
        decimal_val:
          type: number
          format: decimal
      required:
        - str_val
        - bool_val
        - int_val
        - int32_val
        - num_val
        - float32_val
        - enum_val
        - date_val
        - date_time_val
        - any_val
        - int_enum_val
        - int32_enum_val
    simpleObjectWithType:
      allOf:
        - $ref: "#/components/schemas/simpleObject"
        - type: object
          properties:
            type:
              type: string
          required:
            - type
    simpleObjectWithNonStandardTypeName:
      allOf:
        - $ref: "#/components/schemas/simpleObject"
        - type: object
          properties:
            'obj.type':
              type: string
          required:
            - 'obj.type'
    deepObject:
      type: object
      properties:
        str:
          type: string
          example: "test"
        bool:
          type: boolean
          example: true
        int:
          type: integer
          example: 1
        num:
          type: number
          example: 1.1
        obj:
          $ref: "#/components/schemas/simpleObject"
        map:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/simpleObject"
          example: { "key": "...", "key2": "..." }
        arr:
          type: array
          items:
            $ref: "#/components/schemas/simpleObject"
          example: ["...", "..."]
        any:
          anyOf:
            - $ref: "#/components/schemas/simpleObject"
            - type: string
          example: "anyOf[0]"
        type:
          type: string
      required:
        - str
        - bool
        - int
        - num
        - obj
        - map
        - arr
        - any
    deepObjectCamelCase:
      type: object
      properties:
        str_val:
          type: string
          example: "test"
        bool_val:
          type: boolean
          example: true
        int_val:
          type: integer
          example: 1
        num_val:
          type: number
          example: 1.1
        obj_val:
          $ref: "#/components/schemas/simpleObjectCamelCase"
        map_val:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/simpleObjectCamelCase"
          example: { "key": "..." }
        arr_val:
          type: array
          items:
            $ref: "#/components/schemas/simpleObjectCamelCase"
          example: ["...", "..."]
        any_val:
          anyOf:
            - $ref: "#/components/schemas/simpleObjectCamelCase"
            - type: string
        type:
          type: string
      required:
        - str_val
        - bool_val
        - int_val
        - num_val
        - obj_val
        - map_val
        - arr_val
        - any_val
    deepObjectWithType:
      allOf:
        - $ref: "#/components/schemas/deepObject"
        - type: object
          properties:
            type:
              type: string
    deepObjectWithNonStandardTypeName:
      allOf:
        - $ref: "#/components/schemas/deepObject"
        - type: object
          properties:
            'obj.type':
              type: string
    complexNumberArrays:
      type: object
      properties:
        bigintArray:
            type: array
            items:
              type: integer
              format: bigint
        bigintStrArray:
            type: array
            items:
              type: string
              format: bigint
        decimalArray:
            type: array
            items:
              type: number
              format: decimal
        decimalStrArray:
            type: array
            items:
              type: string
              format: decimal
    complexNumberMaps:
      type: object
      properties:
        bigintMap:
          type: object
          additionalProperties:
            type: integer
            format: bigint
        bigintStrMap:
          type: object
          additionalProperties:
            type: string
            format: bigint
        decimalMap:
          type: object
          additionalProperties:
            type: number
            format: decimal
        decimalStrMap:
          type: object
          additionalProperties:
            type: string
            format: decimal
    fakerFormattedStrings:
      type: object
      description: A set of strings with format values that lead to relevant examples being generated for them
      properties:
        imageFormat:
          format: image
          type: string
          description: A field that will have a image url generated as example
        addressFormat:
          format: address
          type: string
          description: A field that will have an address generated as example
        timezoneFormat:
          format: timezone
          type: string
          description: A field that will have a timezone generated as example
        zipcodeFormat:
          format: zipcode
          type: string
          description: A field that will have a postal code generated as example
        jsonFormat:
          format: json
          type: string
          description: A field that will have a JSON generated as example
        uuidFormat:
          format: uuid
          type: string
          description: A field that will have a UUID generated as example
        domainFormat:
          format: domain
          type: string
          description: A field that will have a domain name generated as example
        emailFormat:
          format: email
          type: string
          description: A field that will have an email address generated as example
        ipv4Format:
          format: ipv4
          type: string
          description: A field that will have an IPv4 address generated as example
        ipv6Format:
          format: ipv6
          type: string
          description: A field that will have an IPv6 address generated as example
        macFormat:
          format: mac
          type: string
          description: A field that will have a MAC address generated as example
        passwordFormat:
          format: password
          type: string
          description: A field that will have a fake password generated as example
        urlFormat:
          format: url
          type: string
          description: A field that will have a URL generated as example
        phoneFormat:
          format: phone
          type: string
          description: A field that will have a phone number generated as example
        filenameFormat:
          format: filename
          type: string
          description: A field that will have a filename generated as example
        directoryFormat:
          format: directory
          type: string
          description: A field that will have a directory path generated as example
        filepathFormat:
          format: filepath
          type: string
          description: A field that will have a file path generated as example
        unknownFormat:
          format: unknown
          type: string
          description: A field that will have random words generated as example
    fakerStrings:
      type: object
      description: A set of strings with fieldnames that lead to relevant examples being generated for them
      properties:
        City:
          type: string
        country:
          type: string
        country_code:
          type: string
        latitude:
          type: string
        longitude:
          type: string
        street:
          type: string
        address:
          type: string
        timezone:
          type: string
        postal-code:
          type: string
        color:
          type: string
        price:
          type: string
        product:
          type: string
        material:
          type: string
        comment:
          type: string
        description:
          type: string
        company:
          type: string
        datatype:
          type: string
        json:
          type: string
        uuid:
          type: string
        account:
          type: string
        amount:
          type: string
        currency:
          type: string
        IBAN:
          type: string
        pin:
          type: string
        avatar:
          type: string
        domainName:
          type: string
        emailAddr:
          type: string
        IPv4:
          type: string
        IPv6:
          type: string
        mac:
          type: string
        password:
          type: string
        url:
          type: string
        username:
          type: string
        firstName:
          type: string
        fullName:
          type: string
        gender:
          type: string
        job:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        sex:
          type: string
        phone:
          type: string
        locale:
          type: string
        unit:
          type: string
        extension:
          type: string
        filename:
          type: string
        filetype:
          type: string
        directory:
          type: string
        filepath:
          type: string
        manufacturer:
          type: string
        model:
          type: string
        key:
          type: string
        ID:
          type: string
        default:
          type: string
    authServiceRequestBody:
      type: object
      properties:
        headerAuth:
          type: array
          items:
            type: object
            properties:
              headerName:
                type: string
              expectedValue:
                type: string
            required:
              - headerName
              - expectedValue
        basicAuth:
          type: object
          properties:
            username:
              type: string
            password:
              type: string
          required:
            - username
            - password
    arrValue:
      type: array
      items:
        $ref: "#/components/schemas/simpleObject"
    arrValueCamelCase:
      type: array
      items:
        $ref: "#/components/schemas/simpleObjectCamelCase"
    arrArrValue:
      type: array
      items:
        type: array
        items:
          $ref: "#/components/schemas/simpleObject"
    arrArrValueCamelCase:
      type: array
      items:
        type: array
        items:
          $ref: "#/components/schemas/simpleObjectCamelCase"
    arrObjValue:
      type: object
      properties:
        json:
          items:
            $ref: "#/components/schemas/simpleObject"
          type: array
          example: ["...", "..."]
        required:
          - json
    arrObjValueCamelCase:
      type: object
      properties:
        json:
          items:
            $ref: "#/components/schemas/simpleObjectCamelCase"
          type: array
          example: ["...", "..."]
        required:
          - json
    mapValue:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/simpleObject"
      example: { "mapElem1": "...", "mapElem2": "..." }
    mapValueCamelCase:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/simpleObjectCamelCase"
      example: { "mapElem1": "...", "mapElem2": "..." }
    mapMapValue:
      type: object
      additionalProperties:
        type: object
        additionalProperties:
          $ref: "#/components/schemas/simpleObject"
      example: { "mapElem1" : {"subMapElem1": "...", "subMapElem2": "..."}, "mapElem2" : {"subMapElem1": "...", "subMapElem2": "..."}}
    mapMapValueCamelCase:
      type: object
      additionalProperties:
        type: object
        additionalProperties:
          $ref: "#/components/schemas/simpleObjectCamelCase"
      example: { "mapElem1" : {"subMapElem1": "...", "subMapElem2": "..."}, "mapElem2" : {"subMapElem1": "...", "subMapElem2": "..."}}
    mapObjValue:
      type: object
      properties:
        json:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/simpleObject"
          example: { "mapElem1": "...", "mapElem2": "..." }
        required:
          - json
    mapObjValueCamelCase:
      type: object
      properties:
        json:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/simpleObjectCamelCase"
          example: { "mapElem1": "...", "mapElem2": "..." }
        required:
          - json
    arrMapValue:
      type: array
      items:
        type: object
        additionalProperties:
          $ref: "#/components/schemas/simpleObject"
      example: [{"mapElem1": "...", "mapElem2": "..."}, {"mapElem1": "...", "mapElem2": "..."}]
    arrMapValueCamelCase:
      type: array
      items:
        type: object
        additionalProperties:
          $ref: "#/components/schemas/simpleObjectCamelCase"
      example: [{"mapElem1": "...", "mapElem2": "..."}, {"mapElem1": "...", "mapElem2": "..."}]
    mapArrValue:
      type: object
      additionalProperties:
        type: array
        items:
          $ref: "#/components/schemas/simpleObject"
      example: { "mapElem1": ["...", "..."], "mapElem2": ["...", "..."] }
    mapArrValueCamelCase:
      type: object
      additionalProperties:
        type: array
        items:
          $ref: "#/components/schemas/simpleObjectCamelCase"
      example: { "mapElem1": ["...", "..."], "mapElem2": ["...", "..."] }
    arrPrimitiveValue:
      type: array
      items:
        type: string
      example: ["hello", "world"]
    mapPrimitiveValue:
      type: object
      additionalProperties:
        type: string
      example: { "mapElem1": "hello", "mapElem2": "world" }
    arrArrPrimitiveValue:
      type: array
      items:
        type: array
        items:
          type: string
      example: [["foo", "bar"], ["buzz", "bazz"]]
    mapMapPrimitiveValue:
      type: object
      additionalProperties:
        type: object
        additionalProperties:
          type: string
      example: { "mapElem1" : {"subMapElem1": "foo", "subMapElem2": "bar"}, "mapElem2" : {"subMapElem1": "buzz", "subMapElem2": "bazz"}}
    orphanedObject:
      x-speakeasy-include: true
      type: object
      properties:
        orphaned:
          type: string
        required:
          - orphaned
    validCircularReferenceObject:
      type: object
      properties:
        circular:
          type: array
          items:
            $ref: "#/components/schemas/validCircularReferenceObject"
    arrayCircularReferenceObject:
      type: array
      items:
        type: object
        properties:
          circular:
            $ref: "#/components/schemas/arrayCircularReferenceObject"
        required:
          - circular
    objectCircularReferenceObject:
      type: object
      properties:
        circular:
          $ref: "#/components/schemas/objectCircularReferenceObject"
    oneOfCircularReferenceObject:
      type: object
      properties:
        child:
          oneOf:
            - $ref: "#/components/schemas/oneOfCircularReferenceObject"
            - $ref: "#/components/schemas/simpleObject"
      required:
        - child
    conflictingEnum:
      type: object
      properties:
          object:
            type: string
            enum:
              - OBJ1
              - OBJ2
    deprecatedObject:
      type: object
      deprecated: true
      x-speakeasy-deprecation-message: This object is deprecated
      properties:
        str:
          type: string
    deprecatedFieldInObject:
      type: object
      properties:
        deprecatedField:
          type: string
          deprecated: true
          x-speakeasy-deprecation-replacement: newField
        deprecatedEnum:
          type: string
          enum: ["a", "b", "c"]
          deprecated: true
          x-speakeasy-deprecation-message: This enum is deprecated
        newField:
          type: string
    limitOffsetConfig:
      type: object
      properties:
        offset:
          type: integer
        page:
          type: integer
        limit:
          type: integer
    error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
          x-speakeasy-error-message: true
        type:
          $ref: "#/components/schemas/errorType"
    errorType:
      type: string
      enum:
        - "not_found"
        - "invalid"
        - "internal"
    errorType1:
      type: object
      properties:
        error: 
          type: string
      required:
        - error
    errorType2:
      type: object
      properties:
        error: 
          type: object
          properties:
            message:
              type: string
          required:
            - message
      required:
        - error
    complexNumberTypes:
      type: object
      properties:
        bigintStr:
          type: string
          format: bigint
          example: "9223372036854775808"
        bigint:
          type: integer
          format: bigint
          example: 8821239038968084
        decimal:
          type: number
          format: decimal
          example: 3.141592653589793
        decimalStr:
          type: string
          format: decimal
          example: "3.14159265358979344719667586"
      required:
        - bigintStr
        - bigint
        - decimal
        - decimalStr
    defaultsAndConsts:
      type: object
      properties:
        normalField:
          type: string
          example: "test"
        constStr:
          type: string
          const: "const"
        constStrDQuotes:
          type: string
          const: 'const with "double quotes"'
        constStrSQuotes:
          type: string
          const: "const with 'single quotes'"
        constStrNull:
          type: string
          const: null
          nullable: true
        constInt:
          type: integer
          const: 123
        constNum:
          type: number
          const: 123.456
        constBool:
          type: boolean
          const: true
        constDate:
          type: string
          format: date
          const: "2020-01-01"
        constDateTime:
          type: string
          format: date-time
          const: "2020-01-01T00:00:00Z"
        constEnumStr:
          type: string
          enum:
            - "one"
            - "two"
            - "three"
          const: "two"
        constEnumInt:
          type: integer
          enum:
            - 1
            - 2
            - 3
          const: 2
        constBigInt:
          type: integer
          format: bigint
          const: 9007199254740991
        constBigIntStr:
          type: string
          format: bigint
          const: "9223372036854775807"
        constDecimal:
          type: number
          format: decimal
          const: 3.141592653589793
        constDecimalStr:
          type: string
          format: decimal
          const: "3.141592653589793238462643383279"
        defaultStr:
          type: string
          default: "default"
        defaultStrDQuotes:
          type: string
          default: 'default with "double quotes"'
        defaultStrSQuotes:
          type: string
          default: "default with 'single quotes'"
        defaultStrNullable:
          type: string
          default: null
          nullable: true
        defaultStrOptional:
          type: string
          default: "default"
        defaultInt:
          type: integer
          default: 123
        defaultNum:
          type: number
          default: 123.456
        defaultBool:
          type: boolean
          default: true
        defaultDate:
          type: string
          format: date
          default: "2020-01-01"
        defaultDateTime:
          type: string
          format: date-time
          default: "2020-01-01T00:00:00Z"
        defaultEnumStr:
          type: string
          enum:
            - "one"
            - "two"
            - "three"
          default: "two"
        defaultEnumInt:
          type: integer
          enum:
            - 1
            - 2
            - 3
          default: 2
        defaultBigInt:
          type: integer
          format: bigint
          default: 9007199254740991
        defaultBigIntStr:
          type: string
          format: bigint
          default: "9223372036854775807"
        defaultDecimal:
          type: number
          format: decimal
          default: 3.141592653589793
        defaultDecimalStr:
          type: string
          format: decimal
          default: "3.141592653589793238462643383279"
      required:
        - normalField
        - constStr
        - constStrNull
        - constStrDQuotes
        - constStrSQuotes
        - constInt
        - constNum
        - constBool
        - constDate
        - constDateTime
        - constEnumStr
        - constEnumInt
        - constBigInt
        - constBigIntStr
        - constDecimal
        - constDecimalStr
        - defaultStr
        - defaultStrNullable
        - defaultStrDQuotes
        - defaultStrSQuotes
        - defaultInt
        - defaultNum
        - defaultBool
        - defaultDate
        - defaultDateTime
        - defaultEnumStr
        - defaultEnumInt
        - defaultBigInt
        - defaultBigIntStr
        - defaultDecimal
        - defaultDecimalStr
    defaultsAndConstsOutput:
      type: object
      properties:
        normalField:
          type: string
          example: "test"
        constStr:
          type: string
          example: "const"
        constStrDQuotes:
          type: string
          example: 'const with "double quotes"'
        constStrSQuotes:
          type: string
          example: "const with 'single quotes'"
        constStrNull:
          type: string
          nullable: true
          example: null
        constInt:
          type: integer
          example: 123
        constNum:
          type: number
          example: 123.456
        constBool:
          type: boolean
          example: true
        constDate:
          type: string
          format: date
          example: "2020-01-01"
        constDateTime:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00Z"
        constEnumStr:
          type: string
          enum:
            - "one"
            - "two"
            - "three"
          example: "two"
        constEnumInt:
          type: integer
          enum:
            - 1
            - 2
            - 3
          example: 2
        constBigInt:
          type: integer
          format: bigint
          example: 9007199254740991
        constBigIntStr:
          type: string
          format: bigint
          example: "9223372036854775807"
        constDecimal:
          type: number
          format: decimal
          example: 3.141592653589793
        constDecimalStr:
          type: string
          format: decimal
          example: "3.141592653589793238462643383279"
        defaultStr:
          type: string
          example: "default"
        defaultStrDQuotes:
          type: string
          example: 'default with "double quotes"'
        defaultStrSQuotes:
          type: string
          example: "default with 'single quotes'"
        defaultStrNullable:
          type: string
          nullable: true
          example: null
        defaultStrOptional:
          type: string
          example: "default"
        defaultInt:
          type: integer
          example: 123
        defaultNum:
          type: number
          example: 123.456
        defaultBool:
          type: boolean
          example: true
        defaultDate:
          type: string
          format: date
          example: "2020-01-01"
        defaultDateTime:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00Z"
        defaultEnumStr:
          type: string
          enum:
            - "one"
            - "two"
            - "three"
          example: "two"
        defaultEnumInt:
          type: integer
          enum:
            - 1
            - 2
            - 3
          example: 2
        defaultBigInt:
          type: integer
          format: bigint
          example: 9007199254740991
        defaultBigIntStr:
          type: string
          format: bigint
          example: "9223372036854775807"
        defaultDecimal:
          type: number
          format: decimal
          example: 3.141592653589793
        defaultDecimalStr:
          type: string
          format: decimal
          example: "3.141592653589793238462643383279"
      required:
        - normalField
        - constStr
        - constStrDQuotes
        - constStrSQuotes
        - constStrNull
        - constInt
        - constNum
        - constBool
        - constDate
        - constDateTime
        - constEnumStr
        - constEnumInt
        - constBigInt
        - constBigIntStr
        - constDecimal
        - constDecimalStr
        - defaultStr
        - defaultStrDQuotes
        - defaultStrSQuotes
        - defaultStrNullable
        - defaultInt
        - defaultNum
        - defaultBool
        - defaultDate
        - defaultDateTime
        - defaultEnumStr
        - defaultEnumInt
        - defaultBigInt
        - defaultBigIntStr
        - defaultDecimal
        - defaultDecimalStr
    objWithStringAdditionalProperties:
      type: object
      properties:
        normalField:
          type: string
      additionalProperties:
        type: string
      required:
        - normalField
    objWithAnyAdditionalProperties:
      type: object
      properties:
        normalField:
          type: string
      additionalProperties: true
    objWithComplexNumbersAdditionalProperties:
      type: object
      properties:
        normalField:
          type: string
      additionalProperties:
        type: string
        format: bigint
      required:
        - normalField
    objWithZeroValueComplexTypePtrs:
      type: object
      properties:
        date:
          type: string
          format: date
          description: "A date property."
          example: "2020-01-01"
        dateTime:
          type: string
          format: date-time
          description: "A date-time property."
          example: "2020-01-01T00:00:00Z"
        bigint:
          type: integer
          format: bigint
        bigintStr:
          type: string
          format: bigint
        decimal:
          type: number
          format: decimal
    objWithDateAdditionalProperties:
      type: object
      properties:
        normalField:
          type: string
      additionalProperties:
        type: string
        format: date
      required:
        - normalField
    objWithObjAdditionalProperties:
      type: object
      required:
        - datetime
        - AdditionalProperties
      properties:
        datetime:
          type: string
          format: date-time
        AdditionalProperties:
          type: array
          items:
            type: integer
      additionalProperties:
        $ref: "components.yaml#/components/schemas/simpleObject"
    jsonEvent:
      description: Represents a single event in a json stream
      type: object
      required: [data]
      properties:
        data:
          type: object
          required: [content]
          properties:
            content:
              type: string
    textEvent:
      description: Represents a single event in a text stream
      type: object
      required: [data]
      properties:
        data:
          type: string
    richStream:
      oneOf:
        - $ref: "#/components/schemas/richCompletionEvent"
        - $ref: "#/components/schemas/heartbeatEvent"
      discriminator:
        propertyName: event
        mapping:
          completion: "#/components/schemas/richCompletionEvent"
          heartbeat: "#/components/schemas/heartbeatEvent"
    richCompletionEvent:
      description: Represents a single event in a completion stream
      type: object
      required: [id, event, data]
      properties:
        id:
          type: string
        event:
          type: string
          const: completion
        data:
          $ref: "#/components/schemas/richCompletionEventData"
    richCompletionEventData:
      type: object
      required: [completion, stop_reason]
      properties:
        completion:
          type: string
        stop_reason:
          type: [string, "null"]
          enum: [stop_sequence, max_tokens, null]
        model:
          type: string
    heartbeatEvent: 
      description: Represents a single heartbeat event
      type: object
      required: [event, data]
      properties:
        event:
          type: string
          const: heartbeat
        data:
          type: string
        retry:
          type: integer
    chatCompletionResult:
      type: array
      items:
        oneOf:
          - $ref: "#/components/schemas/chatCompletionEvent"
          - $ref: "#/components/schemas/sentinelEvent"
    chatCompletionStream:
      oneOf:
        - $ref: "#/components/schemas/chatCompletionEvent"
        - $ref: "#/components/schemas/sentinelEvent"
    chatCompletionEvent:
      description: Represents a chat completion event which contains printable content
      type: object
      required: [data]
      properties:
        data:
          type: object
          required: [content]
          properties:
            content:
              type: string
    sentinelEvent:
      description: Represents the final event in an event stream
      type: object
      required: [data]
      properties:
        data:
          type: string
          const: "[DONE]"
    differentDataSchemas:
      description: Represents an event with different schemas for the data property
      type: object
      required: [id, event, data]
      properties:
        id:
          type: string
        event:
          type: string
          enum: [message, url]
        data:
          oneOf:
            - $ref: "#/components/schemas/messageEvent"
            - $ref: "#/components/schemas/urlEvent"
    messageEvent:
      type: object
      properties:
        content:
          type: string
      required:
        - content
    urlEvent:
      type: object
      properties:
        url:
          type: string
      required:
        - url
  responses:
    tokenAuthResponse:
      description: Successful authentication.
      content:
        application/json:
          schema:
            title: token
            type: object
            properties:
              authenticated:
                type: boolean
              token:
                type: string
            required:
              - authenticated
              - token
    simpleObjectFormResponse:
      description: OK
      content:
        application/json:
          schema:
            title: res
            type: object
            properties:
              headers:
                type: object
                properties:
                  Content-Type:
                    title: contentType
                    type: string
                    x-speakeasy-test-ignore: true
                required:
                  - Content-Type
              form:
                type: object
                properties:
                  str:
                    type: string
                    example: "test"
                  bool:
                    type: string
                    example: "true"
                  int:
                    type: string
                    example: "1"
                  int32:
                    type: string
                    example: "1"
                  num:
                    type: string
                    example: "1.1"
                  float32:
                    type: string
                    example: "1.1"
                  enum:
                    type: string
                    example: "one"
                  date:
                    type: string
                    example: "2020-01-01"
                  dateTime:
                    type: string
                    example: "2020-01-01T00:00:00.000001Z"
                  any:
                    type: string
                    example: "any"
                  strOpt:
                    type: string
                    example: "testOptional"
                  boolOpt:
                    type: string
                    example: "true"
                  intOptNull:
                    type: string
                  numOptNull:
                    type: string
                  intEnum:
                    type: string
                    example: "2"
                  int32Enum:
                    type: string
                    example: "55"
                  bigint:
                    type: string
                    example: "8821239038968084"
                  bigintStr:
                    type: string
                    example: "9223372036854775808"
                  decimal:
                    type: string
                    example: "3.141592653589793"
                  decimalStr:
                    type: string
                    example: "3.14159265358979344719667586"
                required:
                  - str
                  - bool
                  - int
                  - int32
                  - num
                  - float32
                  - enum
                  - date
                  - dateTime
                  - any
                  - intEnum
                  - int32Enum
            required:
              - form
              - headers
    deepObjectFormResponse:
      description: OK
      content:
        application/json:
          schema:
            title: res
            type: object
            properties:
              form:
                type: object
                properties:
                  str:
                    type: string
                    example: "test"
                  bool:
                    type: string
                    example: "true"
                  int:
                    type: string
                    example: "1"
                  num:
                    type: string
                    example: "1.1"
                  obj:
                    type: string
                    example: "{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.000001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"int\":1,\"int32\":1,\"int32Enum\":55,\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"}"
                  map:
                    type: string
                    example: "{\"key\":{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.000001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"int\":1,\"int32\":1,\"int32Enum\":55,\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"},\"key2\":{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.000001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"int\":1,\"int32\":1,\"int32Enum\":55,\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"}}"
                  arr:
                    type: string
                    example: "[{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.000001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"int\":1,\"int32\":1,\"int32Enum\":55,\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"},{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.000001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"int\":1,\"int32\":1,\"int32Enum\":55,\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"}]"
                required:
                  - str
                  - bool
                  - int
                  - num
                  - obj
                  - map
                  - arr
            required:
              - form
    paginationResponse:
      description: OK
      content:
        application/json:
          schema:
            title: res
            type: object
            properties:
              numPages:
                type: integer
              next:
                type: string
              resultArray:
                type: array
                items:
                  type: integer
            required:
              - numPages
              - resultArray
    paginationResponseNonNumeric:
      description: OK
      content:
        application/json:
          schema:
            title: res
            type: object
            properties:
              numPages:
                type: integer
              next:
                type: string
              resultArray:
                type: array
                items:
                  type: string
            required:
              - numPages
              - resultArray
  parameters:
    emptyObjectParam:
      name: emptyObject
      in: path
      required: true
      schema:
        type: object
        properties: {}
    strPathParam:
      name: strParam
      in: path
      required: true
      schema:
        type: string
        example: test
    boolPathParam:
      name: boolParam
      in: path
      required: true
      schema:
        type: boolean
        example: true
    intPathParam:
      name: intParam
      in: path
      required: true
      schema:
        type: integer
        example: 1
    numPathParam:
      name: numParam
      in: path
      required: true
      schema:
        type: number
        example: 1.1
    refQueryParamObjExploded:
      name: refObjParamExploded
      in: query
      explode: true
      schema:
        type: object
        properties:
          str:
            type: string
            example: test
          bool:
            type: boolean
            example: true
          int:
            type: integer
            example: 1
          num:
            type: number
            example: 1.1
        required:
          - str
          - bool
          - int
          - num
    refQueryParamObj:
      name: refObjParam
      in: query
      explode: false
      schema:
        type: object
        properties:
          str:
            type: string
            example: test
          bool:
            type: boolean
            example: true
          int:
            type: integer
            example: 1
          num:
            type: number
            example: 1.1
        required:
          - str
          - bool
          - int
          - num
    globalHiddenQueryParam:
      name: globalHiddenQueryParam
      in: query
      required: true
      schema:
        type: string
        example: hello
      x-speakeasy-globals-hidden: true
