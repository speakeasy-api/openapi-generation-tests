
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Openapi
{
    using Openapi.Models.Operations;
    using Openapi.Models.Shared;
    using Openapi.Utils;
    using System.Collections.Generic;
    using System.Net.Http.Headers;
    using System.Net.Http;
    using System.Threading.Tasks;
    using System;

    /// <summary>
    /// Endpoints for testing authentication.
    /// </summary>
    public interface IAuthNew
    {
        Task<ApiKeyAuthGlobalNewResponse> ApiKeyAuthGlobalNewAsync(AuthServiceRequestBody request, string? serverUrl = null);
        Task<AuthGlobalResponse> AuthGlobalAsync(AuthServiceRequestBody request, string? serverUrl = null);
        Task<BasicAuthNewResponse> BasicAuthNewAsync(BasicAuthNewSecurity security, AuthServiceRequestBody request, string? serverUrl = null);
        Task<MultipleMixedOptionsAuthResponse> MultipleMixedOptionsAuthAsync(MultipleMixedOptionsAuthSecurity security, AuthServiceRequestBody request, string? serverUrl = null);
        Task<MultipleMixedSchemeAuthResponse> MultipleMixedSchemeAuthAsync(MultipleMixedSchemeAuthSecurity security, AuthServiceRequestBody request, string? serverUrl = null);
        Task<MultipleOptionsWithMixedSchemesAuthResponse> MultipleOptionsWithMixedSchemesAuthAsync(MultipleOptionsWithMixedSchemesAuthSecurity security, AuthServiceRequestBody request, string? serverUrl = null);
        Task<MultipleOptionsWithSimpleSchemesAuthResponse> MultipleOptionsWithSimpleSchemesAuthAsync(MultipleOptionsWithSimpleSchemesAuthSecurity security, AuthServiceRequestBody request, string? serverUrl = null);
        Task<MultipleSimpleOptionsAuthResponse> MultipleSimpleOptionsAuthAsync(MultipleSimpleOptionsAuthSecurity security, AuthServiceRequestBody request, string? serverUrl = null);
        Task<MultipleSimpleSchemeAuthResponse> MultipleSimpleSchemeAuthAsync(MultipleSimpleSchemeAuthSecurity security, AuthServiceRequestBody request, string? serverUrl = null);
        Task<Oauth2AuthNewResponse> Oauth2AuthNewAsync(Oauth2AuthNewSecurity security, AuthServiceRequestBody request, string? serverUrl = null);
        Task<OpenIdConnectAuthNewResponse> OpenIdConnectAuthNewAsync(OpenIdConnectAuthNewSecurity security, AuthServiceRequestBody request, string? serverUrl = null);
    }

    /// <summary>
    /// Endpoints for testing authentication.
    /// </summary>
    public class AuthNew: IAuthNew
    {
        /// <summary>
        /// List of server URLs available for the apiKeyAuthGlobalNew operation.
        /// </summary>
        public static readonly string[] ApiKeyAuthGlobalNewServerList = {
            "http://localhost:35456",
        };
        /// <summary>
        /// List of server URLs available for the authGlobal operation.
        /// </summary>
        public static readonly string[] AuthGlobalServerList = {
            "http://localhost:35456",
        };
        /// <summary>
        /// List of server URLs available for the basicAuthNew operation.
        /// </summary>
        public static readonly string[] BasicAuthNewServerList = {
            "http://localhost:35456",
        };
        /// <summary>
        /// List of server URLs available for the multipleMixedOptionsAuth operation.
        /// </summary>
        public static readonly string[] MultipleMixedOptionsAuthServerList = {
            "http://localhost:35456",
        };
        /// <summary>
        /// List of server URLs available for the multipleMixedSchemeAuth operation.
        /// </summary>
        public static readonly string[] MultipleMixedSchemeAuthServerList = {
            "http://localhost:35456",
        };
        /// <summary>
        /// List of server URLs available for the multipleOptionsWithMixedSchemesAuth operation.
        /// </summary>
        public static readonly string[] MultipleOptionsWithMixedSchemesAuthServerList = {
            "http://localhost:35456",
        };
        /// <summary>
        /// List of server URLs available for the multipleOptionsWithSimpleSchemesAuth operation.
        /// </summary>
        public static readonly string[] MultipleOptionsWithSimpleSchemesAuthServerList = {
            "http://localhost:35456",
        };
        /// <summary>
        /// List of server URLs available for the multipleSimpleOptionsAuth operation.
        /// </summary>
        public static readonly string[] MultipleSimpleOptionsAuthServerList = {
            "http://localhost:35456",
        };
        /// <summary>
        /// List of server URLs available for the multipleSimpleSchemeAuth operation.
        /// </summary>
        public static readonly string[] MultipleSimpleSchemeAuthServerList = {
            "http://localhost:35456",
        };
        /// <summary>
        /// List of server URLs available for the oauth2AuthNew operation.
        /// </summary>
        public static readonly string[] Oauth2AuthNewServerList = {
            "http://localhost:35456",
        };
        /// <summary>
        /// List of server URLs available for the openIdConnectAuthNew operation.
        /// </summary>
        public static readonly string[] OpenIdConnectAuthNewServerList = {
            "http://localhost:35456",
        };
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.4.0";
        private const string _sdkGenVersion = "2.281.2";
        private const string _openapiDocVersion = "0.1.0";
        private const string _userAgent = "speakeasy-sdk/csharp 0.4.0 2.281.2 0.1.0 openapi";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _defaultClient;
        private Func<Security>? _securitySource;

        public AuthNew(ISpeakeasyHttpClient defaultClient, Func<Security>? securitySource, string serverUrl, SDKConfig config)
        {
            _defaultClient = defaultClient;
            _securitySource = securitySource;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }

        public async Task<ApiKeyAuthGlobalNewResponse> ApiKeyAuthGlobalNewAsync(AuthServiceRequestBody request, string? serverUrl = null)
        {
            string baseUrl = Utilities.TemplateUrl(ApiKeyAuthGlobalNewServerList[0], new Dictionary<string, string>(){
            });
            if (serverUrl != null)
            {
                baseUrl = serverUrl;
            }

            var urlString = baseUrl + "/auth#apiKeyAuthGlobal";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, false);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            var client = _defaultClient;
            if (_securitySource != null)
            {
                client = SecuritySerializer.Apply(_defaultClient, _securitySource);
            }

            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;

            var response = new ApiKeyAuthGlobalNewResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };

            if((response.StatusCode == 200) || (response.StatusCode == 401))
            {

                return response;
            }
            return response;
        }


        public async Task<AuthGlobalResponse> AuthGlobalAsync(AuthServiceRequestBody request, string? serverUrl = null)
        {
            string baseUrl = Utilities.TemplateUrl(AuthGlobalServerList[0], new Dictionary<string, string>(){
            });
            if (serverUrl != null)
            {
                baseUrl = serverUrl;
            }

            var urlString = baseUrl + "/auth#authGlobal";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, false);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            var client = _defaultClient;
            if (_securitySource != null)
            {
                client = SecuritySerializer.Apply(_defaultClient, _securitySource);
            }

            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;

            var response = new AuthGlobalResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };

            if((response.StatusCode == 200) || (response.StatusCode == 401))
            {

                return response;
            }
            return response;
        }


        public async Task<BasicAuthNewResponse> BasicAuthNewAsync(BasicAuthNewSecurity security, AuthServiceRequestBody request, string? serverUrl = null)
        {
            string baseUrl = Utilities.TemplateUrl(BasicAuthNewServerList[0], new Dictionary<string, string>(){
            });
            if (serverUrl != null)
            {
                baseUrl = serverUrl;
            }

            var urlString = baseUrl + "/auth#basicAuth";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, false);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            var client = SecuritySerializer.Apply(_defaultClient, () => security);

            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;

            var response = new BasicAuthNewResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };

            if((response.StatusCode == 200) || (response.StatusCode == 401))
            {

                return response;
            }
            return response;
        }


        public async Task<MultipleMixedOptionsAuthResponse> MultipleMixedOptionsAuthAsync(MultipleMixedOptionsAuthSecurity security, AuthServiceRequestBody request, string? serverUrl = null)
        {
            string baseUrl = Utilities.TemplateUrl(MultipleMixedOptionsAuthServerList[0], new Dictionary<string, string>(){
            });
            if (serverUrl != null)
            {
                baseUrl = serverUrl;
            }

            var urlString = baseUrl + "/auth#multipleMixedOptionsAuth";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, false);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            var client = SecuritySerializer.Apply(_defaultClient, () => security);

            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;

            var response = new MultipleMixedOptionsAuthResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };

            if((response.StatusCode == 200) || (response.StatusCode == 401))
            {

                return response;
            }
            return response;
        }


        public async Task<MultipleMixedSchemeAuthResponse> MultipleMixedSchemeAuthAsync(MultipleMixedSchemeAuthSecurity security, AuthServiceRequestBody request, string? serverUrl = null)
        {
            string baseUrl = Utilities.TemplateUrl(MultipleMixedSchemeAuthServerList[0], new Dictionary<string, string>(){
            });
            if (serverUrl != null)
            {
                baseUrl = serverUrl;
            }

            var urlString = baseUrl + "/auth#multipleMixedSchemeAuth";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, false);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            var client = SecuritySerializer.Apply(_defaultClient, () => security);

            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;

            var response = new MultipleMixedSchemeAuthResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };

            if((response.StatusCode == 200) || (response.StatusCode == 401))
            {

                return response;
            }
            return response;
        }


        public async Task<MultipleOptionsWithMixedSchemesAuthResponse> MultipleOptionsWithMixedSchemesAuthAsync(MultipleOptionsWithMixedSchemesAuthSecurity security, AuthServiceRequestBody request, string? serverUrl = null)
        {
            string baseUrl = Utilities.TemplateUrl(MultipleOptionsWithMixedSchemesAuthServerList[0], new Dictionary<string, string>(){
            });
            if (serverUrl != null)
            {
                baseUrl = serverUrl;
            }

            var urlString = baseUrl + "/auth#multipleOptionsWithMixedSchemesAuth";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, false);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            var client = SecuritySerializer.Apply(_defaultClient, () => security);

            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;

            var response = new MultipleOptionsWithMixedSchemesAuthResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };

            if((response.StatusCode == 200) || (response.StatusCode == 401))
            {

                return response;
            }
            return response;
        }


        public async Task<MultipleOptionsWithSimpleSchemesAuthResponse> MultipleOptionsWithSimpleSchemesAuthAsync(MultipleOptionsWithSimpleSchemesAuthSecurity security, AuthServiceRequestBody request, string? serverUrl = null)
        {
            string baseUrl = Utilities.TemplateUrl(MultipleOptionsWithSimpleSchemesAuthServerList[0], new Dictionary<string, string>(){
            });
            if (serverUrl != null)
            {
                baseUrl = serverUrl;
            }

            var urlString = baseUrl + "/auth#multipleOptionsWithSimpleSchemesAuth";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, false);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            var client = SecuritySerializer.Apply(_defaultClient, () => security);

            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;

            var response = new MultipleOptionsWithSimpleSchemesAuthResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };

            if((response.StatusCode == 200) || (response.StatusCode == 401))
            {

                return response;
            }
            return response;
        }


        public async Task<MultipleSimpleOptionsAuthResponse> MultipleSimpleOptionsAuthAsync(MultipleSimpleOptionsAuthSecurity security, AuthServiceRequestBody request, string? serverUrl = null)
        {
            string baseUrl = Utilities.TemplateUrl(MultipleSimpleOptionsAuthServerList[0], new Dictionary<string, string>(){
            });
            if (serverUrl != null)
            {
                baseUrl = serverUrl;
            }

            var urlString = baseUrl + "/auth#multipleSimpleOptionsAuth";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, false);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            var client = SecuritySerializer.Apply(_defaultClient, () => security);

            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;

            var response = new MultipleSimpleOptionsAuthResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };

            if((response.StatusCode == 200) || (response.StatusCode == 401))
            {

                return response;
            }
            return response;
        }


        public async Task<MultipleSimpleSchemeAuthResponse> MultipleSimpleSchemeAuthAsync(MultipleSimpleSchemeAuthSecurity security, AuthServiceRequestBody request, string? serverUrl = null)
        {
            string baseUrl = Utilities.TemplateUrl(MultipleSimpleSchemeAuthServerList[0], new Dictionary<string, string>(){
            });
            if (serverUrl != null)
            {
                baseUrl = serverUrl;
            }

            var urlString = baseUrl + "/auth#multipleSimpleSchemeAuth";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, false);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            var client = SecuritySerializer.Apply(_defaultClient, () => security);

            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;

            var response = new MultipleSimpleSchemeAuthResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };

            if((response.StatusCode == 200) || (response.StatusCode == 401))
            {

                return response;
            }
            return response;
        }


        public async Task<Oauth2AuthNewResponse> Oauth2AuthNewAsync(Oauth2AuthNewSecurity security, AuthServiceRequestBody request, string? serverUrl = null)
        {
            string baseUrl = Utilities.TemplateUrl(Oauth2AuthNewServerList[0], new Dictionary<string, string>(){
            });
            if (serverUrl != null)
            {
                baseUrl = serverUrl;
            }

            var urlString = baseUrl + "/auth#oauth2Auth";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, false);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            var client = SecuritySerializer.Apply(_defaultClient, () => security);

            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;

            var response = new Oauth2AuthNewResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };

            if((response.StatusCode == 200) || (response.StatusCode == 401))
            {

                return response;
            }
            return response;
        }


        public async Task<OpenIdConnectAuthNewResponse> OpenIdConnectAuthNewAsync(OpenIdConnectAuthNewSecurity security, AuthServiceRequestBody request, string? serverUrl = null)
        {
            string baseUrl = Utilities.TemplateUrl(OpenIdConnectAuthNewServerList[0], new Dictionary<string, string>(){
            });
            if (serverUrl != null)
            {
                baseUrl = serverUrl;
            }

            var urlString = baseUrl + "/auth#openIdConnectAuth";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, false);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            var client = SecuritySerializer.Apply(_defaultClient, () => security);

            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;

            var response = new OpenIdConnectAuthNewResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };

            if((response.StatusCode == 200) || (response.StatusCode == 401))
            {

                return response;
            }
            return response;
        }

    }
}