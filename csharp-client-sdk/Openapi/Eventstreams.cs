
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Openapi
{
    using Newtonsoft.Json;
    using Openapi.Models.Operations;
    using Openapi.Utils;
    using System.Collections.Generic;
    using System.Net.Http.Headers;
    using System.Net.Http;
    using System.Threading.Tasks;
    using System;

    /// <summary>
    /// Endpoints for testing server-sent events streaming
    /// </summary>
    public interface IEventstreams
    {
        Task<ChatResponse> ChatAsync(ChatRequestBody request, string? serverUrl = null);
        Task<JsonResponse> JsonAsync(string? serverUrl = null);
        Task<MultilineResponse> MultilineAsync(string? serverUrl = null);
        Task<RichResponse> RichAsync(string? serverUrl = null);
        Task<TextResponse> TextAsync(string? serverUrl = null);
    }

    /// <summary>
    /// Endpoints for testing server-sent events streaming
    /// </summary>
    public class Eventstreams: IEventstreams
    {
        /**
        * ChatServerList contains the list of server urls available to the SDK.
        */
        public static readonly string[] ChatServerList = {
            "http://localhost:35456",
        };

        /**
        * JsonServerList contains the list of server urls available to the SDK.
        */
        public static readonly string[] JsonServerList = {
            "http://localhost:35456",
        };

        /**
        * MultilineServerList contains the list of server urls available to the SDK.
        */
        public static readonly string[] MultilineServerList = {
            "http://localhost:35456",
        };

        /**
        * RichServerList contains the list of server urls available to the SDK.
        */
        public static readonly string[] RichServerList = {
            "http://localhost:35456",
        };

        /**
        * TextServerList contains the list of server urls available to the SDK.
        */
        public static readonly string[] TextServerList = {
            "http://localhost:35456",
        };

        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.4.0";
        private const string _sdkGenVersion = "2.233.6";
        private const string _openapiDocVersion = "0.1.0";
        private const string _userAgent = "speakeasy-sdk/csharp 0.4.0 2.233.6 0.1.0 openapi";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _defaultClient;
        private ISpeakeasyHttpClient _securityClient;

        public Eventstreams(ISpeakeasyHttpClient defaultClient, ISpeakeasyHttpClient securityClient, string serverUrl, SDKConfig config)
        {
            _defaultClient = defaultClient;
            _securityClient = securityClient;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }
        

        public async Task<ChatResponse> ChatAsync(ChatRequestBody request, string? serverUrl = null)
        {
            string baseUrl = Utilities.TemplateUrl(ChatServerList[0], new Dictionary<string, string>(){
            });
            if (serverUrl != null)
            {
                baseUrl = serverUrl;
            }
            var urlString = baseUrl + "/eventstreams/chat";
            
            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new ChatResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.ChatCompletionResult = JsonConvert.DeserializeObject<List<object>>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                if(Utilities.IsContentTypeMatch("text/event-stream",response.ContentType))
                {
                    response.Body = await httpResponse.Content.ReadAsByteArrayAsync();
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<JsonResponse> JsonAsync(string? serverUrl = null)
        {
            string baseUrl = Utilities.TemplateUrl(JsonServerList[0], new Dictionary<string, string>(){
            });
            if (serverUrl != null)
            {
                baseUrl = serverUrl;
            }
            var urlString = baseUrl + "/eventstreams/json";
            
            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new JsonResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("text/event-stream",response.ContentType))
                {
                    response.Body = await httpResponse.Content.ReadAsByteArrayAsync();
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<MultilineResponse> MultilineAsync(string? serverUrl = null)
        {
            string baseUrl = Utilities.TemplateUrl(MultilineServerList[0], new Dictionary<string, string>(){
            });
            if (serverUrl != null)
            {
                baseUrl = serverUrl;
            }
            var urlString = baseUrl + "/eventstreams/multiline";
            
            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new MultilineResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("text/event-stream",response.ContentType))
                {
                    response.Body = await httpResponse.Content.ReadAsByteArrayAsync();
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RichResponse> RichAsync(string? serverUrl = null)
        {
            string baseUrl = Utilities.TemplateUrl(RichServerList[0], new Dictionary<string, string>(){
            });
            if (serverUrl != null)
            {
                baseUrl = serverUrl;
            }
            var urlString = baseUrl + "/eventstreams/rich";
            
            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RichResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("text/event-stream",response.ContentType))
                {
                    response.Body = await httpResponse.Content.ReadAsByteArrayAsync();
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<TextResponse> TextAsync(string? serverUrl = null)
        {
            string baseUrl = Utilities.TemplateUrl(TextServerList[0], new Dictionary<string, string>(){
            });
            if (serverUrl != null)
            {
                baseUrl = serverUrl;
            }
            var urlString = baseUrl + "/eventstreams/text";
            
            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new TextResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("text/event-stream",response.ContentType))
                {
                    response.Body = await httpResponse.Content.ReadAsByteArrayAsync();
                }
                
                return response;
            }
            return response;
        }
        
    }
}