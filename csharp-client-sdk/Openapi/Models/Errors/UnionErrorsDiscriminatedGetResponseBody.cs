//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Openapi.Models.Errors
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using Openapi.Models.Errors;
    using Openapi.Utils;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    using System;
    

    public class UnionErrorsDiscriminatedGetResponseBodyType
    {
        private UnionErrorsDiscriminatedGetResponseBodyType(string value) { Value = value; }

        public string Value { get; private set; }
        
        public static UnionErrorsDiscriminatedGetResponseBodyType Tag1 { get { return new UnionErrorsDiscriminatedGetResponseBodyType("tag1"); } }
        public static UnionErrorsDiscriminatedGetResponseBodyType Tag2 { get { return new UnionErrorsDiscriminatedGetResponseBodyType("tag2"); } }
        public static UnionErrorsDiscriminatedGetResponseBodyType Null { get { return new UnionErrorsDiscriminatedGetResponseBodyType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(UnionErrorsDiscriminatedGetResponseBodyType v) { return v.Value; }
        public static UnionErrorsDiscriminatedGetResponseBodyType FromString(string v) {
            switch(v) {
                case "tag1": return Tag1;
                case "tag2": return Tag2;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for UnionErrorsDiscriminatedGetResponseBodyType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((UnionErrorsDiscriminatedGetResponseBodyType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    /// <summary>
    /// Error
    /// </summary>
    [JsonConverter(typeof(UnionErrorsDiscriminatedGetResponseBody.UnionErrorsDiscriminatedGetResponseBodyConverter))]
    public class UnionErrorsDiscriminatedGetResponseBody {
        public UnionErrorsDiscriminatedGetResponseBody(UnionErrorsDiscriminatedGetResponseBodyType type) {
            Type = type;
        }
        public TaggedError1? TaggedError1 { get; set; }
        public TaggedError2? TaggedError2 { get; set; }

        public UnionErrorsDiscriminatedGetResponseBodyType Type { get; set; }


        public static UnionErrorsDiscriminatedGetResponseBody CreateTag1(TaggedError1 tag1) {
            UnionErrorsDiscriminatedGetResponseBodyType typ = UnionErrorsDiscriminatedGetResponseBodyType.Tag1;
        
            UnionErrorsDiscriminatedGetResponseBody res = new UnionErrorsDiscriminatedGetResponseBody(typ);
            res.TaggedError1 = tag1;
            return res;
        }
        public static UnionErrorsDiscriminatedGetResponseBody CreateTag2(TaggedError2 tag2) {
            UnionErrorsDiscriminatedGetResponseBodyType typ = UnionErrorsDiscriminatedGetResponseBodyType.Tag2;
        
            UnionErrorsDiscriminatedGetResponseBody res = new UnionErrorsDiscriminatedGetResponseBody(typ);
            res.TaggedError2 = tag2;
            return res;
        }
        public static UnionErrorsDiscriminatedGetResponseBody CreateNull() {
            UnionErrorsDiscriminatedGetResponseBodyType typ = UnionErrorsDiscriminatedGetResponseBodyType.Null;
            return new UnionErrorsDiscriminatedGetResponseBody(typ);
        }

        public class UnionErrorsDiscriminatedGetResponseBodyConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(UnionErrorsDiscriminatedGetResponseBody);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                JObject jo = JObject.Load(reader);
                string discriminator = jo.GetValue("tag")?.ToString() ?? throw new ArgumentNullException("Could not find discriminator field.");
                if (discriminator == UnionErrorsDiscriminatedGetResponseBodyType.Tag1.ToString())
                {
                    TaggedError1? taggedError1 = ResponseBodyDeserializer.Deserialize<TaggedError1>(jo.ToString());
                    return CreateTag1(taggedError1!);
                }
                if (discriminator == UnionErrorsDiscriminatedGetResponseBodyType.Tag2.ToString())
                {
                    TaggedError2? taggedError2 = ResponseBodyDeserializer.Deserialize<TaggedError2>(jo.ToString());
                    return CreateTag2(taggedError2!);
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                UnionErrorsDiscriminatedGetResponseBody res = (UnionErrorsDiscriminatedGetResponseBody)value;
                if (UnionErrorsDiscriminatedGetResponseBodyType.FromString(res.Type).Equals(UnionErrorsDiscriminatedGetResponseBodyType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.TaggedError1 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.TaggedError1));
                    return;
                }
                if (res.TaggedError2 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.TaggedError2));
                    return;
                }

            }

        }

    }
}