
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Openapi.Models.Operations
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using Openapi.Utils;
    using System.Numerics;
    using System;
    

    public class UnionBigIntDecimalJsonType
    {
        private UnionBigIntDecimalJsonType(string value) { Value = value; }

        public string Value { get; private set; }
        public static UnionBigIntDecimalJsonType Bigint { get { return new UnionBigIntDecimalJsonType("bigint"); } }
        
        public static UnionBigIntDecimalJsonType Decimal { get { return new UnionBigIntDecimalJsonType("decimal"); } }
        
        public static UnionBigIntDecimalJsonType Null { get { return new UnionBigIntDecimalJsonType("null"); } } 

        public override string ToString() { return Value; }
        public static implicit operator String(UnionBigIntDecimalJsonType v) { return v.Value; }
        public static UnionBigIntDecimalJsonType FromString(string v) {
            switch(v) {
                case "bigint": return Bigint;
                case "decimal": return Decimal;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for UnionBigIntDecimalJsonType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((UnionBigIntDecimalJsonType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    

    [JsonConverter(typeof(UnionBigIntDecimalJson.UnionBigIntDecimalJsonConverter))]
    public class UnionBigIntDecimalJson {
        public UnionBigIntDecimalJson(UnionBigIntDecimalJsonType type) {
            Type = type;
        }
        public BigInteger? Bigint { get; set; } 
        public decimal? Decimal { get; set; } 

        public UnionBigIntDecimalJsonType Type {get; set; }


        public static UnionBigIntDecimalJson CreateBigint(BigInteger bigint) {
            UnionBigIntDecimalJsonType typ = UnionBigIntDecimalJsonType.Bigint;

            UnionBigIntDecimalJson res = new UnionBigIntDecimalJson(typ);
            res.Bigint = bigint;
            return res;
        }

        public static UnionBigIntDecimalJson CreateDecimal(decimal decimalT) {
            UnionBigIntDecimalJsonType typ = UnionBigIntDecimalJsonType.Decimal;

            UnionBigIntDecimalJson res = new UnionBigIntDecimalJson(typ);
            res.Decimal = decimalT;
            return res;
        }

        public static UnionBigIntDecimalJson CreateNull() {
            UnionBigIntDecimalJsonType typ = UnionBigIntDecimalJsonType.Null;
            return new UnionBigIntDecimalJson(typ);
        }

        public class UnionBigIntDecimalJsonConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(UnionBigIntDecimalJson);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            { 
                var json = JRaw.Create(reader).ToString();

                if (json == "null") {
                    return null;
                }
                try
                {
                    BigInteger? bigint = JsonConvert.DeserializeObject<BigInteger>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(BigInteger), "string")});
                    return new UnionBigIntDecimalJson(UnionBigIntDecimalJsonType.Bigint) {
                        Bigint = bigint
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    decimal? decimalVar = JsonConvert.DeserializeObject<decimal>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(decimal), "string")});
                    return new UnionBigIntDecimalJson(UnionBigIntDecimalJsonType.Decimal) {
                        Decimal = decimalVar
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                UnionBigIntDecimalJson res = (UnionBigIntDecimalJson)value;
                if (UnionBigIntDecimalJsonType.FromString(res.Type).Equals(UnionBigIntDecimalJsonType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.Bigint != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Bigint));
                    return;
                }
                if (res.Decimal != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Decimal));
                    return;
                }

            }
        }

    }


}