//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Openapi.Models.Shared
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using Openapi.Models.Shared;
    using Openapi.Utils;
    using System.Numerics;
    using System;
    

    public class ChildType
    {
        private ChildType(string value) { Value = value; }

        public string Value { get; private set; }
        public static ChildType OneOfCircularReferenceObject { get { return new ChildType("oneOfCircularReferenceObject"); } }
        
        public static ChildType SimpleObject { get { return new ChildType("simpleObject"); } }
        
        public static ChildType Null { get { return new ChildType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(ChildType v) { return v.Value; }
        public static ChildType FromString(string v) {
            switch(v) {
                case "oneOfCircularReferenceObject": return OneOfCircularReferenceObject;
                case "simpleObject": return SimpleObject;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for ChildType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((ChildType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    

    [JsonConverter(typeof(Child.ChildConverter))]
    public class Child {
        public Child(ChildType type) {
            Type = type;
        }
        public OneOfCircularReferenceObject? OneOfCircularReferenceObject { get; set; } 
        public SimpleObject? SimpleObject { get; set; } 

        public ChildType Type { get; set; }


        public static Child CreateOneOfCircularReferenceObject(OneOfCircularReferenceObject oneOfCircularReferenceObject) {
            ChildType typ = ChildType.OneOfCircularReferenceObject;

            Child res = new Child(typ);
            res.OneOfCircularReferenceObject = oneOfCircularReferenceObject;
            return res;
        }

        public static Child CreateSimpleObject(SimpleObject simpleObject) {
            ChildType typ = ChildType.SimpleObject;

            Child res = new Child(typ);
            res.SimpleObject = simpleObject;
            return res;
        }

        public static Child CreateNull() {
            ChildType typ = ChildType.Null;
            return new Child(typ);
        }

        public class ChildConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(Child);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            { 
                var json = JRaw.Create(reader).ToString();

                if (json == "null") {
                    return null;
                }
                try
                {
                    OneOfCircularReferenceObject? oneOfCircularReferenceObject = ResponseBodyDeserializer.Deserialize<OneOfCircularReferenceObject>(json, missingMemberHandling: MissingMemberHandling.Error);
                    return new Child(ChildType.OneOfCircularReferenceObject) {
                        OneOfCircularReferenceObject = oneOfCircularReferenceObject
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    SimpleObject? simpleObject = ResponseBodyDeserializer.Deserialize<SimpleObject>(json, missingMemberHandling: MissingMemberHandling.Error);
                    return new Child(ChildType.SimpleObject) {
                        SimpleObject = simpleObject
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                Child res = (Child)value;
                if (ChildType.FromString(res.Type).Equals(ChildType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.OneOfCircularReferenceObject != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.OneOfCircularReferenceObject));
                    return;
                }
                if (res.SimpleObject != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.SimpleObject));
                    return;
                }

            }
        }

    }

}