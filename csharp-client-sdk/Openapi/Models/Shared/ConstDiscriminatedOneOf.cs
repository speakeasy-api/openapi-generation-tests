//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Openapi.Models.Shared
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using Openapi.Models.Shared;
    using Openapi.Utils;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    

    public class ConstDiscriminatedOneOfType
    {
        private ConstDiscriminatedOneOfType(string value) { Value = value; }

        public string Value { get; private set; }
        
        public static ConstDiscriminatedOneOfType Tag1 { get { return new ConstDiscriminatedOneOfType("tag1"); } }
        public static ConstDiscriminatedOneOfType Tag2 { get { return new ConstDiscriminatedOneOfType("tag2"); } }
        public static ConstDiscriminatedOneOfType Null { get { return new ConstDiscriminatedOneOfType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(ConstDiscriminatedOneOfType v) { return v.Value; }
        public static ConstDiscriminatedOneOfType FromString(string v) {
            switch(v) {
                case "tag1": return Tag1;
                case "tag2": return Tag2;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for ConstDiscriminatedOneOfType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((ConstDiscriminatedOneOfType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(ConstDiscriminatedOneOf.ConstDiscriminatedOneOfConverter))]
    public class ConstDiscriminatedOneOf {
        public ConstDiscriminatedOneOf(ConstDiscriminatedOneOfType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public ConstObject1? ConstObject1 { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public ConstObject2? ConstObject2 { get; set; }

        public ConstDiscriminatedOneOfType Type { get; set; }


        public static ConstDiscriminatedOneOf CreateTag1(ConstObject1 tag1) {
            ConstDiscriminatedOneOfType typ = ConstDiscriminatedOneOfType.Tag1;
        
            ConstDiscriminatedOneOf res = new ConstDiscriminatedOneOf(typ);
            res.ConstObject1 = tag1;
            return res;
        }
        public static ConstDiscriminatedOneOf CreateTag2(ConstObject2 tag2) {
            ConstDiscriminatedOneOfType typ = ConstDiscriminatedOneOfType.Tag2;
        
            ConstDiscriminatedOneOf res = new ConstDiscriminatedOneOf(typ);
            res.ConstObject2 = tag2;
            return res;
        }
        public static ConstDiscriminatedOneOf CreateNull() {
            ConstDiscriminatedOneOfType typ = ConstDiscriminatedOneOfType.Null;
            return new ConstDiscriminatedOneOf(typ);
        }

        public class ConstDiscriminatedOneOfConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(ConstDiscriminatedOneOf);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                JObject jo = JObject.Load(reader);
                string discriminator = jo.GetValue("tag")?.ToString() ?? throw new ArgumentNullException("Could not find discriminator field.");
                if (discriminator == ConstDiscriminatedOneOfType.Tag1.ToString())
                {
                    ConstObject1? constObject1 = ResponseBodyDeserializer.Deserialize<ConstObject1>(jo.ToString());
                    return CreateTag1(constObject1!);
                }
                if (discriminator == ConstDiscriminatedOneOfType.Tag2.ToString())
                {
                    ConstObject2? constObject2 = ResponseBodyDeserializer.Deserialize<ConstObject2>(jo.ToString());
                    return CreateTag2(constObject2!);
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                ConstDiscriminatedOneOf res = (ConstDiscriminatedOneOf)value;
                if (ConstDiscriminatedOneOfType.FromString(res.Type).Equals(ConstDiscriminatedOneOfType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.ConstObject1 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.ConstObject1));
                    return;
                }
                if (res.ConstObject2 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.ConstObject2));
                    return;
                }

            }

        }

    }
}