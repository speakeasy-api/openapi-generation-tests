//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Openapi.Models.Shared
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using Openapi.Models.Shared;
    using Openapi.Utils;
    using System.Numerics;
    using System;
    

    public class DeepObjectWithTypeAnyType
    {
        private DeepObjectWithTypeAnyType(string value) { Value = value; }

        public string Value { get; private set; }
        public static DeepObjectWithTypeAnyType SimpleObject { get { return new DeepObjectWithTypeAnyType("simpleObject"); } }
        
        public static DeepObjectWithTypeAnyType Str { get { return new DeepObjectWithTypeAnyType("str"); } }
        
        public static DeepObjectWithTypeAnyType Null { get { return new DeepObjectWithTypeAnyType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(DeepObjectWithTypeAnyType v) { return v.Value; }
        public static DeepObjectWithTypeAnyType FromString(string v) {
            switch(v) {
                case "simpleObject": return SimpleObject;
                case "str": return Str;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for DeepObjectWithTypeAnyType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((DeepObjectWithTypeAnyType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    

    [JsonConverter(typeof(DeepObjectWithTypeAny.DeepObjectWithTypeAnyConverter))]
    public class DeepObjectWithTypeAny {
        public DeepObjectWithTypeAny(DeepObjectWithTypeAnyType type) {
            Type = type;
        }
        public SimpleObject? SimpleObject { get; set; } 
        public string? Str { get; set; } 

        public DeepObjectWithTypeAnyType Type { get; set; }


        public static DeepObjectWithTypeAny CreateSimpleObject(SimpleObject simpleObject) {
            DeepObjectWithTypeAnyType typ = DeepObjectWithTypeAnyType.SimpleObject;

            DeepObjectWithTypeAny res = new DeepObjectWithTypeAny(typ);
            res.SimpleObject = simpleObject;
            return res;
        }

        public static DeepObjectWithTypeAny CreateStr(string str) {
            DeepObjectWithTypeAnyType typ = DeepObjectWithTypeAnyType.Str;

            DeepObjectWithTypeAny res = new DeepObjectWithTypeAny(typ);
            res.Str = str;
            return res;
        }

        public static DeepObjectWithTypeAny CreateNull() {
            DeepObjectWithTypeAnyType typ = DeepObjectWithTypeAnyType.Null;
            return new DeepObjectWithTypeAny(typ);
        }

        public class DeepObjectWithTypeAnyConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(DeepObjectWithTypeAny);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            { 
                var json = JRaw.Create(reader).ToString();

                if (json == "null") {
                    return null;
                }
                try
                {
                    SimpleObject? simpleObject = ResponseBodyDeserializer.Deserialize<SimpleObject>(json, missingMemberHandling: MissingMemberHandling.Error);
                    return new DeepObjectWithTypeAny(DeepObjectWithTypeAnyType.SimpleObject) {
                        SimpleObject = simpleObject
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                if (json[0] == '"' && json[^1] == '"'){
                    return new DeepObjectWithTypeAny(DeepObjectWithTypeAnyType.Str) {
                        Str = json[1..^1]
                    };
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                DeepObjectWithTypeAny res = (DeepObjectWithTypeAny)value;
                if (DeepObjectWithTypeAnyType.FromString(res.Type).Equals(DeepObjectWithTypeAnyType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.SimpleObject != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.SimpleObject));
                    return;
                }
                if (res.Str != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Str));
                    return;
                }

            }
        }

    }

}