//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Openapi.Models.Shared
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using Openapi.Models.Shared;
    using Openapi.Utils;
    using System.Numerics;
    using System;
    

    public class ExampleVehicleType
    {
        private ExampleVehicleType(string value) { Value = value; }

        public string Value { get; private set; }
        public static ExampleVehicleType ExampleBoat { get { return new ExampleVehicleType("ExampleBoat"); } }
        
        public static ExampleVehicleType ExampleCar { get { return new ExampleVehicleType("ExampleCar"); } }
        
        public static ExampleVehicleType Null { get { return new ExampleVehicleType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(ExampleVehicleType v) { return v.Value; }
        public static ExampleVehicleType FromString(string v) {
            switch(v) {
                case "ExampleBoat": return ExampleBoat;
                case "ExampleCar": return ExampleCar;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for ExampleVehicleType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((ExampleVehicleType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    

    [JsonConverter(typeof(ExampleVehicle.ExampleVehicleConverter))]
    public class ExampleVehicle {
        public ExampleVehicle(ExampleVehicleType type) {
            Type = type;
        }
        public ExampleBoat? ExampleBoat { get; set; } 
        public ExampleCar? ExampleCar { get; set; } 

        public ExampleVehicleType Type { get; set; }


        public static ExampleVehicle CreateExampleBoat(ExampleBoat exampleBoat) {
            ExampleVehicleType typ = ExampleVehicleType.ExampleBoat;

            ExampleVehicle res = new ExampleVehicle(typ);
            res.ExampleBoat = exampleBoat;
            return res;
        }

        public static ExampleVehicle CreateExampleCar(ExampleCar exampleCar) {
            ExampleVehicleType typ = ExampleVehicleType.ExampleCar;

            ExampleVehicle res = new ExampleVehicle(typ);
            res.ExampleCar = exampleCar;
            return res;
        }

        public static ExampleVehicle CreateNull() {
            ExampleVehicleType typ = ExampleVehicleType.Null;
            return new ExampleVehicle(typ);
        }

        public class ExampleVehicleConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(ExampleVehicle);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            { 
                var json = JRaw.Create(reader).ToString();

                if (json == "null") {
                    return null;
                }
                try
                {
                    ExampleBoat? exampleBoat = ResponseBodyDeserializer.Deserialize<ExampleBoat>(json, missingMemberHandling: MissingMemberHandling.Error);
                    return new ExampleVehicle(ExampleVehicleType.ExampleBoat) {
                        ExampleBoat = exampleBoat
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    ExampleCar? exampleCar = ResponseBodyDeserializer.Deserialize<ExampleCar>(json, missingMemberHandling: MissingMemberHandling.Error);
                    return new ExampleVehicle(ExampleVehicleType.ExampleCar) {
                        ExampleCar = exampleCar
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                ExampleVehicle res = (ExampleVehicle)value;
                if (ExampleVehicleType.FromString(res.Type).Equals(ExampleVehicleType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.ExampleBoat != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.ExampleBoat));
                    return;
                }
                if (res.ExampleCar != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.ExampleCar));
                    return;
                }

            }
        }

    }

}