//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Openapi.Models.Shared
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using Openapi.Utils;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    using System;
    

    public class NullableOneOfTypeInObjectNullableOneOfTwoType
    {
        private NullableOneOfTypeInObjectNullableOneOfTwoType(string value) { Value = value; }

        public string Value { get; private set; }
        public static NullableOneOfTypeInObjectNullableOneOfTwoType Boolean { get { return new NullableOneOfTypeInObjectNullableOneOfTwoType("boolean"); } }
        
        public static NullableOneOfTypeInObjectNullableOneOfTwoType Integer { get { return new NullableOneOfTypeInObjectNullableOneOfTwoType("integer"); } }
        
        public static NullableOneOfTypeInObjectNullableOneOfTwoType Null { get { return new NullableOneOfTypeInObjectNullableOneOfTwoType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(NullableOneOfTypeInObjectNullableOneOfTwoType v) { return v.Value; }
        public static NullableOneOfTypeInObjectNullableOneOfTwoType FromString(string v) {
            switch(v) {
                case "boolean": return Boolean;
                case "integer": return Integer;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for NullableOneOfTypeInObjectNullableOneOfTwoType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((NullableOneOfTypeInObjectNullableOneOfTwoType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(NullableOneOfTypeInObjectNullableOneOfTwo.NullableOneOfTypeInObjectNullableOneOfTwoConverter))]
    public class NullableOneOfTypeInObjectNullableOneOfTwo {
        public NullableOneOfTypeInObjectNullableOneOfTwo(NullableOneOfTypeInObjectNullableOneOfTwoType type) {
            Type = type;
        }
        public bool? Boolean { get; set; }
        public long? Integer { get; set; }

        public NullableOneOfTypeInObjectNullableOneOfTwoType Type { get; set; }


        public static NullableOneOfTypeInObjectNullableOneOfTwo CreateBoolean(bool boolean) {
            NullableOneOfTypeInObjectNullableOneOfTwoType typ = NullableOneOfTypeInObjectNullableOneOfTwoType.Boolean;

            NullableOneOfTypeInObjectNullableOneOfTwo res = new NullableOneOfTypeInObjectNullableOneOfTwo(typ);
            res.Boolean = boolean;
            return res;
        }

        public static NullableOneOfTypeInObjectNullableOneOfTwo CreateInteger(long integer) {
            NullableOneOfTypeInObjectNullableOneOfTwoType typ = NullableOneOfTypeInObjectNullableOneOfTwoType.Integer;

            NullableOneOfTypeInObjectNullableOneOfTwo res = new NullableOneOfTypeInObjectNullableOneOfTwo(typ);
            res.Integer = integer;
            return res;
        }

        public static NullableOneOfTypeInObjectNullableOneOfTwo CreateNull() {
            NullableOneOfTypeInObjectNullableOneOfTwoType typ = NullableOneOfTypeInObjectNullableOneOfTwoType.Null;
            return new NullableOneOfTypeInObjectNullableOneOfTwo(typ);
        }

        public class NullableOneOfTypeInObjectNullableOneOfTwoConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(NullableOneOfTypeInObjectNullableOneOfTwo);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    var converted = Convert.ToBoolean(json);
                    return new NullableOneOfTypeInObjectNullableOneOfTwo(NullableOneOfTypeInObjectNullableOneOfTwoType.Boolean)
                    {
                        Boolean = converted
                    };
                }
                catch (System.FormatException)
                {
                    // try next option
                }

                try
                {
                    var converted = Convert.ToInt64(json);
                    return new NullableOneOfTypeInObjectNullableOneOfTwo(NullableOneOfTypeInObjectNullableOneOfTwoType.Integer)
                    {
                        Integer = converted
                    };
                }
                catch (System.FormatException)
                {
                    // try next option
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                NullableOneOfTypeInObjectNullableOneOfTwo res = (NullableOneOfTypeInObjectNullableOneOfTwo)value;
                if (NullableOneOfTypeInObjectNullableOneOfTwoType.FromString(res.Type).Equals(NullableOneOfTypeInObjectNullableOneOfTwoType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.Boolean != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Boolean));
                    return;
                }
                if (res.Integer != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Integer));
                    return;
                }

            }

        }

    }
}