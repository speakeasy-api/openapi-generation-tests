//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Openapi.Models.Shared
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using Openapi.Models.Shared;
    using Openapi.Utils;
    using System.Numerics;
    using System;
    

    public class OneOfOverlappingObjectsType
    {
        private OneOfOverlappingObjectsType(string value) { Value = value; }

        public string Value { get; private set; }
        public static OneOfOverlappingObjectsType Obj1 { get { return new OneOfOverlappingObjectsType("obj1"); } }
        
        public static OneOfOverlappingObjectsType Obj2 { get { return new OneOfOverlappingObjectsType("obj2"); } }
        
        public static OneOfOverlappingObjectsType Null { get { return new OneOfOverlappingObjectsType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(OneOfOverlappingObjectsType v) { return v.Value; }
        public static OneOfOverlappingObjectsType FromString(string v) {
            switch(v) {
                case "obj1": return Obj1;
                case "obj2": return Obj2;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for OneOfOverlappingObjectsType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((OneOfOverlappingObjectsType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    

    [JsonConverter(typeof(OneOfOverlappingObjects.OneOfOverlappingObjectsConverter))]
    public class OneOfOverlappingObjects {
        public OneOfOverlappingObjects(OneOfOverlappingObjectsType type) {
            Type = type;
        }
        public Obj1? Obj1 { get; set; } 
        public Obj2? Obj2 { get; set; } 

        public OneOfOverlappingObjectsType Type { get; set; }


        public static OneOfOverlappingObjects CreateObj1(Obj1 obj1) {
            OneOfOverlappingObjectsType typ = OneOfOverlappingObjectsType.Obj1;

            OneOfOverlappingObjects res = new OneOfOverlappingObjects(typ);
            res.Obj1 = obj1;
            return res;
        }

        public static OneOfOverlappingObjects CreateObj2(Obj2 obj2) {
            OneOfOverlappingObjectsType typ = OneOfOverlappingObjectsType.Obj2;

            OneOfOverlappingObjects res = new OneOfOverlappingObjects(typ);
            res.Obj2 = obj2;
            return res;
        }

        public static OneOfOverlappingObjects CreateNull() {
            OneOfOverlappingObjectsType typ = OneOfOverlappingObjectsType.Null;
            return new OneOfOverlappingObjects(typ);
        }

        public class OneOfOverlappingObjectsConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(OneOfOverlappingObjects);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            { 
                var json = JRaw.Create(reader).ToString();

                if (json == "null") {
                    return null;
                }
                try
                {
                    Obj1? obj1 = ResponseBodyDeserializer.Deserialize<Obj1>(json, missingMemberHandling: MissingMemberHandling.Error);
                    return new OneOfOverlappingObjects(OneOfOverlappingObjectsType.Obj1) {
                        Obj1 = obj1
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    Obj2? obj2 = ResponseBodyDeserializer.Deserialize<Obj2>(json, missingMemberHandling: MissingMemberHandling.Error);
                    return new OneOfOverlappingObjects(OneOfOverlappingObjectsType.Obj2) {
                        Obj2 = obj2
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                OneOfOverlappingObjects res = (OneOfOverlappingObjects)value;
                if (OneOfOverlappingObjectsType.FromString(res.Type).Equals(OneOfOverlappingObjectsType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.Obj1 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Obj1));
                    return;
                }
                if (res.Obj2 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Obj2));
                    return;
                }

            }
        }

    }

}