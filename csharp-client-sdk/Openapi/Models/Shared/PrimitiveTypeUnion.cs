
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Openapi.Models.Shared
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using Openapi.Utils;
    using System.Numerics;
    using System;
    

    public class PrimitiveTypeUnionType
    {
        private PrimitiveTypeUnionType(string value) { Value = value; }

        public string Value { get; private set; }
        public static PrimitiveTypeUnionType Str { get { return new PrimitiveTypeUnionType("str"); } }
        
        public static PrimitiveTypeUnionType Integer { get { return new PrimitiveTypeUnionType("integer"); } }
        
        public static PrimitiveTypeUnionType Int32 { get { return new PrimitiveTypeUnionType("int32"); } }
        
        public static PrimitiveTypeUnionType Number { get { return new PrimitiveTypeUnionType("number"); } }
        
        public static PrimitiveTypeUnionType Float32 { get { return new PrimitiveTypeUnionType("float32"); } }
        
        public static PrimitiveTypeUnionType Boolean { get { return new PrimitiveTypeUnionType("boolean"); } }
        
        public static PrimitiveTypeUnionType Null { get { return new PrimitiveTypeUnionType("null"); } } 

        public override string ToString() { return Value; }
        public static implicit operator String(PrimitiveTypeUnionType v) { return v.Value; }
        public static PrimitiveTypeUnionType FromString(string v) {
            switch(v) {
                case "str": return Str;
                case "integer": return Integer;
                case "int32": return Int32;
                case "number": return Number;
                case "float32": return Float32;
                case "boolean": return Boolean;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for PrimitiveTypeUnionType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((PrimitiveTypeUnionType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    

    [JsonConverter(typeof(PrimitiveTypeUnion.PrimitiveTypeUnionConverter))]
    public class PrimitiveTypeUnion {
        public PrimitiveTypeUnion(PrimitiveTypeUnionType type) {
            Type = type;
        }
        public string? Str { get; set; } 
        public long? Integer { get; set; } 
        public int? Int32 { get; set; } 
        public double? Number { get; set; } 
        public float? Float32 { get; set; } 
        public bool? Boolean { get; set; } 

        public PrimitiveTypeUnionType Type {get; set; }


        public static PrimitiveTypeUnion CreateStr(string str) {
            PrimitiveTypeUnionType typ = PrimitiveTypeUnionType.Str;

            PrimitiveTypeUnion res = new PrimitiveTypeUnion(typ);
            res.Str = str;
            return res;
        }

        public static PrimitiveTypeUnion CreateInteger(long integer) {
            PrimitiveTypeUnionType typ = PrimitiveTypeUnionType.Integer;

            PrimitiveTypeUnion res = new PrimitiveTypeUnion(typ);
            res.Integer = integer;
            return res;
        }

        public static PrimitiveTypeUnion CreateInt32(int int32) {
            PrimitiveTypeUnionType typ = PrimitiveTypeUnionType.Int32;

            PrimitiveTypeUnion res = new PrimitiveTypeUnion(typ);
            res.Int32 = int32;
            return res;
        }

        public static PrimitiveTypeUnion CreateNumber(double number) {
            PrimitiveTypeUnionType typ = PrimitiveTypeUnionType.Number;

            PrimitiveTypeUnion res = new PrimitiveTypeUnion(typ);
            res.Number = number;
            return res;
        }

        public static PrimitiveTypeUnion CreateFloat32(float float32) {
            PrimitiveTypeUnionType typ = PrimitiveTypeUnionType.Float32;

            PrimitiveTypeUnion res = new PrimitiveTypeUnion(typ);
            res.Float32 = float32;
            return res;
        }

        public static PrimitiveTypeUnion CreateBoolean(bool boolean) {
            PrimitiveTypeUnionType typ = PrimitiveTypeUnionType.Boolean;

            PrimitiveTypeUnion res = new PrimitiveTypeUnion(typ);
            res.Boolean = boolean;
            return res;
        }

        public static PrimitiveTypeUnion CreateNull() {
            PrimitiveTypeUnionType typ = PrimitiveTypeUnionType.Null;
            return new PrimitiveTypeUnion(typ);
        }

        public class PrimitiveTypeUnionConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(PrimitiveTypeUnion);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            { 
                var json = JRaw.Create(reader).ToString();

                if (json == "null") {
                    return null;
                }
                if (json[0] == '"' && json[^1] == '"'){
                    return new PrimitiveTypeUnion(PrimitiveTypeUnionType.Str) {
                        Str = json[1..^1]
                    };
                } 
                try {
                    var converted = Convert.ToInt64(json);
                    return new PrimitiveTypeUnion(PrimitiveTypeUnionType.Integer) {
                        Integer = converted
                    };
                } catch (System.FormatException) {
                    // try next option
                } 
                try {
                    var converted = Convert.ToInt32(json);
                    return new PrimitiveTypeUnion(PrimitiveTypeUnionType.Int32) {
                        Int32 = converted
                    };
                } catch (System.FormatException) {
                    // try next option
                } 
                try {
                    var converted = Convert.ToDouble(json);
                    return new PrimitiveTypeUnion(PrimitiveTypeUnionType.Number) {
                        Number = converted
                    };
                } catch (System.FormatException) {
                    // try next option
                } 
                try {
                    var converted = Convert.ToSingle(json);
                    return new PrimitiveTypeUnion(PrimitiveTypeUnionType.Float32) {
                        Float32 = converted
                    };
                } catch (System.FormatException) {
                    // try next option
                } 
                try {
                    var converted = Convert.ToBoolean(json);
                    return new PrimitiveTypeUnion(PrimitiveTypeUnionType.Boolean) {
                        Boolean = converted
                    };
                } catch (System.FormatException) {
                    // try next option
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                PrimitiveTypeUnion res = (PrimitiveTypeUnion)value;
                if (PrimitiveTypeUnionType.FromString(res.Type).Equals(PrimitiveTypeUnionType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.Str != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Str));
                    return;
                }
                if (res.Integer != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Integer));
                    return;
                }
                if (res.Int32 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Int32));
                    return;
                }
                if (res.Number != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Number));
                    return;
                }
                if (res.Float32 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Float32));
                    return;
                }
                if (res.Boolean != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Boolean));
                    return;
                }

            }
        }

    }


}