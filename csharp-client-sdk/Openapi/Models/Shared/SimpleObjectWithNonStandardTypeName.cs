
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Openapi.Models.Shared
{
    using Newtonsoft.Json;
    using NodaTime;
    using Openapi.Models.Shared;
    using Openapi.Utils;
    using System.Numerics;
    using System;
    
    /// <summary>
    /// A simple object that uses all our supported primitive types and enums and has optional properties.
    /// 
    /// <see>https://docs.speakeasyapi.dev} - A link to the external docs.</see>
    /// </summary>
    public class SimpleObjectWithNonStandardTypeName
    {

        /// <summary>
        /// An any property.
        /// </summary>
        [JsonProperty("any")]
        public object Any { get; set; } = default!;

        [JsonProperty("bigint")]
        public BigInteger? Bigint { get; set; }

        [JsonProperty("bigintStr")]
        [JsonConverter(typeof(BigIntStrConverter))]
        public BigInteger? BigintStr { get; set; }

        /// <summary>
        /// A boolean property.
        /// </summary>
        [JsonProperty("bool")]
        public bool Bool { get; set; } = default!;

        /// <summary>
        /// An optional boolean property.
        /// </summary>
        [JsonProperty("boolOpt")]
        public bool? BoolOpt { get; set; }

        /// <summary>
        /// A date property.
        /// </summary>
        [JsonProperty("date")]
        public LocalDate Date { get; set; } = default!;

        /// <summary>
        /// A date-time property.
        /// </summary>
        [JsonProperty("dateTime")]
        public DateTime DateTime { get; set; } = default!;

        [JsonProperty("decimal")]
        public decimal? Decimal { get; set; }

        [JsonProperty("decimalStr")]
        [JsonConverter(typeof(DecimalStrConverter))]
        public decimal? DecimalStr { get; set; }

        /// <summary>
        /// A string based enum
        /// </summary>
        [JsonProperty("enum")]
        public Enum Enum { get; set; } = default!;

        /// <summary>
        /// A float32 property.
        /// </summary>
        [JsonProperty("float32")]
        public float Float32 { get; set; } = default!;

        /// <summary>
        /// A float64 string
        /// </summary>
        [JsonProperty("float64Str")]
        public string? Float64Str { get; set; }

        /// <summary>
        /// An integer property.
        /// </summary>
        [JsonProperty("int")]
        public long Int { get; set; } = default!;

        /// <summary>
        /// An int32 property.
        /// </summary>
        [JsonProperty("int32")]
        public int Int32 { get; set; } = default!;

        /// <summary>
        /// An int32 enum property.
        /// </summary>
        [JsonProperty("int32Enum")]
        public SimpleObjectWithNonStandardTypeNameInt32Enum Int32Enum { get; set; } = default!;

        /// <summary>
        /// An int64 string
        /// </summary>
        [JsonProperty("int64Str")]
        public string? Int64Str { get; set; }

        /// <summary>
        /// An integer enum property.
        /// </summary>
        [JsonProperty("intEnum")]
        public SimpleObjectWithNonStandardTypeNameIntEnum IntEnum { get; set; } = default!;

        /// <summary>
        /// An optional integer property will be null for tests.
        /// </summary>
        [JsonProperty("intOptNull")]
        public long? IntOptNull { get; set; }

        /// <summary>
        /// A number property.
        /// </summary>
        [JsonProperty("num")]
        public double Num { get; set; } = default!;

        /// <summary>
        /// An optional number property will be null for tests.
        /// </summary>
        [JsonProperty("numOptNull")]
        public double? NumOptNull { get; set; }

        [JsonProperty("obj.type")]
        public string ObjType { get; set; } = default!;

        /// <summary>
        /// A string property.
        /// </summary>
        [JsonProperty("str")]
        public string Str { get; set; } = default!;

        /// <summary>
        /// An optional string property.
        /// </summary>
        [JsonProperty("strOpt")]
        public string? StrOpt { get; set; }
    }
}