//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Openapi.Models.Shared
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using Openapi.Models.Shared;
    using Openapi.Utils;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    using System;
    

    public class StronglyTypedOneOfDiscriminatedObjectType
    {
        private StronglyTypedOneOfDiscriminatedObjectType(string value) { Value = value; }

        public string Value { get; private set; }
        
        public static StronglyTypedOneOfDiscriminatedObjectType Tag1 { get { return new StronglyTypedOneOfDiscriminatedObjectType("tag1"); } }
        public static StronglyTypedOneOfDiscriminatedObjectType Tag2 { get { return new StronglyTypedOneOfDiscriminatedObjectType("tag2"); } }
        public static StronglyTypedOneOfDiscriminatedObjectType Tag3 { get { return new StronglyTypedOneOfDiscriminatedObjectType("tag3"); } }
        public static StronglyTypedOneOfDiscriminatedObjectType Null { get { return new StronglyTypedOneOfDiscriminatedObjectType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(StronglyTypedOneOfDiscriminatedObjectType v) { return v.Value; }
        public static StronglyTypedOneOfDiscriminatedObjectType FromString(string v) {
            switch(v) {
                case "tag1": return Tag1;
                case "tag2": return Tag2;
                case "tag3": return Tag3;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for StronglyTypedOneOfDiscriminatedObjectType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((StronglyTypedOneOfDiscriminatedObjectType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(StronglyTypedOneOfDiscriminatedObject.StronglyTypedOneOfDiscriminatedObjectConverter))]
    public class StronglyTypedOneOfDiscriminatedObject {
        public StronglyTypedOneOfDiscriminatedObject(StronglyTypedOneOfDiscriminatedObjectType type) {
            Type = type;
        }
        public TaggedObject1? TaggedObject1 { get; set; }
        public TaggedObject2? TaggedObject2 { get; set; }
        public TaggedObject3? TaggedObject3 { get; set; }

        public StronglyTypedOneOfDiscriminatedObjectType Type { get; set; }


        public static StronglyTypedOneOfDiscriminatedObject CreateTag1(TaggedObject1 tag1) {
            StronglyTypedOneOfDiscriminatedObjectType typ = StronglyTypedOneOfDiscriminatedObjectType.Tag1;
        
            string typStr = StronglyTypedOneOfDiscriminatedObjectType.Tag1.ToString();
            
            tag1.Tag = Models.Shared.TagExtension.ToEnum(StronglyTypedOneOfDiscriminatedObjectType.Tag1.ToString());
            StronglyTypedOneOfDiscriminatedObject res = new StronglyTypedOneOfDiscriminatedObject(typ);
            res.TaggedObject1 = tag1;
            return res;
        }
        public static StronglyTypedOneOfDiscriminatedObject CreateTag2(TaggedObject2 tag2) {
            StronglyTypedOneOfDiscriminatedObjectType typ = StronglyTypedOneOfDiscriminatedObjectType.Tag2;
        
            string typStr = StronglyTypedOneOfDiscriminatedObjectType.Tag2.ToString();
            
            tag2.Tag = TaggedObject2TagExtension.ToEnum(StronglyTypedOneOfDiscriminatedObjectType.Tag2.ToString());
            StronglyTypedOneOfDiscriminatedObject res = new StronglyTypedOneOfDiscriminatedObject(typ);
            res.TaggedObject2 = tag2;
            return res;
        }
        public static StronglyTypedOneOfDiscriminatedObject CreateTag3(TaggedObject3 tag3) {
            StronglyTypedOneOfDiscriminatedObjectType typ = StronglyTypedOneOfDiscriminatedObjectType.Tag3;
        
            StronglyTypedOneOfDiscriminatedObject res = new StronglyTypedOneOfDiscriminatedObject(typ);
            res.TaggedObject3 = tag3;
            return res;
        }
        public static StronglyTypedOneOfDiscriminatedObject CreateNull() {
            StronglyTypedOneOfDiscriminatedObjectType typ = StronglyTypedOneOfDiscriminatedObjectType.Null;
            return new StronglyTypedOneOfDiscriminatedObject(typ);
        }

        public class StronglyTypedOneOfDiscriminatedObjectConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(StronglyTypedOneOfDiscriminatedObject);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                JObject jo = JObject.Load(reader);
                string discriminator = jo.GetValue("tag")?.ToString() ?? throw new ArgumentNullException("Could not find discriminator field.");
                if (discriminator == StronglyTypedOneOfDiscriminatedObjectType.Tag1.ToString())
                {
                    TaggedObject1? taggedObject1 = ResponseBodyDeserializer.Deserialize<TaggedObject1>(jo.ToString());
                    return CreateTag1(taggedObject1!);
                }
                if (discriminator == StronglyTypedOneOfDiscriminatedObjectType.Tag2.ToString())
                {
                    TaggedObject2? taggedObject2 = ResponseBodyDeserializer.Deserialize<TaggedObject2>(jo.ToString());
                    return CreateTag2(taggedObject2!);
                }
                if (discriminator == StronglyTypedOneOfDiscriminatedObjectType.Tag3.ToString())
                {
                    TaggedObject3? taggedObject3 = ResponseBodyDeserializer.Deserialize<TaggedObject3>(jo.ToString());
                    return CreateTag3(taggedObject3!);
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                StronglyTypedOneOfDiscriminatedObject res = (StronglyTypedOneOfDiscriminatedObject)value;
                if (StronglyTypedOneOfDiscriminatedObjectType.FromString(res.Type).Equals(StronglyTypedOneOfDiscriminatedObjectType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.TaggedObject1 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.TaggedObject1));
                    return;
                }
                if (res.TaggedObject2 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.TaggedObject2));
                    return;
                }
                if (res.TaggedObject3 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.TaggedObject3));
                    return;
                }

            }

        }

    }
}