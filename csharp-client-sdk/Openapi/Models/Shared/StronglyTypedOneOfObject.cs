//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Openapi.Models.Shared
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using Openapi.Models.Shared;
    using Openapi.Utils;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    

    public class StronglyTypedOneOfObjectType
    {
        private StronglyTypedOneOfObjectType(string value) { Value = value; }

        public string Value { get; private set; }
        
        public static StronglyTypedOneOfObjectType SimpleObjectWithType { get { return new StronglyTypedOneOfObjectType("simpleObjectWithType"); } }
        public static StronglyTypedOneOfObjectType DeepObjectWithType { get { return new StronglyTypedOneOfObjectType("deepObjectWithType"); } }
        public static StronglyTypedOneOfObjectType Null { get { return new StronglyTypedOneOfObjectType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(StronglyTypedOneOfObjectType v) { return v.Value; }
        public static StronglyTypedOneOfObjectType FromString(string v) {
            switch(v) {
                case "simpleObjectWithType": return SimpleObjectWithType;
                case "deepObjectWithType": return DeepObjectWithType;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for StronglyTypedOneOfObjectType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((StronglyTypedOneOfObjectType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(StronglyTypedOneOfObject.StronglyTypedOneOfObjectConverter))]
    public class StronglyTypedOneOfObject {
        public StronglyTypedOneOfObject(StronglyTypedOneOfObjectType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public SimpleObjectWithType? SimpleObjectWithType { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public DeepObjectWithType? DeepObjectWithType { get; set; }

        public StronglyTypedOneOfObjectType Type { get; set; }


        public static StronglyTypedOneOfObject CreateSimpleObjectWithType(SimpleObjectWithType simpleObjectWithType) {
            StronglyTypedOneOfObjectType typ = StronglyTypedOneOfObjectType.SimpleObjectWithType;
        
            string typStr = StronglyTypedOneOfObjectType.SimpleObjectWithType.ToString();
            
            simpleObjectWithType.Type = typStr;
            StronglyTypedOneOfObject res = new StronglyTypedOneOfObject(typ);
            res.SimpleObjectWithType = simpleObjectWithType;
            return res;
        }
        public static StronglyTypedOneOfObject CreateDeepObjectWithType(DeepObjectWithType deepObjectWithType) {
            StronglyTypedOneOfObjectType typ = StronglyTypedOneOfObjectType.DeepObjectWithType;
        
            string typStr = StronglyTypedOneOfObjectType.DeepObjectWithType.ToString();
            
            deepObjectWithType.Type = typStr;
            StronglyTypedOneOfObject res = new StronglyTypedOneOfObject(typ);
            res.DeepObjectWithType = deepObjectWithType;
            return res;
        }
        public static StronglyTypedOneOfObject CreateNull() {
            StronglyTypedOneOfObjectType typ = StronglyTypedOneOfObjectType.Null;
            return new StronglyTypedOneOfObject(typ);
        }

        public class StronglyTypedOneOfObjectConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(StronglyTypedOneOfObject);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                JObject jo = JObject.Load(reader);
                string discriminator = jo.GetValue("type")?.ToString() ?? throw new ArgumentNullException("Could not find discriminator field.");
                if (discriminator == StronglyTypedOneOfObjectType.SimpleObjectWithType.ToString())
                {
                    SimpleObjectWithType? simpleObjectWithType = ResponseBodyDeserializer.Deserialize<SimpleObjectWithType>(jo.ToString());
                    return CreateSimpleObjectWithType(simpleObjectWithType!);
                }
                if (discriminator == StronglyTypedOneOfObjectType.DeepObjectWithType.ToString())
                {
                    DeepObjectWithType? deepObjectWithType = ResponseBodyDeserializer.Deserialize<DeepObjectWithType>(jo.ToString());
                    return CreateDeepObjectWithType(deepObjectWithType!);
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                StronglyTypedOneOfObject res = (StronglyTypedOneOfObject)value;
                if (StronglyTypedOneOfObjectType.FromString(res.Type).Equals(StronglyTypedOneOfObjectType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.SimpleObjectWithType != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.SimpleObjectWithType));
                    return;
                }
                if (res.DeepObjectWithType != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.DeepObjectWithType));
                    return;
                }

            }

        }

    }
}