
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Openapi.Models.Shared
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using Openapi.Models.Shared;
    using Openapi.Utils;
    using System.Numerics;
    using System;
    

    public class StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType
    {
        private StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType(string value) { Value = value; }

        public string Value { get; private set; }
        
        public static StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType SimpleObjectWithNonStandardTypeName { get { return new StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType("simpleObjectWithNonStandardTypeName"); } }
        public static StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType DeepObjectWithNonStandardTypeName { get { return new StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType("deepObjectWithNonStandardTypeName"); } }
        public static StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType Null { get { return new StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType("null"); } } 

        public override string ToString() { return Value; }
        public static implicit operator String(StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType v) { return v.Value; }
        public static StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType FromString(string v) {
            switch(v) {
                case "simpleObjectWithNonStandardTypeName": return SimpleObjectWithNonStandardTypeName;
                case "deepObjectWithNonStandardTypeName": return DeepObjectWithNonStandardTypeName;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    

    [JsonConverter(typeof(StronglyTypedOneOfObjectWithNonStandardDiscriminatorName.StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameConverter))]
    public class StronglyTypedOneOfObjectWithNonStandardDiscriminatorName {
        public StronglyTypedOneOfObjectWithNonStandardDiscriminatorName(StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType type) {
            Type = type;
        }
        public SimpleObjectWithNonStandardTypeName? SimpleObjectWithNonStandardTypeName { get; set; } 
        public DeepObjectWithNonStandardTypeName? DeepObjectWithNonStandardTypeName { get; set; } 

        public StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType Type {get; set; }


        public static StronglyTypedOneOfObjectWithNonStandardDiscriminatorName CreateSimpleObjectWithNonStandardTypeName(SimpleObjectWithNonStandardTypeName simpleObjectWithNonStandardTypeName) {
            StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType typ = StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType.SimpleObjectWithNonStandardTypeName;
        
            string typStr = StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType.SimpleObjectWithNonStandardTypeName.ToString();
            
            simpleObjectWithNonStandardTypeName.ObjType = typStr;
            StronglyTypedOneOfObjectWithNonStandardDiscriminatorName res = new StronglyTypedOneOfObjectWithNonStandardDiscriminatorName(typ);
            res.SimpleObjectWithNonStandardTypeName = simpleObjectWithNonStandardTypeName;
            return res;
        }
        public static StronglyTypedOneOfObjectWithNonStandardDiscriminatorName CreateDeepObjectWithNonStandardTypeName(DeepObjectWithNonStandardTypeName deepObjectWithNonStandardTypeName) {
            StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType typ = StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType.DeepObjectWithNonStandardTypeName;
        
            string typStr = StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType.DeepObjectWithNonStandardTypeName.ToString();
            
            deepObjectWithNonStandardTypeName.ObjType = typStr;
            StronglyTypedOneOfObjectWithNonStandardDiscriminatorName res = new StronglyTypedOneOfObjectWithNonStandardDiscriminatorName(typ);
            res.DeepObjectWithNonStandardTypeName = deepObjectWithNonStandardTypeName;
            return res;
        }
        public static StronglyTypedOneOfObjectWithNonStandardDiscriminatorName CreateNull() {
            StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType typ = StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType.Null;
            return new StronglyTypedOneOfObjectWithNonStandardDiscriminatorName(typ);
        }

        public class StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(StronglyTypedOneOfObjectWithNonStandardDiscriminatorName);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                JObject jo = JObject.Load(reader);
                string discriminator = jo.GetValue("obj.type")?.ToString() ?? throw new ArgumentNullException("Could not find discriminator field.");
                if (discriminator == StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType.SimpleObjectWithNonStandardTypeName.ToString())
                {
                    SimpleObjectWithNonStandardTypeName? simpleObjectWithNonStandardTypeName = JsonConvert.DeserializeObject<SimpleObjectWithNonStandardTypeName>(jo.ToString(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(SimpleObjectWithNonStandardTypeName), "string")});
                    return new StronglyTypedOneOfObjectWithNonStandardDiscriminatorName(StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType.SimpleObjectWithNonStandardTypeName) {
                        SimpleObjectWithNonStandardTypeName = simpleObjectWithNonStandardTypeName,
                    };
                }
                if (discriminator == StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType.DeepObjectWithNonStandardTypeName.ToString())
                {
                    DeepObjectWithNonStandardTypeName? deepObjectWithNonStandardTypeName = JsonConvert.DeserializeObject<DeepObjectWithNonStandardTypeName>(jo.ToString(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(DeepObjectWithNonStandardTypeName), "string")});
                    return new StronglyTypedOneOfObjectWithNonStandardDiscriminatorName(StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType.DeepObjectWithNonStandardTypeName) {
                        DeepObjectWithNonStandardTypeName = deepObjectWithNonStandardTypeName,
                    };
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                StronglyTypedOneOfObjectWithNonStandardDiscriminatorName res = (StronglyTypedOneOfObjectWithNonStandardDiscriminatorName)value;
                if (StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType.FromString(res.Type).Equals(StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.SimpleObjectWithNonStandardTypeName != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.SimpleObjectWithNonStandardTypeName));
                    return;
                }
                if (res.DeepObjectWithNonStandardTypeName != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.DeepObjectWithNonStandardTypeName));
                    return;
                }

            }
        }

    }


}