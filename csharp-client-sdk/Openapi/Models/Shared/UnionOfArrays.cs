//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Openapi.Models.Shared
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using Openapi.Models.Shared;
    using Openapi.Utils;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    

    public class UnionOfArraysType
    {
        private UnionOfArraysType(string value) { Value = value; }

        public string Value { get; private set; }
        public static UnionOfArraysType ArrayOf1 { get { return new UnionOfArraysType("arrayOf1"); } }
        
        public static UnionOfArraysType ArrayOfUnionOfArrays2 { get { return new UnionOfArraysType("arrayOfUnionOfArrays2"); } }
        
        public static UnionOfArraysType ArrayOf3 { get { return new UnionOfArraysType("arrayOf3"); } }
        
        public static UnionOfArraysType Null { get { return new UnionOfArraysType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(UnionOfArraysType v) { return v.Value; }
        public static UnionOfArraysType FromString(string v) {
            switch(v) {
                case "arrayOf1": return ArrayOf1;
                case "arrayOfUnionOfArrays2": return ArrayOfUnionOfArrays2;
                case "arrayOf3": return ArrayOf3;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for UnionOfArraysType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((UnionOfArraysType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(UnionOfArrays.UnionOfArraysConverter))]
    public class UnionOfArrays {
        public UnionOfArrays(UnionOfArraysType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public List<One>? ArrayOf1 { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public List<UnionOfArrays2>? ArrayOfUnionOfArrays2 { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public List<Three>? ArrayOf3 { get; set; }

        public UnionOfArraysType Type { get; set; }


        public static UnionOfArrays CreateArrayOf1(List<One> arrayOf1) {
            UnionOfArraysType typ = UnionOfArraysType.ArrayOf1;

            UnionOfArrays res = new UnionOfArrays(typ);
            res.ArrayOf1 = arrayOf1;
            return res;
        }

        public static UnionOfArrays CreateArrayOfUnionOfArrays2(List<UnionOfArrays2> arrayOfUnionOfArrays2) {
            UnionOfArraysType typ = UnionOfArraysType.ArrayOfUnionOfArrays2;

            UnionOfArrays res = new UnionOfArrays(typ);
            res.ArrayOfUnionOfArrays2 = arrayOfUnionOfArrays2;
            return res;
        }

        public static UnionOfArrays CreateArrayOf3(List<Three> arrayOf3) {
            UnionOfArraysType typ = UnionOfArraysType.ArrayOf3;

            UnionOfArrays res = new UnionOfArrays(typ);
            res.ArrayOf3 = arrayOf3;
            return res;
        }

        public static UnionOfArrays CreateNull() {
            UnionOfArraysType typ = UnionOfArraysType.Null;
            return new UnionOfArrays(typ);
        }

        public class UnionOfArraysConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(UnionOfArrays);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new UnionOfArrays(UnionOfArraysType.ArrayOf1)
                    {
                        ArrayOf1 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<List<One>>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(List<One>), new UnionOfArrays(UnionOfArraysType.ArrayOf1), "ArrayOf1"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new UnionOfArrays(UnionOfArraysType.ArrayOfUnionOfArrays2)
                    {
                        ArrayOfUnionOfArrays2 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<List<UnionOfArrays2>>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(List<UnionOfArrays2>), new UnionOfArrays(UnionOfArraysType.ArrayOfUnionOfArrays2), "ArrayOfUnionOfArrays2"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new UnionOfArrays(UnionOfArraysType.ArrayOf3)
                    {
                        ArrayOf3 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<List<Three>>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(List<Three>), new UnionOfArrays(UnionOfArraysType.ArrayOf3), "ArrayOf3"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                UnionOfArrays res = (UnionOfArrays)value;
                if (UnionOfArraysType.FromString(res.Type).Equals(UnionOfArraysType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.ArrayOf1 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.ArrayOf1));
                    return;
                }
                if (res.ArrayOfUnionOfArrays2 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.ArrayOfUnionOfArrays2));
                    return;
                }
                if (res.ArrayOf3 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.ArrayOf3));
                    return;
                }

            }

        }

    }
}