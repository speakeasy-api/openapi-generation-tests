//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Openapi.Models.Shared
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using Openapi.Models.Shared;
    using Openapi.Utils;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    using System;
    

    public class VehicleType
    {
        private VehicleType(string value) { Value = value; }

        public string Value { get; private set; }
        
        public static VehicleType Bike { get { return new VehicleType("bike"); } }
        public static VehicleType Car { get { return new VehicleType("car"); } }
        public static VehicleType Null { get { return new VehicleType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(VehicleType v) { return v.Value; }
        public static VehicleType FromString(string v) {
            switch(v) {
                case "bike": return Bike;
                case "car": return Car;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for VehicleType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((VehicleType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(Vehicle.VehicleConverter))]
    public class Vehicle {
        public Vehicle(VehicleType type) {
            Type = type;
        }
        public Car? Car { get; set; }
        public Bike? Bike { get; set; }

        public VehicleType Type { get; set; }


        public static Vehicle CreateBike(Bike bike) {
            VehicleType typ = VehicleType.Bike;
        
            Vehicle res = new Vehicle(typ);
            res.Bike = bike;
            return res;
        }
        public static Vehicle CreateCar(Car car) {
            VehicleType typ = VehicleType.Car;
        
            Vehicle res = new Vehicle(typ);
            res.Car = car;
            return res;
        }
        public static Vehicle CreateNull() {
            VehicleType typ = VehicleType.Null;
            return new Vehicle(typ);
        }

        public class VehicleConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(Vehicle);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                JObject jo = JObject.Load(reader);
                string discriminator = jo.GetValue("vehicleType")?.ToString() ?? throw new ArgumentNullException("Could not find discriminator field.");
                if (discriminator == VehicleType.Bike.ToString())
                {
                    Bike? bike = ResponseBodyDeserializer.Deserialize<Bike>(jo.ToString());
                    return CreateBike(bike!);
                }
                if (discriminator == VehicleType.Car.ToString())
                {
                    Car? car = ResponseBodyDeserializer.Deserialize<Car>(jo.ToString());
                    return CreateCar(car!);
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                Vehicle res = (Vehicle)value;
                if (VehicleType.FromString(res.Type).Equals(VehicleType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.Car != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Car));
                    return;
                }
                if (res.Bike != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Bike));
                    return;
                }

            }

        }

    }
}