
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Openapi
{
    using Newtonsoft.Json;
    using Openapi.Models.Operations;
    using Openapi.Models.Shared;
    using Openapi.Utils;
    using System.Collections.Generic;
    using System.Net.Http.Headers;
    using System.Net.Http;
    using System.Threading.Tasks;
    using System;

    /// <summary>
    /// Endpoints for testing parameters.
    /// </summary>
    public interface IParameters
    {
        Task<DeepObjectQueryParamsMapResponse> DeepObjectQueryParamsMapAsync(Dictionary<string, string> mapParam, Dictionary<string, List<string>>? mapArrParam = null);
        Task<DeepObjectQueryParamsObjectResponse> DeepObjectQueryParamsObjectAsync(SimpleObject objParam, ObjArrParam? objArrParam = null);
        Task<DuplicateParamResponse> DuplicateParamAsync(string duplicateParamRequest);
        Task<FormQueryParamsArrayResponse> FormQueryParamsArrayAsync(List<string>? arrParam = null, List<long>? arrParamExploded = null);
        Task<FormQueryParamsCamelObjectResponse> FormQueryParamsCamelObjectAsync(ObjParamExploded objParamExploded, ObjParam? objParam = null);
        Task<FormQueryParamsMapResponse> FormQueryParamsMapAsync(Dictionary<string, string>? mapParam = null, Dictionary<string, long>? mapParamExploded = null);
        Task<FormQueryParamsObjectResponse> FormQueryParamsObjectAsync(SimpleObject objParamExploded, SimpleObject? objParam = null);
        Task<FormQueryParamsPrimitiveResponse> FormQueryParamsPrimitiveAsync(bool boolParam, long intParam, double numParam, string strParam);
        Task<FormQueryParamsRefParamObjectResponse> FormQueryParamsRefParamObjectAsync(RefQueryParamObj? refObjParam = null, RefQueryParamObjExploded? refObjParamExploded = null);
        Task<HeaderParamsArrayResponse> HeaderParamsArrayAsync(List<string> xHeaderArray);
        Task<HeaderParamsMapResponse> HeaderParamsMapAsync(Dictionary<string, string> xHeaderMap, Dictionary<string, string> xHeaderMapExplode);
        Task<HeaderParamsObjectResponse> HeaderParamsObjectAsync(SimpleObject xHeaderObj, SimpleObject xHeaderObjExplode);
        Task<HeaderParamsPrimitiveResponse> HeaderParamsPrimitiveAsync(bool xHeaderBoolean, long xHeaderInteger, double xHeaderNumber, string xHeaderString);
        Task<JsonQueryParamsObjectResponse> JsonQueryParamsObjectAsync(DeepObject deepObjParam, SimpleObject simpleObjParam);
        Task<MixedParametersCamelCaseResponse> MixedParametersCamelCaseAsync(string headerParam, string pathParam, string queryStringParam);
        Task<MixedParametersPrimitivesResponse> MixedParametersPrimitivesAsync(string headerParam, string pathParam, string queryStringParam);
        Task<MixedQueryParamsResponse> MixedQueryParamsAsync(SimpleObject deepObjectParam, SimpleObject formParam, SimpleObject jsonParam);
        Task<PathParameterJsonResponse> PathParameterJsonAsync(SimpleObject jsonObj);
        Task<PipeDelimitedQueryParamsArrayResponse> PipeDelimitedQueryParamsArrayAsync(List<string>? arrParam = null, List<long>? arrParamExploded = null, Dictionary<string, string>? mapParam = null, SimpleObject? objParam = null);
        Task<SimplePathParameterArraysResponse> SimplePathParameterArraysAsync(List<string> arrParam);
        Task<SimplePathParameterMapsResponse> SimplePathParameterMapsAsync(Dictionary<string, string> mapParam, Dictionary<string, long> mapParamExploded);
        Task<SimplePathParameterObjectsResponse> SimplePathParameterObjectsAsync(SimpleObject objParam, SimpleObject objParamExploded);
        Task<SimplePathParameterPrimitivesResponse> SimplePathParameterPrimitivesAsync(bool boolParam, long intParam, double numParam, string strParam);
    }

    /// <summary>
    /// Endpoints for testing parameters.
    /// </summary>
    public class Parameters: IParameters
    {
        public SDKConfig SDKConfiguration { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.4.0";
        private const string _sdkGenVersion = "2.248.1";
        private const string _openapiDocVersion = "0.1.0";
        private const string _userAgent = "speakeasy-sdk/csharp 0.4.0 2.248.1 0.1.0 openapi";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _defaultClient;
        private ISpeakeasyHttpClient _securityClient;

        public Parameters(ISpeakeasyHttpClient defaultClient, ISpeakeasyHttpClient securityClient, string serverUrl, SDKConfig config)
        {
            _defaultClient = defaultClient;
            _securityClient = securityClient;
            _serverUrl = serverUrl;
            SDKConfiguration = config;
        }
        

        public async Task<DeepObjectQueryParamsMapResponse> DeepObjectQueryParamsMapAsync(Dictionary<string, string> mapParam, Dictionary<string, List<string>>? mapArrParam = null)
        {
            var request = new DeepObjectQueryParamsMapRequest()
            {
                MapParam = mapParam,
                MapArrParam = mapArrParam,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerDetails();
            var urlString = URLBuilder.Build(baseUrl, "/anything/queryParams/deepObject/map", request);
            
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new DeepObjectQueryParamsMapResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<DeepObjectQueryParamsMapRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<DeepObjectQueryParamsObjectResponse> DeepObjectQueryParamsObjectAsync(SimpleObject objParam, ObjArrParam? objArrParam = null)
        {
            var request = new DeepObjectQueryParamsObjectRequest()
            {
                ObjParam = objParam,
                ObjArrParam = objArrParam,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerDetails();
            var urlString = URLBuilder.Build(baseUrl, "/anything/queryParams/deepObject/obj", request);
            
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new DeepObjectQueryParamsObjectResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<DeepObjectQueryParamsObjectRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<DuplicateParamResponse> DuplicateParamAsync(string duplicateParamRequest)
        {
            var request = new DuplicateParamRequest()
            {
                DuplicateParamRequestValue = duplicateParamRequest,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerDetails();
            var urlString = URLBuilder.Build(baseUrl, "/anything/params/{duplicateParamRequest}", request);
            
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new DuplicateParamResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.DuplicateParamResponseValue = JsonConvert.DeserializeObject<DuplicateParamDuplicateParamResponse>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<FormQueryParamsArrayResponse> FormQueryParamsArrayAsync(List<string>? arrParam = null, List<long>? arrParamExploded = null)
        {
            var request = new FormQueryParamsArrayRequest()
            {
                ArrParam = arrParam,
                ArrParamExploded = arrParamExploded,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerDetails();
            var urlString = URLBuilder.Build(baseUrl, "/anything/queryParams/form/array", request);
            
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new FormQueryParamsArrayResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<FormQueryParamsArrayRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<FormQueryParamsCamelObjectResponse> FormQueryParamsCamelObjectAsync(ObjParamExploded objParamExploded, ObjParam? objParam = null)
        {
            var request = new FormQueryParamsCamelObjectRequest()
            {
                ObjParamExploded = objParamExploded,
                ObjParam = objParam,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerDetails();
            var urlString = URLBuilder.Build(baseUrl, "/anything/queryParams/form/camelObj", request);
            
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new FormQueryParamsCamelObjectResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<FormQueryParamsCamelObjectRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<FormQueryParamsMapResponse> FormQueryParamsMapAsync(Dictionary<string, string>? mapParam = null, Dictionary<string, long>? mapParamExploded = null)
        {
            var request = new FormQueryParamsMapRequest()
            {
                MapParam = mapParam,
                MapParamExploded = mapParamExploded,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerDetails();
            var urlString = URLBuilder.Build(baseUrl, "/anything/queryParams/form/map", request);
            
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new FormQueryParamsMapResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<FormQueryParamsMapRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<FormQueryParamsObjectResponse> FormQueryParamsObjectAsync(SimpleObject objParamExploded, SimpleObject? objParam = null)
        {
            var request = new FormQueryParamsObjectRequest()
            {
                ObjParamExploded = objParamExploded,
                ObjParam = objParam,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerDetails();
            var urlString = URLBuilder.Build(baseUrl, "/anything/queryParams/form/obj", request);
            
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new FormQueryParamsObjectResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<FormQueryParamsObjectRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<FormQueryParamsPrimitiveResponse> FormQueryParamsPrimitiveAsync(bool boolParam, long intParam, double numParam, string strParam)
        {
            var request = new FormQueryParamsPrimitiveRequest()
            {
                BoolParam = boolParam,
                IntParam = intParam,
                NumParam = numParam,
                StrParam = strParam,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerDetails();
            var urlString = URLBuilder.Build(baseUrl, "/anything/queryParams/form/primitive", request);
            
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new FormQueryParamsPrimitiveResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<FormQueryParamsPrimitiveRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<FormQueryParamsRefParamObjectResponse> FormQueryParamsRefParamObjectAsync(RefQueryParamObj? refObjParam = null, RefQueryParamObjExploded? refObjParamExploded = null)
        {
            var request = new FormQueryParamsRefParamObjectRequest()
            {
                RefObjParam = refObjParam,
                RefObjParamExploded = refObjParamExploded,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerDetails();
            var urlString = URLBuilder.Build(baseUrl, "/anything/queryParams/form/refParamObject", request);
            
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new FormQueryParamsRefParamObjectResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<FormQueryParamsRefParamObjectRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<HeaderParamsArrayResponse> HeaderParamsArrayAsync(List<string> xHeaderArray)
        {
            var request = new HeaderParamsArrayRequest()
            {
                XHeaderArray = xHeaderArray,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerDetails();
            var urlString = baseUrl + "/anything/headers/array";
            
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            HeaderSerializer.PopulateHeaders(ref httpRequest, request);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new HeaderParamsArrayResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<HeaderParamsArrayRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<HeaderParamsMapResponse> HeaderParamsMapAsync(Dictionary<string, string> xHeaderMap, Dictionary<string, string> xHeaderMapExplode)
        {
            var request = new HeaderParamsMapRequest()
            {
                XHeaderMap = xHeaderMap,
                XHeaderMapExplode = xHeaderMapExplode,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerDetails();
            var urlString = baseUrl + "/anything/headers/map";
            
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            HeaderSerializer.PopulateHeaders(ref httpRequest, request);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new HeaderParamsMapResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<HeaderParamsMapRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<HeaderParamsObjectResponse> HeaderParamsObjectAsync(SimpleObject xHeaderObj, SimpleObject xHeaderObjExplode)
        {
            var request = new HeaderParamsObjectRequest()
            {
                XHeaderObj = xHeaderObj,
                XHeaderObjExplode = xHeaderObjExplode,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerDetails();
            var urlString = baseUrl + "/anything/headers/obj";
            
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            HeaderSerializer.PopulateHeaders(ref httpRequest, request);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new HeaderParamsObjectResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<HeaderParamsObjectRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<HeaderParamsPrimitiveResponse> HeaderParamsPrimitiveAsync(bool xHeaderBoolean, long xHeaderInteger, double xHeaderNumber, string xHeaderString)
        {
            var request = new HeaderParamsPrimitiveRequest()
            {
                XHeaderBoolean = xHeaderBoolean,
                XHeaderInteger = xHeaderInteger,
                XHeaderNumber = xHeaderNumber,
                XHeaderString = xHeaderString,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerDetails();
            var urlString = baseUrl + "/anything/headers/primitive";
            
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            HeaderSerializer.PopulateHeaders(ref httpRequest, request);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new HeaderParamsPrimitiveResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<HeaderParamsPrimitiveRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<JsonQueryParamsObjectResponse> JsonQueryParamsObjectAsync(DeepObject deepObjParam, SimpleObject simpleObjParam)
        {
            var request = new JsonQueryParamsObjectRequest()
            {
                DeepObjParam = deepObjParam,
                SimpleObjParam = simpleObjParam,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerDetails();
            var urlString = URLBuilder.Build(baseUrl, "/anything/queryParams/json/obj", request);
            
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new JsonQueryParamsObjectResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<JsonQueryParamsObjectRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<MixedParametersCamelCaseResponse> MixedParametersCamelCaseAsync(string headerParam, string pathParam, string queryStringParam)
        {
            var request = new MixedParametersCamelCaseRequest()
            {
                HeaderParam = headerParam,
                PathParam = pathParam,
                QueryStringParam = queryStringParam,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerDetails();
            var urlString = URLBuilder.Build(baseUrl, "/anything/mixedParams/path/{path_param}/camelcase", request);
            
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            HeaderSerializer.PopulateHeaders(ref httpRequest, request);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new MixedParametersCamelCaseResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<MixedParametersCamelCaseRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<MixedParametersPrimitivesResponse> MixedParametersPrimitivesAsync(string headerParam, string pathParam, string queryStringParam)
        {
            var request = new MixedParametersPrimitivesRequest()
            {
                HeaderParam = headerParam,
                PathParam = pathParam,
                QueryStringParam = queryStringParam,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerDetails();
            var urlString = URLBuilder.Build(baseUrl, "/anything/mixedParams/path/{pathParam}", request);
            
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            HeaderSerializer.PopulateHeaders(ref httpRequest, request);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new MixedParametersPrimitivesResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<MixedParametersPrimitivesRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<MixedQueryParamsResponse> MixedQueryParamsAsync(SimpleObject deepObjectParam, SimpleObject formParam, SimpleObject jsonParam)
        {
            var request = new MixedQueryParamsRequest()
            {
                DeepObjectParam = deepObjectParam,
                FormParam = formParam,
                JsonParam = jsonParam,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerDetails();
            var urlString = URLBuilder.Build(baseUrl, "/anything/queryParams/mixed", request);
            
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new MixedQueryParamsResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<MixedQueryParamsRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<PathParameterJsonResponse> PathParameterJsonAsync(SimpleObject jsonObj)
        {
            var request = new PathParameterJsonRequest()
            {
                JsonObj = jsonObj,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerDetails();
            var urlString = URLBuilder.Build(baseUrl, "/anything/pathParams/json/{jsonObj}", request);
            
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new PathParameterJsonResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<PathParameterJsonRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<PipeDelimitedQueryParamsArrayResponse> PipeDelimitedQueryParamsArrayAsync(List<string>? arrParam = null, List<long>? arrParamExploded = null, Dictionary<string, string>? mapParam = null, SimpleObject? objParam = null)
        {
            var request = new PipeDelimitedQueryParamsArrayRequest()
            {
                ArrParam = arrParam,
                ArrParamExploded = arrParamExploded,
                MapParam = mapParam,
                ObjParam = objParam,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerDetails();
            var urlString = URLBuilder.Build(baseUrl, "/anything/queryParams/pipe/array", request);
            
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new PipeDelimitedQueryParamsArrayResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<PipeDelimitedQueryParamsArrayRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<SimplePathParameterArraysResponse> SimplePathParameterArraysAsync(List<string> arrParam)
        {
            var request = new SimplePathParameterArraysRequest()
            {
                ArrParam = arrParam,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerDetails();
            var urlString = URLBuilder.Build(baseUrl, "/anything/pathParams/arr/{arrParam}", request);
            
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new SimplePathParameterArraysResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<SimplePathParameterArraysRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<SimplePathParameterMapsResponse> SimplePathParameterMapsAsync(Dictionary<string, string> mapParam, Dictionary<string, long> mapParamExploded)
        {
            var request = new SimplePathParameterMapsRequest()
            {
                MapParam = mapParam,
                MapParamExploded = mapParamExploded,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerDetails();
            var urlString = URLBuilder.Build(baseUrl, "/anything/pathParams/map/{mapParam}/mapExploded/{mapParamExploded}", request);
            
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new SimplePathParameterMapsResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<SimplePathParameterMapsRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<SimplePathParameterObjectsResponse> SimplePathParameterObjectsAsync(SimpleObject objParam, SimpleObject objParamExploded)
        {
            var request = new SimplePathParameterObjectsRequest()
            {
                ObjParam = objParam,
                ObjParamExploded = objParamExploded,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerDetails();
            var urlString = URLBuilder.Build(baseUrl, "/anything/pathParams/obj/{objParam}/objExploded/{objParamExploded}", request);
            
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new SimplePathParameterObjectsResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<SimplePathParameterObjectsRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<SimplePathParameterPrimitivesResponse> SimplePathParameterPrimitivesAsync(bool boolParam, long intParam, double numParam, string strParam)
        {
            var request = new SimplePathParameterPrimitivesRequest()
            {
                BoolParam = boolParam,
                IntParam = intParam,
                NumParam = numParam,
                StrParam = strParam,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerDetails();
            var urlString = URLBuilder.Build(baseUrl, "/anything/pathParams/str/{strParam}/bool/{boolParam}/int/{intParam}/num/{numParam}", request);
            
            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new SimplePathParameterPrimitivesResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<SimplePathParameterPrimitivesRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        
    }
}