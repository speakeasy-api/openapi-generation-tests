
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Openapi
{
    using Newtonsoft.Json;
    using Openapi.Models.Operations;
    using Openapi.Models.Shared;
    using Openapi.Utils;
    using System.Collections.Generic;
    using System.Net.Http.Headers;
    using System.Net.Http;
    using System.Threading.Tasks;
    using System;

    /// <summary>
    /// Test: Test Summary
    /// 
    /// <remarks>
    /// Some test description.<br/>
    /// About our test document.
    /// </remarks>
    /// 
    /// <see>https://speakeasyapi.dev/docs/home} - Speakeasy Docs</see>
    /// </summary>
    public interface ISDK
    {

        /// <summary>
        /// Endpoints for purely testing valid generation behavior.
        /// </summary>
        public IGeneration Generation { get; }

        /// <summary>
        /// Endpoints for testing error responses.
        /// </summary>
        public IErrors Errors { get; }

        /// <summary>
        /// Endpoints for testing union types.
        /// </summary>
        public IUnions Unions { get; }

        /// <summary>
        /// Endpoints for testing flattening through request body and parameter combinations.
        /// </summary>
        public IFlattening Flattening { get; }

        /// <summary>
        /// Endpoints for testing global parameters.
        /// </summary>
        public IGlobals Globals { get; }

        /// <summary>
        /// Endpoints for testing parameters.
        /// </summary>
        public IParameters Parameters { get; }
        public INest Nest { get; }
        public INested Nested { get; }

        /// <summary>
        /// Endpoints for testing request bodies.
        /// </summary>
        public IRequestBodies RequestBodies { get; }

        /// <summary>
        /// Endpoints for testing response bodies.
        /// </summary>
        public IResponseBodies ResponseBodies { get; }

        /// <summary>
        /// Endpoints for testing servers.
        /// </summary>
        public IServers Servers { get; }

        /// <summary>
        /// Endpoints for testing telemetry.
        /// </summary>
        public ITelemetry Telemetry { get; }

        /// <summary>
        /// Endpoints for testing authentication.
        /// </summary>
        public IAuthNew AuthNew { get; }

        /// <summary>
        /// Endpoints for testing authentication.
        /// </summary>
        public IAuth Auth { get; }

        /// <summary>
        /// Testing for documentation extensions and tooling.
        /// </summary>
        public IDocumentation Documentation { get; }
        public IResource Resource { get; }
        public IFirst First { get; }
        public ISecond Second { get; }

        /// <summary>
        /// Endpoints for testing the pagination extension
        /// </summary>
        public IPagination Pagination { get; }

        /// <summary>
        /// Endpoints for testing retries.
        /// </summary>
        public IRetries Retries { get; }
        Task<PutAnythingIgnoredGenerationResponse> PutAnythingIgnoredGenerationAsync(string request);
        Task<ResponseBodyJsonGetResponse> ResponseBodyJsonGetAsync();
    }
    
    public class SDKConfig
    {
        public long? GlobalPathParam;
        public string? GlobalQueryParam;
    }

    /// <summary>
    /// Test: Test Summary
    /// 
    /// <remarks>
    /// Some test description.<br/>
    /// About our test document.
    /// </remarks>
    /// 
    /// <see>https://speakeasyapi.dev/docs/home} - Speakeasy Docs</see>
    /// </summary>
    public class SDK: ISDK
    {
        public SDKConfig Config { get; private set; }
        public static List<string> ServerList = new List<string>()
        {
            "http://localhost:35123",
            "http://broken",
            "http://{hostname}:{port}",
            "http://localhost:35123/anything/{something}",
            "{protocol}://{hostname}:{port}",
        };

        private const string _language = "csharp";
        private const string _sdkVersion = "0.3.2";
        private const string _sdkGenVersion = "2.191.3";
        private const string _openapiDocVersion = "0.1.0";
        private const string _userAgent = "speakeasy-sdk/csharp 0.3.2 2.191.3 0.1.0 openapi";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _defaultClient;
        private ISpeakeasyHttpClient _securityClient;
        public IGeneration Generation { get; private set; }
        public IErrors Errors { get; private set; }
        public IUnions Unions { get; private set; }
        public IFlattening Flattening { get; private set; }
        public IGlobals Globals { get; private set; }
        public IParameters Parameters { get; private set; }
        public INest Nest { get; private set; }
        public INested Nested { get; private set; }
        public IRequestBodies RequestBodies { get; private set; }
        public IResponseBodies ResponseBodies { get; private set; }
        public IServers Servers { get; private set; }
        public ITelemetry Telemetry { get; private set; }
        public IAuthNew AuthNew { get; private set; }
        public IAuth Auth { get; private set; }
        public IDocumentation Documentation { get; private set; }
        public IResource Resource { get; private set; }
        public IFirst First { get; private set; }
        public ISecond Second { get; private set; }
        public IPagination Pagination { get; private set; }
        public IRetries Retries { get; private set; }

        public SDK(Security? security = null, long? globalPathParam = null, string? globalQueryParam = null, string? serverUrl = null, ISpeakeasyHttpClient? client = null)
        {
            _serverUrl = serverUrl ?? SDK.ServerList[0];

            _defaultClient = new SpeakeasyHttpClient(client);
            _securityClient = _defaultClient;
            
            if(security != null)
            {
                _securityClient = SecuritySerializer.Apply(_defaultClient, security);
            }
            
            Config = new SDKConfig()
            {
                GlobalPathParam = globalPathParam,
                GlobalQueryParam = globalQueryParam,
            };

            Generation = new Generation(_defaultClient, _securityClient, _serverUrl, Config);
            Errors = new Errors(_defaultClient, _securityClient, _serverUrl, Config);
            Unions = new Unions(_defaultClient, _securityClient, _serverUrl, Config);
            Flattening = new Flattening(_defaultClient, _securityClient, _serverUrl, Config);
            Globals = new Globals(_defaultClient, _securityClient, _serverUrl, Config);
            Parameters = new Parameters(_defaultClient, _securityClient, _serverUrl, Config);
            Nest = new Nest(_defaultClient, _securityClient, _serverUrl, Config);
            Nested = new Nested(_defaultClient, _securityClient, _serverUrl, Config);
            RequestBodies = new RequestBodies(_defaultClient, _securityClient, _serverUrl, Config);
            ResponseBodies = new ResponseBodies(_defaultClient, _securityClient, _serverUrl, Config);
            Servers = new Servers(_defaultClient, _securityClient, _serverUrl, Config);
            Telemetry = new Telemetry(_defaultClient, _securityClient, _serverUrl, Config);
            AuthNew = new AuthNew(_defaultClient, _securityClient, _serverUrl, Config);
            Auth = new Auth(_defaultClient, _securityClient, _serverUrl, Config);
            Documentation = new Documentation(_defaultClient, _securityClient, _serverUrl, Config);
            Resource = new Resource(_defaultClient, _securityClient, _serverUrl, Config);
            First = new First(_defaultClient, _securityClient, _serverUrl, Config);
            Second = new Second(_defaultClient, _securityClient, _serverUrl, Config);
            Pagination = new Pagination(_defaultClient, _securityClient, _serverUrl, Config);
            Retries = new Retries(_defaultClient, _securityClient, _serverUrl, Config);
        }

        public async Task<PutAnythingIgnoredGenerationResponse> PutAnythingIgnoredGenerationAsync(string request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/ignoredGeneration";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Put, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new PutAnythingIgnoredGenerationResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Object = JsonConvert.DeserializeObject<PutAnythingIgnoredGenerationResponseBody>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }

        public async Task<ResponseBodyJsonGetResponse> ResponseBodyJsonGetAsync()
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/json";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new ResponseBodyJsonGetResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.HttpBinSimpleJsonObject = JsonConvert.DeserializeObject<HttpBinSimpleJsonObject>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
    }
}