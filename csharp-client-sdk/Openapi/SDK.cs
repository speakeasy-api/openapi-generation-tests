//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Openapi
{
    using Newtonsoft.Json;
    using Openapi.Hooks;
    using Openapi.Models.Errors;
    using Openapi.Models.Operations;
    using Openapi.Models.Shared;
    using Openapi.Utils;
    using Openapi.Utils.Retries;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading.Tasks;


    /// <summary>
    /// Something is a variable for changing the root path
    /// </summary>
    public enum ServerSomething
    {
        [JsonProperty("something")]
        Something,
        [JsonProperty("somethingElse")]
        SomethingElse,
        [JsonProperty("somethingElseAgain")]
        SomethingElseAgain,
    }

    public static class ServerSomethingExtension
    {
        public static string Value(this ServerSomething value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static ServerSomething ToEnum(this string value)
        {
            foreach(var field in typeof(ServerSomething).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is ServerSomething)
                    {
                        return (ServerSomething)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum ServerSomething");
        }
    }

    /// <summary>
    /// Speakeasy&apos;s Uber Test Spec: Contains a wide array of different operation types and schema to try and cover enough ground to ensure good coverage of our support of OpenAPI
    /// 
    /// <remarks>
    /// Some test description.<br/>
    /// About our test document.
    /// </remarks>
    /// 
    /// <see>https://speakeasy.com/docs} - Speakeasy Docs</see>
    /// </summary>
    public interface ISDK
    {

        /// <summary>
        /// Endpoints for purely testing valid generation behavior.
        /// </summary>
        public IGeneration Generation { get; }

        /// <summary>
        /// Endpoints for testing union types.
        /// </summary>
        public IUnions Unions { get; }

        /// <summary>
        /// Endpoints for testing error responses.
        /// </summary>
        public IErrors Errors { get; }

        /// <summary>
        /// Endpoints for testing custom HTTP clients
        /// </summary>
        public ICustomClient CustomClient { get; }

        /// <summary>
        /// Endpoints for testing response bodies.
        /// </summary>
        public IResponseBodies ResponseBodies { get; }

        /// <summary>
        /// Endpoints for testing flattening through request body and parameter combinations.
        /// </summary>
        public IFlattening Flattening { get; }

        /// <summary>
        /// Endpoints for testing global parameters.
        /// </summary>
        public IGlobals Globals { get; }

        /// <summary>
        /// Endpoints for testing parameters.
        /// </summary>
        public IParameters Parameters { get; }

        /// <summary>
        /// Endpoints for testing hooks
        /// </summary>
        public IHooksSDK Hooks { get; }

        /// <summary>
        /// Endpoints for testing request bodies.
        /// </summary>
        public IRequestBodies RequestBodies { get; }
        public INest Nest { get; }
        public INested Nested { get; }

        /// <summary>
        /// Endpoints for testing authentication.
        /// </summary>
        public IAuth Auth { get; }

        /// <summary>
        /// Endpoints for testing open/closed enums
        /// </summary>
        public IOpenEnums OpenEnums { get; }

        /// <summary>
        /// Endpoints for testing servers.
        /// </summary>
        public IServers Servers { get; }

        /// <summary>
        /// Endpoints for testing telemetry.
        /// </summary>
        public ITelemetry Telemetry { get; }

        /// <summary>
        /// Endpoints for testing authentication.
        /// </summary>
        public IAuthNew AuthNew { get; }
        public IResource Resource { get; }

        /// <summary>
        /// Testing for documentation extensions and tooling.
        /// </summary>
        public IDocumentation Documentation { get; }
        public IFirst First { get; }
        public ISecond Second { get; }

        /// <summary>
        /// Endpoints for testing HTTP methods.
        /// </summary>
        public IMethods Methods { get; }

        /// <summary>
        /// Endpoints for testing the pagination extension
        /// </summary>
        public IPagination Pagination { get; }
        public IHealth Health { get; }

        /// <summary>
        /// Endpoints for testing retries.
        /// </summary>
        public IRetries Retries { get; }

        /// <summary>
        /// Endpoints for testing HTTP status codes, especially OAS-defined XX and default.
        /// </summary>
        public IStatusCode StatusCode { get; }

        /// <summary>
        /// Tests conflict with C# System namespace
        /// </summary>
        Task<AmbiguousQueryParamResponse> AmbiguousQueryParamAsync(Models.Operations.Console console);
        Task<AuthenticatedRequestResponse> AuthenticatedRequestAsync(AuthenticatedRequestSecurity security, AuthenticatedRequestRequestBody? request = null);

        /// <summary>
        /// Test potential namespace conflicts with java.lang.Object
        /// </summary>
        Task<ConflictingEnumResponse> ConflictingEnumAsync(ConflictingEnum? request = null);
        Task<IgnoredGenerationPutResponse> IgnoredGenerationPutAsync(string request);
        Task<MultilineExampleResponse> MultilineExampleAsync(MultilineExampleRequestBody? request = null);
        Task<PostAdditionalPropertiesWithNullableFieldsResponse> PostAdditionalPropertiesWithNullableFieldsAsync(PostAdditionalPropertiesWithNullableFieldsRequestBody? request = null);
        Task<ResponseBodyJsonGetResponse> ResponseBodyJsonGetAsync();
    }

    public class SDKConfig
    {
        /// <summary>
        /// List of server URLs available to the SDK.
        /// </summary>
        public static readonly string[] ServerList = {
            "http://localhost:35123",
            "http://broken",
            "http://{hostname}:{port}",
            "http://localhost:35123/anything/{something}",
            "{protocol}://{hostname}:{port}",
        };

        public string ServerUrl = "";
        public int ServerIndex = 0;
        public List<Dictionary<string, string>> ServerDefaults = new List<Dictionary<string, string>>();
        public bool? GlobalHeaderParam;
        public string? GlobalHiddenHeaderParam;
        public string? GlobalHiddenPathParam;
        public string? GlobalHiddenQueryParam;
        public string? GlobalOptionalHiddenPathParam;
        public string? GlobalOptionalPathParam;
        public long? GlobalPathParam;
        public string? GlobalQueryParam;
        public SDKHooks Hooks = new SDKHooks();
        public RetryConfig? RetryConfig = null;

        public string GetTemplatedServerUrl()
        {
            if (!String.IsNullOrEmpty(this.ServerUrl))
            {
                return Utilities.TemplateUrl(Utilities.RemoveSuffix(this.ServerUrl, "/"), new Dictionary<string, string>());
            }
            return Utilities.TemplateUrl(SDKConfig.ServerList[this.ServerIndex], this.ServerDefaults[this.ServerIndex]);
        }

        public ISpeakeasyHttpClient InitHooks(ISpeakeasyHttpClient client)
        {
            string preHooksUrl = GetTemplatedServerUrl();
            var (postHooksUrl, postHooksClient) = this.Hooks.SDKInit(preHooksUrl, client);
            if (preHooksUrl != postHooksUrl)
            {
                this.ServerUrl = postHooksUrl;
            }
            return postHooksClient;
        }
    }

    /// <summary>
    /// Speakeasy&apos;s Uber Test Spec: Contains a wide array of different operation types and schema to try and cover enough ground to ensure good coverage of our support of OpenAPI
    /// 
    /// <remarks>
    /// Some test description.<br/>
    /// About our test document.
    /// </remarks>
    /// 
    /// <see>https://speakeasy.com/docs} - Speakeasy Docs</see>
    /// </summary>
    public class SDK: ISDK
    {
        public SDKConfig SDKConfiguration { get; private set; }

        private const string _language = "csharp";
        private const string _sdkVersion = "0.4.0";
        private const string _sdkGenVersion = "2.497.0";
        private const string _openapiDocVersion = "0.1.0";
        private const string _userAgent = "speakeasy-sdk/csharp 0.4.0 2.497.0 0.1.0 Openapi";
        private string _serverUrl = "";
        private int _serverIndex = 0;
        private ISpeakeasyHttpClient _client;
        private Func<Openapi.Models.Shared.Security>? _securitySource;
        public IGeneration Generation { get; private set; }
        public IUnions Unions { get; private set; }
        public IErrors Errors { get; private set; }
        public ICustomClient CustomClient { get; private set; }
        public IResponseBodies ResponseBodies { get; private set; }
        public IFlattening Flattening { get; private set; }
        public IGlobals Globals { get; private set; }
        public IParameters Parameters { get; private set; }
        public IHooksSDK Hooks { get; private set; }
        public IRequestBodies RequestBodies { get; private set; }
        public INest Nest { get; private set; }
        public INested Nested { get; private set; }
        public IAuth Auth { get; private set; }
        public IOpenEnums OpenEnums { get; private set; }
        public IServers Servers { get; private set; }
        public ITelemetry Telemetry { get; private set; }
        public IAuthNew AuthNew { get; private set; }
        public IResource Resource { get; private set; }
        public IDocumentation Documentation { get; private set; }
        public IFirst First { get; private set; }
        public ISecond Second { get; private set; }
        public IMethods Methods { get; private set; }
        public IPagination Pagination { get; private set; }
        public IHealth Health { get; private set; }
        public IRetries Retries { get; private set; }
        public IStatusCode StatusCode { get; private set; }

        public SDK(Openapi.Models.Shared.Security? security = null, Func<Openapi.Models.Shared.Security>? securitySource = null, bool? globalHeaderParam = null, string? globalHiddenHeaderParam = null, string? globalHiddenPathParam = null, string? globalHiddenQueryParam = null, string? globalOptionalHiddenPathParam = null, string? globalOptionalPathParam = null, long? globalPathParam = null, string? globalQueryParam = null, int? serverIndex = null, string?  hostname = null, string?  port = null, ServerSomething? something = null, string?  protocol = null, string? serverUrl = null, Dictionary<string, string>? urlParams = null, ISpeakeasyHttpClient? client = null, RetryConfig? retryConfig = null)
        {
            if (serverIndex != null)
            {
                if (serverIndex.Value < 0 || serverIndex.Value >= SDKConfig.ServerList.Length)
                {
                    throw new Exception($"Invalid server index {serverIndex.Value}");
                }
                _serverIndex = serverIndex.Value;
            }

            if (serverUrl != null)
            {
                if (urlParams != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, urlParams);
                }
                _serverUrl = serverUrl;
            }
            List<Dictionary<string, string>> serverDefaults = new List<Dictionary<string, string>>()
            {
                new Dictionary<string, string>()
                {
                },
                new Dictionary<string, string>()
                {
                },
                new Dictionary<string, string>()
                {
                    {"hostname", hostname == null ? "localhost" : hostname},
                    {"port", port == null ? "35123" : port},
                },
                new Dictionary<string, string>()
                {
                    {"something", something == null ? "something" : ServerSomethingExtension.Value(something.Value)},
                },
                new Dictionary<string, string>()
                {
                    {"hostname", hostname == null ? "localhost" : hostname},
                    {"port", port == null ? "35123" : port},
                    {"protocol", protocol == null ? "http" : protocol},
                },
            };

            _client = client ?? new SpeakeasyHttpClient();

            if(securitySource != null)
            {
                _securitySource = securitySource;
            }
            else if(security != null)
            {
                _securitySource = () => security;
            }

            SDKConfiguration = new SDKConfig()
            {
                GlobalHeaderParam = globalHeaderParam,
                GlobalHiddenHeaderParam = globalHiddenHeaderParam,
                GlobalHiddenPathParam = globalHiddenPathParam,
                GlobalHiddenQueryParam = globalHiddenQueryParam,
                GlobalOptionalHiddenPathParam = globalOptionalHiddenPathParam,
                GlobalOptionalPathParam = globalOptionalPathParam,
                GlobalPathParam = globalPathParam,
                GlobalQueryParam = globalQueryParam,
                ServerDefaults = serverDefaults,
                ServerIndex = _serverIndex,
                ServerUrl = _serverUrl,
                RetryConfig = retryConfig
            };

            _client = SDKConfiguration.InitHooks(_client);


            Generation = new Generation(_client, _securitySource, _serverUrl, SDKConfiguration);


            Unions = new Unions(_client, _securitySource, _serverUrl, SDKConfiguration);


            Errors = new Errors(_client, _securitySource, _serverUrl, SDKConfiguration);


            CustomClient = new CustomClient(_client, _securitySource, _serverUrl, SDKConfiguration);


            ResponseBodies = new ResponseBodies(_client, _securitySource, _serverUrl, SDKConfiguration);


            Flattening = new Flattening(_client, _securitySource, _serverUrl, SDKConfiguration);


            Globals = new Globals(_client, _securitySource, _serverUrl, SDKConfiguration);


            Parameters = new Parameters(_client, _securitySource, _serverUrl, SDKConfiguration);


            Hooks = new HooksSDK(_client, _securitySource, _serverUrl, SDKConfiguration);


            RequestBodies = new RequestBodies(_client, _securitySource, _serverUrl, SDKConfiguration);


            Nest = new Nest(_client, _securitySource, _serverUrl, SDKConfiguration);


            Nested = new Nested(_client, _securitySource, _serverUrl, SDKConfiguration);


            Auth = new Auth(_client, _securitySource, _serverUrl, SDKConfiguration);


            OpenEnums = new OpenEnums(_client, _securitySource, _serverUrl, SDKConfiguration);


            Servers = new Servers(_client, _securitySource, _serverUrl, SDKConfiguration);


            Telemetry = new Telemetry(_client, _securitySource, _serverUrl, SDKConfiguration);


            AuthNew = new AuthNew(_client, _securitySource, _serverUrl, SDKConfiguration);


            Resource = new Resource(_client, _securitySource, _serverUrl, SDKConfiguration);


            Documentation = new Documentation(_client, _securitySource, _serverUrl, SDKConfiguration);


            First = new First(_client, _securitySource, _serverUrl, SDKConfiguration);


            Second = new Second(_client, _securitySource, _serverUrl, SDKConfiguration);


            Methods = new Methods(_client, _securitySource, _serverUrl, SDKConfiguration);


            Pagination = new Pagination(_client, _securitySource, _serverUrl, SDKConfiguration);


            Health = new Health(_client, _securitySource, _serverUrl, SDKConfiguration);


            Retries = new Retries(_client, _securitySource, _serverUrl, SDKConfiguration);


            StatusCode = new StatusCode(_client, _securitySource, _serverUrl, SDKConfiguration);
        }

        public async Task<AmbiguousQueryParamResponse> AmbiguousQueryParamAsync(Models.Operations.Console console)
        {
            var request = new AmbiguousQueryParamRequest()
            {
                Console = console,
            };
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();
            var urlString = URLBuilder.Build(baseUrl, "/anything/queryParams/namespaceConflict", request);

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("ambiguousQueryParam", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await _client.SendAsync(httpRequest);
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {                
                return new AmbiguousQueryParamResponse()
                {
                    StatusCode = responseStatusCode,
                    ContentType = contentType,
                    RawResponse = httpResponse
                };
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKException("API error occurred", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKException("API error occurred", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
            }

            throw new Models.Errors.SDKException("Unknown status code received", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
        }

        public async Task<AuthenticatedRequestResponse> AuthenticatedRequestAsync(AuthenticatedRequestSecurity security, AuthenticatedRequestRequestBody? request = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/clientcredentials/authenticatedrequest";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (security == null)
            {
                throw new ArgumentNullException(nameof(security), "security cannot be null.");
            }

            httpRequest = new SecurityMetadata(() => security).Apply(httpRequest);
            var hookCtx = new HookContext("authenticatedRequest", null, () => security);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await _client.SendAsync(httpRequest);
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {                
                return new AuthenticatedRequestResponse()
                {
                    StatusCode = responseStatusCode,
                    ContentType = contentType,
                    RawResponse = httpResponse
                };
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKException("API error occurred", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKException("API error occurred", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
            }

            throw new Models.Errors.SDKException("Unknown status code received", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
        }

        public async Task<ConflictingEnumResponse> ConflictingEnumAsync(ConflictingEnum? request = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/anything/conflictingEnum/";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("conflictingEnum", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await _client.SendAsync(httpRequest);
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {                
                return new ConflictingEnumResponse()
                {
                    StatusCode = responseStatusCode,
                    ContentType = contentType,
                    RawResponse = httpResponse
                };
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKException("API error occurred", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKException("API error occurred", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
            }

            throw new Models.Errors.SDKException("Unknown status code received", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
        }

        public async Task<IgnoredGenerationPutResponse> IgnoredGenerationPutAsync(string request)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/anything/ignoredGeneration";

            var httpRequest = new HttpRequestMessage(HttpMethod.Put, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, false);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("ignoredGenerationPut", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await _client.SendAsync(httpRequest);
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<IgnoredGenerationPutResponseBody>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new IgnoredGenerationPutResponse()
                    {
                        StatusCode = responseStatusCode,
                        ContentType = contentType,
                        RawResponse = httpResponse
                    };
                    response.Object = obj;
                    return response;
                }

                throw new Models.Errors.SDKException("Unknown content type received", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKException("API error occurred", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKException("API error occurred", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
            }

            throw new Models.Errors.SDKException("Unknown status code received", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
        }

        public async Task<MultilineExampleResponse> MultilineExampleAsync(MultilineExampleRequestBody? request = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/anything/multilineExample";

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("multilineExample", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await _client.SendAsync(httpRequest);
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 201)
            {                
                return new MultilineExampleResponse()
                {
                    StatusCode = responseStatusCode,
                    ContentType = contentType,
                    RawResponse = httpResponse
                };
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKException("API error occurred", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKException("API error occurred", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
            }

            throw new Models.Errors.SDKException("Unknown status code received", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
        }

        public async Task<PostAdditionalPropertiesWithNullableFieldsResponse> PostAdditionalPropertiesWithNullableFieldsAsync(PostAdditionalPropertiesWithNullableFieldsRequestBody? request = null)
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/anything/additionalPropertiesWithNullableFields";

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);

            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, true);
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("postAdditionalPropertiesWithNullableFields", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await _client.SendAsync(httpRequest);
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<PostAdditionalPropertiesWithNullableFieldsResponseBody>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Include);
                    var response = new PostAdditionalPropertiesWithNullableFieldsResponse()
                    {
                        StatusCode = responseStatusCode,
                        ContentType = contentType,
                        RawResponse = httpResponse
                    };
                    response.Object = obj;
                    return response;
                }

                throw new Models.Errors.SDKException("Unknown content type received", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKException("API error occurred", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKException("API error occurred", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
            }

            throw new Models.Errors.SDKException("Unknown status code received", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
        }

        public async Task<ResponseBodyJsonGetResponse> ResponseBodyJsonGetAsync()
        {
            string baseUrl = this.SDKConfiguration.GetTemplatedServerUrl();

            var urlString = baseUrl + "/json";

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);

            if (_securitySource != null)
            {
                httpRequest = new SecurityMetadata(_securitySource).Apply(httpRequest);
            }

            var hookCtx = new HookContext("responseBodyJsonGet", null, _securitySource);

            httpRequest = await this.SDKConfiguration.Hooks.BeforeRequestAsync(new BeforeRequestContext(hookCtx), httpRequest);

            HttpResponseMessage httpResponse;
            try
            {
                httpResponse = await _client.SendAsync(httpRequest);
                int _statusCode = (int)httpResponse.StatusCode;

                if (_statusCode >= 400 && _statusCode < 500 || _statusCode >= 500 && _statusCode < 600)
                {
                    var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), httpResponse, null);
                    if (_httpResponse != null)
                    {
                        httpResponse = _httpResponse;
                    }
                }
            }
            catch (Exception error)
            {
                var _httpResponse = await this.SDKConfiguration.Hooks.AfterErrorAsync(new AfterErrorContext(hookCtx), null, error);
                if (_httpResponse != null)
                {
                    httpResponse = _httpResponse;
                }
                else
                {
                    throw;
                }
            }

            httpResponse = await this.SDKConfiguration.Hooks.AfterSuccessAsync(new AfterSuccessContext(hookCtx), httpResponse);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            int responseStatusCode = (int)httpResponse.StatusCode;
            if(responseStatusCode == 200)
            {
                if(Utilities.IsContentTypeMatch("application/json", contentType))
                {
                    var obj = ResponseBodyDeserializer.Deserialize<HttpBinSimpleJsonObject>(await httpResponse.Content.ReadAsStringAsync(), NullValueHandling.Ignore);
                    var response = new ResponseBodyJsonGetResponse()
                    {
                        StatusCode = responseStatusCode,
                        ContentType = contentType,
                        RawResponse = httpResponse
                    };
                    response.HttpBinSimpleJsonObject = obj;
                    return response;
                }

                throw new Models.Errors.SDKException("Unknown content type received", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
            }
            else if(responseStatusCode >= 400 && responseStatusCode < 500)
            {
                throw new Models.Errors.SDKException("API error occurred", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
            }
            else if(responseStatusCode >= 500 && responseStatusCode < 600)
            {
                throw new Models.Errors.SDKException("API error occurred", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
            }

            throw new Models.Errors.SDKException("Unknown status code received", responseStatusCode, await httpResponse.Content.ReadAsStringAsync(), httpResponse);
        }
    }
}