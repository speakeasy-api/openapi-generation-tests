
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace SDK
{
    using Newtonsoft.Json;
    using SDK.Models.Operations;
    using SDK.Models.Shared;
    using SDK.Utils;
    using System.Collections.Generic;
    using System.Net.Http.Headers;
    using System.Net.Http;
    using System.Threading.Tasks;
    using System;

    /// <summary>
    /// Endpoints for testing error responses.
    /// </summary>
    public interface IErrorsSDK
    {
        Task<ConnectionErrorGetResponse> ConnectionErrorGetAsync(string? serverUrl = null);
        Task<StatusGetErrorResponse> StatusGetErrorAsync(long statusCode);
        Task<StatusGetXSpeakeasyErrorsResponse> StatusGetXSpeakeasyErrorsAsync(long statusCode, string? serverUrl = null);
    }

    /// <summary>
    /// Endpoints for testing error responses.
    /// </summary>
    public class ErrorsSDK: IErrorsSDK
    {
        /**
        * ConnectionErrorGetSERVERS contains the list of server urls available to the SDK.
        */
        public static readonly string[] ConnectionErrorGetSERVERS = {
            "http://somebrokenapi.broken",
        };

        /**
        * StatusGetXSpeakeasyErrorsSERVERS contains the list of server urls available to the SDK.
        */
        public static readonly string[] StatusGetXSpeakeasyErrorsSERVERS = {
            "http://localhost:35456",
        };

        public SDKConfig Config { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.1.0";
        private const string _sdkGenVersion = "2.169.0";
        private const string _openapiDocVersion = "0.1.0";
        private const string _userAgent = "speakeasy-sdk/csharp 0.1.0 2.169.0 0.1.0 openapi";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _defaultClient;
        private ISpeakeasyHttpClient _securityClient;

        public ErrorsSDK(ISpeakeasyHttpClient defaultClient, ISpeakeasyHttpClient securityClient, string serverUrl, SDKConfig config)
        {
            _defaultClient = defaultClient;
            _securityClient = securityClient;
            _serverUrl = serverUrl;
            Config = config;
        }
        

        public async Task<ConnectionErrorGetResponse> ConnectionErrorGetAsync(string? serverUrl = null)
        {
            string baseUrl = ConnectionErrorGetSERVERS[0];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/connectionError";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new ConnectionErrorGetResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                
                return response;
            }
            return response;
        }
        

        public async Task<StatusGetErrorResponse> StatusGetErrorAsync(long statusCode)
        {
            var request = new StatusGetErrorRequest()
            {
                StatusCode = statusCode,
            };
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = URLBuilder.Build(baseUrl, "/status/{statusCode}", request);
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new StatusGetErrorResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200) || (response.StatusCode == 300) || (response.StatusCode == 400) || (response.StatusCode == 500))
            {
                
                return response;
            }
            return response;
        }
        

        public async Task<StatusGetXSpeakeasyErrorsResponse> StatusGetXSpeakeasyErrorsAsync(long statusCode, string? serverUrl = null)
        {
            var request = new StatusGetXSpeakeasyErrorsRequest()
            {
                StatusCode = statusCode,
            };
            string baseUrl = StatusGetXSpeakeasyErrorsSERVERS[0];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = URLBuilder.Build(baseUrl, "/errors/{statusCode}", request);
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new StatusGetXSpeakeasyErrorsResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200) || (response.StatusCode == 300) || (response.StatusCode == 400))
            {
                
                return response;
            }
            if((response.StatusCode == 500))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Error = JsonConvert.DeserializeObject<Error>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            if((response.StatusCode == 501))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.StatusGetXSpeakeasyErrors501ApplicationJSONObject = JsonConvert.DeserializeObject<StatusGetXSpeakeasyErrors501ApplicationJSON>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        
    }
}