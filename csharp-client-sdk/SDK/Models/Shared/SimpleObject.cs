
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace SDK.Models.Shared
{
    using Newtonsoft.Json;
    using NodaTime;
    using SDK.Utils;
    using System.Numerics;
    using System;
    
    /// <summary>
    /// A simple object that uses all our supported primitive types and enums and has optional properties.
    /// 
    /// <see>https://docs.speakeasyapi.dev} - A link to the external docs.</see>
    /// </summary>
    public class SimpleObject
    {

        /// <summary>
        /// An any property.
        /// </summary>
        [JsonProperty("any")]
        [SpeakeasyMetadata("header:name=any pathParam:name=any queryParam:name=any form:name=any multipartForm:name=any")]
        public object Any { get; set; } = default!;

        /// <summary>
        /// A boolean property.
        /// </summary>
        [JsonProperty("bool")]
        [SpeakeasyMetadata("header:name=bool pathParam:name=bool queryParam:name=bool form:name=bool multipartForm:name=bool")]
        public bool Bool { get; set; } = default!;

        /// <summary>
        /// A date property.
        /// </summary>
        [JsonProperty("date")]
        [SpeakeasyMetadata("header:name=date pathParam:name=date queryParam:name=date form:name=date multipartForm:name=date")]
        public LocalDate Date { get; set; } = default!;

        /// <summary>
        /// A date-time property.
        /// </summary>
        [JsonProperty("dateTime")]
        [SpeakeasyMetadata("header:name=dateTime pathParam:name=dateTime queryParam:name=dateTime form:name=dateTime multipartForm:name=dateTime")]
        public DateTime DateTime { get; set; } = default!;

        /// <summary>
        /// A string based enum
        /// </summary>
        [JsonProperty("enum")]
        [SpeakeasyMetadata("header:name=enum pathParam:name=enum queryParam:name=enum form:name=enum multipartForm:name=enum")]
        public Enum Enum { get; set; } = default!;

        /// <summary>
        /// A float32 property.
        /// </summary>
        [JsonProperty("float32")]
        [SpeakeasyMetadata("header:name=float32 pathParam:name=float32 queryParam:name=float32 form:name=float32 multipartForm:name=float32")]
        public float Float32 { get; set; } = default!;

        /// <summary>
        /// An integer property.
        /// </summary>
        [JsonProperty("int")]
        [SpeakeasyMetadata("header:name=int pathParam:name=int queryParam:name=int form:name=int multipartForm:name=int")]
        public long Int { get; set; } = default!;

        /// <summary>
        /// An int32 property.
        /// </summary>
        [JsonProperty("int32")]
        [SpeakeasyMetadata("header:name=int32 pathParam:name=int32 queryParam:name=int32 form:name=int32 multipartForm:name=int32")]
        public int Int32 { get; set; } = default!;

        /// <summary>
        /// An int32 enum property.
        /// </summary>
        [JsonProperty("int32Enum")]
        [SpeakeasyMetadata("header:name=int32Enum pathParam:name=int32Enum queryParam:name=int32Enum form:name=int32Enum multipartForm:name=int32Enum")]
        public SimpleObjectInt32Enum Int32Enum { get; set; } = default!;

        /// <summary>
        /// An integer enum property.
        /// </summary>
        [JsonProperty("intEnum")]
        [SpeakeasyMetadata("header:name=intEnum pathParam:name=intEnum queryParam:name=intEnum form:name=intEnum multipartForm:name=intEnum")]
        public SimpleObjectIntEnum IntEnum { get; set; } = default!;

        /// <summary>
        /// A number property.
        /// </summary>
        [JsonProperty("num")]
        [SpeakeasyMetadata("header:name=num pathParam:name=num queryParam:name=num form:name=num multipartForm:name=num")]
        public double Num { get; set; } = default!;

        /// <summary>
        /// A string property.
        /// </summary>
        [JsonProperty("str")]
        [SpeakeasyMetadata("header:name=str pathParam:name=str queryParam:name=str form:name=str multipartForm:name=str")]
        public string Str { get; set; } = default!;

        [JsonProperty("bigint")]
        [SpeakeasyMetadata("header:name=bigint pathParam:name=bigint queryParam:name=bigint form:name=bigint multipartForm:name=bigint")]
        public BigInteger? Bigint { get; set; }

        [JsonProperty("bigintStr")]
        [JsonConverter(typeof(BigIntSerializer))]
        [SpeakeasyMetadata("header:name=bigintStr pathParam:name=bigintStr queryParam:name=bigintStr form:name=bigintStr multipartForm:name=bigintStr")]
        public BigInteger? BigintStr { get; set; }

        /// <summary>
        /// An optional boolean property.
        /// </summary>
        [JsonProperty("boolOpt")]
        [SpeakeasyMetadata("header:name=boolOpt pathParam:name=boolOpt queryParam:name=boolOpt form:name=boolOpt multipartForm:name=boolOpt")]
        public bool? BoolOpt { get; set; }

        [JsonProperty("decimal")]
        [SpeakeasyMetadata("header:name=decimal pathParam:name=decimal queryParam:name=decimal form:name=decimal multipartForm:name=decimal")]
        public decimal? Decimal { get; set; }

        [JsonProperty("decimalStr")]
        [JsonConverter(typeof(DecimalSerializer))]
        [SpeakeasyMetadata("header:name=decimalStr pathParam:name=decimalStr queryParam:name=decimalStr form:name=decimalStr multipartForm:name=decimalStr")]
        public decimal? DecimalStr { get; set; }

        /// <summary>
        /// An optional integer property will be null for tests.
        /// </summary>
        [JsonProperty("intOptNull")]
        [SpeakeasyMetadata("header:name=intOptNull pathParam:name=intOptNull queryParam:name=intOptNull form:name=intOptNull multipartForm:name=intOptNull")]
        public long? IntOptNull { get; set; }

        /// <summary>
        /// An optional number property will be null for tests.
        /// </summary>
        [JsonProperty("numOptNull")]
        [SpeakeasyMetadata("header:name=numOptNull pathParam:name=numOptNull queryParam:name=numOptNull form:name=numOptNull multipartForm:name=numOptNull")]
        public double? NumOptNull { get; set; }

        /// <summary>
        /// An optional string property.
        /// </summary>
        [JsonProperty("strOpt")]
        [SpeakeasyMetadata("header:name=strOpt pathParam:name=strOpt queryParam:name=strOpt form:name=strOpt multipartForm:name=strOpt")]
        public string? StrOpt { get; set; }
    }
}