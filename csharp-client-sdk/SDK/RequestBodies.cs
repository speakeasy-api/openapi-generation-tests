
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace SDK
{
    using Newtonsoft.Json;
    using NodaTime;
    using SDK.Models.Operations;
    using SDK.Models.Shared;
    using SDK.Utils;
    using System.Collections.Generic;
    using System.Net.Http.Headers;
    using System.Net.Http;
    using System.Numerics;
    using System.Threading.Tasks;
    using System;

    /// <summary>
    /// Endpoints for testing request bodies.
    /// </summary>
    public interface IRequestBodiesSDK
    {
        Task<NullableObjectPostResponse> NullableObjectPostAsync(NullableObject request);
        Task<NullableRequiredEmptyObjectPostResponse> NullableRequiredEmptyObjectPostAsync(NullableRequiredEmptyObjectPostRequestBody request);
        Task<NullableRequiredPropertyPostResponse> NullableRequiredPropertyPostAsync(NullableRequiredPropertyPostRequestBody request);
        Task<NullableRequiredSharedObjectPostResponse> NullableRequiredSharedObjectPostAsync(NullableRequiredSharedObjectPostRequestBody request);
        Task<RequestBodyPostApplicationJsonArrayResponse> RequestBodyPostApplicationJsonArrayAsync(List<SimpleObject> request, string? serverUrl = null);
        Task<RequestBodyPostApplicationJsonArrayCamelCaseResponse> RequestBodyPostApplicationJsonArrayCamelCaseAsync(List<SimpleObjectCamelCase> request, string? serverUrl = null);
        Task<RequestBodyPostApplicationJsonArrayObjResponse> RequestBodyPostApplicationJsonArrayObjAsync(List<SimpleObject> request);
        Task<RequestBodyPostApplicationJsonArrayObjCamelCaseResponse> RequestBodyPostApplicationJsonArrayObjCamelCaseAsync(List<SimpleObjectCamelCase> request);
        Task<RequestBodyPostApplicationJsonArrayOfArrayResponse> RequestBodyPostApplicationJsonArrayOfArrayAsync(List<List<SimpleObject>> request, string? serverUrl = null);
        Task<RequestBodyPostApplicationJsonArrayOfArrayCamelCaseResponse> RequestBodyPostApplicationJsonArrayOfArrayCamelCaseAsync(List<List<SimpleObjectCamelCase>> request, string? serverUrl = null);
        Task<RequestBodyPostApplicationJsonArrayOfArrayOfPrimitiveResponse> RequestBodyPostApplicationJsonArrayOfArrayOfPrimitiveAsync(List<List<string>> request, string? serverUrl = null);
        Task<RequestBodyPostApplicationJsonArrayOfMapResponse> RequestBodyPostApplicationJsonArrayOfMapAsync(List<Dictionary<string, SimpleObject>> request, string? serverUrl = null);
        Task<RequestBodyPostApplicationJsonArrayOfMapCamelCaseResponse> RequestBodyPostApplicationJsonArrayOfMapCamelCaseAsync(List<Dictionary<string, SimpleObjectCamelCase>> request, string? serverUrl = null);
        Task<RequestBodyPostApplicationJsonArrayOfPrimitiveResponse> RequestBodyPostApplicationJsonArrayOfPrimitiveAsync(List<string> request, string? serverUrl = null);
        Task<RequestBodyPostApplicationJsonDeepResponse> RequestBodyPostApplicationJsonDeepAsync(DeepObject request);
        Task<RequestBodyPostApplicationJsonDeepCamelCaseResponse> RequestBodyPostApplicationJsonDeepCamelCaseAsync(DeepObjectCamelCase request);
        Task<RequestBodyPostApplicationJsonMapResponse> RequestBodyPostApplicationJsonMapAsync(Dictionary<string, SimpleObject> request, string? serverUrl = null);
        Task<RequestBodyPostApplicationJsonMapCamelCaseResponse> RequestBodyPostApplicationJsonMapCamelCaseAsync(Dictionary<string, SimpleObjectCamelCase> request, string? serverUrl = null);
        Task<RequestBodyPostApplicationJsonMapObjResponse> RequestBodyPostApplicationJsonMapObjAsync(Dictionary<string, SimpleObject> request);
        Task<RequestBodyPostApplicationJsonMapObjCamelCaseResponse> RequestBodyPostApplicationJsonMapObjCamelCaseAsync(Dictionary<string, SimpleObjectCamelCase> request);
        Task<RequestBodyPostApplicationJsonMapOfArrayResponse> RequestBodyPostApplicationJsonMapOfArrayAsync(Dictionary<string, List<SimpleObject>> request, string? serverUrl = null);
        Task<RequestBodyPostApplicationJsonMapOfArrayCamelCaseResponse> RequestBodyPostApplicationJsonMapOfArrayCamelCaseAsync(Dictionary<string, List<SimpleObjectCamelCase>> request, string? serverUrl = null);
        Task<RequestBodyPostApplicationJsonMapOfMapResponse> RequestBodyPostApplicationJsonMapOfMapAsync(Dictionary<string, Dictionary<string, SimpleObject>> request, string? serverUrl = null);
        Task<RequestBodyPostApplicationJsonMapOfMapCamelCaseResponse> RequestBodyPostApplicationJsonMapOfMapCamelCaseAsync(Dictionary<string, Dictionary<string, SimpleObjectCamelCase>> request, string? serverUrl = null);
        Task<RequestBodyPostApplicationJsonMapOfMapOfPrimitiveResponse> RequestBodyPostApplicationJsonMapOfMapOfPrimitiveAsync(Dictionary<string, Dictionary<string, string>> request, string? serverUrl = null);
        Task<RequestBodyPostApplicationJsonMapOfPrimitiveResponse> RequestBodyPostApplicationJsonMapOfPrimitiveAsync(Dictionary<string, string> request, string? serverUrl = null);
        Task<RequestBodyPostApplicationJsonMultipleJsonFilteredResponse> RequestBodyPostApplicationJsonMultipleJsonFilteredAsync(SimpleObject request);
        Task<RequestBodyPostApplicationJsonSimpleResponse> RequestBodyPostApplicationJsonSimpleAsync(SimpleObject request);
        Task<RequestBodyPostApplicationJsonSimpleCamelCaseResponse> RequestBodyPostApplicationJsonSimpleCamelCaseAsync(SimpleObjectCamelCase request);
        Task<RequestBodyPostComplexNumberTypesResponse> RequestBodyPostComplexNumberTypesAsync(RequestBodyPostComplexNumberTypesRequest request);
        Task<RequestBodyPostDefaultsAndConstsResponse> RequestBodyPostDefaultsAndConstsAsync(DefaultsAndConsts request);
        Task<RequestBodyPostEmptyObjectResponse> RequestBodyPostEmptyObjectAsync(RequestBodyPostEmptyObjectRequestBody request);
        Task<RequestBodyPostFormDeepResponse> RequestBodyPostFormDeepAsync(DeepObject request);
        Task<RequestBodyPostFormMapPrimitiveResponse> RequestBodyPostFormMapPrimitiveAsync(Dictionary<string, string> request);
        Task<RequestBodyPostFormSimpleResponse> RequestBodyPostFormSimpleAsync(SimpleObject request);
        Task<RequestBodyPostJsonDataTypesArrayBigIntResponse> RequestBodyPostJsonDataTypesArrayBigIntAsync(List<BigInteger> request);
        Task<RequestBodyPostJsonDataTypesArrayDateResponse> RequestBodyPostJsonDataTypesArrayDateAsync(List<LocalDate> request);
        Task<RequestBodyPostJsonDataTypesArrayDecimalStrResponse> RequestBodyPostJsonDataTypesArrayDecimalStrAsync(List<decimal> request);
        Task<RequestBodyPostJsonDataTypesBigIntResponse> RequestBodyPostJsonDataTypesBigIntAsync(BigInteger request);
        Task<RequestBodyPostJsonDataTypesBigIntStrResponse> RequestBodyPostJsonDataTypesBigIntStrAsync(BigInteger request);
        Task<RequestBodyPostJsonDataTypesBooleanResponse> RequestBodyPostJsonDataTypesBooleanAsync(bool request);
        Task<RequestBodyPostJsonDataTypesDateResponse> RequestBodyPostJsonDataTypesDateAsync(LocalDate request);
        Task<RequestBodyPostJsonDataTypesDateTimeResponse> RequestBodyPostJsonDataTypesDateTimeAsync(DateTime request);
        Task<RequestBodyPostJsonDataTypesDecimalResponse> RequestBodyPostJsonDataTypesDecimalAsync(decimal request);
        Task<RequestBodyPostJsonDataTypesDecimalStrResponse> RequestBodyPostJsonDataTypesDecimalStrAsync(decimal request);
        Task<RequestBodyPostJsonDataTypesFloat32Response> RequestBodyPostJsonDataTypesFloat32Async(double request);
        Task<RequestBodyPostJsonDataTypesInt32Response> RequestBodyPostJsonDataTypesInt32Async(int request);
        Task<RequestBodyPostJsonDataTypesIntegerResponse> RequestBodyPostJsonDataTypesIntegerAsync(long request);
        Task<RequestBodyPostJsonDataTypesMapBigIntStrResponse> RequestBodyPostJsonDataTypesMapBigIntStrAsync(Dictionary<string, BigInteger> request);
        Task<RequestBodyPostJsonDataTypesMapDateTimeResponse> RequestBodyPostJsonDataTypesMapDateTimeAsync(Dictionary<string, DateTime> request);
        Task<RequestBodyPostJsonDataTypesMapDecimalResponse> RequestBodyPostJsonDataTypesMapDecimalAsync(Dictionary<string, decimal> request);
        Task<RequestBodyPostJsonDataTypesNumberResponse> RequestBodyPostJsonDataTypesNumberAsync(double request);
        Task<RequestBodyPostJsonDataTypesStringResponse> RequestBodyPostJsonDataTypesStringAsync(string request);
        Task<RequestBodyPostMultipleContentTypesComponentFilteredResponse> RequestBodyPostMultipleContentTypesComponentFilteredAsync(SimpleObject request);
        Task<RequestBodyPostMultipleContentTypesInlineFilteredResponse> RequestBodyPostMultipleContentTypesInlineFilteredAsync(RequestBodyPostMultipleContentTypesInlineFilteredApplicationJSON request);
        Task<RequestBodyPostMultipleContentTypesSplitParamFormResponse> RequestBodyPostMultipleContentTypesSplitParamFormAsync(RequestBodyPostMultipleContentTypesSplitParamApplicationXWwwFormUrlencoded requestBody, string paramStr);
        Task<RequestBodyPostMultipleContentTypesSplitParamJsonResponse> RequestBodyPostMultipleContentTypesSplitParamJsonAsync(RequestBodyPostMultipleContentTypesSplitParamApplicationJSON requestBody, string paramStr);
        Task<RequestBodyPostMultipleContentTypesSplitParamMultipartResponse> RequestBodyPostMultipleContentTypesSplitParamMultipartAsync(RequestBodyPostMultipleContentTypesSplitParamMultipartFormData requestBody, string paramStr);
        Task<RequestBodyPostMultipleContentTypesSplitFormResponse> RequestBodyPostMultipleContentTypesSplitFormAsync(RequestBodyPostMultipleContentTypesSplitApplicationXWwwFormUrlencoded request);
        Task<RequestBodyPostMultipleContentTypesSplitJsonResponse> RequestBodyPostMultipleContentTypesSplitJsonAsync(RequestBodyPostMultipleContentTypesSplitApplicationJSON request);
        Task<RequestBodyPostMultipleContentTypesSplitMultipartResponse> RequestBodyPostMultipleContentTypesSplitMultipartAsync(RequestBodyPostMultipleContentTypesSplitMultipartFormData request);
        Task<RequestBodyPostNotNullableNotRequiredStringBodyResponse> RequestBodyPostNotNullableNotRequiredStringBodyAsync(string? request = null);
        Task<RequestBodyPostNullArrayResponse> RequestBodyPostNullArrayAsync(List<string> request);
        Task<RequestBodyPostNullDictionaryResponse> RequestBodyPostNullDictionaryAsync(Dictionary<string, string> request);
        Task<RequestBodyPostNullableNotRequiredStringBodyResponse> RequestBodyPostNullableNotRequiredStringBodyAsync(string? request = null);
        Task<RequestBodyPostNullableRequiredStringBodyResponse> RequestBodyPostNullableRequiredStringBodyAsync(string request);
        Task<RequestBodyPutBytesResponse> RequestBodyPutBytesAsync(byte[] request);
        Task<RequestBodyPutBytesWithParamsResponse> RequestBodyPutBytesWithParamsAsync(byte[] requestBody, string queryStringParam);
        Task<RequestBodyPutMultipartDeepResponse> RequestBodyPutMultipartDeepAsync(DeepObject request);
        Task<RequestBodyPutMultipartDifferentFileNameResponse> RequestBodyPutMultipartDifferentFileNameAsync(RequestBodyPutMultipartDifferentFileNameRequestBody request);
        Task<RequestBodyPutMultipartFileResponse> RequestBodyPutMultipartFileAsync(RequestBodyPutMultipartFileRequestBody request);
        Task<RequestBodyPutMultipartSimpleResponse> RequestBodyPutMultipartSimpleAsync(SimpleObject request);
        Task<RequestBodyPutStringResponse> RequestBodyPutStringAsync(string request);
        Task<RequestBodyPutStringWithParamsResponse> RequestBodyPutStringWithParamsAsync(string requestBody, string queryStringParam);
        Task<RequestBodyReadAndWriteResponse> RequestBodyReadAndWriteAsync(ReadWriteObjectInput request, string? serverUrl = null);
        Task<RequestBodyReadOnlyInputResponse> RequestBodyReadOnlyInputAsync(ReadOnlyObjectInput request, string? serverUrl = null);
        Task<RequestBodyReadOnlyUnionResponse> RequestBodyReadOnlyUnionAsync(object request, string? serverUrl = null);
        Task<RequestBodyReadWriteOnlyUnionResponse> RequestBodyReadWriteOnlyUnionAsync(object request, string? serverUrl = null);
        Task<RequestBodyWriteOnlyResponse> RequestBodyWriteOnlyAsync(WriteOnlyObject request, string? serverUrl = null);
        Task<RequestBodyWriteOnlyOutputResponse> RequestBodyWriteOnlyOutputAsync(WriteOnlyObject request, string? serverUrl = null);
        Task<RequestBodyWriteOnlyUnionResponse> RequestBodyWriteOnlyUnionAsync(object request, string? serverUrl = null);
    }

    /// <summary>
    /// Endpoints for testing request bodies.
    /// </summary>
    public class RequestBodiesSDK: IRequestBodiesSDK
    {
        /**
        * RequestBodyPostApplicationJsonArraySERVERS contains the list of server urls available to the SDK.
        */
        public static readonly string[] RequestBodyPostApplicationJsonArraySERVERS = {
            "http://localhost:35456",
        };

        /**
        * RequestBodyPostApplicationJsonArrayCamelCaseSERVERS contains the list of server urls available to the SDK.
        */
        public static readonly string[] RequestBodyPostApplicationJsonArrayCamelCaseSERVERS = {
            "http://localhost:35456",
        };

        /**
        * RequestBodyPostApplicationJsonArrayOfArraySERVERS contains the list of server urls available to the SDK.
        */
        public static readonly string[] RequestBodyPostApplicationJsonArrayOfArraySERVERS = {
            "http://localhost:35456",
        };

        /**
        * RequestBodyPostApplicationJsonArrayOfArrayCamelCaseSERVERS contains the list of server urls available to the SDK.
        */
        public static readonly string[] RequestBodyPostApplicationJsonArrayOfArrayCamelCaseSERVERS = {
            "http://localhost:35456",
        };

        /**
        * RequestBodyPostApplicationJsonArrayOfArrayOfPrimitiveSERVERS contains the list of server urls available to the SDK.
        */
        public static readonly string[] RequestBodyPostApplicationJsonArrayOfArrayOfPrimitiveSERVERS = {
            "http://localhost:35456",
        };

        /**
        * RequestBodyPostApplicationJsonArrayOfMapSERVERS contains the list of server urls available to the SDK.
        */
        public static readonly string[] RequestBodyPostApplicationJsonArrayOfMapSERVERS = {
            "http://localhost:35456",
        };

        /**
        * RequestBodyPostApplicationJsonArrayOfMapCamelCaseSERVERS contains the list of server urls available to the SDK.
        */
        public static readonly string[] RequestBodyPostApplicationJsonArrayOfMapCamelCaseSERVERS = {
            "http://localhost:35456",
        };

        /**
        * RequestBodyPostApplicationJsonArrayOfPrimitiveSERVERS contains the list of server urls available to the SDK.
        */
        public static readonly string[] RequestBodyPostApplicationJsonArrayOfPrimitiveSERVERS = {
            "http://localhost:35456",
        };

        /**
        * RequestBodyPostApplicationJsonMapSERVERS contains the list of server urls available to the SDK.
        */
        public static readonly string[] RequestBodyPostApplicationJsonMapSERVERS = {
            "http://localhost:35456",
        };

        /**
        * RequestBodyPostApplicationJsonMapCamelCaseSERVERS contains the list of server urls available to the SDK.
        */
        public static readonly string[] RequestBodyPostApplicationJsonMapCamelCaseSERVERS = {
            "http://localhost:35456",
        };

        /**
        * RequestBodyPostApplicationJsonMapOfArraySERVERS contains the list of server urls available to the SDK.
        */
        public static readonly string[] RequestBodyPostApplicationJsonMapOfArraySERVERS = {
            "http://localhost:35456",
        };

        /**
        * RequestBodyPostApplicationJsonMapOfArrayCamelCaseSERVERS contains the list of server urls available to the SDK.
        */
        public static readonly string[] RequestBodyPostApplicationJsonMapOfArrayCamelCaseSERVERS = {
            "http://localhost:35456",
        };

        /**
        * RequestBodyPostApplicationJsonMapOfMapSERVERS contains the list of server urls available to the SDK.
        */
        public static readonly string[] RequestBodyPostApplicationJsonMapOfMapSERVERS = {
            "http://localhost:35456",
        };

        /**
        * RequestBodyPostApplicationJsonMapOfMapCamelCaseSERVERS contains the list of server urls available to the SDK.
        */
        public static readonly string[] RequestBodyPostApplicationJsonMapOfMapCamelCaseSERVERS = {
            "http://localhost:35456",
        };

        /**
        * RequestBodyPostApplicationJsonMapOfMapOfPrimitiveSERVERS contains the list of server urls available to the SDK.
        */
        public static readonly string[] RequestBodyPostApplicationJsonMapOfMapOfPrimitiveSERVERS = {
            "http://localhost:35456",
        };

        /**
        * RequestBodyPostApplicationJsonMapOfPrimitiveSERVERS contains the list of server urls available to the SDK.
        */
        public static readonly string[] RequestBodyPostApplicationJsonMapOfPrimitiveSERVERS = {
            "http://localhost:35456",
        };

        /**
        * RequestBodyReadAndWriteSERVERS contains the list of server urls available to the SDK.
        */
        public static readonly string[] RequestBodyReadAndWriteSERVERS = {
            "http://localhost:35456",
        };

        /**
        * RequestBodyReadOnlyInputSERVERS contains the list of server urls available to the SDK.
        */
        public static readonly string[] RequestBodyReadOnlyInputSERVERS = {
            "http://localhost:35456",
        };

        /**
        * RequestBodyReadOnlyUnionSERVERS contains the list of server urls available to the SDK.
        */
        public static readonly string[] RequestBodyReadOnlyUnionSERVERS = {
            "http://localhost:35456",
        };

        /**
        * RequestBodyReadWriteOnlyUnionSERVERS contains the list of server urls available to the SDK.
        */
        public static readonly string[] RequestBodyReadWriteOnlyUnionSERVERS = {
            "http://localhost:35456",
        };

        /**
        * RequestBodyWriteOnlySERVERS contains the list of server urls available to the SDK.
        */
        public static readonly string[] RequestBodyWriteOnlySERVERS = {
            "http://localhost:35456",
        };

        /**
        * RequestBodyWriteOnlyOutputSERVERS contains the list of server urls available to the SDK.
        */
        public static readonly string[] RequestBodyWriteOnlyOutputSERVERS = {
            "http://localhost:35456",
        };

        /**
        * RequestBodyWriteOnlyUnionSERVERS contains the list of server urls available to the SDK.
        */
        public static readonly string[] RequestBodyWriteOnlyUnionSERVERS = {
            "http://localhost:35456",
        };

        public SDKConfig Config { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.1.0";
        private const string _sdkGenVersion = "2.169.0";
        private const string _openapiDocVersion = "0.1.0";
        private const string _userAgent = "speakeasy-sdk/csharp 0.1.0 2.169.0 0.1.0 openapi";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _defaultClient;
        private ISpeakeasyHttpClient _securityClient;

        public RequestBodiesSDK(ISpeakeasyHttpClient defaultClient, ISpeakeasyHttpClient securityClient, string serverUrl, SDKConfig config)
        {
            _defaultClient = defaultClient;
            _securityClient = securityClient;
            _serverUrl = serverUrl;
            Config = config;
        }
        

        public async Task<NullableObjectPostResponse> NullableObjectPostAsync(NullableObject request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/nullableRequiredObject";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new NullableObjectPostResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<NullableObjectPostRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<NullableRequiredEmptyObjectPostResponse> NullableRequiredEmptyObjectPostAsync(NullableRequiredEmptyObjectPostRequestBody request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/nullableRequiredEmptyObject";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new NullableRequiredEmptyObjectPostResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.NullableRequiredEmptyObjectPost200ApplicationJSONString = await httpResponse.Content.ReadAsStringAsync();
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<NullableRequiredPropertyPostResponse> NullableRequiredPropertyPostAsync(NullableRequiredPropertyPostRequestBody request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/nullableRequiredProperty";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new NullableRequiredPropertyPostResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.NullableRequiredPropertyPost200ApplicationJSONString = await httpResponse.Content.ReadAsStringAsync();
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<NullableRequiredSharedObjectPostResponse> NullableRequiredSharedObjectPostAsync(NullableRequiredSharedObjectPostRequestBody request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/nullableRequiredSharedObject";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new NullableRequiredSharedObjectPostResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.NullableRequiredSharedObjectPost200ApplicationJSONString = await httpResponse.Content.ReadAsStringAsync();
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostApplicationJsonArrayResponse> RequestBodyPostApplicationJsonArrayAsync(List<SimpleObject> request, string? serverUrl = null)
        {
            string baseUrl = RequestBodyPostApplicationJsonArraySERVERS[0];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/requestbody#array";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostApplicationJsonArrayResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.SimpleObjects = JsonConvert.DeserializeObject<List<SimpleObject>>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostApplicationJsonArrayCamelCaseResponse> RequestBodyPostApplicationJsonArrayCamelCaseAsync(List<SimpleObjectCamelCase> request, string? serverUrl = null)
        {
            string baseUrl = RequestBodyPostApplicationJsonArrayCamelCaseSERVERS[0];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/requestbody#arrayCamelCase";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostApplicationJsonArrayCamelCaseResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.SimpleObjectCamelCases = JsonConvert.DeserializeObject<List<SimpleObjectCamelCase>>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostApplicationJsonArrayObjResponse> RequestBodyPostApplicationJsonArrayObjAsync(List<SimpleObject> request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/application/json/array/objResponse";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostApplicationJsonArrayObjResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.ArrObjValue = JsonConvert.DeserializeObject<ArrObjValue>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostApplicationJsonArrayObjCamelCaseResponse> RequestBodyPostApplicationJsonArrayObjCamelCaseAsync(List<SimpleObjectCamelCase> request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/application/json/array/objResponseCamelCase";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostApplicationJsonArrayObjCamelCaseResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.ArrObjValueCamelCase = JsonConvert.DeserializeObject<ArrObjValueCamelCase>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostApplicationJsonArrayOfArrayResponse> RequestBodyPostApplicationJsonArrayOfArrayAsync(List<List<SimpleObject>> request, string? serverUrl = null)
        {
            string baseUrl = RequestBodyPostApplicationJsonArrayOfArraySERVERS[0];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/requestbody#arrayOfArrays";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostApplicationJsonArrayOfArrayResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Arrs = JsonConvert.DeserializeObject<List<List<SimpleObject>>>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostApplicationJsonArrayOfArrayCamelCaseResponse> RequestBodyPostApplicationJsonArrayOfArrayCamelCaseAsync(List<List<SimpleObjectCamelCase>> request, string? serverUrl = null)
        {
            string baseUrl = RequestBodyPostApplicationJsonArrayOfArrayCamelCaseSERVERS[0];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/requestbody#arrayOfArraysCamelCase";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostApplicationJsonArrayOfArrayCamelCaseResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Arrs = JsonConvert.DeserializeObject<List<List<SimpleObjectCamelCase>>>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostApplicationJsonArrayOfArrayOfPrimitiveResponse> RequestBodyPostApplicationJsonArrayOfArrayOfPrimitiveAsync(List<List<string>> request, string? serverUrl = null)
        {
            string baseUrl = RequestBodyPostApplicationJsonArrayOfArrayOfPrimitiveSERVERS[0];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/requestbody#arrayOfArraysOfPrimitives";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostApplicationJsonArrayOfArrayOfPrimitiveResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Arrs = JsonConvert.DeserializeObject<List<List<string>>>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostApplicationJsonArrayOfMapResponse> RequestBodyPostApplicationJsonArrayOfMapAsync(List<Dictionary<string, SimpleObject>> request, string? serverUrl = null)
        {
            string baseUrl = RequestBodyPostApplicationJsonArrayOfMapSERVERS[0];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/requestbody#arrayOfMaps";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostApplicationJsonArrayOfMapResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Maps = JsonConvert.DeserializeObject<List<Dictionary<string, SimpleObject>>>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostApplicationJsonArrayOfMapCamelCaseResponse> RequestBodyPostApplicationJsonArrayOfMapCamelCaseAsync(List<Dictionary<string, SimpleObjectCamelCase>> request, string? serverUrl = null)
        {
            string baseUrl = RequestBodyPostApplicationJsonArrayOfMapCamelCaseSERVERS[0];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/requestbody#arrayOfMapsCamelCase";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostApplicationJsonArrayOfMapCamelCaseResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Maps = JsonConvert.DeserializeObject<List<Dictionary<string, SimpleObjectCamelCase>>>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostApplicationJsonArrayOfPrimitiveResponse> RequestBodyPostApplicationJsonArrayOfPrimitiveAsync(List<string> request, string? serverUrl = null)
        {
            string baseUrl = RequestBodyPostApplicationJsonArrayOfPrimitiveSERVERS[0];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/requestbody#arrayOfPrimitives";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostApplicationJsonArrayOfPrimitiveResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Strings = JsonConvert.DeserializeObject<List<string>>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostApplicationJsonDeepResponse> RequestBodyPostApplicationJsonDeepAsync(DeepObject request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/application/json/deep";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostApplicationJsonDeepResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<RequestBodyPostApplicationJsonDeepRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostApplicationJsonDeepCamelCaseResponse> RequestBodyPostApplicationJsonDeepCamelCaseAsync(DeepObjectCamelCase request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/application/json/deep/camelcase";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostApplicationJsonDeepCamelCaseResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<RequestBodyPostApplicationJsonDeepCamelCaseRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostApplicationJsonMapResponse> RequestBodyPostApplicationJsonMapAsync(Dictionary<string, SimpleObject> request, string? serverUrl = null)
        {
            string baseUrl = RequestBodyPostApplicationJsonMapSERVERS[0];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/requestbody#map";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostApplicationJsonMapResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<Dictionary<string, SimpleObject>>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostApplicationJsonMapCamelCaseResponse> RequestBodyPostApplicationJsonMapCamelCaseAsync(Dictionary<string, SimpleObjectCamelCase> request, string? serverUrl = null)
        {
            string baseUrl = RequestBodyPostApplicationJsonMapCamelCaseSERVERS[0];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/requestbody#mapCamelCase";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostApplicationJsonMapCamelCaseResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<Dictionary<string, SimpleObjectCamelCase>>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostApplicationJsonMapObjResponse> RequestBodyPostApplicationJsonMapObjAsync(Dictionary<string, SimpleObject> request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/application/json/map/objResponse";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostApplicationJsonMapObjResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.MapObjValue = JsonConvert.DeserializeObject<MapObjValue>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostApplicationJsonMapObjCamelCaseResponse> RequestBodyPostApplicationJsonMapObjCamelCaseAsync(Dictionary<string, SimpleObjectCamelCase> request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/application/json/map/objResponseCamelCase";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostApplicationJsonMapObjCamelCaseResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.MapObjValueCamelCase = JsonConvert.DeserializeObject<MapObjValueCamelCase>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostApplicationJsonMapOfArrayResponse> RequestBodyPostApplicationJsonMapOfArrayAsync(Dictionary<string, List<SimpleObject>> request, string? serverUrl = null)
        {
            string baseUrl = RequestBodyPostApplicationJsonMapOfArraySERVERS[0];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/requestbody#mapOfArrays";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostApplicationJsonMapOfArrayResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<Dictionary<string, List<SimpleObject>>>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostApplicationJsonMapOfArrayCamelCaseResponse> RequestBodyPostApplicationJsonMapOfArrayCamelCaseAsync(Dictionary<string, List<SimpleObjectCamelCase>> request, string? serverUrl = null)
        {
            string baseUrl = RequestBodyPostApplicationJsonMapOfArrayCamelCaseSERVERS[0];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/requestbody#mapOfArraysCamelCase";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostApplicationJsonMapOfArrayCamelCaseResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<Dictionary<string, List<SimpleObjectCamelCase>>>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostApplicationJsonMapOfMapResponse> RequestBodyPostApplicationJsonMapOfMapAsync(Dictionary<string, Dictionary<string, SimpleObject>> request, string? serverUrl = null)
        {
            string baseUrl = RequestBodyPostApplicationJsonMapOfMapSERVERS[0];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/requestbody#mapOfMaps";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostApplicationJsonMapOfMapResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<Dictionary<string, Dictionary<string, SimpleObject>>>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostApplicationJsonMapOfMapCamelCaseResponse> RequestBodyPostApplicationJsonMapOfMapCamelCaseAsync(Dictionary<string, Dictionary<string, SimpleObjectCamelCase>> request, string? serverUrl = null)
        {
            string baseUrl = RequestBodyPostApplicationJsonMapOfMapCamelCaseSERVERS[0];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/requestbody#mapOfMapsCamelCase";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostApplicationJsonMapOfMapCamelCaseResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<Dictionary<string, Dictionary<string, SimpleObjectCamelCase>>>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostApplicationJsonMapOfMapOfPrimitiveResponse> RequestBodyPostApplicationJsonMapOfMapOfPrimitiveAsync(Dictionary<string, Dictionary<string, string>> request, string? serverUrl = null)
        {
            string baseUrl = RequestBodyPostApplicationJsonMapOfMapOfPrimitiveSERVERS[0];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/requestbody#mapOfMapsOfPrimitives";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostApplicationJsonMapOfMapOfPrimitiveResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<Dictionary<string, Dictionary<string, string>>>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostApplicationJsonMapOfPrimitiveResponse> RequestBodyPostApplicationJsonMapOfPrimitiveAsync(Dictionary<string, string> request, string? serverUrl = null)
        {
            string baseUrl = RequestBodyPostApplicationJsonMapOfPrimitiveSERVERS[0];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/requestbody#mapOfPrimitives";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostApplicationJsonMapOfPrimitiveResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<Dictionary<string, string>>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostApplicationJsonMultipleJsonFilteredResponse> RequestBodyPostApplicationJsonMultipleJsonFilteredAsync(SimpleObject request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/application/json/multiple/json/filtered";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostApplicationJsonMultipleJsonFilteredResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<RequestBodyPostApplicationJsonMultipleJsonFilteredRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostApplicationJsonSimpleResponse> RequestBodyPostApplicationJsonSimpleAsync(SimpleObject request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/application/json/simple";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostApplicationJsonSimpleResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<RequestBodyPostApplicationJsonSimpleRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostApplicationJsonSimpleCamelCaseResponse> RequestBodyPostApplicationJsonSimpleCamelCaseAsync(SimpleObjectCamelCase request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/application/json/camelcase";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostApplicationJsonSimpleCamelCaseResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<RequestBodyPostApplicationJsonSimpleCamelCaseRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostComplexNumberTypesResponse> RequestBodyPostComplexNumberTypesAsync(RequestBodyPostComplexNumberTypesRequest request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = URLBuilder.Build(baseUrl, "/anything/requestBodies/post/{pathBigInt}/{pathBigIntStr}/{pathDecimal}/{pathDecimalStr}/complex-number-types", request);
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "ComplexNumberTypes", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostComplexNumberTypesResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.RequestBodyPostComplexNumberTypes200ApplicationJSONObject = JsonConvert.DeserializeObject<RequestBodyPostComplexNumberTypes200ApplicationJSON>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostDefaultsAndConstsResponse> RequestBodyPostDefaultsAndConstsAsync(DefaultsAndConsts request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/defaultsAndConsts";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostDefaultsAndConstsResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject = JsonConvert.DeserializeObject<RequestBodyPostDefaultsAndConsts200ApplicationJSON>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostEmptyObjectResponse> RequestBodyPostEmptyObjectAsync(RequestBodyPostEmptyObjectRequestBody request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/empty-object";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostEmptyObjectResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.RequestBodyPostEmptyObject200ApplicationJSONObject = JsonConvert.DeserializeObject<RequestBodyPostEmptyObject200ApplicationJSON>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostFormDeepResponse> RequestBodyPostFormDeepAsync(DeepObject request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/form/deep";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "form");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostFormDeepResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<RequestBodyPostFormDeepRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostFormMapPrimitiveResponse> RequestBodyPostFormMapPrimitiveAsync(Dictionary<string, string> request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/form/map/primitive";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "form");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostFormMapPrimitiveResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<RequestBodyPostFormMapPrimitiveRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostFormSimpleResponse> RequestBodyPostFormSimpleAsync(SimpleObject request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/form/simple";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "form");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostFormSimpleResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<RequestBodyPostFormSimpleRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostJsonDataTypesArrayBigIntResponse> RequestBodyPostJsonDataTypesArrayBigIntAsync(List<BigInteger> request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/jsonDataTypes/array/bigInt";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostJsonDataTypesArrayBigIntResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.RequestBodyPostJSONDataTypesArrayBigInt200ApplicationJSONObject = JsonConvert.DeserializeObject<RequestBodyPostJSONDataTypesArrayBigInt200ApplicationJSON>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostJsonDataTypesArrayDateResponse> RequestBodyPostJsonDataTypesArrayDateAsync(List<LocalDate> request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/jsonDataTypes/array/date";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostJsonDataTypesArrayDateResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.RequestBodyPostJSONDataTypesArrayDate200ApplicationJSONObject = JsonConvert.DeserializeObject<RequestBodyPostJSONDataTypesArrayDate200ApplicationJSON>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostJsonDataTypesArrayDecimalStrResponse> RequestBodyPostJsonDataTypesArrayDecimalStrAsync(List<decimal> request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/jsonDataTypes/array/decimalStr";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostJsonDataTypesArrayDecimalStrResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.RequestBodyPostJSONDataTypesArrayDecimalStr200ApplicationJSONObject = JsonConvert.DeserializeObject<RequestBodyPostJSONDataTypesArrayDecimalStr200ApplicationJSON>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostJsonDataTypesBigIntResponse> RequestBodyPostJsonDataTypesBigIntAsync(BigInteger request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/jsonDataTypes/bigint";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostJsonDataTypesBigIntResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.RequestBodyPostJSONDataTypesBigInt200ApplicationJSONObject = JsonConvert.DeserializeObject<RequestBodyPostJSONDataTypesBigInt200ApplicationJSON>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostJsonDataTypesBigIntStrResponse> RequestBodyPostJsonDataTypesBigIntStrAsync(BigInteger request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/jsonDataTypes/bigintStr";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostJsonDataTypesBigIntStrResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.RequestBodyPostJSONDataTypesBigIntStr200ApplicationJSONObject = JsonConvert.DeserializeObject<RequestBodyPostJSONDataTypesBigIntStr200ApplicationJSON>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostJsonDataTypesBooleanResponse> RequestBodyPostJsonDataTypesBooleanAsync(bool request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/jsonDataTypes/boolean";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostJsonDataTypesBooleanResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.RequestBodyPostJSONDataTypesBoolean200ApplicationJSONObject = JsonConvert.DeserializeObject<RequestBodyPostJSONDataTypesBoolean200ApplicationJSON>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostJsonDataTypesDateResponse> RequestBodyPostJsonDataTypesDateAsync(LocalDate request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/jsonDataTypes/date";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostJsonDataTypesDateResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.RequestBodyPostJSONDataTypesDate200ApplicationJSONObject = JsonConvert.DeserializeObject<RequestBodyPostJSONDataTypesDate200ApplicationJSON>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostJsonDataTypesDateTimeResponse> RequestBodyPostJsonDataTypesDateTimeAsync(DateTime request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/jsonDataTypes/dateTime";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostJsonDataTypesDateTimeResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.RequestBodyPostJSONDataTypesDateTime200ApplicationJSONObject = JsonConvert.DeserializeObject<RequestBodyPostJSONDataTypesDateTime200ApplicationJSON>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostJsonDataTypesDecimalResponse> RequestBodyPostJsonDataTypesDecimalAsync(decimal request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/jsonDataTypes/decimal";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostJsonDataTypesDecimalResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.RequestBodyPostJSONDataTypesDecimal200ApplicationJSONObject = JsonConvert.DeserializeObject<RequestBodyPostJSONDataTypesDecimal200ApplicationJSON>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostJsonDataTypesDecimalStrResponse> RequestBodyPostJsonDataTypesDecimalStrAsync(decimal request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/jsonDataTypes/decimalStr";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostJsonDataTypesDecimalStrResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.RequestBodyPostJSONDataTypesDecimalStr200ApplicationJSONObject = JsonConvert.DeserializeObject<RequestBodyPostJSONDataTypesDecimalStr200ApplicationJSON>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostJsonDataTypesFloat32Response> RequestBodyPostJsonDataTypesFloat32Async(double request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/jsonDataTypes/float32";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostJsonDataTypesFloat32Response
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.RequestBodyPostJSONDataTypesFloat32200ApplicationJSONObject = JsonConvert.DeserializeObject<RequestBodyPostJSONDataTypesFloat32200ApplicationJSON>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostJsonDataTypesInt32Response> RequestBodyPostJsonDataTypesInt32Async(int request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/jsonDataTypes/int32";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostJsonDataTypesInt32Response
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.RequestBodyPostJSONDataTypesInt32200ApplicationJSONObject = JsonConvert.DeserializeObject<RequestBodyPostJSONDataTypesInt32200ApplicationJSON>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostJsonDataTypesIntegerResponse> RequestBodyPostJsonDataTypesIntegerAsync(long request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/jsonDataTypes/integer";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostJsonDataTypesIntegerResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.RequestBodyPostJSONDataTypesInteger200ApplicationJSONObject = JsonConvert.DeserializeObject<RequestBodyPostJSONDataTypesInteger200ApplicationJSON>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostJsonDataTypesMapBigIntStrResponse> RequestBodyPostJsonDataTypesMapBigIntStrAsync(Dictionary<string, BigInteger> request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/jsonDataTypes/map/bigIntStr";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostJsonDataTypesMapBigIntStrResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.RequestBodyPostJSONDataTypesMapBigIntStr200ApplicationJSONObject = JsonConvert.DeserializeObject<RequestBodyPostJSONDataTypesMapBigIntStr200ApplicationJSON>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostJsonDataTypesMapDateTimeResponse> RequestBodyPostJsonDataTypesMapDateTimeAsync(Dictionary<string, DateTime> request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/jsonDataTypes/map/dateTime";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostJsonDataTypesMapDateTimeResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.RequestBodyPostJSONDataTypesMapDateTime200ApplicationJSONObject = JsonConvert.DeserializeObject<RequestBodyPostJSONDataTypesMapDateTime200ApplicationJSON>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostJsonDataTypesMapDecimalResponse> RequestBodyPostJsonDataTypesMapDecimalAsync(Dictionary<string, decimal> request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/jsonDataTypes/map/decimal";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostJsonDataTypesMapDecimalResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.RequestBodyPostJSONDataTypesMapDecimal200ApplicationJSONObject = JsonConvert.DeserializeObject<RequestBodyPostJSONDataTypesMapDecimal200ApplicationJSON>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostJsonDataTypesNumberResponse> RequestBodyPostJsonDataTypesNumberAsync(double request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/jsonDataTypes/number";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostJsonDataTypesNumberResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.RequestBodyPostJSONDataTypesNumber200ApplicationJSONObject = JsonConvert.DeserializeObject<RequestBodyPostJSONDataTypesNumber200ApplicationJSON>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostJsonDataTypesStringResponse> RequestBodyPostJsonDataTypesStringAsync(string request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/jsonDataTypes/string";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostJsonDataTypesStringResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.RequestBodyPostJSONDataTypesString200ApplicationJSONObject = JsonConvert.DeserializeObject<RequestBodyPostJSONDataTypesString200ApplicationJSON>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostMultipleContentTypesComponentFilteredResponse> RequestBodyPostMultipleContentTypesComponentFilteredAsync(SimpleObject request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/multiple/contentTypes/component/filtered";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostMultipleContentTypesComponentFilteredResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<RequestBodyPostMultipleContentTypesComponentFilteredRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostMultipleContentTypesInlineFilteredResponse> RequestBodyPostMultipleContentTypesInlineFilteredAsync(RequestBodyPostMultipleContentTypesInlineFilteredApplicationJSON request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/multiple/contentTypes/inline/filtered";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostMultipleContentTypesInlineFilteredResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<RequestBodyPostMultipleContentTypesInlineFilteredRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostMultipleContentTypesSplitParamFormResponse> RequestBodyPostMultipleContentTypesSplitParamFormAsync(RequestBodyPostMultipleContentTypesSplitParamApplicationXWwwFormUrlencoded requestBody, string paramStr)
        {
            var request = new RequestBodyPostMultipleContentTypesSplitParamFormRequest()
            {
                RequestBody = requestBody,
                ParamStr = paramStr,
            };
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = URLBuilder.Build(baseUrl, "/anything/requestBodies/post/multiple/contentTypes/split/param", request);
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "form");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostMultipleContentTypesSplitParamFormResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<RequestBodyPostMultipleContentTypesSplitParamFormRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostMultipleContentTypesSplitParamJsonResponse> RequestBodyPostMultipleContentTypesSplitParamJsonAsync(RequestBodyPostMultipleContentTypesSplitParamApplicationJSON requestBody, string paramStr)
        {
            var request = new RequestBodyPostMultipleContentTypesSplitParamJsonRequest()
            {
                RequestBody = requestBody,
                ParamStr = paramStr,
            };
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = URLBuilder.Build(baseUrl, "/anything/requestBodies/post/multiple/contentTypes/split/param", request);
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostMultipleContentTypesSplitParamJsonResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<RequestBodyPostMultipleContentTypesSplitParamJsonRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostMultipleContentTypesSplitParamMultipartResponse> RequestBodyPostMultipleContentTypesSplitParamMultipartAsync(RequestBodyPostMultipleContentTypesSplitParamMultipartFormData requestBody, string paramStr)
        {
            var request = new RequestBodyPostMultipleContentTypesSplitParamMultipartRequest()
            {
                RequestBody = requestBody,
                ParamStr = paramStr,
            };
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = URLBuilder.Build(baseUrl, "/anything/requestBodies/post/multiple/contentTypes/split/param", request);
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "multipart");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostMultipleContentTypesSplitParamMultipartResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<RequestBodyPostMultipleContentTypesSplitParamMultipartRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostMultipleContentTypesSplitFormResponse> RequestBodyPostMultipleContentTypesSplitFormAsync(RequestBodyPostMultipleContentTypesSplitApplicationXWwwFormUrlencoded request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/multiple/contentTypes/split";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "form");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostMultipleContentTypesSplitFormResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<RequestBodyPostMultipleContentTypesSplitFormRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostMultipleContentTypesSplitJsonResponse> RequestBodyPostMultipleContentTypesSplitJsonAsync(RequestBodyPostMultipleContentTypesSplitApplicationJSON request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/multiple/contentTypes/split";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostMultipleContentTypesSplitJsonResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<RequestBodyPostMultipleContentTypesSplitJsonRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostMultipleContentTypesSplitMultipartResponse> RequestBodyPostMultipleContentTypesSplitMultipartAsync(RequestBodyPostMultipleContentTypesSplitMultipartFormData request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/multiple/contentTypes/split";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "multipart");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostMultipleContentTypesSplitMultipartResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<RequestBodyPostMultipleContentTypesSplitMultipartRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostNotNullableNotRequiredStringBodyResponse> RequestBodyPostNotNullableNotRequiredStringBodyAsync(string? request = null)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/notnullable/notrequired/string";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostNotNullableNotRequiredStringBodyResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.RequestBodyPostNotNullableNotRequiredStringBody200ApplicationJSONObject = JsonConvert.DeserializeObject<RequestBodyPostNotNullableNotRequiredStringBody200ApplicationJSON>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostNullArrayResponse> RequestBodyPostNullArrayAsync(List<string> request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/null-array";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostNullArrayResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.RequestBodyPostNullArray200ApplicationJSONObject = JsonConvert.DeserializeObject<RequestBodyPostNullArray200ApplicationJSON>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostNullDictionaryResponse> RequestBodyPostNullDictionaryAsync(Dictionary<string, string> request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/null-dictionary";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostNullDictionaryResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.RequestBodyPostNullDictionary200ApplicationJSONObject = JsonConvert.DeserializeObject<RequestBodyPostNullDictionary200ApplicationJSON>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostNullableNotRequiredStringBodyResponse> RequestBodyPostNullableNotRequiredStringBodyAsync(string? request = null)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/nullable/notrequired/string";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody != null)
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostNullableNotRequiredStringBodyResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.RequestBodyPostNullableNotRequiredStringBody200ApplicationJSONObject = JsonConvert.DeserializeObject<RequestBodyPostNullableNotRequiredStringBody200ApplicationJSON>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPostNullableRequiredStringBodyResponse> RequestBodyPostNullableRequiredStringBodyAsync(string request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/post/nullable/required/string";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPostNullableRequiredStringBodyResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.RequestBodyPostNullableRequiredStringBody200ApplicationJSONObject = JsonConvert.DeserializeObject<RequestBodyPostNullableRequiredStringBody200ApplicationJSON>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPutBytesResponse> RequestBodyPutBytesAsync(byte[] request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/put/bytes";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Put, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "raw");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPutBytesResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<RequestBodyPutBytesRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPutBytesWithParamsResponse> RequestBodyPutBytesWithParamsAsync(byte[] requestBody, string queryStringParam)
        {
            var request = new RequestBodyPutBytesWithParamsRequest()
            {
                RequestBody = requestBody,
                QueryStringParam = queryStringParam,
            };
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = URLBuilder.Build(baseUrl, "/anything/requestBodies/put/bytesWithParams", request);
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Put, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "raw");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPutBytesWithParamsResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<RequestBodyPutBytesWithParamsRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPutMultipartDeepResponse> RequestBodyPutMultipartDeepAsync(DeepObject request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/put/multipart/deep";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Put, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "multipart");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPutMultipartDeepResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<RequestBodyPutMultipartDeepRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPutMultipartDifferentFileNameResponse> RequestBodyPutMultipartDifferentFileNameAsync(RequestBodyPutMultipartDifferentFileNameRequestBody request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/put/multipart/differentFileName";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Put, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "multipart");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPutMultipartDifferentFileNameResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<RequestBodyPutMultipartDifferentFileNameRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPutMultipartFileResponse> RequestBodyPutMultipartFileAsync(RequestBodyPutMultipartFileRequestBody request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/put/multipart/file";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Put, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "multipart");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPutMultipartFileResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<RequestBodyPutMultipartFileRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPutMultipartSimpleResponse> RequestBodyPutMultipartSimpleAsync(SimpleObject request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/put/multipart/simple";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Put, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "multipart");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPutMultipartSimpleResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<RequestBodyPutMultipartSimpleRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPutStringResponse> RequestBodyPutStringAsync(string request)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/requestBodies/put/string";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Put, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "string");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPutStringResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<RequestBodyPutStringRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyPutStringWithParamsResponse> RequestBodyPutStringWithParamsAsync(string requestBody, string queryStringParam)
        {
            var request = new RequestBodyPutStringWithParamsRequest()
            {
                RequestBody = requestBody,
                QueryStringParam = queryStringParam,
            };
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = URLBuilder.Build(baseUrl, "/anything/requestBodies/put/stringWithParams", request);
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Put, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "RequestBody", "string");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyPutStringWithParamsResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.Res = JsonConvert.DeserializeObject<RequestBodyPutStringWithParamsRes>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyReadAndWriteResponse> RequestBodyReadAndWriteAsync(ReadWriteObjectInput request, string? serverUrl = null)
        {
            string baseUrl = RequestBodyReadAndWriteSERVERS[0];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/readonlyandwriteonly";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyReadAndWriteResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.ReadWriteObject = JsonConvert.DeserializeObject<ReadWriteObjectOutput>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyReadOnlyInputResponse> RequestBodyReadOnlyInputAsync(ReadOnlyObjectInput request, string? serverUrl = null)
        {
            string baseUrl = RequestBodyReadOnlyInputSERVERS[0];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/readonlyorwriteonly#readOnlyInput";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyReadOnlyInputResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.ReadOnlyObject = JsonConvert.DeserializeObject<ReadOnlyObject>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyReadOnlyUnionResponse> RequestBodyReadOnlyUnionAsync(object request, string? serverUrl = null)
        {
            string baseUrl = RequestBodyReadOnlyUnionSERVERS[0];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/readonlyorwriteonly#readOnlyUnion";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyReadOnlyUnionResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.WeaklyTypedOneOfReadOnlyObject = JsonConvert.DeserializeObject<object>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyReadWriteOnlyUnionResponse> RequestBodyReadWriteOnlyUnionAsync(object request, string? serverUrl = null)
        {
            string baseUrl = RequestBodyReadWriteOnlyUnionSERVERS[0];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/readonlyandwriteonly#readWriteOnlyUnion";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyReadWriteOnlyUnionResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.WeaklyTypedOneOfReadWriteObject = JsonConvert.DeserializeObject<object>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyWriteOnlyResponse> RequestBodyWriteOnlyAsync(WriteOnlyObject request, string? serverUrl = null)
        {
            string baseUrl = RequestBodyWriteOnlySERVERS[0];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/readonlyorwriteonly#writeOnly";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyWriteOnlyResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.ReadOnlyObject = JsonConvert.DeserializeObject<ReadOnlyObject>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyWriteOnlyOutputResponse> RequestBodyWriteOnlyOutputAsync(WriteOnlyObject request, string? serverUrl = null)
        {
            string baseUrl = RequestBodyWriteOnlyOutputSERVERS[0];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/writeonlyoutput#writeOnlyOutput";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyWriteOnlyOutputResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.WriteOnlyObject = JsonConvert.DeserializeObject<WriteOnlyObjectOutput>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<RequestBodyWriteOnlyUnionResponse> RequestBodyWriteOnlyUnionAsync(object request, string? serverUrl = null)
        {
            string baseUrl = RequestBodyWriteOnlyUnionSERVERS[0];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/writeonlyoutput#writeOnlyUnion";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json");
            if (serializedBody == null) 
            {
                throw new ArgumentNullException("request body is required");
            }
            else
            {
                httpRequest.Content = serializedBody;
            }
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new RequestBodyWriteOnlyUnionResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.WeaklyTypedOneOfWriteOnlyObject = JsonConvert.DeserializeObject<object>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        
    }
}