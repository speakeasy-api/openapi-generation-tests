
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace SDK
{
    using SDK.Models.Operations;
    using SDK.Utils;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;
    using System;

    /// <summary>
    /// Endpoints for testing servers.
    /// </summary>
    public interface IServersSDK
    {
        Task<SelectGlobalServerResponse> SelectGlobalServerAsync();

        /// <summary>
        /// Select a server by ID.
        /// </summary>
        Task<SelectServerWithIDResponse> SelectServerWithIDAsync(string? serverUrl = null);
        Task<ServerWithProtocolTemplateResponse> ServerWithProtocolTemplateAsync(string? serverUrl = null);
        Task<ServerWithTemplatesResponse> ServerWithTemplatesAsync(string? serverUrl = null);
        Task<ServerWithTemplatesGlobalResponse> ServerWithTemplatesGlobalAsync();
        Task<ServersByIDWithTemplatesResponse> ServersByIDWithTemplatesAsync(string? serverUrl = null);
    }

    /// <summary>
    /// Endpoints for testing servers.
    /// </summary>
    public class ServersSDK: IServersSDK
    {
        /**
        * SelectServerWithIDServers contains identifiers for the servers available to the SDK.
        */
        public enum SelectServerWithIDServers {
            Valid,
            Broken,
        }

        /**
        * SelectServerWithIDSERVERS contains the list of server urls available to the SDK.
        */
        public static readonly Dictionary<SelectServerWithIDServers, string> SelectServerWithIDSERVERS = new Dictionary<SelectServerWithIDServers, string>()
        {
            { SelectServerWithIDServers.Valid, "http://localhost:35123" },
            { SelectServerWithIDServers.Broken, "http://broken" },
        };
        /**
        * ServerWithProtocolTemplateServers contains identifiers for the servers available to the SDK.
        */
        public enum ServerWithProtocolTemplateServers {
            Main,
        }

        /**
        * ServerWithProtocolTemplateSERVERS contains the list of server urls available to the SDK.
        */
        public static readonly Dictionary<ServerWithProtocolTemplateServers, string> ServerWithProtocolTemplateSERVERS = new Dictionary<ServerWithProtocolTemplateServers, string>()
        {
            { ServerWithProtocolTemplateServers.Main, "{protocol}://{hostname}:{port}" },
        };
        /**
        * ServerWithTemplatesSERVERS contains the list of server urls available to the SDK.
        */
        public static readonly string[] ServerWithTemplatesSERVERS = {
            "http://{hostname}:{port}",
        };

        /**
        * ServersByIDWithTemplatesServers contains identifiers for the servers available to the SDK.
        */
        public enum ServersByIDWithTemplatesServers {
            Main,
        }

        /**
        * SERVERSByIDWithTemplatesSERVERS contains the list of server urls available to the SDK.
        */
        public static readonly Dictionary<ServersByIDWithTemplatesServers, string> SERVERSByIDWithTemplatesSERVERS = new Dictionary<ServersByIDWithTemplatesServers, string>()
        {
            { ServersByIDWithTemplatesServers.Main, "http://{hostname}:{port}" },
        };
        public SDKConfig Config { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.1.0";
        private const string _sdkGenVersion = "2.169.3";
        private const string _openapiDocVersion = "0.1.0";
        private const string _userAgent = "speakeasy-sdk/csharp 0.1.0 2.169.3 0.1.0 openapi";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _defaultClient;
        private ISpeakeasyHttpClient _securityClient;

        public ServersSDK(ISpeakeasyHttpClient defaultClient, ISpeakeasyHttpClient securityClient, string serverUrl, SDKConfig config)
        {
            _defaultClient = defaultClient;
            _securityClient = securityClient;
            _serverUrl = serverUrl;
            Config = config;
        }
        

        public async Task<SelectGlobalServerResponse> SelectGlobalServerAsync()
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/selectGlobalServer";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new SelectGlobalServerResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                
                return response;
            }
            return response;
        }
        

        public async Task<SelectServerWithIDResponse> SelectServerWithIDAsync(string? serverUrl = null)
        {
            string baseUrl = SelectServerWithIDSERVERS[SelectServerWithIDServers.Valid];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/selectServerWithID";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new SelectServerWithIDResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                
                return response;
            }
            return response;
        }
        

        public async Task<ServerWithProtocolTemplateResponse> ServerWithProtocolTemplateAsync(string? serverUrl = null)
        {
            string baseUrl = ServerWithProtocolTemplateSERVERS[ServerWithProtocolTemplateServers.Main];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/serverWithProtocolTemplate";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new ServerWithProtocolTemplateResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                
                return response;
            }
            return response;
        }
        

        public async Task<ServerWithTemplatesResponse> ServerWithTemplatesAsync(string? serverUrl = null)
        {
            string baseUrl = ServerWithTemplatesSERVERS[0];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/serverWithTemplates";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new ServerWithTemplatesResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                
                return response;
            }
            return response;
        }
        

        public async Task<ServerWithTemplatesGlobalResponse> ServerWithTemplatesGlobalAsync()
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/serverWithTemplatesGlobal";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new ServerWithTemplatesGlobalResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                
                return response;
            }
            return response;
        }
        

        public async Task<ServersByIDWithTemplatesResponse> ServersByIDWithTemplatesAsync(string? serverUrl = null)
        {
            string baseUrl = SERVERSByIDWithTemplatesSERVERS[ServersByIDWithTemplatesServers.Main];
            if (!string.IsNullOrEmpty(serverUrl)) {
                baseUrl = serverUrl;
            }
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = baseUrl + "/anything/serversByIDWithTemplates";
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("x-speakeasy-user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new ServersByIDWithTemplatesResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                
                return response;
            }
            return response;
        }
        
    }
}