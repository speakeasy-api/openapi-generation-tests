
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Xunit;
using Openapi;
using Openapi.Models.Shared;
using Openapi.Models.Operations;
using Openapi.Models.Errors;
using System.Threading.Tasks;

public class ErrorsShould
{
    [Fact]
    public async Task TestStatusGetError_DefaultErrorCodes()
    {
        CommonHelpers.RecordTest("errors-status-get-error-default-error-codes");
        var sdk = new SDK();

        var ex = await Assert.ThrowsAsync<SDKException>(() => sdk.Errors.StatusGetErrorAsync(400));
        Assert.Equal(400, ex.StatusCode);
        Assert.Equal(400, (int)ex.RawResponse.StatusCode);

        var ex2 = await Assert.ThrowsAsync<SDKException>(() => sdk.Errors.StatusGetErrorAsync(500));
        Assert.Equal(500, ex2.StatusCode);
        Assert.Equal(500, (int)ex2.RawResponse.StatusCode);
    }

    [Fact]
    public async Task TestStatusGetError_300_NonError()
    {
        CommonHelpers.RecordTest("errors-status-get-error300-non-error");
        var sdk = new SDK();

        var res = await sdk.Errors.StatusGetErrorAsync(300);
        Assert.Equal(300, res.StatusCode);
    }

    [Fact]
    public async Task TestStatusGetErrorXSpeakeasyErrors()
    {
        CommonHelpers.RecordTest("errors-status-get-error-x-speakeasy-errors");
        var sdk = new SDK();

        var ex = await Assert.ThrowsAsync<SDKException>(() => sdk.Errors.StatusGetXSpeakeasyErrorsAsync(400));
        Assert.Equal("API error occurred: Status 400\n{\"message\":\"an error occurred\",\"code\":\"400\",\"type\":\"internal\"}\n", ex.ToString());
        Assert.Equal(400, ex.StatusCode);
        Assert.Equal(400, (int)ex.RawResponse.StatusCode);

        var ex2 = await Assert.ThrowsAsync<SDKException>(() => sdk.Errors.StatusGetXSpeakeasyErrorsAsync(401));
        Assert.Equal("API error occurred: Status 401\n{\"message\":\"an error occurred\",\"code\":\"401\",\"type\":\"internal\"}\n", ex2.ToString());
        Assert.Equal(401, ex2.StatusCode);
        Assert.Equal(401, (int)ex2.RawResponse.StatusCode);

        var ex3 = await Assert.ThrowsAsync<SDKException>(() => sdk.Errors.StatusGetXSpeakeasyErrorsAsync(402));
        Assert.Equal("API error occurred: Status 402\n{\"message\":\"an error occurred\",\"code\":\"402\",\"type\":\"internal\"}\n", ex3.ToString());
        Assert.Equal(402, ex3.StatusCode);
        Assert.Equal(402, (int)ex3.RawResponse.StatusCode);

        var ex4 = await Assert.ThrowsAsync<Error>(() => sdk.Errors.StatusGetXSpeakeasyErrorsAsync(500));
        Assert.Equal("an error occurred", ex4.Message);
        Assert.Equal("500", ex4.Code);

        var ex5 = await Assert.ThrowsAsync<StatusGetXSpeakeasyErrorsResponseBody>(() => sdk.Errors.StatusGetXSpeakeasyErrorsAsync(501));
        Assert.Equal("501", ex5.Code);
        Assert.Equal(501, (int)ex5.RawResponse.StatusCode);
    }

    [Fact]
    public async Task TestConnectionErrorGet()
    {
        CommonHelpers.RecordTest("errors-connection-error");
        var sdk = new SDK();

        var ex = await Assert.ThrowsAsync<System.Net.Http.HttpRequestException>(() => sdk.Errors.ConnectionErrorGetAsync());
        Assert.Equal("Name or service not known (somebrokenapi.broken:80)", ex.Message);
    }

}
