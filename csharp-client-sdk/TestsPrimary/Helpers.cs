
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using Newtonsoft.Json;
using Xunit;
using SDK.Models.Shared;
using SDK.Utils;
using NodaTime;

public class Helpers
{
    public static SimpleObject CreateSimpleObject() =>
        new SimpleObject()
        {
            Any = "any",
            Bool = true,
            BoolOpt = true,
            Date = LocalDate.FromDateTime(DateTime.Parse("2020-01-01")),
            DateTime = DateTime.Parse("2020-01-01T00:00:00.0000001Z"),
            Enum = SDK.Models.Shared.Enum.One,
            Float32 = 1.1F,
            Int32 = 1,
            Int32Enum = SimpleObjectInt32Enum.FiftyFive,
            IntEnum = SimpleObjectIntEnum.Two,
            IntOptNull = null,
            Int = 1,
            Num = 1.1D,
            NumOptNull = null,
            Str = "test",
            StrOpt = "testOptional"
        };

    public static void AssertSimpleObject(SimpleObject a)
    {
        var e = CreateSimpleObject();
        Assert.Equal(e.Any, a.Any);
        Assert.Equal(e.Bool, a.Bool);
        Assert.Equal(e.BoolOpt, a.BoolOpt);
        Assert.Equal(e.Date, a.Date);
        Assert.Equal(e.DateTime.ToUniversalTime(), a.DateTime.ToUniversalTime());
        Assert.Equal(e.Enum, a.Enum);
        Assert.Equal(e.Float32, a.Float32);
        Assert.Equal(e.Int32, a.Int32);
        Assert.Equal(e.IntOptNull, a.IntOptNull);
        Assert.Equal(e.Int, a.Int);
        Assert.Equal(e.Num, a.Num);
        Assert.Equal(e.NumOptNull, a.NumOptNull);
        Assert.Equal(e.Str, a.Str);
        Assert.Equal(e.StrOpt, a.StrOpt);
    }

    public static SimpleObjectCamelCase CreateSimpleObjectCamelCase() =>
        new SimpleObjectCamelCase()
        {
            AnyVal = "any",
            BoolVal = true,
            BoolOptVal = true,
            DateVal = LocalDate.FromDateTime(DateTime.Parse("2020-01-01")),
            DateTimeVal = DateTime.Parse("2020-01-01T00:00:00.0000001Z"),
            EnumVal = SDK.Models.Shared.Enum.One,
            Float32Val = 1.1F,
            Int32Val = 1,
            Int32EnumVal = SimpleObjectCamelCaseInt32EnumVal.FiftyFive,
            IntEnumVal = SimpleObjectCamelCaseIntEnumVal.Two,
            IntOptNullVal = null,
            IntVal = 1,
            NumVal = 1.1D,
            NumOptNullVal = null,
            StrVal = "test",
            StrOptVal = "test_optional"
        };

    public static void AssertSimpleObjectCamelCase(SimpleObjectCamelCase a)
    {
        var e = CreateSimpleObjectCamelCase();
        Assert.Equal(e.AnyVal, a.AnyVal);
        Assert.Equal(e.BoolVal, a.BoolVal);
        Assert.Equal(e.BoolOptVal, a.BoolOptVal);
        Assert.Equal(e.DateVal, a.DateVal);
        Assert.Equal(e.DateTimeVal.ToUniversalTime(), a.DateTimeVal.ToUniversalTime());
        Assert.Equal(e.EnumVal, a.EnumVal);
        Assert.Equal(e.Float32Val, a.Float32Val);
        Assert.Equal(e.Int32Val, a.Int32Val);
        Assert.Null(a.IntOptNullVal);
        Assert.Equal(e.IntVal, a.IntVal);
        Assert.Equal(e.NumVal, a.NumVal);
        Assert.Null(a.NumOptNullVal);
        Assert.Equal(e.StrVal, a.StrVal);
        Assert.Equal(e.StrOptVal, a.StrOptVal);
    }

    public static DeepObject CreateDeepObject() =>
        new DeepObject()
        {
            Any = CreateSimpleObject(),
            Arr = new List<SimpleObject>() { CreateSimpleObject(), CreateSimpleObject() },
            Bool = true,
            Int = 1,
            Map = new Dictionary<string, SimpleObject>() { { "key", CreateSimpleObject() } },
            Num = 1.1D,
            Obj = CreateSimpleObject(),
            Str = "test"
        };

    public static byte[] GetData() =>
        Encoding.Unicode.GetBytes(
            "{\r  \"some\": \"json\",\r  \"to\": \"be\",\r  \"uploaded\": \"in\",\r  \"a\": \"file\"\r}\r"
        );

    public static void AssertDeepObject(DeepObject a)
    {
        // because Any is object, the field-names
        // aren't deserialized to match SimpleObject, so
        // a.Any cannot be cast to Simple object in the
        // standard way.
        var json = JsonConvert.SerializeObject(
            a.Any,
            new JsonSerializerSettings()
            {
                NullValueHandling = NullValueHandling.Ignore,
                Converters = new JsonConverter[]
                {
                    new FlexibleObjectDeserializer(),
                    new IsoDateTimeSerializer(),
                    new EnumSerializer()
                }
            }
        );
        var any = JsonConvert.DeserializeObject<SimpleObject>(
            json,
            new JsonSerializerSettings()
            {
                NullValueHandling = NullValueHandling.Ignore,
                Converters = new JsonConverter[]
                {
                    new FlexibleObjectDeserializer(),
                    new IsoDateTimeSerializer(),
                    new EnumSerializer()
                }
            }
        );
        AssertSimpleObject(any);

        Assert.Equal(2, a.Arr.Count());
        AssertSimpleObject(a.Arr.ToList().First());
        AssertSimpleObject(a.Arr.ToList().Last());

        Assert.True(a.Bool);
        Assert.Equal(1, a.Int);

        Assert.Single(a.Map);
        AssertSimpleObject(a.Map["key"]);

        Assert.Equal(1.1D, a.Num);
        AssertSimpleObject(a.Obj);
        Assert.Equal("test", a.Str);
    }
}
