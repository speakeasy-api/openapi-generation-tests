
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Xunit;
using Openapi;
using Openapi.Models.Shared;
using Openapi.Models.Operations;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

public class HooksShould
{
    [Fact]
    public async Task TestHooks()
    {
        CommonHelpers.RecordTest("test-hooks");

        var sdk = new SDK();

        var res = await sdk.Hooks.TestHooksAsync("someInitialValue");
        Assert.NotNull(res);
        Assert.Equal(200, res.StatusCode);
        Assert.Equal("overriddenParam", res.Res.Args.SomeParam);
        Assert.Equal("added by client", res.Res.Headers.ClientLevelHeader);
        Assert.Equal("some-key", res.Res.Headers.IdempotencyKey);
        Assert.Equal("http://localhost:35123/anything/hooks?someParam=overriddenParam", res.Res.Url);
    }

    [Fact]
    public async Task TestHooksAfterResponse()
    {
        CommonHelpers.RecordTest("test-hooks-after-response");

        var sdk = new SDK();

        var error = await Assert.ThrowsAsync<Exception>(
            async () => await sdk.Hooks.TestHooksAfterResponseAsync()
        );

        //   this error was raised from within SDKHooks.cs and is therefore wrapped in an
        //   error message to inform the client that their hook definition is incorrect
        Assert.Equal("An error occurred while calling AfterSuccessAsync hook.", error.Message);
        Assert.Equal("validation failed", error.InnerException?.Message);
    }

    [Fact]
    public async Task TestHooksError()
    {
        CommonHelpers.RecordTest("test-hooks-error");

        var sdk = new SDK();

        var error = await Assert.ThrowsAsync<Exception>(
            async () => await sdk.Hooks.TestHooksErrorAsync()
        );

        //   this error was returned normally by the AfterError hook and raised from inside the method
        //   it does not get wrapped with more context since it is directed at the end user.
        Assert.Equal("special test error case", error.Message);
    }

    [Fact]
    public async Task HooksAuthorizationHeaderModification()
    {
        CommonHelpers.RecordTest("hooks-authorization-header-modification");

        var sdk = new SDK(security: new Security() { ApiKeyAuth = "Bearer testToken" });

        var res = await sdk.Hooks.AuthorizationHeaderModificationAsync();

        Assert.NotNull(res);
        Assert.Equal(200, res.StatusCode);
        Assert.True(res.Token.Authenticated);
        Assert.Equal("testToken modified", res.Token.Token);
    }
}
