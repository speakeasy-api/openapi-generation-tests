
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Xunit;
using SDK;
using SDK.Models.Shared;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using SDK.Models.Operations;

public class PaginationShould
{
    [Fact]
    public async Task PaginationLimitOffsetPageParams()
    {
        CommonHelpers.RecordTest("pagination-limitOffset-page-params");
        var sdk = new SDKSDK();

        var serverLimit = 20;

        var res = await sdk.Pagination.PaginationLimitOffsetPageParamsAsync(page: 1);

        Assert.Equal(200, res.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(res.Res.ResultArray.Count(), serverLimit);

        var nextRes = await res.Next();
        Assert.Equal(200, nextRes.StatusCode);
        Assert.NotNull(nextRes.Res);
        Assert.Equal(nextRes.Res.ResultArray.Count(), 0);

        var nullRes = await nextRes.Next();
        Assert.Null(nullRes);
    }

    [Fact]
    public async Task PaginationLimitOffsetPageBody()
    {
        CommonHelpers.RecordTest("pagination-limitOffset-page-body");
        var sdk = new SDKSDK();
        var limit = 15;

        var res = await sdk.Pagination.PaginationLimitOffsetPageBodyAsync(request: new LimitOffsetConfig{Page = 1, Limit = limit});

        Assert.Equal(200, res.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(res.Res.ResultArray.Count(), limit);

        var nextRes = await res.Next();
        Assert.Equal(200, nextRes.StatusCode);
        Assert.NotNull(nextRes.Res);
        Assert.True(nextRes.Res.ResultArray.Count() < limit, "result count is expected to be less than the limit");

        var nullRes = await nextRes.Next();
        Assert.Null(nullRes);
    }

    [Fact]
    public async Task PaginationLimitOffsetOffsetParams()
    {
        CommonHelpers.RecordTest("pagination-limitOffset-offset-params");
        var sdk = new SDKSDK();
        var limit = 15;

        var res = await sdk.Pagination.PaginationLimitOffsetOffsetParamsAsync(limit: limit, offset: 0);

        Assert.Equal(200, res.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(res.Res.ResultArray.Count(), limit);

        var nextRes = await res.Next();
        Assert.Equal(200, nextRes.StatusCode);
        Assert.NotNull(nextRes.Res);
        Assert.True(nextRes.Res.ResultArray.Count() < limit, "result count is expected to be less than the limit");

        var nullRes = await nextRes.Next();
        Assert.Null(nullRes);
    }

    [Fact]
    public async Task PaginationLimitOffsetOffsetBody()
    {
        CommonHelpers.RecordTest("pagination-limitOffset-offset-body");
        var sdk = new SDKSDK();
        var limit = 15;

        var res = await sdk.Pagination.PaginationLimitOffsetOffsetBodyAsync(request: new LimitOffsetConfig{Limit = limit, Offset = 0});

        Assert.Equal(200, res.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(res.Res.ResultArray.Count(), limit);

        var nextRes = await res.Next();
        Assert.Equal(200, nextRes.StatusCode);
        Assert.NotNull(nextRes.Res);
        Assert.True(nextRes.Res.ResultArray.Count() < limit, "result count is expected to be less than the limit");

        var nullRes = await nextRes.Next();
        Assert.Null(nullRes);
    }

    [Fact]
    public async Task PaginationCursorParams()
    {
        CommonHelpers.RecordTest("pagination-cursor-params");
        var sdk = new SDKSDK();
        var limit = 15;

        var res = await sdk.Pagination.PaginationCursorParamsAsync(cursor: -1);

        Assert.Equal(200, res.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(res.Res.ResultArray.Count(), limit);

        var nextRes = await res.Next();
        Assert.Equal(200, nextRes.StatusCode);
        Assert.NotNull(nextRes.Res);
        Assert.True(nextRes.Res.ResultArray.Count() < limit, "result count is expected to be less than the limit");

        var penultimateRes = await nextRes.Next();
        Assert.Equal(200, penultimateRes.StatusCode);
        Assert.NotNull(penultimateRes.Res);
        Assert.Equal(penultimateRes.Res.ResultArray.Count(), 0);


        var nullRes = await penultimateRes.Next();
        Assert.Null(nullRes);
    }

    [Fact]
    public async Task PaginationCursorBody()
    {
        CommonHelpers.RecordTest("pagination-cursor-body");
        var sdk = new SDKSDK();
        var limit = 15;

        var res = await sdk.Pagination.PaginationCursorBodyAsync(request: new PaginationCursorBodyRequestBody{Cursor = -1});

        Assert.Equal(200, res.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(res.Res.ResultArray.Count(), limit);

        var nextRes = await res.Next();
        Assert.Equal(200, nextRes.StatusCode);
        Assert.NotNull(nextRes.Res);
        Assert.True(nextRes.Res.ResultArray.Count() < limit, "result count is expected to be less than the limit");

        var penultimateRes = await nextRes.Next();
        Assert.Equal(200, penultimateRes.StatusCode);
        Assert.NotNull(penultimateRes.Res);
        Assert.Equal(penultimateRes.Res.ResultArray.Count(), 0);


        var nullRes = await penultimateRes.Next();
        Assert.Null(nullRes);
    }

}