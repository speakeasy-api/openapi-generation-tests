
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Xunit;
using SDK;
using SDK.Models.Shared;
using System.Collections.Generic;
using System.Threading.Tasks;
using SDK.Models.Operations;

public class ParametersShould
{
    [Fact]
    public async Task MixedParameters()
    {
        CommonHelpers.RecordTest("parameters-mixed-primitives");

        var sdk = new SDKSDK();

        var res = await sdk.Parameters.MixedParametersPrimitivesAsync(
            "headerValue",
            "pathValue",
            "queryValue"
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(
            "http://localhost:35123/anything/mixedParams/path/pathValue?queryStringParam=queryValue",
            res.RawResponse.RequestMessage.RequestUri.ToString()
        );
        Assert.Equal("headerValue", res.Res.Headers.Headerparam);
        Assert.Equal("queryValue", res.Res.Args.QueryStringParam);
    }

    [Fact]
    public async Task CamelCase()
    {
        CommonHelpers.RecordTest("parameters-camel-case");

        var sdk = new SDKSDK();

        var res = await sdk.Parameters.MixedParametersCamelCaseAsync(
            "headerValue",
            "pathValue",
            "queryValue"
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(
            "http://localhost:35123/anything/mixedParams/path/pathValue/camelcase?query_string_param=queryValue",
            res.RawResponse.RequestMessage.RequestUri.ToString()
        );
        Assert.Equal("headerValue", res.Res.Headers.HeaderParam);
        Assert.Equal("queryValue", res.Res.Args.QueryStringParam);
    }

    [Fact]
    public async Task SimplePathParameterPrimitives()
    {
        CommonHelpers.RecordTest("parameters-simple-path-parameter-primitives");
        var sdk = new SDKSDK();

        var res = await sdk.Parameters.SimplePathParameterPrimitivesAsync(true, 1, 1.1D, "test");

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(
            "http://localhost:35123/anything/pathParams/str/test/bool/true/int/1/num/1.1",
            res.RawResponse.RequestMessage.RequestUri.ToString()
        );
    }

    [Fact]
    public async Task SimplePathParameterObjects()
    {
        CommonHelpers.RecordTest("parameters-simple-path-parameter-objects");
        var sdk = new SDKSDK();

        var res = await sdk.Parameters.SimplePathParameterObjectsAsync(
            Helpers.CreateSimpleObject(),
            Helpers.CreateSimpleObject()
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(
            "http://localhost:35123/anything/pathParams/obj/any,any,bool,true,date,2020-01-01,dateTime,2020-01-01T00:00:00.0000001Z,enum,one,float32,1.1,int,1,int32,1,int32Enum,55,intEnum,2,num,1.1,str,test,boolOpt,true,strOpt,testOptional/objExploded/any=any,bool=true,date=2020-01-01,dateTime=2020-01-01T00:00:00.0000001Z,enum=one,float32=1.1,int=1,int32=1,int32Enum=55,intEnum=2,num=1.1,str=test,boolOpt=true,strOpt=testOptional",
            res.RawResponse.RequestMessage.RequestUri.ToString()
        );
    }

    [Fact]
    public async Task SimplePathParameterArrays()
    {
        CommonHelpers.RecordTest("parameters-simple-path-parameter-arrays");
        var sdk = new SDKSDK();

        var res = await sdk.Parameters.SimplePathParameterArraysAsync(
            new List<string>() { "test", "test2" }
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(
            "http://localhost:35123/anything/pathParams/arr/test,test2",
            res.RawResponse.RequestMessage.RequestUri.ToString()
        );
    }

    [Fact]
    public async Task SimplePathParameterMaps()
    {
        CommonHelpers.RecordTest("parameters-simple-path-parameter-maps");
        var sdk = new SDKSDK();

        var res = await sdk.Parameters.SimplePathParameterMapsAsync(
            new Dictionary<string, string>() { { "test", "value" }, { "test2", "value2" } },
            new Dictionary<string, long>() { { "test", 1 }, { "test2", 2 } }
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(
            "http://localhost:35123/anything/pathParams/map/test,value,test2,value2/mapExploded/test=1,test2=2",
            res.RawResponse.RequestMessage.RequestUri.ToString()
        );
    }

    [Fact]
    public async Task PathParameterJson()
    {
        CommonHelpers.RecordTest("parameters-path-parameter-json");

        var sdk = new SDKSDK();

        var res = await sdk.Parameters.PathParameterJsonAsync(Helpers.CreateSimpleObject());

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(
            "http://localhost:35123/anything/pathParams/json/{\"any\":\"any\",\"bool\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.0000001Z\",\"enum\":\"one\",\"float32\":1.1,\"int\":1,\"int32\":1,\"int32Enum\":55,\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"boolOpt\":true,\"strOpt\":\"testOptional\"}",
            res.Res.Url
        );
    }

    [Fact]
    public async Task FormQueryParamsPrimitive()
    {
        CommonHelpers.RecordTest("parameters-form-query-params-primitive");
        var sdk = new SDKSDK();

        var res = await sdk.Parameters.FormQueryParamsPrimitiveAsync(true, 1, 1.1D, "test");

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(
            "http://localhost:35123/anything/queryParams/form/primitive?boolParam=true&intParam=1&numParam=1.1&strParam=test",
            res.RawResponse.RequestMessage.RequestUri.ToString()
        );
    }

    [Fact]
    public async Task FormQueryParamsObject()
    {
        CommonHelpers.RecordTest("parameters-form-query-params-object");
        var sdk = new SDKSDK();

        var res = await sdk.Parameters.FormQueryParamsObjectAsync(
            Helpers.CreateSimpleObject(),
            Helpers.CreateSimpleObject()
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(
            "http://localhost:35123/anything/queryParams/form/obj?any=any&bool=true&date=2020-01-01&dateTime=2020-01-01T00:00:00.0000001Z&enum=one&float32=1.1&int=1&int32=1&int32Enum=55&intEnum=2&num=1.1&str=test&boolOpt=true&strOpt=testOptional&objParam=any,any,bool,true,date,2020-01-01,dateTime,2020-01-01T00:00:00.0000001Z,enum,one,float32,1.1,int,1,int32,1,int32Enum,55,intEnum,2,num,1.1,str,test,boolOpt,true,strOpt,testOptional",
            res.RawResponse.RequestMessage.RequestUri.ToString()
        );
    }

    [Fact]
    public async Task FormQueryParamsArray()
    {
        CommonHelpers.RecordTest("parameters-form-query-params-array");
        var sdk = new SDKSDK();

        var res = await sdk.Parameters.FormQueryParamsArrayAsync(
            new List<string>() { "test", "test2" },
            new List<long>() { 1, 2 }
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(
            "http://localhost:35123/anything/queryParams/form/array?arrParam=test,test2&arrParamExploded=1&arrParamExploded=2",
            res.RawResponse.RequestMessage.RequestUri.ToString()
        );
        Assert.Equal("test,test2", res.Res.Args.ArrParam);
        Assert.Equal(new List<string>() { "1", "2" }, res.Res.Args.ArrParamExploded);
    }

    [Fact]
    public async Task PipeDelimitedQueryParamsArray()
    {
        CommonHelpers.RecordTest("parameters-pipe-query-params-array");

        var sdk = new SDKSDK();

        var res = await sdk.Parameters.PipeDelimitedQueryParamsArrayAsync(
            new List<string>() { "test", "test2" },
            new List<long> { 1, 2 },
            new Dictionary<string, string>() { { "key1", "val1" }, { "key2", "val2" } },
            Helpers.CreateSimpleObject()
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(
            "http://localhost:35123/anything/queryParams/pipe/array?arrParam=test|test2&arrParamExploded=1&arrParamExploded=2&mapParam=key1|val1|key2|val2&objParam=any|any|bool|true|date|2020-01-01|dateTime|2020-01-01T00:00:00.0000001Z|enum|one|float32|1.1|int|1|int32|1|int32Enum|55|intEnum|2|num|1.1|str|test|boolOpt|true|strOpt|testOptional",
            res.Res.Url
        );
        Assert.Equal("test|test2", res.Res.Args.ArrParam);
        Assert.Equal(new List<string>() { "1", "2" }, res.Res.Args.ArrParamExploded);
    }

    [Fact]
    public async Task FormQueryParamsMap()
    {
        CommonHelpers.RecordTest("parameters-form-query-params-map");
        var sdk = new SDKSDK();

        var res = await sdk.Parameters.FormQueryParamsMapAsync(
            new Dictionary<string, string>() { { "test", "value" }, { "test2", "value2" } },
            new Dictionary<string, long>() { { "test", 1 }, { "test2", 2 } }
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(
            "http://localhost:35123/anything/queryParams/form/map?mapParam=test,value,test2,value2&test=1&test2=2",
            res.RawResponse.RequestMessage.RequestUri.ToString()
        );
        Assert.Equal(
            new Dictionary<string, string>()
            {
                { "mapParam", "test,value,test2,value2" },
                { "test", "1" },
                { "test2", "2" }
            },
            res.Res.Args
        );
    }

    [Fact]
    public async Task FormQueryParamsRefParamObject()
    {
        CommonHelpers.RecordTest("parameters-form-query-params-ref-param-object");

        var sdk = new SDKSDK();

        var res = await sdk.Parameters.FormQueryParamsRefParamObjectAsync(
            new RefQueryParamObj()
            {
                Bool = true,
                Int = 1,
                Num = 1.1D,
                Str = "test"
            },
            new RefQueryParamObjExploded()
            {
                Bool = true,
                Int = 1,
                Num = 1.1D,
                Str = "test"
            }
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(
            "http://localhost:35123/anything/queryParams/form/refParamObject?refObjParam=bool,true,int,1,num,1.1,str,test&bool=true&int=1&num=1.1&str=test",
            res.Res.Url
        );
        Assert.Equal("true", res.Res.Args.Bool);
        Assert.Equal("1", res.Res.Args.Int);
        Assert.Equal("1.1", res.Res.Args.Num);
        Assert.Equal("test", res.Res.Args.Str);
        Assert.Equal("bool,true,int,1,num,1.1,str,test", res.Res.Args.RefObjParam);
    }

    [Fact]
    public async Task DeepObjectQueryParamsObject()
    {
        CommonHelpers.RecordTest("parameters-deep-object-query-params-object");
        var sdk = new SDKSDK();

        var res = await sdk.Parameters.DeepObjectQueryParamsObjectAsync(
            Helpers.CreateSimpleObject(),
            new DeepObjectQueryParamsObjectObjArrParam()
            {
                Arr = new List<string> { "test", "test2" }
            }
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(
            "http://localhost:35123/anything/queryParams/deepObject/obj?objParam[any]=any&objParam[bool]=true&objParam[date]=2020-01-01&objParam[dateTime]=2020-01-01T00:00:00.0000001Z&objParam[enum]=one&objParam[float32]=1.1&objParam[int]=1&objParam[int32]=1&objParam[int32Enum]=55&objParam[intEnum]=2&objParam[num]=1.1&objParam[str]=test&objParam[boolOpt]=true&objParam[strOpt]=testOptional&objArrParam[arr]=test&objArrParam[arr]=test2",
            res.RawResponse.RequestMessage.RequestUri.ToString()
        );
        Assert.Equal(new string[] { "test", "test2" }, res.Res.Args.ObjArrParamArr);
        Assert.Equal("any", res.Res.Args.ObjParamAny);
        Assert.Equal("true", res.Res.Args.ObjParamBool);
        Assert.Equal("true", res.Res.Args.ObjParamBoolOpt);
        Assert.Equal("2020-01-01", res.Res.Args.ObjParamDate);
        Assert.Equal("2020-01-01T00:00:00.0000001Z", res.Res.Args.ObjParamDateTime);
        Assert.Equal("one", res.Res.Args.ObjParamEnum);
        Assert.Equal("1.1", res.Res.Args.ObjParamFloat32);
        Assert.Equal("1", res.Res.Args.ObjParamInt32);
        Assert.Equal("1", res.Res.Args.ObjParamInt);
        Assert.Equal("1.1", res.Res.Args.ObjParamNum);
        Assert.Equal("test", res.Res.Args.ObjParamStr);
        Assert.Equal("testOptional", res.Res.Args.ObjParamStrOpt);
    }

    [Fact]
    public async Task DeepObjectQueryParamsMap()
    {
        CommonHelpers.RecordTest("parameters-deep-object-query-params-map");
        var sdk = new SDKSDK();

        var res = await sdk.Parameters.DeepObjectQueryParamsMapAsync(
            new Dictionary<string, string>() { { "test", "value" }, { "test2", "value2" } },
            new Dictionary<string, List<string>>()
            {
                {
                    "test",
                    new List<string>() { "value", "value2" }
                },
                {
                    "test2",
                    new List<string>() { "value3", "value4" }
                }
            }
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(
            "http://localhost:35123/anything/queryParams/deepObject/map?mapParam[test]=value&mapParam[test2]=value2&mapArrParam[test]=value&mapArrParam[test]=value2&mapArrParam[test2]=value3&mapArrParam[test2]=value4",
            res.RawResponse.RequestMessage.RequestUri.ToString()
        );
        Assert.Equal(
            new Dictionary<string, object>()
            {
                {
                    "mapArrParam[test2]",
                    new List<string>() { "value3", "value4" }
                },
                {
                    "mapArrParam[test]",
                    new List<string>() { "value", "value2" }
                },
                { "mapParam[test2]", "value2" },
                { "mapParam[test]", "value" }
            },
            res.Res.Args
        );
    }

    [Fact]
    public async Task JsonQueryParamsObject()
    {
        CommonHelpers.RecordTest("parameters-json-query-params-object");
        var sdk = new SDKSDK();

        var res = await sdk.Parameters.JsonQueryParamsObjectAsync(
            Helpers.CreateDeepObject(),
            Helpers.CreateSimpleObject()
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(
            "http://localhost:35123/anything/queryParams/json/obj?deepObjParam={\"any\":{\"any\":\"any\",\"bool\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.0000001Z\",\"enum\":\"one\",\"float32\":1.1,\"int\":1,\"int32\":1,\"int32Enum\":55,\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"boolOpt\":true,\"strOpt\":\"testOptional\"},\"arr\":[{\"any\":\"any\",\"bool\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.0000001Z\",\"enum\":\"one\",\"float32\":1.1,\"int\":1,\"int32\":1,\"int32Enum\":55,\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"boolOpt\":true,\"strOpt\":\"testOptional\"},{\"any\":\"any\",\"bool\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.0000001Z\",\"enum\":\"one\",\"float32\":1.1,\"int\":1,\"int32\":1,\"int32Enum\":55,\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"boolOpt\":true,\"strOpt\":\"testOptional\"}],\"bool\":true,\"int\":1,\"map\":{\"key\":{\"any\":\"any\",\"bool\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.0000001Z\",\"enum\":\"one\",\"float32\":1.1,\"int\":1,\"int32\":1,\"int32Enum\":55,\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"boolOpt\":true,\"strOpt\":\"testOptional\"}},\"num\":1.1,\"obj\":{\"any\":\"any\",\"bool\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.0000001Z\",\"enum\":\"one\",\"float32\":1.1,\"int\":1,\"int32\":1,\"int32Enum\":55,\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"boolOpt\":true,\"strOpt\":\"testOptional\"},\"str\":\"test\"}&simpleObjParam={\"any\":\"any\",\"bool\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.0000001Z\",\"enum\":\"one\",\"float32\":1.1,\"int\":1,\"int32\":1,\"int32Enum\":55,\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"boolOpt\":true,\"strOpt\":\"testOptional\"}",
            res.RawResponse.RequestMessage.RequestUri.ToString()
        );
    }

    [Fact]
    public async Task MixedQueryParams()
    {
        CommonHelpers.RecordTest("parameters-mixed-query-params");
        var sdk = new SDKSDK();

        var res = await sdk.Parameters.MixedQueryParamsAsync(
            Helpers.CreateSimpleObject(),
            Helpers.CreateSimpleObject(),
            Helpers.CreateSimpleObject()
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(
            "http://localhost:35123/anything/queryParams/mixed?deepObjectParam[any]=any&deepObjectParam[bool]=true&deepObjectParam[date]=2020-01-01&deepObjectParam[dateTime]=2020-01-01T00:00:00.0000001Z&deepObjectParam[enum]=one&deepObjectParam[float32]=1.1&deepObjectParam[int]=1&deepObjectParam[int32]=1&deepObjectParam[int32Enum]=55&deepObjectParam[intEnum]=2&deepObjectParam[num]=1.1&deepObjectParam[str]=test&deepObjectParam[boolOpt]=true&deepObjectParam[strOpt]=testOptional&any=any&bool=true&date=2020-01-01&dateTime=2020-01-01T00:00:00.0000001Z&enum=one&float32=1.1&int=1&int32=1&int32Enum=55&intEnum=2&num=1.1&str=test&boolOpt=true&strOpt=testOptional&jsonParam={\"any\":\"any\",\"bool\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.0000001Z\",\"enum\":\"one\",\"float32\":1.1,\"int\":1,\"int32\":1,\"int32Enum\":55,\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"boolOpt\":true,\"strOpt\":\"testOptional\"}",
            res.RawResponse.RequestMessage.RequestUri.ToString()
        );
    }

    [Fact]
    public async Task HeaderParamsPrimitive()
    {
        CommonHelpers.RecordTest("parameters-header-params-primitive");
        var sdk = new SDKSDK();

        var res = await sdk.Parameters.HeaderParamsPrimitiveAsync(true, 1, 1.1D, "test");

        Assert.Equal(200, res.StatusCode);
        Assert.Equal("true", res.Res.Headers.XHeaderBoolean);
        Assert.Equal("1", res.Res.Headers.XHeaderInteger);
        Assert.Equal("1.1", res.Res.Headers.XHeaderNumber);
        Assert.Equal("test", res.Res.Headers.XHeaderString);
    }

    [Fact]
    public async Task HeaderParamsObject()
    {
        CommonHelpers.RecordTest("parameters-header-params-object");
        var sdk = new SDKSDK();

        var res = await sdk.Parameters.HeaderParamsObjectAsync(
            Helpers.CreateSimpleObject(),
            Helpers.CreateSimpleObject()
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(
            "any,any,bool,true,date,2020-01-01,dateTime,2020-01-01T00:00:00.0000001Z,enum,one,float32,1.1,int,1,int32,1,int32Enum,55,intEnum,2,num,1.1,str,test,boolOpt,true,strOpt,testOptional",
            res.Res.Headers.XHeaderObj
        );
        Assert.Equal(
            "any=any,bool=true,date=2020-01-01,dateTime=2020-01-01T00:00:00.0000001Z,enum=one,float32=1.1,int=1,int32=1,int32Enum=55,intEnum=2,num=1.1,str=test,boolOpt=true,strOpt=testOptional",
            res.Res.Headers.XHeaderObjExplode
        );
    }

    [Fact]
    public async Task HeaderParamsMap()
    {
        CommonHelpers.RecordTest("parameters-header-params-map");
        var sdk = new SDKSDK();

        var res = await sdk.Parameters.HeaderParamsMapAsync(
            new Dictionary<string, string>() { { "key1", "value1" }, { "key2", "value2" } },
            new Dictionary<string, string>() { { "test1", "val1" }, { "test2", "val2" } }
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal("key1,value1,key2,value2", res.Res.Headers.XHeaderMap);
        Assert.Equal("test1=val1,test2=val2", res.Res.Headers.XHeaderMapExplode);
    }

    [Fact]
    public async Task HeaderParamsArray()
    {
        CommonHelpers.RecordTest("parameters-header-params-array");
        var sdk = new SDKSDK();

        var res = await sdk.Parameters.HeaderParamsArrayAsync(
            new List<string> { "test1", "test2" }
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal("test1,test2", res.Res.Headers.XHeaderArray);
    }
}