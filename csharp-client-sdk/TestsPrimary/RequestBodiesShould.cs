
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;
using System.Text.RegularExpressions;
using Xunit;
using SDK;
using SDK.Models.Shared;
using SDK.Utils;
using SDK.Models.Operations;

public class RequestBodiesShould
{
    [Fact]
    public async Task PostApplicationJsonSimple()
    {
        CommonHelpers.RecordTest("request-bodies-post-application-json-simple");
        var sdk = new SDKSDK();

        var res = await sdk.RequestBodies.RequestBodyPostApplicationJsonSimpleAsync(
            Helpers.CreateSimpleObject()
        );

        Assert.Equal(200, res.StatusCode);
        Helpers.AssertSimpleObject(res.Res.Json);
    }

    [Fact]
    public async Task PostApplicationJsonArray()
    {
        CommonHelpers.RecordTest("request-bodies-post-application-json-array");
        var sdk = new SDKSDK();

        var res = await sdk.RequestBodies.RequestBodyPostApplicationJsonArrayAsync(
            new List<SimpleObject>() { Helpers.CreateSimpleObject(), Helpers.CreateSimpleObject() }
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(2, res.SimpleObjects.Count());
        foreach (var obj in res.SimpleObjects)
        {
            Helpers.AssertSimpleObject(obj);
        }
    }

    [Fact]
    public async Task PostApplicationJsonArrayOfArray()
    {
        CommonHelpers.RecordTest("request-bodies-post-application-json-array-of-array");
        var sdk = new SDKSDK();

        var obj = Helpers.CreateSimpleObject();

        var res = await sdk.RequestBodies.RequestBodyPostApplicationJsonArrayOfArrayAsync(
            new List<List<SimpleObject>>
            {
                new List<SimpleObject>() { obj, obj },
                new List<SimpleObject>() { obj, obj }
            }
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(2, res.Arrs.Count());
        Assert.Equal(2, res.Arrs.ToList()[0].Count());
        Assert.Equal(2, res.Arrs.ToList()[1].Count());

        for (var i = 0; i < 2; i++)
        {
            for (var j = 0; j < 2; j++)
            {
                Helpers.AssertSimpleObject(res.Arrs.ToList()[i].ToList()[j]);
            }
        }
    }

    [Fact]
    public async Task PostApplicationJsonMap()
    {
        CommonHelpers.RecordTest("request-bodies-post-application-json-map");
        var sdk = new SDKSDK();

        var obj = Helpers.CreateSimpleObject();

        var res = await sdk.RequestBodies.RequestBodyPostApplicationJsonMapAsync(
            new Dictionary<string, SimpleObject>() { { "mapElem1", obj }, { "mapElem2", obj } }
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(2, res.Res.Count());
        Helpers.AssertSimpleObject(res.Res["mapElem1"]);
        Helpers.AssertSimpleObject(res.Res["mapElem2"]);
    }

    [Fact]
    public async Task PostApplicationJsonMapOfMap()
    {
        CommonHelpers.RecordTest("request-bodies-post-application-json-map-of-map");
        var sdk = new SDKSDK();

        var obj = Helpers.CreateSimpleObject();

        var res = await sdk.RequestBodies.RequestBodyPostApplicationJsonMapOfMapAsync(
            new Dictionary<string, Dictionary<string, SimpleObject>>()
            {
                {
                    "mapElem1",
                    new Dictionary<string, SimpleObject>()
                    {
                        { "subMapElem1", obj },
                        { "subMapElem2", obj }
                    }
                },
                {
                    "mapElem2",
                    new Dictionary<string, SimpleObject>()
                    {
                        { "subMapElem1", obj },
                        { "subMapElem2", obj }
                    }
                },
            }
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(2, res.Res.Count());
        Assert.Equal(2, res.Res["mapElem1"].Count());
        Assert.Equal(2, res.Res["mapElem2"].Count());
        Helpers.AssertSimpleObject(res.Res["mapElem1"]["subMapElem1"]);
        Helpers.AssertSimpleObject(res.Res["mapElem1"]["subMapElem2"]);
        Helpers.AssertSimpleObject(res.Res["mapElem2"]["subMapElem1"]);
        Helpers.AssertSimpleObject(res.Res["mapElem2"]["subMapElem2"]);
    }

    [Fact]
    public async Task PostApplicationJsonMapOfArray()
    {
        CommonHelpers.RecordTest("request-bodies-post-application-json-map-of-array");
        var sdk = new SDKSDK();

        var obj = Helpers.CreateSimpleObject();

        var res = await sdk.RequestBodies.RequestBodyPostApplicationJsonMapOfArrayAsync(
            new Dictionary<string, List<SimpleObject>>()
            {
                {
                    "mapElem1",
                    new List<SimpleObject>() { obj, obj }
                },
                {
                    "mapElem2",
                    new List<SimpleObject>() { obj, obj }
                }
            }
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(2, res.Res.Count());
        Assert.Equal(2, res.Res["mapElem1"].Count());
        Assert.Equal(2, res.Res["mapElem2"].Count());
        Helpers.AssertSimpleObject(res.Res["mapElem1"].First());
        Helpers.AssertSimpleObject(res.Res["mapElem1"].Last());
        Helpers.AssertSimpleObject(res.Res["mapElem2"].First());
        Helpers.AssertSimpleObject(res.Res["mapElem2"].Last());
    }

    [Fact]
    public async Task PostApplicationJsonArrayOfMap()
    {
        CommonHelpers.RecordTest("request-bodies-post-application-json-array-of-map");
        var sdk = new SDKSDK();

        var maps = new List<Dictionary<string, SimpleObject>>();
        for (int i = 0; i < 2; i++)
        {
            maps.Add(
                new Dictionary<string, SimpleObject>()
                {
                    { "mapElem1", Helpers.CreateSimpleObject() },
                    { "mapElem2", Helpers.CreateSimpleObject() }
                }
            );
        }

        var res = await sdk.RequestBodies.RequestBodyPostApplicationJsonArrayOfMapAsync(maps);

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(2, res.Maps.Count());
        Assert.Equal(2, res.Maps.ToList()[0].Count());
        Assert.Equal(2, res.Maps.ToList()[1].Count());
        Helpers.AssertSimpleObject(res.Maps.ToList()[0]["mapElem1"]);
        Helpers.AssertSimpleObject(res.Maps.ToList()[0]["mapElem2"]);
        Helpers.AssertSimpleObject(res.Maps.ToList()[1]["mapElem1"]);
        Helpers.AssertSimpleObject(res.Maps.ToList()[1]["mapElem2"]);
    }

    [Fact]
    public async Task PostApplicationJsonMapOfPrimitive()
    {
        CommonHelpers.RecordTest("request-bodies-post-application-json-map-of-primitive");
        var sdk = new SDKSDK();

        var res = await sdk.RequestBodies.RequestBodyPostApplicationJsonMapOfPrimitiveAsync(
            new Dictionary<string, string>() { { "mapElem1", "hello" }, { "mapElem2", "world" } }
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(2, res.Res.Count());
        Assert.Equal("hello", res.Res["mapElem1"]);
        Assert.Equal("world", res.Res["mapElem2"]);
    }

    [Fact]
    public async Task PostApplicationJsonArrayOfPrimitive()
    {
        CommonHelpers.RecordTest("request-bodies-post-application-json-array-of-primitive");
        var sdk = new SDKSDK();

        var res = await sdk.RequestBodies.RequestBodyPostApplicationJsonArrayOfPrimitiveAsync(
            new List<string>() { "hello", "world" }
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(2, res.Strings.Count());
        Assert.Equal("hello", res.Strings.ToList()[0]);
        Assert.Equal("world", res.Strings.ToList()[1]);
    }

    [Fact]
    public async Task PostApplicationJsonMapOfMapOfPrimitive()
    {
        CommonHelpers.RecordTest("request-bodies-post-application-json-map-of-map-of-primitive");
        var sdk = new SDKSDK();

        var res = await sdk.RequestBodies.RequestBodyPostApplicationJsonMapOfMapOfPrimitiveAsync(
            new Dictionary<string, Dictionary<string, string>>()
            {
                {
                    "mapElem1",
                    new Dictionary<string, string>()
                    {
                        { "subMapElem1", "foo" },
                        { "subMapElem2", "bar" }
                    }
                },
                {
                    "mapElem2",
                    new Dictionary<string, string>()
                    {
                        { "subMapElem1", "buzz" },
                        { "subMapElem2", "bazz" }
                    }
                }
            }
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(2, res.Res.Count());
        Assert.Equal(2, res.Res["mapElem1"].Count());
        Assert.Equal(2, res.Res["mapElem2"].Count());
        Assert.Equal("foo", res.Res["mapElem1"]["subMapElem1"]);
        Assert.Equal("bar", res.Res["mapElem1"]["subMapElem2"]);
        Assert.Equal("buzz", res.Res["mapElem2"]["subMapElem1"]);
        Assert.Equal("bazz", res.Res["mapElem2"]["subMapElem2"]);
    }

    [Fact]
    public async Task PostApplicationJsonArrayOfArrayOfPrimitive()
    {
        CommonHelpers.RecordTest("request-bodies-post-application-json-array-of-array-of-primitive");
        var sdk = new SDKSDK();

        var res =
            await sdk.RequestBodies.RequestBodyPostApplicationJsonArrayOfArrayOfPrimitiveAsync(
                new List<List<string>>()
                {
                    new List<string>() { "foo", "bar" },
                    new List<string>() { "buzz", "bazz" }
                }
            );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(2, res.Arrs.Count());
        Assert.Equal(2, res.Arrs.First().Count());
        Assert.Equal(2, res.Arrs.Last().Count());
        Assert.Equal("foo", res.Arrs.First().First());
        Assert.Equal("bar", res.Arrs.First().Last());
        Assert.Equal("buzz", res.Arrs.Last().First());
        Assert.Equal("bazz", res.Arrs.Last().Last());
    }

    [Fact]
    public async Task PostApplicationJsonArrayObject()
    {
        CommonHelpers.RecordTest("request-bodies-post-application-json-array-object");
        var sdk = new SDKSDK();

        var obj = Helpers.CreateSimpleObject();

        var res = await sdk.RequestBodies.RequestBodyPostApplicationJsonArrayObjAsync(
            new List<SimpleObject>() { obj, obj }
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(2, res.ArrObjValue.Json.Count());
        Helpers.AssertSimpleObject(res.ArrObjValue.Json.ToList()[0]);
        Helpers.AssertSimpleObject(res.ArrObjValue.Json.ToList()[1]);
    }

    [Fact]
    public async Task PostApplicationJsonMapObject()
    {
        CommonHelpers.RecordTest("request-bodies-post-application-json-map-object");
        var sdk = new SDKSDK();

        var obj = Helpers.CreateSimpleObject();

        var res = await sdk.RequestBodies.RequestBodyPostApplicationJsonMapObjAsync(
            new Dictionary<string, SimpleObject>() { { "mapElem1", obj }, { "mapElem2", obj } }
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(2, res.MapObjValue.Json.Count());
        Helpers.AssertSimpleObject(res.MapObjValue.Json["mapElem1"]);
        Helpers.AssertSimpleObject(res.MapObjValue.Json["mapElem2"]);
    }

    [Fact]
    public async Task PostApplicationJsonDeep()
    {
        CommonHelpers.RecordTest("request-bodies-post-application-json-deep");
        var sdk = new SDKSDK();

        var res = await sdk.RequestBodies.RequestBodyPostApplicationJsonDeepAsync(
            Helpers.CreateDeepObject()
        );

        Assert.Equal(200, res.StatusCode);
        Helpers.AssertDeepObject(res.Res.Json);
    }

    [Fact]
    public async Task PostApplicationJsonMultipleJsonFiltered()
    {
        CommonHelpers.RecordTest("request-bodies-post-application-json-multiple-json-filtered");
        var sdk = new SDKSDK();

        var res = await sdk.RequestBodies.RequestBodyPostApplicationJsonMultipleJsonFilteredAsync(
            Helpers.CreateSimpleObject()
        );

        Assert.Equal(200, res.StatusCode);
        Helpers.AssertSimpleObject(res.Res.Json);
    }

    [Fact]
    public async Task PostMultipleContentTypesComponentFiltered()
    {
        CommonHelpers.RecordTest("request-bodies-post-multiple-content-types-component-filtered");
        var sdk = new SDKSDK();

        var res = await sdk.RequestBodies.RequestBodyPostMultipleContentTypesComponentFilteredAsync(
            Helpers.CreateSimpleObject()
        );

        Assert.Equal(200, res.StatusCode);
        Helpers.AssertSimpleObject(res.Res.Json);
    }

    [Fact]
    public async Task PostMultipleContentTypesInlineFiltered()
    {
        CommonHelpers.RecordTest("request-bodies-post-multiple-content-types-inline-filtered");
        var sdk = new SDKSDK();

        var res = await sdk.RequestBodies.RequestBodyPostMultipleContentTypesInlineFilteredAsync(
            new RequestBodyPostMultipleContentTypesInlineFilteredApplicationJSON()
            {
                Bool = true,
                Num = 1.1F,
                Str = "test"
            }
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(3, res.Res.Json.Count());
        Assert.True((bool)res.Res.Json["bool"]);
        Assert.Equal(1.1, (double)res.Res.Json["num"], 0.0001);
        Assert.Equal("test", res.Res.Json["str"]);
    }

    [Fact]
    public async Task PostMultipleContentTypeSplitJson()
    {
        CommonHelpers.RecordTest("request-bodies-post-multiple-content-types-split-json");
        var sdk = new SDKSDK();

        var res = await sdk.RequestBodies.RequestBodyPostMultipleContentTypesSplitJsonAsync(
            new RequestBodyPostMultipleContentTypesSplitApplicationJSON()
            {
                Bool = true,
                Num = 1.1F,
                Str = "test"
            }
        );

        Assert.Equal(200, res.StatusCode);
        Assert.True((bool)res.Res.Json["bool"]);
        Assert.Equal(1.1, (double)res.Res.Json["num"], 0.0001);
        Assert.Equal("test", res.Res.Json["str"]);
    }

    [Fact]
    public async Task PostMutlipleContentTypesSplitMultipart()
    {
        CommonHelpers.RecordTest("request-bodies-post-multiple-content-types-split-multipart");
        var sdk = new SDKSDK();

        var res = await sdk.RequestBodies.RequestBodyPostMultipleContentTypesSplitMultipartAsync(
            new RequestBodyPostMultipleContentTypesSplitMultipartFormData()
            {
                Bool2 = true,
                Num2 = 1.1D,
                Str2 = "test"
            }
        );

        Assert.Equal(200, res.StatusCode);

        Assert.Equal("true", res.Res.Form["bool2"]);
        Assert.Equal("1.1", res.Res.Form["num2"]);
        Assert.Equal("test", res.Res.Form["str2"]);
    }

    [Fact]
    public async Task PostMultipleContentTypesSplitForm()
    {
        CommonHelpers.RecordTest("request-bodies-post-multiple-content-types-split-form");
        var sdk = new SDKSDK();

        var res = await sdk.RequestBodies.RequestBodyPostMultipleContentTypesSplitFormAsync(
            new RequestBodyPostMultipleContentTypesSplitApplicationXWwwFormUrlencoded()
            {
                Bool3 = true,
                Num3 = 1.1D,
                Str3 = "test"
            }
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal("true", res.Res.Form["bool3"]);
        Assert.Equal("1.1", res.Res.Form["num3"]);
        Assert.Equal("test", res.Res.Form["str3"]);
    }

    [Fact]
    public async Task PostMultipleContentTypesSplitJsonWithParam()
    {
        CommonHelpers.RecordTest("request-bodies-post-multiple-content-types-split-json-with-param");

        var sdk = new SDKSDK();

        var requestBody = new RequestBodyPostMultipleContentTypesSplitParamApplicationJSON()
        {
            Bool = true,
            Num = 1.1D,
            Str = "test body"
        };

        var res = await sdk.RequestBodies.RequestBodyPostMultipleContentTypesSplitParamJsonAsync(
            requestBody,
            "test param"
        );

        Assert.Equal(200, res.StatusCode);
        Assert.NotNull(res.Res);
        Assert.True((bool)res.Res.Json["bool"]);
        Assert.Equal(1.1, (double)res.Res.Json["num"]);
        Assert.Equal("test body", res.Res.Json["str"].ToString());
        Assert.Equal("test param", res.Res.Args["paramStr"]);
    }

    [Fact]
    public async Task PostMultipleContentTypesSplitMultiplartWithParam()
    {
        CommonHelpers.RecordTest("request-bodies-post-multiple-content-types-split-multipart-with-param");

        var sdk = new SDKSDK();

        var formData = new RequestBodyPostMultipleContentTypesSplitParamMultipartFormData()
        {
            Bool2 = true,
            Num2 = 1.1D,
            Str2 = "test body"
        };

        var res =
            await sdk.RequestBodies.RequestBodyPostMultipleContentTypesSplitParamMultipartAsync(
                formData,
                "test param"
            );

        Assert.Equal(200, res.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal("true", res.Res.Form["bool2"]);
        Assert.Equal("1.1", res.Res.Form["num2"]);
        Assert.Equal("test body", res.Res.Form["str2"]);
        Assert.Equal("test param", res.Res.Args["paramStr"]);
    }

    [Fact]
    public async Task PostMultipleContentTypesSplitFormWithParam()
    {
        CommonHelpers.RecordTest("request-bodies-post-multiple-content-types-split-form-with-param");

        var sdk = new SDKSDK();

        var requestBody =
            new RequestBodyPostMultipleContentTypesSplitParamApplicationXWwwFormUrlencoded()
            {
                Bool3 = true,
                Num3 = 1.1D,
                Str3 = "test body"
            };

        var res = await sdk.RequestBodies.RequestBodyPostMultipleContentTypesSplitParamFormAsync(
            requestBody,
            "test param"
        );

        Assert.Equal(200, res.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal("true", res.Res.Form["bool3"]);
        Assert.Equal("1.1", res.Res.Form["num3"]);
        Assert.Equal("test body", res.Res.Form["str3"]);
        Assert.Equal("test param", res.Res.Args["paramStr"]);
    }

    [Fact]
    public async Task PutMultipartSimple()
    {
        CommonHelpers.RecordTest("request-bodies-put-multipart-simple");

        var sdk = new SDKSDK();

        var res = await sdk.RequestBodies.RequestBodyPutMultipartSimpleAsync(
            Helpers.CreateSimpleObject()
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal("any", res.Res.Form.Any);
        Assert.Equal("true", res.Res.Form.Bool);
        Assert.Equal("true", res.Res.Form.BoolOpt);
        Assert.Equal("2020-01-01", res.Res.Form.Date);
        Assert.Equal("2020-01-01T00:00:00.0000001Z", res.Res.Form.DateTime);
        Assert.Equal("one", res.Res.Form.Enum);
        Assert.Equal("1.1", res.Res.Form.Float32);
        Assert.Equal("1", res.Res.Form.Int);
        Assert.Equal("1", res.Res.Form.Int32);
        Assert.Equal("1.1", res.Res.Form.Num);
        Assert.Equal("test", res.Res.Form.Str);
        Assert.Equal("testOptional", res.Res.Form.StrOpt);
    }

    [Fact]
    public async Task PutMultipartDeep()
    {
        CommonHelpers.RecordTest("request-bodies-put-multipart-deep");

        var sdk = new SDKSDK();

        var obj = Helpers.CreateDeepObject();
        var res = await sdk.RequestBodies.RequestBodyPutMultipartDeepAsync(obj);

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(Utilities.ToString(obj.Arr), res.Res.Form.Arr);
        Assert.Equal("true", res.Res.Form.Bool);
        Assert.Equal("1", res.Res.Form.Int);
        Assert.Equal(Utilities.ToString(obj.Map), res.Res.Form.Map);
        Assert.Equal("1.1", res.Res.Form.Num);
        Assert.Equal(Utilities.ToString(obj.Obj), res.Res.Form.Obj);
        Assert.Equal("test", res.Res.Form.Str);
    }

    [Fact]
    public async Task PutMultipartFile()
    {
        CommonHelpers.RecordTest("request-bodies-put-multipart-file");

        var sdk = new SDKSDK();

        var data = Helpers.GetData();

        var res = await sdk.RequestBodies.RequestBodyPutMultipartFileAsync(
            new RequestBodyPutMultipartFileRequestBody()
            {
                File = new RequestBodyPutMultipartFileRequestBodyFile()
                {
                    Content = data,
                    File = "testUpload.json"
                }
            }
        );

        Assert.Equal(200, res.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(Encoding.UTF8.GetString(data, 0, data.Length), res.Res.Files["file"]);
    }

    [Fact]
    public async Task PostFormSimple()
    {
        CommonHelpers.RecordTest("request-bodies-post-form-simple");

        var sdk = new SDKSDK();

        var res = await sdk.RequestBodies.RequestBodyPostFormSimpleAsync(
            Helpers.CreateSimpleObject()
        );

        Assert.Equal(200, res.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal("any", res.Res.Form.Any);
        Assert.Equal("true", res.Res.Form.Bool);
        Assert.Equal("true", res.Res.Form.BoolOpt);
        Assert.Equal("2020-01-01", res.Res.Form.Date);
        Assert.Equal("2020-01-01T00:00:00.0000001Z", res.Res.Form.DateTime);
        Assert.Equal("one", res.Res.Form.Enum);
        Assert.Equal("1.1", res.Res.Form.Float32);
        Assert.Equal("1", res.Res.Form.Int);
        Assert.Equal("1", res.Res.Form.Int32);
        Assert.Equal("1.1", res.Res.Form.Num);
        Assert.Equal("test", res.Res.Form.Str);
        Assert.Equal("testOptional", res.Res.Form.StrOpt);
    }

    [Fact]
    public async Task PostFormDeep()
    {
        CommonHelpers.RecordTest("request-bodies-post-form-deep");

        var sdk = new SDKSDK();

        var obj = Helpers.CreateDeepObject();

        var res = await sdk.RequestBodies.RequestBodyPostFormDeepAsync(obj);

        Assert.Equal(200, res.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(Utilities.ToString(obj.Arr), res.Res.Form.Arr);
        Assert.Equal("true", res.Res.Form.Bool);
        Assert.Equal("1", res.Res.Form.Int);
        Assert.Equal(Utilities.ToString(obj.Map), res.Res.Form.Map);
        Assert.Equal("1.1", res.Res.Form.Num);
        Assert.Equal(Utilities.ToString(obj.Obj), res.Res.Form.Obj);
        Assert.Equal("test", res.Res.Form.Str);
    }

    [Fact]
    public async Task PostFormMapPrimitive()
    {
        CommonHelpers.RecordTest("request-bodies-post-form-map-primitive");

        var sdk = new SDKSDK();

        var map = new Dictionary<string, string>()
        {
            { "key1", "value1" },
            { "key2", "value2" },
            { "key3", "value3" }
        };

        var res = await sdk.RequestBodies.RequestBodyPostFormMapPrimitiveAsync(map);

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(map, res.Res.Form);
    }

    [Fact]
    public async Task PutString()
    {
        CommonHelpers.RecordTest("request-bodies-put-string");

        var sdk = new SDKSDK();

        var str = "Hello world";

        var res = await sdk.RequestBodies.RequestBodyPutStringAsync(str);

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(str, res.Res.Data);
    }

    [Fact]
    public async Task PutBytes()
    {
        CommonHelpers.RecordTest("request-bodies-put-bytes");

        var sdk = new SDKSDK();

        var data = Helpers.GetData();

        var res = await sdk.RequestBodies.RequestBodyPutBytesAsync(data);

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(Encoding.UTF8.GetString(data, 0, data.Length), res.Res.Data);
    }

    [Fact]
    public async Task PutStringWithParams()
    {
        CommonHelpers.RecordTest("request-bodies-put-string-with-params");

        var sdk = new SDKSDK();

        var res = await sdk.RequestBodies.RequestBodyPutStringWithParamsAsync(
            "Hello world",
            "test param"
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal("Hello world", res.Res.Data);
        Assert.Equal("test param", res.Res.Args.QueryStringParam);
    }

    [Fact]
    public async Task PutBytesWithParams()
    {
        CommonHelpers.RecordTest("request-bodies-put-bytes-with-params");

        var sdk = new SDKSDK();

        var data = Helpers.GetData();

        var res = await sdk.RequestBodies.RequestBodyPutBytesWithParamsAsync(data, "test param");

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(Encoding.UTF8.GetString(data, 0, data.Length), res.Res.Data);
        Assert.Equal("test param", res.Res.Args.QueryStringParam);
    }

    [Fact]
    public async Task EmptyObject()
    {
        CommonHelpers.RecordTest("request-bodies-post-empty-object");

        var sdk = new SDKSDK();

        var res = await sdk.RequestBodies.RequestBodyPostEmptyObjectAsync(
            new RequestBodyPostEmptyObjectRequestBody()
        );

        Assert.Equal(200, res.StatusCode);
    }

    [Fact]
    public async Task CamelCase()
    {
        CommonHelpers.RecordTest("request-bodies-post-application-json-simple-camel-case");

        var sdk = new SDKSDK();

        var res = await sdk.RequestBodies.RequestBodyPostApplicationJsonSimpleCamelCaseAsync(
            Helpers.CreateSimpleObjectCamelCase()
        );

        Assert.Equal(200, res.StatusCode);
        Helpers.AssertSimpleObjectCamelCase(res.Res.Json);

        var rawResponseString = await res.RawResponse.Content.ReadAsStringAsync();
        Assert.Equal(28, Regex.Matches(rawResponseString, "_val").Count);
    }

    [Fact]
    public async Task RequestBodyReadOnlyInput()
    {
        CommonHelpers.RecordTest("request-bodies-read-only-input");

        var sdk = new SDKSDK();

        var res = await sdk.RequestBodies.RequestBodyReadOnlyInputAsync(new ReadOnlyObjectInput());

        Assert.Equal(200, res.StatusCode);
        Assert.True(res.ReadOnlyObject.Bool);
        Assert.Equal(1.0, res.ReadOnlyObject.Num);
        Assert.Equal("hello", res.ReadOnlyObject.String);
    }

    [Fact]
    public async Task RequestBodyWriteOnlyOutput()
    {
        CommonHelpers.RecordTest("request-bodies-write-only-output");

        var sdk = new SDKSDK();

        var res = await sdk.RequestBodies.RequestBodyWriteOnlyOutputAsync(
            new WriteOnlyObject()
            {
                Bool = true,
                Num = 1.0F,
                String = "hello"
            }
        );

        Assert.Equal(200, res.StatusCode);
    }

    [Fact]
    public async Task RequestBodyWriteOnly()
    {
        CommonHelpers.RecordTest("request-bodies-write-only");

        var sdk = new SDKSDK();

        var res = await sdk.RequestBodies.RequestBodyWriteOnlyAsync(
            new WriteOnlyObject()
            {
                Bool = true,
                Num = 1.0F,
                String = "hello"
            }
        );

        Assert.Equal(200, res.StatusCode);
        Assert.True(res.ReadOnlyObject.Bool);
        Assert.Equal(1.0, res.ReadOnlyObject.Num);
        Assert.Equal("hello", res.ReadOnlyObject.String);
    }

    [Fact]
    public async Task RequestBodyReadAndWrite()
    {
        CommonHelpers.RecordTest("request-bodies-read-and-write");

        var sdk = new SDKSDK();

        var res = await sdk.RequestBodies.RequestBodyReadAndWriteAsync(
            new ReadWriteObjectInput()
            {
                Num1 = 1,
                Num2 = 2,
                Num3 = 4,
            }
        );

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(4, res.ReadWriteObject.Num3);
        Assert.Equal(7, res.ReadWriteObject.Sum);
    }

    [Fact]
    public async Task RequestBodyPostComplexNumberTypesAsync()
    {
        CommonHelpers.RecordTest("request-bodies-complex-number-types");

        var sdk = new SDKSDK();

        var req = new RequestBodyPostComplexNumberTypesRequest()
        {
            ComplexNumberTypes = new ComplexNumberTypes()
            {
                Bigint = BigInteger.Parse("9007199254740991"),
                BigintStr = BigInteger.Parse("9223372036854775807"),
                Decimal = 3.141592653589793M,
                DecimalStr = 3.141592653589793238462643383279M
            },
            PathBigInt = BigInteger.Parse("9007199254740991"),
            PathBigIntStr = BigInteger.Parse("9223372036854775807"),
            PathDecimal = 3.141592653589793M,
            PathDecimalStr = 3.141592653589793238462643383279M,
            QueryBigInt = BigInteger.Parse("9007199254740991"),
            QueryBigIntStr = BigInteger.Parse("9223372036854775807"),
            QueryDecimal = 3.141592653589793M,
            QueryDecimalStr = 3.141592653589793238462643383279M
        };

        var res = await sdk.RequestBodies.RequestBodyPostComplexNumberTypesAsync(req);

        Assert.Equal(200, res.StatusCode);
        Assert.Equal(
            req.ComplexNumberTypes.Bigint,
            res.RequestBodyPostComplexNumberTypes200ApplicationJSONObject.Json.Bigint
        );
        Assert.Equal(
            req.ComplexNumberTypes.BigintStr,
            res.RequestBodyPostComplexNumberTypes200ApplicationJSONObject.Json.BigintStr
        );
        Assert.Equal(
            req.ComplexNumberTypes.Decimal,
            res.RequestBodyPostComplexNumberTypes200ApplicationJSONObject.Json.Decimal
        );
        Assert.Equal(
            req.ComplexNumberTypes.DecimalStr,
            res.RequestBodyPostComplexNumberTypes200ApplicationJSONObject.Json.DecimalStr
        );
        Assert.Equal(
            "http://localhost:35123/anything/requestBodies/post/9007199254740991/9223372036854775807/3.141592653589793/3.1415926535897932384626433833/complex-number-types?queryBigInt=9007199254740991&queryBigIntStr=9223372036854775807&queryDecimal=3.141592653589793&queryDecimalStr=3.1415926535897932384626433833",
            res.RequestBodyPostComplexNumberTypes200ApplicationJSONObject.Url
        );
    }
}