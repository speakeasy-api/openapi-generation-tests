
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Net.Http;
using System.Threading.Tasks;
using Xunit;
using SDK;

public class ServersShould
{
    [Fact]
    public async Task SelectGlobalServerValid()
    {
        CommonHelpers.RecordTest("servers-select-global-server-valid");
        var sdk = new SDKSDK(serverUrl: SDKSDK.ServerList[0]);

        var res = await sdk.Servers.SelectGlobalServerAsync();
        Assert.NotNull(res);
        Assert.Equal(200, res.StatusCode);
    }

    [Fact]
    public async Task SelectGlobalServerBroken()
    {
        CommonHelpers.RecordTest("servers-select-global-server-broken");
        var sdk = new SDKSDK(serverUrl: SDKSDK.ServerList[1]);

        await Assert.ThrowsAsync<HttpRequestException>(
            async () => await sdk.Servers.SelectGlobalServerAsync()
        );
    }

    [Fact]
    public async Task SelectServerWithIDDefault()
    {
        CommonHelpers.RecordTest("servers-select-server-with-id-default");
        var sdk = new SDKSDK();

        var res = await sdk.Servers.SelectServerWithIDAsync();
        Assert.Equal(200, res.StatusCode);
    }

    [Fact]
    public async Task SelectServerWithIDValid()
    {
        CommonHelpers.RecordTest("servers-select-server-with-id-valid");

        var sdk = new SDKSDK();

        var res = await sdk.Servers.SelectServerWithIDAsync(
            serverUrl: ServersSDK.SelectServerWithIDSERVERS[
                ServersSDK.SelectServerWithIDServers.Valid
            ]
        );

        Assert.Equal(200, res.StatusCode);
    }

    [Fact]
    public async Task SelectServerWithIDBroken()
    {
        CommonHelpers.RecordTest("servers-select-server-with-id-broken");

        var sdk = new SDKSDK();

        await Assert.ThrowsAsync<HttpRequestException>(
            async () =>
                await sdk.Servers.SelectServerWithIDAsync(
                    serverUrl: ServersSDK.SelectServerWithIDSERVERS[
                        ServersSDK.SelectServerWithIDServers.Broken
                    ]
                )
        );
    }
}