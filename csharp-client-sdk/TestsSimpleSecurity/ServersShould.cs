
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Net.Http;
using System.Threading.Tasks;
using System.Collections.Generic;
using Xunit;
using Company.Product.Feature.Subnamespace;

public class ServersShould
{
    [Fact]
    public async Task SelectGlobalServerByNameDefault()
    {
        CommonHelpers.RecordTest("servers-select-global-server-by-name-default");

        var sdk = new SDK(apiKeyAuth: "token");

        var res = await sdk.Servers.SelectGlobalServerAsync();
        Assert.NotNull(res);
        Assert.Equal(200, res.StatusCode);
    }

    [Fact]
    public async Task SelectGlobalServerByNameValid()
    {
        CommonHelpers.RecordTest("servers-select-global-server-by-name-valid");

        var sdk = new SDK(apiKeyAuth:"token", server: SDKConfig.Server.Default);

        var res = await sdk.Servers.SelectGlobalServerAsync();
        Assert.NotNull(res);
        Assert.Equal(200, res.StatusCode);
    }

    [Fact]
    public void SelectGlobalServerByNameInValid()
    {
        CommonHelpers.RecordTest("servers-select-global-server-by-name-invalid");

        // N.A. - Ensured by Server Enum
    }

    [Fact]
    public async Task SelectGlobalServerByNameBroken()
    {
        CommonHelpers.RecordTest("servers-select-global-server-by-name-broken");

        var sdk = new SDK(apiKeyAuth: "token", server: SDKConfig.Server.Broken);

        await Assert.ThrowsAsync<HttpRequestException>(
            async () => await sdk.Servers.SelectGlobalServerAsync()
        );
    }

    [Fact]
    public async Task SelectGlobalServerByNameWithTemplatesDefaults()
    {
        CommonHelpers.RecordTest("servers-select-global-server-by-name-with-templates-defaults");

        var sdk = new SDK(apiKeyAuth: "token", server: SDKConfig.Server.Templated);

        var res = await sdk.Servers.SelectGlobalServerAsync();
        Assert.NotNull(res);
        Assert.Equal(200, res.StatusCode);
    }

    [Fact]
    public async Task SelectGlobalServerByNameWithTemplatesValid()
    {
        CommonHelpers.RecordTest("servers-select-global-server-by-name-with-templates-valid");

        var sdk = new SDK(
            apiKeyAuth: "token",
            server: SDKConfig.Server.Templated,
            hostname: "127.0.0.1",
            port: "35123"
        );

        Assert.Equal("http://127.0.0.1:35123", sdk.SDKConfiguration.GetTemplatedServerUrl());

        var res = await sdk.Servers.SelectGlobalServerAsync();
        Assert.NotNull(res);
        Assert.Equal(200, res.StatusCode);
    }

    [Fact]
    public async Task SelectGlobalServerByNameWithTemplatesBroken()
    {
        CommonHelpers.RecordTest("servers-select-global-server-by-name-with-templates-broken");

        var sdk = new SDK(
            apiKeyAuth: "token",
            server: SDKConfig.Server.Templated,
            hostname: "broken",
            port: "12345"
        );

        Assert.Equal("http://broken:12345", sdk.SDKConfiguration.GetTemplatedServerUrl());

        await Assert.ThrowsAsync<HttpRequestException>(
            async () => await sdk.Servers.SelectGlobalServerAsync()
        );
    }
}
