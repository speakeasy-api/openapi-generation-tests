//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Threading.Tasks;
using Openapi;
using Openapi.Models.Errors;
using Openapi.Models.Operations;
using Xunit;
using System.Net;

public class ErrorsShould
{
    [Fact]
    public async Task TestStatusGetError_DefaultErrorCodes()
    {
        CommonHelpers.RecordTest("errors-status-get-error-default-error-codes");
        var sdk = new SDK();

        var ex = await Assert.ThrowsAsync<SDKException>(() => sdk.Errors.StatusGetErrorAsync(400));
        Assert.Equal(HttpStatusCode.BadRequest, ex.Response.StatusCode);

        var ex2 = await Assert.ThrowsAsync<SDKException>(() => sdk.Errors.StatusGetErrorAsync(500));
        Assert.Equal(HttpStatusCode.InternalServerError, ex2.Response.StatusCode);
    }

    [Fact]
    public async Task TestStatusGetError_300_NonError()
    {
        CommonHelpers.RecordTest("errors-status-get-error300-non-error");
        var sdk = new SDK();

        var res = await sdk.Errors.StatusGetErrorAsync(300);
        Assert.Equal(HttpStatusCode.Ambiguous, res.HttpMeta.Response.StatusCode);
    }

    [Fact]
    public async Task TestStatusGetErrorXSpeakeasyErrors()
    {
        CommonHelpers.RecordTest("errors-status-get-error-x-speakeasy-errors");
        var sdk = new SDK();

        var ex = await Assert.ThrowsAsync<SDKException>(
            () => sdk.Errors.StatusGetXSpeakeasyErrorsAsync(400)
        );
        Assert.Equal("API error occurred: Status BadRequest", ex.ToString());
        Assert.Equal(HttpStatusCode.BadRequest, ex.Response.StatusCode);

        var ex2 = await Assert.ThrowsAsync<SDKException>(
            () => sdk.Errors.StatusGetXSpeakeasyErrorsAsync(401)
        );
        Assert.Equal("API error occurred: Status Unauthorized", ex2.ToString());
        Assert.Equal(HttpStatusCode.Unauthorized, ex2.Response.StatusCode);

        var ex3 = await Assert.ThrowsAsync<SDKException>(
            () => sdk.Errors.StatusGetXSpeakeasyErrorsAsync(402)
        );
        Assert.Equal("API error occurred: Status PaymentRequired", ex3.ToString());
        Assert.Equal(HttpStatusCode.PaymentRequired, ex3.Response.StatusCode);

        var ex4 = await Assert.ThrowsAsync<Openapi.Models.Errors.Error>(
            () => sdk.Errors.StatusGetXSpeakeasyErrorsAsync(500)
        );
        Assert.Equal("an error occurred", ex4.Message);
        Assert.Equal("500", ex4.Code);

        var ex5 = await Assert.ThrowsAsync<StatusGetXSpeakeasyErrorsResponseBody>(
            () => sdk.Errors.StatusGetXSpeakeasyErrorsAsync(501)
        );
        Assert.Equal("501", ex5.Code);
        Assert.Equal(HttpStatusCode.NotImplemented, ex5.HttpMeta.Response.StatusCode);
    }

    [Fact]
    public async Task TestConnectionErrorGet()
    {
        CommonHelpers.RecordTest("errors-connection-error");
        var sdk = new SDK();

        var ex = await Assert.ThrowsAsync<System.Net.Http.HttpRequestException>(
            () => sdk.Errors.ConnectionErrorGetAsync()
        );
        Assert.Equal("Name or service not known (somebrokenapi.broken:80)", ex.Message);
    }

    [Fact]
    public async Task TestUnionOfErrors()
    {
        CommonHelpers.RecordTest("errors-union-of-errors");
        var sdk = new Openapi.SDK();

        var req1 = ErrorUnionPostRequestBody.CreateErrorType1RequestBody(
            new ErrorType1RequestBody { Error = "Error1" }
        );
        var ex1 = await Assert.ThrowsAsync<ErrorType1>(() => sdk.Errors.ErrorUnionPostAsync(req1));
        Assert.Equal(HttpStatusCode.InternalServerError, ex1.HttpMeta.Response.StatusCode);
        Assert.Equal("Error1", ex1.Error);

        var req2 = ErrorUnionPostRequestBody.CreateErrorType2RequestBody(
            new ErrorType2RequestBody { ErrorType2Message = new ErrorType2Message { Message = "Error2" } }
        );
        var ex2 = await Assert.ThrowsAsync<ErrorType2>(() => sdk.Errors.ErrorUnionPostAsync(req2));
        Assert.Equal(HttpStatusCode.InternalServerError, ex2.HttpMeta.Response.StatusCode);
        Assert.Equal("Error2", ex2.Error.Message);
    }

    [Fact]
    public async Task TestDiscriminatedUnionOfErrors()
    {
        CommonHelpers.RecordTest("errors-union-of-errors-discriminated");
        var sdk = new Openapi.SDK();

        var req1 = ErrorUnionDiscriminatedPostRequestBody.CreateTaggedError1RequestBody(
            new TaggedError1RequestBody
            {
                Tag = "tag1",
                Error = "Error1"
            }
        );
        var ex1 = await Assert.ThrowsAsync<TaggedError1>(
            () => sdk.Errors.ErrorUnionDiscriminatedPostAsync(req1)
        );
        Assert.Equal(HttpStatusCode.BadRequest, ex1.HttpMeta.Response.StatusCode);
        Assert.Equal(Tag.Tag1, ex1.Tag);
        Assert.Equal("Error1", ex1.Error);

        var req2 = ErrorUnionDiscriminatedPostRequestBody.CreateTaggedError2RequestBody(
            new TaggedError2RequestBody
            {
                Tag = "tag2",
                TaggedError2Message = new TaggedError2Message { Message = "Error2" }
            }
        );
        var ex2 = await Assert.ThrowsAsync<TaggedError2>(
            () => sdk.Errors.ErrorUnionDiscriminatedPostAsync(req2)
        );
        Assert.Equal(HttpStatusCode.BadRequest, ex2.HttpMeta.Response.StatusCode);
        Assert.Equal("tag2", ex2.Tag);
        Assert.Equal("Error2", ex2.Error.Message);
    }
}
