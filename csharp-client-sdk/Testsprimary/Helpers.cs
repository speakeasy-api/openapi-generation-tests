//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Xunit;
using Openapi.Models.Shared;
using Openapi.Utils;
using NodaTime;

public class Helpers
{
    public static SimpleObject CreateSimpleObject() =>
        new SimpleObject()
        {
            Any = "any",
            Bool = true,
            BoolOpt = true,
            Date = LocalDate.FromDateTime(DateTime.Parse("2020-01-01")),
            DateTime = DateTime.Parse("2020-01-01T00:00:00.0000001Z").ToUniversalTime(),
            Enum = Openapi.Models.Shared.Enum.One,
            Float32 = 1.1F,
            Int32 = 1,
            Int32Enum = Int32Enum.FiftyFive,
            IntEnum = IntEnum.Two,
            IntOptNull = null,
            Int = 1,
            Num = 1.1D,
            NumOptNull = null,
            Str = "test",
            StrOpt = "testOptional"
        };

    public static void AssertSimpleObject(SimpleObject a)
    {
        var e = CreateSimpleObject();
        Assert.Equal(e.Any, a.Any);
        Assert.Equal(e.Bool, a.Bool);
        Assert.Equal(e.BoolOpt, a.BoolOpt);
        Assert.Equal(e.Date, a.Date);
        Assert.Equal(e.DateTime.ToUniversalTime(), a.DateTime.ToUniversalTime());
        Assert.Equal(e.Enum, a.Enum);
        Assert.Equal(e.Float32, a.Float32);
        Assert.Equal(e.Int32, a.Int32);
        Assert.Equal(e.IntOptNull, a.IntOptNull);
        Assert.Equal(e.Int, a.Int);
        Assert.Equal(e.Num, a.Num);
        Assert.Equal(e.NumOptNull, a.NumOptNull);
        Assert.Equal(e.Str, a.Str);
        Assert.Equal(e.StrOpt, a.StrOpt);
    }

    public static SimpleObjectCamelCase CreateSimpleObjectCamelCase() =>
        new SimpleObjectCamelCase()
        {
            AnyVal = "any",
            BoolVal = true,
            BoolOptVal = true,
            DateVal = LocalDate.FromDateTime(DateTime.Parse("2020-01-01")),
            DateTimeVal = DateTime.Parse("2020-01-01T00:00:00.0000001Z"),
            EnumVal = Openapi.Models.Shared.Enum.One,
            Float32Val = 1.1F,
            Int32Val = 1,
            Int32EnumVal = Int32EnumVal.FiftyFive,
            IntEnumVal = IntEnumVal.Two,
            IntOptNullVal = null,
            IntVal = 1,
            NumVal = 1.1D,
            NumOptNullVal = null,
            StrVal = "test",
            StrOptVal = "test_optional"
        };

    public static void AssertSimpleObjectCamelCase(SimpleObjectCamelCase a)
    {
        var e = CreateSimpleObjectCamelCase();
        Assert.Equal(e.AnyVal, a.AnyVal);
        Assert.Equal(e.BoolVal, a.BoolVal);
        Assert.Equal(e.BoolOptVal, a.BoolOptVal);
        Assert.Equal(e.DateVal, a.DateVal);
        Assert.Equal(e.DateTimeVal.ToUniversalTime(), a.DateTimeVal.ToUniversalTime());
        Assert.Equal(e.EnumVal, a.EnumVal);
        Assert.Equal(e.Float32Val, a.Float32Val);
        Assert.Equal(e.Int32Val, a.Int32Val);
        Assert.Null(a.IntOptNullVal);
        Assert.Equal(e.IntVal, a.IntVal);
        Assert.Equal(e.NumVal, a.NumVal);
        Assert.Null(a.NumOptNullVal);
        Assert.Equal(e.StrVal, a.StrVal);
        Assert.Equal(e.StrOptVal, a.StrOptVal);
    }

    public static byte[] GetData() =>
        Encoding.Unicode.GetBytes(
            "{\r  \"some\": \"json\",\r  \"to\": \"be\",\r  \"uploaded\": \"in\",\r  \"a\": \"file\"\r}\r"
        );

    public static async Task<string> GetSerializedBodyJson(object request, string format = "")
    {
        var serializedBody = RequestBodySerializer.Serialize(request, "Request", "json", false, false, format);
        return await serializedBody.ReadAsStringAsync();
    }

    public static DeepObject CreateDeepObject() =>
        new DeepObject()
        {
            Any = Any.CreateSimpleObject(CreateSimpleObject()),
            Arr = new List<SimpleObject>() { CreateSimpleObject(), CreateSimpleObject() },
            Bool = true,
            Int = 1,
            Map = new Dictionary<string, SimpleObject>() { { "key", CreateSimpleObject() } },
            Num = 1.1D,
            Obj = CreateSimpleObject(),
            Str = "test"
        };

    public static void AssertDeepObject(DeepObject a)
    {
        AssertSimpleObject(a.Any.SimpleObject);

        Assert.Equal(2, a.Arr.Count());
        AssertSimpleObject(a.Arr.ToList().First());
        AssertSimpleObject(a.Arr.ToList().Last());

        Assert.True(a.Bool);
        Assert.Equal(1, a.Int);

        Assert.Single(a.Map);
        AssertSimpleObject(a.Map["key"]);

        Assert.Equal(1.1D, a.Num);
        AssertSimpleObject(a.Obj);
        Assert.Equal("test", a.Str);
    }


    public static DeepObjectCamelCase CreateDeepObjectCamelCase() =>
        new DeepObjectCamelCase()
        {
            AnyVal = AnyVal.CreateSimpleObjectCamelCase(CreateSimpleObjectCamelCase()),
            ArrVal = new List<SimpleObjectCamelCase>() { CreateSimpleObjectCamelCase(), CreateSimpleObjectCamelCase() },
            BoolVal = true,
            IntVal = 1,
            MapVal = new Dictionary<string, SimpleObjectCamelCase>() { { "key", CreateSimpleObjectCamelCase() } },
            NumVal = 1.1D,
            ObjVal = CreateSimpleObjectCamelCase(),
            StrVal = "test"
        };

    public static void AssertDeepObjectCamelCase(DeepObjectCamelCase a)
    {
        AssertSimpleObjectCamelCase(a.AnyVal.SimpleObjectCamelCase);

        Assert.Equal(2, a.ArrVal.Count());
        AssertSimpleObjectCamelCase(a.ArrVal.ToList().First());
        AssertSimpleObjectCamelCase(a.ArrVal.ToList().Last());

        Assert.True(a.BoolVal);
        Assert.Equal(1, a.IntVal);

        Assert.Single(a.MapVal);
        AssertSimpleObjectCamelCase(a.MapVal["key"]);

        Assert.Equal(1.1D, a.NumVal);
        AssertSimpleObjectCamelCase(a.ObjVal);
        Assert.Equal("test", a.StrVal);
    }

    public static void AssertDictEqual(Dictionary<string, object> a, Dictionary<string, object> b)
    {
        Assert.Equal(a.Count, b.Count);

        foreach (var pair in a)
        {
            Assert.True(b.TryGetValue(pair .Key, out var value));

            if (pair.Value is Dictionary<string, object> nestedA && value is Dictionary<string, object> nestedB)
            {
                AssertDictEqual(nestedA, nestedB);
            }
            else
            {
                Assert.Equal(pair.Value, value);
            }
        }
    }
}
