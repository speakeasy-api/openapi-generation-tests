//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Xunit;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web;
using System.Threading.Tasks;
using Openapi;
using Openapi.Models.Operations;
using Openapi.Models.Shared;
using Openapi.Utils;

public class PaginationShould
{

    internal class PaginationLogEntry
    {
        public Uri RequestUri { get; set; }
        public string RequestBody { get; set; }
        public HttpStatusCode StatusCode { get; set; }
    }

    internal class PaginationRecorderClient : SpeakeasyHttpClient
    {
        private List<PaginationLogEntry> log;

        public PaginationRecorderClient(List<PaginationLogEntry> log)
        {
            this.log = log ?? throw new ArgumentNullException(nameof(log));
        }

        public override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage httpRequest)
        {
            var requestBody = "";
            if (httpRequest.Content != null)
            {
                requestBody = await httpRequest.Content.ReadAsStringAsync();
            }

            var httpResponse = await base.SendAsync(httpRequest);
            var statusCode = httpResponse.StatusCode;

            log.Add(new PaginationLogEntry
            {
                RequestUri = httpRequest.RequestUri,
                RequestBody = requestBody,
                StatusCode = statusCode,
            });

            return httpResponse;
        }
    }

    [Fact]
    public async Task PaginationLimitOffsetPageParams()
    {
        CommonHelpers.RecordTest("pagination-limit-offset-page-params");
        var sdk = new SDK();

        var serverLimit = 20;

        var res = await sdk.Pagination.PaginationLimitOffsetPageParamsAsync(page: 1);

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(res.Res.ResultArray.Count(), serverLimit);

        var nextRes = await res.Next();
        Assert.Equal(HttpStatusCode.OK, nextRes.HttpMeta.Response.StatusCode);
        Assert.NotNull(nextRes.Res);
        Assert.Empty(nextRes.Res.ResultArray);

        var nullRes = await nextRes.Next();
        Assert.Null(nullRes);
    }

    [Fact]
    public async Task PaginationLimitOffsetNilPageParams()
    {
        CommonHelpers.RecordTest("pagination-limit-offset-nil-page-params");

        var sdk = new SDK();
        var available = 20;
        var res = await sdk.Pagination.PaginationLimitOffsetOptionalPageParamsAsync();

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(available, res.Res.ResultArray.Count());

        res = await res.Next();
        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Empty(res.Res.ResultArray);

        res = await res.Next();
        Assert.Null(res);
    }

    [Fact]
    public async Task PaginationLimitOffsetZeroPageParams()
    {
        CommonHelpers.RecordTest("pagination-limit-offset-zero-page-params");

        var sdk = new SDK();
        var available = 20;
        var res = await sdk.Pagination.PaginationLimitOffsetOptionalPageParamsAsync(page: 0);

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(available, res.Res.ResultArray.Count());

        var queryParams = HttpUtility.ParseQueryString(res.HttpMeta.Request.RequestUri.Query);
        Assert.Equal("0", queryParams.Get("page"));

        res = await res.Next();
        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(available, res.Res.ResultArray.Count());

        queryParams = HttpUtility.ParseQueryString(res.HttpMeta.Request.RequestUri.Query);
        Assert.Equal("1", queryParams.Get("page"));
    }

    [Fact]
    public async Task PaginationLimitOffsetPageBody()
    {
        CommonHelpers.RecordTest("pagination-limit-offset-page-body");
        var sdk = new SDK();
        var limit = 15;

        var res = await sdk.Pagination.PaginationLimitOffsetPageBodyAsync(request: new LimitOffsetConfig{Page = 1, Limit = limit});

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(res.Res.ResultArray.Count(), limit);

        var nextRes = await res.Next();
        Assert.Equal(HttpStatusCode.OK, nextRes.HttpMeta.Response.StatusCode);
        Assert.NotNull(nextRes.Res);
        Assert.True(nextRes.Res.ResultArray.Count() < limit, "result count is expected to be less than the limit");

        var nullRes = await nextRes.Next();
        Assert.Null(nullRes);
    }

    [Fact]
    public async Task PaginationLimitOffsetDeepOutputsPageBody()
    {
        CommonHelpers.RecordTest("pagination-limit-offset-deep-outputs-page-body");
        var sdk = new SDK();
        var limit = 15;

        var res = await sdk.Pagination.PaginationLimitOffsetDeepOutputsPageBodyAsync(request: new LimitOffsetConfig{Page = 1, Limit = limit});

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(res.Res.ResultArray.Count(), limit);

        var nextRes = await res.Next();
        Assert.Equal(HttpStatusCode.OK, nextRes.HttpMeta.Response.StatusCode);
        Assert.NotNull(nextRes.Res);
        Assert.True(nextRes.Res.ResultArray.Count() < limit, "result count is expected to be less than the limit");

        var nullRes = await nextRes.Next();
        Assert.Null(nullRes);
    }

    [Fact]
    public async Task PaginationLimitOffsetOffsetParams()
    {
        CommonHelpers.RecordTest("pagination-limit-offset-offset-params");
        var sdk = new SDK();
        var limit = 15;

        var res = await sdk.Pagination.PaginationLimitOffsetOffsetParamsAsync(limit: limit, offset: 0);

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(res.Res.ResultArray.Count(), limit);

        var nextRes = await res.Next();
        Assert.Equal(HttpStatusCode.OK, nextRes.HttpMeta.Response.StatusCode);
        Assert.NotNull(nextRes.Res);
        Assert.True(nextRes.Res.ResultArray.Count() < limit, "result count is expected to be less than the limit");

        var nullRes = await nextRes.Next();
        Assert.Null(nullRes);
    }

    [Fact]
    public async Task PaginationLimitOffsetNilOffsetParams()
    {
        CommonHelpers.RecordTest("pagination-limit-offset-nil-offset-params");
        var sdk = new SDK();
        var available = 20;
        var defaultLimit = 20;

        var res = await sdk.Pagination.PaginationLimitOffsetOffsetParamsAsync();

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(res.Res.ResultArray.Count(), defaultLimit);

        var nextRes = await res.Next();
        Assert.Equal(HttpStatusCode.OK, nextRes.HttpMeta.Response.StatusCode);
        Assert.NotNull(nextRes.Res);
        Assert.Equal(nextRes.Res.ResultArray.Count(), available - defaultLimit);

        var nullRes = await nextRes.Next();
        Assert.Null(nullRes);
    }

    [Fact]
    public async Task PaginationLimitOffsetOffsetBody()
    {
        CommonHelpers.RecordTest("pagination-limit-offset-offset-body");
        var sdk = new SDK();
        var limit = 15;

        var res = await sdk.Pagination.PaginationLimitOffsetOffsetBodyAsync(request: new LimitOffsetConfig{Limit = limit, Offset = 0});

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(limit, res.Res.ResultArray.Count());

        var nextRes = await res.Next();
        Assert.Equal(HttpStatusCode.OK, nextRes.HttpMeta.Response.StatusCode);
        Assert.NotNull(nextRes.Res);
        Assert.True(nextRes.Res.ResultArray.Count() < limit, "result count is expected to be less than the limit");

        var nullRes = await nextRes.Next();
        Assert.Null(nullRes);
    }

    [Fact]
    public async Task PaginationLimitOffsetDefaultOffsetBody()
    {
        CommonHelpers.RecordTest("pagination-limit-offset-default-offset-body");

        var available = 20;
        var defaultOffset = 10;
        var log = new List<PaginationLogEntry>{};
        var sdk = new SDK(client: new PaginationRecorderClient(log));

        var res = await sdk.Pagination.PaginationLimitOffsetDefaultOffsetBodyAsync(
            new LimitOffsetConfigWithDefaults{}
        );

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(res.Res.ResultArray.Count(), available-defaultOffset);

        Assert.Equal(1, log.Count);
        var requestBody = log[0].RequestBody;
        Assert.NotNull(requestBody);
        Assert.Contains("\"limit\":15", requestBody);
        Assert.Contains("\"offset\":10", requestBody);
    }

    [Fact]
    public async Task PaginationLimitOffsetDefaultOffsetParams()
    {
        CommonHelpers.RecordTest("pagination-limit-offset-default-offset-params");

        var sdk = new SDK();
        var res = await sdk.Pagination.PaginationLimitOffsetDefaultOffsetParamsAsync();
        var queryParams = HttpUtility.ParseQueryString(res.HttpMeta.Request.RequestUri.Query);

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.Equal("15", queryParams.Get("limit"));
        Assert.Equal("10", queryParams.Get("offset"));
    }

    [Fact]
    public async Task PaginationCursorParams()
    {
        CommonHelpers.RecordTest("pagination-cursor-params");
        var sdk = new SDK();
        var limit = 15;

        var res = await sdk.Pagination.PaginationCursorParamsAsync(cursor: -1);

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(res.Res.ResultArray.Count(), limit);

        var nextRes = await res.Next();
        Assert.Equal(HttpStatusCode.OK, nextRes.HttpMeta.Response.StatusCode);
        Assert.NotNull(nextRes.Res);
        Assert.True(nextRes.Res.ResultArray.Count() < limit, "result count is expected to be less than the limit");

        var penultimateRes = await nextRes.Next();
        Assert.Equal(HttpStatusCode.OK, penultimateRes.HttpMeta.Response.StatusCode);
        Assert.NotNull(penultimateRes.Res);
        Assert.Empty(penultimateRes.Res.ResultArray);


        var nullRes = await penultimateRes.Next();
        Assert.Null(nullRes);
    }

    [Fact]
    public async Task PaginationCursorBody()
    {
        CommonHelpers.RecordTest("pagination-cursor-body");
        var sdk = new SDK();
        var limit = 15;

        var res = await sdk.Pagination.PaginationCursorBodyAsync(request: new PaginationCursorBodyRequestBody{Cursor = -1});

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(res.Res.ResultArray.Count(), limit);

        var nextRes = await res.Next();
        Assert.Equal(HttpStatusCode.OK, nextRes.HttpMeta.Response.StatusCode);
        Assert.NotNull(nextRes.Res);
        Assert.True(nextRes.Res.ResultArray.Count() < limit, "result count is expected to be less than the limit");

        var penultimateRes = await nextRes.Next();
        Assert.Equal(HttpStatusCode.OK, penultimateRes.HttpMeta.Response.StatusCode);
        Assert.NotNull(penultimateRes.Res);
        Assert.Empty(penultimateRes.Res.ResultArray);


        var nullRes = await penultimateRes.Next();
        Assert.Null(nullRes);
    }

    [Fact]
    public async Task PaginationCursorNonNumeric()
    {
        CommonHelpers.RecordTest("pagination-cursor-non-numeric");
        var sdk = new SDK();

        var res = await sdk.Pagination.PaginationCursorNonNumericAsync();

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(15, res.Res.ResultArray.Count());

        var nextRes = await res.Next();
        Assert.Equal(HttpStatusCode.OK, nextRes.HttpMeta.Response.StatusCode);
        Assert.NotNull(nextRes.Res);
        Assert.Equal(5, nextRes.Res.ResultArray.Count());

        var penultimateRes = await nextRes.Next();
        Assert.Equal(HttpStatusCode.OK, penultimateRes.HttpMeta.Response.StatusCode);
        Assert.NotNull(penultimateRes.Res);
        Assert.Empty(penultimateRes.Res.ResultArray);

        var nullRes = await penultimateRes.Next();
        Assert.Null(nullRes);
    }

    [Fact]
    public async Task PaginationWithRetriesAsync()
    {
        CommonHelpers.RecordTest("pagination-with-retries");

        var available = 20;
        var count = 0;
        var log = new List<PaginationLogEntry>{};
        var sdk = new SDK(client: new PaginationRecorderClient(log));

        var res = await sdk.Pagination.PaginationWithRetriesAsync(
          requestId: System.Guid.NewGuid().ToString(),
          faultSettings: "{\"error_code\": 503, \"error_count\": 3}"
        );

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        count += res.Res.ResultArray.Count();

        res = await res.Next();
        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        count += res.Res.ResultArray.Count();

        res = await res.Next();
        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Empty(res.Res.ResultArray);

        res = await res.Next();
        Assert.Null(res);

        Assert.Equal(available, count);

        Assert.Equal(6, log.Count);
        for (var i = 0; i < 3; i++)
        {
            Assert.Equal("", log[i].RequestUri.Query);
            Assert.Equal(HttpStatusCode.ServiceUnavailable, log[i].StatusCode);
        }
        Assert.Equal(HttpStatusCode.OK, log[3].StatusCode);
        Assert.Equal("", log[3].RequestUri.Query);
        Assert.Equal(HttpStatusCode.OK, log[4].StatusCode);
        Assert.Equal("?cursor=14", log[4].RequestUri.Query);
        Assert.Equal(HttpStatusCode.OK, log[5].StatusCode);
        Assert.Equal("?cursor=19", log[5].RequestUri.Query);
    }

    [Fact]
    public async Task PaginationBodyWrappedRequest()
    {
        CommonHelpers.RecordTest("pagination-body-wrapped-request");

        var sdk = new SDK();

        var available = 20;
        var limit = 15;

        var res = await sdk.Pagination.PaginationBodyWrappedRequestAsync(
          request: new PaginationBodyWrappedRequestRequest
          {
              LimitOffsetConfig = new LimitOffsetConfig
              {
                  Page = 1,
                  Limit = limit
              }
          }
        );

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(limit, res.Res.ResultArray.Count());

        res = await res.Next();
        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(available-limit, res.Res.ResultArray.Count());

        res = await res.Next();
        Assert.Null(res);
    }

    [Fact]
    public async Task PaginationBodyFlattenedWithSecurity()
    {
        CommonHelpers.RecordTest("pagination-body-flattened-with-security");

        var sdk = new SDK();
        var available = 20;
        var limit = 15;

        var res = await sdk.Pagination.PaginationBodyFlattenedWithSecurityAsync(
            new PaginationBodyFlattenedWithSecuritySecurity
            {
                PaginationAuth = "test"
            },
            limit,
            0
        );

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(limit, res.Res.ResultArray.Count());

        res = await res.Next();
        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(available-limit, res.Res.ResultArray.Count());

        res = await res.Next();
        Assert.Null(res);
    }

    [Fact]
    public async Task PaginationBodyFlattenedOptionalSecurity()
    {
        CommonHelpers.RecordTest("pagination-body-flattened-optional-security");

        var sdk = new SDK();
        var available = 20;
        var limit = 15;

        var res = await sdk.Pagination.PaginationBodyFlattenedOptionalSecurityAsync(
            limit,
            0,
            new PaginationBodyFlattenedOptionalSecuritySecurity
            {
                PaginationAuth = "test"
            }
        );

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(limit, res.Res.ResultArray.Count());

        res = await res.Next();
        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(available-limit, res.Res.ResultArray.Count());

        res = await res.Next();
        Assert.Null(res);
    }

    [Fact]
    public async Task PaginationAmbiguousInput()
    {
        CommonHelpers.RecordTest("pagination-ambiguous-input");

        var sdk = new SDK();

        var available = 20;
        var limit = 15;
        var cursor = available - limit - 1;

        var res = await sdk.Pagination.PaginationAmbiguousInputAsync(
            requestBody: new PaginationAmbiguousInputRequestBody
            {
                Cursor = cursor,
            },
            cursor: 100
        );

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(limit, res.Res.ResultArray.Count());

        res = await res.Next();
        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Empty(res.Res.ResultArray);

        res = await res.Next();
        Assert.Null(res);
    }

    [Fact]
    public async Task PaginationWrappedOptionalBody()
    {
        CommonHelpers.RecordTest("pagination-wrapped-optional-body");
        var sdk = new SDK();

        var available = 20;

        var res = await sdk.Pagination.PaginationWrappedOptionalBodyAsync();

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(available, res.Res.ResultArray.Count());

        res = await res.Next();
        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Empty(res.Res.ResultArray);

        res = await res.Next();
        Assert.Null(res);
    }

    [Fact]
    public async Task PaginationEncapsulatedParameter()
    {
        CommonHelpers.RecordTest("pagination-encapsulated-parameter");
        var sdk = new SDK();

        var available = 20;
        var limit = 15;
        var cursor = available - limit - 1;

        var res = await sdk.Pagination.PaginationEncapsulatedParameterAsync(
            request: new PaginationEncapsulatedParameterRequest
            {
                Cursor = cursor,
            }
        );

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(limit, res.Res.ResultArray.Count());

        res = await res.Next();
        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Empty(res.Res.ResultArray);

        res = await res.Next();
        Assert.Null(res);
    }
}
