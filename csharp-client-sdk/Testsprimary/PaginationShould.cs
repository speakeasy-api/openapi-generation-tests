//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Xunit;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using Openapi;
using Openapi.Models.Operations;
using Openapi.Models.Shared;
using Openapi.Utils;

public class PaginationShould
{
    [Fact]
    public async Task PaginationLimitOffsetPageParams()
    {
        CommonHelpers.RecordTest("pagination-limit-offset-page-params");
        var sdk = new SDK();

        var serverLimit = 20;

        var res = await sdk.Pagination.PaginationLimitOffsetPageParamsAsync(page: 1);

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(res.Res.ResultArray.Count(), serverLimit);

        var nextRes = await res.Next();
        Assert.Equal(HttpStatusCode.OK, nextRes.HttpMeta.Response.StatusCode);
        Assert.NotNull(nextRes.Res);
        Assert.Empty(nextRes.Res.ResultArray);

        var nullRes = await nextRes.Next();
        Assert.Null(nullRes);
    }

    [Fact]
    public async Task PaginationLimitOffsetPageBody()
    {
        CommonHelpers.RecordTest("pagination-limit-offset-page-body");
        var sdk = new SDK();
        var limit = 15;

        var res = await sdk.Pagination.PaginationLimitOffsetPageBodyAsync(request: new LimitOffsetConfig{Page = 1, Limit = limit});

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(res.Res.ResultArray.Count(), limit);

        var nextRes = await res.Next();
        Assert.Equal(HttpStatusCode.OK, nextRes.HttpMeta.Response.StatusCode);
        Assert.NotNull(nextRes.Res);
        Assert.True(nextRes.Res.ResultArray.Count() < limit, "result count is expected to be less than the limit");

        var nullRes = await nextRes.Next();
        Assert.Null(nullRes);
    }

    [Fact]
    public async Task PaginationLimitOffsetDeepOutputsPageBody()
    {
        CommonHelpers.RecordTest("pagination-limit-offset-deep-outputs-page-body");
        var sdk = new SDK();
        var limit = 15;

        var res = await sdk.Pagination.PaginationLimitOffsetDeepOutputsPageBodyAsync(request: new LimitOffsetConfig{Page = 1, Limit = limit});

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(res.Res.ResultArray.Count(), limit);

        var nextRes = await res.Next();
        Assert.Equal(HttpStatusCode.OK, nextRes.HttpMeta.Response.StatusCode);
        Assert.NotNull(nextRes.Res);
        Assert.True(nextRes.Res.ResultArray.Count() < limit, "result count is expected to be less than the limit");

        var nullRes = await nextRes.Next();
        Assert.Null(nullRes);
    }

    [Fact]
    public async Task PaginationLimitOffsetOffsetParams()
    {
        CommonHelpers.RecordTest("pagination-limit-offset-offset-params");
        var sdk = new SDK();
        var limit = 15;

        var res = await sdk.Pagination.PaginationLimitOffsetOffsetParamsAsync(limit: limit, offset: 0);

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(res.Res.ResultArray.Count(), limit);

        var nextRes = await res.Next();
        Assert.Equal(HttpStatusCode.OK, nextRes.HttpMeta.Response.StatusCode);
        Assert.NotNull(nextRes.Res);
        Assert.True(nextRes.Res.ResultArray.Count() < limit, "result count is expected to be less than the limit");

        var nullRes = await nextRes.Next();
        Assert.Null(nullRes);
    }

    [Fact]
    public async Task PaginationLimitOffsetOffsetBody()
    {
        CommonHelpers.RecordTest("pagination-limit-offset-offset-body");
        var sdk = new SDK();
        var limit = 15;

        var res = await sdk.Pagination.PaginationLimitOffsetOffsetBodyAsync(request: new LimitOffsetConfig{Limit = limit, Offset = 0});

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(res.Res.ResultArray.Count(), limit);

        var nextRes = await res.Next();
        Assert.Equal(HttpStatusCode.OK, nextRes.HttpMeta.Response.StatusCode);
        Assert.NotNull(nextRes.Res);
        Assert.True(nextRes.Res.ResultArray.Count() < limit, "result count is expected to be less than the limit");

        var nullRes = await nextRes.Next();
        Assert.Null(nullRes);
    }

    [Fact]
    public async Task PaginationCursorParams()
    {
        CommonHelpers.RecordTest("pagination-cursor-params");
        var sdk = new SDK();
        var limit = 15;

        var res = await sdk.Pagination.PaginationCursorParamsAsync(cursor: -1);

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(res.Res.ResultArray.Count(), limit);

        var nextRes = await res.Next();
        Assert.Equal(HttpStatusCode.OK, nextRes.HttpMeta.Response.StatusCode);
        Assert.NotNull(nextRes.Res);
        Assert.True(nextRes.Res.ResultArray.Count() < limit, "result count is expected to be less than the limit");

        var penultimateRes = await nextRes.Next();
        Assert.Equal(HttpStatusCode.OK, penultimateRes.HttpMeta.Response.StatusCode);
        Assert.NotNull(penultimateRes.Res);
        Assert.Empty(penultimateRes.Res.ResultArray);


        var nullRes = await penultimateRes.Next();
        Assert.Null(nullRes);
    }

    [Fact]
    public async Task PaginationCursorBody()
    {
        CommonHelpers.RecordTest("pagination-cursor-body");
        var sdk = new SDK();
        var limit = 15;

        var res = await sdk.Pagination.PaginationCursorBodyAsync(request: new PaginationCursorBodyRequestBody{Cursor = -1});

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(res.Res.ResultArray.Count(), limit);

        var nextRes = await res.Next();
        Assert.Equal(HttpStatusCode.OK, nextRes.HttpMeta.Response.StatusCode);
        Assert.NotNull(nextRes.Res);
        Assert.True(nextRes.Res.ResultArray.Count() < limit, "result count is expected to be less than the limit");

        var penultimateRes = await nextRes.Next();
        Assert.Equal(HttpStatusCode.OK, penultimateRes.HttpMeta.Response.StatusCode);
        Assert.NotNull(penultimateRes.Res);
        Assert.Empty(penultimateRes.Res.ResultArray);


        var nullRes = await penultimateRes.Next();
        Assert.Null(nullRes);
    }

    [Fact]
    public async Task PaginationCursorNonNumeric()
    {
        CommonHelpers.RecordTest("pagination-cursor-non-numeric");
        var sdk = new SDK();

        var res = await sdk.Pagination.PaginationCursorNonNumericAsync();

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(15, res.Res.ResultArray.Count());

        var nextRes = await res.Next();
        Assert.Equal(HttpStatusCode.OK, nextRes.HttpMeta.Response.StatusCode);
        Assert.NotNull(nextRes.Res);
        Assert.Equal(5, nextRes.Res.ResultArray.Count());

        var penultimateRes = await nextRes.Next();
        Assert.Equal(HttpStatusCode.OK, penultimateRes.HttpMeta.Response.StatusCode);
        Assert.NotNull(penultimateRes.Res);
        Assert.Empty(penultimateRes.Res.ResultArray);

        var nullRes = await penultimateRes.Next();
        Assert.Null(nullRes);
    }

    [Fact]
    public async Task PaginationWithRetriesAsync()
    {
        CommonHelpers.RecordTest("pagination-with-retries");

        var count = 0;
        var log = new List<(int, string, string, string)>();
        var sdk = new SDK(client: new PaginationRecorderClient(log));

        var res = await sdk.Pagination.PaginationWithRetriesAsync(
          requestId: System.Guid.NewGuid().ToString(),
          faultSettings: "{\"error_code\": 503, \"error_count\": 3}"
        );

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        count += res.Res.ResultArray.Count();

        res = await res.Next();
        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        count += res.Res.ResultArray.Count();

        res = await res.Next();
        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Empty(res.Res.ResultArray);

        res = await res.Next();
        Assert.Null(res);

        Assert.Equal(20, count);

        Assert.Equal(log, new List<(int, string, string, string)>{
                (503, "GET", "/pagination/cursor_non_numeric", ""),
                (503, "GET", "/pagination/cursor_non_numeric", ""),
                (503, "GET", "/pagination/cursor_non_numeric", ""),
                (200, "GET", "/pagination/cursor_non_numeric", ""),
                (200, "GET", "/pagination/cursor_non_numeric", "?cursor=14"),
                (200, "GET", "/pagination/cursor_non_numeric", "?cursor=19"),
            });
    }

    internal class PaginationRecorderClient : SpeakeasyHttpClient
    {
        private List<(int, string, string, string)> log;

        public PaginationRecorderClient(List<(int, string, string, string)> log)
        {
            this.log = log;
        }

        public override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage httpRequest)
        {
            var httpResponse = await base.SendAsync(httpRequest);
            log.Add(((int)httpResponse.StatusCode,
                     httpRequest.Method.Method,
                     httpRequest.RequestUri.AbsolutePath,
                     httpRequest.RequestUri.Query));
            return httpResponse;
        }
    }


    [Fact]
    public async Task PaginationBodyWrappedRequest()
    {
        CommonHelpers.RecordTest("pagination-body-wrapped-request");

        var sdk = new SDK();

        var available = 20;
        var limit = 15;

        var res = await sdk.Pagination.PaginationBodyWrappedRequestAsync(
          request: new PaginationBodyWrappedRequestRequest
          {
              LimitOffsetConfig = new LimitOffsetConfig
              {
                  Page = 1,
                  Limit = limit
              }
          }
        );

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(limit, res.Res.ResultArray.Count());

        res = await res.Next();
        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(available-limit, res.Res.ResultArray.Count());

        res = await res.Next();
        Assert.Null(res);
    }

    [Fact]
    public async Task PaginationBodyFlattenedWithSecurity()
    {
        CommonHelpers.RecordTest("pagination-body-flattened-with-security");

        var sdk = new SDK();
        var available = 20;
        var limit = 15;

        var res = await sdk.Pagination.PaginationBodyFlattenedWithSecurityAsync(
            new PaginationBodyFlattenedWithSecuritySecurity
            {
                PaginationAuth = "test"
            },
            limit,
            0
        );

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(limit, res.Res.ResultArray.Count());

        res = await res.Next();
        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(available-limit, res.Res.ResultArray.Count());

        res = await res.Next();
        Assert.Null(res);
    }

    [Fact]
    public async Task PaginationBodyFlattenedOptionalSecurity()
    {
        CommonHelpers.RecordTest("pagination-body-flattened-optional-security");

        var sdk = new SDK();
        var available = 20;
        var limit = 15;

        var res = await sdk.Pagination.PaginationBodyFlattenedOptionalSecurityAsync(
            limit,
            0,
            new PaginationBodyFlattenedOptionalSecuritySecurity
            {
                PaginationAuth = "test"
            }
        );

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(limit, res.Res.ResultArray.Count());

        res = await res.Next();
        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(available-limit, res.Res.ResultArray.Count());

        res = await res.Next();
        Assert.Null(res);
    }

    [Fact]
    public async Task PaginationAmbiguousInput()
    {
        CommonHelpers.RecordTest("pagination-ambiguous-input");

        var sdk = new SDK();

        var available = 20;
        var limit = 15;
        var cursor = available - limit -1;

        var res = await sdk.Pagination.PaginationAmbiguousInputAsync(
            requestBody: new PaginationAmbiguousInputRequestBody
            {
                Cursor = cursor,
            },
            cursor: 100
        );

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(limit, res.Res.ResultArray.Count());

        res = await res.Next();
        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Empty(res.Res.ResultArray);

        res = await res.Next();
        Assert.Null(res);
    }

    [Fact]
    public async Task PaginationWrappedOptionalBody()
    {
        CommonHelpers.RecordTest("pagination-wrapped-optional-body");
        var sdk = new SDK();

        var available = 20;

        var res = await sdk.Pagination.PaginationWrappedOptionalBodyAsync();

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Equal(available, res.Res.ResultArray.Count());

        res = await res.Next();
        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res.Res);
        Assert.Empty(res.Res.ResultArray);

        res = await res.Next();
        Assert.Null(res);
    }

}
