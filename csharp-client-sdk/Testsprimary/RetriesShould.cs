//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Net.Http;
using System.Threading.Tasks;
using Openapi;
using Openapi.Models.Errors;
using Openapi.Models.Operations;
using Openapi.Utils.Retries;
using Xunit;
using System.Net;

public class RetriesShould
{
    public static string RequestID() => System.Guid.NewGuid().ToString();

    [Fact]
    public async Task RetriesSucceeds()
    {
        CommonHelpers.RecordTest("retries-succeeds");

        var sdk = new SDK();

        var res = await sdk.Retries.RetriesGetAsync(requestId: RequestID());

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res);
        Assert.Equal(3, res.Retries.Retries);
    }

    [Fact]
    public async Task RetriesSucceedsWithBody()
    {
        CommonHelpers.RecordTest("retries-succeeds-with-body");

        var sdk = new SDK();

        var req = new RetriesPostRequestBody { FieldOne = "one" };

        var res = await sdk.Retries.RetriesPostAsync(requestId: RequestID(), requestBody: req);

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res);
        Assert.Equal(3, res.Retries.Retries);
    }

    [Fact]
    public async Task RetriesTimeout()
    {
        CommonHelpers.RecordTest("retries-timeout");

        var sdk = new SDK();

        var error = await Assert.ThrowsAsync<SDKException>(
            async () =>
                await sdk.Retries.RetriesGetAsync(
                    requestId: RequestID(),
                    numRetries: 1000000000L,
                    retryConfig: new RetryConfig(
                        strategy: RetryConfig.RetryStrategy.BACKOFF,
                        backoff: new BackoffStrategy(
                            initialIntervalMs: 1L,
                            maxIntervalMs: 50L,
                            maxElapsedTimeMs: 100L,
                            exponent: 1.1,
                            jitterFactor: 0.5
                        ),
                        retryConnectionErrors: false
                    )
                )
        );

        Assert.Equal("API error occurred", error.Message);
        Assert.Equal(HttpStatusCode.ServiceUnavailable, error.Response.StatusCode);
    }

    [Fact]
    public async Task RetriesConnectError()
    {
        CommonHelpers.RecordTest("retries-connect-error");

        var sdk = new SDK(
            retryConfig: new RetryConfig(
                strategy: RetryConfig.RetryStrategy.BACKOFF,
                backoff: new BackoffStrategy(
                    initialIntervalMs: 1L,
                    maxIntervalMs: 50L,
                    maxElapsedTimeMs: 1000L,
                    exponent: 1.1,
                    jitterFactor: 0.5
                ),
                retryConnectionErrors: false
            )
        );

        var error = await Assert.ThrowsAsync<HttpRequestException>(
            async () => await sdk.Retries.RetriesConnectErrorGetAsync()
        );

        Assert.True(error.Message.Contains("Connection refused") || error.Message.Contains("Cannot assign requested address"));
        Assert.False(error.StatusCode.HasValue);
    }

    [Fact]
    public async Task GlobalRetryConfigDisable()
    {
        CommonHelpers.RecordTest("retries-global-config-disable");

        var sdk = new SDK(retryConfig: new RetryConfig(strategy: RetryConfig.RetryStrategy.NONE));

        var error = await Assert.ThrowsAsync<SDKException>(
            async () => await sdk.Retries.RetriesGetAsync(requestId: RequestID(), numRetries: 2L)
        );

        Assert.Equal("API error occurred", error.Message);
        Assert.Equal(HttpStatusCode.ServiceUnavailable, error.Response.StatusCode);
    }

    [Fact]
    public async Task GlobalRetryConfigSuccess()
    {
        CommonHelpers.RecordTest("retries-global-config-success");

        var sdk = new SDK(
            retryConfig: new RetryConfig(
                strategy: RetryConfig.RetryStrategy.BACKOFF,
                backoff: new BackoffStrategy(
                    initialIntervalMs: 1L,
                    maxIntervalMs: 50L,
                    maxElapsedTimeMs: 1000L,
                    exponent: 1.1,
                    jitterFactor: 0.5
                ),
                retryConnectionErrors: false
            )
        );

        var res = await sdk.Retries.RetriesGetAsync(requestId: RequestID(), numRetries: 20L);

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res);
        Assert.Equal(20, res.Retries.Retries);
    }

    [Fact]
    public async Task GlobalRetryConfigTimeout()
    {
        CommonHelpers.RecordTest("retries-global-config-timeout");

        var sdk = new SDK(
            retryConfig: new RetryConfig(
                strategy: RetryConfig.RetryStrategy.BACKOFF,
                backoff: new BackoffStrategy(
                    initialIntervalMs: 1L,
                    maxIntervalMs: 50L,
                    maxElapsedTimeMs: 100L,
                    exponent: 1.1,
                    jitterFactor: 0.5
                ),
                retryConnectionErrors: false
            )
        );

        var error = await Assert.ThrowsAsync<SDKException>(
            async () => await sdk.Retries.RetriesGetAsync(requestId: RequestID(), numRetries: 30)
        );

        Assert.Equal("API error occurred", error.Message);
        Assert.Equal(HttpStatusCode.ServiceUnavailable, error.Response.StatusCode);
    }

    [Fact]
    public async Task RespectRetryAfter()
    {
        CommonHelpers.RecordTest("retries-header");

        var sdk = new SDK();

        var res = await sdk.Retries.RetriesAfterAsync(
            requestId: RequestID(),
            numRetries: 3L,
            retryConfig: new RetryConfig(
                strategy: RetryConfig.RetryStrategy.BACKOFF,
                backoff: new BackoffStrategy(
                    initialIntervalMs: 5000L,
                    maxIntervalMs: 10000L,
                    exponent: 1.1,
                    maxElapsedTimeMs: 10000L
                ),
                retryConnectionErrors: false
            )
        );

        Assert.Equal(HttpStatusCode.OK, res.HttpMeta.Response.StatusCode);
        Assert.NotNull(res);
        Assert.Equal(3, res.Retries.Retries);
    }
}
