// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type Console int64

const (
	ConsoleOne   Console = 1
	ConsoleTwo   Console = 2
	ConsoleThree Console = 3
)

func (e Console) ToPointer() *Console {
	return &e
}
func (e *Console) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		*e = Console(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Console: %v", v)
	}
}

type AmbiguousQueryParamRequest struct {
	Console Console `queryParam:"style=form,explode=true,name=console"`
}

func (o *AmbiguousQueryParamRequest) GetConsole() Console {
	if o == nil {
		return Console(0)
	}
	return o.Console
}

type AmbiguousQueryParamResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *AmbiguousQueryParamResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *AmbiguousQueryParamResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *AmbiguousQueryParamResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
