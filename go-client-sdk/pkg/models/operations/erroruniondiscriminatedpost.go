// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"net/http"
	"openapi/v2/pkg/utils"
)

var ErrorUnionDiscriminatedPostServerList = []string{
	"http://localhost:35456",
}

type TaggedError2Message struct {
	Message string `json:"message"`
}

func (o *TaggedError2Message) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type TaggedError2RequestBody struct {
	Tag                 string              `json:"tag"`
	TaggedError2Message TaggedError2Message `json:"error"`
}

func (o *TaggedError2RequestBody) GetTag() string {
	if o == nil {
		return ""
	}
	return o.Tag
}

func (o *TaggedError2RequestBody) GetTaggedError2Message() TaggedError2Message {
	if o == nil {
		return TaggedError2Message{}
	}
	return o.TaggedError2Message
}

type TaggedError1RequestBody struct {
	Error string `json:"error"`
	Tag   string `json:"tag"`
}

func (o *TaggedError1RequestBody) GetError() string {
	if o == nil {
		return ""
	}
	return o.Error
}

func (o *TaggedError1RequestBody) GetTag() string {
	if o == nil {
		return ""
	}
	return o.Tag
}

type ErrorUnionDiscriminatedPostRequestBodyType string

const (
	ErrorUnionDiscriminatedPostRequestBodyTypeTaggedError1RequestBody ErrorUnionDiscriminatedPostRequestBodyType = "taggedError1RequestBody"
	ErrorUnionDiscriminatedPostRequestBodyTypeTaggedError2RequestBody ErrorUnionDiscriminatedPostRequestBodyType = "taggedError2RequestBody"
)

type ErrorUnionDiscriminatedPostRequestBody struct {
	TaggedError1RequestBody *TaggedError1RequestBody `queryParam:"inline"`
	TaggedError2RequestBody *TaggedError2RequestBody `queryParam:"inline"`

	Type ErrorUnionDiscriminatedPostRequestBodyType
}

func CreateErrorUnionDiscriminatedPostRequestBodyTaggedError1RequestBody(taggedError1RequestBody TaggedError1RequestBody) ErrorUnionDiscriminatedPostRequestBody {
	typ := ErrorUnionDiscriminatedPostRequestBodyTypeTaggedError1RequestBody

	return ErrorUnionDiscriminatedPostRequestBody{
		TaggedError1RequestBody: &taggedError1RequestBody,
		Type:                    typ,
	}
}

func CreateErrorUnionDiscriminatedPostRequestBodyTaggedError2RequestBody(taggedError2RequestBody TaggedError2RequestBody) ErrorUnionDiscriminatedPostRequestBody {
	typ := ErrorUnionDiscriminatedPostRequestBodyTypeTaggedError2RequestBody

	return ErrorUnionDiscriminatedPostRequestBody{
		TaggedError2RequestBody: &taggedError2RequestBody,
		Type:                    typ,
	}
}

func (u *ErrorUnionDiscriminatedPostRequestBody) UnmarshalJSON(data []byte) error {

	var taggedError1RequestBody TaggedError1RequestBody = TaggedError1RequestBody{}
	if err := utils.UnmarshalJSON(data, &taggedError1RequestBody, "", true, true); err == nil {
		u.TaggedError1RequestBody = &taggedError1RequestBody
		u.Type = ErrorUnionDiscriminatedPostRequestBodyTypeTaggedError1RequestBody
		return nil
	}

	var taggedError2RequestBody TaggedError2RequestBody = TaggedError2RequestBody{}
	if err := utils.UnmarshalJSON(data, &taggedError2RequestBody, "", true, true); err == nil {
		u.TaggedError2RequestBody = &taggedError2RequestBody
		u.Type = ErrorUnionDiscriminatedPostRequestBodyTypeTaggedError2RequestBody
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ErrorUnionDiscriminatedPostRequestBody", string(data))
}

func (u ErrorUnionDiscriminatedPostRequestBody) MarshalJSON() ([]byte, error) {
	if u.TaggedError1RequestBody != nil {
		return utils.MarshalJSON(u.TaggedError1RequestBody, "", true)
	}

	if u.TaggedError2RequestBody != nil {
		return utils.MarshalJSON(u.TaggedError2RequestBody, "", true)
	}

	return nil, errors.New("could not marshal union type ErrorUnionDiscriminatedPostRequestBody: all fields are null")
}

type ErrorUnionDiscriminatedPostResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *ErrorUnionDiscriminatedPostResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ErrorUnionDiscriminatedPostResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ErrorUnionDiscriminatedPostResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
