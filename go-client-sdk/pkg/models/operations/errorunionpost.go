// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"net/http"
	"openapi/v2/pkg/utils"
)

var ErrorUnionPostServerList = []string{
	"http://localhost:35456",
}

type ErrorType2Message struct {
	Message string `json:"message"`
}

func (o *ErrorType2Message) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type ErrorType2RequestBody struct {
	ErrorType2Message *ErrorType2Message `json:"error,omitempty"`
}

func (o *ErrorType2RequestBody) GetErrorType2Message() *ErrorType2Message {
	if o == nil {
		return nil
	}
	return o.ErrorType2Message
}

type ErrorType1RequestBody struct {
	Error string `json:"error"`
}

func (o *ErrorType1RequestBody) GetError() string {
	if o == nil {
		return ""
	}
	return o.Error
}

type ErrorUnionPostRequestBodyType string

const (
	ErrorUnionPostRequestBodyTypeErrorType1RequestBody ErrorUnionPostRequestBodyType = "errorType1RequestBody"
	ErrorUnionPostRequestBodyTypeErrorType2RequestBody ErrorUnionPostRequestBodyType = "errorType2RequestBody"
)

type ErrorUnionPostRequestBody struct {
	ErrorType1RequestBody *ErrorType1RequestBody `queryParam:"inline"`
	ErrorType2RequestBody *ErrorType2RequestBody `queryParam:"inline"`

	Type ErrorUnionPostRequestBodyType
}

func CreateErrorUnionPostRequestBodyErrorType1RequestBody(errorType1RequestBody ErrorType1RequestBody) ErrorUnionPostRequestBody {
	typ := ErrorUnionPostRequestBodyTypeErrorType1RequestBody

	return ErrorUnionPostRequestBody{
		ErrorType1RequestBody: &errorType1RequestBody,
		Type:                  typ,
	}
}

func CreateErrorUnionPostRequestBodyErrorType2RequestBody(errorType2RequestBody ErrorType2RequestBody) ErrorUnionPostRequestBody {
	typ := ErrorUnionPostRequestBodyTypeErrorType2RequestBody

	return ErrorUnionPostRequestBody{
		ErrorType2RequestBody: &errorType2RequestBody,
		Type:                  typ,
	}
}

func (u *ErrorUnionPostRequestBody) UnmarshalJSON(data []byte) error {

	var errorType1RequestBody ErrorType1RequestBody = ErrorType1RequestBody{}
	if err := utils.UnmarshalJSON(data, &errorType1RequestBody, "", true, true); err == nil {
		u.ErrorType1RequestBody = &errorType1RequestBody
		u.Type = ErrorUnionPostRequestBodyTypeErrorType1RequestBody
		return nil
	}

	var errorType2RequestBody ErrorType2RequestBody = ErrorType2RequestBody{}
	if err := utils.UnmarshalJSON(data, &errorType2RequestBody, "", true, true); err == nil {
		u.ErrorType2RequestBody = &errorType2RequestBody
		u.Type = ErrorUnionPostRequestBodyTypeErrorType2RequestBody
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ErrorUnionPostRequestBody", string(data))
}

func (u ErrorUnionPostRequestBody) MarshalJSON() ([]byte, error) {
	if u.ErrorType1RequestBody != nil {
		return utils.MarshalJSON(u.ErrorType1RequestBody, "", true)
	}

	if u.ErrorType2RequestBody != nil {
		return utils.MarshalJSON(u.ErrorType2RequestBody, "", true)
	}

	return nil, errors.New("could not marshal union type ErrorUnionPostRequestBody: all fields are null")
}

type ErrorUnionPostResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *ErrorUnionPostResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ErrorUnionPostResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ErrorUnionPostResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
