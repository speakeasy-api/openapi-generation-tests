// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
)

type PrimitiveTypeOneOfPostRequestBodyType string

const (
	PrimitiveTypeOneOfPostRequestBodyTypeStr     PrimitiveTypeOneOfPostRequestBodyType = "str"
	PrimitiveTypeOneOfPostRequestBodyTypeInteger PrimitiveTypeOneOfPostRequestBodyType = "integer"
	PrimitiveTypeOneOfPostRequestBodyTypeNumber  PrimitiveTypeOneOfPostRequestBodyType = "number"
	PrimitiveTypeOneOfPostRequestBodyTypeBoolean PrimitiveTypeOneOfPostRequestBodyType = "boolean"
)

type PrimitiveTypeOneOfPostRequestBody struct {
	Str     *string
	Integer *int64
	Number  *float64
	Boolean *bool

	Type PrimitiveTypeOneOfPostRequestBodyType
}

func CreatePrimitiveTypeOneOfPostRequestBodyStr(str string) PrimitiveTypeOneOfPostRequestBody {
	typ := PrimitiveTypeOneOfPostRequestBodyTypeStr

	return PrimitiveTypeOneOfPostRequestBody{
		Str:  &str,
		Type: typ,
	}
}

func CreatePrimitiveTypeOneOfPostRequestBodyInteger(integer int64) PrimitiveTypeOneOfPostRequestBody {
	typ := PrimitiveTypeOneOfPostRequestBodyTypeInteger

	return PrimitiveTypeOneOfPostRequestBody{
		Integer: &integer,
		Type:    typ,
	}
}

func CreatePrimitiveTypeOneOfPostRequestBodyNumber(number float64) PrimitiveTypeOneOfPostRequestBody {
	typ := PrimitiveTypeOneOfPostRequestBodyTypeNumber

	return PrimitiveTypeOneOfPostRequestBody{
		Number: &number,
		Type:   typ,
	}
}

func CreatePrimitiveTypeOneOfPostRequestBodyBoolean(boolean bool) PrimitiveTypeOneOfPostRequestBody {
	typ := PrimitiveTypeOneOfPostRequestBodyTypeBoolean

	return PrimitiveTypeOneOfPostRequestBody{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *PrimitiveTypeOneOfPostRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = PrimitiveTypeOneOfPostRequestBodyTypeStr
		return nil
	}

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = PrimitiveTypeOneOfPostRequestBodyTypeInteger
		return nil
	}

	number := new(float64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&number); err == nil {
		u.Number = number
		u.Type = PrimitiveTypeOneOfPostRequestBodyTypeNumber
		return nil
	}

	boolean := new(bool)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&boolean); err == nil {
		u.Boolean = boolean
		u.Type = PrimitiveTypeOneOfPostRequestBodyTypeBoolean
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PrimitiveTypeOneOfPostRequestBody) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	if u.Number != nil {
		return json.Marshal(u.Number)
	}

	if u.Boolean != nil {
		return json.Marshal(u.Boolean)
	}

	return nil, nil
}

type PrimitiveTypeOneOfPostResJSONType string

const (
	PrimitiveTypeOneOfPostResJSONTypeStr     PrimitiveTypeOneOfPostResJSONType = "str"
	PrimitiveTypeOneOfPostResJSONTypeInteger PrimitiveTypeOneOfPostResJSONType = "integer"
	PrimitiveTypeOneOfPostResJSONTypeNumber  PrimitiveTypeOneOfPostResJSONType = "number"
	PrimitiveTypeOneOfPostResJSONTypeBoolean PrimitiveTypeOneOfPostResJSONType = "boolean"
)

type PrimitiveTypeOneOfPostResJSON struct {
	Str     *string
	Integer *int64
	Number  *float64
	Boolean *bool

	Type PrimitiveTypeOneOfPostResJSONType
}

func CreatePrimitiveTypeOneOfPostResJSONStr(str string) PrimitiveTypeOneOfPostResJSON {
	typ := PrimitiveTypeOneOfPostResJSONTypeStr

	return PrimitiveTypeOneOfPostResJSON{
		Str:  &str,
		Type: typ,
	}
}

func CreatePrimitiveTypeOneOfPostResJSONInteger(integer int64) PrimitiveTypeOneOfPostResJSON {
	typ := PrimitiveTypeOneOfPostResJSONTypeInteger

	return PrimitiveTypeOneOfPostResJSON{
		Integer: &integer,
		Type:    typ,
	}
}

func CreatePrimitiveTypeOneOfPostResJSONNumber(number float64) PrimitiveTypeOneOfPostResJSON {
	typ := PrimitiveTypeOneOfPostResJSONTypeNumber

	return PrimitiveTypeOneOfPostResJSON{
		Number: &number,
		Type:   typ,
	}
}

func CreatePrimitiveTypeOneOfPostResJSONBoolean(boolean bool) PrimitiveTypeOneOfPostResJSON {
	typ := PrimitiveTypeOneOfPostResJSONTypeBoolean

	return PrimitiveTypeOneOfPostResJSON{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *PrimitiveTypeOneOfPostResJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = PrimitiveTypeOneOfPostResJSONTypeStr
		return nil
	}

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = PrimitiveTypeOneOfPostResJSONTypeInteger
		return nil
	}

	number := new(float64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&number); err == nil {
		u.Number = number
		u.Type = PrimitiveTypeOneOfPostResJSONTypeNumber
		return nil
	}

	boolean := new(bool)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&boolean); err == nil {
		u.Boolean = boolean
		u.Type = PrimitiveTypeOneOfPostResJSONTypeBoolean
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PrimitiveTypeOneOfPostResJSON) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	if u.Number != nil {
		return json.Marshal(u.Number)
	}

	if u.Boolean != nil {
		return json.Marshal(u.Boolean)
	}

	return nil, nil
}

// PrimitiveTypeOneOfPostRes - OK
type PrimitiveTypeOneOfPostRes struct {
	JSON PrimitiveTypeOneOfPostResJSON `json:"json"`
}

func (o *PrimitiveTypeOneOfPostRes) GetJSON() PrimitiveTypeOneOfPostResJSON {
	if o == nil {
		return PrimitiveTypeOneOfPostResJSON{}
	}
	return o.JSON
}

type PrimitiveTypeOneOfPostResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	Res *PrimitiveTypeOneOfPostRes
}

func (o *PrimitiveTypeOneOfPostResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PrimitiveTypeOneOfPostResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PrimitiveTypeOneOfPostResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *PrimitiveTypeOneOfPostResponse) GetRes() *PrimitiveTypeOneOfPostRes {
	if o == nil {
		return nil
	}
	return o.Res
}
