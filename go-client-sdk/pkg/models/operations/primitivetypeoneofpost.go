// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"net/http"
	"openapi/v2/pkg/utils"
)

type PrimitiveTypeOneOfPostRequestBodyType string

const (
	PrimitiveTypeOneOfPostRequestBodyTypeStr     PrimitiveTypeOneOfPostRequestBodyType = "str"
	PrimitiveTypeOneOfPostRequestBodyTypeInteger PrimitiveTypeOneOfPostRequestBodyType = "integer"
	PrimitiveTypeOneOfPostRequestBodyTypeNumber  PrimitiveTypeOneOfPostRequestBodyType = "number"
	PrimitiveTypeOneOfPostRequestBodyTypeBoolean PrimitiveTypeOneOfPostRequestBodyType = "boolean"
)

type PrimitiveTypeOneOfPostRequestBody struct {
	Str     *string  `queryParam:"inline"`
	Integer *int64   `queryParam:"inline"`
	Number  *float64 `queryParam:"inline"`
	Boolean *bool    `queryParam:"inline"`

	Type PrimitiveTypeOneOfPostRequestBodyType
}

func CreatePrimitiveTypeOneOfPostRequestBodyStr(str string) PrimitiveTypeOneOfPostRequestBody {
	typ := PrimitiveTypeOneOfPostRequestBodyTypeStr

	return PrimitiveTypeOneOfPostRequestBody{
		Str:  &str,
		Type: typ,
	}
}

func CreatePrimitiveTypeOneOfPostRequestBodyInteger(integer int64) PrimitiveTypeOneOfPostRequestBody {
	typ := PrimitiveTypeOneOfPostRequestBodyTypeInteger

	return PrimitiveTypeOneOfPostRequestBody{
		Integer: &integer,
		Type:    typ,
	}
}

func CreatePrimitiveTypeOneOfPostRequestBodyNumber(number float64) PrimitiveTypeOneOfPostRequestBody {
	typ := PrimitiveTypeOneOfPostRequestBodyTypeNumber

	return PrimitiveTypeOneOfPostRequestBody{
		Number: &number,
		Type:   typ,
	}
}

func CreatePrimitiveTypeOneOfPostRequestBodyBoolean(boolean bool) PrimitiveTypeOneOfPostRequestBody {
	typ := PrimitiveTypeOneOfPostRequestBodyTypeBoolean

	return PrimitiveTypeOneOfPostRequestBody{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *PrimitiveTypeOneOfPostRequestBody) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = PrimitiveTypeOneOfPostRequestBodyTypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = PrimitiveTypeOneOfPostRequestBodyTypeInteger
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = PrimitiveTypeOneOfPostRequestBodyTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = PrimitiveTypeOneOfPostRequestBodyTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PrimitiveTypeOneOfPostRequestBody", string(data))
}

func (u PrimitiveTypeOneOfPostRequestBody) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type PrimitiveTypeOneOfPostRequestBody: all fields are null")
}

type PrimitiveTypeOneOfPostJSONType string

const (
	PrimitiveTypeOneOfPostJSONTypeStr     PrimitiveTypeOneOfPostJSONType = "str"
	PrimitiveTypeOneOfPostJSONTypeInteger PrimitiveTypeOneOfPostJSONType = "integer"
	PrimitiveTypeOneOfPostJSONTypeNumber  PrimitiveTypeOneOfPostJSONType = "number"
	PrimitiveTypeOneOfPostJSONTypeBoolean PrimitiveTypeOneOfPostJSONType = "boolean"
)

type PrimitiveTypeOneOfPostJSON struct {
	Str     *string  `queryParam:"inline"`
	Integer *int64   `queryParam:"inline"`
	Number  *float64 `queryParam:"inline"`
	Boolean *bool    `queryParam:"inline"`

	Type PrimitiveTypeOneOfPostJSONType
}

func CreatePrimitiveTypeOneOfPostJSONStr(str string) PrimitiveTypeOneOfPostJSON {
	typ := PrimitiveTypeOneOfPostJSONTypeStr

	return PrimitiveTypeOneOfPostJSON{
		Str:  &str,
		Type: typ,
	}
}

func CreatePrimitiveTypeOneOfPostJSONInteger(integer int64) PrimitiveTypeOneOfPostJSON {
	typ := PrimitiveTypeOneOfPostJSONTypeInteger

	return PrimitiveTypeOneOfPostJSON{
		Integer: &integer,
		Type:    typ,
	}
}

func CreatePrimitiveTypeOneOfPostJSONNumber(number float64) PrimitiveTypeOneOfPostJSON {
	typ := PrimitiveTypeOneOfPostJSONTypeNumber

	return PrimitiveTypeOneOfPostJSON{
		Number: &number,
		Type:   typ,
	}
}

func CreatePrimitiveTypeOneOfPostJSONBoolean(boolean bool) PrimitiveTypeOneOfPostJSON {
	typ := PrimitiveTypeOneOfPostJSONTypeBoolean

	return PrimitiveTypeOneOfPostJSON{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *PrimitiveTypeOneOfPostJSON) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = PrimitiveTypeOneOfPostJSONTypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = PrimitiveTypeOneOfPostJSONTypeInteger
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = PrimitiveTypeOneOfPostJSONTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = PrimitiveTypeOneOfPostJSONTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PrimitiveTypeOneOfPostJSON", string(data))
}

func (u PrimitiveTypeOneOfPostJSON) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type PrimitiveTypeOneOfPostJSON: all fields are null")
}

// PrimitiveTypeOneOfPostRes - OK
type PrimitiveTypeOneOfPostRes struct {
	JSON PrimitiveTypeOneOfPostJSON `json:"json"`
}

func (o *PrimitiveTypeOneOfPostRes) GetJSON() PrimitiveTypeOneOfPostJSON {
	if o == nil {
		return PrimitiveTypeOneOfPostJSON{}
	}
	return o.JSON
}

type PrimitiveTypeOneOfPostResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	Res *PrimitiveTypeOneOfPostRes
}

func (o *PrimitiveTypeOneOfPostResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PrimitiveTypeOneOfPostResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PrimitiveTypeOneOfPostResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *PrimitiveTypeOneOfPostResponse) GetRes() *PrimitiveTypeOneOfPostRes {
	if o == nil {
		return nil
	}
	return o.Res
}
