// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"github.com/ericlagergren/decimal"
	"math/big"
	"net/http"
	"openapi/v2/pkg/utils"
)

type UnionBigIntStrDecimalRequestBodyType string

const (
	UnionBigIntStrDecimalRequestBodyTypeBigint  UnionBigIntStrDecimalRequestBodyType = "bigint"
	UnionBigIntStrDecimalRequestBodyTypeDecimal UnionBigIntStrDecimalRequestBodyType = "decimal"
)

type UnionBigIntStrDecimalRequestBody struct {
	Bigint  *big.Int
	Decimal *decimal.Big

	Type UnionBigIntStrDecimalRequestBodyType
}

func CreateUnionBigIntStrDecimalRequestBodyBigint(bigint *big.Int) UnionBigIntStrDecimalRequestBody {
	typ := UnionBigIntStrDecimalRequestBodyTypeBigint

	return UnionBigIntStrDecimalRequestBody{
		Bigint: bigint,
		Type:   typ,
	}
}

func CreateUnionBigIntStrDecimalRequestBodyDecimal(decimal *decimal.Big) UnionBigIntStrDecimalRequestBody {
	typ := UnionBigIntStrDecimalRequestBodyTypeDecimal

	return UnionBigIntStrDecimalRequestBody{
		Decimal: decimal,
		Type:    typ,
	}
}

func (u *UnionBigIntStrDecimalRequestBody) UnmarshalJSON(data []byte) error {

	bigint := big.NewInt(0)
	if err := utils.UnmarshalJSON(data, &bigint, `bigint:"string"`, true, true); err == nil {
		u.Bigint = bigint
		u.Type = UnionBigIntStrDecimalRequestBodyTypeBigint
		return nil
	}

	decimal := new(decimal.Big).SetFloat64(0.0)
	if err := utils.UnmarshalJSON(data, &decimal, `decimal:"number"`, true, true); err == nil {
		u.Decimal = decimal
		u.Type = UnionBigIntStrDecimalRequestBodyTypeDecimal
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UnionBigIntStrDecimalRequestBody) MarshalJSON() ([]byte, error) {
	if u.Bigint != nil {
		return utils.MarshalJSON(u.Bigint, `bigint:"string"`, true)
	}

	if u.Decimal != nil {
		return utils.MarshalJSON(u.Decimal, `decimal:"number"`, true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type UnionBigIntStrDecimalJSONType string

const (
	UnionBigIntStrDecimalJSONTypeBigint  UnionBigIntStrDecimalJSONType = "bigint"
	UnionBigIntStrDecimalJSONTypeDecimal UnionBigIntStrDecimalJSONType = "decimal"
)

type UnionBigIntStrDecimalJSON struct {
	Bigint  *big.Int
	Decimal *decimal.Big

	Type UnionBigIntStrDecimalJSONType
}

func CreateUnionBigIntStrDecimalJSONBigint(bigint *big.Int) UnionBigIntStrDecimalJSON {
	typ := UnionBigIntStrDecimalJSONTypeBigint

	return UnionBigIntStrDecimalJSON{
		Bigint: bigint,
		Type:   typ,
	}
}

func CreateUnionBigIntStrDecimalJSONDecimal(decimal *decimal.Big) UnionBigIntStrDecimalJSON {
	typ := UnionBigIntStrDecimalJSONTypeDecimal

	return UnionBigIntStrDecimalJSON{
		Decimal: decimal,
		Type:    typ,
	}
}

func (u *UnionBigIntStrDecimalJSON) UnmarshalJSON(data []byte) error {

	bigint := big.NewInt(0)
	if err := utils.UnmarshalJSON(data, &bigint, `bigint:"string"`, true, true); err == nil {
		u.Bigint = bigint
		u.Type = UnionBigIntStrDecimalJSONTypeBigint
		return nil
	}

	decimal := new(decimal.Big).SetFloat64(0.0)
	if err := utils.UnmarshalJSON(data, &decimal, `decimal:"number"`, true, true); err == nil {
		u.Decimal = decimal
		u.Type = UnionBigIntStrDecimalJSONTypeDecimal
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UnionBigIntStrDecimalJSON) MarshalJSON() ([]byte, error) {
	if u.Bigint != nil {
		return utils.MarshalJSON(u.Bigint, `bigint:"string"`, true)
	}

	if u.Decimal != nil {
		return utils.MarshalJSON(u.Decimal, `decimal:"number"`, true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// UnionBigIntStrDecimalRes - OK
type UnionBigIntStrDecimalRes struct {
	JSON UnionBigIntStrDecimalJSON `json:"json"`
}

func (o *UnionBigIntStrDecimalRes) GetJSON() UnionBigIntStrDecimalJSON {
	if o == nil {
		return UnionBigIntStrDecimalJSON{}
	}
	return o.JSON
}

type UnionBigIntStrDecimalResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	Res *UnionBigIntStrDecimalRes
}

func (o *UnionBigIntStrDecimalResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UnionBigIntStrDecimalResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UnionBigIntStrDecimalResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *UnionBigIntStrDecimalResponse) GetRes() *UnionBigIntStrDecimalRes {
	if o == nil {
		return nil
	}
	return o.Res
}
