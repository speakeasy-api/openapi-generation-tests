// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

var UnionErrorsDiscriminatedGetServerList = []string{
	"http://localhost:35456",
}

type ErrorTag string

const (
	ErrorTagTag1 ErrorTag = "tag1"
	ErrorTagTag2 ErrorTag = "tag2"
)

func (e ErrorTag) ToPointer() *ErrorTag {
	return &e
}
func (e *ErrorTag) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tag1":
		fallthrough
	case "tag2":
		*e = ErrorTag(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorTag: %v", v)
	}
}

type UnionErrorsDiscriminatedGetRequest struct {
	ErrorTag ErrorTag `queryParam:"style=form,explode=true,name=errorTag"`
}

func (o *UnionErrorsDiscriminatedGetRequest) GetErrorTag() ErrorTag {
	if o == nil {
		return ErrorTag("")
	}
	return o.ErrorTag
}

type UnionErrorsDiscriminatedGetResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *UnionErrorsDiscriminatedGetResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UnionErrorsDiscriminatedGetResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UnionErrorsDiscriminatedGetResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
