// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

var UnionErrorsGetServerList = []string{
	"http://localhost:35456",
}

type ErrorType string

const (
	ErrorTypeType1 ErrorType = "type1"
	ErrorTypeType2 ErrorType = "type2"
)

func (e ErrorType) ToPointer() *ErrorType {
	return &e
}
func (e *ErrorType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "type1":
		fallthrough
	case "type2":
		*e = ErrorType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorType: %v", v)
	}
}

type UnionErrorsGetRequest struct {
	ErrorType ErrorType `queryParam:"style=form,explode=true,name=errorType"`
}

func (o *UnionErrorsGetRequest) GetErrorType() ErrorType {
	if o == nil {
		return ErrorType("")
	}
	return o.ErrorType
}

type UnionErrorsGetResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *UnionErrorsGetResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UnionErrorsGetResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UnionErrorsGetResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
