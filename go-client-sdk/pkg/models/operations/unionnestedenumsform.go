// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"net/http"
	"openapi/v2/pkg/models/shared"
	"openapi/v2/pkg/utils"
)

type UnionNestedEnumsFormRequestBodyType string

const (
	UnionNestedEnumsFormRequestBodyTypeNestedEnumArray UnionNestedEnumsFormRequestBodyType = "nestedEnumArray"
	UnionNestedEnumsFormRequestBodyTypeNestedEnumMap   UnionNestedEnumsFormRequestBodyType = "nestedEnumMap"
)

type UnionNestedEnumsFormRequestBody struct {
	NestedEnumArray *shared.NestedEnumArray
	NestedEnumMap   *shared.NestedEnumMap

	Type UnionNestedEnumsFormRequestBodyType
}

func CreateUnionNestedEnumsFormRequestBodyNestedEnumArray(nestedEnumArray shared.NestedEnumArray) UnionNestedEnumsFormRequestBody {
	typ := UnionNestedEnumsFormRequestBodyTypeNestedEnumArray

	return UnionNestedEnumsFormRequestBody{
		NestedEnumArray: &nestedEnumArray,
		Type:            typ,
	}
}

func CreateUnionNestedEnumsFormRequestBodyNestedEnumMap(nestedEnumMap shared.NestedEnumMap) UnionNestedEnumsFormRequestBody {
	typ := UnionNestedEnumsFormRequestBodyTypeNestedEnumMap

	return UnionNestedEnumsFormRequestBody{
		NestedEnumMap: &nestedEnumMap,
		Type:          typ,
	}
}

func (u *UnionNestedEnumsFormRequestBody) UnmarshalJSON(data []byte) error {

	var nestedEnumMap shared.NestedEnumMap = shared.NestedEnumMap{}
	if err := utils.UnmarshalJSON(data, &nestedEnumMap, "", true, true); err == nil {
		u.NestedEnumMap = &nestedEnumMap
		u.Type = UnionNestedEnumsFormRequestBodyTypeNestedEnumMap
		return nil
	}

	var nestedEnumArray shared.NestedEnumArray = shared.NestedEnumArray{}
	if err := utils.UnmarshalJSON(data, &nestedEnumArray, "", true, true); err == nil {
		u.NestedEnumArray = &nestedEnumArray
		u.Type = UnionNestedEnumsFormRequestBodyTypeNestedEnumArray
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UnionNestedEnumsFormRequestBody", string(data))
}

func (u UnionNestedEnumsFormRequestBody) MarshalJSON() ([]byte, error) {
	if u.NestedEnumArray != nil {
		return utils.MarshalJSON(u.NestedEnumArray, "", true)
	}

	if u.NestedEnumMap != nil {
		return utils.MarshalJSON(u.NestedEnumMap, "", true)
	}

	return nil, errors.New("could not marshal union type UnionNestedEnumsFormRequestBody: all fields are null")
}

type UnionNestedEnumsFormResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *UnionNestedEnumsFormResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UnionNestedEnumsFormResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UnionNestedEnumsFormResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
