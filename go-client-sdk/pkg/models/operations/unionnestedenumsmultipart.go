// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"net/http"
	"openapi/v2/pkg/models/shared"
	"openapi/v2/pkg/utils"
)

type EnumsType string

const (
	EnumsTypeArrayOfEnum EnumsType = "arrayOfEnum"
	EnumsTypeMapOfEnum   EnumsType = "mapOfEnum"
)

type Enums struct {
	ArrayOfEnum []shared.Enum
	MapOfEnum   map[string]shared.Enum

	Type EnumsType
}

func CreateEnumsArrayOfEnum(arrayOfEnum []shared.Enum) Enums {
	typ := EnumsTypeArrayOfEnum

	return Enums{
		ArrayOfEnum: arrayOfEnum,
		Type:        typ,
	}
}

func CreateEnumsMapOfEnum(mapOfEnum map[string]shared.Enum) Enums {
	typ := EnumsTypeMapOfEnum

	return Enums{
		MapOfEnum: mapOfEnum,
		Type:      typ,
	}
}

func (u *Enums) UnmarshalJSON(data []byte) error {

	var arrayOfEnum []shared.Enum = []shared.Enum{}
	if err := utils.UnmarshalJSON(data, &arrayOfEnum, "", true, true); err == nil {
		u.ArrayOfEnum = arrayOfEnum
		u.Type = EnumsTypeArrayOfEnum
		return nil
	}

	var mapOfEnum map[string]shared.Enum = map[string]shared.Enum{}
	if err := utils.UnmarshalJSON(data, &mapOfEnum, "", true, true); err == nil {
		u.MapOfEnum = mapOfEnum
		u.Type = EnumsTypeMapOfEnum
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Enums", string(data))
}

func (u Enums) MarshalJSON() ([]byte, error) {
	if u.ArrayOfEnum != nil {
		return utils.MarshalJSON(u.ArrayOfEnum, "", true)
	}

	if u.MapOfEnum != nil {
		return utils.MarshalJSON(u.MapOfEnum, "", true)
	}

	return nil, errors.New("could not marshal union type Enums: all fields are null")
}

type UnionNestedEnumsMultipartRequestBody struct {
	Enums Enums `multipartForm:"name=enums,json"`
}

func (o *UnionNestedEnumsMultipartRequestBody) GetEnums() Enums {
	if o == nil {
		return Enums{}
	}
	return o.Enums
}

type UnionNestedEnumsMultipartResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *UnionNestedEnumsMultipartResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UnionNestedEnumsMultipartResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UnionNestedEnumsMultipartResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
