// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
	"time"
)

type UsageExamplePostSecurity struct {
	Password string `security:"scheme,type=http,subtype=basic,name=password"`
	Username string `security:"scheme,type=http,subtype=basic,name=username"`
}

// UsageExamplePostRequestBody - A request body that contains fields with different formats for testing example generation
type UsageExamplePostRequestBody struct {
	// A field called email that will have emails generated as examples
	Email *string `json:"email,omitempty"`
	// A field formatted as an email that will have emails generated as examples
	FormatEmail *string `json:"formatEmail,omitempty"`
	// A field formatted as a uri that will have uris generated as examples
	FormatURI *string `json:"formatUri,omitempty"`
	// A field formatted as a uuid that will have uuids generated as examples
	FormatUUID *string `json:"formatUuid,omitempty"`
	// A field formatted as a hostname that will have hostnames generated as examples
	Hostname *string `json:"hostname,omitempty"`
	// A field formatted as an ipv4 that will have ipv4s generated as examples
	Ipv4 *string `json:"ipv4,omitempty"`
	// A field formatted as an ipv6 that will have ipv6s generated as examples
	Ipv6 *string `json:"ipv6,omitempty"`
	// A simple object that uses all our supported primitive types and enums and has optional properties.
	SimpleObject *shared.SimpleObject `json:"simpleObject,omitempty"`
	// A field formatted as an unknown that will have random strings generated as examples
	Unknown *string `json:"unknown,omitempty"`
	// A field called uri that will have uris generated as examples
	URI *string `json:"uri,omitempty"`
	// A field called uuid that will have uuids generated as examples
	UUID *string `json:"uuid,omitempty"`
}

// UsageExamplePostEnumParameter - An enum type
type UsageExamplePostEnumParameter string

const (
	UsageExamplePostEnumParameterValue1 UsageExamplePostEnumParameter = "value1"
	UsageExamplePostEnumParameterValue2 UsageExamplePostEnumParameter = "value2"
	UsageExamplePostEnumParameterValue3 UsageExamplePostEnumParameter = "value3"
)

func (e UsageExamplePostEnumParameter) ToPointer() *UsageExamplePostEnumParameter {
	return &e
}

func (e *UsageExamplePostEnumParameter) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "value1":
		fallthrough
	case "value2":
		fallthrough
	case "value3":
		*e = UsageExamplePostEnumParameter(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UsageExamplePostEnumParameter: %v", v)
	}
}

// UsageExamplePostOptEnumParameter - An enum type
type UsageExamplePostOptEnumParameter string

const (
	UsageExamplePostOptEnumParameterValue1 UsageExamplePostOptEnumParameter = "value1"
	UsageExamplePostOptEnumParameterValue2 UsageExamplePostOptEnumParameter = "value2"
	UsageExamplePostOptEnumParameterValue3 UsageExamplePostOptEnumParameter = "value3"
)

func (e UsageExamplePostOptEnumParameter) ToPointer() *UsageExamplePostOptEnumParameter {
	return &e
}

func (e *UsageExamplePostOptEnumParameter) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "value1":
		fallthrough
	case "value2":
		fallthrough
	case "value3":
		*e = UsageExamplePostOptEnumParameter(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UsageExamplePostOptEnumParameter: %v", v)
	}
}

type UsageExamplePostRequest struct {
	// A request body that contains fields with different formats for testing example generation
	RequestBody *UsageExamplePostRequestBody `request:"mediaType=application/json"`
	// A boolean parameter
	BoolParameter bool `queryParam:"style=form,explode=true,name=boolParameter"`
	// A date parameter
	DateParameter types.Date `queryParam:"style=form,explode=true,name=dateParameter"`
	// A date time parameter
	DateTimeParameter time.Time `queryParam:"style=form,explode=true,name=dateTimeParameter"`
	// A double parameter
	DoubleParameter float64 `queryParam:"style=form,explode=true,name=doubleParameter"`
	// An enum parameter
	EnumParameter UsageExamplePostEnumParameter `queryParam:"style=form,explode=true,name=enumParameter"`
	// A number parameter that contains a falsey example value
	FalseyNumberParameter float64 `queryParam:"style=form,explode=true,name=falseyNumberParameter"`
	// A float parameter
	FloatParameter float64 `queryParam:"style=form,explode=true,name=floatParameter"`
	// An int64 parameter
	Int64Parameter int64 `queryParam:"style=form,explode=true,name=int64Parameter"`
	// An integer parameter
	IntParameter int `queryParam:"style=form,explode=true,name=intParameter"`
	// An enum parameter
	OptEnumParameter *UsageExamplePostOptEnumParameter `queryParam:"style=form,explode=true,name=optEnumParameter"`
	// A string parameter
	StrParameter string `queryParam:"style=form,explode=true,name=strParameter"`
}

type UsageExamplePost200ApplicationJSONJSON struct {
	// A field called email that will have emails generated as examples
	Email *string `json:"email,omitempty"`
	// A field formatted as an email that will have emails generated as examples
	FormatEmail *string `json:"formatEmail,omitempty"`
	// A field formatted as a uri that will have uris generated as examples
	FormatURI *string `json:"formatUri,omitempty"`
	// A field formatted as a uuid that will have uuids generated as examples
	FormatUUID *string `json:"formatUuid,omitempty"`
	// A field formatted as a hostname that will have hostnames generated as examples
	Hostname *string `json:"hostname,omitempty"`
	// A field formatted as an ipv4 that will have ipv4s generated as examples
	Ipv4 *string `json:"ipv4,omitempty"`
	// A field formatted as an ipv6 that will have ipv6s generated as examples
	Ipv6 *string `json:"ipv6,omitempty"`
	// A simple object that uses all our supported primitive types and enums and has optional properties.
	SimpleObject *shared.SimpleObject `json:"simpleObject,omitempty"`
	// A field formatted as an unknown that will have random strings generated as examples
	Unknown *string `json:"unknown,omitempty"`
	// A field called uri that will have uris generated as examples
	URI *string `json:"uri,omitempty"`
	// A field called uuid that will have uuids generated as examples
	UUID *string `json:"uuid,omitempty"`
}

// UsageExamplePost200ApplicationJSON - A response body that contains the simpleObject sent in the request body
type UsageExamplePost200ApplicationJSON struct {
	JSON UsageExamplePost200ApplicationJSONJSON `json:"json"`
}

type UsageExamplePostResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// A successful response that contains the simpleObject sent in the request body
	UsageExamplePost200ApplicationJSONObject *UsageExamplePost200ApplicationJSON
}
