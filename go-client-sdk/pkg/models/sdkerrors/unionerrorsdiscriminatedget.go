// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdkerrors

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"openapi/v2/pkg/models/shared"
	"openapi/v2/pkg/utils"
)

type UnionErrorsDiscriminatedGetResponseBodyType string

const (
	UnionErrorsDiscriminatedGetResponseBodyTypeTag1 UnionErrorsDiscriminatedGetResponseBodyType = "tag1"
	UnionErrorsDiscriminatedGetResponseBodyTypeTag2 UnionErrorsDiscriminatedGetResponseBodyType = "tag2"
)

// UnionErrorsDiscriminatedGetResponseBody - Error
type UnionErrorsDiscriminatedGetResponseBody struct {
	TaggedError1 *shared.TaggedError1
	TaggedError2 *shared.TaggedError2

	Type UnionErrorsDiscriminatedGetResponseBodyType

	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response `json:"-"`
}

var _ error = &UnionErrorsDiscriminatedGetResponseBody{}

func CreateUnionErrorsDiscriminatedGetResponseBodyTag1(tag1 shared.TaggedError1) UnionErrorsDiscriminatedGetResponseBody {
	typ := UnionErrorsDiscriminatedGetResponseBodyTypeTag1

	return UnionErrorsDiscriminatedGetResponseBody{
		TaggedError1: &tag1,
		Type:         typ,
	}
}

func CreateUnionErrorsDiscriminatedGetResponseBodyTag2(tag2 shared.TaggedError2) UnionErrorsDiscriminatedGetResponseBody {
	typ := UnionErrorsDiscriminatedGetResponseBodyTypeTag2

	return UnionErrorsDiscriminatedGetResponseBody{
		TaggedError2: &tag2,
		Type:         typ,
	}
}

func (u *UnionErrorsDiscriminatedGetResponseBody) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Tag string `json:"tag"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Tag {
	case "tag1":
		taggedError1 := new(shared.TaggedError1)
		if err := utils.UnmarshalJSON(data, &taggedError1, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Tag == tag1) type shared.TaggedError1 within UnionErrorsDiscriminatedGetResponseBody: %w", string(data), err)
		}

		u.TaggedError1 = taggedError1
		u.Type = UnionErrorsDiscriminatedGetResponseBodyTypeTag1
		return nil
	case "tag2":
		taggedError2 := new(shared.TaggedError2)
		if err := utils.UnmarshalJSON(data, &taggedError2, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Tag == tag2) type shared.TaggedError2 within UnionErrorsDiscriminatedGetResponseBody: %w", string(data), err)
		}

		u.TaggedError2 = taggedError2
		u.Type = UnionErrorsDiscriminatedGetResponseBodyTypeTag2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UnionErrorsDiscriminatedGetResponseBody", string(data))
}

func (u UnionErrorsDiscriminatedGetResponseBody) MarshalJSON() ([]byte, error) {
	if u.TaggedError1 != nil {
		return utils.MarshalJSON(u.TaggedError1, "", true)
	}

	if u.TaggedError2 != nil {
		return utils.MarshalJSON(u.TaggedError2, "", true)
	}

	return nil, errors.New("could not marshal union type UnionErrorsDiscriminatedGetResponseBody: all fields are null")
}

func (u UnionErrorsDiscriminatedGetResponseBody) Error() string {
	switch u.Type {
	case UnionErrorsDiscriminatedGetResponseBodyTypeTag1:
		data, _ := json.Marshal(u.TaggedError1)
		return string(data)
	case UnionErrorsDiscriminatedGetResponseBodyTypeTag2:
		data, _ := json.Marshal(u.TaggedError2)
		return string(data)
	default:
		return "unknown error"
	}
}
