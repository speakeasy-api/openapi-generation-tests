// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"openapi/v2/pkg/utils"
)

type AnyOfMultiMatchType string

const (
	AnyOfMultiMatchTypeAnyOfMultiMatchMember1 AnyOfMultiMatchType = "AnyOfMultiMatchMember1"
	AnyOfMultiMatchTypeAnyOfMultiMatchMember2 AnyOfMultiMatchType = "AnyOfMultiMatchMember2"
)

type AnyOfMultiMatch struct {
	AnyOfMultiMatchMember1 *AnyOfMultiMatchMember1 `queryParam:"inline"`
	AnyOfMultiMatchMember2 *AnyOfMultiMatchMember2 `queryParam:"inline"`

	Type AnyOfMultiMatchType
}

func CreateAnyOfMultiMatchAnyOfMultiMatchMember1(anyOfMultiMatchMember1 AnyOfMultiMatchMember1) AnyOfMultiMatch {
	typ := AnyOfMultiMatchTypeAnyOfMultiMatchMember1

	return AnyOfMultiMatch{
		AnyOfMultiMatchMember1: &anyOfMultiMatchMember1,
		Type:                   typ,
	}
}

func CreateAnyOfMultiMatchAnyOfMultiMatchMember2(anyOfMultiMatchMember2 AnyOfMultiMatchMember2) AnyOfMultiMatch {
	typ := AnyOfMultiMatchTypeAnyOfMultiMatchMember2

	return AnyOfMultiMatch{
		AnyOfMultiMatchMember2: &anyOfMultiMatchMember2,
		Type:                   typ,
	}
}

func (u *AnyOfMultiMatch) UnmarshalJSON(data []byte) error {

	var anyOfMultiMatchMember1 AnyOfMultiMatchMember1 = AnyOfMultiMatchMember1{}
	if err := utils.UnmarshalJSON(data, &anyOfMultiMatchMember1, "", true, true); err == nil {
		u.AnyOfMultiMatchMember1 = &anyOfMultiMatchMember1
		u.Type = AnyOfMultiMatchTypeAnyOfMultiMatchMember1
		return nil
	}

	var anyOfMultiMatchMember2 AnyOfMultiMatchMember2 = AnyOfMultiMatchMember2{}
	if err := utils.UnmarshalJSON(data, &anyOfMultiMatchMember2, "", true, true); err == nil {
		u.AnyOfMultiMatchMember2 = &anyOfMultiMatchMember2
		u.Type = AnyOfMultiMatchTypeAnyOfMultiMatchMember2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for AnyOfMultiMatch", string(data))
}

func (u AnyOfMultiMatch) MarshalJSON() ([]byte, error) {
	if u.AnyOfMultiMatchMember1 != nil {
		return utils.MarshalJSON(u.AnyOfMultiMatchMember1, "", true)
	}

	if u.AnyOfMultiMatchMember2 != nil {
		return utils.MarshalJSON(u.AnyOfMultiMatchMember2, "", true)
	}

	return nil, errors.New("could not marshal union type AnyOfMultiMatch: all fields are null")
}
