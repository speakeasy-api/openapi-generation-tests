// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"openapi/v2/pkg/utils"
)

type ChatCompletionStreamType string

const (
	ChatCompletionStreamTypeChatCompletionEvent ChatCompletionStreamType = "chatCompletionEvent"
	ChatCompletionStreamTypeSentinelEvent       ChatCompletionStreamType = "sentinelEvent"
)

type ChatCompletionStream struct {
	ChatCompletionEvent *ChatCompletionEvent
	SentinelEvent       *SentinelEvent

	Type ChatCompletionStreamType
}

func CreateChatCompletionStreamChatCompletionEvent(chatCompletionEvent ChatCompletionEvent) ChatCompletionStream {
	typ := ChatCompletionStreamTypeChatCompletionEvent

	return ChatCompletionStream{
		ChatCompletionEvent: &chatCompletionEvent,
		Type:                typ,
	}
}

func CreateChatCompletionStreamSentinelEvent(sentinelEvent SentinelEvent) ChatCompletionStream {
	typ := ChatCompletionStreamTypeSentinelEvent

	return ChatCompletionStream{
		SentinelEvent: &sentinelEvent,
		Type:          typ,
	}
}

func (u *ChatCompletionStream) UnmarshalJSON(data []byte) error {

	chatCompletionEvent := ChatCompletionEvent{}
	if err := utils.UnmarshalJSON(data, &chatCompletionEvent, "", true, true); err == nil {
		u.ChatCompletionEvent = &chatCompletionEvent
		u.Type = ChatCompletionStreamTypeChatCompletionEvent
		return nil
	}

	sentinelEvent := SentinelEvent{}
	if err := utils.UnmarshalJSON(data, &sentinelEvent, "", true, true); err == nil {
		u.SentinelEvent = &sentinelEvent
		u.Type = ChatCompletionStreamTypeSentinelEvent
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ChatCompletionStream) MarshalJSON() ([]byte, error) {
	if u.ChatCompletionEvent != nil {
		return utils.MarshalJSON(u.ChatCompletionEvent, "", true)
	}

	if u.SentinelEvent != nil {
		return utils.MarshalJSON(u.SentinelEvent, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
