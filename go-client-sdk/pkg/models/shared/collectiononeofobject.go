// Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"openapi/v2/pkg/utils"
)

type CollectionOneOfObjectType string

const (
	CollectionOneOfObjectTypeMapOfAny   CollectionOneOfObjectType = "mapOfAny"
	CollectionOneOfObjectTypeArrayOfAny CollectionOneOfObjectType = "arrayOfAny"
)

type CollectionOneOfObject struct {
	MapOfAny   map[string]any
	ArrayOfAny []any

	Type CollectionOneOfObjectType
}

func CreateCollectionOneOfObjectMapOfAny(mapOfAny map[string]any) CollectionOneOfObject {
	typ := CollectionOneOfObjectTypeMapOfAny

	return CollectionOneOfObject{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateCollectionOneOfObjectArrayOfAny(arrayOfAny []any) CollectionOneOfObject {
	typ := CollectionOneOfObjectTypeArrayOfAny

	return CollectionOneOfObject{
		ArrayOfAny: arrayOfAny,
		Type:       typ,
	}
}

func (u *CollectionOneOfObject) UnmarshalJSON(data []byte) error {

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, true); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = CollectionOneOfObjectTypeMapOfAny
		return nil
	}

	var arrayOfAny []any = []any{}
	if err := utils.UnmarshalJSON(data, &arrayOfAny, "", true, true); err == nil {
		u.ArrayOfAny = arrayOfAny
		u.Type = CollectionOneOfObjectTypeArrayOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CollectionOneOfObject", string(data))
}

func (u CollectionOneOfObject) MarshalJSON() ([]byte, error) {
	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfAny != nil {
		return utils.MarshalJSON(u.ArrayOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type CollectionOneOfObject: all fields are null")
}
