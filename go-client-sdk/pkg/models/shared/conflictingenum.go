// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Object string

const (
	ObjectObj1 Object = "OBJ1"
	ObjectObj2 Object = "OBJ2"
)

func (e Object) ToPointer() *Object {
	return &e
}
func (e *Object) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OBJ1":
		fallthrough
	case "OBJ2":
		*e = Object(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Object: %v", v)
	}
}

type ConflictingEnum struct {
	Object *Object `json:"object,omitempty"`
}

func (o *ConflictingEnum) GetObject() *Object {
	if o == nil {
		return nil
	}
	return o.Object
}
