// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

type DeepObject struct {
	Any  interface{}             `json:"any" form:"name=any,json" multipartForm:"name=any,json"`
	Arr  []SimpleObject          `json:"arr" form:"name=arr,json" multipartForm:"name=arr,json"`
	Bool bool                    `json:"bool" form:"name=bool" multipartForm:"name=bool"`
	Int  int64                   `json:"int" form:"name=int" multipartForm:"name=int"`
	Map  map[string]SimpleObject `json:"map" form:"name=map,json" multipartForm:"name=map,json"`
	Num  float64                 `json:"num" form:"name=num" multipartForm:"name=num"`
	// A simple object that uses all our supported primitive types and enums and has optional properties.
	Obj  SimpleObject `json:"obj" form:"name=obj,json" multipartForm:"name=obj,json"`
	Str  string       `json:"str" form:"name=str" multipartForm:"name=str"`
	Type *string      `json:"type,omitempty" form:"name=type" multipartForm:"name=type"`
}

func (o *DeepObject) GetAny() interface{} {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *DeepObject) GetArr() []SimpleObject {
	if o == nil {
		return []SimpleObject{}
	}
	return o.Arr
}

func (o *DeepObject) GetBool() bool {
	if o == nil {
		return false
	}
	return o.Bool
}

func (o *DeepObject) GetInt() int64 {
	if o == nil {
		return 0
	}
	return o.Int
}

func (o *DeepObject) GetMap() map[string]SimpleObject {
	if o == nil {
		return map[string]SimpleObject{}
	}
	return o.Map
}

func (o *DeepObject) GetNum() float64 {
	if o == nil {
		return 0.0
	}
	return o.Num
}

func (o *DeepObject) GetObj() SimpleObject {
	if o == nil {
		return SimpleObject{}
	}
	return o.Obj
}

func (o *DeepObject) GetStr() string {
	if o == nil {
		return ""
	}
	return o.Str
}

func (o *DeepObject) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}
