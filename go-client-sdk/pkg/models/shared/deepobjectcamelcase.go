// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"openapi/v3/pkg/utils"
)

type AnyValType string

const (
	AnyValTypeSimpleObjectCamelCase AnyValType = "simpleObjectCamelCase"
	AnyValTypeStr                   AnyValType = "str"
)

type AnyVal struct {
	SimpleObjectCamelCase *SimpleObjectCamelCase
	Str                   *string

	Type AnyValType
}

func CreateAnyValSimpleObjectCamelCase(simpleObjectCamelCase SimpleObjectCamelCase) AnyVal {
	typ := AnyValTypeSimpleObjectCamelCase

	return AnyVal{
		SimpleObjectCamelCase: &simpleObjectCamelCase,
		Type:                  typ,
	}
}

func CreateAnyValStr(str string) AnyVal {
	typ := AnyValTypeStr

	return AnyVal{
		Str:  &str,
		Type: typ,
	}
}

func (u *AnyVal) UnmarshalJSON(data []byte) error {

	simpleObjectCamelCase := SimpleObjectCamelCase{}
	if err := utils.UnmarshalJSON(data, &simpleObjectCamelCase, "", true, true); err == nil {
		u.SimpleObjectCamelCase = &simpleObjectCamelCase
		u.Type = AnyValTypeSimpleObjectCamelCase
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = AnyValTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u AnyVal) MarshalJSON() ([]byte, error) {
	if u.SimpleObjectCamelCase != nil {
		return utils.MarshalJSON(u.SimpleObjectCamelCase, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type DeepObjectCamelCase struct {
	AnyVal  AnyVal                           `json:"any_val"`
	ArrVal  []SimpleObjectCamelCase          `json:"arr_val"`
	BoolVal bool                             `json:"bool_val"`
	IntVal  int64                            `json:"int_val"`
	MapVal  map[string]SimpleObjectCamelCase `json:"map_val"`
	NumVal  float64                          `json:"num_val"`
	// A simple object that uses all our supported primitive types and enums and has optional properties.
	ObjVal SimpleObjectCamelCase `json:"obj_val"`
	StrVal string                `json:"str_val"`
	Type   *string               `json:"type,omitempty"`
}

func (o *DeepObjectCamelCase) GetAnyVal() AnyVal {
	if o == nil {
		return AnyVal{}
	}
	return o.AnyVal
}

func (o *DeepObjectCamelCase) GetArrVal() []SimpleObjectCamelCase {
	if o == nil {
		return []SimpleObjectCamelCase{}
	}
	return o.ArrVal
}

func (o *DeepObjectCamelCase) GetBoolVal() bool {
	if o == nil {
		return false
	}
	return o.BoolVal
}

func (o *DeepObjectCamelCase) GetIntVal() int64 {
	if o == nil {
		return 0
	}
	return o.IntVal
}

func (o *DeepObjectCamelCase) GetMapVal() map[string]SimpleObjectCamelCase {
	if o == nil {
		return map[string]SimpleObjectCamelCase{}
	}
	return o.MapVal
}

func (o *DeepObjectCamelCase) GetNumVal() float64 {
	if o == nil {
		return 0.0
	}
	return o.NumVal
}

func (o *DeepObjectCamelCase) GetObjVal() SimpleObjectCamelCase {
	if o == nil {
		return SimpleObjectCamelCase{}
	}
	return o.ObjVal
}

func (o *DeepObjectCamelCase) GetStrVal() string {
	if o == nil {
		return ""
	}
	return o.StrVal
}

func (o *DeepObjectCamelCase) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}
