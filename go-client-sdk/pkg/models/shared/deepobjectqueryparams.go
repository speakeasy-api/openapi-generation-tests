// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"openapi/v2/pkg/utils"
)

type OneofType string

const (
	OneofTypeStr     OneofType = "str"
	OneofTypeInteger OneofType = "integer"
)

type Oneof struct {
	Str     *string
	Integer *int64

	Type OneofType
}

func CreateOneofStr(str string) Oneof {
	typ := OneofTypeStr

	return Oneof{
		Str:  &str,
		Type: typ,
	}
}

func CreateOneofInteger(integer int64) Oneof {
	typ := OneofTypeInteger

	return Oneof{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *Oneof) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = OneofTypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = OneofTypeInteger
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Oneof", string(data))
}

func (u Oneof) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	return nil, errors.New("could not marshal union type Oneof: all fields are null")
}

type Two struct {
	Nested *string `queryParam:"name=nested"`
}

func (o *Two) GetNested() *string {
	if o == nil {
		return nil
	}
	return o.Nested
}

type OneofnestedobjectType string

const (
	OneofnestedobjectTypeStr OneofnestedobjectType = "str"
	OneofnestedobjectTypeTwo OneofnestedobjectType = "2"
)

type Oneofnestedobject struct {
	Str *string
	Two *Two

	Type OneofnestedobjectType
}

func CreateOneofnestedobjectStr(str string) Oneofnestedobject {
	typ := OneofnestedobjectTypeStr

	return Oneofnestedobject{
		Str:  &str,
		Type: typ,
	}
}

func CreateOneofnestedobjectTwo(two Two) Oneofnestedobject {
	typ := OneofnestedobjectTypeTwo

	return Oneofnestedobject{
		Two:  &two,
		Type: typ,
	}
}

func (u *Oneofnestedobject) UnmarshalJSON(data []byte) error {

	var two Two = Two{}
	if err := utils.UnmarshalJSON(data, &two, "", true, true); err == nil {
		u.Two = &two
		u.Type = OneofnestedobjectTypeTwo
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = OneofnestedobjectTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Oneofnestedobject", string(data))
}

func (u Oneofnestedobject) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Two != nil {
		return utils.MarshalJSON(u.Two, "", true)
	}

	return nil, errors.New("could not marshal union type Oneofnestedobject: all fields are null")
}

// DeepObjectQueryParams - deepObject style query parameter serialization is undefined for arrays or nested objects by the specification:
//
//	https://github.com/OAI/OpenAPI-Specification/issues/1706
//
// This schema covers the intended implementation cases rather than the fully complex deepObject schema.
type DeepObjectQueryParams struct {
	Arr  []string          `queryParam:"name=arr"`
	Bool bool              `queryParam:"name=bool"`
	Int  int64             `queryParam:"name=int"`
	Map  map[string]string `queryParam:"name=map"`
	Num  float64           `queryParam:"name=num"`
	// A simple object that uses all our supported primitive types and enums and has optional properties.
	Obj               SimpleObject       `queryParam:"name=obj"`
	Oneof             *Oneof             `queryParam:"name=oneof"`
	Oneofnestedobject *Oneofnestedobject `queryParam:"name=oneofnestedobject"`
	Str               string             `queryParam:"name=str"`
}

func (o *DeepObjectQueryParams) GetArr() []string {
	if o == nil {
		return []string{}
	}
	return o.Arr
}

func (o *DeepObjectQueryParams) GetBool() bool {
	if o == nil {
		return false
	}
	return o.Bool
}

func (o *DeepObjectQueryParams) GetInt() int64 {
	if o == nil {
		return 0
	}
	return o.Int
}

func (o *DeepObjectQueryParams) GetMap() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Map
}

func (o *DeepObjectQueryParams) GetNum() float64 {
	if o == nil {
		return 0.0
	}
	return o.Num
}

func (o *DeepObjectQueryParams) GetObj() SimpleObject {
	if o == nil {
		return SimpleObject{}
	}
	return o.Obj
}

func (o *DeepObjectQueryParams) GetOneof() *Oneof {
	if o == nil {
		return nil
	}
	return o.Oneof
}

func (o *DeepObjectQueryParams) GetOneofnestedobject() *Oneofnestedobject {
	if o == nil {
		return nil
	}
	return o.Oneofnestedobject
}

func (o *DeepObjectQueryParams) GetStr() string {
	if o == nil {
		return ""
	}
	return o.Str
}
