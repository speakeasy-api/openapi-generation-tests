// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"openapi/v2/pkg/utils"
)

type DeepObjectSmallerAnyType string

const (
	DeepObjectSmallerAnyTypeSimpleObject DeepObjectSmallerAnyType = "simpleObject"
	DeepObjectSmallerAnyTypeStr          DeepObjectSmallerAnyType = "str"
)

type DeepObjectSmallerAny struct {
	SimpleObject *SimpleObject
	Str          *string

	Type DeepObjectSmallerAnyType
}

func CreateDeepObjectSmallerAnySimpleObject(simpleObject SimpleObject) DeepObjectSmallerAny {
	typ := DeepObjectSmallerAnyTypeSimpleObject

	return DeepObjectSmallerAny{
		SimpleObject: &simpleObject,
		Type:         typ,
	}
}

func CreateDeepObjectSmallerAnyStr(str string) DeepObjectSmallerAny {
	typ := DeepObjectSmallerAnyTypeStr

	return DeepObjectSmallerAny{
		Str:  &str,
		Type: typ,
	}
}

func (u *DeepObjectSmallerAny) UnmarshalJSON(data []byte) error {

	var simpleObject SimpleObject = SimpleObject{}
	if err := utils.UnmarshalJSON(data, &simpleObject, "", true, true); err == nil {
		u.SimpleObject = &simpleObject
		u.Type = DeepObjectSmallerAnyTypeSimpleObject
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = DeepObjectSmallerAnyTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DeepObjectSmallerAny", string(data))
}

func (u DeepObjectSmallerAny) MarshalJSON() ([]byte, error) {
	if u.SimpleObject != nil {
		return utils.MarshalJSON(u.SimpleObject, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type DeepObjectSmallerAny: all fields are null")
}

type DeepObjectSmaller struct {
	Any  DeepObjectSmallerAny    `json:"any"`
	Arr  []SimpleObject          `json:"arr"`
	Bool bool                    `json:"bool"`
	Int  int64                   `json:"int"`
	Map  map[string]SimpleObject `json:"map"`
	Num  float64                 `json:"num"`
	// A simple object that uses all our supported primitive types and enums and has optional properties.
	Obj  SimpleObject `json:"obj"`
	Str  string       `json:"str"`
	Type *string      `json:"type,omitempty"`
}

func (o *DeepObjectSmaller) GetAny() DeepObjectSmallerAny {
	if o == nil {
		return DeepObjectSmallerAny{}
	}
	return o.Any
}

func (o *DeepObjectSmaller) GetArr() []SimpleObject {
	if o == nil {
		return []SimpleObject{}
	}
	return o.Arr
}

func (o *DeepObjectSmaller) GetBool() bool {
	if o == nil {
		return false
	}
	return o.Bool
}

func (o *DeepObjectSmaller) GetInt() int64 {
	if o == nil {
		return 0
	}
	return o.Int
}

func (o *DeepObjectSmaller) GetMap() map[string]SimpleObject {
	if o == nil {
		return map[string]SimpleObject{}
	}
	return o.Map
}

func (o *DeepObjectSmaller) GetNum() float64 {
	if o == nil {
		return 0.0
	}
	return o.Num
}

func (o *DeepObjectSmaller) GetObj() SimpleObject {
	if o == nil {
		return SimpleObject{}
	}
	return o.Obj
}

func (o *DeepObjectSmaller) GetStr() string {
	if o == nil {
		return ""
	}
	return o.Str
}

func (o *DeepObjectSmaller) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}
