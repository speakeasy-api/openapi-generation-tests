// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/ericlagergren/decimal"
	"math/big"
	"openapi/pkg/types"
	"time"
)

type DefaultsAndConstsConstEnumInt int64

const (
	DefaultsAndConstsConstEnumIntOne   DefaultsAndConstsConstEnumInt = 1
	DefaultsAndConstsConstEnumIntTwo   DefaultsAndConstsConstEnumInt = 2
	DefaultsAndConstsConstEnumIntThree DefaultsAndConstsConstEnumInt = 3
)

func (e DefaultsAndConstsConstEnumInt) ToPointer() *DefaultsAndConstsConstEnumInt {
	return &e
}

func (e *DefaultsAndConstsConstEnumInt) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		*e = DefaultsAndConstsConstEnumInt(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DefaultsAndConstsConstEnumInt: %v", v)
	}
}

type DefaultsAndConstsConstEnumStr string

const (
	DefaultsAndConstsConstEnumStrOne   DefaultsAndConstsConstEnumStr = "one"
	DefaultsAndConstsConstEnumStrTwo   DefaultsAndConstsConstEnumStr = "two"
	DefaultsAndConstsConstEnumStrThree DefaultsAndConstsConstEnumStr = "three"
)

func (e DefaultsAndConstsConstEnumStr) ToPointer() *DefaultsAndConstsConstEnumStr {
	return &e
}

func (e *DefaultsAndConstsConstEnumStr) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "one":
		fallthrough
	case "two":
		fallthrough
	case "three":
		*e = DefaultsAndConstsConstEnumStr(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DefaultsAndConstsConstEnumStr: %v", v)
	}
}

type DefaultsAndConstsDefaultEnumInt int64

const (
	DefaultsAndConstsDefaultEnumIntOne   DefaultsAndConstsDefaultEnumInt = 1
	DefaultsAndConstsDefaultEnumIntTwo   DefaultsAndConstsDefaultEnumInt = 2
	DefaultsAndConstsDefaultEnumIntThree DefaultsAndConstsDefaultEnumInt = 3
)

func (e DefaultsAndConstsDefaultEnumInt) ToPointer() *DefaultsAndConstsDefaultEnumInt {
	return &e
}

func (e *DefaultsAndConstsDefaultEnumInt) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		*e = DefaultsAndConstsDefaultEnumInt(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DefaultsAndConstsDefaultEnumInt: %v", v)
	}
}

type DefaultsAndConstsDefaultEnumStr string

const (
	DefaultsAndConstsDefaultEnumStrOne   DefaultsAndConstsDefaultEnumStr = "one"
	DefaultsAndConstsDefaultEnumStrTwo   DefaultsAndConstsDefaultEnumStr = "two"
	DefaultsAndConstsDefaultEnumStrThree DefaultsAndConstsDefaultEnumStr = "three"
)

func (e DefaultsAndConstsDefaultEnumStr) ToPointer() *DefaultsAndConstsDefaultEnumStr {
	return &e
}

func (e *DefaultsAndConstsDefaultEnumStr) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "one":
		fallthrough
	case "two":
		fallthrough
	case "three":
		*e = DefaultsAndConstsDefaultEnumStr(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DefaultsAndConstsDefaultEnumStr: %v", v)
	}
}

type DefaultsAndConstsSingleEnumConstStr string

const (
	DefaultsAndConstsSingleEnumConstStrOne DefaultsAndConstsSingleEnumConstStr = "one"
)

func (e DefaultsAndConstsSingleEnumConstStr) ToPointer() *DefaultsAndConstsSingleEnumConstStr {
	return &e
}

func (e *DefaultsAndConstsSingleEnumConstStr) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "one":
		*e = DefaultsAndConstsSingleEnumConstStr(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DefaultsAndConstsSingleEnumConstStr: %v", v)
	}
}

type DefaultsAndConsts struct {
	ConstBigInt         *big.Int                            `json:"constBigInt"`
	ConstBigIntStr      types.BigInt                        `json:"constBigIntStr"`
	ConstBool           bool                                `json:"constBool"`
	ConstDate           types.Date                          `json:"constDate"`
	ConstDateTime       time.Time                           `json:"constDateTime"`
	ConstDecimal        types.Decimal                       `json:"constDecimal"`
	ConstDecimalStr     *decimal.Big                        `json:"constDecimalStr"`
	ConstEnumInt        DefaultsAndConstsConstEnumInt       `json:"constEnumInt"`
	ConstEnumStr        DefaultsAndConstsConstEnumStr       `json:"constEnumStr"`
	ConstInt            int64                               `json:"constInt"`
	ConstNum            float64                             `json:"constNum"`
	ConstStr            string                              `json:"constStr"`
	ConstStrNull        *string                             `json:"constStrNull"`
	DefaultBigInt       *big.Int                            `json:"defaultBigInt"`
	DefaultBigIntStr    types.BigInt                        `json:"defaultBigIntStr"`
	DefaultBool         bool                                `json:"defaultBool"`
	DefaultDate         types.Date                          `json:"defaultDate"`
	DefaultDateTime     time.Time                           `json:"defaultDateTime"`
	DefaultDecimal      types.Decimal                       `json:"defaultDecimal"`
	DefaultDecimalStr   *decimal.Big                        `json:"defaultDecimalStr"`
	DefaultEnumInt      DefaultsAndConstsDefaultEnumInt     `json:"defaultEnumInt"`
	DefaultEnumStr      DefaultsAndConstsDefaultEnumStr     `json:"defaultEnumStr"`
	DefaultInt          int64                               `json:"defaultInt"`
	DefaultNum          float64                             `json:"defaultNum"`
	DefaultStr          string                              `json:"defaultStr"`
	DefaultStrNullable  *string                             `json:"defaultStrNullable"`
	DefaultStrOptional  *string                             `json:"defaultStrOptional,omitempty"`
	NormalField         string                              `json:"normalField"`
	SingleEnumConstBool bool                                `json:"singleEnumConstBool"`
	SingleEnumConstStr  DefaultsAndConstsSingleEnumConstStr `json:"singleEnumConstStr"`
}

func (o *DefaultsAndConsts) GetConstBigInt() *big.Int {
	if o == nil {
		return big.NewInt(0)
	}
	return o.ConstBigInt
}

func (o *DefaultsAndConsts) GetConstBigIntStr() types.BigInt {
	if o == nil {
		return types.BigInt{Int: *big.NewInt(0)}
	}
	return o.ConstBigIntStr
}

func (o *DefaultsAndConsts) GetConstBool() bool {
	if o == nil {
		return false
	}
	return o.ConstBool
}

func (o *DefaultsAndConsts) GetConstDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.ConstDate
}

func (o *DefaultsAndConsts) GetConstDateTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ConstDateTime
}

func (o *DefaultsAndConsts) GetConstDecimal() types.Decimal {
	if o == nil {
		return types.Decimal{Big: *(new(decimal.Big).SetFloat64(0.0))}
	}
	return o.ConstDecimal
}

func (o *DefaultsAndConsts) GetConstDecimalStr() *decimal.Big {
	if o == nil {
		return new(decimal.Big).SetFloat64(0.0)
	}
	return o.ConstDecimalStr
}

func (o *DefaultsAndConsts) GetConstEnumInt() DefaultsAndConstsConstEnumInt {
	if o == nil {
		return DefaultsAndConstsConstEnumInt(0)
	}
	return o.ConstEnumInt
}

func (o *DefaultsAndConsts) GetConstEnumStr() DefaultsAndConstsConstEnumStr {
	if o == nil {
		return DefaultsAndConstsConstEnumStr("")
	}
	return o.ConstEnumStr
}

func (o *DefaultsAndConsts) GetConstInt() int64 {
	if o == nil {
		return 0
	}
	return o.ConstInt
}

func (o *DefaultsAndConsts) GetConstNum() float64 {
	if o == nil {
		return 0.0
	}
	return o.ConstNum
}

func (o *DefaultsAndConsts) GetConstStr() string {
	if o == nil {
		return ""
	}
	return o.ConstStr
}

func (o *DefaultsAndConsts) GetConstStrNull() *string {
	if o == nil {
		return nil
	}
	return o.ConstStrNull
}

func (o *DefaultsAndConsts) GetDefaultBigInt() *big.Int {
	if o == nil {
		return big.NewInt(0)
	}
	return o.DefaultBigInt
}

func (o *DefaultsAndConsts) GetDefaultBigIntStr() types.BigInt {
	if o == nil {
		return types.BigInt{Int: *big.NewInt(0)}
	}
	return o.DefaultBigIntStr
}

func (o *DefaultsAndConsts) GetDefaultBool() bool {
	if o == nil {
		return false
	}
	return o.DefaultBool
}

func (o *DefaultsAndConsts) GetDefaultDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.DefaultDate
}

func (o *DefaultsAndConsts) GetDefaultDateTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.DefaultDateTime
}

func (o *DefaultsAndConsts) GetDefaultDecimal() types.Decimal {
	if o == nil {
		return types.Decimal{Big: *(new(decimal.Big).SetFloat64(0.0))}
	}
	return o.DefaultDecimal
}

func (o *DefaultsAndConsts) GetDefaultDecimalStr() *decimal.Big {
	if o == nil {
		return new(decimal.Big).SetFloat64(0.0)
	}
	return o.DefaultDecimalStr
}

func (o *DefaultsAndConsts) GetDefaultEnumInt() DefaultsAndConstsDefaultEnumInt {
	if o == nil {
		return DefaultsAndConstsDefaultEnumInt(0)
	}
	return o.DefaultEnumInt
}

func (o *DefaultsAndConsts) GetDefaultEnumStr() DefaultsAndConstsDefaultEnumStr {
	if o == nil {
		return DefaultsAndConstsDefaultEnumStr("")
	}
	return o.DefaultEnumStr
}

func (o *DefaultsAndConsts) GetDefaultInt() int64 {
	if o == nil {
		return 0
	}
	return o.DefaultInt
}

func (o *DefaultsAndConsts) GetDefaultNum() float64 {
	if o == nil {
		return 0.0
	}
	return o.DefaultNum
}

func (o *DefaultsAndConsts) GetDefaultStr() string {
	if o == nil {
		return ""
	}
	return o.DefaultStr
}

func (o *DefaultsAndConsts) GetDefaultStrNullable() *string {
	if o == nil {
		return nil
	}
	return o.DefaultStrNullable
}

func (o *DefaultsAndConsts) GetDefaultStrOptional() *string {
	if o == nil {
		return nil
	}
	return o.DefaultStrOptional
}

func (o *DefaultsAndConsts) GetNormalField() string {
	if o == nil {
		return ""
	}
	return o.NormalField
}

func (o *DefaultsAndConsts) GetSingleEnumConstBool() bool {
	if o == nil {
		return false
	}
	return o.SingleEnumConstBool
}

func (o *DefaultsAndConsts) GetSingleEnumConstStr() DefaultsAndConstsSingleEnumConstStr {
	if o == nil {
		return DefaultsAndConstsSingleEnumConstStr("")
	}
	return o.SingleEnumConstStr
}
