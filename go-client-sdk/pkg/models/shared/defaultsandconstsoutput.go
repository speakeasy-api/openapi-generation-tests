// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/ericlagergren/decimal"
	"math/big"
	"openapi/pkg/types"
	"time"
)

type DefaultsAndConstsOutputConstEnumInt int64

const (
	DefaultsAndConstsOutputConstEnumIntOne   DefaultsAndConstsOutputConstEnumInt = 1
	DefaultsAndConstsOutputConstEnumIntTwo   DefaultsAndConstsOutputConstEnumInt = 2
	DefaultsAndConstsOutputConstEnumIntThree DefaultsAndConstsOutputConstEnumInt = 3
)

func (e DefaultsAndConstsOutputConstEnumInt) ToPointer() *DefaultsAndConstsOutputConstEnumInt {
	return &e
}

func (e *DefaultsAndConstsOutputConstEnumInt) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		*e = DefaultsAndConstsOutputConstEnumInt(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DefaultsAndConstsOutputConstEnumInt: %v", v)
	}
}

type DefaultsAndConstsOutputConstEnumStr string

const (
	DefaultsAndConstsOutputConstEnumStrOne   DefaultsAndConstsOutputConstEnumStr = "one"
	DefaultsAndConstsOutputConstEnumStrTwo   DefaultsAndConstsOutputConstEnumStr = "two"
	DefaultsAndConstsOutputConstEnumStrThree DefaultsAndConstsOutputConstEnumStr = "three"
)

func (e DefaultsAndConstsOutputConstEnumStr) ToPointer() *DefaultsAndConstsOutputConstEnumStr {
	return &e
}

func (e *DefaultsAndConstsOutputConstEnumStr) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "one":
		fallthrough
	case "two":
		fallthrough
	case "three":
		*e = DefaultsAndConstsOutputConstEnumStr(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DefaultsAndConstsOutputConstEnumStr: %v", v)
	}
}

type DefaultsAndConstsOutputDefaultEnumInt int64

const (
	DefaultsAndConstsOutputDefaultEnumIntOne   DefaultsAndConstsOutputDefaultEnumInt = 1
	DefaultsAndConstsOutputDefaultEnumIntTwo   DefaultsAndConstsOutputDefaultEnumInt = 2
	DefaultsAndConstsOutputDefaultEnumIntThree DefaultsAndConstsOutputDefaultEnumInt = 3
)

func (e DefaultsAndConstsOutputDefaultEnumInt) ToPointer() *DefaultsAndConstsOutputDefaultEnumInt {
	return &e
}

func (e *DefaultsAndConstsOutputDefaultEnumInt) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		*e = DefaultsAndConstsOutputDefaultEnumInt(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DefaultsAndConstsOutputDefaultEnumInt: %v", v)
	}
}

type DefaultsAndConstsOutputDefaultEnumStr string

const (
	DefaultsAndConstsOutputDefaultEnumStrOne   DefaultsAndConstsOutputDefaultEnumStr = "one"
	DefaultsAndConstsOutputDefaultEnumStrTwo   DefaultsAndConstsOutputDefaultEnumStr = "two"
	DefaultsAndConstsOutputDefaultEnumStrThree DefaultsAndConstsOutputDefaultEnumStr = "three"
)

func (e DefaultsAndConstsOutputDefaultEnumStr) ToPointer() *DefaultsAndConstsOutputDefaultEnumStr {
	return &e
}

func (e *DefaultsAndConstsOutputDefaultEnumStr) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "one":
		fallthrough
	case "two":
		fallthrough
	case "three":
		*e = DefaultsAndConstsOutputDefaultEnumStr(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DefaultsAndConstsOutputDefaultEnumStr: %v", v)
	}
}

type DefaultsAndConstsOutput struct {
	ConstBigInt         *big.Int                              `json:"constBigInt"`
	ConstBigIntStr      types.BigInt                          `json:"constBigIntStr"`
	ConstBool           bool                                  `json:"constBool"`
	ConstDate           types.Date                            `json:"constDate"`
	ConstDateTime       time.Time                             `json:"constDateTime"`
	ConstDecimal        types.Decimal                         `json:"constDecimal"`
	ConstDecimalStr     *decimal.Big                          `json:"constDecimalStr"`
	ConstEnumInt        DefaultsAndConstsOutputConstEnumInt   `json:"constEnumInt"`
	ConstEnumStr        DefaultsAndConstsOutputConstEnumStr   `json:"constEnumStr"`
	ConstInt            int64                                 `json:"constInt"`
	ConstNum            float64                               `json:"constNum"`
	ConstStr            string                                `json:"constStr"`
	ConstStrNull        *string                               `json:"constStrNull"`
	DefaultBigInt       *big.Int                              `json:"defaultBigInt"`
	DefaultBigIntStr    types.BigInt                          `json:"defaultBigIntStr"`
	DefaultBool         bool                                  `json:"defaultBool"`
	DefaultDate         types.Date                            `json:"defaultDate"`
	DefaultDateTime     time.Time                             `json:"defaultDateTime"`
	DefaultDecimal      types.Decimal                         `json:"defaultDecimal"`
	DefaultDecimalStr   *decimal.Big                          `json:"defaultDecimalStr"`
	DefaultEnumInt      DefaultsAndConstsOutputDefaultEnumInt `json:"defaultEnumInt"`
	DefaultEnumStr      DefaultsAndConstsOutputDefaultEnumStr `json:"defaultEnumStr"`
	DefaultInt          int64                                 `json:"defaultInt"`
	DefaultNum          float64                               `json:"defaultNum"`
	DefaultStr          string                                `json:"defaultStr"`
	DefaultStrNullable  *string                               `json:"defaultStrNullable"`
	DefaultStrOptional  *string                               `json:"defaultStrOptional,omitempty"`
	NormalField         string                                `json:"normalField"`
	SingleEnumConstBool bool                                  `json:"singleEnumConstBool"`
	SingleEnumConstStr  string                                `json:"singleEnumConstStr"`
}

func (o *DefaultsAndConstsOutput) GetConstBigInt() *big.Int {
	if o == nil {
		return big.NewInt(0)
	}
	return o.ConstBigInt
}

func (o *DefaultsAndConstsOutput) GetConstBigIntStr() types.BigInt {
	if o == nil {
		return types.BigInt{Int: *big.NewInt(0)}
	}
	return o.ConstBigIntStr
}

func (o *DefaultsAndConstsOutput) GetConstBool() bool {
	if o == nil {
		return false
	}
	return o.ConstBool
}

func (o *DefaultsAndConstsOutput) GetConstDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.ConstDate
}

func (o *DefaultsAndConstsOutput) GetConstDateTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ConstDateTime
}

func (o *DefaultsAndConstsOutput) GetConstDecimal() types.Decimal {
	if o == nil {
		return types.Decimal{Big: *(new(decimal.Big).SetFloat64(0.0))}
	}
	return o.ConstDecimal
}

func (o *DefaultsAndConstsOutput) GetConstDecimalStr() *decimal.Big {
	if o == nil {
		return new(decimal.Big).SetFloat64(0.0)
	}
	return o.ConstDecimalStr
}

func (o *DefaultsAndConstsOutput) GetConstEnumInt() DefaultsAndConstsOutputConstEnumInt {
	if o == nil {
		return DefaultsAndConstsOutputConstEnumInt(0)
	}
	return o.ConstEnumInt
}

func (o *DefaultsAndConstsOutput) GetConstEnumStr() DefaultsAndConstsOutputConstEnumStr {
	if o == nil {
		return DefaultsAndConstsOutputConstEnumStr("")
	}
	return o.ConstEnumStr
}

func (o *DefaultsAndConstsOutput) GetConstInt() int64 {
	if o == nil {
		return 0
	}
	return o.ConstInt
}

func (o *DefaultsAndConstsOutput) GetConstNum() float64 {
	if o == nil {
		return 0.0
	}
	return o.ConstNum
}

func (o *DefaultsAndConstsOutput) GetConstStr() string {
	if o == nil {
		return ""
	}
	return o.ConstStr
}

func (o *DefaultsAndConstsOutput) GetConstStrNull() *string {
	if o == nil {
		return nil
	}
	return o.ConstStrNull
}

func (o *DefaultsAndConstsOutput) GetDefaultBigInt() *big.Int {
	if o == nil {
		return big.NewInt(0)
	}
	return o.DefaultBigInt
}

func (o *DefaultsAndConstsOutput) GetDefaultBigIntStr() types.BigInt {
	if o == nil {
		return types.BigInt{Int: *big.NewInt(0)}
	}
	return o.DefaultBigIntStr
}

func (o *DefaultsAndConstsOutput) GetDefaultBool() bool {
	if o == nil {
		return false
	}
	return o.DefaultBool
}

func (o *DefaultsAndConstsOutput) GetDefaultDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.DefaultDate
}

func (o *DefaultsAndConstsOutput) GetDefaultDateTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.DefaultDateTime
}

func (o *DefaultsAndConstsOutput) GetDefaultDecimal() types.Decimal {
	if o == nil {
		return types.Decimal{Big: *(new(decimal.Big).SetFloat64(0.0))}
	}
	return o.DefaultDecimal
}

func (o *DefaultsAndConstsOutput) GetDefaultDecimalStr() *decimal.Big {
	if o == nil {
		return new(decimal.Big).SetFloat64(0.0)
	}
	return o.DefaultDecimalStr
}

func (o *DefaultsAndConstsOutput) GetDefaultEnumInt() DefaultsAndConstsOutputDefaultEnumInt {
	if o == nil {
		return DefaultsAndConstsOutputDefaultEnumInt(0)
	}
	return o.DefaultEnumInt
}

func (o *DefaultsAndConstsOutput) GetDefaultEnumStr() DefaultsAndConstsOutputDefaultEnumStr {
	if o == nil {
		return DefaultsAndConstsOutputDefaultEnumStr("")
	}
	return o.DefaultEnumStr
}

func (o *DefaultsAndConstsOutput) GetDefaultInt() int64 {
	if o == nil {
		return 0
	}
	return o.DefaultInt
}

func (o *DefaultsAndConstsOutput) GetDefaultNum() float64 {
	if o == nil {
		return 0.0
	}
	return o.DefaultNum
}

func (o *DefaultsAndConstsOutput) GetDefaultStr() string {
	if o == nil {
		return ""
	}
	return o.DefaultStr
}

func (o *DefaultsAndConstsOutput) GetDefaultStrNullable() *string {
	if o == nil {
		return nil
	}
	return o.DefaultStrNullable
}

func (o *DefaultsAndConstsOutput) GetDefaultStrOptional() *string {
	if o == nil {
		return nil
	}
	return o.DefaultStrOptional
}

func (o *DefaultsAndConstsOutput) GetNormalField() string {
	if o == nil {
		return ""
	}
	return o.NormalField
}

func (o *DefaultsAndConstsOutput) GetSingleEnumConstBool() bool {
	if o == nil {
		return false
	}
	return o.SingleEnumConstBool
}

func (o *DefaultsAndConstsOutput) GetSingleEnumConstStr() string {
	if o == nil {
		return ""
	}
	return o.SingleEnumConstStr
}
