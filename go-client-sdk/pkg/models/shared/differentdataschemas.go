// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"openapi/v2/pkg/utils"
)

type DifferentDataSchemasDataType string

const (
	DifferentDataSchemasDataTypeMessageEvent DifferentDataSchemasDataType = "messageEvent"
	DifferentDataSchemasDataTypeURLEvent     DifferentDataSchemasDataType = "urlEvent"
)

type DifferentDataSchemasData struct {
	MessageEvent *MessageEvent
	URLEvent     *URLEvent

	Type DifferentDataSchemasDataType
}

func CreateDifferentDataSchemasDataMessageEvent(messageEvent MessageEvent) DifferentDataSchemasData {
	typ := DifferentDataSchemasDataTypeMessageEvent

	return DifferentDataSchemasData{
		MessageEvent: &messageEvent,
		Type:         typ,
	}
}

func CreateDifferentDataSchemasDataURLEvent(urlEvent URLEvent) DifferentDataSchemasData {
	typ := DifferentDataSchemasDataTypeURLEvent

	return DifferentDataSchemasData{
		URLEvent: &urlEvent,
		Type:     typ,
	}
}

func (u *DifferentDataSchemasData) UnmarshalJSON(data []byte) error {

	messageEvent := MessageEvent{}
	if err := utils.UnmarshalJSON(data, &messageEvent, "", true, true); err == nil {
		u.MessageEvent = &messageEvent
		u.Type = DifferentDataSchemasDataTypeMessageEvent
		return nil
	}

	urlEvent := URLEvent{}
	if err := utils.UnmarshalJSON(data, &urlEvent, "", true, true); err == nil {
		u.URLEvent = &urlEvent
		u.Type = DifferentDataSchemasDataTypeURLEvent
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DifferentDataSchemasData) MarshalJSON() ([]byte, error) {
	if u.MessageEvent != nil {
		return utils.MarshalJSON(u.MessageEvent, "", true)
	}

	if u.URLEvent != nil {
		return utils.MarshalJSON(u.URLEvent, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type Event string

const (
	EventMessage Event = "message"
	EventURL     Event = "url"
)

func (e Event) ToPointer() *Event {
	return &e
}

func (e *Event) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "message":
		fallthrough
	case "url":
		*e = Event(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Event: %v", v)
	}
}

// DifferentDataSchemas - Represents an event with different schemas for the data property
type DifferentDataSchemas struct {
	Data  DifferentDataSchemasData `json:"data"`
	Event Event                    `json:"event"`
	ID    string                   `json:"id"`
}

func (o *DifferentDataSchemas) GetData() DifferentDataSchemasData {
	if o == nil {
		return DifferentDataSchemasData{}
	}
	return o.Data
}

func (o *DifferentDataSchemas) GetEvent() Event {
	if o == nil {
		return Event("")
	}
	return o.Event
}

func (o *DifferentDataSchemas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o DifferentDataSchemas) GetEventEncoding(event string) (string, error) {
	return "application/json", nil
}
