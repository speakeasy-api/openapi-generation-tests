// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/v3/pkg/utils"
	"time"
)

type Type string

const (
	TypeBoat Type = "boat"
)

func (e Type) ToPointer() *Type {
	return &e
}

func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "boat":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type ExampleBoat struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Length    float64    `json:"length"`
	Name      string     `json:"name"`
	Type      Type       `json:"type"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

func (e ExampleBoat) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *ExampleBoat) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ExampleBoat) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ExampleBoat) GetLength() float64 {
	if o == nil {
		return 0.0
	}
	return o.Length
}

func (o *ExampleBoat) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ExampleBoat) GetType() Type {
	if o == nil {
		return Type("")
	}
	return o.Type
}

func (o *ExampleBoat) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
