// Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/v2/pkg/utils"
	"time"
)

type Chocolates struct {
	Description string `json:"description"`
}

func (o *Chocolates) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

type EnumNumber int64

const (
	EnumNumberOne   EnumNumber = 1
	EnumNumberTwo   EnumNumber = 2
	EnumNumberThree EnumNumber = 3
)

func (e EnumNumber) ToPointer() *EnumNumber {
	return &e
}
func (e *EnumNumber) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		*e = EnumNumber(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EnumNumber: %v", v)
	}
}

type EnumStr string

const (
	EnumStrOne   EnumStr = "one"
	EnumStrTwo   EnumStr = "two"
	EnumStrThree EnumStr = "three"
)

func (e EnumStr) ToPointer() *EnumStr {
	return &e
}
func (e *EnumStr) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "one":
		fallthrough
	case "two":
		fallthrough
	case "three":
		*e = EnumStr(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EnumStr: %v", v)
	}
}

type InlineObject struct {
	InlineName *string `json:"inline_name,omitempty"`
}

func (o *InlineObject) GetInlineName() *string {
	if o == nil {
		return nil
	}
	return o.InlineName
}

type ExampleResource struct {
	ArrayOfNumber []float64         `json:"arrayOfNumber,omitempty"`
	ArrayOfString []string          `json:"arrayOfString,omitempty"`
	Chocolates    []Chocolates      `json:"chocolates"`
	CreatedAt     *time.Time        `json:"createdAt,omitempty"`
	EnumNumber    *EnumNumber       `json:"enumNumber,omitempty"`
	EnumStr       *EnumStr          `json:"enumStr,omitempty"`
	ID            string            `json:"id"`
	InlineObject  *InlineObject     `json:"inlineObject,omitempty"`
	MapOfInteger  map[string]int64  `json:"mapOfInteger,omitempty"`
	MapOfString   map[string]string `json:"mapOfString,omitempty"`
	Name          string            `json:"name"`
	NamePrefix    *string           `json:"name_prefix,omitempty"`
	UpdatedAt     *time.Time        `json:"updatedAt,omitempty"`
	Vehicle       ExampleVehicle    `json:"vehicle"`
}

func (e ExampleResource) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *ExampleResource) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ExampleResource) GetArrayOfNumber() []float64 {
	if o == nil {
		return nil
	}
	return o.ArrayOfNumber
}

func (o *ExampleResource) GetArrayOfString() []string {
	if o == nil {
		return nil
	}
	return o.ArrayOfString
}

func (o *ExampleResource) GetChocolates() []Chocolates {
	if o == nil {
		return []Chocolates{}
	}
	return o.Chocolates
}

func (o *ExampleResource) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ExampleResource) GetEnumNumber() *EnumNumber {
	if o == nil {
		return nil
	}
	return o.EnumNumber
}

func (o *ExampleResource) GetEnumStr() *EnumStr {
	if o == nil {
		return nil
	}
	return o.EnumStr
}

func (o *ExampleResource) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ExampleResource) GetInlineObject() *InlineObject {
	if o == nil {
		return nil
	}
	return o.InlineObject
}

func (o *ExampleResource) GetMapOfInteger() map[string]int64 {
	if o == nil {
		return nil
	}
	return o.MapOfInteger
}

func (o *ExampleResource) GetMapOfString() map[string]string {
	if o == nil {
		return nil
	}
	return o.MapOfString
}

func (o *ExampleResource) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ExampleResource) GetNamePrefix() *string {
	if o == nil {
		return nil
	}
	return o.NamePrefix
}

func (o *ExampleResource) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *ExampleResource) GetVehicle() ExampleVehicle {
	if o == nil {
		return ExampleVehicle{}
	}
	return o.Vehicle
}
