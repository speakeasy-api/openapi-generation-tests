// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"openapi/v2/pkg/utils"
)

type InfectedWithAnyDataType string

const (
	InfectedWithAnyDataTypeSimpleObject InfectedWithAnyDataType = "simpleObject"
	InfectedWithAnyDataTypeDeepObject   InfectedWithAnyDataType = "deepObject"
	InfectedWithAnyDataTypeAny          InfectedWithAnyDataType = "any"
)

type InfectedWithAnyData struct {
	SimpleObject *SimpleObject
	DeepObject   *DeepObject
	Any          any

	Type InfectedWithAnyDataType
}

func CreateInfectedWithAnyDataSimpleObject(simpleObject SimpleObject) InfectedWithAnyData {
	typ := InfectedWithAnyDataTypeSimpleObject

	return InfectedWithAnyData{
		SimpleObject: &simpleObject,
		Type:         typ,
	}
}

func CreateInfectedWithAnyDataDeepObject(deepObject DeepObject) InfectedWithAnyData {
	typ := InfectedWithAnyDataTypeDeepObject

	return InfectedWithAnyData{
		DeepObject: &deepObject,
		Type:       typ,
	}
}

func CreateInfectedWithAnyDataAny(any any) InfectedWithAnyData {
	typ := InfectedWithAnyDataTypeAny

	return InfectedWithAnyData{
		Any:  any,
		Type: typ,
	}
}

func (u *InfectedWithAnyData) UnmarshalJSON(data []byte) error {

	var deepObject DeepObject = DeepObject{}
	if err := utils.UnmarshalJSON(data, &deepObject, "", true, true); err == nil {
		u.DeepObject = &deepObject
		u.Type = InfectedWithAnyDataTypeDeepObject
		return nil
	}

	var simpleObject SimpleObject = SimpleObject{}
	if err := utils.UnmarshalJSON(data, &simpleObject, "", true, true); err == nil {
		u.SimpleObject = &simpleObject
		u.Type = InfectedWithAnyDataTypeSimpleObject
		return nil
	}

	var any any = nil
	if err := utils.UnmarshalJSON(data, &any, "", true, true); err == nil {
		u.Any = any
		u.Type = InfectedWithAnyDataTypeAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for InfectedWithAnyData", string(data))
}

func (u InfectedWithAnyData) MarshalJSON() ([]byte, error) {
	if u.SimpleObject != nil {
		return utils.MarshalJSON(u.SimpleObject, "", true)
	}

	if u.DeepObject != nil {
		return utils.MarshalJSON(u.DeepObject, "", true)
	}

	if u.Any != nil {
		return utils.MarshalJSON(u.Any, "", true)
	}

	return nil, errors.New("could not marshal union type InfectedWithAnyData: all fields are null")
}

type InfectedWithAny struct {
	Data InfectedWithAnyData `json:"data"`
}

func (o *InfectedWithAny) GetData() InfectedWithAnyData {
	if o == nil {
		return InfectedWithAnyData{}
	}
	return o.Data
}
