// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"openapi/v2/pkg/utils"
)

type MixedUnionTypesType string

const (
	MixedUnionTypesTypeBike        MixedUnionTypesType = "Bike"
	MixedUnionTypesTypeArrayOfBike MixedUnionTypesType = "arrayOfBike"
)

type MixedUnionTypes struct {
	Bike        *Bike  `queryParam:"inline"`
	ArrayOfBike []Bike `queryParam:"inline"`

	Type MixedUnionTypesType
}

func CreateMixedUnionTypesBike(bike Bike) MixedUnionTypes {
	typ := MixedUnionTypesTypeBike

	return MixedUnionTypes{
		Bike: &bike,
		Type: typ,
	}
}

func CreateMixedUnionTypesArrayOfBike(arrayOfBike []Bike) MixedUnionTypes {
	typ := MixedUnionTypesTypeArrayOfBike

	return MixedUnionTypes{
		ArrayOfBike: arrayOfBike,
		Type:        typ,
	}
}

func (u *MixedUnionTypes) UnmarshalJSON(data []byte) error {

	var bike Bike = Bike{}
	if err := utils.UnmarshalJSON(data, &bike, "", true, true); err == nil {
		u.Bike = &bike
		u.Type = MixedUnionTypesTypeBike
		return nil
	}

	var arrayOfBike []Bike = []Bike{}
	if err := utils.UnmarshalJSON(data, &arrayOfBike, "", true, true); err == nil {
		u.ArrayOfBike = arrayOfBike
		u.Type = MixedUnionTypesTypeArrayOfBike
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for MixedUnionTypes", string(data))
}

func (u MixedUnionTypes) MarshalJSON() ([]byte, error) {
	if u.Bike != nil {
		return utils.MarshalJSON(u.Bike, "", true)
	}

	if u.ArrayOfBike != nil {
		return utils.MarshalJSON(u.ArrayOfBike, "", true)
	}

	return nil, errors.New("could not marshal union type MixedUnionTypes: all fields are null")
}
