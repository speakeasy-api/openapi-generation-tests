// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"openapi/v2/pkg/utils"
)

type NullableOneOfTwoType string

const (
	NullableOneOfTwoTypeTypedObject1 NullableOneOfTwoType = "typedObject1"
	NullableOneOfTwoTypeTypedObject2 NullableOneOfTwoType = "typedObject2"
)

type NullableOneOfTwo struct {
	TypedObject1 *TypedObject1 `queryParam:"inline"`
	TypedObject2 *TypedObject2 `queryParam:"inline"`

	Type NullableOneOfTwoType
}

func CreateNullableOneOfTwoTypedObject1(typedObject1 TypedObject1) NullableOneOfTwo {
	typ := NullableOneOfTwoTypeTypedObject1

	return NullableOneOfTwo{
		TypedObject1: &typedObject1,
		Type:         typ,
	}
}

func CreateNullableOneOfTwoTypedObject2(typedObject2 TypedObject2) NullableOneOfTwo {
	typ := NullableOneOfTwoTypeTypedObject2

	return NullableOneOfTwo{
		TypedObject2: &typedObject2,
		Type:         typ,
	}
}

func (u *NullableOneOfTwo) UnmarshalJSON(data []byte) error {

	var typedObject1 TypedObject1 = TypedObject1{}
	if err := utils.UnmarshalJSON(data, &typedObject1, "", true, true); err == nil {
		u.TypedObject1 = &typedObject1
		u.Type = NullableOneOfTwoTypeTypedObject1
		return nil
	}

	var typedObject2 TypedObject2 = TypedObject2{}
	if err := utils.UnmarshalJSON(data, &typedObject2, "", true, true); err == nil {
		u.TypedObject2 = &typedObject2
		u.Type = NullableOneOfTwoTypeTypedObject2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for NullableOneOfTwo", string(data))
}

func (u NullableOneOfTwo) MarshalJSON() ([]byte, error) {
	if u.TypedObject1 != nil {
		return utils.MarshalJSON(u.TypedObject1, "", true)
	}

	if u.TypedObject2 != nil {
		return utils.MarshalJSON(u.TypedObject2, "", true)
	}

	return nil, errors.New("could not marshal union type NullableOneOfTwo: all fields are null")
}

type OneOfOneType string

const (
	OneOfOneTypeTypedObject1 OneOfOneType = "typedObject1"
)

type OneOfOne struct {
	TypedObject1 *TypedObject1 `queryParam:"inline"`

	Type OneOfOneType
}

func CreateOneOfOneTypedObject1(typedObject1 TypedObject1) OneOfOne {
	typ := OneOfOneTypeTypedObject1

	return OneOfOne{
		TypedObject1: &typedObject1,
		Type:         typ,
	}
}

func (u *OneOfOne) UnmarshalJSON(data []byte) error {

	var typedObject1 TypedObject1 = TypedObject1{}
	if err := utils.UnmarshalJSON(data, &typedObject1, "", true, true); err == nil {
		u.TypedObject1 = &typedObject1
		u.Type = OneOfOneTypeTypedObject1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for OneOfOne", string(data))
}

func (u OneOfOne) MarshalJSON() ([]byte, error) {
	if u.TypedObject1 != nil {
		return utils.MarshalJSON(u.TypedObject1, "", true)
	}

	return nil, errors.New("could not marshal union type OneOfOne: all fields are null")
}

type NullableOneOfRefInObject struct {
	NullableOneOfOne *TypedObject1     `json:"NullableOneOfOne"`
	NullableOneOfTwo *NullableOneOfTwo `json:"NullableOneOfTwo"`
	OneOfOne         OneOfOne          `json:"OneOfOne"`
}

func (o *NullableOneOfRefInObject) GetNullableOneOfOne() *TypedObject1 {
	if o == nil {
		return nil
	}
	return o.NullableOneOfOne
}

func (o *NullableOneOfRefInObject) GetNullableOneOfTwo() *NullableOneOfTwo {
	if o == nil {
		return nil
	}
	return o.NullableOneOfTwo
}

func (o *NullableOneOfRefInObject) GetOneOfOne() OneOfOne {
	if o == nil {
		return OneOfOne{}
	}
	return o.OneOfOne
}
