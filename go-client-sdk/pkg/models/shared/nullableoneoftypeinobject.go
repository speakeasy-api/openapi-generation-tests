// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"openapi/v2/pkg/utils"
)

type NullableOneOfTypeInObjectNullableOneOfTwoType string

const (
	NullableOneOfTypeInObjectNullableOneOfTwoTypeBoolean NullableOneOfTypeInObjectNullableOneOfTwoType = "boolean"
	NullableOneOfTypeInObjectNullableOneOfTwoTypeInteger NullableOneOfTypeInObjectNullableOneOfTwoType = "integer"
)

type NullableOneOfTypeInObjectNullableOneOfTwo struct {
	Boolean *bool  `queryParam:"inline"`
	Integer *int64 `queryParam:"inline"`

	Type NullableOneOfTypeInObjectNullableOneOfTwoType
}

func CreateNullableOneOfTypeInObjectNullableOneOfTwoBoolean(boolean bool) NullableOneOfTypeInObjectNullableOneOfTwo {
	typ := NullableOneOfTypeInObjectNullableOneOfTwoTypeBoolean

	return NullableOneOfTypeInObjectNullableOneOfTwo{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateNullableOneOfTypeInObjectNullableOneOfTwoInteger(integer int64) NullableOneOfTypeInObjectNullableOneOfTwo {
	typ := NullableOneOfTypeInObjectNullableOneOfTwoTypeInteger

	return NullableOneOfTypeInObjectNullableOneOfTwo{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *NullableOneOfTypeInObjectNullableOneOfTwo) UnmarshalJSON(data []byte) error {

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = NullableOneOfTypeInObjectNullableOneOfTwoTypeBoolean
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = NullableOneOfTypeInObjectNullableOneOfTwoTypeInteger
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for NullableOneOfTypeInObjectNullableOneOfTwo", string(data))
}

func (u NullableOneOfTypeInObjectNullableOneOfTwo) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	return nil, errors.New("could not marshal union type NullableOneOfTypeInObjectNullableOneOfTwo: all fields are null")
}

type NullableOneOfTypeInObject struct {
	NullableOneOfOne *bool                                      `json:"NullableOneOfOne"`
	NullableOneOfTwo *NullableOneOfTypeInObjectNullableOneOfTwo `json:"NullableOneOfTwo"`
	OneOfOne         bool                                       `json:"OneOfOne"`
}

func (o *NullableOneOfTypeInObject) GetNullableOneOfOne() *bool {
	if o == nil {
		return nil
	}
	return o.NullableOneOfOne
}

func (o *NullableOneOfTypeInObject) GetNullableOneOfTwo() *NullableOneOfTypeInObjectNullableOneOfTwo {
	if o == nil {
		return nil
	}
	return o.NullableOneOfTwo
}

func (o *NullableOneOfTypeInObject) GetOneOfOne() bool {
	if o == nil {
		return false
	}
	return o.OneOfOne
}
