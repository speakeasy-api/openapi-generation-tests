// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/ericlagergren/decimal"
	"math/big"
	"openapi/v2/pkg/utils"
)

type NumericUnionType string

const (
	NumericUnionTypeInteger NumericUnionType = "integer"
	NumericUnionTypeNumber  NumericUnionType = "number"
	NumericUnionTypeBigint  NumericUnionType = "bigint"
	NumericUnionTypeDecimal NumericUnionType = "decimal"
)

type NumericUnion struct {
	Integer *int64       `queryParam:"inline"`
	Number  *float64     `queryParam:"inline"`
	Bigint  *big.Int     `queryParam:"inline"`
	Decimal *decimal.Big `queryParam:"inline"`

	Type NumericUnionType
}

func CreateNumericUnionInteger(integer int64) NumericUnion {
	typ := NumericUnionTypeInteger

	return NumericUnion{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateNumericUnionNumber(number float64) NumericUnion {
	typ := NumericUnionTypeNumber

	return NumericUnion{
		Number: &number,
		Type:   typ,
	}
}

func CreateNumericUnionBigint(bigint *big.Int) NumericUnion {
	typ := NumericUnionTypeBigint

	return NumericUnion{
		Bigint: bigint,
		Type:   typ,
	}
}

func CreateNumericUnionDecimal(decimal *decimal.Big) NumericUnion {
	typ := NumericUnionTypeDecimal

	return NumericUnion{
		Decimal: decimal,
		Type:    typ,
	}
}

func (u *NumericUnion) UnmarshalJSON(data []byte) error {

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = NumericUnionTypeInteger
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = NumericUnionTypeNumber
		return nil
	}

	var bigint *big.Int = big.NewInt(0)
	if err := utils.UnmarshalJSON(data, &bigint, "", true, true); err == nil {
		u.Bigint = bigint
		u.Type = NumericUnionTypeBigint
		return nil
	}

	var decimal *decimal.Big = new(decimal.Big).SetFloat64(0.0)
	if err := utils.UnmarshalJSON(data, &decimal, "", true, true); err == nil {
		u.Decimal = decimal
		u.Type = NumericUnionTypeDecimal
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for NumericUnion", string(data))
}

func (u NumericUnion) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Bigint != nil {
		return utils.MarshalJSON(u.Bigint, "", true)
	}

	if u.Decimal != nil {
		return utils.MarshalJSON(u.Decimal, "", true)
	}

	return nil, errors.New("could not marshal union type NumericUnion: all fields are null")
}
