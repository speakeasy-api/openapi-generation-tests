// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"openapi/v3/pkg/utils"
)

type ChildType string

const (
	ChildTypeOneOfCircularReferenceObject ChildType = "oneOfCircularReferenceObject"
	ChildTypeSimpleObject                 ChildType = "simpleObject"
)

type Child struct {
	OneOfCircularReferenceObject *OneOfCircularReferenceObject
	SimpleObject                 *SimpleObject

	Type ChildType
}

func CreateChildOneOfCircularReferenceObject(oneOfCircularReferenceObject OneOfCircularReferenceObject) Child {
	typ := ChildTypeOneOfCircularReferenceObject

	return Child{
		OneOfCircularReferenceObject: &oneOfCircularReferenceObject,
		Type:                         typ,
	}
}

func CreateChildSimpleObject(simpleObject SimpleObject) Child {
	typ := ChildTypeSimpleObject

	return Child{
		SimpleObject: &simpleObject,
		Type:         typ,
	}
}

func (u *Child) UnmarshalJSON(data []byte) error {

	oneOfCircularReferenceObject := OneOfCircularReferenceObject{}
	if err := utils.UnmarshalJSON(data, &oneOfCircularReferenceObject, "", true, true); err == nil {
		u.OneOfCircularReferenceObject = &oneOfCircularReferenceObject
		u.Type = ChildTypeOneOfCircularReferenceObject
		return nil
	}

	simpleObject := SimpleObject{}
	if err := utils.UnmarshalJSON(data, &simpleObject, "", true, true); err == nil {
		u.SimpleObject = &simpleObject
		u.Type = ChildTypeSimpleObject
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Child) MarshalJSON() ([]byte, error) {
	if u.OneOfCircularReferenceObject != nil {
		return utils.MarshalJSON(u.OneOfCircularReferenceObject, "", true)
	}

	if u.SimpleObject != nil {
		return utils.MarshalJSON(u.SimpleObject, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type OneOfCircularReferenceObject struct {
	Child Child `json:"child"`
}

func (o *OneOfCircularReferenceObject) GetChild() Child {
	if o == nil {
		return Child{}
	}
	return o.Child
}
