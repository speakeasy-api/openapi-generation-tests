// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"openapi/v2/pkg/utils"
)

type OneOfFromArrayOfTypesType string

const (
	OneOfFromArrayOfTypesTypeStr     OneOfFromArrayOfTypesType = "str"
	OneOfFromArrayOfTypesTypeInteger OneOfFromArrayOfTypesType = "integer"
)

type OneOfFromArrayOfTypes struct {
	Str     *string
	Integer *int64

	Type OneOfFromArrayOfTypesType
}

func CreateOneOfFromArrayOfTypesStr(str string) OneOfFromArrayOfTypes {
	typ := OneOfFromArrayOfTypesTypeStr

	return OneOfFromArrayOfTypes{
		Str:  &str,
		Type: typ,
	}
}

func CreateOneOfFromArrayOfTypesInteger(integer int64) OneOfFromArrayOfTypes {
	typ := OneOfFromArrayOfTypesTypeInteger

	return OneOfFromArrayOfTypes{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *OneOfFromArrayOfTypes) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = OneOfFromArrayOfTypesTypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = OneOfFromArrayOfTypesTypeInteger
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for OneOfFromArrayOfTypes", string(data))
}

func (u OneOfFromArrayOfTypes) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	return nil, errors.New("could not marshal union type OneOfFromArrayOfTypes: all fields are null")
}

type Two string

const (
	TwoLatest Two = "latest"
)

func (e Two) ToPointer() *Two {
	return &e
}
func (e *Two) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "latest":
		*e = Two(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Two: %v", v)
	}
}

type OneOfSameTypeType string

const (
	OneOfSameTypeTypeStr OneOfSameTypeType = "str"
	OneOfSameTypeTypeTwo OneOfSameTypeType = "2"
)

type OneOfSameType struct {
	Str *string
	Two *Two

	Type OneOfSameTypeType
}

func CreateOneOfSameTypeStr(str string) OneOfSameType {
	typ := OneOfSameTypeTypeStr

	return OneOfSameType{
		Str:  &str,
		Type: typ,
	}
}

func CreateOneOfSameTypeTwo(two Two) OneOfSameType {
	typ := OneOfSameTypeTypeTwo

	return OneOfSameType{
		Two:  &two,
		Type: typ,
	}
}

func (u *OneOfSameType) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = OneOfSameTypeTypeStr
		return nil
	}

	var two Two = Two("")
	if err := utils.UnmarshalJSON(data, &two, "", true, true); err == nil {
		u.Two = &two
		u.Type = OneOfSameTypeTypeTwo
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for OneOfSameType", string(data))
}

func (u OneOfSameType) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Two != nil {
		return utils.MarshalJSON(u.Two, "", true)
	}

	return nil, errors.New("could not marshal union type OneOfSameType: all fields are null")
}

type OneOfGenerationStressTest struct {
	Any                   any                    `json:"any"`
	NullableAny           any                    `json:"nullableAny"`
	OneOfFromArrayOfTypes *OneOfFromArrayOfTypes `json:"oneOfFromArrayOfTypes"`
	OneOfSameType         *OneOfSameType         `json:"oneOfSameType"`
}

func (o *OneOfGenerationStressTest) GetAny() any {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *OneOfGenerationStressTest) GetNullableAny() any {
	if o == nil {
		return nil
	}
	return o.NullableAny
}

func (o *OneOfGenerationStressTest) GetOneOfFromArrayOfTypes() *OneOfFromArrayOfTypes {
	if o == nil {
		return nil
	}
	return o.OneOfFromArrayOfTypes
}

func (o *OneOfGenerationStressTest) GetOneOfSameType() *OneOfSameType {
	if o == nil {
		return nil
	}
	return o.OneOfSameType
}
