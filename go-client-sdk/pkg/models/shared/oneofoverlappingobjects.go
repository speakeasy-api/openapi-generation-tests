// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"openapi/v2/pkg/utils"
)

type Obj2 struct {
	Field1 string `json:"field1"`
	Field2 bool   `json:"field2"`
}

func (o *Obj2) GetField1() string {
	if o == nil {
		return ""
	}
	return o.Field1
}

func (o *Obj2) GetField2() bool {
	if o == nil {
		return false
	}
	return o.Field2
}

type Obj1 struct {
	Field1 string `json:"field1"`
}

func (o *Obj1) GetField1() string {
	if o == nil {
		return ""
	}
	return o.Field1
}

type OneOfOverlappingObjectsType string

const (
	OneOfOverlappingObjectsTypeObj1 OneOfOverlappingObjectsType = "obj1"
	OneOfOverlappingObjectsTypeObj2 OneOfOverlappingObjectsType = "obj2"
)

type OneOfOverlappingObjects struct {
	Obj1 *Obj1
	Obj2 *Obj2

	Type OneOfOverlappingObjectsType
}

func CreateOneOfOverlappingObjectsObj1(obj1 Obj1) OneOfOverlappingObjects {
	typ := OneOfOverlappingObjectsTypeObj1

	return OneOfOverlappingObjects{
		Obj1: &obj1,
		Type: typ,
	}
}

func CreateOneOfOverlappingObjectsObj2(obj2 Obj2) OneOfOverlappingObjects {
	typ := OneOfOverlappingObjectsTypeObj2

	return OneOfOverlappingObjects{
		Obj2: &obj2,
		Type: typ,
	}
}

func (u *OneOfOverlappingObjects) UnmarshalJSON(data []byte) error {

	var obj1 Obj1 = Obj1{}
	if err := utils.UnmarshalJSON(data, &obj1, "", true, true); err == nil {
		u.Obj1 = &obj1
		u.Type = OneOfOverlappingObjectsTypeObj1
		return nil
	}

	var obj2 Obj2 = Obj2{}
	if err := utils.UnmarshalJSON(data, &obj2, "", true, true); err == nil {
		u.Obj2 = &obj2
		u.Type = OneOfOverlappingObjectsTypeObj2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for OneOfOverlappingObjects", string(data))
}

func (u OneOfOverlappingObjects) MarshalJSON() ([]byte, error) {
	if u.Obj1 != nil {
		return utils.MarshalJSON(u.Obj1, "", true)
	}

	if u.Obj2 != nil {
		return utils.MarshalJSON(u.Obj2, "", true)
	}

	return nil, errors.New("could not marshal union type OneOfOverlappingObjects: all fields are null")
}
