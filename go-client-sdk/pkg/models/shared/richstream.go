// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"openapi/v3/pkg/utils"
)

type RichStreamType string

const (
	RichStreamTypeCompletion RichStreamType = "completion"
	RichStreamTypeHeartbeat  RichStreamType = "heartbeat"
)

type RichStream struct {
	RichCompletionEvent *RichCompletionEvent
	HeartbeatEvent      *HeartbeatEvent

	Type RichStreamType
}

func CreateRichStreamCompletion(completion RichCompletionEvent) RichStream {
	typ := RichStreamTypeCompletion

	return RichStream{
		RichCompletionEvent: &completion,
		Type:                typ,
	}
}

func CreateRichStreamHeartbeat(heartbeat HeartbeatEvent) RichStream {
	typ := RichStreamTypeHeartbeat

	return RichStream{
		HeartbeatEvent: &heartbeat,
		Type:           typ,
	}
}

func (u *RichStream) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Event string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Event {
	case "completion":
		richCompletionEvent := new(RichCompletionEvent)
		if err := utils.UnmarshalJSON(data, &richCompletionEvent, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.RichCompletionEvent = richCompletionEvent
		u.Type = RichStreamTypeCompletion
		return nil
	case "heartbeat":
		heartbeatEvent := new(HeartbeatEvent)
		if err := utils.UnmarshalJSON(data, &heartbeatEvent, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.HeartbeatEvent = heartbeatEvent
		u.Type = RichStreamTypeHeartbeat
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RichStream) MarshalJSON() ([]byte, error) {
	if u.RichCompletionEvent != nil {
		return utils.MarshalJSON(u.RichCompletionEvent, "", true)
	}

	if u.HeartbeatEvent != nil {
		return utils.MarshalJSON(u.HeartbeatEvent, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

func (o RichStream) GetEventEncoding(event string) (string, error) {
	switch event {
	case "completion":
		return "application/json", nil
	case "heartbeat":
		return "string", nil
	}
	return "", errors.New("could not find encoding for event: " + event)
}
