// Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/ericlagergren/decimal"
	"math/big"
	"openapi/v2/pkg/types"
	"openapi/v2/pkg/utils"
	"time"
)

// Int32EnumVal - An int32 enum property.
type Int32EnumVal int

const (
	Int32EnumValFiftyFive              Int32EnumVal = 55
	Int32EnumValSixtyNine              Int32EnumVal = 69
	Int32EnumValOneHundredAndEightyOne Int32EnumVal = 181
)

func (e Int32EnumVal) ToPointer() *Int32EnumVal {
	return &e
}
func (e *Int32EnumVal) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 55:
		fallthrough
	case 69:
		fallthrough
	case 181:
		*e = Int32EnumVal(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Int32EnumVal: %v", v)
	}
}

// IntEnumVal - An integer enum property.
type IntEnumVal int64

const (
	IntEnumValFirst  IntEnumVal = 1
	IntEnumValSecond IntEnumVal = 2
	IntEnumValThird  IntEnumVal = 3
)

func (e IntEnumVal) ToPointer() *IntEnumVal {
	return &e
}
func (e *IntEnumVal) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		*e = IntEnumVal(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IntEnumVal: %v", v)
	}
}

// SimpleObjectCamelCase - A simple object that uses all our supported primitive types and enums and has optional properties.
//
// https://docs.speakeasyapi.dev - A link to the external docs.
type SimpleObjectCamelCase struct {
	// An any property.
	AnyVal       any      `json:"any_val"`
	BigintStrVal *big.Int `bigint:"string" json:"bigint_str_val,omitempty"`
	BigintVal    *big.Int `json:"bigint_val,omitempty"`
	// An optional boolean property.
	BoolOptVal *bool `json:"bool_opt_val,omitempty"`
	// A boolean property.
	BoolVal bool `json:"bool_val"`
	// A date-time property.
	DateTimeVal time.Time `json:"date_time_val"`
	// A date property.
	DateVal    types.Date   `json:"date_val"`
	DecimalVal *decimal.Big `decimal:"number" json:"decimal_val,omitempty"`
	// A string based enum
	EnumVal Enum `json:"enum_val"`
	// A float32 property.
	Float32Val float32 `json:"float32_val"`
	// An int32 enum property.
	Int32EnumVal Int32EnumVal `json:"int32_enum_val"`
	// An int32 property.
	Int32Val int `json:"int32_val"`
	// An integer enum property.
	IntEnumVal IntEnumVal `json:"int_enum_val"`
	// An optional integer property will be null for tests.
	IntOptNullVal *int64 `json:"int_opt_null_val,omitempty"`
	// An integer property.
	IntVal int64 `json:"int_val"`
	// An optional number property will be null for tests.
	NumOptNullVal *float64 `json:"num_opt_null_val,omitempty"`
	// A number property.
	NumVal float64 `json:"num_val"`
	// An optional string property.
	StrOptVal *string `json:"str_opt_val,omitempty"`
	// A string property.
	StrVal string `json:"str_val"`
}

func (s SimpleObjectCamelCase) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SimpleObjectCamelCase) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SimpleObjectCamelCase) GetAnyVal() any {
	if o == nil {
		return nil
	}
	return o.AnyVal
}

func (o *SimpleObjectCamelCase) GetBigintStrVal() *big.Int {
	if o == nil {
		return nil
	}
	return o.BigintStrVal
}

func (o *SimpleObjectCamelCase) GetBigintVal() *big.Int {
	if o == nil {
		return nil
	}
	return o.BigintVal
}

func (o *SimpleObjectCamelCase) GetBoolOptVal() *bool {
	if o == nil {
		return nil
	}
	return o.BoolOptVal
}

func (o *SimpleObjectCamelCase) GetBoolVal() bool {
	if o == nil {
		return false
	}
	return o.BoolVal
}

func (o *SimpleObjectCamelCase) GetDateTimeVal() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.DateTimeVal
}

func (o *SimpleObjectCamelCase) GetDateVal() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.DateVal
}

func (o *SimpleObjectCamelCase) GetDecimalVal() *decimal.Big {
	if o == nil {
		return nil
	}
	return o.DecimalVal
}

func (o *SimpleObjectCamelCase) GetEnumVal() Enum {
	if o == nil {
		return Enum("")
	}
	return o.EnumVal
}

func (o *SimpleObjectCamelCase) GetFloat32Val() float32 {
	if o == nil {
		return 0.0
	}
	return o.Float32Val
}

func (o *SimpleObjectCamelCase) GetInt32EnumVal() Int32EnumVal {
	if o == nil {
		return Int32EnumVal(0)
	}
	return o.Int32EnumVal
}

func (o *SimpleObjectCamelCase) GetInt32Val() int {
	if o == nil {
		return 0
	}
	return o.Int32Val
}

func (o *SimpleObjectCamelCase) GetIntEnumVal() IntEnumVal {
	if o == nil {
		return IntEnumVal(0)
	}
	return o.IntEnumVal
}

func (o *SimpleObjectCamelCase) GetIntOptNullVal() *int64 {
	if o == nil {
		return nil
	}
	return o.IntOptNullVal
}

func (o *SimpleObjectCamelCase) GetIntVal() int64 {
	if o == nil {
		return 0
	}
	return o.IntVal
}

func (o *SimpleObjectCamelCase) GetNumOptNullVal() *float64 {
	if o == nil {
		return nil
	}
	return o.NumOptNullVal
}

func (o *SimpleObjectCamelCase) GetNumVal() float64 {
	if o == nil {
		return 0.0
	}
	return o.NumVal
}

func (o *SimpleObjectCamelCase) GetStrOptVal() *string {
	if o == nil {
		return nil
	}
	return o.StrOptVal
}

func (o *SimpleObjectCamelCase) GetStrVal() string {
	if o == nil {
		return ""
	}
	return o.StrVal
}
