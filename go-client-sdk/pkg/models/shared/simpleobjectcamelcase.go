// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"math/big"
	"openapi/pkg/types"
	"time"
)

// SimpleObjectCamelCaseInt32EnumVal - An int32 enum property.
type SimpleObjectCamelCaseInt32EnumVal int

const (
	SimpleObjectCamelCaseInt32EnumValFiftyFive              SimpleObjectCamelCaseInt32EnumVal = 55
	SimpleObjectCamelCaseInt32EnumValSixtyNine              SimpleObjectCamelCaseInt32EnumVal = 69
	SimpleObjectCamelCaseInt32EnumValOneHundredAndEightyOne SimpleObjectCamelCaseInt32EnumVal = 181
)

func (e SimpleObjectCamelCaseInt32EnumVal) ToPointer() *SimpleObjectCamelCaseInt32EnumVal {
	return &e
}

func (e *SimpleObjectCamelCaseInt32EnumVal) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 55:
		fallthrough
	case 69:
		fallthrough
	case 181:
		*e = SimpleObjectCamelCaseInt32EnumVal(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SimpleObjectCamelCaseInt32EnumVal: %v", v)
	}
}

// SimpleObjectCamelCaseIntEnumVal - An integer enum property.
type SimpleObjectCamelCaseIntEnumVal int64

const (
	SimpleObjectCamelCaseIntEnumValFirst  SimpleObjectCamelCaseIntEnumVal = 1
	SimpleObjectCamelCaseIntEnumValSecond SimpleObjectCamelCaseIntEnumVal = 2
	SimpleObjectCamelCaseIntEnumValThird  SimpleObjectCamelCaseIntEnumVal = 3
)

func (e SimpleObjectCamelCaseIntEnumVal) ToPointer() *SimpleObjectCamelCaseIntEnumVal {
	return &e
}

func (e *SimpleObjectCamelCaseIntEnumVal) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		*e = SimpleObjectCamelCaseIntEnumVal(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SimpleObjectCamelCaseIntEnumVal: %v", v)
	}
}

// SimpleObjectCamelCase - A simple object that uses all our supported primitive types and enums and has optional properties.
// https://docs.speakeasyapi.dev - A link to the external docs.
type SimpleObjectCamelCase struct {
	// An any property.
	AnyVal       interface{}   `json:"any_val"`
	BigintStrVal *types.BigInt `json:"bigint_str_val,omitempty"`
	BigintVal    *big.Int      `json:"bigint_val,omitempty"`
	// An optional boolean property.
	BoolOptVal *bool `json:"bool_opt_val,omitempty"`
	// A boolean property.
	BoolVal bool `json:"bool_val"`
	// A date-time property.
	DateTimeVal time.Time `json:"date_time_val"`
	// A date property.
	DateVal    types.Date `json:"date_val"`
	DecimalVal *float64   `json:"decimal_val,omitempty"`
	// A string based enum
	EnumVal Enum `json:"enum_val"`
	// A float32 property.
	Float32Val float32 `json:"float32_val"`
	// An int32 enum property.
	Int32EnumVal SimpleObjectCamelCaseInt32EnumVal `json:"int32_enum_val"`
	// An int32 property.
	Int32Val int `json:"int32_val"`
	// An integer enum property.
	IntEnumVal SimpleObjectCamelCaseIntEnumVal `json:"int_enum_val"`
	// An optional integer property will be null for tests.
	IntOptNullVal *int64 `json:"int_opt_null_val,omitempty"`
	// An integer property.
	IntVal int64 `json:"int_val"`
	// An optional number property will be null for tests.
	NumOptNullVal *float64 `json:"num_opt_null_val,omitempty"`
	// A number property.
	NumVal float64 `json:"num_val"`
	// An optional string property.
	StrOptVal *string `json:"str_opt_val,omitempty"`
	// A string property.
	StrVal string `json:"str_val"`
}

func (o *SimpleObjectCamelCase) GetAnyVal() interface{} {
	if o == nil {
		return nil
	}
	return o.AnyVal
}

func (o *SimpleObjectCamelCase) GetBigintStrVal() *types.BigInt {
	if o == nil {
		return nil
	}
	return o.BigintStrVal
}

func (o *SimpleObjectCamelCase) GetBigintVal() *big.Int {
	if o == nil {
		return nil
	}
	return o.BigintVal
}

func (o *SimpleObjectCamelCase) GetBoolOptVal() *bool {
	if o == nil {
		return nil
	}
	return o.BoolOptVal
}

func (o *SimpleObjectCamelCase) GetBoolVal() bool {
	if o == nil {
		return false
	}
	return o.BoolVal
}

func (o *SimpleObjectCamelCase) GetDateTimeVal() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.DateTimeVal
}

func (o *SimpleObjectCamelCase) GetDateVal() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.DateVal
}

func (o *SimpleObjectCamelCase) GetDecimalVal() *float64 {
	if o == nil {
		return nil
	}
	return o.DecimalVal
}

func (o *SimpleObjectCamelCase) GetEnumVal() Enum {
	if o == nil {
		return Enum("")
	}
	return o.EnumVal
}

func (o *SimpleObjectCamelCase) GetFloat32Val() float32 {
	if o == nil {
		return 0.0
	}
	return o.Float32Val
}

func (o *SimpleObjectCamelCase) GetInt32EnumVal() SimpleObjectCamelCaseInt32EnumVal {
	if o == nil {
		return SimpleObjectCamelCaseInt32EnumVal(0)
	}
	return o.Int32EnumVal
}

func (o *SimpleObjectCamelCase) GetInt32Val() int {
	if o == nil {
		return 0
	}
	return o.Int32Val
}

func (o *SimpleObjectCamelCase) GetIntEnumVal() SimpleObjectCamelCaseIntEnumVal {
	if o == nil {
		return SimpleObjectCamelCaseIntEnumVal(0)
	}
	return o.IntEnumVal
}

func (o *SimpleObjectCamelCase) GetIntOptNullVal() *int64 {
	if o == nil {
		return nil
	}
	return o.IntOptNullVal
}

func (o *SimpleObjectCamelCase) GetIntVal() int64 {
	if o == nil {
		return 0
	}
	return o.IntVal
}

func (o *SimpleObjectCamelCase) GetNumOptNullVal() *float64 {
	if o == nil {
		return nil
	}
	return o.NumOptNullVal
}

func (o *SimpleObjectCamelCase) GetNumVal() float64 {
	if o == nil {
		return 0.0
	}
	return o.NumVal
}

func (o *SimpleObjectCamelCase) GetStrOptVal() *string {
	if o == nil {
		return nil
	}
	return o.StrOptVal
}

func (o *SimpleObjectCamelCase) GetStrVal() string {
	if o == nil {
		return ""
	}
	return o.StrVal
}
