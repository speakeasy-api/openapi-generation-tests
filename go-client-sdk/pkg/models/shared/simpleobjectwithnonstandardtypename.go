// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/ericlagergren/decimal"
	"math/big"
	"openapi/v2/pkg/types"
	"openapi/v2/pkg/utils"
	"time"
)

// SimpleObjectWithNonStandardTypeNameInt32Enum - An int32 enum property.
type SimpleObjectWithNonStandardTypeNameInt32Enum int

const (
	SimpleObjectWithNonStandardTypeNameInt32EnumFiftyFive              SimpleObjectWithNonStandardTypeNameInt32Enum = 55
	SimpleObjectWithNonStandardTypeNameInt32EnumSixtyNine              SimpleObjectWithNonStandardTypeNameInt32Enum = 69
	SimpleObjectWithNonStandardTypeNameInt32EnumOneHundredAndEightyOne SimpleObjectWithNonStandardTypeNameInt32Enum = 181
)

func (e SimpleObjectWithNonStandardTypeNameInt32Enum) ToPointer() *SimpleObjectWithNonStandardTypeNameInt32Enum {
	return &e
}

func (e *SimpleObjectWithNonStandardTypeNameInt32Enum) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 55:
		fallthrough
	case 69:
		fallthrough
	case 181:
		*e = SimpleObjectWithNonStandardTypeNameInt32Enum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SimpleObjectWithNonStandardTypeNameInt32Enum: %v", v)
	}
}

// SimpleObjectWithNonStandardTypeNameIntEnum - An integer enum property.
type SimpleObjectWithNonStandardTypeNameIntEnum int64

const (
	SimpleObjectWithNonStandardTypeNameIntEnumFirst  SimpleObjectWithNonStandardTypeNameIntEnum = 1
	SimpleObjectWithNonStandardTypeNameIntEnumSecond SimpleObjectWithNonStandardTypeNameIntEnum = 2
	SimpleObjectWithNonStandardTypeNameIntEnumThird  SimpleObjectWithNonStandardTypeNameIntEnum = 3
)

func (e SimpleObjectWithNonStandardTypeNameIntEnum) ToPointer() *SimpleObjectWithNonStandardTypeNameIntEnum {
	return &e
}

func (e *SimpleObjectWithNonStandardTypeNameIntEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		*e = SimpleObjectWithNonStandardTypeNameIntEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SimpleObjectWithNonStandardTypeNameIntEnum: %v", v)
	}
}

// SimpleObjectWithNonStandardTypeName - A simple object that uses all our supported primitive types and enums and has optional properties.
//
// https://docs.speakeasyapi.dev - A link to the external docs.
type SimpleObjectWithNonStandardTypeName struct {
	// An any property.
	Any       interface{} `json:"any"`
	Bigint    *big.Int    `json:"bigint,omitempty"`
	BigintStr *big.Int    `bigint:"string" json:"bigintStr,omitempty"`
	// A boolean property.
	Bool bool `json:"bool"`
	// An optional boolean property.
	BoolOpt *bool `json:"boolOpt,omitempty"`
	// A date property.
	Date types.Date `json:"date"`
	// A date-time property.
	DateTime   time.Time    `json:"dateTime"`
	Decimal    *decimal.Big `decimal:"number" json:"decimal,omitempty"`
	DecimalStr *decimal.Big `json:"decimalStr,omitempty"`
	// A string based enum
	Enum Enum `json:"enum"`
	// A float32 property.
	Float32 float32 `json:"float32"`
	// An integer property.
	Int int64 `json:"int"`
	// An int32 property.
	Int32 int `json:"int32"`
	// An int32 enum property.
	Int32Enum SimpleObjectWithNonStandardTypeNameInt32Enum `json:"int32Enum"`
	// An integer enum property.
	IntEnum SimpleObjectWithNonStandardTypeNameIntEnum `json:"intEnum"`
	// An optional integer property will be null for tests.
	IntOptNull *int64 `json:"intOptNull,omitempty"`
	// A number property.
	Num float64 `json:"num"`
	// An optional number property will be null for tests.
	NumOptNull *float64 `json:"numOptNull,omitempty"`
	ObjType    string   `json:"obj.type"`
	// A string property.
	Str string `json:"str"`
	// An optional string property.
	StrOpt *string `json:"strOpt,omitempty"`
}

func (s SimpleObjectWithNonStandardTypeName) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SimpleObjectWithNonStandardTypeName) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SimpleObjectWithNonStandardTypeName) GetAny() interface{} {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *SimpleObjectWithNonStandardTypeName) GetBigint() *big.Int {
	if o == nil {
		return nil
	}
	return o.Bigint
}

func (o *SimpleObjectWithNonStandardTypeName) GetBigintStr() *big.Int {
	if o == nil {
		return nil
	}
	return o.BigintStr
}

func (o *SimpleObjectWithNonStandardTypeName) GetBool() bool {
	if o == nil {
		return false
	}
	return o.Bool
}

func (o *SimpleObjectWithNonStandardTypeName) GetBoolOpt() *bool {
	if o == nil {
		return nil
	}
	return o.BoolOpt
}

func (o *SimpleObjectWithNonStandardTypeName) GetDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.Date
}

func (o *SimpleObjectWithNonStandardTypeName) GetDateTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.DateTime
}

func (o *SimpleObjectWithNonStandardTypeName) GetDecimal() *decimal.Big {
	if o == nil {
		return nil
	}
	return o.Decimal
}

func (o *SimpleObjectWithNonStandardTypeName) GetDecimalStr() *decimal.Big {
	if o == nil {
		return nil
	}
	return o.DecimalStr
}

func (o *SimpleObjectWithNonStandardTypeName) GetEnum() Enum {
	if o == nil {
		return Enum("")
	}
	return o.Enum
}

func (o *SimpleObjectWithNonStandardTypeName) GetFloat32() float32 {
	if o == nil {
		return 0.0
	}
	return o.Float32
}

func (o *SimpleObjectWithNonStandardTypeName) GetInt() int64 {
	if o == nil {
		return 0
	}
	return o.Int
}

func (o *SimpleObjectWithNonStandardTypeName) GetInt32() int {
	if o == nil {
		return 0
	}
	return o.Int32
}

func (o *SimpleObjectWithNonStandardTypeName) GetInt32Enum() SimpleObjectWithNonStandardTypeNameInt32Enum {
	if o == nil {
		return SimpleObjectWithNonStandardTypeNameInt32Enum(0)
	}
	return o.Int32Enum
}

func (o *SimpleObjectWithNonStandardTypeName) GetIntEnum() SimpleObjectWithNonStandardTypeNameIntEnum {
	if o == nil {
		return SimpleObjectWithNonStandardTypeNameIntEnum(0)
	}
	return o.IntEnum
}

func (o *SimpleObjectWithNonStandardTypeName) GetIntOptNull() *int64 {
	if o == nil {
		return nil
	}
	return o.IntOptNull
}

func (o *SimpleObjectWithNonStandardTypeName) GetNum() float64 {
	if o == nil {
		return 0.0
	}
	return o.Num
}

func (o *SimpleObjectWithNonStandardTypeName) GetNumOptNull() *float64 {
	if o == nil {
		return nil
	}
	return o.NumOptNull
}

func (o *SimpleObjectWithNonStandardTypeName) GetObjType() string {
	if o == nil {
		return ""
	}
	return o.ObjType
}

func (o *SimpleObjectWithNonStandardTypeName) GetStr() string {
	if o == nil {
		return ""
	}
	return o.Str
}

func (o *SimpleObjectWithNonStandardTypeName) GetStrOpt() *string {
	if o == nil {
		return nil
	}
	return o.StrOpt
}
