// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"openapi/v2/pkg/utils"
)

type StronglyTypedOneOfDiscriminatedObjectType string

const (
	StronglyTypedOneOfDiscriminatedObjectTypeTag1 StronglyTypedOneOfDiscriminatedObjectType = "tag1"
	StronglyTypedOneOfDiscriminatedObjectTypeTag2 StronglyTypedOneOfDiscriminatedObjectType = "tag2"
	StronglyTypedOneOfDiscriminatedObjectTypeTag3 StronglyTypedOneOfDiscriminatedObjectType = "tag3"
)

type StronglyTypedOneOfDiscriminatedObject struct {
	TaggedObject1 *TaggedObject1
	TaggedObject2 *TaggedObject2
	TaggedObject3 *TaggedObject3

	Type StronglyTypedOneOfDiscriminatedObjectType
}

func CreateStronglyTypedOneOfDiscriminatedObjectTag1(tag1 TaggedObject1) StronglyTypedOneOfDiscriminatedObject {
	typ := StronglyTypedOneOfDiscriminatedObjectTypeTag1

	typStr := Tag(typ)
	tag1.Tag = typStr

	return StronglyTypedOneOfDiscriminatedObject{
		TaggedObject1: &tag1,
		Type:          typ,
	}
}

func CreateStronglyTypedOneOfDiscriminatedObjectTag2(tag2 TaggedObject2) StronglyTypedOneOfDiscriminatedObject {
	typ := StronglyTypedOneOfDiscriminatedObjectTypeTag2

	typStr := TaggedObject2Tag(typ)
	tag2.Tag = typStr

	return StronglyTypedOneOfDiscriminatedObject{
		TaggedObject2: &tag2,
		Type:          typ,
	}
}

func CreateStronglyTypedOneOfDiscriminatedObjectTag3(tag3 TaggedObject3) StronglyTypedOneOfDiscriminatedObject {
	typ := StronglyTypedOneOfDiscriminatedObjectTypeTag3

	return StronglyTypedOneOfDiscriminatedObject{
		TaggedObject3: &tag3,
		Type:          typ,
	}
}

func (u *StronglyTypedOneOfDiscriminatedObject) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Tag string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Tag {
	case "tag1":
		taggedObject1 := new(TaggedObject1)
		if err := utils.UnmarshalJSON(data, &taggedObject1, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.TaggedObject1 = taggedObject1
		u.Type = StronglyTypedOneOfDiscriminatedObjectTypeTag1
		return nil
	case "tag2":
		taggedObject2 := new(TaggedObject2)
		if err := utils.UnmarshalJSON(data, &taggedObject2, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.TaggedObject2 = taggedObject2
		u.Type = StronglyTypedOneOfDiscriminatedObjectTypeTag2
		return nil
	case "tag3":
		taggedObject3 := new(TaggedObject3)
		if err := utils.UnmarshalJSON(data, &taggedObject3, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.TaggedObject3 = taggedObject3
		u.Type = StronglyTypedOneOfDiscriminatedObjectTypeTag3
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u StronglyTypedOneOfDiscriminatedObject) MarshalJSON() ([]byte, error) {
	if u.TaggedObject1 != nil {
		return utils.MarshalJSON(u.TaggedObject1, "", true)
	}

	if u.TaggedObject2 != nil {
		return utils.MarshalJSON(u.TaggedObject2, "", true)
	}

	if u.TaggedObject3 != nil {
		return utils.MarshalJSON(u.TaggedObject3, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
