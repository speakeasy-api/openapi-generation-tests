// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"openapi/v2/pkg/utils"
)

type StronglyTypedOneOfObjectType string

const (
	StronglyTypedOneOfObjectTypeSimpleObjectWithType StronglyTypedOneOfObjectType = "simpleObjectWithType"
	StronglyTypedOneOfObjectTypeDeepObjectWithType   StronglyTypedOneOfObjectType = "deepObjectWithType"
)

type StronglyTypedOneOfObject struct {
	SimpleObjectWithType *SimpleObjectWithType
	DeepObjectWithType   *DeepObjectWithType

	Type StronglyTypedOneOfObjectType
}

func CreateStronglyTypedOneOfObjectSimpleObjectWithType(simpleObjectWithType SimpleObjectWithType) StronglyTypedOneOfObject {
	typ := StronglyTypedOneOfObjectTypeSimpleObjectWithType

	typStr := string(typ)
	simpleObjectWithType.Type = typStr

	return StronglyTypedOneOfObject{
		SimpleObjectWithType: &simpleObjectWithType,
		Type:                 typ,
	}
}

func CreateStronglyTypedOneOfObjectDeepObjectWithType(deepObjectWithType DeepObjectWithType) StronglyTypedOneOfObject {
	typ := StronglyTypedOneOfObjectTypeDeepObjectWithType

	typStr := string(typ)
	deepObjectWithType.Type = &typStr

	return StronglyTypedOneOfObject{
		DeepObjectWithType: &deepObjectWithType,
		Type:               typ,
	}
}

func (u *StronglyTypedOneOfObject) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "simpleObjectWithType":
		simpleObjectWithType := new(SimpleObjectWithType)
		if err := utils.UnmarshalJSON(data, &simpleObjectWithType, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == simpleObjectWithType) type SimpleObjectWithType within StronglyTypedOneOfObject: %w", string(data), err)
		}

		u.SimpleObjectWithType = simpleObjectWithType
		u.Type = StronglyTypedOneOfObjectTypeSimpleObjectWithType
		return nil
	case "deepObjectWithType":
		deepObjectWithType := new(DeepObjectWithType)
		if err := utils.UnmarshalJSON(data, &deepObjectWithType, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == deepObjectWithType) type DeepObjectWithType within StronglyTypedOneOfObject: %w", string(data), err)
		}

		u.DeepObjectWithType = deepObjectWithType
		u.Type = StronglyTypedOneOfObjectTypeDeepObjectWithType
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for StronglyTypedOneOfObject", string(data))
}

func (u StronglyTypedOneOfObject) MarshalJSON() ([]byte, error) {
	if u.SimpleObjectWithType != nil {
		return utils.MarshalJSON(u.SimpleObjectWithType, "", true)
	}

	if u.DeepObjectWithType != nil {
		return utils.MarshalJSON(u.DeepObjectWithType, "", true)
	}

	return nil, errors.New("could not marshal union type StronglyTypedOneOfObject: all fields are null")
}
