// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type StronglyTypedOneOfObjectType string

const (
	StronglyTypedOneOfObjectTypeSimpleObjectWithType StronglyTypedOneOfObjectType = "simpleObjectWithType"
	StronglyTypedOneOfObjectTypeDeepObjectWithType   StronglyTypedOneOfObjectType = "deepObjectWithType"
)

type StronglyTypedOneOfObject struct {
	SimpleObjectWithType *SimpleObjectWithType
	DeepObjectWithType   *DeepObjectWithType

	Type StronglyTypedOneOfObjectType
}

func CreateStronglyTypedOneOfObjectSimpleObjectWithType(simpleObjectWithType SimpleObjectWithType) StronglyTypedOneOfObject {
	typ := StronglyTypedOneOfObjectTypeSimpleObjectWithType
	typStr := string(typ)
	simpleObjectWithType.Type = typStr

	return StronglyTypedOneOfObject{
		SimpleObjectWithType: &simpleObjectWithType,
		Type:                 typ,
	}
}

func CreateStronglyTypedOneOfObjectDeepObjectWithType(deepObjectWithType DeepObjectWithType) StronglyTypedOneOfObject {
	typ := StronglyTypedOneOfObjectTypeDeepObjectWithType
	typStr := string(typ)
	deepObjectWithType.Type = &typStr

	return StronglyTypedOneOfObject{
		DeepObjectWithType: &deepObjectWithType,
		Type:               typ,
	}
}

func (u *StronglyTypedOneOfObject) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	type discriminator struct {
		Type string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "simpleObjectWithType":
		d = json.NewDecoder(bytes.NewReader(data))
		simpleObjectWithType := new(SimpleObjectWithType)
		if err := d.Decode(&simpleObjectWithType); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.SimpleObjectWithType = simpleObjectWithType
		u.Type = StronglyTypedOneOfObjectTypeSimpleObjectWithType
		return nil
	case "deepObjectWithType":
		d = json.NewDecoder(bytes.NewReader(data))
		deepObjectWithType := new(DeepObjectWithType)
		if err := d.Decode(&deepObjectWithType); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.DeepObjectWithType = deepObjectWithType
		u.Type = StronglyTypedOneOfObjectTypeDeepObjectWithType
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u StronglyTypedOneOfObject) MarshalJSON() ([]byte, error) {
	if u.SimpleObjectWithType != nil {
		return json.Marshal(u.SimpleObjectWithType)
	}

	if u.DeepObjectWithType != nil {
		return json.Marshal(u.DeepObjectWithType)
	}

	return nil, nil
}
