// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"openapi/v2/pkg/utils"
)

type StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType string

const (
	StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameTypeSimpleObjectWithNonStandardTypeName StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType = "simpleObjectWithNonStandardTypeName"
	StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameTypeDeepObjectWithNonStandardTypeName   StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType = "deepObjectWithNonStandardTypeName"
)

type StronglyTypedOneOfObjectWithNonStandardDiscriminatorName struct {
	SimpleObjectWithNonStandardTypeName *SimpleObjectWithNonStandardTypeName `queryParam:"inline"`
	DeepObjectWithNonStandardTypeName   *DeepObjectWithNonStandardTypeName   `queryParam:"inline"`

	Type StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameType
}

func CreateStronglyTypedOneOfObjectWithNonStandardDiscriminatorNameSimpleObjectWithNonStandardTypeName(simpleObjectWithNonStandardTypeName SimpleObjectWithNonStandardTypeName) StronglyTypedOneOfObjectWithNonStandardDiscriminatorName {
	typ := StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameTypeSimpleObjectWithNonStandardTypeName

	typStr := string(typ)
	simpleObjectWithNonStandardTypeName.ObjType = typStr

	return StronglyTypedOneOfObjectWithNonStandardDiscriminatorName{
		SimpleObjectWithNonStandardTypeName: &simpleObjectWithNonStandardTypeName,
		Type:                                typ,
	}
}

func CreateStronglyTypedOneOfObjectWithNonStandardDiscriminatorNameDeepObjectWithNonStandardTypeName(deepObjectWithNonStandardTypeName DeepObjectWithNonStandardTypeName) StronglyTypedOneOfObjectWithNonStandardDiscriminatorName {
	typ := StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameTypeDeepObjectWithNonStandardTypeName

	typStr := string(typ)
	deepObjectWithNonStandardTypeName.ObjType = &typStr

	return StronglyTypedOneOfObjectWithNonStandardDiscriminatorName{
		DeepObjectWithNonStandardTypeName: &deepObjectWithNonStandardTypeName,
		Type:                              typ,
	}
}

func (u *StronglyTypedOneOfObjectWithNonStandardDiscriminatorName) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		ObjType string `json:"obj.type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.ObjType {
	case "simpleObjectWithNonStandardTypeName":
		simpleObjectWithNonStandardTypeName := new(SimpleObjectWithNonStandardTypeName)
		if err := utils.UnmarshalJSON(data, &simpleObjectWithNonStandardTypeName, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ObjType == simpleObjectWithNonStandardTypeName) type SimpleObjectWithNonStandardTypeName within StronglyTypedOneOfObjectWithNonStandardDiscriminatorName: %w", string(data), err)
		}

		u.SimpleObjectWithNonStandardTypeName = simpleObjectWithNonStandardTypeName
		u.Type = StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameTypeSimpleObjectWithNonStandardTypeName
		return nil
	case "deepObjectWithNonStandardTypeName":
		deepObjectWithNonStandardTypeName := new(DeepObjectWithNonStandardTypeName)
		if err := utils.UnmarshalJSON(data, &deepObjectWithNonStandardTypeName, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ObjType == deepObjectWithNonStandardTypeName) type DeepObjectWithNonStandardTypeName within StronglyTypedOneOfObjectWithNonStandardDiscriminatorName: %w", string(data), err)
		}

		u.DeepObjectWithNonStandardTypeName = deepObjectWithNonStandardTypeName
		u.Type = StronglyTypedOneOfObjectWithNonStandardDiscriminatorNameTypeDeepObjectWithNonStandardTypeName
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for StronglyTypedOneOfObjectWithNonStandardDiscriminatorName", string(data))
}

func (u StronglyTypedOneOfObjectWithNonStandardDiscriminatorName) MarshalJSON() ([]byte, error) {
	if u.SimpleObjectWithNonStandardTypeName != nil {
		return utils.MarshalJSON(u.SimpleObjectWithNonStandardTypeName, "", true)
	}

	if u.DeepObjectWithNonStandardTypeName != nil {
		return utils.MarshalJSON(u.DeepObjectWithNonStandardTypeName, "", true)
	}

	return nil, errors.New("could not marshal union type StronglyTypedOneOfObjectWithNonStandardDiscriminatorName: all fields are null")
}
