// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/v2/pkg/utils"
)

type Color string

const (
	ColorRed    Color = "red"
	ColorGreen  Color = "green"
	ColorBlue   Color = "blue"
	ColorReturn Color = "return"
	ColorClass  Color = "class"
	ColorInt    Color = "int"
)

func (e Color) ToPointer() *Color {
	return &e
}

type HeroWidth int64

const (
	HeroWidthFourHundredAndEighty  HeroWidth = 480
	HeroWidthSevenHundredAndTwenty HeroWidth = 720
	HeroWidthOneThousandAndEighty  HeroWidth = 1080
)

func (e HeroWidth) ToPointer() *HeroWidth {
	return &e
}

type Icon string

const (
	IconTick     Icon = "tick"
	IconThumbsUp Icon = "thumbs-up"
	IconFire     Icon = "fire"
)

func (e Icon) ToPointer() *Icon {
	return &e
}
func (e *Icon) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tick":
		fallthrough
	case "thumbs-up":
		fallthrough
	case "fire":
		*e = Icon(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Icon: %v", v)
	}
}

type Theme struct {
	Color     *Color     `default:"blue" json:"color"`
	HeroWidth *HeroWidth `json:"heroWidth,omitempty"`
	Icon      *Icon      `json:"icon,omitempty"`
}

func (t Theme) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *Theme) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Theme) GetColor() *Color {
	if o == nil {
		return nil
	}
	return o.Color
}

func (o *Theme) GetHeroWidth() *HeroWidth {
	if o == nil {
		return nil
	}
	return o.HeroWidth
}

func (o *Theme) GetIcon() *Icon {
	if o == nil {
		return nil
	}
	return o.Icon
}
