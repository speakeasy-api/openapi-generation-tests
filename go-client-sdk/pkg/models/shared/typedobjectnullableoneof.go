// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"openapi/v2/pkg/utils"
)

type TypedObjectNullableOneOfType string

const (
	TypedObjectNullableOneOfTypeTypedObject1 TypedObjectNullableOneOfType = "typedObject1"
	TypedObjectNullableOneOfTypeTypedObject2 TypedObjectNullableOneOfType = "typedObject2"
)

type TypedObjectNullableOneOf struct {
	TypedObject1 *TypedObject1
	TypedObject2 *TypedObject2

	Type TypedObjectNullableOneOfType
}

func CreateTypedObjectNullableOneOfTypedObject1(typedObject1 TypedObject1) TypedObjectNullableOneOf {
	typ := TypedObjectNullableOneOfTypeTypedObject1

	return TypedObjectNullableOneOf{
		TypedObject1: &typedObject1,
		Type:         typ,
	}
}

func CreateTypedObjectNullableOneOfTypedObject2(typedObject2 TypedObject2) TypedObjectNullableOneOf {
	typ := TypedObjectNullableOneOfTypeTypedObject2

	return TypedObjectNullableOneOf{
		TypedObject2: &typedObject2,
		Type:         typ,
	}
}

func (u *TypedObjectNullableOneOf) UnmarshalJSON(data []byte) error {

	var typedObject1 TypedObject1 = TypedObject1{}
	if err := utils.UnmarshalJSON(data, &typedObject1, "", true, true); err == nil {
		u.TypedObject1 = &typedObject1
		u.Type = TypedObjectNullableOneOfTypeTypedObject1
		return nil
	}

	var typedObject2 TypedObject2 = TypedObject2{}
	if err := utils.UnmarshalJSON(data, &typedObject2, "", true, true); err == nil {
		u.TypedObject2 = &typedObject2
		u.Type = TypedObjectNullableOneOfTypeTypedObject2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TypedObjectNullableOneOf", string(data))
}

func (u TypedObjectNullableOneOf) MarshalJSON() ([]byte, error) {
	if u.TypedObject1 != nil {
		return utils.MarshalJSON(u.TypedObject1, "", true)
	}

	if u.TypedObject2 != nil {
		return utils.MarshalJSON(u.TypedObject2, "", true)
	}

	return nil, errors.New("could not marshal union type TypedObjectNullableOneOf: all fields are null")
}
