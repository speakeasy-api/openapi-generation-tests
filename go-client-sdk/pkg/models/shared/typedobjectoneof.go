// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"openapi/v2/pkg/utils"
)

type TypedObjectOneOfType string

const (
	TypedObjectOneOfTypeTypedObject1 TypedObjectOneOfType = "typedObject1"
	TypedObjectOneOfTypeTypedObject2 TypedObjectOneOfType = "typedObject2"
	TypedObjectOneOfTypeTypedObject3 TypedObjectOneOfType = "typedObject3"
)

type TypedObjectOneOf struct {
	TypedObject1 *TypedObject1
	TypedObject2 *TypedObject2
	TypedObject3 *TypedObject3

	Type TypedObjectOneOfType
}

func CreateTypedObjectOneOfTypedObject1(typedObject1 TypedObject1) TypedObjectOneOf {
	typ := TypedObjectOneOfTypeTypedObject1

	return TypedObjectOneOf{
		TypedObject1: &typedObject1,
		Type:         typ,
	}
}

func CreateTypedObjectOneOfTypedObject2(typedObject2 TypedObject2) TypedObjectOneOf {
	typ := TypedObjectOneOfTypeTypedObject2

	return TypedObjectOneOf{
		TypedObject2: &typedObject2,
		Type:         typ,
	}
}

func CreateTypedObjectOneOfTypedObject3(typedObject3 TypedObject3) TypedObjectOneOf {
	typ := TypedObjectOneOfTypeTypedObject3

	return TypedObjectOneOf{
		TypedObject3: &typedObject3,
		Type:         typ,
	}
}

func (u *TypedObjectOneOf) UnmarshalJSON(data []byte) error {

	var typedObject1 TypedObject1 = TypedObject1{}
	if err := utils.UnmarshalJSON(data, &typedObject1, "", true, true); err == nil {
		u.TypedObject1 = &typedObject1
		u.Type = TypedObjectOneOfTypeTypedObject1
		return nil
	}

	var typedObject2 TypedObject2 = TypedObject2{}
	if err := utils.UnmarshalJSON(data, &typedObject2, "", true, true); err == nil {
		u.TypedObject2 = &typedObject2
		u.Type = TypedObjectOneOfTypeTypedObject2
		return nil
	}

	var typedObject3 TypedObject3 = TypedObject3{}
	if err := utils.UnmarshalJSON(data, &typedObject3, "", true, true); err == nil {
		u.TypedObject3 = &typedObject3
		u.Type = TypedObjectOneOfTypeTypedObject3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TypedObjectOneOf", string(data))
}

func (u TypedObjectOneOf) MarshalJSON() ([]byte, error) {
	if u.TypedObject1 != nil {
		return utils.MarshalJSON(u.TypedObject1, "", true)
	}

	if u.TypedObject2 != nil {
		return utils.MarshalJSON(u.TypedObject2, "", true)
	}

	if u.TypedObject3 != nil {
		return utils.MarshalJSON(u.TypedObject3, "", true)
	}

	return nil, errors.New("could not marshal union type TypedObjectOneOf: all fields are null")
}
