// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"openapi/v2/pkg/utils"
)

type Three struct {
	Baz string `json:"baz"`
}

func (o *Three) GetBaz() string {
	if o == nil {
		return ""
	}
	return o.Baz
}

type UnionOfArrays2 struct {
	Bar string `json:"bar"`
}

func (o *UnionOfArrays2) GetBar() string {
	if o == nil {
		return ""
	}
	return o.Bar
}

type One struct {
	Foo string `json:"foo"`
}

func (o *One) GetFoo() string {
	if o == nil {
		return ""
	}
	return o.Foo
}

type UnionOfArraysType string

const (
	UnionOfArraysTypeArrayOf1              UnionOfArraysType = "arrayOf1"
	UnionOfArraysTypeArrayOfUnionOfArrays2 UnionOfArraysType = "arrayOfUnionOfArrays2"
	UnionOfArraysTypeArrayOf3              UnionOfArraysType = "arrayOf3"
)

type UnionOfArrays struct {
	ArrayOf1              []One            `queryParam:"inline"`
	ArrayOfUnionOfArrays2 []UnionOfArrays2 `queryParam:"inline"`
	ArrayOf3              []Three          `queryParam:"inline"`

	Type UnionOfArraysType
}

func CreateUnionOfArraysArrayOf1(arrayOf1 []One) UnionOfArrays {
	typ := UnionOfArraysTypeArrayOf1

	return UnionOfArrays{
		ArrayOf1: arrayOf1,
		Type:     typ,
	}
}

func CreateUnionOfArraysArrayOfUnionOfArrays2(arrayOfUnionOfArrays2 []UnionOfArrays2) UnionOfArrays {
	typ := UnionOfArraysTypeArrayOfUnionOfArrays2

	return UnionOfArrays{
		ArrayOfUnionOfArrays2: arrayOfUnionOfArrays2,
		Type:                  typ,
	}
}

func CreateUnionOfArraysArrayOf3(arrayOf3 []Three) UnionOfArrays {
	typ := UnionOfArraysTypeArrayOf3

	return UnionOfArrays{
		ArrayOf3: arrayOf3,
		Type:     typ,
	}
}

func (u *UnionOfArrays) UnmarshalJSON(data []byte) error {

	var arrayOf1 []One = []One{}
	if err := utils.UnmarshalJSON(data, &arrayOf1, "", true, true); err == nil {
		u.ArrayOf1 = arrayOf1
		u.Type = UnionOfArraysTypeArrayOf1
		return nil
	}

	var arrayOfUnionOfArrays2 []UnionOfArrays2 = []UnionOfArrays2{}
	if err := utils.UnmarshalJSON(data, &arrayOfUnionOfArrays2, "", true, true); err == nil {
		u.ArrayOfUnionOfArrays2 = arrayOfUnionOfArrays2
		u.Type = UnionOfArraysTypeArrayOfUnionOfArrays2
		return nil
	}

	var arrayOf3 []Three = []Three{}
	if err := utils.UnmarshalJSON(data, &arrayOf3, "", true, true); err == nil {
		u.ArrayOf3 = arrayOf3
		u.Type = UnionOfArraysTypeArrayOf3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UnionOfArrays", string(data))
}

func (u UnionOfArrays) MarshalJSON() ([]byte, error) {
	if u.ArrayOf1 != nil {
		return utils.MarshalJSON(u.ArrayOf1, "", true)
	}

	if u.ArrayOfUnionOfArrays2 != nil {
		return utils.MarshalJSON(u.ArrayOfUnionOfArrays2, "", true)
	}

	if u.ArrayOf3 != nil {
		return utils.MarshalJSON(u.ArrayOf3, "", true)
	}

	return nil, errors.New("could not marshal union type UnionOfArrays: all fields are null")
}
