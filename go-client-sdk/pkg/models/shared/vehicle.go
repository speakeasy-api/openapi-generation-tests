// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"openapi/v2/pkg/utils"
)

type VehicleType string

const (
	VehicleTypeBike VehicleType = "bike"
	VehicleTypeCar  VehicleType = "car"
)

type Vehicle struct {
	Car  *Car
	Bike *Bike

	Type VehicleType
}

func CreateVehicleBike(bike Bike) Vehicle {
	typ := VehicleTypeBike

	return Vehicle{
		Bike: &bike,
		Type: typ,
	}
}

func CreateVehicleCar(car Car) Vehicle {
	typ := VehicleTypeCar

	return Vehicle{
		Car:  &car,
		Type: typ,
	}
}

func (u *Vehicle) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		VehicleType string `json:"vehicleType"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.VehicleType {
	case "bike":
		bike := new(Bike)
		if err := utils.UnmarshalJSON(data, &bike, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (VehicleType == bike) type Bike within Vehicle: %w", string(data), err)
		}

		u.Bike = bike
		u.Type = VehicleTypeBike
		return nil
	case "car":
		car := new(Car)
		if err := utils.UnmarshalJSON(data, &car, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (VehicleType == car) type Car within Vehicle: %w", string(data), err)
		}

		u.Car = car
		u.Type = VehicleTypeCar
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Vehicle", string(data))
}

func (u Vehicle) MarshalJSON() ([]byte, error) {
	if u.Car != nil {
		return utils.MarshalJSON(u.Car, "", true)
	}

	if u.Bike != nil {
		return utils.MarshalJSON(u.Bike, "", true)
	}

	return nil, errors.New("could not marshal union type Vehicle: all fields are null")
}
