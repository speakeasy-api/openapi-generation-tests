// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"openapi/v2/pkg/utils"
)

type WeaklyTypedOneOfObjectType string

const (
	WeaklyTypedOneOfObjectTypeSimpleObject WeaklyTypedOneOfObjectType = "simpleObject"
	WeaklyTypedOneOfObjectTypeDeepObject   WeaklyTypedOneOfObjectType = "deepObject"
)

type WeaklyTypedOneOfObject struct {
	SimpleObject *SimpleObject `queryParam:"inline"`
	DeepObject   *DeepObject   `queryParam:"inline"`

	Type WeaklyTypedOneOfObjectType
}

func CreateWeaklyTypedOneOfObjectSimpleObject(simpleObject SimpleObject) WeaklyTypedOneOfObject {
	typ := WeaklyTypedOneOfObjectTypeSimpleObject

	return WeaklyTypedOneOfObject{
		SimpleObject: &simpleObject,
		Type:         typ,
	}
}

func CreateWeaklyTypedOneOfObjectDeepObject(deepObject DeepObject) WeaklyTypedOneOfObject {
	typ := WeaklyTypedOneOfObjectTypeDeepObject

	return WeaklyTypedOneOfObject{
		DeepObject: &deepObject,
		Type:       typ,
	}
}

func (u *WeaklyTypedOneOfObject) UnmarshalJSON(data []byte) error {

	var deepObject DeepObject = DeepObject{}
	if err := utils.UnmarshalJSON(data, &deepObject, "", true, true); err == nil {
		u.DeepObject = &deepObject
		u.Type = WeaklyTypedOneOfObjectTypeDeepObject
		return nil
	}

	var simpleObject SimpleObject = SimpleObject{}
	if err := utils.UnmarshalJSON(data, &simpleObject, "", true, true); err == nil {
		u.SimpleObject = &simpleObject
		u.Type = WeaklyTypedOneOfObjectTypeSimpleObject
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for WeaklyTypedOneOfObject", string(data))
}

func (u WeaklyTypedOneOfObject) MarshalJSON() ([]byte, error) {
	if u.SimpleObject != nil {
		return utils.MarshalJSON(u.SimpleObject, "", true)
	}

	if u.DeepObject != nil {
		return utils.MarshalJSON(u.DeepObject, "", true)
	}

	return nil, errors.New("could not marshal union type WeaklyTypedOneOfObject: all fields are null")
}
