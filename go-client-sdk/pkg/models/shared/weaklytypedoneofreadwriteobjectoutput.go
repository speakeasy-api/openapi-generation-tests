// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"openapi/v2/pkg/utils"
)

type WeaklyTypedOneOfReadWriteObjectOutputType string

const (
	WeaklyTypedOneOfReadWriteObjectOutputTypeSimpleObject          WeaklyTypedOneOfReadWriteObjectOutputType = "simpleObject"
	WeaklyTypedOneOfReadWriteObjectOutputTypeReadWriteObjectOutput WeaklyTypedOneOfReadWriteObjectOutputType = "readWriteObject_output"
)

type WeaklyTypedOneOfReadWriteObjectOutput struct {
	SimpleObject          *SimpleObject
	ReadWriteObjectOutput *ReadWriteObjectOutput

	Type WeaklyTypedOneOfReadWriteObjectOutputType
}

func CreateWeaklyTypedOneOfReadWriteObjectOutputSimpleObject(simpleObject SimpleObject) WeaklyTypedOneOfReadWriteObjectOutput {
	typ := WeaklyTypedOneOfReadWriteObjectOutputTypeSimpleObject

	return WeaklyTypedOneOfReadWriteObjectOutput{
		SimpleObject: &simpleObject,
		Type:         typ,
	}
}

func CreateWeaklyTypedOneOfReadWriteObjectOutputReadWriteObjectOutput(readWriteObjectOutput ReadWriteObjectOutput) WeaklyTypedOneOfReadWriteObjectOutput {
	typ := WeaklyTypedOneOfReadWriteObjectOutputTypeReadWriteObjectOutput

	return WeaklyTypedOneOfReadWriteObjectOutput{
		ReadWriteObjectOutput: &readWriteObjectOutput,
		Type:                  typ,
	}
}

func (u *WeaklyTypedOneOfReadWriteObjectOutput) UnmarshalJSON(data []byte) error {

	var readWriteObjectOutput ReadWriteObjectOutput = ReadWriteObjectOutput{}
	if err := utils.UnmarshalJSON(data, &readWriteObjectOutput, "", true, true); err == nil {
		u.ReadWriteObjectOutput = &readWriteObjectOutput
		u.Type = WeaklyTypedOneOfReadWriteObjectOutputTypeReadWriteObjectOutput
		return nil
	}

	var simpleObject SimpleObject = SimpleObject{}
	if err := utils.UnmarshalJSON(data, &simpleObject, "", true, true); err == nil {
		u.SimpleObject = &simpleObject
		u.Type = WeaklyTypedOneOfReadWriteObjectOutputTypeSimpleObject
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for WeaklyTypedOneOfReadWriteObjectOutput", string(data))
}

func (u WeaklyTypedOneOfReadWriteObjectOutput) MarshalJSON() ([]byte, error) {
	if u.SimpleObject != nil {
		return utils.MarshalJSON(u.SimpleObject, "", true)
	}

	if u.ReadWriteObjectOutput != nil {
		return utils.MarshalJSON(u.ReadWriteObjectOutput, "", true)
	}

	return nil, errors.New("could not marshal union type WeaklyTypedOneOfReadWriteObjectOutput: all fields are null")
}
