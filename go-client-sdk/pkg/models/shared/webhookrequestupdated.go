// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type WebhookRequestUpdatedType string

const (
	WebhookRequestUpdatedTypeWebhookUpdated WebhookRequestUpdatedType = "webhook.updated"
)

func (e WebhookRequestUpdatedType) ToPointer() *WebhookRequestUpdatedType {
	return &e
}
func (e *WebhookRequestUpdatedType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "webhook.updated":
		*e = WebhookRequestUpdatedType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookRequestUpdatedType: %v", v)
	}
}

type WebhookRequestUpdated struct {
	// A simple object that uses all our supported primitive types and enums and has optional properties.
	Data SimpleObject              `json:"data"`
	Type WebhookRequestUpdatedType `json:"type"`
}

func (o *WebhookRequestUpdated) GetData() SimpleObject {
	if o == nil {
		return SimpleObject{}
	}
	return o.Data
}

func (o *WebhookRequestUpdated) GetType() WebhookRequestUpdatedType {
	if o == nil {
		return WebhookRequestUpdatedType("")
	}
	return o.Type
}
