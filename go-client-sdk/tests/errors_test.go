// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package tests

import (
	"context"
	"testing"

	"openapi/pkg/models/sdkerrors"

	sdk "openapi"

	"github.com/stretchr/testify/assert"
)

func TestStatusGetError_DefaultErrorCodes(t *testing.T) {
	recordTest("errors-status-get-error-default-error-codes")

	s := sdk.New()

	res, err := s.Errors.StatusGetError(context.Background(), 400)
	assert.Error(t, err)
	assert.Equal(t, "API error occurred: Status 400", err.Error())

	var sdkErr *sdkerrors.SDKError
	if assert.ErrorAs(t, err, &sdkErr) {
		assert.Equal(t, 400, sdkErr.StatusCode)
		assert.Equal(t, 400, sdkErr.RawResponse.StatusCode)
	}

	assert.Nil(t, res)

	res, err = s.Errors.StatusGetError(context.Background(), 500)
	assert.Error(t, err)
	assert.Equal(t, "API error occurred: Status 500", err.Error())

	if assert.ErrorAs(t, err, &sdkErr) {
		assert.Equal(t, 500, sdkErr.StatusCode)
		assert.Equal(t, 500, sdkErr.RawResponse.StatusCode)
	}

	assert.Nil(t, res)
}

func TestStatusGetError_300_NonError(t *testing.T) {
	recordTest("errors-status-get-error-300-non-error")

	s := sdk.New()

	res, err := s.Errors.StatusGetError(context.Background(), 300)
	assert.NoError(t, err)

	assert.Equal(t, 300, res.StatusCode)
}

func TestStatusGetErrorXSpeakeasyErrors(t *testing.T) {
	recordTest("errors-status-get-error-x-speakeasy-errors")

	s := sdk.New()

	res, err := s.Errors.StatusGetXSpeakeasyErrors(context.Background(), 400)
	assert.Error(t, err)
	assert.Equal(t, "API error occurred: Status 400\n{\"message\":\"an error occurred\",\"code\":\"400\"}\n", err.Error())

	var sdkErr *sdkerrors.SDKError
	if assert.ErrorAs(t, err, &sdkErr) {
		assert.Equal(t, 400, sdkErr.StatusCode)
		assert.Equal(t, 400, sdkErr.RawResponse.StatusCode)
	}

	assert.Nil(t, res)

	res, err = s.Errors.StatusGetXSpeakeasyErrors(context.Background(), 401)
	assert.Error(t, err)
	assert.Equal(t, "API error occurred: Status 401\n{\"message\":\"an error occurred\",\"code\":\"401\"}\n", err.Error())

	if assert.ErrorAs(t, err, &sdkErr) {
		assert.Equal(t, 401, sdkErr.StatusCode)
		assert.Equal(t, 401, sdkErr.RawResponse.StatusCode)
	}

	assert.Nil(t, res)

	res, err = s.Errors.StatusGetXSpeakeasyErrors(context.Background(), 402)
	assert.Error(t, err)
	assert.Equal(t, "API error occurred: Status 402\n{\"message\":\"an error occurred\",\"code\":\"402\"}\n", err.Error())

	if assert.ErrorAs(t, err, &sdkErr) {
		assert.Equal(t, 402, sdkErr.StatusCode)
		assert.Equal(t, 402, sdkErr.RawResponse.StatusCode)
	}

	assert.Nil(t, res)

	res, err = s.Errors.StatusGetXSpeakeasyErrors(context.Background(), 500)
	assert.Error(t, err)
	assert.Equal(t, "an error occurred", err.Error())

	var e *sdkerrors.Error
	if assert.ErrorAs(t, err, &e) {
		assert.Equal(t, "500", *e.Code)
		assert.Equal(t, 500, e.RawResponse.StatusCode)
	}

	res, err = s.Errors.StatusGetXSpeakeasyErrors(context.Background(), 501)
	assert.Error(t, err)
	assert.Equal(t, `{"code":"501","message":"an error occurred"}`, err.Error())

	var e501 *sdkerrors.StatusGetXSpeakeasyErrors501ApplicationJSON
	if assert.ErrorAs(t, err, &e501) {
		assert.Equal(t, "501", *e501.Code)
		assert.Equal(t, 501, e501.RawResponse.StatusCode)
	}

	assert.Nil(t, res)
}

func TestConnectionErrorGet(t *testing.T) {
	recordTest("errors-connection-error")

	s := sdk.New()

	res, err := s.Errors.ConnectionErrorGet(context.Background())
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "error sending request: Get \"http://somebrokenapi.broken/anything/connectionError\": dial tcp: lookup somebrokenapi.broken")
	assert.Nil(t, res)
}
