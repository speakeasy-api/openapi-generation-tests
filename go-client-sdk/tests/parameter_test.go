// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package tests

import (
	"context"
	"net/http"
	"testing"

	"openapi/pkg/models/operations"
	"openapi/pkg/models/shared"

	sdk "openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestMixedParameterPrimitives(t *testing.T) {
	recordTest("parameters-mixed-primitives")

	s := sdk.New()

	res, err := s.Parameters.MixedParametersPrimitives(context.Background(), "headerValue", "pathValue", "queryValue")
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, "http://localhost:35123/anything/mixedParams/path/pathValue?queryStringParam=queryValue", res.Res.URL)
	assert.Equal(t, "headerValue", res.Res.Headers.Headerparam)
	assert.Equal(t, "queryValue", res.Res.Args.QueryStringParam)
}

func TestMixedParametersCamelCase(t *testing.T) {
	recordTest("parameters-camel-case")

	s := sdk.New()

	res, err := s.Parameters.MixedParametersCamelCase(context.Background(), "headerValue", "pathValue", "queryValue")
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, "http://localhost:35123/anything/mixedParams/path/pathValue/camelcase?query_string_param=queryValue", res.Res.URL)
	assert.Equal(t, "headerValue", res.Res.Headers.HeaderParam)
	assert.Equal(t, "queryValue", res.Res.Args.QueryStringParam)
}

func TestSimplePathParameterPrimitives(t *testing.T) {
	recordTest("parameters-simple-path-parameter-primitives")

	s := sdk.New()

	res, err := s.Parameters.SimplePathParameterPrimitives(context.Background(), true, 1, 1.1, "test")
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, "http://localhost:35123/anything/pathParams/str/test/bool/true/int/1/num/1.1", res.Res.URL)
}

func TestSimplePathParameterObjects(t *testing.T) {
	recordTest("parameters-simple-path-parameter-objects")

	s := sdk.New()

	res, err := s.Parameters.SimplePathParameterObjects(context.Background(), createSimpleObject(), createSimpleObject())
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, "http://localhost:35123/anything/pathParams/obj/any,any,bigint,8821239038968084,bigintStr,1344719667586153181419716641724567886890850696275767987106294472017884974410332069524504824747437757,bool,true,boolOpt,true,date,2020-01-01,dateTime,2020-01-01T00:00:00.000000001Z,enum,one,float32,1.1,int,1,int32,1,int32Enum,55,intEnum,2,num,1.1,str,test,strOpt,testOptional/objExploded/any=any,bigint=8821239038968084,bigintStr=1344719667586153181419716641724567886890850696275767987106294472017884974410332069524504824747437757,bool=true,boolOpt=true,date=2020-01-01,dateTime=2020-01-01T00:00:00.000000001Z,enum=one,float32=1.1,int=1,int32=1,int32Enum=55,intEnum=2,num=1.1,str=test,strOpt=testOptional", res.Res.URL)
}

func TestSimplePathParameterArrays(t *testing.T) {
	recordTest("parameters-simple-path-parameter-arrays")

	s := sdk.New()

	res, err := s.Parameters.SimplePathParameterArrays(context.Background(), []string{"test", "test2"})
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, "http://localhost:35123/anything/pathParams/arr/test,test2", res.Res.URL)
}

func TestSimplePathParameterMaps(t *testing.T) {
	recordTest("parameters-simple-path-parameter-maps")

	s := sdk.New()

	res, err := s.Parameters.SimplePathParameterMaps(context.Background(),
		map[string]string{
			"test":  "value",
			"test2": "value2",
		}, map[string]int64{
			"test":  1,
			"test2": 2,
		},
	)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, "http://localhost:35123/anything/pathParams/map/test,value,test2,value2/mapExploded/test=1,test2=2", sortSerializedMaps(res.Res.URL, `.*?\/map\/(.*?)\/mapExploded\/(.*)`, ","))
}

func TestPathParameterJSON(t *testing.T) {
	recordTest("parameters-path-parameter-json")

	s := sdk.New()

	res, err := s.Parameters.PathParameterJSON(context.Background(), createSimpleObject())
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, `http://localhost:35123/anything/pathParams/json/{"any":"any","bigint":8821239038968084,"bigintStr":"1344719667586153181419716641724567886890850696275767987106294472017884974410332069524504824747437757","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.000000001Z","enum":"one","float32":1.1,"int":1,"int32":1,"int32Enum":55,"intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"}`, res.Res.URL)
}

func TestFormQueryParamsPrimitive(t *testing.T) {
	recordTest("parameters-form-query-params-primitive")

	s := sdk.New()

	res, err := s.Parameters.FormQueryParamsPrimitive(context.Background(), true, 1, 1.1, "test")
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, "http://localhost:35123/anything/queryParams/form/primitive?boolParam=true&intParam=1&numParam=1.1&strParam=test", res.Res.URL)
	assert.Equal(t, "true", res.Res.Args.BoolParam)
	assert.Equal(t, "1", res.Res.Args.IntParam)
	assert.Equal(t, "1.1", res.Res.Args.NumParam)
	assert.Equal(t, "test", res.Res.Args.StrParam)
}

func TestFormQueryParamsObject(t *testing.T) {
	recordTest("parameters-form-query-params-object")

	s := sdk.New()

	obj := createSimpleObject()

	res, err := s.Parameters.FormQueryParamsObject(context.Background(), obj, &obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, "http://localhost:35123/anything/queryParams/form/obj?any=any&bigint=8821239038968084&bigintStr=1344719667586153181419716641724567886890850696275767987106294472017884974410332069524504824747437757&bool=true&boolOpt=true&date=2020-01-01&dateTime=2020-01-01T00%3A00%3A00.000000001Z&enum=one&float32=1.1&int=1&int32=1&int32Enum=55&intEnum=2&num=1.1&objParam=any%2Cany%2Cbigint%2C8821239038968084%2CbigintStr%2C1344719667586153181419716641724567886890850696275767987106294472017884974410332069524504824747437757%2Cbool%2Ctrue%2CboolOpt%2Ctrue%2Cdate%2C2020-01-01%2CdateTime%2C2020-01-01T00%3A00%3A00.000000001Z%2Cenum%2Cone%2Cfloat32%2C1.1%2Cint%2C1%2Cint32%2C1%2Cint32Enum%2C55%2CintEnum%2C2%2Cnum%2C1.1%2Cstr%2Ctest%2CstrOpt%2CtestOptional&str=test&strOpt=testOptional", res.Res.URL)
	assert.Equal(t, "test", res.Res.Args.Str)
	assert.Equal(t, "true", res.Res.Args.Bool)
	assert.Equal(t, "1344719667586153181419716641724567886890850696275767987106294472017884974410332069524504824747437757", *res.Res.Args.BigintStr)
	assert.Equal(t, "8821239038968084", *res.Res.Args.Bigint)
	assert.Equal(t, "1", res.Res.Args.Int)
	assert.Equal(t, "1", res.Res.Args.Int32)
	assert.Equal(t, "2", res.Res.Args.IntEnum)
	assert.Equal(t, "55", res.Res.Args.Int32Enum)
	assert.Equal(t, "1.1", res.Res.Args.Num)
	assert.Equal(t, "1.1", res.Res.Args.Float32)
	assert.Equal(t, "one", res.Res.Args.Enum)
	assert.Equal(t, "any", res.Res.Args.Any)
	assert.Equal(t, "2020-01-01", res.Res.Args.Date)
	assert.Equal(t, "2020-01-01T00:00:00.000000001Z", res.Res.Args.DateTime)
	assert.Equal(t, "true", *res.Res.Args.BoolOpt)
	assert.Equal(t, "testOptional", *res.Res.Args.StrOpt)
	assert.Nil(t, res.Res.Args.IntOptNull)
	assert.Nil(t, res.Res.Args.NumOptNull)
	assert.Equal(t, "any,any,bigint,8821239038968084,bigintStr,1344719667586153181419716641724567886890850696275767987106294472017884974410332069524504824747437757,bool,true,boolOpt,true,date,2020-01-01,dateTime,2020-01-01T00:00:00.000000001Z,enum,one,float32,1.1,int,1,int32,1,int32Enum,55,intEnum,2,num,1.1,str,test,strOpt,testOptional", res.Res.Args.ObjParam)
}

func TestFormQueryParamsRefParamObject(t *testing.T) {
	recordTest("parameters-form-query-params-ref-param-object")

	s := sdk.New()

	res, err := s.Parameters.FormQueryParamsRefParamObject(context.Background(),
		&shared.RefQueryParamObj{
			Bool: true,
			Int:  1,
			Num:  1.1,
			Str:  "test",
		},
		&shared.RefQueryParamObjExploded{
			Bool: true,
			Int:  1,
			Num:  1.1,
			Str:  "test",
		},
	)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, "http://localhost:35123/anything/queryParams/form/refParamObject?bool=true&int=1&num=1.1&refObjParam=bool%2Ctrue%2Cint%2C1%2Cnum%2C1.1%2Cstr%2Ctest&str=test", res.Res.URL)
	assert.Equal(t, "test", res.Res.Args.Str)
	assert.Equal(t, "true", res.Res.Args.Bool)
	assert.Equal(t, "1", res.Res.Args.Int)
	assert.Equal(t, "1.1", res.Res.Args.Num)
	assert.Equal(t, "bool,true,int,1,num,1.1,str,test", res.Res.Args.RefObjParam)
}

func TestFormQueryParamsArray(t *testing.T) {
	recordTest("parameters-form-query-params-array")

	s := sdk.New()

	res, err := s.Parameters.FormQueryParamsArray(context.Background(), []string{"test", "test2"}, []int64{1, 2})
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, "http://localhost:35123/anything/queryParams/form/array?arrParam=test%2Ctest2&arrParamExploded=1&arrParamExploded=2", res.Res.URL)
	assert.Equal(t, "test,test2", res.Res.Args.ArrParam)
	assert.Equal(t, []string{"1", "2"}, res.Res.Args.ArrParamExploded)
}

func TestPipeDelimitedQueryParamsArray(t *testing.T) {
	recordTest("parameters-pipe-query-params-array")

	s := sdk.New()

	obj := createSimpleObject()
	mapArg := map[string]string{
		"key1": "val1",
		"key2": "val2",
	}

	res, err := s.Parameters.PipeDelimitedQueryParamsArray(context.Background(), []string{"test", "test2"}, []int64{1, 2}, mapArg, &obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, "http://localhost:35123/anything/queryParams/pipe/array?arrParam=test|test2&arrParamExploded=1&arrParamExploded=2&mapParam=key1|val1|key2|val2&objParam=any|any|bigint|8821239038968084|bigintStr|1344719667586153181419716641724567886890850696275767987106294472017884974410332069524504824747437757|bool|true|boolOpt|true|date|2020-01-01|dateTime|2020-01-01T00:00:00.000000001Z|enum|one|float32|1.1|int|1|int32|1|int32Enum|55|intEnum|2|num|1.1|str|test|strOpt|testOptional", sortSerializedMaps(res.Res.URL, `.*?&mapParam=(.*?)&.*`, "|"))
	assert.Equal(t, "test|test2", res.Res.Args.ArrParam)
	assert.Equal(t, []string{"1", "2"}, res.Res.Args.ArrParamExploded)
}

func TestFormQueryParamsMap(t *testing.T) {
	recordTest("parameters-form-query-params-map")

	s := sdk.New()

	res, err := s.Parameters.FormQueryParamsMap(context.Background(),
		map[string]string{
			"test":  "value",
			"test2": "value2",
		},
		map[string]int64{
			"test":  1,
			"test2": 2,
		},
	)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	// Just a note we are comparing with an unescaped URL here as the sortSerializedMaps unescapes the URL to be able to sort the maps for comparison, in other languages we would not need to do this and therefore can compare with the escaped URL
	assert.Equal(t, "http://localhost:35123/anything/queryParams/form/map?mapParam=test,value,test2,value2&test=1&test2=2", sortSerializedMaps(res.Res.URL, `.*?\?mapParam=(.*?)&(.*)`, ","))

	if mapParam, ok := res.Res.Args["mapParam"]; ok {
		res.Res.Args["mapParam"] = sortSerializedMaps(mapParam, `(.*)`, ",")
	}

	assert.Equal(t, map[string]string{
		"mapParam": "test,value,test2,value2",
		"test":     "1",
		"test2":    "2",
	}, res.Res.Args)
}

func TestDeepObjectQueryParamsObject(t *testing.T) {
	recordTest("parameters-deep-object-query-params-object")

	s := sdk.New()

	obj := createSimpleObject()

	res, err := s.Parameters.DeepObjectQueryParamsObject(context.Background(), obj,
		&operations.DeepObjectQueryParamsObjectObjArrParam{
			Arr: []string{"test", "test2"},
		},
	)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, `http://localhost:35123/anything/queryParams/deepObject/obj?objArrParam[arr]=test&objArrParam[arr]=test2&objParam[any]=any&objParam[bigintStr]=1344719667586153181419716641724567886890850696275767987106294472017884974410332069524504824747437757&objParam[bigint]=8821239038968084&objParam[boolOpt]=true&objParam[bool]=true&objParam[dateTime]=2020-01-01T00%3A00%3A00.000000001Z&objParam[date]=2020-01-01&objParam[enum]=one&objParam[float32]=1.1&objParam[int32Enum]=55&objParam[int32]=1&objParam[intEnum]=2&objParam[int]=1&objParam[num]=1.1&objParam[strOpt]=testOptional&objParam[str]=test`, res.Res.URL)
	assert.Equal(t, []string{"test", "test2"}, res.Res.Args.ObjArrParamArr)
	assert.Equal(t, "any", res.Res.Args.ObjParamAny)
	assert.Equal(t, "8821239038968084", *res.Res.Args.ObjParamBigint)
	assert.Equal(t, "1344719667586153181419716641724567886890850696275767987106294472017884974410332069524504824747437757", *res.Res.Args.ObjParamBigintStr)
	assert.Equal(t, "true", res.Res.Args.ObjParamBoolOpt)
	assert.Equal(t, "true", res.Res.Args.ObjParamBool)
	assert.Equal(t, "2020-01-01T00:00:00.000000001Z", res.Res.Args.ObjParamDateTime)
	assert.Equal(t, "2020-01-01", res.Res.Args.ObjParamDate)
	assert.Equal(t, "one", res.Res.Args.ObjParamEnum)
	assert.Equal(t, "1.1", res.Res.Args.ObjParamFloat32)
	assert.Equal(t, "1", res.Res.Args.ObjParamInt32)
	assert.Equal(t, "1", res.Res.Args.ObjParamInt)
	assert.Equal(t, "2", res.Res.Args.ObjParamIntEnum)
	assert.Equal(t, "55", res.Res.Args.ObjParamInt32Enum)
	assert.Equal(t, "1.1", res.Res.Args.ObjParamNum)
	assert.Equal(t, "testOptional", res.Res.Args.ObjParamStrOpt)
	assert.Equal(t, "test", res.Res.Args.ObjParamStr)
}

func TestDeepObjectQueryParamsMap(t *testing.T) {
	recordTest("parameters-deep-object-query-params-map")

	s := sdk.New()

	res, err := s.Parameters.DeepObjectQueryParamsMap(context.Background(),
		map[string]string{
			"test":  "value",
			"test2": "value2",
		},
		map[string][]string{
			"test":  {"test", "test2"},
			"test2": {"test3", "test4"},
		},
	)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, "http://localhost:35123/anything/queryParams/deepObject/map?mapArrParam[test2]=test3&mapArrParam[test2]=test4&mapArrParam[test]=test&mapArrParam[test]=test2&mapParam[test2]=value2&mapParam[test]=value", res.Res.URL)
	assert.Equal(t, map[string]interface{}{
		"mapArrParam[test]":  []interface{}{"test", "test2"},
		"mapArrParam[test2]": []interface{}{"test3", "test4"},
		"mapParam[test]":     "value",
		"mapParam[test2]":    "value2",
	}, res.Res.Args)
}

func TestJSONQueryParamsObject(t *testing.T) {
	recordTest("parameters-json-query-params-object")

	s := sdk.New()

	simpleObj := createSimpleObject()
	deepObj := createDeepObject()

	res, err := s.Parameters.JSONQueryParamsObject(context.Background(), deepObj, simpleObj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, `http://localhost:35123/anything/queryParams/json/obj?deepObjParam={"any"%3A{"any"%3A"any"%2C"bigint"%3A8821239038968084%2C"bigintStr"%3A"1344719667586153181419716641724567886890850696275767987106294472017884974410332069524504824747437757"%2C"bool"%3Atrue%2C"boolOpt"%3Atrue%2C"date"%3A"2020-01-01"%2C"dateTime"%3A"2020-01-01T00%3A00%3A00.000000001Z"%2C"enum"%3A"one"%2C"float32"%3A1.1%2C"int"%3A1%2C"int32"%3A1%2C"int32Enum"%3A55%2C"intEnum"%3A2%2C"num"%3A1.1%2C"str"%3A"test"%2C"strOpt"%3A"testOptional"}%2C"arr"%3A[{"any"%3A"any"%2C"bigint"%3A8821239038968084%2C"bigintStr"%3A"1344719667586153181419716641724567886890850696275767987106294472017884974410332069524504824747437757"%2C"bool"%3Atrue%2C"boolOpt"%3Atrue%2C"date"%3A"2020-01-01"%2C"dateTime"%3A"2020-01-01T00%3A00%3A00.000000001Z"%2C"enum"%3A"one"%2C"float32"%3A1.1%2C"int"%3A1%2C"int32"%3A1%2C"int32Enum"%3A55%2C"intEnum"%3A2%2C"num"%3A1.1%2C"str"%3A"test"%2C"strOpt"%3A"testOptional"}%2C{"any"%3A"any"%2C"bigint"%3A8821239038968084%2C"bigintStr"%3A"1344719667586153181419716641724567886890850696275767987106294472017884974410332069524504824747437757"%2C"bool"%3Atrue%2C"boolOpt"%3Atrue%2C"date"%3A"2020-01-01"%2C"dateTime"%3A"2020-01-01T00%3A00%3A00.000000001Z"%2C"enum"%3A"one"%2C"float32"%3A1.1%2C"int"%3A1%2C"int32"%3A1%2C"int32Enum"%3A55%2C"intEnum"%3A2%2C"num"%3A1.1%2C"str"%3A"test"%2C"strOpt"%3A"testOptional"}]%2C"bool"%3Atrue%2C"int"%3A1%2C"map"%3A{"key"%3A{"any"%3A"any"%2C"bigint"%3A8821239038968084%2C"bigintStr"%3A"1344719667586153181419716641724567886890850696275767987106294472017884974410332069524504824747437757"%2C"bool"%3Atrue%2C"boolOpt"%3Atrue%2C"date"%3A"2020-01-01"%2C"dateTime"%3A"2020-01-01T00%3A00%3A00.000000001Z"%2C"enum"%3A"one"%2C"float32"%3A1.1%2C"int"%3A1%2C"int32"%3A1%2C"int32Enum"%3A55%2C"intEnum"%3A2%2C"num"%3A1.1%2C"str"%3A"test"%2C"strOpt"%3A"testOptional"}}%2C"num"%3A1.1%2C"obj"%3A{"any"%3A"any"%2C"bigint"%3A8821239038968084%2C"bigintStr"%3A"1344719667586153181419716641724567886890850696275767987106294472017884974410332069524504824747437757"%2C"bool"%3Atrue%2C"boolOpt"%3Atrue%2C"date"%3A"2020-01-01"%2C"dateTime"%3A"2020-01-01T00%3A00%3A00.000000001Z"%2C"enum"%3A"one"%2C"float32"%3A1.1%2C"int"%3A1%2C"int32"%3A1%2C"int32Enum"%3A55%2C"intEnum"%3A2%2C"num"%3A1.1%2C"str"%3A"test"%2C"strOpt"%3A"testOptional"}%2C"str"%3A"test"}&simpleObjParam={"any"%3A"any"%2C"bigint"%3A8821239038968084%2C"bigintStr"%3A"1344719667586153181419716641724567886890850696275767987106294472017884974410332069524504824747437757"%2C"bool"%3Atrue%2C"boolOpt"%3Atrue%2C"date"%3A"2020-01-01"%2C"dateTime"%3A"2020-01-01T00%3A00%3A00.000000001Z"%2C"enum"%3A"one"%2C"float32"%3A1.1%2C"int"%3A1%2C"int32"%3A1%2C"int32Enum"%3A55%2C"intEnum"%3A2%2C"num"%3A1.1%2C"str"%3A"test"%2C"strOpt"%3A"testOptional"}`, res.Res.URL)
	assert.Equal(t, marshalJSON(t, simpleObj), res.Res.Args.SimpleObjParam)
	assert.Equal(t, marshalJSON(t, deepObj), res.Res.Args.DeepObjParam)
}

func TestMixedQueryParams(t *testing.T) {
	recordTest("parameters-mixed-query-params")

	s := sdk.New()

	obj := createSimpleObject()

	res, err := s.Parameters.MixedQueryParams(context.Background(), obj, obj, obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, `http://localhost:35123/anything/queryParams/mixed?any=any&bigint=8821239038968084&bigintStr=1344719667586153181419716641724567886890850696275767987106294472017884974410332069524504824747437757&bool=true&boolOpt=true&date=2020-01-01&dateTime=2020-01-01T00%3A00%3A00.000000001Z&deepObjectParam[any]=any&deepObjectParam[bigintStr]=1344719667586153181419716641724567886890850696275767987106294472017884974410332069524504824747437757&deepObjectParam[bigint]=8821239038968084&deepObjectParam[boolOpt]=true&deepObjectParam[bool]=true&deepObjectParam[dateTime]=2020-01-01T00%3A00%3A00.000000001Z&deepObjectParam[date]=2020-01-01&deepObjectParam[enum]=one&deepObjectParam[float32]=1.1&deepObjectParam[int32Enum]=55&deepObjectParam[int32]=1&deepObjectParam[intEnum]=2&deepObjectParam[int]=1&deepObjectParam[num]=1.1&deepObjectParam[strOpt]=testOptional&deepObjectParam[str]=test&enum=one&float32=1.1&int=1&int32=1&int32Enum=55&intEnum=2&jsonParam={"any"%3A"any"%2C"bigint"%3A8821239038968084%2C"bigintStr"%3A"1344719667586153181419716641724567886890850696275767987106294472017884974410332069524504824747437757"%2C"bool"%3Atrue%2C"boolOpt"%3Atrue%2C"date"%3A"2020-01-01"%2C"dateTime"%3A"2020-01-01T00%3A00%3A00.000000001Z"%2C"enum"%3A"one"%2C"float32"%3A1.1%2C"int"%3A1%2C"int32"%3A1%2C"int32Enum"%3A55%2C"intEnum"%3A2%2C"num"%3A1.1%2C"str"%3A"test"%2C"strOpt"%3A"testOptional"}&num=1.1&str=test&strOpt=testOptional`, res.Res.URL)
	assert.Equal(t, map[string]string{
		"any":                        "any",
		"bigint":                     "8821239038968084",
		"bigintStr":                  "1344719667586153181419716641724567886890850696275767987106294472017884974410332069524504824747437757",
		"bool":                       "true",
		"boolOpt":                    "true",
		"date":                       "2020-01-01",
		"dateTime":                   "2020-01-01T00:00:00.000000001Z",
		"deepObjectParam[any]":       "any",
		"deepObjectParam[bigint]":    "8821239038968084",
		"deepObjectParam[bigintStr]": "1344719667586153181419716641724567886890850696275767987106294472017884974410332069524504824747437757",
		"deepObjectParam[boolOpt]":   "true",
		"deepObjectParam[bool]":      "true",
		"deepObjectParam[dateTime]":  "2020-01-01T00:00:00.000000001Z",
		"deepObjectParam[date]":      "2020-01-01",
		"deepObjectParam[enum]":      "one",
		"deepObjectParam[float32]":   "1.1",
		"deepObjectParam[int32]":     "1",
		"deepObjectParam[int]":       "1",
		"deepObjectParam[intEnum]":   "2",
		"deepObjectParam[int32Enum]": "55",
		"deepObjectParam[num]":       "1.1",
		"deepObjectParam[strOpt]":    "testOptional",
		"deepObjectParam[str]":       "test",
		"enum":                       "one",
		"float32":                    "1.1",
		"int":                        "1",
		"int32":                      "1",
		"intEnum":                    "2",
		"int32Enum":                  "55",
		"jsonParam":                  marshalJSON(t, obj),
		"num":                        "1.1",
		"str":                        "test",
		"strOpt":                     "testOptional",
	}, res.Res.Args)
}

func TestHeaderParamsPrimitive(t *testing.T) {
	recordTest("parameters-header-params-primitive")

	s := sdk.New()

	res, err := s.Parameters.HeaderParamsPrimitive(context.Background(), true, 1, 1.1, "test")
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, "true", res.Res.Headers.XHeaderBoolean)
	assert.Equal(t, "1", res.Res.Headers.XHeaderInteger)
	assert.Equal(t, "1.1", res.Res.Headers.XHeaderNumber)
	assert.Equal(t, "test", res.Res.Headers.XHeaderString)
}

func TestHeaderParamsObject(t *testing.T) {
	recordTest("parameters-header-params-object")

	s := sdk.New()

	obj := createSimpleObject()

	res, err := s.Parameters.HeaderParamsObject(context.Background(), obj, obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, "any,any,bigint,8821239038968084,bigintStr,1344719667586153181419716641724567886890850696275767987106294472017884974410332069524504824747437757,bool,true,boolOpt,true,date,2020-01-01,dateTime,2020-01-01T00:00:00.000000001Z,enum,one,float32,1.1,int,1,int32,1,int32Enum,55,intEnum,2,num,1.1,str,test,strOpt,testOptional", res.Res.Headers.XHeaderObj)
	assert.Equal(t, "any=any,bigint=8821239038968084,bigintStr=1344719667586153181419716641724567886890850696275767987106294472017884974410332069524504824747437757,bool=true,boolOpt=true,date=2020-01-01,dateTime=2020-01-01T00:00:00.000000001Z,enum=one,float32=1.1,int=1,int32=1,int32Enum=55,intEnum=2,num=1.1,str=test,strOpt=testOptional", res.Res.Headers.XHeaderObjExplode)
}

func TestHeaderParamsMap(t *testing.T) {
	recordTest("parameters-header-params-map")

	s := sdk.New()

	res, err := s.Parameters.HeaderParamsMap(context.Background(),
		map[string]string{
			"key1": "value1",
			"key2": "value2",
		},
		map[string]string{
			"test1": "val1",
			"test2": "val2",
		},
	)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, "key1,value1,key2,value2", sortSerializedMaps(res.Res.Headers.XHeaderMap, `(.*)`, ","))
	assert.Equal(t, "test1=val1,test2=val2", sortSerializedMaps(res.Res.Headers.XHeaderMapExplode, `(.*)`, ","))
}

func TestHeaderParamsArray(t *testing.T) {
	recordTest("parameters-header-params-array")

	s := sdk.New()

	res, err := s.Parameters.HeaderParamsArray(context.Background(), []string{"test1", "test2"})
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, "test1,test2", res.Res.Headers.XHeaderArray)
}
