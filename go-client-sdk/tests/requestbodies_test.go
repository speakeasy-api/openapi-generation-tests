// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"math/big"
	openapi "openapi/v2"
	"openapi/v2/pkg/models/operations"
	"openapi/v2/pkg/models/shared"
	"openapi/v2/pkg/types"
	"testing"
)

func TestRequestBodies_RequestBodyPostMultipleContentTypesComponentFiltered_MultipartFormData(t *testing.T) {
	recordTest("request-bodies-post-multiple-content-types-component-filtered-multipart-form-data")

	s := openapi.New()
	request := shared.SimpleObject{
		Any:        "any",
		Bigint:     big.NewInt(8821239038968084),
		BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
		Bool:       true,
		BoolOpt:    openapi.Bool(true),
		Date:       types.MustDateFromString("2020-01-01"),
		DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
		Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
		DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
		Enum:       shared.EnumOne,
		Float32:    1.1,
		Float64Str: openapi.Float64(1.1),
		Int:        1,
		Int32:      1,
		Int32Enum:  shared.Int32EnumFiftyFive,
		Int64Str:   openapi.Int64(100),
		IntEnum:    shared.IntEnumSecond,
		Num:        1.1,
		Str:        "test",
		StrOpt:     openapi.String("testOptional"),
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostMultipleContentTypesComponentFiltered(ctx, request)
	require.NoError(t, err)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostMultipleContentTypesComponentFilteredRes{
		JSON: shared.SimpleObject{
			Any:        "any",
			Bigint:     big.NewInt(8821239038968084),
			BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
			Bool:       true,
			BoolOpt:    openapi.Bool(true),
			Date:       types.MustDateFromString("2020-01-01"),
			DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
			Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
			DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
			Enum:       shared.EnumOne,
			Float32:    1.1,
			Float64Str: openapi.Float64(1.1),
			Int:        1,
			Int32:      1,
			Int32Enum:  shared.Int32EnumFiftyFive,
			Int64Str:   openapi.Int64(100),
			IntEnum:    shared.IntEnumSecond,
			Num:        1.1,
			Str:        "test",
			StrOpt:     openapi.String("testOptional"),
		},
	}, *res.Res)
}

func TestRequestBodies_RequestBodyPostMultipleContentTypesComponentFiltered_ApplicationJSON(t *testing.T) {
	recordTest("request-bodies-post-multiple-content-types-component-filtered-application-json")

	s := openapi.New()
	request := shared.SimpleObject{
		Any:        "any",
		Bigint:     big.NewInt(8821239038968084),
		BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
		Bool:       true,
		BoolOpt:    openapi.Bool(true),
		Date:       types.MustDateFromString("2020-01-01"),
		DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
		Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
		DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
		Enum:       shared.EnumOne,
		Float32:    1.1,
		Float64Str: openapi.Float64(1.1),
		Int:        1,
		Int32:      1,
		Int32Enum:  shared.Int32EnumFiftyFive,
		Int64Str:   openapi.Int64(100),
		IntEnum:    shared.IntEnumSecond,
		Num:        1.1,
		Str:        "test",
		StrOpt:     openapi.String("testOptional"),
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostMultipleContentTypesComponentFiltered(ctx, request)
	require.NoError(t, err)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostMultipleContentTypesComponentFilteredRes{
		JSON: shared.SimpleObject{
			Any:        "any",
			Bigint:     big.NewInt(8821239038968084),
			BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
			Bool:       true,
			BoolOpt:    openapi.Bool(true),
			Date:       types.MustDateFromString("2020-01-01"),
			DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
			Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
			DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
			Enum:       shared.EnumOne,
			Float32:    1.1,
			Float64Str: openapi.Float64(1.1),
			Int:        1,
			Int32:      1,
			Int32Enum:  shared.Int32EnumFiftyFive,
			Int64Str:   openapi.Int64(100),
			IntEnum:    shared.IntEnumSecond,
			Num:        1.1,
			Str:        "test",
			StrOpt:     openapi.String("testOptional"),
		},
	}, *res.Res)
}

func TestRequestBodies_RequestBodyPostMultipleContentTypesComponentFilteredDefaultTest(t *testing.T) {
	s := openapi.New()
	request := shared.SimpleObject{
		Any:        "any",
		Bigint:     big.NewInt(8821239038968084),
		BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
		Bool:       true,
		BoolOpt:    openapi.Bool(true),
		Date:       types.MustDateFromString("2020-01-01"),
		DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
		Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
		DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
		Enum:       shared.EnumOne,
		Float32:    1.1,
		Float64Str: openapi.Float64(1.1),
		Int:        1,
		Int32:      1,
		Int32Enum:  shared.Int32EnumFiftyFive,
		Int64Str:   openapi.Int64(100),
		IntEnum:    shared.IntEnumSecond,
		Num:        1.1,
		Str:        "test",
		StrOpt:     openapi.String("testOptional"),
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostMultipleContentTypesComponentFilteredDefaultTest(ctx, request)
	require.NoError(t, err)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostMultipleContentTypesComponentFilteredDefaultTestRes{
		JSON: shared.SimpleObject{
			Any:        "any",
			Bigint:     big.NewInt(8821239038968084),
			BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
			Bool:       true,
			BoolOpt:    openapi.Bool(true),
			Date:       types.MustDateFromString("2020-01-01"),
			DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
			Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
			DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
			Enum:       shared.EnumOne,
			Float32:    1.1,
			Float64Str: openapi.Float64(1.1),
			Int:        1,
			Int32:      1,
			Int32Enum:  shared.Int32EnumFiftyFive,
			Int64Str:   openapi.Int64(100),
			IntEnum:    shared.IntEnumSecond,
			Num:        1.1,
			Str:        "test",
			StrOpt:     openapi.String("testOptional"),
		},
	}, *res.Res)
}

func TestRequestBodies_RequestBodyPostNotNullableNotRequiredStringBody(t *testing.T) {
	recordTest("request-bodies-post-not-nullable-not-required-string-body")

	s := openapi.New()

	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostNotNullableNotRequiredStringBody(ctx, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostNotNullableNotRequiredStringBodyResponseBody{
		Data: "",
	}, *res.Object)
}
