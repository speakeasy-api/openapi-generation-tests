// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package tests

import (
	"context"
	"github.com/ericlagergren/decimal"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"math/big"
	openapi "openapi/v2"
	"openapi/v2/pkg/models/operations"
	"openapi/v2/pkg/models/shared"
	"openapi/v2/pkg/types"
	"testing"
	"time"
)

func TestRequestBodies_NullableObjectPost(t *testing.T) {
	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	var request *shared.NullableObject = nil
	ctx := context.Background()
	res, err := s.RequestBodies.NullableObjectPost(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.NullableObjectPostRes{
		JSON: nil,
	}, *res.Res)
}

func TestRequestBodies_NullableRequiredEmptyObjectPost_NullableSet(t *testing.T) {
	recordTest("request-bodies-post-nullable-required-empty-object-nullable-set")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := operations.NullableRequiredEmptyObjectPostRequestBody{
		NullableOptionalObj: nil,
		NullableRequiredObj: nil,
		RequiredObj:         operations.RequiredObj{},
	}
	ctx := context.Background()
	res, err := s.RequestBodies.NullableRequiredEmptyObjectPost(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.NullableRequiredEmptyObjectPostJSON{
		NullableOptionalObj: nil,
		NullableRequiredObj: nil,
		RequiredObj:         operations.NullableRequiredEmptyObjectPostRequiredObj{},
	}, *res.Object.JSON)
}

func TestRequestBodies_NullableRequiredEmptyObjectPost_OptionalSet(t *testing.T) {
	recordTest("request-bodies-post-nullable-required-empty-object-optional-set")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := operations.NullableRequiredEmptyObjectPostRequestBody{
		NullableOptionalObj: &operations.NullableOptionalObj{},
		NullableRequiredObj: nil,
		RequiredObj:         operations.RequiredObj{},
	}
	ctx := context.Background()
	res, err := s.RequestBodies.NullableRequiredEmptyObjectPost(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.NullableRequiredEmptyObjectPostJSON{
		NullableOptionalObj: &operations.NullableRequiredEmptyObjectPostNullableOptionalObj{},
		NullableRequiredObj: nil,
		RequiredObj:         operations.NullableRequiredEmptyObjectPostRequiredObj{},
	}, *res.Object.JSON)
}

func TestRequestBodies_NullableRequiredEmptyObjectPost_AllSet(t *testing.T) {
	recordTest("request-bodies-post-nullable-required-empty-object-all-set")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := operations.NullableRequiredEmptyObjectPostRequestBody{
		NullableOptionalObj: &operations.NullableOptionalObj{},
		NullableRequiredObj: &operations.NullableRequiredObj{},
		RequiredObj:         operations.RequiredObj{},
	}
	ctx := context.Background()
	res, err := s.RequestBodies.NullableRequiredEmptyObjectPost(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.NullableRequiredEmptyObjectPostJSON{
		NullableOptionalObj: &operations.NullableRequiredEmptyObjectPostNullableOptionalObj{},
		NullableRequiredObj: &operations.NullableRequiredEmptyObjectPostNullableRequiredObj{},
		RequiredObj:         operations.NullableRequiredEmptyObjectPostRequiredObj{},
	}, *res.Object.JSON)
}

func TestRequestBodies_NullableRequiredPropertyPost_AllSet(t *testing.T) {
	recordTest("request-bodies-post-nullable-required-property-all-set")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := operations.NullableRequiredPropertyPostRequestBody{
		NullableOptionalInt: openapi.Int64(0),
		NullableRequiredArray: []float64{
			1.1,
			2.2,
			3.3,
		},
		NullableRequiredBigIntStr:  types.MustNewBigIntFromString("9223372036854775807"),
		NullableRequiredDateTime:   types.MustNewTimeFromString("2020-01-01T00:00:00Z"),
		NullableRequiredDecimalStr: types.MustNewDecimalFromString("3.141592653589793238462643383279"),
		NullableRequiredEnum:       operations.NullableRequiredEnumSecond.ToPointer(),
		NullableRequiredInt:        openapi.Int64(1),
	}
	ctx := context.Background()
	res, err := s.RequestBodies.NullableRequiredPropertyPost(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.NullableRequiredPropertyPostJSON{
		NullableOptionalInt: openapi.Int64(0),
		NullableRequiredArray: []float64{
			1.1,
			2.2,
			3.3,
		},
		NullableRequiredBigIntStr:  types.MustNewBigIntFromString("9223372036854775807"),
		NullableRequiredDateTime:   types.MustNewTimeFromString("2020-01-01T00:00:00Z"),
		NullableRequiredDecimalStr: types.MustNewDecimalFromString("3.141592653589793238462643383279"),
		NullableRequiredEnum:       operations.NullableRequiredPropertyPostNullableRequiredEnumSecond.ToPointer(),
		NullableRequiredInt:        openapi.Int64(1),
	}, *res.Object.JSON)
}

func TestRequestBodies_NullableRequiredPropertyPost_AllNull(t *testing.T) {
	recordTest("request-bodies-post-nullable-required-property-all-null")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := operations.NullableRequiredPropertyPostRequestBody{
		NullableOptionalInt:        nil,
		NullableRequiredArray:      nil,
		NullableRequiredBigIntStr:  nil,
		NullableRequiredDateTime:   nil,
		NullableRequiredDecimalStr: nil,
		NullableRequiredEnum:       nil,
		NullableRequiredInt:        nil,
	}
	ctx := context.Background()
	res, err := s.RequestBodies.NullableRequiredPropertyPost(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.NullableRequiredPropertyPostJSON{
		NullableOptionalInt:        nil,
		NullableRequiredArray:      nil,
		NullableRequiredBigIntStr:  nil,
		NullableRequiredDateTime:   nil,
		NullableRequiredDecimalStr: nil,
		NullableRequiredEnum:       nil,
		NullableRequiredInt:        nil,
	}, *res.Object.JSON)
}

func TestRequestBodies_NullableRequiredSharedObjectPost_RequiredNull(t *testing.T) {
	recordTest("request-bodies-post-nullable-required-shared-object-required-null")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := operations.NullableRequiredSharedObjectPostRequestBody{
		NullableRequiredObj: nil,
	}
	ctx := context.Background()
	res, err := s.RequestBodies.NullableRequiredSharedObjectPost(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.NullableRequiredSharedObjectPostJSON{
		NullableRequiredObj: nil,
	}, *res.Object.JSON)
}

func TestRequestBodies_NullableRequiredSharedObjectPost_AllNull(t *testing.T) {
	recordTest("request-bodies-post-nullable-required-shared-object-all-null")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := operations.NullableRequiredSharedObjectPostRequestBody{
		NullableOptionalObj: nil,
		NullableRequiredObj: nil,
	}
	ctx := context.Background()
	res, err := s.RequestBodies.NullableRequiredSharedObjectPost(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.NullableRequiredSharedObjectPostJSON{
		NullableOptionalObj: nil,
		NullableRequiredObj: nil,
	}, *res.Object.JSON)
}

func TestRequestBodies_NullableRequiredSharedObjectPost_OptionalNonNull(t *testing.T) {
	recordTest("request-bodies-post-nullable-required-shared-object-optional-non-null")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := operations.NullableRequiredSharedObjectPostRequestBody{
		NullableOptionalObj: &shared.NullableOptionalObject{
			Required: 1,
		},
		NullableRequiredObj: nil,
	}
	ctx := context.Background()
	res, err := s.RequestBodies.NullableRequiredSharedObjectPost(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.NullableRequiredSharedObjectPostJSON{
		NullableOptionalObj: &shared.NullableOptionalObject{
			Required: 1,
		},
		NullableRequiredObj: nil,
	}, *res.Object.JSON)
}

func TestRequestBodies_NullableRequiredSharedObjectPost_AllSet(t *testing.T) {
	recordTest("request-bodies-post-nullable-required-shared-object-all-set")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := operations.NullableRequiredSharedObjectPostRequestBody{
		NullableOptionalObj: &shared.NullableOptionalObject{
			Optional: openapi.String("test"),
			Required: 1,
		},
		NullableRequiredObj: &shared.NullableObject{
			Required: 1,
		},
	}
	ctx := context.Background()
	res, err := s.RequestBodies.NullableRequiredSharedObjectPost(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.NullableRequiredSharedObjectPostJSON{
		NullableOptionalObj: &shared.NullableOptionalObject{
			Optional: openapi.String("test"),
			Required: 1,
		},
		NullableRequiredObj: &shared.NullableObject{
			Required: 1,
		},
	}, *res.Object.JSON)
}

func TestRequestBodies_RequestBodyPostApplicationJSONArray(t *testing.T) {
	recordTest("request-bodies-post-application-json-array")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := []shared.SimpleObject{
		shared.SimpleObject{
			Any:        "any",
			Bigint:     big.NewInt(8821239038968084),
			BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
			Bool:       true,
			BoolOpt:    openapi.Bool(true),
			Date:       types.MustDateFromString("2020-01-01"),
			DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
			Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
			DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
			Enum:       shared.EnumOne,
			Float32:    1.1,
			Float64Str: openapi.Float64(1.1),
			Int:        1,
			Int32:      1,
			Int32Enum:  shared.Int32EnumFiftyFive,
			Int64Str:   openapi.Int64(100),
			IntEnum:    shared.IntEnumSecond,
			Num:        1.1,
			Str:        "test",
			StrOpt:     openapi.String("testOptional"),
		},
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostApplicationJSONArray(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, []shared.SimpleObject{
		shared.SimpleObject{
			Any:        "any",
			Bigint:     big.NewInt(8821239038968084),
			BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
			Bool:       true,
			BoolOpt:    openapi.Bool(true),
			Date:       types.MustDateFromString("2020-01-01"),
			DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
			Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
			DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
			Enum:       shared.EnumOne,
			Float32:    1.1,
			Float64Str: openapi.Float64(1.1),
			Int:        1,
			Int32:      1,
			Int32Enum:  shared.Int32EnumFiftyFive,
			Int64Str:   openapi.Int64(100),
			IntEnum:    shared.IntEnumSecond,
			Num:        1.1,
			Str:        "test",
			StrOpt:     openapi.String("testOptional"),
		},
	}, res.Res)
}

func TestRequestBodies_RequestBodyPostApplicationJSONArrayCamelCase(t *testing.T) {
	recordTest("request-bodies-post-application-json-array-camel-case")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := []shared.SimpleObjectCamelCase{
		shared.SimpleObjectCamelCase{
			AnyVal:        "any example",
			BoolOptVal:    openapi.Bool(true),
			BoolVal:       true,
			DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
			DateVal:       types.MustDateFromString("2020-01-01"),
			EnumVal:       shared.EnumOne,
			Float32Val:    2.2222222,
			Int32EnumVal:  shared.Int32EnumValSixtyNine,
			Int32Val:      1,
			IntEnumVal:    shared.IntEnumValThird,
			IntOptNullVal: openapi.Int64(999999),
			IntVal:        999999,
			NumOptNullVal: openapi.Float64(1.1),
			NumVal:        1.1,
			StrOptVal:     openapi.String("optional example"),
			StrVal:        "example",
		},
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostApplicationJSONArrayCamelCase(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, []shared.SimpleObjectCamelCase{
		shared.SimpleObjectCamelCase{
			AnyVal:        "any example",
			BoolOptVal:    openapi.Bool(true),
			BoolVal:       true,
			DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
			DateVal:       types.MustDateFromString("2020-01-01"),
			EnumVal:       shared.EnumOne,
			Float32Val:    2.2222222,
			Int32EnumVal:  shared.Int32EnumValSixtyNine,
			Int32Val:      1,
			IntEnumVal:    shared.IntEnumValThird,
			IntOptNullVal: openapi.Int64(999999),
			IntVal:        999999,
			NumOptNullVal: openapi.Float64(1.1),
			NumVal:        1.1,
			StrOptVal:     openapi.String("optional example"),
			StrVal:        "example",
		},
	}, res.Res)
}

func TestRequestBodies_RequestBodyPostApplicationJSONArrayObj(t *testing.T) {
	recordTest("request-bodies-post-application-json-array-object")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := []shared.SimpleObject{
		shared.SimpleObject{
			Any:        "any",
			Bigint:     big.NewInt(8821239038968084),
			BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
			Bool:       true,
			BoolOpt:    openapi.Bool(true),
			Date:       types.MustDateFromString("2020-01-01"),
			DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
			Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
			DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
			Enum:       shared.EnumOne,
			Float32:    1.1,
			Float64Str: openapi.Float64(1.1),
			Int:        1,
			Int32:      1,
			Int32Enum:  shared.Int32EnumFiftyFive,
			Int64Str:   openapi.Int64(100),
			IntEnum:    shared.IntEnumSecond,
			Num:        1.1,
			Str:        "test",
			StrOpt:     openapi.String("testOptional"),
		},
		shared.SimpleObject{
			Any:        "any",
			Bigint:     big.NewInt(8821239038968084),
			BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
			Bool:       true,
			BoolOpt:    openapi.Bool(true),
			Date:       types.MustDateFromString("2020-01-01"),
			DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
			Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
			DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
			Enum:       shared.EnumOne,
			Float32:    1.1,
			Float64Str: openapi.Float64(1.1),
			Int:        1,
			Int32:      1,
			Int32Enum:  shared.Int32EnumFiftyFive,
			Int64Str:   openapi.Int64(100),
			IntEnum:    shared.IntEnumSecond,
			Num:        1.1,
			Str:        "test",
			StrOpt:     openapi.String("testOptional"),
		},
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostApplicationJSONArrayObj(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, shared.ArrObjValue{
		JSON: []shared.SimpleObject{
			shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
			shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
		},
	}, *res.ArrObjValue)
}

func TestRequestBodies_RequestBodyPostApplicationJSONArrayObjCamelCase(t *testing.T) {
	recordTest("request-bodies-post-application-json-array-object-camel-case")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := []shared.SimpleObjectCamelCase{
		shared.SimpleObjectCamelCase{
			AnyVal:        "any example",
			BoolOptVal:    openapi.Bool(true),
			BoolVal:       true,
			DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
			DateVal:       types.MustDateFromString("2020-01-01"),
			EnumVal:       shared.EnumOne,
			Float32Val:    2.2222222,
			Int32EnumVal:  shared.Int32EnumValSixtyNine,
			Int32Val:      1,
			IntEnumVal:    shared.IntEnumValThird,
			IntOptNullVal: openapi.Int64(999999),
			IntVal:        999999,
			NumOptNullVal: openapi.Float64(1.1),
			NumVal:        1.1,
			StrOptVal:     openapi.String("optional example"),
			StrVal:        "example",
		},
		shared.SimpleObjectCamelCase{
			AnyVal:        "any example",
			BoolOptVal:    openapi.Bool(true),
			BoolVal:       true,
			DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
			DateVal:       types.MustDateFromString("2020-01-01"),
			EnumVal:       shared.EnumOne,
			Float32Val:    2.2222222,
			Int32EnumVal:  shared.Int32EnumValSixtyNine,
			Int32Val:      1,
			IntEnumVal:    shared.IntEnumValThird,
			IntOptNullVal: openapi.Int64(999999),
			IntVal:        999999,
			NumOptNullVal: openapi.Float64(1.1),
			NumVal:        1.1,
			StrOptVal:     openapi.String("optional example"),
			StrVal:        "example",
		},
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostApplicationJSONArrayObjCamelCase(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, shared.ArrObjValueCamelCase{
		JSON: []shared.SimpleObjectCamelCase{
			shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
			shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
		},
	}, *res.ArrObjValueCamelCase)
}

func TestRequestBodies_RequestBodyPostApplicationJSONArrayOfArray(t *testing.T) {
	recordTest("request-bodies-post-application-json-array-of-array")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := [][]shared.SimpleObject{
		[]shared.SimpleObject{
			shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
		},
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostApplicationJSONArrayOfArray(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, [][]shared.SimpleObject{
		[]shared.SimpleObject{
			shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
		},
	}, res.Res)
}

func TestRequestBodies_RequestBodyPostApplicationJSONArrayOfArrayCamelCase(t *testing.T) {
	recordTest("request-bodies-post-application-json-array-of-array-camel-case")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := [][]shared.SimpleObjectCamelCase{
		[]shared.SimpleObjectCamelCase{
			shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
		},
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostApplicationJSONArrayOfArrayCamelCase(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, [][]shared.SimpleObjectCamelCase{
		[]shared.SimpleObjectCamelCase{
			shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
		},
	}, res.Res)
}

func TestRequestBodies_RequestBodyPostApplicationJSONArrayOfArrayOfPrimitive(t *testing.T) {
	recordTest("request-bodies-post-application-json-array-of-array-of-primitive")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := [][]string{
		[]string{
			"foo",
			"bar",
		},
		[]string{
			"buzz",
			"bazz",
		},
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostApplicationJSONArrayOfArrayOfPrimitive(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, [][]string{
		[]string{
			"foo",
			"bar",
		},
		[]string{
			"buzz",
			"bazz",
		},
	}, res.Res)
}

func TestRequestBodies_RequestBodyPostApplicationJSONArrayOfMap(t *testing.T) {
	recordTest("request-bodies-post-application-json-array-of-map")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := []map[string]shared.SimpleObject{
		map[string]shared.SimpleObject{
			"mapElem1": shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
			"mapElem2": shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
		},
		map[string]shared.SimpleObject{
			"mapElem1": shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
			"mapElem2": shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
		},
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostApplicationJSONArrayOfMap(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, []map[string]shared.SimpleObject{
		map[string]shared.SimpleObject{
			"mapElem1": shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
			"mapElem2": shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
		},
		map[string]shared.SimpleObject{
			"mapElem1": shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
			"mapElem2": shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
		},
	}, res.Res)
}

func TestRequestBodies_RequestBodyPostApplicationJSONArrayOfMapCamelCase(t *testing.T) {
	recordTest("request-bodies-post-application-json-array-of-map-camel-case")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := []map[string]shared.SimpleObjectCamelCase{
		map[string]shared.SimpleObjectCamelCase{
			"mapElem1": shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
			"mapElem2": shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
		},
		map[string]shared.SimpleObjectCamelCase{
			"mapElem1": shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
			"mapElem2": shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
		},
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostApplicationJSONArrayOfMapCamelCase(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, []map[string]shared.SimpleObjectCamelCase{
		map[string]shared.SimpleObjectCamelCase{
			"mapElem1": shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
			"mapElem2": shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
		},
		map[string]shared.SimpleObjectCamelCase{
			"mapElem1": shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
			"mapElem2": shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
		},
	}, res.Res)
}

func TestRequestBodies_RequestBodyPostApplicationJSONArrayOfPrimitive(t *testing.T) {
	recordTest("request-bodies-post-application-json-array-of-primitive")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := []string{
		"hello",
		"world",
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostApplicationJSONArrayOfPrimitive(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, []string{
		"hello",
		"world",
	}, res.Res)
}

func TestRequestBodies_RequestBodyPostApplicationJSONDeep(t *testing.T) {
	recordTest("request-bodies-post-application-json-deep")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := shared.DeepObject{
		Any: shared.CreateAnySimpleObject(
			shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
		),
		Arr: []shared.SimpleObject{
			shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
			shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
		},
		Bool: true,
		Int:  1,
		Map: map[string]shared.SimpleObject{
			"key": shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
			"key2": shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
		},
		Num: 1.1,
		Obj: shared.SimpleObject{
			Any:        "any",
			Bigint:     big.NewInt(8821239038968084),
			BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
			Bool:       true,
			BoolOpt:    openapi.Bool(true),
			Date:       types.MustDateFromString("2020-01-01"),
			DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
			Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
			DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
			Enum:       shared.EnumOne,
			Float32:    1.1,
			Float64Str: openapi.Float64(1.1),
			Int:        1,
			Int32:      1,
			Int32Enum:  shared.Int32EnumFiftyFive,
			Int64Str:   openapi.Int64(100),
			IntEnum:    shared.IntEnumSecond,
			Num:        1.1,
			Str:        "test",
			StrOpt:     openapi.String("testOptional"),
		},
		Str: "test",
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostApplicationJSONDeep(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostApplicationJSONDeepRes{
		JSON: &shared.DeepObject{
			Any: shared.CreateAnySimpleObject(
				shared.SimpleObject{
					Any:        "any",
					Bigint:     big.NewInt(8821239038968084),
					BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
					Bool:       true,
					BoolOpt:    openapi.Bool(true),
					Date:       types.MustDateFromString("2020-01-01"),
					DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
					Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
					DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
					Enum:       shared.EnumOne,
					Float32:    1.1,
					Float64Str: openapi.Float64(1.1),
					Int:        1,
					Int32:      1,
					Int32Enum:  shared.Int32EnumFiftyFive,
					Int64Str:   openapi.Int64(100),
					IntEnum:    shared.IntEnumSecond,
					Num:        1.1,
					Str:        "test",
					StrOpt:     openapi.String("testOptional"),
				},
			),
			Arr: []shared.SimpleObject{
				shared.SimpleObject{
					Any:        "any",
					Bigint:     big.NewInt(8821239038968084),
					BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
					Bool:       true,
					BoolOpt:    openapi.Bool(true),
					Date:       types.MustDateFromString("2020-01-01"),
					DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
					Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
					DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
					Enum:       shared.EnumOne,
					Float32:    1.1,
					Float64Str: openapi.Float64(1.1),
					Int:        1,
					Int32:      1,
					Int32Enum:  shared.Int32EnumFiftyFive,
					Int64Str:   openapi.Int64(100),
					IntEnum:    shared.IntEnumSecond,
					Num:        1.1,
					Str:        "test",
					StrOpt:     openapi.String("testOptional"),
				},
				shared.SimpleObject{
					Any:        "any",
					Bigint:     big.NewInt(8821239038968084),
					BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
					Bool:       true,
					BoolOpt:    openapi.Bool(true),
					Date:       types.MustDateFromString("2020-01-01"),
					DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
					Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
					DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
					Enum:       shared.EnumOne,
					Float32:    1.1,
					Float64Str: openapi.Float64(1.1),
					Int:        1,
					Int32:      1,
					Int32Enum:  shared.Int32EnumFiftyFive,
					Int64Str:   openapi.Int64(100),
					IntEnum:    shared.IntEnumSecond,
					Num:        1.1,
					Str:        "test",
					StrOpt:     openapi.String("testOptional"),
				},
			},
			Bool: true,
			Int:  1,
			Map: map[string]shared.SimpleObject{
				"key": shared.SimpleObject{
					Any:        "any",
					Bigint:     big.NewInt(8821239038968084),
					BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
					Bool:       true,
					BoolOpt:    openapi.Bool(true),
					Date:       types.MustDateFromString("2020-01-01"),
					DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
					Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
					DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
					Enum:       shared.EnumOne,
					Float32:    1.1,
					Float64Str: openapi.Float64(1.1),
					Int:        1,
					Int32:      1,
					Int32Enum:  shared.Int32EnumFiftyFive,
					Int64Str:   openapi.Int64(100),
					IntEnum:    shared.IntEnumSecond,
					Num:        1.1,
					Str:        "test",
					StrOpt:     openapi.String("testOptional"),
				},
				"key2": shared.SimpleObject{
					Any:        "any",
					Bigint:     big.NewInt(8821239038968084),
					BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
					Bool:       true,
					BoolOpt:    openapi.Bool(true),
					Date:       types.MustDateFromString("2020-01-01"),
					DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
					Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
					DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
					Enum:       shared.EnumOne,
					Float32:    1.1,
					Float64Str: openapi.Float64(1.1),
					Int:        1,
					Int32:      1,
					Int32Enum:  shared.Int32EnumFiftyFive,
					Int64Str:   openapi.Int64(100),
					IntEnum:    shared.IntEnumSecond,
					Num:        1.1,
					Str:        "test",
					StrOpt:     openapi.String("testOptional"),
				},
			},
			Num: 1.1,
			Obj: shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
			Str: "test",
		},
	}, *res.Res)
}

func TestRequestBodies_RequestBodyPostApplicationJSONDeepCamelCase(t *testing.T) {
	recordTest("request-bodies-post-application-json-deep-camel-case")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := shared.DeepObjectCamelCase{
		AnyVal: shared.CreateAnyValStr(
			"<value>",
		),
		ArrVal: []shared.SimpleObjectCamelCase{
			shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
			shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
		},
		BoolVal: true,
		IntVal:  1,
		MapVal: map[string]shared.SimpleObjectCamelCase{
			"key": shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
		},
		NumVal: 1.1,
		ObjVal: shared.SimpleObjectCamelCase{
			AnyVal:        "any example",
			BoolOptVal:    openapi.Bool(true),
			BoolVal:       true,
			DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
			DateVal:       types.MustDateFromString("2020-01-01"),
			EnumVal:       shared.EnumOne,
			Float32Val:    2.2222222,
			Int32EnumVal:  shared.Int32EnumValSixtyNine,
			Int32Val:      1,
			IntEnumVal:    shared.IntEnumValThird,
			IntOptNullVal: openapi.Int64(999999),
			IntVal:        999999,
			NumOptNullVal: openapi.Float64(1.1),
			NumVal:        1.1,
			StrOptVal:     openapi.String("optional example"),
			StrVal:        "example",
		},
		StrVal: "test",
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostApplicationJSONDeepCamelCase(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostApplicationJSONDeepCamelCaseRes{
		JSON: &shared.DeepObjectCamelCase{
			AnyVal: shared.CreateAnyValStr(
				"<value>",
			),
			ArrVal: []shared.SimpleObjectCamelCase{
				shared.SimpleObjectCamelCase{
					AnyVal:        "any example",
					BoolOptVal:    openapi.Bool(true),
					BoolVal:       true,
					DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
					DateVal:       types.MustDateFromString("2020-01-01"),
					EnumVal:       shared.EnumOne,
					Float32Val:    2.2222222,
					Int32EnumVal:  shared.Int32EnumValSixtyNine,
					Int32Val:      1,
					IntEnumVal:    shared.IntEnumValThird,
					IntOptNullVal: openapi.Int64(999999),
					IntVal:        999999,
					NumOptNullVal: openapi.Float64(1.1),
					NumVal:        1.1,
					StrOptVal:     openapi.String("optional example"),
					StrVal:        "example",
				},
				shared.SimpleObjectCamelCase{
					AnyVal:        "any example",
					BoolOptVal:    openapi.Bool(true),
					BoolVal:       true,
					DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
					DateVal:       types.MustDateFromString("2020-01-01"),
					EnumVal:       shared.EnumOne,
					Float32Val:    2.2222222,
					Int32EnumVal:  shared.Int32EnumValSixtyNine,
					Int32Val:      1,
					IntEnumVal:    shared.IntEnumValThird,
					IntOptNullVal: openapi.Int64(999999),
					IntVal:        999999,
					NumOptNullVal: openapi.Float64(1.1),
					NumVal:        1.1,
					StrOptVal:     openapi.String("optional example"),
					StrVal:        "example",
				},
			},
			BoolVal: true,
			IntVal:  1,
			MapVal: map[string]shared.SimpleObjectCamelCase{
				"key": shared.SimpleObjectCamelCase{
					AnyVal:        "any example",
					BoolOptVal:    openapi.Bool(true),
					BoolVal:       true,
					DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
					DateVal:       types.MustDateFromString("2020-01-01"),
					EnumVal:       shared.EnumOne,
					Float32Val:    2.2222222,
					Int32EnumVal:  shared.Int32EnumValSixtyNine,
					Int32Val:      1,
					IntEnumVal:    shared.IntEnumValThird,
					IntOptNullVal: openapi.Int64(999999),
					IntVal:        999999,
					NumOptNullVal: openapi.Float64(1.1),
					NumVal:        1.1,
					StrOptVal:     openapi.String("optional example"),
					StrVal:        "example",
				},
			},
			NumVal: 1.1,
			ObjVal: shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
			StrVal: "test",
		},
	}, *res.Res)
}

func TestRequestBodies_RequestBodyPostApplicationJSONMap(t *testing.T) {
	recordTest("request-bodies-post-application-json-map")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := map[string]shared.SimpleObject{
		"mapElem1": shared.SimpleObject{
			Any:        "any",
			Bigint:     big.NewInt(8821239038968084),
			BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
			Bool:       true,
			BoolOpt:    openapi.Bool(true),
			Date:       types.MustDateFromString("2020-01-01"),
			DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
			Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
			DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
			Enum:       shared.EnumOne,
			Float32:    1.1,
			Float64Str: openapi.Float64(1.1),
			Int:        1,
			Int32:      1,
			Int32Enum:  shared.Int32EnumFiftyFive,
			Int64Str:   openapi.Int64(100),
			IntEnum:    shared.IntEnumSecond,
			Num:        1.1,
			Str:        "test",
			StrOpt:     openapi.String("testOptional"),
		},
		"mapElem2": shared.SimpleObject{
			Any:        "any",
			Bigint:     big.NewInt(8821239038968084),
			BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
			Bool:       true,
			BoolOpt:    openapi.Bool(true),
			Date:       types.MustDateFromString("2020-01-01"),
			DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
			Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
			DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
			Enum:       shared.EnumOne,
			Float32:    1.1,
			Float64Str: openapi.Float64(1.1),
			Int:        1,
			Int32:      1,
			Int32Enum:  shared.Int32EnumFiftyFive,
			Int64Str:   openapi.Int64(100),
			IntEnum:    shared.IntEnumSecond,
			Num:        1.1,
			Str:        "test",
			StrOpt:     openapi.String("testOptional"),
		},
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostApplicationJSONMap(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, map[string]shared.SimpleObject{
		"mapElem1": shared.SimpleObject{
			Any:        "any",
			Bigint:     big.NewInt(8821239038968084),
			BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
			Bool:       true,
			BoolOpt:    openapi.Bool(true),
			Date:       types.MustDateFromString("2020-01-01"),
			DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
			Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
			DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
			Enum:       shared.EnumOne,
			Float32:    1.1,
			Float64Str: openapi.Float64(1.1),
			Int:        1,
			Int32:      1,
			Int32Enum:  shared.Int32EnumFiftyFive,
			Int64Str:   openapi.Int64(100),
			IntEnum:    shared.IntEnumSecond,
			Num:        1.1,
			Str:        "test",
			StrOpt:     openapi.String("testOptional"),
		},
		"mapElem2": shared.SimpleObject{
			Any:        "any",
			Bigint:     big.NewInt(8821239038968084),
			BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
			Bool:       true,
			BoolOpt:    openapi.Bool(true),
			Date:       types.MustDateFromString("2020-01-01"),
			DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
			Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
			DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
			Enum:       shared.EnumOne,
			Float32:    1.1,
			Float64Str: openapi.Float64(1.1),
			Int:        1,
			Int32:      1,
			Int32Enum:  shared.Int32EnumFiftyFive,
			Int64Str:   openapi.Int64(100),
			IntEnum:    shared.IntEnumSecond,
			Num:        1.1,
			Str:        "test",
			StrOpt:     openapi.String("testOptional"),
		},
	}, res.Res)
}

func TestRequestBodies_RequestBodyPostApplicationJSONMapCamelCase(t *testing.T) {
	recordTest("request-bodies-post-application-json-map-camel-case")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := map[string]shared.SimpleObjectCamelCase{
		"mapElem1": shared.SimpleObjectCamelCase{
			AnyVal:        "any example",
			BoolOptVal:    openapi.Bool(true),
			BoolVal:       true,
			DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
			DateVal:       types.MustDateFromString("2020-01-01"),
			EnumVal:       shared.EnumOne,
			Float32Val:    2.2222222,
			Int32EnumVal:  shared.Int32EnumValSixtyNine,
			Int32Val:      1,
			IntEnumVal:    shared.IntEnumValThird,
			IntOptNullVal: openapi.Int64(999999),
			IntVal:        999999,
			NumOptNullVal: openapi.Float64(1.1),
			NumVal:        1.1,
			StrOptVal:     openapi.String("optional example"),
			StrVal:        "example",
		},
		"mapElem2": shared.SimpleObjectCamelCase{
			AnyVal:        "any example",
			BoolOptVal:    openapi.Bool(true),
			BoolVal:       true,
			DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
			DateVal:       types.MustDateFromString("2020-01-01"),
			EnumVal:       shared.EnumOne,
			Float32Val:    2.2222222,
			Int32EnumVal:  shared.Int32EnumValSixtyNine,
			Int32Val:      1,
			IntEnumVal:    shared.IntEnumValThird,
			IntOptNullVal: openapi.Int64(999999),
			IntVal:        999999,
			NumOptNullVal: openapi.Float64(1.1),
			NumVal:        1.1,
			StrOptVal:     openapi.String("optional example"),
			StrVal:        "example",
		},
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostApplicationJSONMapCamelCase(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, map[string]shared.SimpleObjectCamelCase{
		"mapElem1": shared.SimpleObjectCamelCase{
			AnyVal:        "any example",
			BoolOptVal:    openapi.Bool(true),
			BoolVal:       true,
			DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
			DateVal:       types.MustDateFromString("2020-01-01"),
			EnumVal:       shared.EnumOne,
			Float32Val:    2.2222222,
			Int32EnumVal:  shared.Int32EnumValSixtyNine,
			Int32Val:      1,
			IntEnumVal:    shared.IntEnumValThird,
			IntOptNullVal: openapi.Int64(999999),
			IntVal:        999999,
			NumOptNullVal: openapi.Float64(1.1),
			NumVal:        1.1,
			StrOptVal:     openapi.String("optional example"),
			StrVal:        "example",
		},
		"mapElem2": shared.SimpleObjectCamelCase{
			AnyVal:        "any example",
			BoolOptVal:    openapi.Bool(true),
			BoolVal:       true,
			DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
			DateVal:       types.MustDateFromString("2020-01-01"),
			EnumVal:       shared.EnumOne,
			Float32Val:    2.2222222,
			Int32EnumVal:  shared.Int32EnumValSixtyNine,
			Int32Val:      1,
			IntEnumVal:    shared.IntEnumValThird,
			IntOptNullVal: openapi.Int64(999999),
			IntVal:        999999,
			NumOptNullVal: openapi.Float64(1.1),
			NumVal:        1.1,
			StrOptVal:     openapi.String("optional example"),
			StrVal:        "example",
		},
	}, res.Res)
}

func TestRequestBodies_RequestBodyPostApplicationJSONMapObj(t *testing.T) {
	recordTest("request-bodies-post-application-json-map-object")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := map[string]shared.SimpleObject{
		"mapElem1": shared.SimpleObject{
			Any:        "any",
			Bigint:     big.NewInt(8821239038968084),
			BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
			Bool:       true,
			BoolOpt:    openapi.Bool(true),
			Date:       types.MustDateFromString("2020-01-01"),
			DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
			Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
			DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
			Enum:       shared.EnumOne,
			Float32:    1.1,
			Float64Str: openapi.Float64(1.1),
			Int:        1,
			Int32:      1,
			Int32Enum:  shared.Int32EnumFiftyFive,
			Int64Str:   openapi.Int64(100),
			IntEnum:    shared.IntEnumSecond,
			Num:        1.1,
			Str:        "test",
			StrOpt:     openapi.String("testOptional"),
		},
		"mapElem2": shared.SimpleObject{
			Any:        "any",
			Bigint:     big.NewInt(8821239038968084),
			BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
			Bool:       true,
			BoolOpt:    openapi.Bool(true),
			Date:       types.MustDateFromString("2020-01-01"),
			DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
			Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
			DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
			Enum:       shared.EnumOne,
			Float32:    1.1,
			Float64Str: openapi.Float64(1.1),
			Int:        1,
			Int32:      1,
			Int32Enum:  shared.Int32EnumFiftyFive,
			Int64Str:   openapi.Int64(100),
			IntEnum:    shared.IntEnumSecond,
			Num:        1.1,
			Str:        "test",
			StrOpt:     openapi.String("testOptional"),
		},
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostApplicationJSONMapObj(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, shared.MapObjValue{
		JSON: map[string]shared.SimpleObject{
			"mapElem1": shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
			"mapElem2": shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
		},
	}, *res.MapObjValue)
}

func TestRequestBodies_RequestBodyPostApplicationJSONMapObjCamelCase(t *testing.T) {
	recordTest("request-bodies-post-application-json-map-object-camel-case")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := map[string]shared.SimpleObjectCamelCase{
		"mapElem1": shared.SimpleObjectCamelCase{
			AnyVal:        "any example",
			BoolOptVal:    openapi.Bool(true),
			BoolVal:       true,
			DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
			DateVal:       types.MustDateFromString("2020-01-01"),
			EnumVal:       shared.EnumOne,
			Float32Val:    2.2222222,
			Int32EnumVal:  shared.Int32EnumValSixtyNine,
			Int32Val:      1,
			IntEnumVal:    shared.IntEnumValThird,
			IntOptNullVal: openapi.Int64(999999),
			IntVal:        999999,
			NumOptNullVal: openapi.Float64(1.1),
			NumVal:        1.1,
			StrOptVal:     openapi.String("optional example"),
			StrVal:        "example",
		},
		"mapElem2": shared.SimpleObjectCamelCase{
			AnyVal:        "any example",
			BoolOptVal:    openapi.Bool(true),
			BoolVal:       true,
			DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
			DateVal:       types.MustDateFromString("2020-01-01"),
			EnumVal:       shared.EnumOne,
			Float32Val:    2.2222222,
			Int32EnumVal:  shared.Int32EnumValSixtyNine,
			Int32Val:      1,
			IntEnumVal:    shared.IntEnumValThird,
			IntOptNullVal: openapi.Int64(999999),
			IntVal:        999999,
			NumOptNullVal: openapi.Float64(1.1),
			NumVal:        1.1,
			StrOptVal:     openapi.String("optional example"),
			StrVal:        "example",
		},
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostApplicationJSONMapObjCamelCase(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, shared.MapObjValueCamelCase{
		JSON: map[string]shared.SimpleObjectCamelCase{
			"mapElem1": shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
			"mapElem2": shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
		},
	}, *res.MapObjValueCamelCase)
}

func TestRequestBodies_RequestBodyPostApplicationJSONMapOfArray(t *testing.T) {
	recordTest("request-bodies-post-application-json-map-of-array")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := map[string][]shared.SimpleObject{
		"mapElem1": []shared.SimpleObject{
			shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
			shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
		},
		"mapElem2": []shared.SimpleObject{
			shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
			shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
		},
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostApplicationJSONMapOfArray(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, map[string][]shared.SimpleObject{
		"mapElem1": []shared.SimpleObject{
			shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
			shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
		},
		"mapElem2": []shared.SimpleObject{
			shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
			shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
		},
	}, res.Res)
}

func TestRequestBodies_RequestBodyPostApplicationJSONMapOfArrayCamelCase(t *testing.T) {
	recordTest("request-bodies-post-application-json-map-of-array-camel-case")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := map[string][]shared.SimpleObjectCamelCase{
		"mapElem1": []shared.SimpleObjectCamelCase{
			shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
			shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
		},
		"mapElem2": []shared.SimpleObjectCamelCase{
			shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
			shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
		},
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostApplicationJSONMapOfArrayCamelCase(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, map[string][]shared.SimpleObjectCamelCase{
		"mapElem1": []shared.SimpleObjectCamelCase{
			shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
			shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
		},
		"mapElem2": []shared.SimpleObjectCamelCase{
			shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
			shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
		},
	}, res.Res)
}

func TestRequestBodies_RequestBodyPostApplicationJSONMapOfMap(t *testing.T) {
	recordTest("request-bodies-post-application-json-map-of-map")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := map[string]map[string]shared.SimpleObject{
		"mapElem1": map[string]shared.SimpleObject{
			"subMapElem1": shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
			"subMapElem2": shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
		},
		"mapElem2": map[string]shared.SimpleObject{
			"subMapElem1": shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
			"subMapElem2": shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
		},
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostApplicationJSONMapOfMap(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, map[string]map[string]shared.SimpleObject{
		"mapElem1": map[string]shared.SimpleObject{
			"subMapElem1": shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
			"subMapElem2": shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
		},
		"mapElem2": map[string]shared.SimpleObject{
			"subMapElem1": shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
			"subMapElem2": shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
		},
	}, res.Res)
}

func TestRequestBodies_RequestBodyPostApplicationJSONMapOfMapCamelCase(t *testing.T) {
	recordTest("request-bodies-post-application-json-map-of-map-camel-case")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := map[string]map[string]shared.SimpleObjectCamelCase{
		"mapElem1": map[string]shared.SimpleObjectCamelCase{
			"subMapElem1": shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
			"subMapElem2": shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
		},
		"mapElem2": map[string]shared.SimpleObjectCamelCase{
			"subMapElem1": shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
			"subMapElem2": shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
		},
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostApplicationJSONMapOfMapCamelCase(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, map[string]map[string]shared.SimpleObjectCamelCase{
		"mapElem1": map[string]shared.SimpleObjectCamelCase{
			"subMapElem1": shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
			"subMapElem2": shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
		},
		"mapElem2": map[string]shared.SimpleObjectCamelCase{
			"subMapElem1": shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
			"subMapElem2": shared.SimpleObjectCamelCase{
				AnyVal:        "any example",
				BoolOptVal:    openapi.Bool(true),
				BoolVal:       true,
				DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
				DateVal:       types.MustDateFromString("2020-01-01"),
				EnumVal:       shared.EnumOne,
				Float32Val:    2.2222222,
				Int32EnumVal:  shared.Int32EnumValSixtyNine,
				Int32Val:      1,
				IntEnumVal:    shared.IntEnumValThird,
				IntOptNullVal: openapi.Int64(999999),
				IntVal:        999999,
				NumOptNullVal: openapi.Float64(1.1),
				NumVal:        1.1,
				StrOptVal:     openapi.String("optional example"),
				StrVal:        "example",
			},
		},
	}, res.Res)
}

func TestRequestBodies_RequestBodyPostApplicationJSONMapOfMapOfPrimitive(t *testing.T) {
	recordTest("request-bodies-post-application-json-map-of-map-of-primitive")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := map[string]map[string]string{
		"mapElem1": map[string]string{
			"subMapElem1": "foo",
			"subMapElem2": "bar",
		},
		"mapElem2": map[string]string{
			"subMapElem1": "buzz",
			"subMapElem2": "bazz",
		},
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostApplicationJSONMapOfMapOfPrimitive(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, map[string]map[string]string{
		"mapElem1": map[string]string{
			"subMapElem1": "foo",
			"subMapElem2": "bar",
		},
		"mapElem2": map[string]string{
			"subMapElem1": "buzz",
			"subMapElem2": "bazz",
		},
	}, res.Res)
}

func TestRequestBodies_RequestBodyPostApplicationJSONMapOfPrimitive(t *testing.T) {
	recordTest("request-bodies-post-application-json-map-of-primitive")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := map[string]string{
		"mapElem1": "hello",
		"mapElem2": "world",
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostApplicationJSONMapOfPrimitive(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, map[string]string{
		"mapElem1": "hello",
		"mapElem2": "world",
	}, res.Res)
}

func TestRequestBodies_RequestBodyPostApplicationJSONMultipleJSONFiltered(t *testing.T) {
	recordTest("request-bodies-post-application-json-multiple-json-filtered")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := shared.SimpleObject{
		Any:        "any",
		Bigint:     big.NewInt(8821239038968084),
		BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
		Bool:       true,
		BoolOpt:    openapi.Bool(true),
		Date:       types.MustDateFromString("2020-01-01"),
		DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
		Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
		DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
		Enum:       shared.EnumOne,
		Float32:    1.1,
		Float64Str: openapi.Float64(1.1),
		Int:        1,
		Int32:      1,
		Int32Enum:  shared.Int32EnumFiftyFive,
		Int64Str:   openapi.Int64(100),
		IntEnum:    shared.IntEnumSecond,
		Num:        1.1,
		Str:        "test",
		StrOpt:     openapi.String("testOptional"),
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostApplicationJSONMultipleJSONFiltered(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostApplicationJSONMultipleJSONFilteredRes{
		JSON: shared.SimpleObject{
			Any:        "any",
			Bigint:     big.NewInt(8821239038968084),
			BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
			Bool:       true,
			BoolOpt:    openapi.Bool(true),
			Date:       types.MustDateFromString("2020-01-01"),
			DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
			Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
			DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
			Enum:       shared.EnumOne,
			Float32:    1.1,
			Float64Str: openapi.Float64(1.1),
			Int:        1,
			Int32:      1,
			Int32Enum:  shared.Int32EnumFiftyFive,
			Int64Str:   openapi.Int64(100),
			IntEnum:    shared.IntEnumSecond,
			Num:        1.1,
			Str:        "test",
			StrOpt:     openapi.String("testOptional"),
		},
	}, *res.Res)
}

func TestRequestBodies_RequestBodyPostApplicationJSONSimple(t *testing.T) {
	recordTest("request-bodies-post-application-json-simple")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := shared.SimpleObject{
		Any:        "any",
		Bigint:     big.NewInt(8821239038968084),
		BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
		Bool:       true,
		BoolOpt:    openapi.Bool(true),
		Date:       types.MustDateFromString("2020-01-01"),
		DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
		Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
		DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
		Enum:       shared.EnumOne,
		Float32:    1.1,
		Float64Str: openapi.Float64(1.1),
		Int:        1,
		Int32:      1,
		Int32Enum:  shared.Int32EnumFiftyFive,
		Int64Str:   openapi.Int64(100),
		IntEnum:    shared.IntEnumSecond,
		Num:        1.1,
		Str:        "test",
		StrOpt:     openapi.String("testOptional"),
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostApplicationJSONSimple(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostApplicationJSONSimpleRes{
		JSON: shared.SimpleObject{
			Any:        "any",
			Bigint:     big.NewInt(8821239038968084),
			BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
			Bool:       true,
			BoolOpt:    openapi.Bool(true),
			Date:       types.MustDateFromString("2020-01-01"),
			DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
			Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
			DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
			Enum:       shared.EnumOne,
			Float32:    1.1,
			Float64Str: openapi.Float64(1.1),
			Int:        1,
			Int32:      1,
			Int32Enum:  shared.Int32EnumFiftyFive,
			Int64Str:   openapi.Int64(100),
			IntEnum:    shared.IntEnumSecond,
			Num:        1.1,
			Str:        "test",
			StrOpt:     openapi.String("testOptional"),
		},
	}, *res.Res)
}

func TestRequestBodies_RequestBodyPostApplicationJSONSimpleCamelCase(t *testing.T) {
	recordTest("request-bodies-post-application-json-simple-camel-case")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := shared.SimpleObjectCamelCase{
		AnyVal:        "any example",
		BoolOptVal:    openapi.Bool(true),
		BoolVal:       true,
		DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
		DateVal:       types.MustDateFromString("2020-01-01"),
		EnumVal:       shared.EnumOne,
		Float32Val:    2.2222222,
		Int32EnumVal:  shared.Int32EnumValSixtyNine,
		Int32Val:      1,
		IntEnumVal:    shared.IntEnumValThird,
		IntOptNullVal: openapi.Int64(999999),
		IntVal:        999999,
		NumOptNullVal: openapi.Float64(1.1),
		NumVal:        1.1,
		StrOptVal:     openapi.String("optional example"),
		StrVal:        "example",
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostApplicationJSONSimpleCamelCase(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostApplicationJSONSimpleCamelCaseRes{
		JSON: shared.SimpleObjectCamelCase{
			AnyVal:        "any example",
			BoolOptVal:    openapi.Bool(true),
			BoolVal:       true,
			DateTimeVal:   types.MustTimeFromString("2020-01-01T00:00:00Z"),
			DateVal:       types.MustDateFromString("2020-01-01"),
			EnumVal:       shared.EnumOne,
			Float32Val:    2.2222222,
			Int32EnumVal:  shared.Int32EnumValSixtyNine,
			Int32Val:      1,
			IntEnumVal:    shared.IntEnumValThird,
			IntOptNullVal: openapi.Int64(999999),
			IntVal:        999999,
			NumOptNullVal: openapi.Float64(1.1),
			NumVal:        1.1,
			StrOptVal:     openapi.String("optional example"),
			StrVal:        "example",
		},
	}, *res.Res)
}

func TestRequestBodies_RequestBodyPostComplexNumberTypes(t *testing.T) {
	recordTest("request-bodies-complex-number-types")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := operations.RequestBodyPostComplexNumberTypesRequest{
		ComplexNumberTypes: shared.ComplexNumberTypes{
			Bigint:     big.NewInt(8821239038968084),
			BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
			Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
			DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
		},
		PathBigInt:      big.NewInt(8821239038968084),
		PathBigIntStr:   types.MustNewBigIntFromString("9223372036854775808"),
		PathDecimal:     types.MustNewDecimalFromString("3.141592653589793"),
		PathDecimalStr:  types.MustNewDecimalFromString("3.14159265358979344719667586"),
		QueryBigInt:     big.NewInt(8821239038968084),
		QueryBigIntStr:  types.MustNewBigIntFromString("9223372036854775808"),
		QueryDecimal:    types.MustNewDecimalFromString("3.141592653589793"),
		QueryDecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostComplexNumberTypes(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, shared.ComplexNumberTypes{
		Bigint:     big.NewInt(8821239038968084),
		BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
		Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
		DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
	}, res.Object.JSON)
	assert.Equal(t, "http://localhost:35123/anything/requestBodies/post/8821239038968084/9223372036854775808/3.141592653589793/3.14159265358979344719667586/complex-number-types?queryBigInt=8821239038968084&queryBigIntStr=9223372036854775808&queryDecimal=3.141592653589793&queryDecimalStr=3.14159265358979344719667586", sortQueryParameters(res.Object.URL))
}

func TestRequestBodies_RequestBodyPostDefaultsAndConsts(t *testing.T) {
	recordTest("request-bodies-defaults-and-consts")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := shared.DefaultsAndConsts{
		NormalField: "test",
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostDefaultsAndConsts(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostDefaultsAndConstsResponseBody{
		JSON: shared.DefaultsAndConstsOutput{
			ConstBigInt:        big.NewInt(9007199254740991),
			ConstBigIntStr:     types.MustNewBigIntFromString("9223372036854775807"),
			ConstBool:          true,
			ConstDate:          types.MustDateFromString("2020-01-01"),
			ConstDateTime:      types.MustTimeFromString("2020-01-01T00:00:00Z"),
			ConstDecimal:       types.MustNewDecimalFromString("3.141592653589793"),
			ConstDecimalStr:    types.MustNewDecimalFromString("3.141592653589793238462643383279"),
			ConstEnumInt:       shared.DefaultsAndConstsOutputConstEnumIntTwo,
			ConstEnumStr:       shared.DefaultsAndConstsOutputConstEnumStrTwo,
			ConstInt:           123,
			ConstNum:           123.456,
			ConstStr:           "const",
			ConstStrDQuotes:    "const with \"double quotes\"",
			ConstStrNull:       nil,
			ConstStrSQuotes:    "const with 'single quotes'",
			DefaultBigInt:      big.NewInt(9007199254740991),
			DefaultBigIntStr:   types.MustNewBigIntFromString("9223372036854775807"),
			DefaultBool:        true,
			DefaultDate:        types.MustDateFromString("2020-01-01"),
			DefaultDateTime:    types.MustTimeFromString("2020-01-01T00:00:00Z"),
			DefaultDecimal:     types.MustNewDecimalFromString("3.141592653589793"),
			DefaultDecimalStr:  types.MustNewDecimalFromString("3.141592653589793238462643383279"),
			DefaultEnumInt:     shared.DefaultsAndConstsOutputDefaultEnumIntTwo,
			DefaultEnumStr:     shared.DefaultsAndConstsOutputDefaultEnumStrTwo,
			DefaultInt:         123,
			DefaultNum:         123.456,
			DefaultStr:         "default",
			DefaultStrDQuotes:  "default with \"double quotes\"",
			DefaultStrNullable: nil,
			DefaultStrOptional: openapi.String("default"),
			DefaultStrSQuotes:  "default with 'single quotes'",
			NormalField:        "test",
		},
	}, *res.Object)
}

func TestRequestBodies_RequestBodyPostEmptyObject(t *testing.T) {
	recordTest("request-bodies-post-empty-object")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := operations.RequestBodyPostEmptyObjectRequestBody{}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostEmptyObject(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostEmptyObjectResponseBody{}, *res.Object)
}

func TestRequestBodies_RequestBodyPostFormDeep(t *testing.T) {
	recordTest("request-bodies-post-form-deep")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := shared.DeepObject{
		Any: shared.CreateAnySimpleObject(
			shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
		),
		Arr: []shared.SimpleObject{
			shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
			shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
		},
		Bool: true,
		Int:  1,
		Map: map[string]shared.SimpleObject{
			"key": shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
			"key2": shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
		},
		Num: 1.1,
		Obj: shared.SimpleObject{
			Any:        "any",
			Bigint:     big.NewInt(8821239038968084),
			BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
			Bool:       true,
			BoolOpt:    openapi.Bool(true),
			Date:       types.MustDateFromString("2020-01-01"),
			DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
			Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
			DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
			Enum:       shared.EnumOne,
			Float32:    1.1,
			Float64Str: openapi.Float64(1.1),
			Int:        1,
			Int32:      1,
			Int32Enum:  shared.Int32EnumFiftyFive,
			Int64Str:   openapi.Int64(100),
			IntEnum:    shared.IntEnumSecond,
			Num:        1.1,
			Str:        "test",
			StrOpt:     openapi.String("testOptional"),
		},
		Str: "test",
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostFormDeep(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, "[{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"float64Str\":\"1.1\",\"int\":1,\"int32\":1,\"int32Enum\":55,\"int64Str\":\"100\",\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"},{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"float64Str\":\"1.1\",\"int\":1,\"int32\":1,\"int32Enum\":55,\"int64Str\":\"100\",\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"}]", res.Res.Form.Arr)
	assert.Equal(t, "true", res.Res.Form.Bool)
	assert.Equal(t, "1", res.Res.Form.Int)
	assert.Equal(t, "{\"key\":{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"float64Str\":\"1.1\",\"int\":1,\"int32\":1,\"int32Enum\":55,\"int64Str\":\"100\",\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"},\"key2\":{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"float64Str\":\"1.1\",\"int\":1,\"int32\":1,\"int32Enum\":55,\"int64Str\":\"100\",\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"}}", res.Res.Form.Map)
	assert.Equal(t, "1.1", res.Res.Form.Num)
	assert.Equal(t, "{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"float64Str\":\"1.1\",\"int\":1,\"int32\":1,\"int32Enum\":55,\"int64Str\":\"100\",\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"}", res.Res.Form.Obj)
	assert.Equal(t, "test", res.Res.Form.Str)
}

func TestRequestBodies_RequestBodyPostFormMapPrimitive(t *testing.T) {
	recordTest("request-bodies-post-form-map-primitive")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := map[string]string{
		"key1": "value1",
		"key2": "value2",
		"key3": "value3",
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostFormMapPrimitive(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostFormMapPrimitiveRes{
		Form: map[string]string{
			"key1": "value1",
			"key2": "value2",
			"key3": "value3",
		},
	}, *res.Res)
}

func TestRequestBodies_RequestBodyPostFormSimple(t *testing.T) {
	recordTest("request-bodies-post-form-simple")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := shared.SimpleObject{
		Any:        "any",
		Bigint:     big.NewInt(8821239038968084),
		BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
		Bool:       true,
		BoolOpt:    openapi.Bool(true),
		Date:       types.MustDateFromString("2020-01-01"),
		DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
		Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
		DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
		Enum:       shared.EnumOne,
		Float32:    1.1,
		Float64Str: openapi.Float64(1.1),
		Int:        1,
		Int32:      1,
		Int32Enum:  shared.Int32EnumFiftyFive,
		Int64Str:   openapi.Int64(100),
		IntEnum:    shared.IntEnumSecond,
		Num:        1.1,
		Str:        "test",
		StrOpt:     openapi.String("testOptional"),
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostFormSimple(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, "any", res.Res.Form.Any)
	assert.Equal(t, "8821239038968084", *res.Res.Form.Bigint)
	assert.Equal(t, "9223372036854775808", *res.Res.Form.BigintStr)
	assert.Equal(t, "true", res.Res.Form.Bool)
	assert.Equal(t, "true", *res.Res.Form.BoolOpt)
	assert.Equal(t, "2020-01-01", res.Res.Form.Date)
	assert.Equal(t, "2020-01-01T00:00:00.001Z", res.Res.Form.DateTime)
	assert.Equal(t, "3.141592653589793", *res.Res.Form.Decimal)
	assert.Equal(t, "3.14159265358979344719667586", *res.Res.Form.DecimalStr)
	assert.Equal(t, "one", res.Res.Form.Enum)
	assert.Equal(t, "1.1", res.Res.Form.Float32)
	assert.Equal(t, "1", res.Res.Form.Int)
	assert.Equal(t, "1", res.Res.Form.Int32)
	assert.Equal(t, "55", res.Res.Form.Int32Enum)
	assert.Equal(t, "2", res.Res.Form.IntEnum)
	assert.Nil(t, res.Res.Form.IntOptNull)
	assert.Equal(t, "1.1", res.Res.Form.Num)
	assert.Nil(t, res.Res.Form.NumOptNull)
	assert.Equal(t, "test", res.Res.Form.Str)
	assert.Equal(t, "testOptional", *res.Res.Form.StrOpt)
}

func TestRequestBodies_RequestBodyPostJSONDataTypesArrayBigInt(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-array-bigint")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := []*big.Int{
		big.NewInt(1),
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesArrayBigInt(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostJSONDataTypesArrayBigIntResponseBody{
		Data: "[1]",
		JSON: []*big.Int{
			big.NewInt(1),
		},
	}, *res.Object)
}

func TestRequestBodies_RequestBodyPostJSONDataTypesArrayDate(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-array-date")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := []types.Date{
		types.MustDateFromString("2020-01-01"),
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesArrayDate(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostJSONDataTypesArrayDateResponseBody{
		Data: "[\"2020-01-01\"]",
		JSON: []types.Date{
			types.MustDateFromString("2020-01-01"),
		},
	}, *res.Object)
}

func TestRequestBodies_RequestBodyPostJSONDataTypesArrayDecimalStr(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-array-decimal-str")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := []*decimal.Big{
		types.MustNewDecimalFromString("3.141592653589793438462643383279"),
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesArrayDecimalStr(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostJSONDataTypesArrayDecimalStrResponseBody{
		Data: "[\"3.141592653589793438462643383279\"]",
		JSON: []*decimal.Big{
			types.MustNewDecimalFromString("3.141592653589793438462643383279"),
		},
	}, *res.Object)
}

func TestRequestBodies_RequestBodyPostJSONDataTypesBigInt(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-bigint")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	var request *big.Int = big.NewInt(1)
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesBigInt(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostJSONDataTypesBigIntResponseBody{
		Data: "1",
		JSON: big.NewInt(1),
	}, *res.Object)
}

func TestRequestBodies_RequestBodyPostJSONDataTypesBigIntStr(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-bigint-str")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	var request *big.Int = types.MustNewBigIntFromString("1")
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesBigIntStr(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostJSONDataTypesBigIntStrResponseBody{
		Data: "\"1\"",
		JSON: types.MustNewBigIntFromString("1"),
	}, *res.Object)
}

func TestRequestBodies_RequestBodyPostJSONDataTypesBoolean(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-boolean")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	var request bool = true
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesBoolean(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostJSONDataTypesBooleanResponseBody{
		JSON: true,
	}, *res.Object)
}

func TestRequestBodies_RequestBodyPostJSONDataTypesComplexNumberArrays_Test(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-complex-number-arrays")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := shared.ComplexNumberArrays{
		DecimalArray: []*decimal.Big{
			types.MustNewDecimalFromString("3.141592653589793"),
		},
		DecimalStrArray: []*decimal.Big{
			types.MustNewDecimalFromString("3.141592653589793238462643383279"),
		},
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesComplexNumberArrays(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostJSONDataTypesComplexNumberArraysRes{
		JSON: shared.ComplexNumberArrays{
			DecimalArray: []*decimal.Big{
				types.MustNewDecimalFromString("3.141592653589793"),
			},
			DecimalStrArray: []*decimal.Big{
				types.MustNewDecimalFromString("3.141592653589793238462643383279"),
			},
		},
	}, *res.Res)
}

func TestRequestBodies_RequestBodyPostJSONDataTypesComplexNumberMaps_Test(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-complex-number-maps")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := shared.ComplexNumberMaps{
		BigintMap: map[string]*big.Int{
			"bigint": big.NewInt(9007199254740991),
		},
		BigintStrMap: map[string]*big.Int{
			"bigint": types.MustNewBigIntFromString("9223372036854775807"),
		},
		DecimalMap: map[string]*decimal.Big{
			"decimal": types.MustNewDecimalFromString("3.141592653589793"),
		},
		DecimalStrMap: map[string]*decimal.Big{
			"decimal": types.MustNewDecimalFromString("3.141592653589793238462643383279"),
		},
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesComplexNumberMaps(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostJSONDataTypesComplexNumberMapsRes{
		JSON: shared.ComplexNumberMaps{
			BigintMap: map[string]*big.Int{
				"bigint": big.NewInt(9007199254740991),
			},
			BigintStrMap: map[string]*big.Int{
				"bigint": types.MustNewBigIntFromString("9223372036854775807"),
			},
			DecimalMap: map[string]*decimal.Big{
				"decimal": types.MustNewDecimalFromString("3.141592653589793"),
			},
			DecimalStrMap: map[string]*decimal.Big{
				"decimal": types.MustNewDecimalFromString("3.141592653589793238462643383279"),
			},
		},
	}, *res.Res)
}

func TestRequestBodies_RequestBodyPostJSONDataTypesDate(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-date")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	var request types.Date = types.MustDateFromString("2020-01-01")
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesDate(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostJSONDataTypesDateResponseBody{
		Data: "\"2020-01-01\"",
		JSON: types.MustDateFromString("2020-01-01"),
	}, *res.Object)
}

func TestRequestBodies_RequestBodyPostJSONDataTypesDateTime(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-date-time")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	var request time.Time = types.MustTimeFromString("2020-01-01T00:00:00.001Z")
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesDateTime(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, "\"2020-01-01T00:00:00.001Z\"", res.Object.Data)
	assert.Equal(t, types.MustTimeFromString("2020-01-01T00:00:00.001Z"), res.Object.JSON)
}

func TestRequestBodies_RequestBodyPostJSONDataTypesDecimal(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-decimal")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	var request *decimal.Big = types.MustNewDecimalFromString("1.1")
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesDecimal(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostJSONDataTypesDecimalResponseBody{
		Data: "1.1",
		JSON: types.MustNewDecimalFromString("1.1"),
	}, *res.Object)
}

func TestRequestBodies_RequestBodyPostJSONDataTypesDecimalStr(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-decimal-str")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	var request *decimal.Big = types.MustNewDecimalFromString("1.1")
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesDecimalStr(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostJSONDataTypesDecimalStrResponseBody{
		Data: "\"1.1\"",
		JSON: types.MustNewDecimalFromString("1.1"),
	}, *res.Object)
}

func TestRequestBodies_RequestBodyPostJSONDataTypesFloat32(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-float32")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	var request float64 = 1.1
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesFloat32(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostJSONDataTypesFloat32ResponseBody{
		JSON: 1.1,
	}, *res.Object)
}

func TestRequestBodies_RequestBodyPostJSONDataTypesInt32(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-int32")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	var request int = 1
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesInt32(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostJSONDataTypesInt32ResponseBody{
		JSON: 1,
	}, *res.Object)
}

func TestRequestBodies_RequestBodyPostJSONDataTypesInteger(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-integer")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	var request int64 = 1
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesInteger(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostJSONDataTypesIntegerResponseBody{
		JSON: 1,
	}, *res.Object)
}

func TestRequestBodies_RequestBodyPostJSONDataTypesMapBigIntStr(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-map-bigint-str")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := map[string]*big.Int{
		"test": types.MustNewBigIntFromString("1"),
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesMapBigIntStr(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostJSONDataTypesMapBigIntStrResponseBody{
		Data: "{\"test\":\"1\"}",
		JSON: map[string]*big.Int{
			"test": types.MustNewBigIntFromString("1"),
		},
	}, *res.Object)
}

func TestRequestBodies_RequestBodyPostJSONDataTypesMapDateTime(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-map-date-time")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := map[string]time.Time{
		"test": types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesMapDateTime(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, "{\"test\":\"2020-01-01T00:00:00.001Z\"}", res.Object.Data)
	assert.Equal(t, map[string]time.Time{
		"test": types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
	}, res.Object.JSON)
}

func TestRequestBodies_RequestBodyPostJSONDataTypesMapDecimal(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-map-decimal")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := map[string]*decimal.Big{
		"test": types.MustNewDecimalFromString("3.141592653589793"),
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesMapDecimal(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostJSONDataTypesMapDecimalResponseBody{
		Data: "{\"test\":3.141592653589793}",
		JSON: map[string]*decimal.Big{
			"test": types.MustNewDecimalFromString("3.141592653589793"),
		},
	}, *res.Object)
}

func TestRequestBodies_RequestBodyPostJSONDataTypesNumber(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-number")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	var request float64 = 1.1
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesNumber(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostJSONDataTypesNumberResponseBody{
		JSON: 1.1,
	}, *res.Object)
}

func TestRequestBodies_RequestBodyPostJSONDataTypesString(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-string")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	var request string = "test"
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesString(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostJSONDataTypesStringResponseBody{
		JSON: "test",
	}, *res.Object)
}

func TestRequestBodies_RequestBodyPostMultipleContentTypesComponentFiltered(t *testing.T) {
	recordTest("request-bodies-post-multiple-content-types-component-filtered")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := shared.SimpleObject{
		Any:        "any",
		Bigint:     big.NewInt(8821239038968084),
		BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
		Bool:       true,
		BoolOpt:    openapi.Bool(true),
		Date:       types.MustDateFromString("2020-01-01"),
		DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
		Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
		DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
		Enum:       shared.EnumOne,
		Float32:    1.1,
		Float64Str: openapi.Float64(1.1),
		Int:        1,
		Int32:      1,
		Int32Enum:  shared.Int32EnumFiftyFive,
		Int64Str:   openapi.Int64(100),
		IntEnum:    shared.IntEnumSecond,
		Num:        1.1,
		Str:        "test",
		StrOpt:     openapi.String("testOptional"),
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostMultipleContentTypesComponentFiltered(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostMultipleContentTypesComponentFilteredRes{
		JSON: shared.SimpleObject{
			Any:        "any",
			Bigint:     big.NewInt(8821239038968084),
			BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
			Bool:       true,
			BoolOpt:    openapi.Bool(true),
			Date:       types.MustDateFromString("2020-01-01"),
			DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
			Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
			DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
			Enum:       shared.EnumOne,
			Float32:    1.1,
			Float64Str: openapi.Float64(1.1),
			Int:        1,
			Int32:      1,
			Int32Enum:  shared.Int32EnumFiftyFive,
			Int64Str:   openapi.Int64(100),
			IntEnum:    shared.IntEnumSecond,
			Num:        1.1,
			Str:        "test",
			StrOpt:     openapi.String("testOptional"),
		},
	}, *res.Res)
}

func TestRequestBodies_RequestBodyPostMultipleContentTypesInlineFiltered(t *testing.T) {
	recordTest("request-bodies-post-multiple-content-types-inline-filtered")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := operations.RequestBodyPostMultipleContentTypesInlineFilteredRequestBody{
		Bool: true,
		Num:  1.1,
		Str:  "test",
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostMultipleContentTypesInlineFiltered(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostMultipleContentTypesInlineFilteredRes{
		JSON: map[string]any{
			"bool": true,
			"num":  1.1,
			"str":  "test",
		},
	}, *res.Res)
}

func TestRequestBodies_RequestBodyPostNotNullableNotRequiredStringBody(t *testing.T) {
	recordTest("request-bodies-post-not-nullable-not-required-string-body")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	var request *string = nil
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostNotNullableNotRequiredStringBody(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostNotNullableNotRequiredStringBodyResponseBody{
		Data: "",
	}, *res.Object)
}

func TestRequestBodies_RequestBodyPostNullArray(t *testing.T) {
	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := []string{
		"value1",
		"value2",
		"value3",
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostNullArray(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostNullArrayResponseBody{
		Data: "[\"value1\",\"value2\",\"value3\"]",
	}, *res.Object)
}

func TestRequestBodies_RequestBodyPostNullDictionary(t *testing.T) {
	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := map[string]string{
		"key1": "value1",
		"key2": "value2",
		"key3": "value3",
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostNullDictionary(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostNullDictionaryResponseBody{
		Data: "{\"key1\":\"value1\",\"key2\":\"value2\",\"key3\":\"value3\"}",
	}, *res.Object)
}

func TestRequestBodies_RequestBodyPostNullableNotRequiredStringBody(t *testing.T) {
	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	var request *string = nil
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostNullableNotRequiredStringBody(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostNullableNotRequiredStringBodyResponseBody{
		Data: "null",
	}, *res.Object)
}

func TestRequestBodies_RequestBodyPostNullableRequiredStringBody(t *testing.T) {
	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	var request *string = nil
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPostNullableRequiredStringBody(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPostNullableRequiredStringBodyResponseBody{
		Data: "null",
	}, *res.Object)
}

func TestRequestBodies_RequestBodyPutMultipartDeep(t *testing.T) {
	recordTest("request-bodies-put-multipart-deep")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := shared.DeepObject{
		Any: shared.CreateAnySimpleObject(
			shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
		),
		Arr: []shared.SimpleObject{
			shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
			shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
		},
		Bool: true,
		Int:  1,
		Map: map[string]shared.SimpleObject{
			"key": shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
			"key2": shared.SimpleObject{
				Any:        "any",
				Bigint:     big.NewInt(8821239038968084),
				BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
				Bool:       true,
				BoolOpt:    openapi.Bool(true),
				Date:       types.MustDateFromString("2020-01-01"),
				DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
				Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
				DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
				Enum:       shared.EnumOne,
				Float32:    1.1,
				Float64Str: openapi.Float64(1.1),
				Int:        1,
				Int32:      1,
				Int32Enum:  shared.Int32EnumFiftyFive,
				Int64Str:   openapi.Int64(100),
				IntEnum:    shared.IntEnumSecond,
				Num:        1.1,
				Str:        "test",
				StrOpt:     openapi.String("testOptional"),
			},
		},
		Num: 1.1,
		Obj: shared.SimpleObject{
			Any:        "any",
			Bigint:     big.NewInt(8821239038968084),
			BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
			Bool:       true,
			BoolOpt:    openapi.Bool(true),
			Date:       types.MustDateFromString("2020-01-01"),
			DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
			Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
			DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
			Enum:       shared.EnumOne,
			Float32:    1.1,
			Float64Str: openapi.Float64(1.1),
			Int:        1,
			Int32:      1,
			Int32Enum:  shared.Int32EnumFiftyFive,
			Int64Str:   openapi.Int64(100),
			IntEnum:    shared.IntEnumSecond,
			Num:        1.1,
			Str:        "test",
			StrOpt:     openapi.String("testOptional"),
		},
		Str: "test",
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPutMultipartDeep(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, "[{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"float64Str\":\"1.1\",\"int\":1,\"int32\":1,\"int32Enum\":55,\"int64Str\":\"100\",\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"},{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"float64Str\":\"1.1\",\"int\":1,\"int32\":1,\"int32Enum\":55,\"int64Str\":\"100\",\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"}]", res.Res.Form.Arr)
	assert.Equal(t, "true", res.Res.Form.Bool)
	assert.Equal(t, "1", res.Res.Form.Int)
	assert.Equal(t, "{\"key\":{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"float64Str\":\"1.1\",\"int\":1,\"int32\":1,\"int32Enum\":55,\"int64Str\":\"100\",\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"},\"key2\":{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"float64Str\":\"1.1\",\"int\":1,\"int32\":1,\"int32Enum\":55,\"int64Str\":\"100\",\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"}}", res.Res.Form.Map)
	assert.Equal(t, "1.1", res.Res.Form.Num)
	assert.Equal(t, "{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"float64Str\":\"1.1\",\"int\":1,\"int32\":1,\"int32Enum\":55,\"int64Str\":\"100\",\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"}", res.Res.Form.Obj)
	assert.Equal(t, "test", res.Res.Form.Str)
}

func TestRequestBodies_RequestBodyPutMultipartSimple(t *testing.T) {
	recordTest("request-bodies-put-multipart-simple")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := shared.SimpleObject{
		Any:        "any",
		Bigint:     big.NewInt(8821239038968084),
		BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
		Bool:       true,
		BoolOpt:    openapi.Bool(true),
		Date:       types.MustDateFromString("2020-01-01"),
		DateTime:   types.MustTimeFromString("2020-01-01T00:00:00.001Z"),
		Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
		DecimalStr: types.MustNewDecimalFromString("3.14159265358979344719667586"),
		Enum:       shared.EnumOne,
		Float32:    1.1,
		Float64Str: openapi.Float64(1.1),
		Int:        1,
		Int32:      1,
		Int32Enum:  shared.Int32EnumFiftyFive,
		Int64Str:   openapi.Int64(100),
		IntEnum:    shared.IntEnumSecond,
		Num:        1.1,
		Str:        "test",
		StrOpt:     openapi.String("testOptional"),
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPutMultipartSimple(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, "any", res.Res.Form.Any)
	assert.Equal(t, "8821239038968084", *res.Res.Form.Bigint)
	assert.Equal(t, "9223372036854775808", *res.Res.Form.BigintStr)
	assert.Equal(t, "true", res.Res.Form.Bool)
	assert.Equal(t, "true", *res.Res.Form.BoolOpt)
	assert.Equal(t, "2020-01-01", res.Res.Form.Date)
	assert.Equal(t, "2020-01-01T00:00:00.001Z", res.Res.Form.DateTime)
	assert.Equal(t, "3.141592653589793", *res.Res.Form.Decimal)
	assert.Equal(t, "3.14159265358979344719667586", *res.Res.Form.DecimalStr)
	assert.Equal(t, "one", res.Res.Form.Enum)
	assert.Equal(t, "1.1", res.Res.Form.Float32)
	assert.Equal(t, "1", res.Res.Form.Int)
	assert.Equal(t, "1", res.Res.Form.Int32)
	assert.Equal(t, "55", res.Res.Form.Int32Enum)
	assert.Equal(t, "2", res.Res.Form.IntEnum)
	assert.Nil(t, res.Res.Form.IntOptNull)
	assert.Equal(t, "1.1", res.Res.Form.Num)
	assert.Nil(t, res.Res.Form.NumOptNull)
	assert.Equal(t, "test", res.Res.Form.Str)
	assert.Equal(t, "testOptional", *res.Res.Form.StrOpt)
}

func TestRequestBodies_RequestBodyPutString(t *testing.T) {
	recordTest("request-bodies-put-string")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	var request string = "Hello World"
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPutString(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPutStringRes{
		Data: "Hello World",
	}, *res.Res)
}

func TestRequestBodies_RequestBodyPutStringWithParams(t *testing.T) {
	recordTest("request-bodies-put-string-with-params")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	var requestBody string = "Hello world"

	var queryStringParam string = "test param"
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyPutStringWithParams(ctx, requestBody, queryStringParam)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, operations.RequestBodyPutStringWithParamsRes{
		Args: operations.RequestBodyPutStringWithParamsArgs{
			QueryStringParam: "test param",
		},
		Data: "Hello world",
	}, *res.Res)
}

func TestRequestBodies_RequestBodyReadAndWrite(t *testing.T) {
	recordTest("request-bodies-read-and-write")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := shared.ReadWriteObject{
		Num1: 1,
		Num2: 2,
		Num3: 4,
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyReadAndWrite(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, shared.ReadWriteObjectOutput{
		Num3: 4,
		Sum:  7,
	}, *res.ReadWriteObject)
}

func TestRequestBodies_RequestBodyReadOnlyInput(t *testing.T) {
	recordTest("request-bodies-read-only-input")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := shared.ReadOnlyObjectInput{}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyReadOnlyInput(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, shared.ReadOnlyObject{
		Bool:   true,
		Num:    1,
		String: "hello",
	}, *res.ReadOnlyObject)
}

func TestRequestBodies_RequestBodyReadOnlyUnion(t *testing.T) {
	recordTest("request-bodies-read-only-union")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	var request shared.WeaklyTypedOneOfReadOnlyObjectInput = shared.CreateWeaklyTypedOneOfReadOnlyObjectInputReadOnlyObjectInput(
		shared.ReadOnlyObjectInput{},
	)
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyReadOnlyUnion(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, shared.CreateWeaklyTypedOneOfReadOnlyObjectReadOnlyObject(
		shared.ReadOnlyObject{
			Bool:   true,
			Num:    1,
			String: "hello",
		},
	), *res.WeaklyTypedOneOfReadOnlyObject)
}

func TestRequestBodies_RequestBodyReadWriteOnlyUnion(t *testing.T) {
	recordTest("request-bodies-read-write-only-union")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	var request shared.WeaklyTypedOneOfReadWriteObject = shared.CreateWeaklyTypedOneOfReadWriteObjectReadWriteObject(
		shared.ReadWriteObject{
			Num1: 1,
			Num2: 2,
			Num3: 4,
		},
	)
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyReadWriteOnlyUnion(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, shared.CreateWeaklyTypedOneOfReadWriteObjectOutputReadWriteObjectOutput(
		shared.ReadWriteObjectOutput{
			Num3: 4,
			Sum:  7,
		},
	), *res.WeaklyTypedOneOfReadWriteObject)
}

func TestRequestBodies_RequestBodyWriteOnly(t *testing.T) {
	recordTest("request-bodies-write-only")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := shared.WriteOnlyObject{
		Bool:   true,
		Num:    1,
		String: "hello",
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyWriteOnly(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, shared.ReadOnlyObject{
		Bool:   true,
		Num:    1,
		String: "hello",
	}, *res.ReadOnlyObject)
}

func TestRequestBodies_RequestBodyWriteOnlyOutput(t *testing.T) {
	recordTest("request-bodies-write-only-output")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	request := shared.WriteOnlyObject{
		Bool:   true,
		Num:    1,
		String: "hello",
	}
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyWriteOnlyOutput(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, shared.WriteOnlyObjectOutput{}, *res.WriteOnlyObject)
}

func TestRequestBodies_RequestBodyWriteOnlyUnion_WriteOnlyObject(t *testing.T) {
	recordTest("request-bodies-write-only-union")

	s := openapi.New(
		openapi.WithSecurity(shared.Security{
			APIKeyAuth: openapi.String("Token YOUR_API_KEY"),
		}),
	)
	var request shared.WeaklyTypedOneOfWriteOnlyObject = shared.CreateWeaklyTypedOneOfWriteOnlyObjectWriteOnlyObject(
		shared.WriteOnlyObject{
			Bool:   true,
			Num:    1,
			String: "hello",
		},
	)
	ctx := context.Background()
	res, err := s.RequestBodies.RequestBodyWriteOnlyUnion(ctx, request)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, 200, res.StatusCode)
	assert.Equal(t, shared.CreateWeaklyTypedOneOfWriteOnlyObjectOutputWriteOnlyObjectOutput(
		shared.WriteOnlyObjectOutput{},
	), *res.WeaklyTypedOneOfWriteOnlyObject)
}
