// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package tests

import (
	"context"
	"net/http"
	"testing"
	"time"

	"openapi/pkg/models/operations"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"

	sdk "openapi"

	"github.com/AlekSi/pointer"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestStronglyTypedOneOfPost_Basic(t *testing.T) {
	recordTest("unions-strongly-typed-one-of-post-basic")

	s := sdk.New()

	obj := shared.SimpleObjectWithType{
		Str:        "test",
		Bool:       true,
		Int:        1,
		Int32:      1,
		IntEnum:    shared.SimpleObjectWithTypeIntEnumEnumSecond,
		Int32Enum:  shared.SimpleObjectWithTypeInt32EnumEnumFiftyFive,
		Num:        1.1,
		Float32:    1.1,
		Enum:       shared.EnumEnumOne,
		Any:        "any",
		Date:       types.Date{time.Date(2020, 1, 1, 0, 0, 0, 0, time.UTC)},
		DateTime:   time.Date(2020, 1, 1, 0, 0, 0, 1, time.UTC),
		BoolOpt:    pointer.ToBool(true),
		StrOpt:     pointer.ToString("testOptional"),
		IntOptNull: nil,
		NumOptNull: nil,
	}

	req := shared.CreateStronglyTypedOneOfObjectSimpleObjectWithType(obj)

	res, err := s.Unions.StronglyTypedOneOfPost(context.Background(), req)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, shared.StronglyTypedOneOfObjectTypeSimpleObjectWithType, res.Res.JSON.Type)

	obj.Type = "simpleObjectWithType"
	assert.Equal(t, obj, *res.Res.JSON.SimpleObjectWithType)
}

func TestStronglyTypedOneOfPost_Deep(t *testing.T) {
	recordTest("unions-strongly-typed-one-of-post-deep")

	s := sdk.New()

	obj := shared.DeepObjectWithType{
		Any: createSimpleObject(),
		Arr: []shared.SimpleObject{
			createSimpleObject(), createSimpleObject(),
		},
		Bool: true,
		Int:  1,
		Map: map[string]shared.SimpleObject{
			"key": createSimpleObject(),
		},
		Num: 1.1,
		Obj: createSimpleObject(),
		Str: "test",
	}

	req := shared.CreateStronglyTypedOneOfObjectDeepObjectWithType(obj)

	res, err := s.Unions.StronglyTypedOneOfPost(context.Background(), req)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, shared.StronglyTypedOneOfObjectTypeDeepObjectWithType, res.Res.JSON.Type)

	resAny := res.Res.JSON.DeepObjectWithType.Any.(map[string]interface{})
	res.Res.JSON.DeepObjectWithType.Any = nil
	obj.Any = nil
	obj.Type = pointer.ToString("deepObjectWithType")

	assert.Equal(t, obj, *res.Res.JSON.DeepObjectWithType)
	assert.Equal(t, "any", resAny["any"])
	assert.Equal(t, true, resAny["bool"])
	assert.Equal(t, true, resAny["boolOpt"])
	assert.Equal(t, "2020-01-01", resAny["date"])
	assert.Equal(t, "2020-01-01T00:00:00.000000001Z", resAny["dateTime"])
	assert.Equal(t, "one", resAny["enum"])
	assert.Equal(t, 1.1, resAny["float32"])
	assert.Equal(t, float64(1), resAny["int"])
	assert.Equal(t, float64(1), resAny["int32"])
	assert.Equal(t, 1.1, resAny["num"])
	assert.Equal(t, "test", resAny["str"])
	assert.Equal(t, "testOptional", resAny["strOpt"])
}

func TestWeaklyTypedOneOfPost_Basic(t *testing.T) {
	recordTest("unions-weakly-typed-one-of-post-basic")

	s := sdk.New()

	obj := createSimpleObject()

	req := shared.CreateWeaklyTypedOneOfObjectSimpleObject(obj)

	res, err := s.Unions.WeaklyTypedOneOfPost(context.Background(), req)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, shared.WeaklyTypedOneOfObjectTypeSimpleObject, res.Res.JSON.Type)
	assert.Equal(t, obj, *res.Res.JSON.SimpleObject)
}

func TestWeaklyTypedOneOfPost_Deep(t *testing.T) {
	recordTest("unions-weakly-typed-one-of-post-deep")

	s := sdk.New()

	obj := createDeepObject()

	req := shared.CreateWeaklyTypedOneOfObjectDeepObject(obj)

	res, err := s.Unions.WeaklyTypedOneOfPost(context.Background(), req)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, shared.WeaklyTypedOneOfObjectTypeDeepObject, res.Res.JSON.Type)
	compareDeepObject(t, obj, *res.Res.JSON.DeepObject)
}

func TestTypedObjectOneOfPost_Obj1(t *testing.T) {
	recordTest("unions-typed-object-one-of-post-obj1")

	s := sdk.New()

	obj := shared.TypedObject1{
		Type: shared.TypedObject1TypeEnumObj1,
	}

	req := shared.CreateTypedObjectOneOfTypedObject1(obj)

	res, err := s.Unions.TypedObjectOneOfPost(context.Background(), req)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, shared.TypedObjectOneOfTypeTypedObject1, res.Res.JSON.Type)
	assert.Equal(t, obj, *res.Res.JSON.TypedObject1)
}

func TestTypedObjectOneOfPost_Obj2(t *testing.T) {
	recordTest("unions-typed-object-one-of-post-obj2")

	s := sdk.New()

	obj := shared.TypedObject2{
		Type: shared.TypedObject2TypeEnumObj2,
	}

	req := shared.CreateTypedObjectOneOfTypedObject2(obj)

	res, err := s.Unions.TypedObjectOneOfPost(context.Background(), req)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, shared.TypedObjectOneOfTypeTypedObject2, res.Res.JSON.Type)
	assert.Equal(t, obj, *res.Res.JSON.TypedObject2)
}

func TestTypedObjectOneOfPost_Obj3(t *testing.T) {
	recordTest("unions-typed-object-one-of-post-obj3")

	s := sdk.New()

	obj := shared.TypedObject3{
		Type: shared.TypedObject3TypeEnumObj3,
	}

	req := shared.CreateTypedObjectOneOfTypedObject3(obj)

	res, err := s.Unions.TypedObjectOneOfPost(context.Background(), req)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, shared.TypedObjectOneOfTypeTypedObject3, res.Res.JSON.Type)
	assert.Equal(t, obj, *res.Res.JSON.TypedObject3)
}

func TestPrimitiveTypeOneOfPost_String(t *testing.T) {
	recordTest("unions-primitive-type-one-of-post-string")

	s := sdk.New()

	req := operations.CreatePrimitiveTypeOneOfPostRequestBodyStr("test")

	res, err := s.Unions.PrimitiveTypeOneOfPost(context.Background(), req)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, operations.PrimitiveTypeOneOfPostResJSONTypeStr, res.Res.JSON.Type)
	assert.Equal(t, "test", *res.Res.JSON.Str)
}

func TestPrimitiveTypeOneOfPost_Integer(t *testing.T) {
	recordTest("unions-primitive-type-one-of-post-integer")

	s := sdk.New()

	req := operations.CreatePrimitiveTypeOneOfPostRequestBodyInteger(111)

	res, err := s.Unions.PrimitiveTypeOneOfPost(context.Background(), req)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, operations.PrimitiveTypeOneOfPostResJSONTypeInteger, res.Res.JSON.Type)
	assert.Equal(t, int64(111), *res.Res.JSON.Integer)
}

func TestPrimitiveTypeOneOfPost_Number(t *testing.T) {
	recordTest("unions-primitive-type-one-of-post-number")

	s := sdk.New()

	req := operations.CreatePrimitiveTypeOneOfPostRequestBodyNumber(22.2)

	res, err := s.Unions.PrimitiveTypeOneOfPost(context.Background(), req)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, operations.PrimitiveTypeOneOfPostResJSONTypeNumber, res.Res.JSON.Type)
	assert.Equal(t, float64(22.2), *res.Res.JSON.Number)
}

func TestPrimitiveTypeOneOfPost_Boolean(t *testing.T) {
	recordTest("unions-primitive-type-one-of-post-boolean")

	s := sdk.New()

	req := operations.CreatePrimitiveTypeOneOfPostRequestBodyBoolean(true)

	res, err := s.Unions.PrimitiveTypeOneOfPost(context.Background(), req)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, operations.PrimitiveTypeOneOfPostResJSONTypeBoolean, res.Res.JSON.Type)
	assert.Equal(t, true, *res.Res.JSON.Boolean)
}

func TestMixedTypeOneOfPost_String(t *testing.T) {
	recordTest("unions-mixed-type-one-of-post-string")

	s := sdk.New()

	req := operations.CreateMixedTypeOneOfPostRequestBodyStr("test")

	res, err := s.Unions.MixedTypeOneOfPost(context.Background(), req)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, operations.MixedTypeOneOfPostResJSONTypeStr, res.Res.JSON.Type)
	assert.Equal(t, "test", *res.Res.JSON.Str)
}

func TestMixedTypeOneOfPost_Integer(t *testing.T) {
	recordTest("unions-mixed-type-one-of-post-integer")

	s := sdk.New()

	req := operations.CreateMixedTypeOneOfPostRequestBodyInteger(111)

	res, err := s.Unions.MixedTypeOneOfPost(context.Background(), req)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, operations.MixedTypeOneOfPostResJSONTypeInteger, res.Res.JSON.Type)
	assert.Equal(t, int64(111), *res.Res.JSON.Integer)
}

func TestMixedTypeOneOfPost_Object(t *testing.T) {
	recordTest("unions-mixed-type-one-of-post-object")

	s := sdk.New()

	obj := createSimpleObject()

	req := operations.CreateMixedTypeOneOfPostRequestBodySimpleObject(obj)

	res, err := s.Unions.MixedTypeOneOfPost(context.Background(), req)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, operations.MixedTypeOneOfPostResJSONTypeSimpleObject, res.Res.JSON.Type)
	assert.Equal(t, obj, *res.Res.JSON.SimpleObject)
}
