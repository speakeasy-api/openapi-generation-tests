// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	"math/rand"
	"testing"

	"openapi"
	"openapi/models/components"
	"openapi/models/operations"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestClientCredentials_HookSuccessfullyAuthenticates(t *testing.T) {
	recordTest("hooks-client-credentials-success")

	s := openapi.New(openapi.WithSecurity(components.Security{
		ClientID:     openapi.String("speakeasy-sdks"),
		ClientSecret: openapi.String("supersecret-" + randSeq(10)),
	}))

	assertAuthenticatedRequest := func(t *testing.T) {
		res, err := s.AuthenticatedRequest(context.Background(), &operations.AuthenticatedRequestRequestBody{})
		require.NoError(t, err)

		assert.NotNil(t, res)
		assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	}

	// Verify concurrent access.
	// Reference: https://linear.app/speakeasy/issue/SPE-4162/implement-thread-safety-with-syncmutex-in-client-credentials-hook
	go assertAuthenticatedRequest(t)
	go assertAuthenticatedRequest(t)
	go assertAuthenticatedRequest(t)

	t.Setenv("SPEAKEASY_CLIENT_ID", "speakeasy-sdks")
	t.Setenv("SPEAKEASY_CLIENT_SECRET", "supersecret-"+randSeq(10))
	s2 := openapi.New()
	res2, err2 := s2.AuthenticatedRequest(context.Background(), &operations.AuthenticatedRequestRequestBody{})
	require.NoError(t, err2)

	assert.NotNil(t, res2)
	assert.Equal(t, 200, res2.HTTPMeta.Response.StatusCode)
}

func TestClientCredentials_HookSuccessfullyAuthenticatesWithAltTokenURL(t *testing.T) {
	recordTest("hooks-client-credentials-success-alt-token-url")

	s := openapi.New(openapi.WithSecurity(components.Security{
		ClientID:     openapi.String("speakeasy-sdks"),
		ClientSecret: openapi.String("supersecret-" + randSeq(10)),
		TokenURL:     openapi.String("/clientcredentials/alt/token"),
	}))
	res, err := s.AuthenticatedRequest(context.Background(), &operations.AuthenticatedRequestRequestBody{})
	require.NoError(t, err)

	assert.NotNil(t, res)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

	res, err = s.AuthenticatedRequest(context.Background(), &operations.AuthenticatedRequestRequestBody{})
	require.NoError(t, err)

	assert.NotNil(t, res)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

	t.Setenv("SPEAKEASY_CLIENT_ID", "speakeasy-sdks")
	t.Setenv("SPEAKEASY_CLIENT_SECRET", "supersecret-"+randSeq(10))
	s2 := openapi.New()
	res2, err2 := s2.AuthenticatedRequest(context.Background(), &operations.AuthenticatedRequestRequestBody{})
	require.NoError(t, err2)

	assert.NotNil(t, res2)
	assert.Equal(t, 200, res2.HTTPMeta.Response.StatusCode)
}

var letters = []rune("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ")

func randSeq(n int) string {
	b := make([]rune, n)
	for i := range b {
		b[i] = letters[rand.Intn(len(letters))]
	}
	return string(b)
}
