// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package tests

import (
	"context"
	"testing"

	"openapi/pkg/models/operations"
	"openapi/pkg/models/sdkerrors"

	sdk "openapi"

	"github.com/stretchr/testify/assert"
)

func TestStatusGetError_DefaultErrorCodes(t *testing.T) {
	recordTest("errors-status-get-error-default-error-codes")

	s := sdk.New()

	res, err := s.Errors.StatusGetError(context.Background(), 400)
	assert.Error(t, err)
	assert.Equal(t, "API error occurred: Status 400", err.Error())

	var sdkErr *sdkerrors.SDKError
	if assert.ErrorAs(t, err, &sdkErr) {
		assert.Equal(t, 400, sdkErr.StatusCode)
		assert.Equal(t, 400, sdkErr.RawResponse.StatusCode)
	}

	assert.Nil(t, res)

	res, err = s.Errors.StatusGetError(context.Background(), 500)
	assert.Error(t, err)
	assert.Equal(t, "API error occurred: Status 500", err.Error())

	if assert.ErrorAs(t, err, &sdkErr) {
		assert.Equal(t, 500, sdkErr.StatusCode)
		assert.Equal(t, 500, sdkErr.RawResponse.StatusCode)
	}

	assert.Nil(t, res)
}

func TestStatusGetError_300_NonError(t *testing.T) {
	recordTest("errors-status-get-error300-non-error")

	s := sdk.New()

	res, err := s.Errors.StatusGetError(context.Background(), 300)
	assert.NoError(t, err)

	assert.Equal(t, 300, res.HTTPMeta.Response.StatusCode)
}

func TestStatusGetErrorXSpeakeasyErrors(t *testing.T) {
	recordTest("errors-status-get-error-x-speakeasy-errors")

	s := sdk.New()

	res, err := s.Errors.StatusGetXSpeakeasyErrors(context.Background(), 400)
	assert.Nil(t, res)
	assert.Error(t, err)
	assert.Equal(t, "API error occurred: Status 400\n{\"message\":\"an error occurred\",\"code\":\"400\",\"type\":\"internal\"}\n", err.Error())

	var sdkErr *sdkerrors.SDKError
	if assert.ErrorAs(t, err, &sdkErr) {
		assert.Equal(t, 400, sdkErr.StatusCode)
		assert.Equal(t, 400, sdkErr.RawResponse.StatusCode)
	}

	res, err = s.Errors.StatusGetXSpeakeasyErrors(context.Background(), 401)
	assert.Nil(t, res)
	assert.Error(t, err)
	assert.Equal(t, "API error occurred: Status 401\n{\"message\":\"an error occurred\",\"code\":\"401\",\"type\":\"internal\"}\n", err.Error())

	if assert.ErrorAs(t, err, &sdkErr) {
		assert.Equal(t, 401, sdkErr.StatusCode)
		assert.Equal(t, 401, sdkErr.RawResponse.StatusCode)
	}

	res, err = s.Errors.StatusGetXSpeakeasyErrors(context.Background(), 402)
	assert.Nil(t, res)
	assert.Error(t, err)
	assert.Equal(t, "API error occurred: Status 402\n{\"message\":\"an error occurred\",\"code\":\"402\",\"type\":\"internal\"}\n", err.Error())

	if assert.ErrorAs(t, err, &sdkErr) {
		assert.Equal(t, 402, sdkErr.StatusCode)
		assert.Equal(t, 402, sdkErr.RawResponse.StatusCode)
	}

	res, err = s.Errors.StatusGetXSpeakeasyErrors(context.Background(), 500)
	assert.Nil(t, res)
	assert.Error(t, err)
	assert.Equal(t, "an error occurred", err.Error())

	var e *sdkerrors.Error
	if assert.ErrorAs(t, err, &e) {
		assert.Equal(t, "500", *e.Code)
	}

	res, err = s.Errors.StatusGetXSpeakeasyErrors(context.Background(), 501)
	assert.Nil(t, res)
	assert.Error(t, err)
	assert.Equal(t, `{"code":"501","message":"an error occurred","type":"internal"}`, err.Error())

	var e501 *sdkerrors.StatusGetXSpeakeasyErrorsResponseBody
	if assert.ErrorAs(t, err, &e501) {
		assert.Equal(t, "501", *e501.Code)
		assert.Equal(t, 501, e501.HTTPMeta.Response.StatusCode)
	}
}

func TestConnectionErrorGet(t *testing.T) {
	recordTest("errors-connection-error")

	s := sdk.New()

	res, err := s.Errors.ConnectionErrorGet(context.Background())
	assert.Error(t, err)
	assert.ErrorContains(t, err, "error sending request: Get \"http://somebrokenapi.broken/anything/connectionError\": dial tcp: lookup somebrokenapi.broken")
	assert.Nil(t, res)
}

func TestUnionOfErrors(t *testing.T) {
	recordTest("errors-union-of-errors")

	s := sdk.New()

	req1 := operations.CreateErrorUnionPostRequestBodyErrorType1RequestBody(
		operations.ErrorType1RequestBody{Error: "Error1"},
	)
	res1, err1 := s.Errors.ErrorUnionPost(context.Background(), req1)
	assert.Nil(t, res1)
	assert.Error(t, err1)
	assert.Equal(t, "{\"error\":\"Error1\"}", err1.Error())

	req2 := operations.CreateErrorUnionPostRequestBodyErrorType2RequestBody(
		operations.ErrorType2RequestBody{
			ErrorType2Message: &operations.ErrorType2Message{Message: "Error2"},
		},
	)
	res2, err2 := s.Errors.ErrorUnionPost(context.Background(), req2)
	assert.Nil(t, res2)
	assert.Error(t, err2)
	assert.Equal(t, "{\"error\":{\"message\":\"Error2\"}}", err2.Error())
}

func TestUnionOfErrorsDiscriminated(t *testing.T) {
	recordTest("errors-union-of-errors-discriminated")

	s := sdk.New()

	req1 := operations.CreateErrorUnionDiscriminatedPostRequestBodyTaggedError1RequestBody(
		operations.TaggedError1RequestBody{Error: "Error1", Tag: "tag1"},
	)
	res1, err1 := s.Errors.ErrorUnionDiscriminatedPost(context.Background(), req1)
	assert.Nil(t, res1)
	assert.Error(t, err1)
	assert.Equal(t, "{\"error\":\"Error1\",\"tag\":\"tag1\"}", err1.Error())

	req2 := operations.CreateErrorUnionDiscriminatedPostRequestBodyTaggedError2RequestBody(
		operations.TaggedError2RequestBody{
			Tag:                 "tag2",
			TaggedError2Message: operations.TaggedError2Message{Message: "Error2"},
		},
	)
	res2, err2 := s.Errors.ErrorUnionDiscriminatedPost(context.Background(), req2)
	assert.Nil(t, res2)
	assert.Error(t, err2)
	assert.Equal(t, "{\"error\":{\"message\":\"Error2\"},\"tag\":\"tag2\"}", err2.Error())
}
