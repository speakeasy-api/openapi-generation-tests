// Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.

package tests

import (
	"context"
	"net/http"
	"testing"

	"openapi/pkg/models/operations"
	"openapi/pkg/models/shared"

	sdk "openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestEventStreamJSONData(t *testing.T) {
	recordTest("event-stream-json-data")

	s := sdk.New()

	res, err := s.Eventstreams.JSON(context.Background())
	require.NoError(t, err)
	require.NotNil(t, res)

	defer res.JSONEvent.Close()

	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)

	jsonEvents := []shared.JSONEvent{}
	for res.JSONEvent.Next() {
		jsonEvents = append(jsonEvents, *res.JSONEvent.Value())
	}
	assert.NoError(t, res.JSONEvent.Err())

	assert.Len(t, jsonEvents, 4)

	message := ""
	for _, event := range jsonEvents {
		message += event.Data.Content
	}

	assert.Equal(t, "Hello world!", message)
}

func TestEventStreamTextData(t *testing.T) {
	recordTest("event-stream-text-data")

	s := sdk.New()

	res, err := s.Eventstreams.Text(context.Background())
	require.NoError(t, err)
	require.NotNil(t, res)

	defer res.TextEvent.Close()

	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)

	textEvents := []shared.TextEvent{}
	for res.TextEvent.Next() {
		textEvents = append(textEvents, *res.TextEvent.Value())
	}
	assert.NoError(t, res.TextEvent.Err())

	assert.Len(t, textEvents, 4)

	message := ""
	for _, event := range textEvents {
		message += event.Data
	}

	assert.Equal(t, "Hello world!", message)
}

func TestEventStreamMultilineData(t *testing.T) {
	recordTest("event-stream-multiline-data")

	s := sdk.New()

	res, err := s.Eventstreams.Multiline(context.Background())
	require.NoError(t, err)
	require.NotNil(t, res)

	defer res.TextEvent.Close()

	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)

	textEvents := []shared.TextEvent{}
	for res.TextEvent.Next() {
		textEvents = append(textEvents, *res.TextEvent.Value())
	}
	assert.NoError(t, res.TextEvent.Err())

	assert.Len(t, textEvents, 1)

	assert.Equal(t, "YHOO\n+2\n10", textEvents[0].Data)
}

func TestEventStreamRichEvents(t *testing.T) {
	recordTest("event-stream-rich-events")

	s := sdk.New()

	res, err := s.Eventstreams.Rich(context.Background())
	require.NoError(t, err)
	require.NotNil(t, res)

	defer res.RichStream.Close()

	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)

	richEvents := []shared.RichStream{}
	for res.RichStream.Next() {
		richEvents = append(richEvents, *res.RichStream.Value())
	}
	assert.NoError(t, res.RichStream.Err())

	assert.Len(t, richEvents, 3)

	assert.Equal(t, []shared.RichStream{
		shared.CreateRichStreamCompletion(shared.RichCompletionEvent{
			ID: "job-1",
			Data: shared.RichCompletionEventData{
				Completion: "Hello",
				Model:      sdk.String("jeeves-1"),
			},
		}),
		shared.CreateRichStreamHeartbeat(shared.HeartbeatEvent{
			Data:  "ping",
			Retry: sdk.Int64(3000),
		}),
		shared.CreateRichStreamCompletion(shared.RichCompletionEvent{
			ID: "job-1",
			Data: shared.RichCompletionEventData{
				Completion: "world!",
				Model:      sdk.String("jeeves-1"),
				StopReason: shared.StopReasonStopSequence.ToPointer(),
			},
		}),
	}, richEvents)
}

func TestEventStreamWithSentinelEvents(t *testing.T) {
	recordTest("event-stream-chat-sentinel-event")

	s := sdk.New()

	res, err := s.Eventstreams.Chat(context.Background(), operations.ChatRequestBody{
		Prompt: "Print test content",
	})
	require.NoError(t, err)
	require.NotNil(t, res)

	defer res.ChatCompletionStream.Close()

	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)

	chatEvents := []shared.ChatCompletionStream{}
	for res.ChatCompletionStream.Next() {
		chatEvents = append(chatEvents, *res.ChatCompletionStream.Value())
	}
	assert.NoError(t, res.ChatCompletionStream.Err())

	assert.Len(t, chatEvents, 5)

	assert.Equal(t, []shared.ChatCompletionStream{
		shared.CreateChatCompletionStreamChatCompletionEvent(shared.ChatCompletionEvent{
			Data: shared.Data{
				Content: "Hello",
			},
		}),
		shared.CreateChatCompletionStreamChatCompletionEvent(shared.ChatCompletionEvent{
			Data: shared.Data{
				Content: " ",
			},
		}),
		shared.CreateChatCompletionStreamChatCompletionEvent(shared.ChatCompletionEvent{
			Data: shared.Data{
				Content: "world",
			},
		}),
		shared.CreateChatCompletionStreamChatCompletionEvent(shared.ChatCompletionEvent{
			Data: shared.Data{
				Content: "!",
			},
		}),
		shared.CreateChatCompletionStreamSentinelEvent(shared.SentinelEvent{}),
	}, chatEvents)
}

func TestEventStreamSkipSentinel(t *testing.T) {
	recordTest("event-stream-chat-skip-sentinel")

	s := sdk.New()

	res, err := s.Eventstreams.ChatSkipSentinel(context.Background(), operations.ChatSkipSentinelRequestBody{
		Prompt: "Print test content",
	})
	require.NoError(t, err)
	require.NotNil(t, res)

	defer res.ChatCompletionEvent.Close()

	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)

	chatEvents := []shared.ChatCompletionEvent{}
	for res.ChatCompletionEvent.Next() {
		chatEvents = append(chatEvents, *res.ChatCompletionEvent.Value())
	}
	assert.NoError(t, res.ChatCompletionEvent.Err())

	assert.Len(t, chatEvents, 4)

	assert.Equal(t, []shared.ChatCompletionEvent{
		{Data: shared.Data{Content: "Hello"}},
		{Data: shared.Data{Content: " "}},
		{Data: shared.Data{Content: "world"}},
		{Data: shared.Data{Content: "!"}},
	}, chatEvents)
}

func TestEventStreamWithDifferentDataSchemas(t *testing.T) {
	recordTest("event-stream-different-data-schemas")

	s := sdk.New()

	res, err := s.Eventstreams.DifferentDataSchemas(context.Background())
	require.NoError(t, err)
	require.NotNil(t, res)

	defer res.DifferentDataSchemas.Close()

	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)

	events := []shared.DifferentDataSchemas{}
	for res.DifferentDataSchemas.Next() {
		events = append(events, *res.DifferentDataSchemas.Value())
	}
	assert.NoError(t, res.DifferentDataSchemas.Err())

	assert.Len(t, events, 3)

	assert.Equal(t, []shared.DifferentDataSchemas{
		shared.DifferentDataSchemas{
			ID: "event-1",
			Data: shared.CreateDifferentDataSchemasDataMessageEvent(shared.MessageEvent{
				Content: "Here is your url",
			}),
			Event: shared.EventMessage,
		},
		shared.DifferentDataSchemas{
			ID: "event-2",
			Data: shared.CreateDifferentDataSchemasDataURLEvent(shared.URLEvent{
				URL: "https://example.com",
			}),
			Event: shared.EventURL,
		},
		shared.DifferentDataSchemas{
			ID: "event-3",
			Data: shared.CreateDifferentDataSchemasDataMessageEvent(shared.MessageEvent{
				Content: "Have a great day!",
			}),
			Event: shared.EventMessage,
		},
	}, events)
}
