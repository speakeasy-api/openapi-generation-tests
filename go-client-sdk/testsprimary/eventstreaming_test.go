// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package tests

import (
	"context"
	"net/http"
	"testing"

	"openapi/pkg/models/operations"
	"openapi/pkg/models/shared"

	sdk "openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestEventStreamJSONData(t *testing.T) {
	recordTest("event-stream-json-data")

	s := sdk.New()

	res, err := s.Eventstreams.JSON(context.Background())
	require.NoError(t, err)
	require.NotNil(t, res)

	defer res.JSONEvent.Close()

	assert.Equal(t, http.StatusOK, res.StatusCode)

	jsonEvents := []shared.JSONEvent{}
	for res.JSONEvent.Next() {
		jsonEvents = append(jsonEvents, *res.JSONEvent.Value())
	}
	assert.NoError(t, res.JSONEvent.Err())

	assert.Len(t, jsonEvents, 4)

	message := ""
	for _, event := range jsonEvents {
		message += event.Data.Content
	}

	assert.Equal(t, "Hello world!", message)
}

func TestEventStreamTextData(t *testing.T) {
	recordTest("event-stream-text-data")

	s := sdk.New()

	res, err := s.Eventstreams.Text(context.Background())
	require.NoError(t, err)
	require.NotNil(t, res)

	defer res.TextEvent.Close()

	assert.Equal(t, http.StatusOK, res.StatusCode)

	jsonEvents := []shared.TextEvent{}
	for res.TextEvent.Next() {
		jsonEvents = append(jsonEvents, *res.TextEvent.Value())
	}
	assert.NoError(t, res.TextEvent.Err())

	assert.Len(t, jsonEvents, 4)

	message := ""
	for _, event := range jsonEvents {
		message += event.Data
	}

	assert.Equal(t, "Hello world!", message)
}

func TestEventStreamMultiloneData(t *testing.T) {
	recordTest("event-stream-multiline-data")

	s := sdk.New()

	res, err := s.Eventstreams.Multiline(context.Background())
	require.NoError(t, err)
	require.NotNil(t, res)

	defer res.TextEvent.Close()

	assert.Equal(t, http.StatusOK, res.StatusCode)

	jsonEvents := []shared.TextEvent{}
	for res.TextEvent.Next() {
		jsonEvents = append(jsonEvents, *res.TextEvent.Value())
	}
	assert.NoError(t, res.TextEvent.Err())

	assert.Len(t, jsonEvents, 1)

	assert.Equal(t, "YHOO\n+2\n10", jsonEvents[0].Data)
}

func TestEventStreamRichEvents(t *testing.T) {
	recordTest("event-stream-rich-events")

	s := sdk.New()

	res, err := s.Eventstreams.Rich(context.Background())
	require.NoError(t, err)
	require.NotNil(t, res)

	defer res.RichStream.Close()

	assert.Equal(t, http.StatusOK, res.StatusCode)

	jsonEvents := []shared.RichStream{}
	for res.RichStream.Next() {
		jsonEvents = append(jsonEvents, *res.RichStream.Value())
	}
	assert.NoError(t, res.RichStream.Err())

	assert.Len(t, jsonEvents, 3)

	assert.Equal(t, []shared.RichStream{
		shared.CreateRichStreamCompletion(shared.RichCompletionEvent{
			ID: "job-1",
			Data: shared.RichCompletionEventData{
				Completion: "Hello",
				Model:      sdk.String("jeeves-1"),
			},
		}),
		shared.CreateRichStreamHeartbeat(shared.HeartbeatEvent{
			Data:  "ping",
			Retry: sdk.Int64(3000),
		}),
		shared.CreateRichStreamCompletion(shared.RichCompletionEvent{
			ID: "job-1",
			Data: shared.RichCompletionEventData{
				Completion: "world!",
				Model:      sdk.String("jeeves-1"),
				StopReason: shared.StopReasonStopSequence.ToPointer(),
			},
		}),
	}, jsonEvents)
}

func TestEventStreamWithSentinelEvents(t *testing.T) {
	recordTest("event-stream-chat-sentinel-event")

	s := sdk.New()

	res, err := s.Eventstreams.Chat(context.Background(), operations.ChatRequestBody{
		Prompt: "Print test content",
	})
	require.NoError(t, err)
	require.NotNil(t, res)

	defer res.ChatCompletionStream.Close()

	assert.Equal(t, http.StatusOK, res.StatusCode)

	jsonEvents := []shared.ChatCompletionStream{}
	for res.ChatCompletionStream.Next() {
		jsonEvents = append(jsonEvents, *res.ChatCompletionStream.Value())
	}
	assert.NoError(t, res.ChatCompletionStream.Err())

	assert.Len(t, jsonEvents, 5)

	assert.Equal(t, []shared.ChatCompletionStream{
		shared.CreateChatCompletionStreamChatCompletionEvent(shared.ChatCompletionEvent{
			Data: shared.Data{
				Content: "Hello",
			},
		}),
		shared.CreateChatCompletionStreamChatCompletionEvent(shared.ChatCompletionEvent{
			Data: shared.Data{
				Content: " ",
			},
		}),
		shared.CreateChatCompletionStreamChatCompletionEvent(shared.ChatCompletionEvent{
			Data: shared.Data{
				Content: "world",
			},
		}),
		shared.CreateChatCompletionStreamChatCompletionEvent(shared.ChatCompletionEvent{
			Data: shared.Data{
				Content: "!",
			},
		}),
		shared.CreateChatCompletionStreamSentinelEvent(shared.SentinelEvent{}),
	}, jsonEvents)
}
