// Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.

package tests

import (
	"context"
	"net/http"
	"os"
	"testing"

	"openapi/v2/pkg/models/operations"

	sdk "openapi/v2"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestGlobalsQueryParameterGet_UsesGlobal(t *testing.T) {
	recordTest("globals-query-parameter-get-uses-global")

	s := sdk.New(sdk.WithGlobalQueryParam("test"))

	res, err := s.Globals.GlobalsQueryParameterGet(context.Background(), nil)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, "test", res.Res.Args.GlobalQueryParam)
}

func TestGlobalsQueryParameterGet_UsesLocal(t *testing.T) {
	recordTest("globals-query-parameter-get-uses-local")

	s := sdk.New(sdk.WithGlobalQueryParam("test"))

	res, err := s.Globals.GlobalsQueryParameterGet(context.Background(), sdk.String("local"))
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, "local", res.Res.Args.GlobalQueryParam)
}

func TestGlobalPathParameterGet_UsesGlobal(t *testing.T) {
	recordTest("globals-path-parameter-get-uses-global")

	s := sdk.New(sdk.WithGlobalPathParam(1))

	res, err := s.Globals.GlobalPathParameterGet(context.Background(), nil)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, "http://localhost:35123/anything/globals/pathParameter/1", res.Res.URL)
}

func TestGlobalPathParameterGet_UsesLocal(t *testing.T) {
	recordTest("globals-path-parameter-get-uses-local")

	s := sdk.New(sdk.WithGlobalPathParam(1))

	res, err := s.Globals.GlobalPathParameterGet(context.Background(), sdk.Int64(2))
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, "http://localhost:35123/anything/globals/pathParameter/2", res.Res.URL)
}

func TestGlobalHeaderGet_UsesGlobal(t *testing.T) {
	recordTest("globals-header-get-uses-global")
	os.Setenv("SPEAKEASY_GLOBAL_HEADER_PARAM", "true")
	s := sdk.New()

	res, err := s.Globals.GlobalsHeaderGet(context.Background(), nil)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, "true", res.Res.Headers["Globalheaderparam"])
	os.Unsetenv("SPEAKEASY_GLOBAL_HEADER_PARAM")
}

func TestGlobalHeaderGet_UsesLocal(t *testing.T) {
	recordTest("globals-header-get-uses-local")

	s := sdk.New(sdk.WithGlobalHeaderParam(true))

	res, err := s.Globals.GlobalsHeaderGet(context.Background(), sdk.Bool(false))
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, "false", res.Res.Headers["Globalheaderparam"])
}

func TestGlobalHeaderKeepsCustomClientHeaders(t *testing.T) {
	recordTest("globals-header-keeps-custom-client-headers")

	httpClient := NewCustomHeaderClient()

	s := sdk.New(sdk.WithGlobalHeaderParam(true), sdk.WithClient(httpClient))

	res, err := s.Globals.GlobalsHeaderGet(context.Background(), nil)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, "true", res.Res.Headers["Globalheaderparam"])
	assert.Equal(t, "someValue", res.Res.Headers["X-Custom-Header"])
}

func TestGlobalsHiddenPost(t *testing.T) {
	recordTest("globals-hidden-post")

	s := sdk.New(sdk.WithGlobalHiddenQueryParam("hello"), sdk.WithGlobalHiddenHeaderParam("world"), sdk.WithGlobalHiddenPathParam("test"))

	res, err := s.Globals.GlobalsHiddenPost(context.Background(), operations.GlobalsHiddenPostRequestBody{
		Test:  "friend",
		Other: 37,
	})
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, "hello", res.Res.Args.GlobalHiddenQueryParam)
	assert.Equal(t, "friend", res.Res.JSON.Test)
	assert.EqualValues(t, 37, res.Res.JSON.Other)
	assert.Equal(t, "world", res.Res.Headers["Globalhiddenheaderparam"])
	assert.Equal(t, "http://localhost:35123/anything/globals/hidden/test?globalHiddenQueryParam=hello", res.Res.URL)
}
