// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package tests

import (
	"encoding/json"
	"math/big"
	"testing"
	"time"

	"openapi/pkg/models/shared"
	"openapi/pkg/types"

	"github.com/AlekSi/pointer"
	"github.com/stretchr/testify/require"
)

func createSimpleObject() shared.SimpleObject {
	return shared.SimpleObject{
		Str:        "test",
		Bool:       true,
		Int:        1,
		Int32:      1,
		IntEnum:    shared.IntEnumSecond,
		Int32Enum:  shared.Int32EnumFiftyFive,
		Num:        1.1,
		Float32:    1.1,
		Enum:       shared.EnumOne,
		Any:        "any",
		Date:       types.Date{time.Date(2020, 1, 1, 0, 0, 0, 0, time.UTC)},
		DateTime:   time.Date(2020, 1, 1, 0, 0, 0, 1, time.UTC),
		BoolOpt:    pointer.ToBool(true),
		StrOpt:     pointer.ToString("testOptional"),
		IntOptNull: nil,
		NumOptNull: nil,
		Bigint:     big.NewInt(8821239038968084),
		BigintStr:  types.MustNewBigIntFromString("9223372036854775808"),
	}
}

func createSimpleObjectCamelCase() shared.SimpleObjectCamelCase {
	return shared.SimpleObjectCamelCase{
		StrVal:        "test",
		BoolVal:       true,
		IntVal:        1,
		Int32Val:      1,
		IntEnumVal:    shared.IntEnumValSecond,
		Int32EnumVal:  shared.Int32EnumValFiftyFive,
		NumVal:        1.1,
		Float32Val:    1.1,
		EnumVal:       shared.EnumOne,
		AnyVal:        "any",
		DateVal:       types.Date{time.Date(2020, 1, 1, 0, 0, 0, 0, time.UTC)},
		DateTimeVal:   time.Date(2020, 1, 1, 0, 0, 0, 1, time.UTC),
		BoolOptVal:    pointer.ToBool(true),
		StrOptVal:     pointer.ToString("testOptional"),
		IntOptNullVal: nil,
		NumOptNullVal: nil,
		BigintVal:     big.NewInt(8821239038968084),
		BigintStrVal:  types.MustNewBigIntFromString("9223372036854775808"),
	}
}

func createDeepObject() shared.DeepObject {
	return shared.DeepObject{
		Any: shared.CreateAnySimpleObject(createSimpleObject()),
		Arr: []shared.SimpleObject{
			createSimpleObject(), createSimpleObject(),
		},
		Bool: true,
		Int:  1,
		Map: map[string]shared.SimpleObject{
			"key": createSimpleObject(),
		},
		Num: 1.1,
		Obj: createSimpleObject(),
		Str: "test",
	}
}

func createDeepObjectCamelCase() shared.DeepObjectCamelCase {
	return shared.DeepObjectCamelCase{
		AnyVal: shared.CreateAnyValSimpleObjectCamelCase(createSimpleObjectCamelCase()),
		ArrVal: []shared.SimpleObjectCamelCase{
			createSimpleObjectCamelCase(), createSimpleObjectCamelCase(),
		},
		BoolVal: true,
		IntVal:  1,
		MapVal: map[string]shared.SimpleObjectCamelCase{
			"key": createSimpleObjectCamelCase(),
		},
		NumVal: 1.1,
		ObjVal: createSimpleObjectCamelCase(),
		StrVal: "test",
	}
}

func marshalJSON(t *testing.T, v interface{}) string {
	d, err := json.Marshal(v)
	require.NoError(t, err)
	return string(d)
}
