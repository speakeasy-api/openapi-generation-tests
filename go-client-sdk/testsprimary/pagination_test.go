// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	"net/http"
	"testing"

	"openapi/pkg/models/operations"
	"openapi/pkg/models/shared"

	sdk "openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestPaginationLimitOffsetPageParams(t *testing.T) {
	recordTest("pagination-limit-offset-page-params")

	s := sdk.New()

	serverLimit := 20
	var page int64 = 1
	res, err := s.Pagination.PaginationLimitOffsetPageParams(context.Background(), page)

	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, serverLimit, len(res.Res.ResultArray))

	nextRes, err := res.Next()
	require.NoError(t, err)
	require.NotNil(t, nextRes)
	assert.Equal(t, 0, len(nextRes.Res.ResultArray))

	nullRes, err := nextRes.Next()
	require.NoError(t, err)
	require.Nil(t, nullRes)
}

func TestPaginationLimitOffsetPageBody(t *testing.T) {
	recordTest("pagination-limit-offset-page-body")

	s := sdk.New()

	var page int64 = 1
	var limit int64 = 15
	request := &shared.LimitOffsetConfig{
		Page:  &page,
		Limit: &limit,
	}
	res, err := s.Pagination.PaginationLimitOffsetPageBody(context.Background(), request)

	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, int(limit), len(res.Res.ResultArray))

	nextRes, err := res.Next()
	require.NoError(t, err)
	require.NotNil(t, nextRes)
	assert.True(t, int(limit) > len(nextRes.Res.ResultArray))

	nilRes, err := nextRes.Next()
	require.NoError(t, err)
	require.Nil(t, nilRes)
}

func TestPaginationLimitOffsetDeepOutputsPageBody(t *testing.T) {
	recordTest("pagination-limit-offset-deep-outputs-page-body")

	s := sdk.New()

	var page int64 = 1
	var limit int64 = 15
	request := &shared.LimitOffsetConfig{
		Page:  &page,
		Limit: &limit,
	}
	res, err := s.Pagination.PaginationLimitOffsetDeepOutputsPageBody(context.Background(), request)

	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, int(limit), len(res.Res.ResultArray))

	nextRes, err := res.Next()
	require.NoError(t, err)
	require.NotNil(t, nextRes)
	assert.True(t, int(limit) > len(nextRes.Res.ResultArray))

	nilRes, err := nextRes.Next()
	require.NoError(t, err)
	require.Nil(t, nilRes)
}

func TestPaginationLimitOffsetOffsetParams(t *testing.T) {
	recordTest("pagination-limit-offset-offset-params")

	s := sdk.New()

	var limit int64 = 15
	var offset int64 = 0
	res, err := s.Pagination.PaginationLimitOffsetOffsetParams(context.Background(), &limit, &offset)

	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, int(limit), len(res.Res.ResultArray))

	nextRes, err := res.Next()
	require.NoError(t, err)
	require.NotNil(t, nextRes)
	assert.Equal(t, int(20-limit), len(nextRes.Res.ResultArray))

	nullRes, err := nextRes.Next()
	require.NoError(t, err)
	require.Nil(t, nullRes)
}

func TestPaginationLimitOffsetOffsetBody(t *testing.T) {
	recordTest("pagination-limit-offset-offset-body")

	s := sdk.New()

	var offset int64 = 0
	var limit int64 = 15
	request := &shared.LimitOffsetConfig{
		Offset: &offset,
		Limit:  &limit,
	}
	res, err := s.Pagination.PaginationLimitOffsetOffsetBody(context.Background(), request)

	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, int(limit), len(res.Res.ResultArray))

	nextRes, err := res.Next()
	require.NoError(t, err)
	require.NotNil(t, nextRes)
	assert.True(t, int(limit) > len(nextRes.Res.ResultArray))

	nullRes, err := nextRes.Next()
	require.NoError(t, err)
	require.Nil(t, nullRes)
}

func TestPaginationURLParams(t *testing.T) {
	recordTest("pagination-url")

	s := sdk.New()

	res, err := s.Pagination.PaginationURLParams(context.Background(), 3, nil)

	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, 9, len(res.Res.ResultArray))

	nextRes, err := res.Next()
	require.NoError(t, err)
	require.NotNil(t, nextRes)
	assert.Equal(t, http.StatusOK, nextRes.HTTPMeta.Response.StatusCode)
	assert.Equal(t, 6, len(nextRes.Res.ResultArray))

	penultimateRes, err := nextRes.Next()
	require.NoError(t, err)
	require.NotNil(t, penultimateRes)
	assert.Equal(t, http.StatusOK, penultimateRes.HTTPMeta.Response.StatusCode)
	assert.Equal(t, 3, len(penultimateRes.Res.ResultArray))

	nullRes, err := penultimateRes.Next()
	require.NoError(t, err)
	require.Nil(t, nullRes)

	isReferencePath2 := "true"
	res2, err := s.Pagination.PaginationURLParams(context.Background(), 3, &isReferencePath2)

	require.NoError(t, err)
	require.NotNil(t, res2)
	assert.Equal(t, http.StatusOK, res2.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res2.Res)
	assert.Equal(t, 9, len(res2.Res.ResultArray))

	nextRes2, err := res2.Next()
	require.NoError(t, err)
	require.NotNil(t, nextRes2)
	assert.Equal(t, http.StatusOK, nextRes2.HTTPMeta.Response.StatusCode)
	assert.Equal(t, 6, len(nextRes2.Res.ResultArray))

	penultimateRes2, err := nextRes2.Next()
	require.NoError(t, err)
	require.NotNil(t, penultimateRes2)
	assert.Equal(t, http.StatusOK, penultimateRes2.HTTPMeta.Response.StatusCode)
	assert.Equal(t, 3, len(penultimateRes2.Res.ResultArray))

	nullRes2, err := penultimateRes2.Next()
	require.NoError(t, err)
	require.Nil(t, nullRes2)
}

func TestPaginationCursorParams(t *testing.T) {
	recordTest("pagination-cursor-params")

	s := sdk.New()

	var cursor int64 = -1
	res, err := s.Pagination.PaginationCursorParams(context.Background(), cursor)

	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, int(15), len(res.Res.ResultArray))

	nextRes, err := res.Next()
	require.NoError(t, err)
	require.NotNil(t, nextRes)
	assert.Equal(t, 5, len(nextRes.Res.ResultArray))

	penultimateRes, err := nextRes.Next()
	require.NoError(t, err)
	require.NotNil(t, penultimateRes)
	assert.Equal(t, 0, len(penultimateRes.Res.ResultArray))

	nullRes, err := penultimateRes.Next()
	require.NoError(t, err)
	require.Nil(t, nullRes)
}

func TestPaginationCursorBody(t *testing.T) {
	recordTest("pagination-cursor-body")

	s := sdk.New()

	var cursor int64 = -1
	request := operations.PaginationCursorBodyRequestBody{
		Cursor: cursor,
	}
	res, err := s.Pagination.PaginationCursorBody(context.Background(), request)

	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, 15, len(res.Res.ResultArray))

	nextRes, err := res.Next()
	require.NoError(t, err)
	require.NotNil(t, nextRes)
	assert.Equal(t, 5, len(nextRes.Res.ResultArray))

	penultimateRes, err := nextRes.Next()
	require.NoError(t, err)
	require.NotNil(t, penultimateRes)
	assert.Equal(t, 0, len(penultimateRes.Res.ResultArray))

	nullRes, err := penultimateRes.Next()
	require.NoError(t, err)
	require.Nil(t, nullRes)
}

func TestPaginationCursorNonNumeric(t *testing.T) {
	recordTest("pagination-cursor-non-numeric")

	s := sdk.New()

	res, err := s.Pagination.PaginationCursorNonNumeric(context.Background(), nil)

	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, 15, len(res.Res.ResultArray))

	nextRes, err := res.Next()
	require.NoError(t, err)
	require.NotNil(t, nextRes)
	assert.Equal(t, 5, len(nextRes.Res.ResultArray))

	penultimateRes, err := nextRes.Next()
	require.NoError(t, err)
	require.NotNil(t, penultimateRes)
	assert.Equal(t, 0, len(penultimateRes.Res.ResultArray))

	nullRes, err := penultimateRes.Next()
	require.NoError(t, err)
	require.Nil(t, nullRes)
}

func TestPaginationWithRetries(t *testing.T) {
	recordTest("pagination-with-retries")

	client := newPaginationTestClient()

	s := sdk.New(sdk.WithClient(client))

	faultSettings := sdk.String(`{"error_code": 503, "error_count": 3}`)

	res, err := s.Pagination.PaginationWithRetries(context.Background(), nil, faultSettings, nil)
	require.NoError(t, err)
	require.NotNil(t, res)
	require.NotNil(t, res.Res, "(1) expected response to have non-nil body")
	count := len(res.Res.ResultArray)

	res, err = res.Next()
	require.NoError(t, err)
	require.NotNil(t, res)
	require.NotNil(t, res.Res, "(2) expected response to have non-nil body")
	count += len(res.Res.ResultArray)

	res, err = res.Next()
	require.NoError(t, err)
	require.NotNil(t, res)
	require.NotNil(t, res.Res, "(3) expected response to have non-nil body")
	count += len(res.Res.ResultArray)

	res, err = res.Next()
	require.NoError(t, err)
	require.Nil(t, res)

	failattempt := paginationRequestLog{
		status: http.StatusServiceUnavailable,
		method: http.MethodGet,
		path:   "/pagination/cursor_non_numeric",
	}
	successattempt := paginationRequestLog{
		status: http.StatusOK,
		method: http.MethodGet,
		path:   "/pagination/cursor_non_numeric",
	}

	require.Equal(t, 20, count, "expected 20 results")
	require.Equal(t, 6, len(client.logs), "expected 6 http calls")
	require.Equal(t, failattempt, client.logs[0], "expected first call to fail")
	require.Equal(t, failattempt, client.logs[1], "expected second call to fail")
	require.Equal(t, failattempt, client.logs[2], "expected third call to fail")
	require.Equal(t, successattempt, client.logs[3], "expected fourth call to succeed")
	require.Equal(t, successattempt, client.logs[4], "expected fifth call to succeed")
	require.Equal(t, successattempt, client.logs[5], "expected sixth call to succeed")
}

type paginationTestClient struct {
	http.Client
	reqID string
	logs  []paginationRequestLog
}

func newPaginationTestClient() *paginationTestClient {
	return &paginationTestClient{
		Client: http.Client{},
		reqID:  pseudo_uuid(),
		logs:   []paginationRequestLog{},
	}
}

func (c *paginationTestClient) Do(req *http.Request) (*http.Response, error) {
	req.Header.Set("Request-ID", c.reqID)

	res, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	c.logs = append(c.logs, paginationRequestLog{
		status: res.StatusCode,
		method: req.Method,
		path:   req.URL.Path,
	})

	return res, nil
}

type paginationRequestLog struct {
	status int
	method string
	path   string
}
