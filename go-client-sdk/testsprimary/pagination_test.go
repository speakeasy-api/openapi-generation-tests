// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package tests

import (
	"context"
	"net/http"
	"testing"

	"openapi/pkg/models/operations"
	"openapi/pkg/models/shared"

	sdk "openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestPaginationLimitOffsetPageParams(t *testing.T) {
	recordTest("pagination-limitOffset-page-params")

	s := sdk.New()

	serverLimit := 20
	var page int64 = 1
	res, err := s.Pagination.PaginationLimitOffsetPageParams(context.Background(), page)

	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, serverLimit, len(res.Res.ResultArray))

	nextRes, err := res.Next()
	require.NoError(t, err)
	require.NotNil(t, nextRes)
	assert.Equal(t, 0, len(nextRes.Res.ResultArray))

	nullRes, err := nextRes.Next()
	require.NoError(t, err)
	require.Nil(t, nullRes)
}

func TestPaginationLimitOffsetPageBody(t *testing.T) {
	recordTest("pagination-limitOffset-page-body")

	s := sdk.New()

	var page int64 = 1
	var limit int64 = 15
	request := shared.LimitOffsetConfig{
		Page:  &page,
		Limit: &limit,
	}
	res, err := s.Pagination.PaginationLimitOffsetPageBody(context.Background(), request)

	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, int(limit), len(res.Res.ResultArray))

	nextRes, err := res.Next()
	require.NoError(t, err)
	require.NotNil(t, nextRes)
	assert.True(t, int(limit) > len(nextRes.Res.ResultArray))

	nilRes, err := nextRes.Next()
	require.NoError(t, err)
	require.Nil(t, nilRes)
}

func TestPaginationLimitOffsetOffsetParams(t *testing.T) {
	recordTest("pagination-limitOffset-offset-params")

	s := sdk.New()

	var limit int64 = 15
	var offset int64 = 0
	res, err := s.Pagination.PaginationLimitOffsetOffsetParams(context.Background(), &limit, &offset)

	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, int(limit), len(res.Res.ResultArray))

	nextRes, err := res.Next()
	require.NoError(t, err)
	require.NotNil(t, nextRes)
	assert.Equal(t, int(20-limit), len(nextRes.Res.ResultArray))

	nullRes, err := nextRes.Next()
	require.NoError(t, err)
	require.Nil(t, nullRes)
}

func TestPaginationLimitOffsetOffsetBody(t *testing.T) {
	recordTest("pagination-limitOffset-offset-body")

	s := sdk.New()

	var offset int64 = 0
	var limit int64 = 15
	request := shared.LimitOffsetConfig{
		Offset: &offset,
		Limit:  &limit,
	}
	res, err := s.Pagination.PaginationLimitOffsetOffsetBody(context.Background(), request)

	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, int(limit), len(res.Res.ResultArray))

	nextRes, err := res.Next()
	require.NoError(t, err)
	require.NotNil(t, nextRes)
	assert.True(t, int(limit) > len(nextRes.Res.ResultArray))

	nullRes, err := nextRes.Next()
	require.NoError(t, err)
	require.Nil(t, nullRes)
}

func TestPaginationCursorParams(t *testing.T) {
	recordTest("pagination-cursor-params")

	s := sdk.New()

	var cursor int64 = -1
	res, err := s.Pagination.PaginationCursorParams(context.Background(), cursor)

	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, int(15), len(res.Res.ResultArray))

	nextRes, err := res.Next()
	require.NoError(t, err)
	require.NotNil(t, nextRes)
	assert.Equal(t, 5, len(nextRes.Res.ResultArray))

	penultimateRes, err := nextRes.Next()
	require.NoError(t, err)
	require.NotNil(t, penultimateRes)
	assert.Equal(t, 0, len(penultimateRes.Res.ResultArray))

	nullRes, err := penultimateRes.Next()
	require.NoError(t, err)
	require.Nil(t, nullRes)
}

func TestPaginationCursorBody(t *testing.T) {
	recordTest("pagination-cursor-body")

	s := sdk.New()

	var cursor int64 = -1
	request := operations.PaginationCursorBodyRequestBody{
		Cursor: cursor,
	}
	res, err := s.Pagination.PaginationCursorBody(context.Background(), request)

	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, 15, len(res.Res.ResultArray))

	nextRes, err := res.Next()
	require.NoError(t, err)
	require.NotNil(t, nextRes)
	assert.Equal(t, 5, len(nextRes.Res.ResultArray))

	penultimateRes, err := nextRes.Next()
	require.NoError(t, err)
	require.NotNil(t, penultimateRes)
	assert.Equal(t, 0, len(penultimateRes.Res.ResultArray))

	nullRes, err := penultimateRes.Next()
	require.NoError(t, err)
	require.Nil(t, nullRes)
}
