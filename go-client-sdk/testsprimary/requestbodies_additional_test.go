// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"bytes"
	"context"
	"net/http"
	"os"
	"testing"

	"openapi/pkg/models/operations"
	"openapi/pkg/models/shared"
	"openapi/pkg/utils"

	sdk "openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestRequestBodyPutMultipartFile(t *testing.T) {
	recordTest("request-bodies-put-multipart-file")

	s := sdk.New()

	data, err := os.ReadFile("testdata/testUpload.json")
	require.NoError(t, err)

	res, err := s.RequestBodies.RequestBodyPutMultipartFile(context.Background(),
		&operations.RequestBodyPutMultipartFileRequestBody{
			File: &operations.File{
				Content:  data,
				FileName: "testUpload.json",
			},
		},
	)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, map[string]string{
		"file": string(data),
	}, res.Res.Files)
}

func TestRequestBodyPutMultipartFileRef(t *testing.T) {
	recordTest("request-bodies-put-multipart-file-ref")

	s := sdk.New()

	data, err := os.ReadFile("testdata/testUpload.json")
	require.NoError(t, err)

	res, err := s.RequestBodies.RequestBodyPutMultipartFileRef(context.Background(),
		&operations.RequestBodyPutMultipartFileRefRequestBody{
			File: &shared.BinaryString{
				Content:  data,
				FileName: "testUpload.json",
			},
		},
	)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, map[string]string{
		"file": string(data),
	}, res.Res.Files)
}

func TestRequestBodyPutBytes(t *testing.T) {
	recordTest("request-bodies-put-bytes")

	s := sdk.New()

	data, err := os.ReadFile("testdata/testUpload.json")
	require.NoError(t, err)

	res, err := s.RequestBodies.RequestBodyPutBytes(context.Background(), data)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, string(data), res.Res.Data)
}

func TestRequestBodyPostNullableRequiredProperty(t *testing.T) {
	tests := []struct {
		name     string
		arg      operations.NullableRequiredPropertyPostRequestBody
		wantJson string
	}{
		{
			name:     "Empty initializer",
			arg:      operations.NullableRequiredPropertyPostRequestBody{},
			wantJson: "{\"NullableRequiredArray\":null,\"NullableRequiredBigIntStr\":null,\"NullableRequiredDateTime\":null,\"NullableRequiredDecimalStr\":null,\"NullableRequiredEnum\":null,\"NullableRequiredInt\":null}",
		},
		{
			name: "Optional field set to non-null value",
			arg: operations.NullableRequiredPropertyPostRequestBody{
				NullableOptionalInt: sdk.Int64(0),
			},
			wantJson: "{\"NullableOptionalInt\":0,\"NullableRequiredArray\":null,\"NullableRequiredBigIntStr\":null,\"NullableRequiredDateTime\":null,\"NullableRequiredDecimalStr\":null,\"NullableRequiredEnum\":null,\"NullableRequiredInt\":null}",
		},
	}
	s := sdk.New()
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			reader, _, err := utils.SerializeRequestBody(context.Background(), tt.arg, false, false, "Request", "json", "")
			require.NoError(t, err)
			serializedBody := new(bytes.Buffer)
			serializedBody.ReadFrom(reader)
			assert.Equal(t, tt.wantJson, serializedBody.String())
			res, err := s.RequestBodies.NullableRequiredPropertyPost(context.Background(), tt.arg)
			require.NoError(t, err)
			assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
		})
	}
}

func TestRequestBodyNoBodyNoContentType(t *testing.T) {
	recordTest("request-bodies-no-body-no-content-type")

	s := sdk.New()

	res, err := s.Methods.MethodGet(context.Background(), operations.WithServerURL("http://localhost:35456"))

	require.NoError(t, err)
	require.NotNil(t, res)

	require.Nil(t, res.HTTPMeta.Request.Body)
	require.Equal(t, res.HTTPMeta.Request.Header.Get("content-type"), "")

	require.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	require.NotNil(t, res.Object)
	require.Equal(t, res.Object.Status, sdk.Pointer("OK"))

}

func TestRequestBodiesWildcardNoContentType(t *testing.T) {
	recordTest("request-bodies-wildcard-no-content-type")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostWildcard(context.Background(), nil)

	require.NoError(t, err)
	require.NotNil(t, res)

	require.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)

	require.Len(t, res.HTTPMeta.Request.Header.Values("Content-Type"), 0)
}
