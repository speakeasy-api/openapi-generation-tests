// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package tests

import (
	"bytes"
	"context"
	"net/http"
	"os"
	"testing"

	"openapi/pkg/models/operations"
	"openapi/pkg/utils"

	sdk "openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestRequestBodyPostMultipleContentTypesSplitJSON(t *testing.T) {
	recordTest("request-bodies-post-multiple-content-types-split-json")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostMultipleContentTypesSplitJSON(context.Background(),
		operations.RequestBodyPostMultipleContentTypesSplitJSONRequestBody{
			Bool: true,
			Num:  1.1,
			Str:  "test",
		})
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, map[string]interface{}{
		"bool": true,
		"num":  1.1,
		"str":  "test",
	}, res.Res.JSON)
}

func TestRequestBodyPostMultipleContentTypesSplitMultipart(t *testing.T) {
	recordTest("request-bodies-post-multiple-content-types-split-multipart")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostMultipleContentTypesSplitMultipart(context.Background(),
		operations.RequestBodyPostMultipleContentTypesSplitMultipartRequestBody{
			Bool2: true,
			Num2:  1.1,
			Str2:  "test",
		})
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, map[string]interface{}{
		"bool2": "true",
		"num2":  "1.1",
		"str2":  "test",
	}, res.Res.Form)
}

func TestRequestBodyPostMultipleContentTypesSplitForm(t *testing.T) {
	recordTest("request-bodies-post-multiple-content-types-split-form")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostMultipleContentTypesSplitForm(context.Background(),
		operations.RequestBodyPostMultipleContentTypesSplitFormRequestBody{
			Bool3: true,
			Num3:  1.1,
			Str3:  "test",
		})
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, map[string]interface{}{
		"bool3": "true",
		"num3":  "1.1",
		"str3":  "test",
	}, res.Res.Form)
}

func TestRequestBodyPostMultipleContentTypesSplitJSONWithParam(t *testing.T) {
	recordTest("request-bodies-post-multiple-content-types-split-json-with-param")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostMultipleContentTypesSplitParamJSON(context.Background(),
		operations.RequestBodyPostMultipleContentTypesSplitParamJSONRequestBody{
			Bool: true,
			Num:  1.1,
			Str:  "test body",
		},
		"test param",
	)

	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, map[string]interface{}{
		"bool": true,
		"num":  1.1,
		"str":  "test body",
	}, res.Res.JSON)
	assert.Equal(t, map[string]string{
		"paramStr": "test param",
	}, res.Res.Args)
}

func TestRequestBodyPostMultipleContentTypesSplitMultipartWithParam(t *testing.T) {
	recordTest("request-bodies-post-multiple-content-types-split-multipart-with-param")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostMultipleContentTypesSplitParamMultipart(context.Background(),
		operations.RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody{
			Bool2: true,
			Num2:  1.1,
			Str2:  "test body",
		},
		"test param",
	)

	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, map[string]interface{}{
		"bool2": "true",
		"num2":  "1.1",
		"str2":  "test body",
	}, res.Res.Form)
	assert.Equal(t, map[string]string{
		"paramStr": "test param",
	}, res.Res.Args)
}

func TestRequestBodyPostMultipleContentTypesSplitFormWithParam(t *testing.T) {
	recordTest("request-bodies-post-multiple-content-types-split-form-with-param")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostMultipleContentTypesSplitParamForm(context.Background(),
		operations.RequestBodyPostMultipleContentTypesSplitParamFormRequestBody{
			Bool3: true,
			Num3:  1.1,
			Str3:  "test body",
		},
		"test param",
	)

	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, map[string]interface{}{
		"bool3": "true",
		"num3":  "1.1",
		"str3":  "test body",
	}, res.Res.Form)
	assert.Equal(t, map[string]string{
		"paramStr": "test param",
	}, res.Res.Args)
}

func TestRequestBodyPutMultipartFile(t *testing.T) {
	recordTest("request-bodies-put-multipart-file")

	s := sdk.New()

	data, err := os.ReadFile("testdata/testUpload.json")
	require.NoError(t, err)

	res, err := s.RequestBodies.RequestBodyPutMultipartFile(context.Background(),
		operations.RequestBodyPutMultipartFileRequestBody{
			File: &operations.File{
				Content:  data,
				FileName: "testUpload.json",
			},
		},
	)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, map[string]string{
		"file": string(data),
	}, res.Res.Files)
}

func TestRequestBodyPutMultipartDifferentFileName(t *testing.T) {
	recordTest("request-bodies-put-different-file-name")

	s := sdk.New()

	data, err := os.ReadFile("testdata/testUpload.json")
	require.NoError(t, err)

	res, err := s.RequestBodies.RequestBodyPutMultipartDifferentFileName(context.Background(),
		operations.RequestBodyPutMultipartDifferentFileNameRequestBody{
			DifferentFileName: &operations.DifferentFileName{
				Content:  data,
				FileName: "testUpload.json",
			},
		},
	)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, map[string]string{
		"differentFileName": string(data),
	}, res.Res.Files)
}

func TestRequestBodyPutBytes(t *testing.T) {
	recordTest("request-bodies-put-bytes")

	s := sdk.New()

	data, err := os.ReadFile("testdata/testUpload.json")
	require.NoError(t, err)

	res, err := s.RequestBodies.RequestBodyPutBytes(context.Background(), data)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, string(data), res.Res.Data)
}

func TestRequestBodyPutBytesWithParams(t *testing.T) {
	recordTest("request-bodies-put-bytes-with-params")

	s := sdk.New()

	data, err := os.ReadFile("testdata/testUpload.json")
	require.NoError(t, err)

	res, err := s.RequestBodies.RequestBodyPutBytesWithParams(context.Background(), data, "test param")
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, string(data), res.Res.Data)
	assert.Equal(t, "test param", res.Res.Args.QueryStringParam)
}

func TestRequestBodyPostNullableRequiredProperty(t *testing.T) {
	tests := []struct {
		name     string
		arg      operations.NullableRequiredPropertyPostRequestBody
		wantJson string
	}{
		{
			name:     "Empty initializer",
			arg:      operations.NullableRequiredPropertyPostRequestBody{},
			wantJson: "{\"NullableRequiredArray\":null,\"NullableRequiredBigIntStr\":null,\"NullableRequiredDateTime\":null,\"NullableRequiredDecimalStr\":null,\"NullableRequiredEnum\":null,\"NullableRequiredInt\":null}",
		},
		{
			name: "Optional field set to non-null value",
			arg: operations.NullableRequiredPropertyPostRequestBody{
				NullableOptionalInt: sdk.Int64(0),
			},
			wantJson: "{\"NullableOptionalInt\":0,\"NullableRequiredArray\":null,\"NullableRequiredBigIntStr\":null,\"NullableRequiredDateTime\":null,\"NullableRequiredDecimalStr\":null,\"NullableRequiredEnum\":null,\"NullableRequiredInt\":null}",
		},
	}
	s := sdk.New()
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			reader, _, err := utils.SerializeRequestBody(context.Background(), tt.arg, false, false, "Request", "json", "")
			require.NoError(t, err)
			serializedBody := new(bytes.Buffer)
			serializedBody.ReadFrom(reader)
			assert.Equal(t, tt.wantJson, serializedBody.String())
			res, err := s.RequestBodies.NullableRequiredPropertyPost(context.Background(), tt.arg)
			require.NoError(t, err)
			assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
		})
	}
}

func TestRequestBodyPostNullableRequiredStringBody(t *testing.T) {
	recordTest("request-bodies-post-nullable-required-string-body")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostNullableRequiredStringBody(context.Background(), nil)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, "null", res.Object.Data)
}

func TestRequestBodyPostNullableNotRequiredStringBody(t *testing.T) {
	recordTest("request-bodies-post-nullable-not-required-string-body")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostNullableNotRequiredStringBody(context.Background(), nil)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, "null", res.Object.Data)
}
