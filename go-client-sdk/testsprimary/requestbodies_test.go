// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package tests

import (
	"bytes"
	"context"
	"math/big"
	"net/http"
	"os"
	"testing"
	"time"

	"openapi/pkg/models/operations"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
	"openapi/pkg/utils"

	sdk "openapi"

	"github.com/AlekSi/pointer"
	"github.com/ericlagergren/decimal"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestRequestBodyPostApplicationJSONSimple(t *testing.T) {
	recordTest("request-bodies-post-application-json-simple")

	s := sdk.New()

	obj := createSimpleObject()

	res, err := s.RequestBodies.RequestBodyPostApplicationJSONSimple(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, obj, res.Res.JSON)
}

func TestRequestBodyPostApplicationJSONSimpleCamelCase(t *testing.T) {
	recordTest("request-bodies-post-application-json-simple-camel-case")

	s := sdk.New()

	obj := createSimpleObjectCamelCase()

	res, err := s.RequestBodies.RequestBodyPostApplicationJSONSimpleCamelCase(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, obj, res.Res.JSON)
}

func TestRequestBodyPostApplicationJSONDeep(t *testing.T) {
	recordTest("request-bodies-post-application-json-deep")

	s := sdk.New()

	obj := createDeepObject()

	res, err := s.RequestBodies.RequestBodyPostApplicationJSONDeep(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, obj, *res.Res.JSON)
}

func TestRequestBodyPostApplicationJSONDeepCamelCase(t *testing.T) {
	recordTest("request-bodies-post-application-json-deep-camel-case")

	s := sdk.New()

	obj := createDeepObjectCamelCase()

	res, err := s.RequestBodies.RequestBodyPostApplicationJSONDeepCamelCase(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, obj, *res.Res.JSON)
}

func TestRequestBodyPostApplicationJSONMultipleJSONFiltered(t *testing.T) {
	recordTest("request-bodies-post-application-json-multiple-json-filtered")

	s := sdk.New()

	obj := createSimpleObject()

	res, err := s.RequestBodies.RequestBodyPostApplicationJSONMultipleJSONFiltered(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, obj, res.Res.JSON)
}

func TestRequestBodyPostMultipleContentTypesComponentFiltered(t *testing.T) {
	recordTest("request-bodies-post-multiple-content-types-component-filtered")

	s := sdk.New()

	obj := createSimpleObject()

	res, err := s.RequestBodies.RequestBodyPostMultipleContentTypesComponentFiltered(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, obj, res.Res.JSON)
}

func TestRequestBodyPostMultipleContentTypesInlineFiltered(t *testing.T) {
	recordTest("request-bodies-post-multiple-content-types-inline-filtered")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostMultipleContentTypesInlineFiltered(context.Background(),
		operations.RequestBodyPostMultipleContentTypesInlineFilteredApplicationJSON{
			Bool: true,
			Num:  1.1,
			Str:  "test",
		})
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, map[string]interface{}{
		"bool": true,
		"num":  1.1,
		"str":  "test",
	}, res.Res.JSON)
}

func TestRequestBodyPostMultipleContentTypesSplitJSON(t *testing.T) {
	recordTest("request-bodies-post-multiple-content-types-split-json")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostMultipleContentTypesSplitJSON(context.Background(),
		operations.RequestBodyPostMultipleContentTypesSplitApplicationJSON{
			Bool: true,
			Num:  1.1,
			Str:  "test",
		})
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, map[string]interface{}{
		"bool": true,
		"num":  1.1,
		"str":  "test",
	}, res.Res.JSON)
}

func TestRequestBodyPostMultipleContentTypesSplitMultipart(t *testing.T) {
	recordTest("request-bodies-post-multiple-content-types-split-multipart")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostMultipleContentTypesSplitMultipart(context.Background(),
		operations.RequestBodyPostMultipleContentTypesSplitMultipartFormData{
			Bool2: true,
			Num2:  1.1,
			Str2:  "test",
		})
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, map[string]interface{}{
		"bool2": "true",
		"num2":  "1.1",
		"str2":  "test",
	}, res.Res.Form)
}

func TestRequestBodyPostMultipleContentTypesSplitForm(t *testing.T) {
	recordTest("request-bodies-post-multiple-content-types-split-form")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostMultipleContentTypesSplitForm(context.Background(),
		operations.RequestBodyPostMultipleContentTypesSplitApplicationXWwwFormUrlencoded{
			Bool3: true,
			Num3:  1.1,
			Str3:  "test",
		})
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, map[string]interface{}{
		"bool3": "true",
		"num3":  "1.1",
		"str3":  "test",
	}, res.Res.Form)
}

func TestRequestBodyPostMultipleContentTypesSplitJSONWithParam(t *testing.T) {
	recordTest("request-bodies-post-multiple-content-types-split-json-with-param")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostMultipleContentTypesSplitParamJSON(context.Background(),
		operations.RequestBodyPostMultipleContentTypesSplitParamApplicationJSON{
			Bool: true,
			Num:  1.1,
			Str:  "test body",
		},
		"test param",
	)

	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, map[string]interface{}{
		"bool": true,
		"num":  1.1,
		"str":  "test body",
	}, res.Res.JSON)
	assert.Equal(t, map[string]string{
		"paramStr": "test param",
	}, res.Res.Args)
}

func TestRequestBodyPostMultipleContentTypesSplitMultipartWithParam(t *testing.T) {
	recordTest("request-bodies-post-multiple-content-types-split-multipart-with-param")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostMultipleContentTypesSplitParamMultipart(context.Background(),
		operations.RequestBodyPostMultipleContentTypesSplitParamMultipartFormData{
			Bool2: true,
			Num2:  1.1,
			Str2:  "test body",
		},
		"test param",
	)

	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, map[string]interface{}{
		"bool2": "true",
		"num2":  "1.1",
		"str2":  "test body",
	}, res.Res.Form)
	assert.Equal(t, map[string]string{
		"paramStr": "test param",
	}, res.Res.Args)
}

func TestRequestBodyPostMultipleContentTypesSplitFormWithParam(t *testing.T) {
	recordTest("request-bodies-post-multiple-content-types-split-form-with-param")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostMultipleContentTypesSplitParamForm(context.Background(),
		operations.RequestBodyPostMultipleContentTypesSplitParamApplicationXWwwFormUrlencoded{
			Bool3: true,
			Num3:  1.1,
			Str3:  "test body",
		},
		"test param",
	)

	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, map[string]interface{}{
		"bool3": "true",
		"num3":  "1.1",
		"str3":  "test body",
	}, res.Res.Form)
	assert.Equal(t, map[string]string{
		"paramStr": "test param",
	}, res.Res.Args)
}

func TestRequestBodyPostApplicationJSONArray(t *testing.T) {
	recordTest("request-bodies-post-application-json-array")

	s := sdk.New()

	obj := []shared.SimpleObject{
		createSimpleObject(),
	}

	res, err := s.RequestBodies.RequestBodyPostApplicationJSONArray(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.SimpleObjects)
	assert.Equal(t, obj, res.SimpleObjects)
}

func TestRequestBodyPostApplicationJSONArrayCamelCase(t *testing.T) {
	recordTest("request-bodies-post-application-json-array-camel-case")

	s := sdk.New()

	obj := []shared.SimpleObjectCamelCase{
		createSimpleObjectCamelCase(),
	}

	res, err := s.RequestBodies.RequestBodyPostApplicationJSONArrayCamelCase(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.SimpleObjectCamelCases)
	assert.Equal(t, obj, res.SimpleObjectCamelCases)
}

func TestRequestBodyPostApplicationJSONArrayOfArray(t *testing.T) {
	recordTest("request-bodies-post-application-json-array-of-array")

	s := sdk.New()

	obj := [][]shared.SimpleObject{
		{
			createSimpleObject(),
		},
	}

	res, err := s.RequestBodies.RequestBodyPostApplicationJSONArrayOfArray(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Arrs)
	assert.Equal(t, obj, res.Arrs)
}

func TestRequestBodyPostApplicationJSONArrayOfArrayCamelCase(t *testing.T) {
	recordTest("request-bodies-post-application-json-array-of-array-camel-case")

	s := sdk.New()

	obj := [][]shared.SimpleObjectCamelCase{
		{
			createSimpleObjectCamelCase(),
		},
	}

	res, err := s.RequestBodies.RequestBodyPostApplicationJSONArrayOfArrayCamelCase(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Arrs)
	assert.Equal(t, obj, res.Arrs)
}

func TestRequestBodyPostApplicationJSONMap(t *testing.T) {
	recordTest("request-bodies-post-application-json-map")

	s := sdk.New()

	obj := map[string]shared.SimpleObject{
		"mapElem1": createSimpleObject(),
		"mapElem2": createSimpleObject(),
	}

	res, err := s.RequestBodies.RequestBodyPostApplicationJSONMap(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, obj, res.Res)
}

func TestRequestBodyPostApplicationJSONMapCamelCase(t *testing.T) {
	recordTest("request-bodies-post-application-json-map-camel-case")

	s := sdk.New()

	obj := map[string]shared.SimpleObjectCamelCase{
		"mapElem1": createSimpleObjectCamelCase(),
		"mapElem2": createSimpleObjectCamelCase(),
	}

	res, err := s.RequestBodies.RequestBodyPostApplicationJSONMapCamelCase(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, obj, res.Res)
}

func TestRequestBodyPostApplicationJSONMapOfMap(t *testing.T) {
	recordTest("request-bodies-post-application-json-map-of-map")

	s := sdk.New()

	obj := map[string]map[string]shared.SimpleObject{
		"mapElem1": {
			"subMapElem1": createSimpleObject(),
			"subMapElem2": createSimpleObject(),
		},
		"mapElem2": {
			"subMapElem1": createSimpleObject(),
			"subMapElem2": createSimpleObject(),
		},
	}

	res, err := s.RequestBodies.RequestBodyPostApplicationJSONMapOfMap(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, obj, res.Res)
}

func TestRequestBodyPostApplicationJSONMapOfMapCamelCase(t *testing.T) {
	recordTest("request-bodies-post-application-json-map-of-map-camel-case")

	s := sdk.New()

	obj := map[string]map[string]shared.SimpleObjectCamelCase{
		"mapElem1": {
			"subMapElem1": createSimpleObjectCamelCase(),
			"subMapElem2": createSimpleObjectCamelCase(),
		},
		"mapElem2": {
			"subMapElem1": createSimpleObjectCamelCase(),
			"subMapElem2": createSimpleObjectCamelCase(),
		},
	}

	res, err := s.RequestBodies.RequestBodyPostApplicationJSONMapOfMapCamelCase(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, obj, res.Res)
}

func TestRequestBodyPostApplicationJSONMapOfArray(t *testing.T) {
	recordTest("request-bodies-post-application-json-map-of-array")

	s := sdk.New()

	obj := map[string][]shared.SimpleObject{
		"mapElem1": {createSimpleObject(), createSimpleObject()},
		"mapElem2": {createSimpleObject(), createSimpleObject()},
	}

	res, err := s.RequestBodies.RequestBodyPostApplicationJSONMapOfArray(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, obj, res.Res)
}

func TestRequestBodyPostApplicationJSONMapOfArrayCamelCase(t *testing.T) {
	recordTest("request-bodies-post-application-json-map-of-array-camel-case")

	s := sdk.New()

	obj := map[string][]shared.SimpleObjectCamelCase{
		"mapElem1": {createSimpleObjectCamelCase(), createSimpleObjectCamelCase()},
		"mapElem2": {createSimpleObjectCamelCase(), createSimpleObjectCamelCase()},
	}

	res, err := s.RequestBodies.RequestBodyPostApplicationJSONMapOfArrayCamelCase(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, obj, res.Res)
}

func TestRequestBodyPostApplicationJSONArrayOfMap(t *testing.T) {
	recordTest("request-bodies-post-application-json-array-of-map")

	s := sdk.New()

	obj := []map[string]shared.SimpleObject{
		{
			"mapElem1": createSimpleObject(),
			"mapElem2": createSimpleObject(),
		},
		{
			"mapElem1": createSimpleObject(),
			"mapElem2": createSimpleObject(),
		},
	}

	res, err := s.RequestBodies.RequestBodyPostApplicationJSONArrayOfMap(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Maps)
	assert.Equal(t, obj, res.Maps)
}

func TestRequestBodyPostApplicationJSONArrayOfMapCamelCase(t *testing.T) {
	recordTest("request-bodies-post-application-json-array-of-map-camel-case")

	s := sdk.New()

	obj := []map[string]shared.SimpleObjectCamelCase{
		{
			"mapElem1": createSimpleObjectCamelCase(),
			"mapElem2": createSimpleObjectCamelCase(),
		},
		{
			"mapElem1": createSimpleObjectCamelCase(),
			"mapElem2": createSimpleObjectCamelCase(),
		},
	}

	res, err := s.RequestBodies.RequestBodyPostApplicationJSONArrayOfMapCamelCase(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Maps)
	assert.Equal(t, obj, res.Maps)
}

func TestRequestBodyPostApplicationJSONArrayOfPrimitive(t *testing.T) {
	recordTest("request-bodies-post-application-json-array-of-primitive")

	s := sdk.New()

	obj := []string{"hello", "world"}

	res, err := s.RequestBodies.RequestBodyPostApplicationJSONArrayOfPrimitive(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Strings)
	assert.Equal(t, obj, res.Strings)
}

func TestRequestBodyPostApplicationJSONMapOfPrimitive(t *testing.T) {
	recordTest("request-bodies-post-application-json-map-of-primitive")

	s := sdk.New()

	obj := map[string]string{
		"mapElem1": "hello",
		"mapElem2": "world",
	}

	res, err := s.RequestBodies.RequestBodyPostApplicationJSONMapOfPrimitive(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, obj, res.Res)
}

func TestRequestBodyPostApplicationJSONMapOfMapOfPrimitive(t *testing.T) {
	recordTest("request-bodies-post-application-json-map-of-map-of-primitive")

	s := sdk.New()

	obj := map[string]map[string]string{
		"mapElem1": {
			"subMapElem1": "foo",
			"subMapElem2": "bar",
		},
		"mapElem2": {
			"subMapElem1": "buzz",
			"subMapElem2": "bazz",
		},
	}

	res, err := s.RequestBodies.RequestBodyPostApplicationJSONMapOfMapOfPrimitive(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, obj, res.Res)
}

func TestRequestBodyPostApplicationJSONArrayOfArrayOfPrimitive(t *testing.T) {
	recordTest("request-bodies-post-application-json-array-of-array-of-primitive")

	s := sdk.New()

	obj := [][]string{
		{"foo", "bar"},
		{"buzz", "bazz"},
	}

	res, err := s.RequestBodies.RequestBodyPostApplicationJSONArrayOfArrayOfPrimitive(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Arrs)
	assert.Equal(t, obj, res.Arrs)
}

func TestRequestBodyPostApplicationJSONArrayObject(t *testing.T) {
	recordTest("request-bodies-post-application-json-array-object")

	s := sdk.New()

	obj := []shared.SimpleObject{createSimpleObject(), createSimpleObject()}

	res, err := s.RequestBodies.RequestBodyPostApplicationJSONArrayObj(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.ArrObjValue)
	assert.Equal(t, obj, res.ArrObjValue.JSON)
}

func TestRequestBodyPostApplicationJSONArrayObjectCamelCase(t *testing.T) {
	recordTest("request-bodies-post-application-json-array-object-camel-case")

	s := sdk.New()

	obj := []shared.SimpleObjectCamelCase{createSimpleObjectCamelCase(), createSimpleObjectCamelCase()}

	res, err := s.RequestBodies.RequestBodyPostApplicationJSONArrayObjCamelCase(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.ArrObjValueCamelCase)
	assert.Equal(t, obj, res.ArrObjValueCamelCase.JSON)
}

func TestRequestBodyPostApplicationJSONMapObject(t *testing.T) {
	recordTest("request-bodies-post-application-json-map-object")

	s := sdk.New()

	obj := map[string]shared.SimpleObject{
		"mapElem1": createSimpleObject(),
		"mapElem2": createSimpleObject(),
	}

	res, err := s.RequestBodies.RequestBodyPostApplicationJSONMapObj(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.MapObjValue)
	assert.Equal(t, obj, res.MapObjValue.JSON)
}

func TestRequestBodyPostApplicationJSONMapObjectCamelCase(t *testing.T) {
	recordTest("request-bodies-post-application-json-map-object-camel-case")

	s := sdk.New()

	obj := map[string]shared.SimpleObjectCamelCase{
		"mapElem1": createSimpleObjectCamelCase(),
		"mapElem2": createSimpleObjectCamelCase(),
	}

	res, err := s.RequestBodies.RequestBodyPostApplicationJSONMapObjCamelCase(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.MapObjValueCamelCase)
	assert.Equal(t, obj, res.MapObjValueCamelCase.JSON)
}

func TestRequestBodyPutMultipartSimple(t *testing.T) {
	recordTest("request-bodies-put-multipart-simple")

	s := sdk.New()

	obj := createSimpleObject()

	res, err := s.RequestBodies.RequestBodyPutMultipartSimple(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, operations.RequestBodyPutMultipartSimpleResForm{
		Any:      "any",
		Bool:     "true",
		BoolOpt:  pointer.ToString("true"),
		Date:     "2020-01-01",
		DateTime: "2020-01-01T00:00:00.000000001Z",
		Enum:     "one",
		Float32:  "1.1",
		Int:      "1",
		Int32:    "1",
		Num:      "1.1",
		Str:      "test",
		StrOpt:   pointer.ToString("testOptional"),
	}, res.Res.Form)
}

func TestRequestBodyPutMultipartDeep(t *testing.T) {
	recordTest("request-bodies-put-multipart-deep")

	s := sdk.New()

	obj := createDeepObject()

	res, err := s.RequestBodies.RequestBodyPutMultipartDeep(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)

	assert.Equal(t, operations.RequestBodyPutMultipartDeepResForm{
		Arr:  marshalJSON(t, obj.Arr),
		Bool: "true",
		Int:  "1",
		Map:  marshalJSON(t, obj.Map),
		Num:  "1.1",
		Obj:  marshalJSON(t, obj.Obj),
		Str:  "test",
	}, res.Res.Form)
}

func TestRequestBodyPutMultipartFile(t *testing.T) {
	recordTest("request-bodies-put-multipart-file")

	s := sdk.New()

	data, err := os.ReadFile("testdata/testUpload.json")
	require.NoError(t, err)

	res, err := s.RequestBodies.RequestBodyPutMultipartFile(context.Background(),
		operations.RequestBodyPutMultipartFileRequestBody{
			File: &operations.RequestBodyPutMultipartFileRequestBodyFile{
				Content: data,
				File:    "testUpload.json",
			},
		},
	)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, map[string]string{
		"file": string(data),
	}, res.Res.Files)
}

func TestRequestBodyPutMultipartDifferentFileName(t *testing.T) {
	recordTest("request-bodies-put-different-file-name")

	s := sdk.New()

	data, err := os.ReadFile("testdata/testUpload.json")
	require.NoError(t, err)

	res, err := s.RequestBodies.RequestBodyPutMultipartDifferentFileName(context.Background(),
		operations.RequestBodyPutMultipartDifferentFileNameRequestBody{
			DifferentFileName: &operations.RequestBodyPutMultipartDifferentFileNameRequestBodyDifferentFileName{
				Content:           data,
				DifferentFileName: "testUpload.json",
			},
		},
	)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, map[string]string{
		"differentFileName": string(data),
	}, res.Res.Files)
}

func TestRequestBodyPostFormSimple(t *testing.T) {
	recordTest("request-bodies-post-form-simple")

	s := sdk.New()

	obj := createSimpleObject()

	res, err := s.RequestBodies.RequestBodyPostFormSimple(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, operations.RequestBodyPostFormSimpleResForm{
		Any:      "any",
		Bool:     "true",
		BoolOpt:  pointer.ToString("true"),
		Date:     "2020-01-01",
		DateTime: "2020-01-01T00:00:00.000000001Z",
		Enum:     "one",
		Float32:  "1.1",
		Int:      "1",
		Int32:    "1",
		Num:      "1.1",
		Str:      "test",
		StrOpt:   pointer.ToString("testOptional"),
	}, res.Res.Form)
}

func TestRequestBodyPostFormDeep(t *testing.T) {
	recordTest("request-bodies-post-form-deep")

	s := sdk.New()

	obj := createDeepObject()

	res, err := s.RequestBodies.RequestBodyPostFormDeep(context.Background(), obj)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, operations.RequestBodyPostFormDeepResForm{
		Arr:  marshalJSON(t, obj.Arr),
		Bool: "true",
		Int:  "1",
		Map:  marshalJSON(t, obj.Map),
		Num:  "1.1",
		Obj:  marshalJSON(t, obj.Obj),
		Str:  "test",
	}, res.Res.Form)
}

func TestRequestBodyPostFormMapPrimitive(t *testing.T) {
	recordTest("request-bodies-post-form-map-primitive")

	s := sdk.New()

	m := map[string]string{
		"key1": "value1",
		"key2": "value2",
		"key3": "value3",
	}
	res, err := s.RequestBodies.RequestBodyPostFormMapPrimitive(context.Background(), m)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, m, res.Res.Form)
}

func TestRequestBodyPutString(t *testing.T) {
	recordTest("request-bodies-put-string")

	s := sdk.New()

	str := "Hello World"
	res, err := s.RequestBodies.RequestBodyPutString(context.Background(), str)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, str, res.Res.Data)
}

func TestRequestBodyPutBytes(t *testing.T) {
	recordTest("request-bodies-put-bytes")

	s := sdk.New()

	data, err := os.ReadFile("testdata/testUpload.json")
	require.NoError(t, err)

	res, err := s.RequestBodies.RequestBodyPutBytes(context.Background(), data)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, string(data), res.Res.Data)
}

func TestRequestBodyPutStringWithParams(t *testing.T) {
	recordTest("request-bodies-put-string-with-params")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPutStringWithParams(context.Background(), "Hello world", "test param")
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, "Hello world", res.Res.Data)
	assert.Equal(t, "test param", res.Res.Args.QueryStringParam)
}

func TestRequestBodyPutBytesWithParams(t *testing.T) {
	recordTest("request-bodies-put-bytes-with-params")

	s := sdk.New()

	data, err := os.ReadFile("testdata/testUpload.json")
	require.NoError(t, err)

	res, err := s.RequestBodies.RequestBodyPutBytesWithParams(context.Background(), data, "test param")
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Res)
	assert.Equal(t, string(data), res.Res.Data)
	assert.Equal(t, "test param", res.Res.Args.QueryStringParam)
}

func TestRequestBodyEmptyObject(t *testing.T) {
	recordTest("request-bodies-post-empty-object")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostEmptyObject(context.Background(), operations.RequestBodyPostEmptyObjectRequestBody{
		Empty:                    &operations.RequestBodyPostEmptyObjectRequestBodyEmpty{},
		EmptyWithEmptyProperties: &operations.RequestBodyPostEmptyObjectRequestBodyEmptyWithEmptyProperties{},
	})
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.RequestBodyPostEmptyObject200ApplicationJSONObject)
}

func TestRequestBodyPostNullableRequiredProperty(t *testing.T) {
	recordTest("request-bodies-post-nullable-required-property")
	tests := []struct {
		name     string
		arg      operations.NullableRequiredPropertyPostRequestBody
		wantJson string
	}{
		{
			name:     "Empty initializer",
			arg:      operations.NullableRequiredPropertyPostRequestBody{},
			wantJson: "{\"NullableRequiredArray\":null,\"NullableRequiredEnum\":null,\"NullableRequiredInt\":null}",
		},
		{
			name: "Required fields set to nil",
			arg: operations.NullableRequiredPropertyPostRequestBody{
				NullableOptionalInt:   nil,
				NullableRequiredArray: nil,
				NullableRequiredEnum:  nil,
				NullableRequiredInt:   nil,
			},
			wantJson: "{\"NullableRequiredArray\":null,\"NullableRequiredEnum\":null,\"NullableRequiredInt\":null}",
		},
		{
			name: "Optional field set to non-null value",
			arg: operations.NullableRequiredPropertyPostRequestBody{
				NullableOptionalInt: pointer.ToInt64(0),
			},
			wantJson: "{\"NullableOptionalInt\":0,\"NullableRequiredArray\":null,\"NullableRequiredEnum\":null,\"NullableRequiredInt\":null}",
		},
		{
			name: "All fields set to non-null value",
			arg: operations.NullableRequiredPropertyPostRequestBody{
				NullableOptionalInt:   pointer.ToInt64(0),
				NullableRequiredArray: []float64{1, 2, 3},
				NullableRequiredEnum:  operations.NullableRequiredPropertyPostRequestBodyNullableRequiredEnumSecond.ToPointer(),
				NullableRequiredInt:   pointer.ToInt64(1),
			},
			wantJson: "{\"NullableOptionalInt\":0,\"NullableRequiredArray\":[1,2,3],\"NullableRequiredEnum\":\"second\",\"NullableRequiredInt\":1}",
		},
	}
	s := sdk.New()
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			reader, _, err := utils.SerializeRequestBody(context.Background(), tt.arg, false, false, "Request", "json", "")
			require.NoError(t, err)
			serializedBody := new(bytes.Buffer)
			serializedBody.ReadFrom(reader)
			assert.Equal(t, tt.wantJson, serializedBody.String())
			res, err := s.RequestBodies.NullableRequiredPropertyPost(context.Background(), tt.arg)
			require.NoError(t, err)
			assert.Equal(t, http.StatusOK, res.StatusCode)
		})
	}
}

func TestRequestBodyPostNullableRequiredSharedObject(t *testing.T) {
	recordTest("request-bodies-post-nullable-required-shared-object")
	tests := []struct {
		name     string
		arg      operations.NullableRequiredSharedObjectPostRequestBody
		wantJson string
	}{
		{
			name:     "Empty initializer",
			arg:      operations.NullableRequiredSharedObjectPostRequestBody{},
			wantJson: "{\"NullableRequiredObj\":null}",
		},
		{
			name: "All fields set to nil",
			arg: operations.NullableRequiredSharedObjectPostRequestBody{
				NullableOptionalObj: nil,
				NullableRequiredObj: nil,
			},
			wantJson: "{\"NullableRequiredObj\":null}",
		},
		{
			name: "Optional field set only",
			arg: operations.NullableRequiredSharedObjectPostRequestBody{
				NullableOptionalObj: &shared.NullableObject{Required: 1},
			},
			wantJson: "{\"NullableOptionalObj\":{\"required\":1},\"NullableRequiredObj\":null}",
		},
		{
			name: "All fields set to non-null value",
			arg: operations.NullableRequiredSharedObjectPostRequestBody{
				NullableOptionalObj: &shared.NullableObject{Required: 1, Optional: pointer.ToString("test")},
				NullableRequiredObj: &shared.NullableObject{Required: 2},
			},
			wantJson: "{\"NullableOptionalObj\":{\"optional\":\"test\",\"required\":1},\"NullableRequiredObj\":{\"required\":2}}",
		},
	}
	s := sdk.New()
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			reader, _, err := utils.SerializeRequestBody(context.Background(), tt.arg, false, false, "Request", "json", "")
			require.NoError(t, err)
			serializedBody := new(bytes.Buffer)
			serializedBody.ReadFrom(reader)
			assert.Equal(t, tt.wantJson, serializedBody.String())
			res, err := s.RequestBodies.NullableRequiredSharedObjectPost(context.Background(), tt.arg)
			require.NoError(t, err)
			assert.Equal(t, http.StatusOK, res.StatusCode)
		})
	}
}

func TestRequestBodyPostNullableRequiredEmptyObject(t *testing.T) {
	recordTest("request-bodies-post-nullable-required-empty-object")
	tests := []struct {
		name     string
		arg      operations.NullableRequiredEmptyObjectPostRequestBody
		wantJson string
	}{
		{
			name:     "Empty initializer",
			arg:      operations.NullableRequiredEmptyObjectPostRequestBody{},
			wantJson: "{\"NullableRequiredObj\":null,\"RequiredObj\":{}}",
		},
		{
			name: "Nullable fields set to null",
			arg: operations.NullableRequiredEmptyObjectPostRequestBody{
				RequiredObj:         operations.NullableRequiredEmptyObjectPostRequestBodyRequiredObj{},
				NullableOptionalObj: nil,
				NullableRequiredObj: nil,
			},
			wantJson: "{\"NullableRequiredObj\":null,\"RequiredObj\":{}}",
		},
		{
			name: "Optional field set to non-null value",
			arg: operations.NullableRequiredEmptyObjectPostRequestBody{
				NullableOptionalObj: &operations.NullableRequiredEmptyObjectPostRequestBodyNullableOptionalObj{},
			},
			wantJson: "{\"NullableOptionalObj\":{},\"NullableRequiredObj\":null,\"RequiredObj\":{}}",
		},
		{
			name: "All fields set to non-null value",
			arg: operations.NullableRequiredEmptyObjectPostRequestBody{
				RequiredObj:         operations.NullableRequiredEmptyObjectPostRequestBodyRequiredObj{},
				NullableOptionalObj: &operations.NullableRequiredEmptyObjectPostRequestBodyNullableOptionalObj{},
				NullableRequiredObj: &operations.NullableRequiredEmptyObjectPostRequestBodyNullableRequiredObj{},
			},
			wantJson: "{\"NullableOptionalObj\":{},\"NullableRequiredObj\":{},\"RequiredObj\":{}}",
		},
	}
	s := sdk.New()
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			reader, _, err := utils.SerializeRequestBody(context.Background(), tt.arg, false, false, "Request", "json", "")
			require.NoError(t, err)
			serializedBody := new(bytes.Buffer)
			serializedBody.ReadFrom(reader)
			assert.Equal(t, tt.wantJson, serializedBody.String())
			res, err := s.RequestBodies.NullableRequiredEmptyObjectPost(context.Background(), tt.arg)
			require.NoError(t, err)
			assert.Equal(t, http.StatusOK, res.StatusCode)
		})
	}
}

func TestRequestBodyReadOnlyInput(t *testing.T) {
	recordTest("request-bodies-read-only-input")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyReadOnlyInput(context.Background(), shared.ReadOnlyObjectInput{})
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)

	assert.Equal(t, true, res.ReadOnlyObject.Bool)
	assert.Equal(t, 1.0, res.ReadOnlyObject.Num)
	assert.Equal(t, "hello", res.ReadOnlyObject.String)
}

func TestRequestBodyWriteOnlyOutput(t *testing.T) {
	recordTest("request-bodies-write-only-output")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyWriteOnlyOutput(context.Background(), shared.WriteOnlyObject{
		Bool:   true,
		Num:    1.0,
		String: "hello",
	})
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, shared.WriteOnlyObjectOutput{}, *res.WriteOnlyObject)
}

func TestRequestBodyWriteOnly(t *testing.T) {
	recordTest("request-bodies-write-only")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyWriteOnly(context.Background(), shared.WriteOnlyObject{
		Bool:   true,
		Num:    1.0,
		String: "hello",
	})
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)

	assert.Equal(t, true, res.ReadOnlyObject.Bool)
	assert.Equal(t, 1.0, res.ReadOnlyObject.Num)
	assert.Equal(t, "hello", res.ReadOnlyObject.String)
}

func TestRequestBodyReadAndWrite(t *testing.T) {
	recordTest("request-bodies-read-and-write")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyReadAndWrite(context.Background(), shared.ReadWriteObjectInput{
		Num1: 1,
		Num2: 2,
		Num3: 4,
	})
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)

	assert.Equal(t, int64(4), res.ReadWriteObject.Num3)
	assert.Equal(t, int64(7), res.ReadWriteObject.Sum)
}

func TestRequestBodyReadOnlyUnion(t *testing.T) {
	recordTest("request-bodies-read-only-union")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyReadOnlyUnion(context.Background(),
		shared.CreateWeaklyTypedOneOfReadOnlyObjectInputReadOnlyObjectInput(shared.ReadOnlyObjectInput{}))
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, 1.0, res.WeaklyTypedOneOfReadOnlyObject.ReadOnlyObject.Num)
	assert.Equal(t, "hello", res.WeaklyTypedOneOfReadOnlyObject.ReadOnlyObject.String)
	assert.Equal(t, true, res.WeaklyTypedOneOfReadOnlyObject.ReadOnlyObject.Bool)
}

func TestRequestBodyWriteOnlyUnion(t *testing.T) {
	recordTest("request-bodies-write-only-union")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyWriteOnlyUnion(context.Background(),
		shared.CreateWeaklyTypedOneOfWriteOnlyObjectWriteOnlyObject(shared.WriteOnlyObject{
			Bool:   true,
			Num:    1.0,
			String: "hello",
		}))
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, shared.WriteOnlyObjectOutput{}, *res.WeaklyTypedOneOfWriteOnlyObject.WriteOnlyObjectOutput)
}

func TestRequestBodyReadWriteOnlyUnion(t *testing.T) {
	recordTest("request-bodies-read-write-only-union")
	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyReadWriteOnlyUnion(context.Background(),
		shared.CreateWeaklyTypedOneOfReadWriteObjectInputReadWriteObjectInput(shared.ReadWriteObjectInput{
			Num1: 1,
			Num2: 2,
			Num3: 4,
		}))
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, int64(4), res.WeaklyTypedOneOfReadWriteObject.ReadWriteObjectOutput.Num3)
	assert.Equal(t, int64(7), res.WeaklyTypedOneOfReadWriteObject.ReadWriteObjectOutput.Sum)
}

func TestRequestBodyPostComplexNumberTypes(t *testing.T) {
	recordTest("request-bodies-complex-number-types")

	s := sdk.New()

	req := operations.RequestBodyPostComplexNumberTypesRequest{
		ComplexNumberTypes: shared.ComplexNumberTypes{
			Bigint:     big.NewInt(9007199254740991),
			BigintStr:  types.MustNewBigIntFromString("9223372036854775807"),
			Decimal:    types.MustNewDecimalFromString("3.141592653589793"),
			DecimalStr: types.MustNewDecimalFromString("3.141592653589793238462643383279"),
		},
		PathBigInt:      big.NewInt(9007199254740991),
		PathBigIntStr:   types.MustNewBigIntFromString("9223372036854775807"),
		PathDecimal:     types.MustNewDecimalFromString("3.141592653589793"),
		PathDecimalStr:  types.MustNewDecimalFromString("3.141592653589793238462643383279"),
		QueryBigInt:     big.NewInt(9007199254740991),
		QueryBigIntStr:  types.MustNewBigIntFromString("9223372036854775807"),
		QueryDecimal:    types.MustNewDecimalFromString("3.141592653589793"),
		QueryDecimalStr: types.MustNewDecimalFromString("3.141592653589793238462643383279"),
	}

	res, err := s.RequestBodies.RequestBodyPostComplexNumberTypes(context.Background(), req)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, req.ComplexNumberTypes, res.RequestBodyPostComplexNumberTypes200ApplicationJSONObject.JSON)
	assert.Equal(t, "http://localhost:35123/anything/requestBodies/post/9007199254740991/9223372036854775807/3.141592653589793/3.141592653589793238462643383279/complex-number-types?queryBigInt=9007199254740991&queryBigIntStr=9223372036854775807&queryDecimal=3.141592653589793&queryDecimalStr=3.141592653589793238462643383279", res.RequestBodyPostComplexNumberTypes200ApplicationJSONObject.URL)
}

func TestRequestBodyPostDefaultsAndConsts(t *testing.T) {
	recordTest("request-bodies-defaults-and-consts")

	s := sdk.New()

	req := shared.DefaultsAndConsts{
		NormalField: "normal",
		DefaultStr:  sdk.String("not default"),
	}

	assert.Equal(t, types.MustNewBigIntFromString("9007199254740991"), req.GetConstBigInt())
	assert.Equal(t, types.MustNewBigIntFromString("9223372036854775807"), req.GetConstBigIntStr())
	assert.Equal(t, true, req.GetConstBool())
	assert.Equal(t, types.MustDateFromString("2020-01-01"), req.GetConstDate())
	assert.Equal(t, types.MustTimeFromString("2020-01-01T00:00:00Z"), req.GetConstDateTime())
	assert.Equal(t, types.MustNewDecimalFromString("3.141592653589793"), req.GetConstDecimal())
	assert.Equal(t, types.MustNewDecimalFromString("3.141592653589793238462643383279"), req.GetConstDecimalStr())
	assert.Equal(t, shared.DefaultsAndConstsConstEnumIntTwo, req.GetConstEnumInt())
	assert.Equal(t, shared.DefaultsAndConstsConstEnumStrTwo, req.GetConstEnumStr())
	assert.Equal(t, int64(123), req.GetConstInt())
	assert.Equal(t, float64(123.456), req.GetConstNum())
	assert.Equal(t, "const", req.GetConstStr())
	assert.Equal(t, (*string)(nil), req.GetConstStrNull())

	res, err := s.RequestBodies.RequestBodyPostDefaultsAndConsts(context.Background(), req)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, "normal", res.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject.JSON.NormalField)

	assert.Equal(t, types.MustNewBigIntFromString("9007199254740991"), res.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject.JSON.ConstBigInt)
	assert.Equal(t, types.MustNewBigIntFromString("9223372036854775807"), res.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject.JSON.ConstBigIntStr)
	assert.Equal(t, true, res.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject.JSON.ConstBool)
	assert.Equal(t, types.MustDateFromString("2020-01-01"), res.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject.JSON.ConstDate)
	assert.Equal(t, types.MustTimeFromString("2020-01-01T00:00:00Z"), res.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject.JSON.ConstDateTime)
	assert.Equal(t, types.MustNewDecimalFromString("3.141592653589793").String(), res.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject.JSON.ConstDecimal.String())
	assert.Equal(t, types.MustNewDecimalFromString("3.141592653589793238462643383279").String(), res.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject.JSON.ConstDecimalStr.String())
	assert.Equal(t, shared.DefaultsAndConstsOutputConstEnumIntTwo, res.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject.JSON.ConstEnumInt)
	assert.Equal(t, shared.DefaultsAndConstsOutputConstEnumStrTwo, res.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject.JSON.ConstEnumStr)
	assert.Equal(t, int64(123), res.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject.JSON.ConstInt)
	assert.Equal(t, float64(123.456), res.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject.JSON.ConstNum)
	assert.Equal(t, "const", res.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject.JSON.ConstStr)
	assert.Equal(t, (*string)(nil), res.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject.JSON.ConstStrNull)

	assert.Equal(t, types.MustNewBigIntFromString("9007199254740991"), res.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject.JSON.DefaultBigInt)
	assert.Equal(t, types.MustNewBigIntFromString("9223372036854775807"), res.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject.JSON.DefaultBigIntStr)
	assert.Equal(t, true, res.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject.JSON.DefaultBool)
	assert.Equal(t, types.MustDateFromString("2020-01-01"), res.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject.JSON.DefaultDate)
	assert.Equal(t, types.MustTimeFromString("2020-01-01T00:00:00Z"), res.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject.JSON.DefaultDateTime)
	assert.Equal(t, types.MustNewDecimalFromString("3.141592653589793").String(), res.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject.JSON.DefaultDecimal.String())
	assert.Equal(t, types.MustNewDecimalFromString("3.141592653589793238462643383279").String(), res.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject.JSON.DefaultDecimalStr.String())
	assert.Equal(t, shared.DefaultsAndConstsOutputDefaultEnumIntTwo, res.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject.JSON.DefaultEnumInt)
	assert.Equal(t, shared.DefaultsAndConstsOutputDefaultEnumStrTwo, res.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject.JSON.DefaultEnumStr)
	assert.Equal(t, int64(123), res.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject.JSON.DefaultInt)
	assert.Equal(t, float64(123.456), res.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject.JSON.DefaultNum)
	assert.Equal(t, "not default", res.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject.JSON.DefaultStr)
	assert.Equal(t, (*string)(nil), res.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject.JSON.DefaultStrNullable)
	assert.Equal(t, "default", *res.RequestBodyPostDefaultsAndConsts200ApplicationJSONObject.JSON.DefaultStrOptional)
}

func TestRequestBodyPostJsonDataTypesString(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-string")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesString(context.Background(), "test")
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, "test", res.RequestBodyPostJSONDataTypesString200ApplicationJSONObject.JSON)
}

func TestRequestBodyPostJsonDataTypesInteger(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-integer")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesInteger(context.Background(), 1)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, int64(1), res.RequestBodyPostJSONDataTypesInteger200ApplicationJSONObject.JSON)
}

func TestRequestBodyPostJsonDataTypesInt32(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-int32")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesInt32(context.Background(), 1)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, 1, res.RequestBodyPostJSONDataTypesInt32200ApplicationJSONObject.JSON)
}

func TestRequestBodyPostJsonDataTypesBigInt(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-bigint")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesBigInt(context.Background(), big.NewInt(1))
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, big.NewInt(1), res.RequestBodyPostJSONDataTypesBigInt200ApplicationJSONObject.JSON)
	assert.Equal(t, "1", res.RequestBodyPostJSONDataTypesBigInt200ApplicationJSONObject.Data)
}

func TestRequestBodyPostJsonDataTypesBigIntStr(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-bigint-str")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesBigIntStr(context.Background(), types.MustNewBigIntFromString("1"))
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, types.MustNewBigIntFromString("1"), res.RequestBodyPostJSONDataTypesBigIntStr200ApplicationJSONObject.JSON)
	assert.Equal(t, `"1"`, res.RequestBodyPostJSONDataTypesBigIntStr200ApplicationJSONObject.Data)
}

func TestRequestBodyPostJsonDataTypesNumber(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-number")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesNumber(context.Background(), 1.1)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, 1.1, res.RequestBodyPostJSONDataTypesNumber200ApplicationJSONObject.JSON)
}

func TestRequestBodyPostJsonDataTypesFloat32(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-float32")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesFloat32(context.Background(), 1.1)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, 1.1, res.RequestBodyPostJSONDataTypesFloat32200ApplicationJSONObject.JSON)
}

func TestRequestBodyPostJsonDataTypesDecimal(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-decimal")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesDecimal(context.Background(), types.MustNewDecimalFromString("1.1"))
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, types.MustNewDecimalFromString("1.1"), res.RequestBodyPostJSONDataTypesDecimal200ApplicationJSONObject.JSON)
	assert.Equal(t, "1.1", res.RequestBodyPostJSONDataTypesDecimal200ApplicationJSONObject.Data)
}

func TestRequestBodyPostJsonDataTypesDecimalStr(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-decimal-str")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesDecimalStr(context.Background(), types.MustNewDecimalFromString("1.1"))
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, types.MustNewDecimalFromString("1.1"), res.RequestBodyPostJSONDataTypesDecimalStr200ApplicationJSONObject.JSON)
	assert.Equal(t, `"1.1"`, res.RequestBodyPostJSONDataTypesDecimalStr200ApplicationJSONObject.Data)
}

func TestRequestBodyPostJsonDataTypesBoolean(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-boolean")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesBoolean(context.Background(), true)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, true, res.RequestBodyPostJSONDataTypesBoolean200ApplicationJSONObject.JSON)
}

func TestRequestBodyPostJsonDataTypesDate(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-date")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesDate(context.Background(), types.MustDateFromString("2020-01-01"))
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, types.MustDateFromString("2020-01-01"), res.RequestBodyPostJSONDataTypesDate200ApplicationJSONObject.JSON)
	assert.Equal(t, `"2020-01-01"`, res.RequestBodyPostJSONDataTypesDate200ApplicationJSONObject.Data)
}

func TestRequestBodyPostJsonDataTypesDateTime(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-date-time")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesDateTime(context.Background(), types.MustTimeFromString("2020-01-01T00:00:00Z"))
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, types.MustTimeFromString("2020-01-01T00:00:00Z"), res.RequestBodyPostJSONDataTypesDateTime200ApplicationJSONObject.JSON)
	assert.Equal(t, `"2020-01-01T00:00:00Z"`, res.RequestBodyPostJSONDataTypesDateTime200ApplicationJSONObject.Data)
}

func TestRequestBodyPostJSONDataTypesMapDateTime(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-map-date-time")

	s := sdk.New()

	req := map[string]time.Time{
		"test": types.MustTimeFromString("2020-01-01T00:00:00.000000001Z"),
	}

	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesMapDateTime(context.Background(), req)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, req, res.RequestBodyPostJSONDataTypesMapDateTime200ApplicationJSONObject.JSON)
	assert.Equal(t, `{"test":"2020-01-01T00:00:00.000000001Z"}`, res.RequestBodyPostJSONDataTypesMapDateTime200ApplicationJSONObject.Data)
}

func TestRequestBodyPostJSONDataTypesMapBigIntStr(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-map-bigint-str")

	s := sdk.New()

	req := map[string]*big.Int{
		"test": big.NewInt(1),
	}

	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesMapBigIntStr(context.Background(), req)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, req, res.RequestBodyPostJSONDataTypesMapBigIntStr200ApplicationJSONObject.JSON)
	assert.Equal(t, `{"test":"1"}`, res.RequestBodyPostJSONDataTypesMapBigIntStr200ApplicationJSONObject.Data)
}

func TestRequestBodyPostJSONDataTypesMapDecimal(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-map-decimal")

	s := sdk.New()

	req := map[string]*decimal.Big{
		"test": types.MustNewDecimalFromString("3.141592653589793"),
	}

	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesMapDecimal(context.Background(), req)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, req, res.RequestBodyPostJSONDataTypesMapDecimal200ApplicationJSONObject.JSON)
	assert.Equal(t, `{"test":3.141592653589793}`, res.RequestBodyPostJSONDataTypesMapDecimal200ApplicationJSONObject.Data)
}

func TestRequestBodyPostJSONDataTypesArrayDate(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-array-date")

	s := sdk.New()

	req := []types.Date{
		types.MustDateFromString("2020-01-01"),
	}

	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesArrayDate(context.Background(), req)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, req, res.RequestBodyPostJSONDataTypesArrayDate200ApplicationJSONObject.JSON)
	assert.Equal(t, `["2020-01-01"]`, res.RequestBodyPostJSONDataTypesArrayDate200ApplicationJSONObject.Data)
}

func TestRequestBodyPostJSONDataTypesArrayBigInt(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-array-bigint")

	s := sdk.New()

	req := []*big.Int{
		big.NewInt(1),
	}

	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesArrayBigInt(context.Background(), req)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, req, res.RequestBodyPostJSONDataTypesArrayBigInt200ApplicationJSONObject.JSON)
	assert.Equal(t, `[1]`, res.RequestBodyPostJSONDataTypesArrayBigInt200ApplicationJSONObject.Data)
}

func TestRequestBodyPostJSONDataTypesArrayDecimalStr(t *testing.T) {
	recordTest("request-bodies-post-json-data-types-array-decimal-str")

	s := sdk.New()

	req := []*decimal.Big{
		types.MustNewDecimalFromString("3.141592653589793438462643383279"),
	}

	res, err := s.RequestBodies.RequestBodyPostJSONDataTypesArrayDecimalStr(context.Background(), req)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, req, res.RequestBodyPostJSONDataTypesArrayDecimalStr200ApplicationJSONObject.JSON)
	assert.Equal(t, `["3.141592653589793438462643383279"]`, res.RequestBodyPostJSONDataTypesArrayDecimalStr200ApplicationJSONObject.Data)
}

func TestRequestBodyPostNullableRequiredStringBody(t *testing.T) {
	recordTest("request-bodies-post-nullable-required-string-body")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostNullableRequiredStringBody(context.Background(), nil)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, "null", res.RequestBodyPostNullableRequiredStringBody200ApplicationJSONObject.Data)
}

func TestRequestBodyPostNullableNotRequiredStringBody(t *testing.T) {
	recordTest("request-bodies-post-nullable-not-required-string-body")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostNullableNotRequiredStringBody(context.Background(), nil)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, "null", res.RequestBodyPostNullableNotRequiredStringBody200ApplicationJSONObject.Data)
}

func TestRequestBodyPostNotNullableNotRequiredStringBody(t *testing.T) {
	recordTest("request-bodies-post-not-nullable-not-required-string-body")

	s := sdk.New()

	res, err := s.RequestBodies.RequestBodyPostNotNullableNotRequiredStringBody(context.Background(), nil)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.Equal(t, "", res.RequestBodyPostNotNullableNotRequiredStringBody200ApplicationJSONObject.Data)
}
