// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package tests

import (
	"context"
	"crypto/rand"
	"fmt"
	"net/http"
	"testing"

	"openapi/pkg/models/operations"
	"openapi/pkg/models/sdkerrors"
	"openapi/pkg/utils"

	sdk "openapi"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestRetriesSucceeds(t *testing.T) {
	recordTest("retries-succeeds")

	s := sdk.New()

	res, err := s.Retries.RetriesGet(context.Background(), pseudo_uuid(), nil)
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Retries)
	assert.EqualValues(t, 3, res.Retries.Retries)
}

func TestRetriesTimeout(t *testing.T) {
	recordTest("retries-timeout")

	s := sdk.New()

	res, err := s.Retries.RetriesGet(context.Background(), pseudo_uuid(), sdk.Int64(1000000000), operations.WithRetries(utils.RetryConfig{
		Strategy: "backoff",
		Backoff: &utils.BackoffStrategy{
			InitialInterval: 1,
			MaxInterval:     50,
			Exponent:        1.1,
			MaxElapsedTime:  100,
		},
		RetryConnectionErrors: false,
	}))
	assert.Error(t, err)
	assert.Nil(t, res)
	assert.Equal(t, http.StatusServiceUnavailable, err.(*sdkerrors.SDKError).StatusCode)
}

func TestGlobalRetryConfigDisable(t *testing.T) {
	recordTest("retries-global-config-disable")

	s := sdk.New(sdk.WithRetryConfig(utils.RetryConfig{Strategy: ""}))

	res, err := s.Retries.RetriesGet(context.Background(), pseudo_uuid(), sdk.Int64(2))
	assert.Error(t, err)
	assert.Nil(t, res)
	assert.Equal(t, http.StatusServiceUnavailable, err.(*sdkerrors.SDKError).StatusCode)
}

func TestGlobalRetryConfigSuccess(t *testing.T) {
	recordTest("retries-global-config-success")

	s := sdk.New(sdk.WithRetryConfig(utils.RetryConfig{
		Strategy: "backoff",
		Backoff: &utils.BackoffStrategy{
			InitialInterval: 1,
			MaxInterval:     50,
			Exponent:        1.1,
			MaxElapsedTime:  1000,
		},
		RetryConnectionErrors: false,
	}))

	res, err := s.Retries.RetriesGet(context.Background(), pseudo_uuid(), sdk.Int64(20))
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.StatusCode)
	assert.NotNil(t, res.Retries)
	assert.EqualValues(t, 20, res.Retries.Retries)
}

func TestGlobalRetryConfigTimeout(t *testing.T) {
	recordTest("retries-global-config-timeout")

	s := sdk.New(sdk.WithRetryConfig(utils.RetryConfig{
		Strategy: "backoff",
		Backoff: &utils.BackoffStrategy{
			InitialInterval: 1,
			MaxInterval:     50,
			Exponent:        1.1,
			MaxElapsedTime:  100,
		},
		RetryConnectionErrors: false,
	}))

	res, err := s.Retries.RetriesGet(context.Background(), pseudo_uuid(), sdk.Int64(30))
	assert.Error(t, err)
	assert.Nil(t, res)
	assert.Equal(t, http.StatusServiceUnavailable, err.(*sdkerrors.SDKError).StatusCode)
}

func pseudo_uuid() string {
	b := make([]byte, 16)
	_, err := rand.Read(b)
	if err != nil {
		panic(err)
	}

	return fmt.Sprintf("%X-%X-%X-%X-%X", b[0:4], b[4:6], b[6:8], b[8:10], b[10:])
}
