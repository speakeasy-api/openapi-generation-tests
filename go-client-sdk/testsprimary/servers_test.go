// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	"net/http"
	"testing"

	"openapi/v2/pkg/models/operations"

	sdk "openapi/v2"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestSelectGlobalServerValid(t *testing.T) {
	recordTest("servers-select-global-server-valid")

	s := sdk.New(sdk.WithServerURL(sdk.ServerList[0]))

	res, err := s.Servers.SelectGlobalServer(context.Background())
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
}

func TestSelectGlobalServerBroken(t *testing.T) {
	recordTest("servers-select-global-server-broken")

	s := sdk.New(sdk.WithServerIndex(1))

	res, err := s.Servers.SelectGlobalServer(context.Background())
	assert.Error(t, err)
	assert.Nil(t, res)
}

func TestSelectServerWithIDDefault(t *testing.T) {
	recordTest("servers-select-server-with-id-default")

	s := sdk.New()

	res, err := s.Servers.SelectServerWithID(context.Background())
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
}

func TestSelectServerWithIDValid(t *testing.T) {
	recordTest("servers-select-server-with-id-valid")

	s := sdk.New()

	res, err := s.Servers.SelectServerWithID(context.Background(), operations.WithServerURL(operations.SelectServerWithIDServerList[operations.SelectServerWithIDServerValid]))
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
}

func TestSelectServerWithIDBroken(t *testing.T) {
	recordTest("servers-select-server-with-id-broken")

	s := sdk.New()

	res, err := s.Servers.SelectServerWithID(context.Background(), operations.WithServerURL(operations.SelectServerWithIDServerList[operations.SelectServerWithIDServerBroken]))
	assert.Error(t, err)
	assert.Nil(t, res)
}

func TestServerWithTemplatesGlobal(t *testing.T) {
	recordTest("servers-server-with-templates-global")

	s := sdk.New(sdk.WithServerIndex(2), sdk.WithHostname("localhost"), sdk.WithPort("35123"))

	res, err := s.Servers.ServerWithTemplatesGlobal(context.Background())
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
}

func TestServerWithTemplatesGlobalDefaults(t *testing.T) {
	recordTest("servers-server-with-templates-global-defaults")

	s := sdk.New(sdk.WithServerIndex(2))

	res, err := s.Servers.ServerWithTemplatesGlobal(context.Background())
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
}

func TestServerWithTemplatesGlobalEnum(t *testing.T) {
	recordTest("servers-server-with-templates-global-enum")

	s := sdk.New(sdk.WithServerIndex(3), sdk.WithSomething(sdk.ServerSomethingSomethingElseAgain))

	res, err := s.Servers.ServerWithTemplatesGlobal(context.Background())
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
}

func TestServerWithTemplates(t *testing.T) {
	recordTest("servers-server-with-templates")

	s := sdk.New()

	res, err := s.Servers.ServerWithTemplates(context.Background(), operations.WithTemplatedServerURL(operations.ServerWithTemplatesServerList[0], map[string]string{
		"hostname": "localhost",
		"port":     "35123",
	}))
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
}

func TestServerWithTemplatesDefaults(t *testing.T) {
	recordTest("servers-server-with-templates-defaults")

	s := sdk.New()

	res, err := s.Servers.ServerWithTemplates(context.Background())
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
}

func TestServerByIDWithTemplates(t *testing.T) {
	recordTest("servers-server-by-id-with-templates")

	s := sdk.New()

	res, err := s.Servers.ServersByIDWithTemplates(context.Background())
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
}

func TestGlobalServerWithTemplatedProtocol(t *testing.T) {
	recordTest("servers-global-server-with-templated-protocol")

	s := sdk.New(sdk.WithServerIndex(4), sdk.WithProtocol("http"), sdk.WithHostname("localhost"), sdk.WithPort("35123"))

	res, err := s.Servers.SelectGlobalServer(context.Background())
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
}

func TestGlobalServerWithInvalidTemplatedProtocol(t *testing.T) {
	recordTest("servers-global-server-with-invalid-templated-protocol")

	s := sdk.New(sdk.WithServerIndex(4), sdk.WithProtocol("invalid"), sdk.WithHostname("localhost"), sdk.WithPort("35123"))

	res, err := s.Servers.SelectGlobalServer(context.Background())
	assert.Error(t, err)
	assert.Nil(t, res)
}

func TestServerWithProtocolTemplate(t *testing.T) {
	recordTest("servers-server-with-protocol-template")

	s := sdk.New()

	res, err := s.Servers.ServerWithProtocolTemplate(context.Background(), operations.WithTemplatedServerURL(operations.ServerWithProtocolTemplateServerList[operations.ServerWithProtocolTemplateServerMain], map[string]string{
		"protocol": "http",
		"hostname": "localhost",
		"port":     "35123",
	}))
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
}

func TestServerWithInvalidProtocolTemplate(t *testing.T) {
	recordTest("servers-server-with-invalid-protocol-template")

	s := sdk.New()

	res, err := s.Servers.ServerWithProtocolTemplate(context.Background(), operations.WithTemplatedServerURL(operations.ServerWithProtocolTemplateServerList[operations.ServerWithProtocolTemplateServerMain], map[string]string{
		"protocol": "invalid",
		"hostname": "localhost",
		"port":     "35123",
	}))
	assert.Error(t, err)
	assert.Nil(t, res)
}

func TestServersOverrideGlobalServerURL(t *testing.T) {
	recordTest("servers-override-global-server-url")

	s := sdk.New()

	res, err := s.Servers.ServersOverrideGlobalServerURL(context.Background(), operations.WithServerURL("http://localhost:35123/anything"))
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, "http://localhost:35123/anything/ping", res.HTTPMeta.Request.URL.String())
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)

	res, err = s.Servers.ServersOverrideGlobalServerURL(context.Background(), operations.WithTemplatedServerURL("http://localhost:{port}", map[string]string{
		"port": "35456",
	}))
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, "http://localhost:35456/ping", res.HTTPMeta.Request.URL.String())
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
}

func TestServersOverrideOperationServerURL(t *testing.T) {
	recordTest("servers-override-operation-server-url")

	s := sdk.New()

	res, err := s.Servers.ServersOverrideOperationServerURL(context.Background(), operations.WithServerURL("http://localhost:35123/anything"))
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, "http://localhost:35123/anything/ping", res.HTTPMeta.Request.URL.String())
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)

	res, err = s.Servers.ServersOverrideOperationServerURL(context.Background(), operations.WithTemplatedServerURL("http://localhost:{port}", map[string]string{
		"port": "35456",
	}))
	require.NoError(t, err)
	require.NotNil(t, res)
	assert.Equal(t, "http://localhost:35456/ping", res.HTTPMeta.Request.URL.String())
	assert.Equal(t, http.StatusOK, res.HTTPMeta.Response.StatusCode)
}
