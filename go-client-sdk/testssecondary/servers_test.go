// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	"testing"

	sdk "openapi/v2"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestSelectGlobalServerValid(t *testing.T) {
	recordTest("servers-select-global-server-valid")

	url := sdk.ServerList[sdk.ServerDefaultServer]
	assert.Equal(t, "http://localhost:35123", url)
	s := sdk.New(sdk.WithServerURL(url))

	res, err := s.Servers.SelectGlobalServer(context.Background())
	require.NoError(t, err)
	require.NotNil(t, res)
}

func TestSelectGlobalServerBroken(t *testing.T) {
	recordTest("servers-select-global-server-broken")

	url := sdk.ServerList[sdk.ServerBrokenServer]
	assert.Equal(t, "http://broken", url)
	s := sdk.New(sdk.WithServerURL(url))

	res, err := s.Servers.SelectGlobalServer(context.Background())
	assert.Error(t, err)
	assert.Nil(t, res)
}

func TestSelectGlobalServerByNameDefault(t *testing.T) {
	recordTest("servers-select-global-server-by-name-default")

	s := sdk.New()

	res, err := s.Servers.SelectGlobalServer(context.Background())
	require.NoError(t, err)
	require.NotNil(t, res)
}

func TestSelectGlobalServerByNameValid(t *testing.T) {
	recordTest("servers-select-global-server-by-name-valid")

	assert.Equal(t, "default-server", sdk.ServerDefaultServer)
	s := sdk.New(sdk.WithServer(sdk.ServerDefaultServer))

	res, err := s.Servers.SelectGlobalServer(context.Background())
	require.NoError(t, err)
	require.NotNil(t, res)
}

func TestSelectGlobalServerByNameInvalid(t *testing.T) {
	recordTest("servers-select-global-server-by-name-invalid")

	defer func() {
		if r := recover(); r == nil {
			t.Error("Panic expected!", r)
		} else {
			assert.Equal(t, "server unknown not found", r.(error).Error())
		}
	}()

	sdk.New(sdk.WithServer("unknown"))
}

func TestSelectGlobalServerByNameBroken(t *testing.T) {
	recordTest("servers-select-global-server-by-name-broken")

	assert.Equal(t, "BrokenServer", sdk.ServerBrokenServer)
	s := sdk.New(sdk.WithServer(sdk.ServerBrokenServer))

	res, err := s.Servers.SelectGlobalServer(context.Background())
	assert.Error(t, err)
	assert.Nil(t, res)
}
