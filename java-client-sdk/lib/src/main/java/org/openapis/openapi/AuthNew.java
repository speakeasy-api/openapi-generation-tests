/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import java.net.http.HttpResponse;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.SerializedBody;

/**
 * Endpoints for testing authentication.
 */
public class AuthNew {
	
    /**
	 * API_KEY_AUTH_GLOBAL_NEW_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] API_KEY_AUTH_GLOBAL_NEW_SERVERS = {
        "http://localhost:35456",
    };
	
    /**
	 * AUTH_GLOBAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] AUTH_GLOBAL_SERVERS = {
        "http://localhost:35456",
    };
	
    /**
	 * BASIC_AUTH_NEW_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] BASIC_AUTH_NEW_SERVERS = {
        "http://localhost:35456",
    };
	
    /**
	 * MULTIPLE_MIXED_OPTIONS_AUTH_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] MULTIPLE_MIXED_OPTIONS_AUTH_SERVERS = {
        "http://localhost:35456",
    };
	
    /**
	 * MULTIPLE_MIXED_SCHEME_AUTH_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] MULTIPLE_MIXED_SCHEME_AUTH_SERVERS = {
        "http://localhost:35456",
    };
	
    /**
	 * MULTIPLE_OPTIONS_WITH_MIXED_SCHEMES_AUTH_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] MULTIPLE_OPTIONS_WITH_MIXED_SCHEMES_AUTH_SERVERS = {
        "http://localhost:35456",
    };
	
    /**
	 * MULTIPLE_OPTIONS_WITH_SIMPLE_SCHEMES_AUTH_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] MULTIPLE_OPTIONS_WITH_SIMPLE_SCHEMES_AUTH_SERVERS = {
        "http://localhost:35456",
    };
	
    /**
	 * MULTIPLE_SIMPLE_OPTIONS_AUTH_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] MULTIPLE_SIMPLE_OPTIONS_AUTH_SERVERS = {
        "http://localhost:35456",
    };
	
    /**
	 * MULTIPLE_SIMPLE_SCHEME_AUTH_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] MULTIPLE_SIMPLE_SCHEME_AUTH_SERVERS = {
        "http://localhost:35456",
    };
	
    /**
	 * OAUTH2_AUTH_NEW_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] OAUTH2_AUTH_NEW_SERVERS = {
        "http://localhost:35456",
    };
	
    /**
	 * OPEN_ID_CONNECT_AUTH_NEW_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] OPEN_ID_CONNECT_AUTH_NEW_SERVERS = {
        "http://localhost:35456",
    };
	
	private SDKConfiguration sdkConfiguration;

	public AuthNew(SDKConfiguration sdkConfiguration) {
		this.sdkConfiguration = sdkConfiguration;
	}

    public org.openapis.openapi.models.operations.ApiKeyAuthGlobalNewResponse apiKeyAuthGlobalNew(org.openapis.openapi.models.shared.AuthServiceRequestBody request) throws Exception {
        return this.apiKeyAuthGlobalNew(request, null);
    }

    public org.openapis.openapi.models.operations.ApiKeyAuthGlobalNewResponse apiKeyAuthGlobalNew(org.openapis.openapi.models.shared.AuthServiceRequestBody request, String serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(API_KEY_AUTH_GLOBAL_NEW_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/auth#apiKeyAuthGlobal");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ApiKeyAuthGlobalNewResponse res = new org.openapis.openapi.models.operations.ApiKeyAuthGlobalNewResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 401) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.AuthGlobalResponse authGlobal(org.openapis.openapi.models.shared.AuthServiceRequestBody request) throws Exception {
        return this.authGlobal(request, null);
    }

    public org.openapis.openapi.models.operations.AuthGlobalResponse authGlobal(org.openapis.openapi.models.shared.AuthServiceRequestBody request, String serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(AUTH_GLOBAL_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/auth#authGlobal");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AuthGlobalResponse res = new org.openapis.openapi.models.operations.AuthGlobalResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 401) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.BasicAuthNewResponse basicAuthNew(org.openapis.openapi.models.shared.AuthServiceRequestBody request, org.openapis.openapi.models.operations.BasicAuthNewSecurity security) throws Exception {
        return this.basicAuthNew(request, security, null);
    }

    public org.openapis.openapi.models.operations.BasicAuthNewResponse basicAuthNew(org.openapis.openapi.models.shared.AuthServiceRequestBody request, org.openapis.openapi.models.operations.BasicAuthNewSecurity security, String serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(BASIC_AUTH_NEW_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/auth#basicAuth");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BasicAuthNewResponse res = new org.openapis.openapi.models.operations.BasicAuthNewResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 401) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.MultipleMixedOptionsAuthResponse multipleMixedOptionsAuth(org.openapis.openapi.models.shared.AuthServiceRequestBody request, org.openapis.openapi.models.operations.MultipleMixedOptionsAuthSecurity security) throws Exception {
        return this.multipleMixedOptionsAuth(request, security, null);
    }

    public org.openapis.openapi.models.operations.MultipleMixedOptionsAuthResponse multipleMixedOptionsAuth(org.openapis.openapi.models.shared.AuthServiceRequestBody request, org.openapis.openapi.models.operations.MultipleMixedOptionsAuthSecurity security, String serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(MULTIPLE_MIXED_OPTIONS_AUTH_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/auth#multipleMixedOptionsAuth");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.MultipleMixedOptionsAuthResponse res = new org.openapis.openapi.models.operations.MultipleMixedOptionsAuthResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 401) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.MultipleMixedSchemeAuthResponse multipleMixedSchemeAuth(org.openapis.openapi.models.shared.AuthServiceRequestBody request, org.openapis.openapi.models.operations.MultipleMixedSchemeAuthSecurity security) throws Exception {
        return this.multipleMixedSchemeAuth(request, security, null);
    }

    public org.openapis.openapi.models.operations.MultipleMixedSchemeAuthResponse multipleMixedSchemeAuth(org.openapis.openapi.models.shared.AuthServiceRequestBody request, org.openapis.openapi.models.operations.MultipleMixedSchemeAuthSecurity security, String serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(MULTIPLE_MIXED_SCHEME_AUTH_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/auth#multipleMixedSchemeAuth");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.MultipleMixedSchemeAuthResponse res = new org.openapis.openapi.models.operations.MultipleMixedSchemeAuthResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 401) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthResponse multipleOptionsWithMixedSchemesAuth(org.openapis.openapi.models.shared.AuthServiceRequestBody request, org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthSecurity security) throws Exception {
        return this.multipleOptionsWithMixedSchemesAuth(request, security, null);
    }

    public org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthResponse multipleOptionsWithMixedSchemesAuth(org.openapis.openapi.models.shared.AuthServiceRequestBody request, org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthSecurity security, String serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(MULTIPLE_OPTIONS_WITH_MIXED_SCHEMES_AUTH_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/auth#multipleOptionsWithMixedSchemesAuth");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthResponse res = new org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 401) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthResponse multipleOptionsWithSimpleSchemesAuth(org.openapis.openapi.models.shared.AuthServiceRequestBody request, org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthSecurity security) throws Exception {
        return this.multipleOptionsWithSimpleSchemesAuth(request, security, null);
    }

    public org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthResponse multipleOptionsWithSimpleSchemesAuth(org.openapis.openapi.models.shared.AuthServiceRequestBody request, org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthSecurity security, String serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(MULTIPLE_OPTIONS_WITH_SIMPLE_SCHEMES_AUTH_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/auth#multipleOptionsWithSimpleSchemesAuth");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthResponse res = new org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 401) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.MultipleSimpleOptionsAuthResponse multipleSimpleOptionsAuth(org.openapis.openapi.models.shared.AuthServiceRequestBody request, org.openapis.openapi.models.operations.MultipleSimpleOptionsAuthSecurity security) throws Exception {
        return this.multipleSimpleOptionsAuth(request, security, null);
    }

    public org.openapis.openapi.models.operations.MultipleSimpleOptionsAuthResponse multipleSimpleOptionsAuth(org.openapis.openapi.models.shared.AuthServiceRequestBody request, org.openapis.openapi.models.operations.MultipleSimpleOptionsAuthSecurity security, String serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(MULTIPLE_SIMPLE_OPTIONS_AUTH_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/auth#multipleSimpleOptionsAuth");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.MultipleSimpleOptionsAuthResponse res = new org.openapis.openapi.models.operations.MultipleSimpleOptionsAuthResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 401) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.MultipleSimpleSchemeAuthResponse multipleSimpleSchemeAuth(org.openapis.openapi.models.shared.AuthServiceRequestBody request, org.openapis.openapi.models.operations.MultipleSimpleSchemeAuthSecurity security) throws Exception {
        return this.multipleSimpleSchemeAuth(request, security, null);
    }

    public org.openapis.openapi.models.operations.MultipleSimpleSchemeAuthResponse multipleSimpleSchemeAuth(org.openapis.openapi.models.shared.AuthServiceRequestBody request, org.openapis.openapi.models.operations.MultipleSimpleSchemeAuthSecurity security, String serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(MULTIPLE_SIMPLE_SCHEME_AUTH_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/auth#multipleSimpleSchemeAuth");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.MultipleSimpleSchemeAuthResponse res = new org.openapis.openapi.models.operations.MultipleSimpleSchemeAuthResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 401) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.Oauth2AuthNewResponse oauth2AuthNew(org.openapis.openapi.models.shared.AuthServiceRequestBody request, org.openapis.openapi.models.operations.Oauth2AuthNewSecurity security) throws Exception {
        return this.oauth2AuthNew(request, security, null);
    }

    public org.openapis.openapi.models.operations.Oauth2AuthNewResponse oauth2AuthNew(org.openapis.openapi.models.shared.AuthServiceRequestBody request, org.openapis.openapi.models.operations.Oauth2AuthNewSecurity security, String serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(OAUTH2_AUTH_NEW_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/auth#oauth2Auth");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.Oauth2AuthNewResponse res = new org.openapis.openapi.models.operations.Oauth2AuthNewResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 401) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.OpenIdConnectAuthNewResponse openIdConnectAuthNew(org.openapis.openapi.models.shared.AuthServiceRequestBody request, org.openapis.openapi.models.operations.OpenIdConnectAuthNewSecurity security) throws Exception {
        return this.openIdConnectAuthNew(request, security, null);
    }

    public org.openapis.openapi.models.operations.OpenIdConnectAuthNewResponse openIdConnectAuthNew(org.openapis.openapi.models.shared.AuthServiceRequestBody request, org.openapis.openapi.models.operations.OpenIdConnectAuthNewSecurity security, String serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(OPEN_ID_CONNECT_AUTH_NEW_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/auth#openIdConnectAuth");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OpenIdConnectAuthNewResponse res = new org.openapis.openapi.models.operations.OpenIdConnectAuthNewResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 401) {
        }

        return res;
    }
}