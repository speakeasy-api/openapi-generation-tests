/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;

/**
 * Endpoints for testing error responses.
 */
public class Errors {
	
    /**
	 * CONNECTION_ERROR_GET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CONNECTION_ERROR_GET_SERVERS = {
        "http://somebrokenapi.broken",
    };
	
    /**
	 * STATUS_GET_X_SPEAKEASY_ERRORS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] STATUS_GET_X_SPEAKEASY_ERRORS_SERVERS = {
        "http://localhost:35456",
    };
	
	private SDKConfiguration sdkConfiguration;

	public Errors(SDKConfiguration sdkConfiguration) {
		this.sdkConfiguration = sdkConfiguration;
	}

    public org.openapis.openapi.models.operations.ConnectionErrorGetResponse connectionErrorGet() throws Exception {
        return this.connectionErrorGet(null);
    }

    public org.openapis.openapi.models.operations.ConnectionErrorGetResponse connectionErrorGet(String serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(CONNECTION_ERROR_GET_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/anything/connectionError");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.ConnectionErrorGetResponse res = new org.openapis.openapi.models.operations.ConnectionErrorGetResponse(contentType, httpRes.statusCode(), httpRes) {{
        }};
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.StatusGetErrorResponse statusGetError(Long statusCode) throws Exception {
        org.openapis.openapi.models.operations.StatusGetErrorRequest request = new org.openapis.openapi.models.operations.StatusGetErrorRequest(statusCode);
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.StatusGetErrorRequest.class, baseUrl, "/status/{statusCode}", request, this.sdkConfiguration.globals);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.StatusGetErrorResponse res = new org.openapis.openapi.models.operations.StatusGetErrorResponse(contentType, httpRes.statusCode(), httpRes) {{
        }};
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 300 || httpRes.statusCode() == 400 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.StatusGetXSpeakeasyErrorsResponse statusGetXSpeakeasyErrors(Long statusCode) throws Exception {
        return this.statusGetXSpeakeasyErrors(statusCode, null);
    }

    public org.openapis.openapi.models.operations.StatusGetXSpeakeasyErrorsResponse statusGetXSpeakeasyErrors(Long statusCode, String serverURL) throws Exception {
        org.openapis.openapi.models.operations.StatusGetXSpeakeasyErrorsRequest request = new org.openapis.openapi.models.operations.StatusGetXSpeakeasyErrorsRequest(statusCode);
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(STATUS_GET_X_SPEAKEASY_ERRORS_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.StatusGetXSpeakeasyErrorsRequest.class, baseUrl, "/errors/{statusCode}", request, this.sdkConfiguration.globals);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.StatusGetXSpeakeasyErrorsResponse res = new org.openapis.openapi.models.operations.StatusGetXSpeakeasyErrorsResponse(contentType, httpRes.statusCode(), httpRes) {{
            error = null;
            object = null;
        }};
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 300 || httpRes.statusCode() == 400) {
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Error out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Error.class);
                res.error = out;
            }
        }
        else if (httpRes.statusCode() == 501) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.StatusGetXSpeakeasyErrorsResponseBody out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.StatusGetXSpeakeasyErrorsResponseBody.class);
                res.object = out;
            }
        }

        return res;
    }
}