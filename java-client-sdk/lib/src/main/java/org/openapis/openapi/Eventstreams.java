/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * Endpoints for testing server-sent events streaming
 */
public class Eventstreams {
	
    /**
	 * CHAT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CHAT_SERVERS = {
        "http://localhost:35456",
    };
	
    /**
	 * JSON_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] JSON_SERVERS = {
        "http://localhost:35456",
    };
	
    /**
	 * MULTILINE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] MULTILINE_SERVERS = {
        "http://localhost:35456",
    };
	
    /**
	 * RICH_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] RICH_SERVERS = {
        "http://localhost:35456",
    };
	
    /**
	 * TEXT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] TEXT_SERVERS = {
        "http://localhost:35456",
    };
	
	private SDKConfiguration sdkConfiguration;

	public Eventstreams(SDKConfiguration sdkConfiguration) {
		this.sdkConfiguration = sdkConfiguration;
	}

    public org.openapis.openapi.models.operations.ChatResponse chat(org.openapis.openapi.models.operations.ChatRequestBody request) throws Exception {
        return this.chat(request, null);
    }

    public org.openapis.openapi.models.operations.ChatResponse chat(org.openapis.openapi.models.operations.ChatRequestBody request, String serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(CHAT_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/eventstreams/chat");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json;q=1, text/event-stream;q=0");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.ChatResponse res = new org.openapis.openapi.models.operations.ChatResponse(contentType, httpRes.statusCode(), httpRes) {{
            chatCompletionResult = null;
            body = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object[].class);
                res.chatCompletionResult = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/event-stream")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.JsonResponse json() throws Exception {
        return this.json(null);
    }

    public org.openapis.openapi.models.operations.JsonResponse json(String serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(JSON_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/eventstreams/json");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "text/event-stream");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.JsonResponse res = new org.openapis.openapi.models.operations.JsonResponse(contentType, httpRes.statusCode(), httpRes) {{
            body = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/event-stream")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.MultilineResponse multiline() throws Exception {
        return this.multiline(null);
    }

    public org.openapis.openapi.models.operations.MultilineResponse multiline(String serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(MULTILINE_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/eventstreams/multiline");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "text/event-stream");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.MultilineResponse res = new org.openapis.openapi.models.operations.MultilineResponse(contentType, httpRes.statusCode(), httpRes) {{
            body = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/event-stream")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.RichResponse rich() throws Exception {
        return this.rich(null);
    }

    public org.openapis.openapi.models.operations.RichResponse rich(String serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(RICH_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/eventstreams/rich");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "text/event-stream");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.RichResponse res = new org.openapis.openapi.models.operations.RichResponse(contentType, httpRes.statusCode(), httpRes) {{
            body = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/event-stream")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.TextResponse text() throws Exception {
        return this.text(null);
    }

    public org.openapis.openapi.models.operations.TextResponse text(String serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(TEXT_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/eventstreams/text");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "text/event-stream");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.TextResponse res = new org.openapis.openapi.models.operations.TextResponse(contentType, httpRes.statusCode(), httpRes) {{
            body = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/event-stream")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }
}