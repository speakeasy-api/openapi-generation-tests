/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;

/**
 * Endpoints for testing parameters.
 */
public class Parameters {
	
	private SDKConfiguration sdkConfiguration;

	public Parameters(SDKConfiguration sdkConfiguration) {
		this.sdkConfiguration = sdkConfiguration;
	}

    public org.openapis.openapi.models.operations.DeepObjectQueryParamsMapResponse deepObjectQueryParamsMap(java.util.Map<String, String> mapParam) throws Exception {
        return this.deepObjectQueryParamsMap(mapParam, null);
    }

    public org.openapis.openapi.models.operations.DeepObjectQueryParamsMapResponse deepObjectQueryParamsMap(java.util.Map<String, String> mapParam, java.util.Map<String, String[]> mapArrParam) throws Exception {
        org.openapis.openapi.models.operations.DeepObjectQueryParamsMapRequest request = new org.openapis.openapi.models.operations.DeepObjectQueryParamsMapRequest(mapParam);
        request.mapArrParam=mapArrParam;
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/anything/queryParams/deepObject/map");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DeepObjectQueryParamsMapRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeepObjectQueryParamsMapResponse res = new org.openapis.openapi.models.operations.DeepObjectQueryParamsMapResponse(contentType, httpRes.statusCode()) {{
            res = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DeepObjectQueryParamsMapRes out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.DeepObjectQueryParamsMapRes.class);
                res.res = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeepObjectQueryParamsObjectResponse deepObjectQueryParamsObject(org.openapis.openapi.models.shared.SimpleObject objParam) throws Exception {
        return this.deepObjectQueryParamsObject(objParam, null);
    }

    public org.openapis.openapi.models.operations.DeepObjectQueryParamsObjectResponse deepObjectQueryParamsObject(org.openapis.openapi.models.shared.SimpleObject objParam, org.openapis.openapi.models.operations.DeepObjectQueryParamsObjectObjArrParam objArrParam) throws Exception {
        org.openapis.openapi.models.operations.DeepObjectQueryParamsObjectRequest request = new org.openapis.openapi.models.operations.DeepObjectQueryParamsObjectRequest(objParam);
        request.objArrParam=objArrParam;
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/anything/queryParams/deepObject/obj");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DeepObjectQueryParamsObjectRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeepObjectQueryParamsObjectResponse res = new org.openapis.openapi.models.operations.DeepObjectQueryParamsObjectResponse(contentType, httpRes.statusCode()) {{
            res = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DeepObjectQueryParamsObjectRes out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.DeepObjectQueryParamsObjectRes.class);
                res.res = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FormQueryParamsArrayResponse formQueryParamsArray() throws Exception {
        return this.formQueryParamsArray(null, null);
    }

    public org.openapis.openapi.models.operations.FormQueryParamsArrayResponse formQueryParamsArray(String[] arrParam) throws Exception {
        return this.formQueryParamsArray(arrParam, null);
    }

    public org.openapis.openapi.models.operations.FormQueryParamsArrayResponse formQueryParamsArray(String[] arrParam, Long[] arrParamExploded) throws Exception {
        org.openapis.openapi.models.operations.FormQueryParamsArrayRequest request = new org.openapis.openapi.models.operations.FormQueryParamsArrayRequest();
        request.arrParam=arrParam;
        request.arrParamExploded=arrParamExploded;
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/anything/queryParams/form/array");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FormQueryParamsArrayRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FormQueryParamsArrayResponse res = new org.openapis.openapi.models.operations.FormQueryParamsArrayResponse(contentType, httpRes.statusCode()) {{
            res = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.FormQueryParamsArrayRes out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.FormQueryParamsArrayRes.class);
                res.res = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FormQueryParamsMapResponse formQueryParamsMap() throws Exception {
        return this.formQueryParamsMap(null, null);
    }

    public org.openapis.openapi.models.operations.FormQueryParamsMapResponse formQueryParamsMap(java.util.Map<String, String> mapParam) throws Exception {
        return this.formQueryParamsMap(mapParam, null);
    }

    public org.openapis.openapi.models.operations.FormQueryParamsMapResponse formQueryParamsMap(java.util.Map<String, String> mapParam, java.util.Map<String, Long> mapParamExploded) throws Exception {
        org.openapis.openapi.models.operations.FormQueryParamsMapRequest request = new org.openapis.openapi.models.operations.FormQueryParamsMapRequest();
        request.mapParam=mapParam;
        request.mapParamExploded=mapParamExploded;
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/anything/queryParams/form/map");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FormQueryParamsMapRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FormQueryParamsMapResponse res = new org.openapis.openapi.models.operations.FormQueryParamsMapResponse(contentType, httpRes.statusCode()) {{
            res = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.FormQueryParamsMapRes out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.FormQueryParamsMapRes.class);
                res.res = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FormQueryParamsObjectResponse formQueryParamsObject(org.openapis.openapi.models.shared.SimpleObject objParamExploded) throws Exception {
        return this.formQueryParamsObject(objParamExploded, null);
    }

    public org.openapis.openapi.models.operations.FormQueryParamsObjectResponse formQueryParamsObject(org.openapis.openapi.models.shared.SimpleObject objParamExploded, org.openapis.openapi.models.shared.SimpleObject objParam) throws Exception {
        org.openapis.openapi.models.operations.FormQueryParamsObjectRequest request = new org.openapis.openapi.models.operations.FormQueryParamsObjectRequest(objParamExploded);
        request.objParam=objParam;
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/anything/queryParams/form/obj");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FormQueryParamsObjectRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FormQueryParamsObjectResponse res = new org.openapis.openapi.models.operations.FormQueryParamsObjectResponse(contentType, httpRes.statusCode()) {{
            res = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.FormQueryParamsObjectRes out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.FormQueryParamsObjectRes.class);
                res.res = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FormQueryParamsPrimitiveResponse formQueryParamsPrimitive(Boolean boolParam, Long intParam, Double numParam, String strParam) throws Exception {
        org.openapis.openapi.models.operations.FormQueryParamsPrimitiveRequest request = new org.openapis.openapi.models.operations.FormQueryParamsPrimitiveRequest(boolParam, intParam, numParam, strParam);
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/anything/queryParams/form/primitive");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FormQueryParamsPrimitiveRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FormQueryParamsPrimitiveResponse res = new org.openapis.openapi.models.operations.FormQueryParamsPrimitiveResponse(contentType, httpRes.statusCode()) {{
            res = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.FormQueryParamsPrimitiveRes out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.FormQueryParamsPrimitiveRes.class);
                res.res = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FormQueryParamsRefParamObjectResponse formQueryParamsRefParamObject() throws Exception {
        return this.formQueryParamsRefParamObject(null, null);
    }

    public org.openapis.openapi.models.operations.FormQueryParamsRefParamObjectResponse formQueryParamsRefParamObject(org.openapis.openapi.models.shared.RefQueryParamObjExploded refObjParamExploded) throws Exception {
        return this.formQueryParamsRefParamObject(null, refObjParamExploded);
    }

    public org.openapis.openapi.models.operations.FormQueryParamsRefParamObjectResponse formQueryParamsRefParamObject(org.openapis.openapi.models.shared.RefQueryParamObj refObjParam) throws Exception {
        return this.formQueryParamsRefParamObject(refObjParam, null);
    }

    public org.openapis.openapi.models.operations.FormQueryParamsRefParamObjectResponse formQueryParamsRefParamObject(org.openapis.openapi.models.shared.RefQueryParamObj refObjParam, org.openapis.openapi.models.shared.RefQueryParamObjExploded refObjParamExploded) throws Exception {
        org.openapis.openapi.models.operations.FormQueryParamsRefParamObjectRequest request = new org.openapis.openapi.models.operations.FormQueryParamsRefParamObjectRequest();
        request.refObjParam=refObjParam;
        request.refObjParamExploded=refObjParamExploded;
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/anything/queryParams/form/refParamObject");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FormQueryParamsRefParamObjectRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FormQueryParamsRefParamObjectResponse res = new org.openapis.openapi.models.operations.FormQueryParamsRefParamObjectResponse(contentType, httpRes.statusCode()) {{
            res = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.FormQueryParamsRefParamObjectRes out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.FormQueryParamsRefParamObjectRes.class);
                res.res = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.HeaderParamsArrayResponse headerParamsArray(String[] xHeaderArray) throws Exception {
        org.openapis.openapi.models.operations.HeaderParamsArrayRequest request = new org.openapis.openapi.models.operations.HeaderParamsArrayRequest(xHeaderArray);
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/anything/headers/array");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.HeaderParamsArrayResponse res = new org.openapis.openapi.models.operations.HeaderParamsArrayResponse(contentType, httpRes.statusCode()) {{
            res = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.HeaderParamsArrayRes out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.HeaderParamsArrayRes.class);
                res.res = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.HeaderParamsMapResponse headerParamsMap(java.util.Map<String, String> xHeaderMap, java.util.Map<String, String> xHeaderMapExplode) throws Exception {
        org.openapis.openapi.models.operations.HeaderParamsMapRequest request = new org.openapis.openapi.models.operations.HeaderParamsMapRequest(xHeaderMap, xHeaderMapExplode);
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/anything/headers/map");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.HeaderParamsMapResponse res = new org.openapis.openapi.models.operations.HeaderParamsMapResponse(contentType, httpRes.statusCode()) {{
            res = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.HeaderParamsMapRes out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.HeaderParamsMapRes.class);
                res.res = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.HeaderParamsObjectResponse headerParamsObject(org.openapis.openapi.models.shared.SimpleObject xHeaderObj, org.openapis.openapi.models.shared.SimpleObject xHeaderObjExplode) throws Exception {
        org.openapis.openapi.models.operations.HeaderParamsObjectRequest request = new org.openapis.openapi.models.operations.HeaderParamsObjectRequest(xHeaderObj, xHeaderObjExplode);
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/anything/headers/obj");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.HeaderParamsObjectResponse res = new org.openapis.openapi.models.operations.HeaderParamsObjectResponse(contentType, httpRes.statusCode()) {{
            res = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.HeaderParamsObjectRes out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.HeaderParamsObjectRes.class);
                res.res = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.HeaderParamsPrimitiveResponse headerParamsPrimitive(Boolean xHeaderBoolean, Long xHeaderInteger, Double xHeaderNumber, String xHeaderString) throws Exception {
        org.openapis.openapi.models.operations.HeaderParamsPrimitiveRequest request = new org.openapis.openapi.models.operations.HeaderParamsPrimitiveRequest(xHeaderBoolean, xHeaderInteger, xHeaderNumber, xHeaderString);
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/anything/headers/primitive");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.HeaderParamsPrimitiveResponse res = new org.openapis.openapi.models.operations.HeaderParamsPrimitiveResponse(contentType, httpRes.statusCode()) {{
            res = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.HeaderParamsPrimitiveRes out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.HeaderParamsPrimitiveRes.class);
                res.res = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.JsonQueryParamsObjectResponse jsonQueryParamsObject(org.openapis.openapi.models.shared.DeepObject deepObjParam, org.openapis.openapi.models.shared.SimpleObject simpleObjParam) throws Exception {
        org.openapis.openapi.models.operations.JsonQueryParamsObjectRequest request = new org.openapis.openapi.models.operations.JsonQueryParamsObjectRequest(deepObjParam, simpleObjParam);
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/anything/queryParams/json/obj");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.JsonQueryParamsObjectRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.JsonQueryParamsObjectResponse res = new org.openapis.openapi.models.operations.JsonQueryParamsObjectResponse(contentType, httpRes.statusCode()) {{
            res = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.JsonQueryParamsObjectRes out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.JsonQueryParamsObjectRes.class);
                res.res = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.MixedQueryParamsResponse mixedQueryParams(org.openapis.openapi.models.shared.SimpleObject deepObjectParam, org.openapis.openapi.models.shared.SimpleObject formParam, org.openapis.openapi.models.shared.SimpleObject jsonParam) throws Exception {
        org.openapis.openapi.models.operations.MixedQueryParamsRequest request = new org.openapis.openapi.models.operations.MixedQueryParamsRequest(deepObjectParam, formParam, jsonParam);
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/anything/queryParams/mixed");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.MixedQueryParamsRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.MixedQueryParamsResponse res = new org.openapis.openapi.models.operations.MixedQueryParamsResponse(contentType, httpRes.statusCode()) {{
            res = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.MixedQueryParamsRes out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.MixedQueryParamsRes.class);
                res.res = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.PathParameterJsonResponse pathParameterJson(org.openapis.openapi.models.shared.SimpleObject jsonObj) throws Exception {
        org.openapis.openapi.models.operations.PathParameterJsonRequest request = new org.openapis.openapi.models.operations.PathParameterJsonRequest(jsonObj);
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PathParameterJsonRequest.class, baseUrl, "/anything/pathParams/json/{jsonObj}", request, this.sdkConfiguration.globals);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PathParameterJsonResponse res = new org.openapis.openapi.models.operations.PathParameterJsonResponse(contentType, httpRes.statusCode()) {{
            res = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PathParameterJsonRes out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PathParameterJsonRes.class);
                res.res = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayResponse pipeDelimitedQueryParamsArray() throws Exception {
        return this.pipeDelimitedQueryParamsArray(null, null, null, null);
    }

    public org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayResponse pipeDelimitedQueryParamsArray(org.openapis.openapi.models.shared.SimpleObject objParam) throws Exception {
        return this.pipeDelimitedQueryParamsArray(null, null, null, objParam);
    }

    public org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayResponse pipeDelimitedQueryParamsArray(java.util.Map<String, String> mapParam) throws Exception {
        return this.pipeDelimitedQueryParamsArray(null, null, mapParam, null);
    }

    public org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayResponse pipeDelimitedQueryParamsArray(java.util.Map<String, String> mapParam, org.openapis.openapi.models.shared.SimpleObject objParam) throws Exception {
        return this.pipeDelimitedQueryParamsArray(null, null, mapParam, objParam);
    }

    public org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayResponse pipeDelimitedQueryParamsArray(String[] arrParam) throws Exception {
        return this.pipeDelimitedQueryParamsArray(arrParam, null, null, null);
    }

    public org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayResponse pipeDelimitedQueryParamsArray(String[] arrParam, org.openapis.openapi.models.shared.SimpleObject objParam) throws Exception {
        return this.pipeDelimitedQueryParamsArray(arrParam, null, null, objParam);
    }

    public org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayResponse pipeDelimitedQueryParamsArray(String[] arrParam, java.util.Map<String, String> mapParam) throws Exception {
        return this.pipeDelimitedQueryParamsArray(arrParam, null, mapParam, null);
    }

    public org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayResponse pipeDelimitedQueryParamsArray(String[] arrParam, java.util.Map<String, String> mapParam, org.openapis.openapi.models.shared.SimpleObject objParam) throws Exception {
        return this.pipeDelimitedQueryParamsArray(arrParam, null, mapParam, objParam);
    }

    public org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayResponse pipeDelimitedQueryParamsArray(String[] arrParam, Long[] arrParamExploded) throws Exception {
        return this.pipeDelimitedQueryParamsArray(arrParam, arrParamExploded, null, null);
    }

    public org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayResponse pipeDelimitedQueryParamsArray(String[] arrParam, Long[] arrParamExploded, org.openapis.openapi.models.shared.SimpleObject objParam) throws Exception {
        return this.pipeDelimitedQueryParamsArray(arrParam, arrParamExploded, null, objParam);
    }

    public org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayResponse pipeDelimitedQueryParamsArray(String[] arrParam, Long[] arrParamExploded, java.util.Map<String, String> mapParam) throws Exception {
        return this.pipeDelimitedQueryParamsArray(arrParam, arrParamExploded, mapParam, null);
    }

    public org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayResponse pipeDelimitedQueryParamsArray(String[] arrParam, Long[] arrParamExploded, java.util.Map<String, String> mapParam, org.openapis.openapi.models.shared.SimpleObject objParam) throws Exception {
        org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayRequest request = new org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayRequest();
        request.arrParam=arrParam;
        request.arrParamExploded=arrParamExploded;
        request.mapParam=mapParam;
        request.objParam=objParam;
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/anything/queryParams/pipe/array");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayResponse res = new org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayResponse(contentType, httpRes.statusCode()) {{
            res = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayRes out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayRes.class);
                res.res = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.SimplePathParameterArraysResponse simplePathParameterArrays(String[] arrParam) throws Exception {
        org.openapis.openapi.models.operations.SimplePathParameterArraysRequest request = new org.openapis.openapi.models.operations.SimplePathParameterArraysRequest(arrParam);
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.SimplePathParameterArraysRequest.class, baseUrl, "/anything/pathParams/arr/{arrParam}", request, this.sdkConfiguration.globals);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SimplePathParameterArraysResponse res = new org.openapis.openapi.models.operations.SimplePathParameterArraysResponse(contentType, httpRes.statusCode()) {{
            res = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SimplePathParameterArraysRes out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SimplePathParameterArraysRes.class);
                res.res = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.SimplePathParameterMapsResponse simplePathParameterMaps(java.util.Map<String, String> mapParam, java.util.Map<String, Long> mapParamExploded) throws Exception {
        org.openapis.openapi.models.operations.SimplePathParameterMapsRequest request = new org.openapis.openapi.models.operations.SimplePathParameterMapsRequest(mapParam, mapParamExploded);
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.SimplePathParameterMapsRequest.class, baseUrl, "/anything/pathParams/map/{mapParam}/mapExploded/{mapParamExploded}", request, this.sdkConfiguration.globals);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SimplePathParameterMapsResponse res = new org.openapis.openapi.models.operations.SimplePathParameterMapsResponse(contentType, httpRes.statusCode()) {{
            res = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SimplePathParameterMapsRes out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SimplePathParameterMapsRes.class);
                res.res = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.SimplePathParameterObjectsResponse simplePathParameterObjects(org.openapis.openapi.models.shared.SimpleObject objParam, org.openapis.openapi.models.shared.SimpleObject objParamExploded) throws Exception {
        org.openapis.openapi.models.operations.SimplePathParameterObjectsRequest request = new org.openapis.openapi.models.operations.SimplePathParameterObjectsRequest(objParam, objParamExploded);
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.SimplePathParameterObjectsRequest.class, baseUrl, "/anything/pathParams/obj/{objParam}/objExploded/{objParamExploded}", request, this.sdkConfiguration.globals);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SimplePathParameterObjectsResponse res = new org.openapis.openapi.models.operations.SimplePathParameterObjectsResponse(contentType, httpRes.statusCode()) {{
            res = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SimplePathParameterObjectsRes out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SimplePathParameterObjectsRes.class);
                res.res = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.SimplePathParameterPrimitivesResponse simplePathParameterPrimitives(Boolean boolParam, Long intParam, Double numParam, String strParam) throws Exception {
        org.openapis.openapi.models.operations.SimplePathParameterPrimitivesRequest request = new org.openapis.openapi.models.operations.SimplePathParameterPrimitivesRequest(boolParam, intParam, numParam, strParam);
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.SimplePathParameterPrimitivesRequest.class, baseUrl, "/anything/pathParams/str/{strParam}/bool/{boolParam}/int/{intParam}/num/{numParam}", request, this.sdkConfiguration.globals);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SimplePathParameterPrimitivesResponse res = new org.openapis.openapi.models.operations.SimplePathParameterPrimitivesResponse(contentType, httpRes.statusCode()) {{
            res = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SimplePathParameterPrimitivesRes out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SimplePathParameterPrimitivesRes.class);
                res.res = out;
            }
        }

        return res;
    }
}