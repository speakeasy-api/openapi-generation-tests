/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * Test: Test Summary
 * Some test description.
 * About our test document.
 * https://speakeasyapi.dev/docs/home - Speakeasy Docs
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        /**
         * The default server.
         */
        "http://localhost:35123",
        /**
         * A server url to a non-existent server.
         */
        "http://broken",
        /**
         * A server url with templated variables.
         */
        "http://{hostname}:{port}",
        /**
         * A server url with templated variables.
         */
        "http://localhost:35123/anything/{something}",
	};
	
	
  	
    /**
     * Endpoints for testing authentication.
     */
    public Auth auth;
    /**
     * Endpoints for testing authentication.
     */
    public AuthNew authNew;
    /**
     * Endpoints for testing error responses.
     */
    public Errors errors;
    /**
     * Endpoints for testing flattening through request body and parameter combinations.
     */
    public Flattening flattening;
    /**
     * Endpoints for purely testing valid generation behavior.
     */
    public Generation generation;
    /**
     * Endpoints for testing global parameters.
     */
    public Globals globals;
    /**
     * Endpoints for testing the pagination extension
     */
    public Pagination pagination;
    /**
     * Endpoints for testing parameters.
     */
    public Parameters parameters;
    /**
     * Endpoints for testing request bodies.
     */
    public RequestBodies requestBodies;
    public Resource resource;
    /**
     * Endpoints for testing response bodies.
     */
    public ResponseBodies responseBodies;
    /**
     * Endpoints for testing servers.
     */
    public Servers servers;
    /**
     * Endpoints for testing telemetry.
     */
    public Telemetry telemetry;
    /**
     * Endpoints for testing union types.
     */
    public Unions unions;	

	private SDKConfiguration sdkConfiguration;

	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private SDKConfiguration sdkConfiguration = new SDKConfiguration();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.sdkConfiguration.defaultClient = client;
			return this;
		}
		
		/**
		 * Configures the SDK to use the provided security details.
		 * @param security The security details to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setSecurity(org.openapis.openapi.models.shared.Security security) {
			this.sdkConfiguration.security = security;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.sdkConfiguration.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.sdkConfiguration.serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
			return this;
		}
		
		/**
		 * Allows the overriding of the default server by index
		 * @param serverIdx The server to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerIndex(int serverIdx) {
			this.sdkConfiguration.serverIdx = serverIdx;
			this.sdkConfiguration.serverUrl = SERVERS[serverIdx];
			return this;
		}
		
		/**
		 * Allows setting the $name variable for url substitution.
		 * @param hostname The value to set.
		 * @return The builder instance.
		 */
		public Builder setHostname(String hostname) {
			for (java.util.Map<String, String> server : this.sdkConfiguration.serverDefaults) {
				if (!server.containsKey("hostname")) {
					continue;
				}
				server.put("hostname", hostname.toString());
			}

			return this;
		}
		
		/**
		 * Allows setting the $name variable for url substitution.
		 * @param port The value to set.
		 * @return The builder instance.
		 */
		public Builder setPort(String port) {
			for (java.util.Map<String, String> server : this.sdkConfiguration.serverDefaults) {
				if (!server.containsKey("port")) {
					continue;
				}
				server.put("port", port.toString());
			}

			return this;
		}
		        
        /**
         * ServerSomething - Something is a variable for changing the root path
         */
        public enum ServerSomething {
            SOMETHING("something"),
            SOMETHING_ELSE("somethingElse"),
            SOMETHING_ELSE_AGAIN("somethingElseAgain");
        
            @JsonValue
            public final String value;
        
            private ServerSomething(String value) {
                this.value = value;
            }
        }
        
		/**
		 * Allows setting the $name variable for url substitution.
		 * @param something The value to set.
		 * @return The builder instance.
		 */
		public Builder setSomething(ServerSomething something) {
			for (java.util.Map<String, String> server : this.sdkConfiguration.serverDefaults) {
				if (!server.containsKey("something")) {
					continue;
				}
				server.put("something", something.toString());
			}

			return this;
		}
		
		/**
		 * Allows setting the globalPathParam parameter for all supported operations.
		 * @param globalPathParam The value to set.
		 * @return The builder instance.
		 */
		public Builder setGlobalPathParam(Long globalPathParam) {
			if (!this.sdkConfiguration.globals.get("parameters").containsKey("pathParam")) {
				this.sdkConfiguration.globals.get("parameters").put("pathParam", new java.util.HashMap<String, Object>());
			}

			this.sdkConfiguration.globals.get("parameters").get("pathParam").put("globalPathParam", globalPathParam);

			return this;
		}
		
		/**
		 * Allows setting the globalQueryParam parameter for all supported operations.
		 * @param globalQueryParam The value to set.
		 * @return The builder instance.
		 */
		public Builder setGlobalQueryParam(String globalQueryParam) {
			if (!this.sdkConfiguration.globals.get("parameters").containsKey("queryParam")) {
				this.sdkConfiguration.globals.get("parameters").put("queryParam", new java.util.HashMap<String, Object>());
			}

			this.sdkConfiguration.globals.get("parameters").get("queryParam").put("globalQueryParam", globalQueryParam);

			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			if (this.sdkConfiguration.defaultClient == null) {
				this.sdkConfiguration.defaultClient = new SpeakeasyHTTPClient();
			}
			
			if (this.sdkConfiguration.security != null) {
				this.sdkConfiguration.securityClient = org.openapis.openapi.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, this.sdkConfiguration.security);
			}
			
			if (this.sdkConfiguration.securityClient == null) {
				this.sdkConfiguration.securityClient = this.sdkConfiguration.defaultClient;
			}
			
			if (this.sdkConfiguration.serverUrl == null || this.sdkConfiguration.serverUrl.isBlank()) {
				this.sdkConfiguration.serverUrl = SERVERS[0];
				this.sdkConfiguration.serverIdx = 0;
			}

			if (this.sdkConfiguration.serverUrl.endsWith("/")) {
				this.sdkConfiguration.serverUrl = this.sdkConfiguration.serverUrl.substring(0, this.sdkConfiguration.serverUrl.length() - 1);
			}
			
			return new SDK(this.sdkConfiguration);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(SDKConfiguration sdkConfiguration) throws Exception {
		this.sdkConfiguration = sdkConfiguration;
		
		this.auth = new Auth(this.sdkConfiguration);
		
		this.authNew = new AuthNew(this.sdkConfiguration);
		
		this.errors = new Errors(this.sdkConfiguration);
		
		this.flattening = new Flattening(this.sdkConfiguration);
		
		this.generation = new Generation(this.sdkConfiguration);
		
		this.globals = new Globals(this.sdkConfiguration);
		
		this.pagination = new Pagination(this.sdkConfiguration);
		
		this.parameters = new Parameters(this.sdkConfiguration);
		
		this.requestBodies = new RequestBodies(this.sdkConfiguration);
		
		this.resource = new Resource(this.sdkConfiguration);
		
		this.responseBodies = new ResponseBodies(this.sdkConfiguration);
		
		this.servers = new Servers(this.sdkConfiguration);
		
		this.telemetry = new Telemetry(this.sdkConfiguration);
		
		this.unions = new Unions(this.sdkConfiguration);
	}

    public org.openapis.openapi.models.operations.PutAnythingIgnoredGenerationResponse putAnythingIgnoredGeneration(String request) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/anything/ignoredGeneration");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "string");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutAnythingIgnoredGenerationResponse res = new org.openapis.openapi.models.operations.PutAnythingIgnoredGenerationResponse(contentType, httpRes.statusCode()) {{
            putAnythingIgnoredGeneration200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PutAnythingIgnoredGeneration200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PutAnythingIgnoredGeneration200ApplicationJSON.class);
                res.putAnythingIgnoredGeneration200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ResponseBodyJsonGetResponse responseBodyJsonGet() throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/json");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ResponseBodyJsonGetResponse res = new org.openapis.openapi.models.operations.ResponseBodyJsonGetResponse(contentType, httpRes.statusCode()) {{
            httpBinSimpleJsonObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.HttpBinSimpleJsonObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.HttpBinSimpleJsonObject.class);
                res.httpBinSimpleJsonObject = out;
            }
        }

        return res;
    }
}