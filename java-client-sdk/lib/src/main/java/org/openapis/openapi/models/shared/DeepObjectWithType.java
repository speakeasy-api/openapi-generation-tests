/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;


public class DeepObjectWithType {
    @JsonProperty("any")
    public Object any;

    public DeepObjectWithType withAny(Object any) {
        this.any = any;
        return this;
    }
    
    @JsonProperty("arr")
    public SimpleObject[] arr;

    public DeepObjectWithType withArr(SimpleObject[] arr) {
        this.arr = arr;
        return this;
    }
    
    @JsonProperty("bool")
    public Boolean bool;

    public DeepObjectWithType withBool(Boolean bool) {
        this.bool = bool;
        return this;
    }
    
    @JsonProperty("int")
    public Long int_;

    public DeepObjectWithType withInt(Long int_) {
        this.int_ = int_;
        return this;
    }
    
    @JsonProperty("map")
    public java.util.Map<String, SimpleObject> map;

    public DeepObjectWithType withMap(java.util.Map<String, SimpleObject> map) {
        this.map = map;
        return this;
    }
    
    @JsonProperty("num")
    public Double num;

    public DeepObjectWithType withNum(Double num) {
        this.num = num;
        return this;
    }
    
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     * https://docs.speakeasyapi.dev - A link to the external docs.
     */
    @JsonProperty("obj")
    public SimpleObject obj;

    public DeepObjectWithType withObj(SimpleObject obj) {
        this.obj = obj;
        return this;
    }
    
    @JsonProperty("str")
    public String str;

    public DeepObjectWithType withStr(String str) {
        this.str = str;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;

    public DeepObjectWithType withType(String type) {
        this.type = type;
        return this;
    }
    
    public DeepObjectWithType(@JsonProperty("any") Object any, @JsonProperty("arr") SimpleObject[] arr, @JsonProperty("bool") Boolean bool, @JsonProperty("int") Long int_, @JsonProperty("map") java.util.Map<String, SimpleObject> map, @JsonProperty("num") Double num, @JsonProperty("obj") SimpleObject obj, @JsonProperty("str") String str) {
        this.any = any;
        this.arr = arr;
        this.bool = bool;
        this.int_ = int_;
        this.map = map;
        this.num = num;
        this.obj = obj;
        this.str = str;
  }
}
