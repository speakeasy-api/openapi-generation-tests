/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * SimpleObjectWithType - A simple object that uses all our supported primitive types and enums and has optional properties.
 * https://docs.speakeasyapi.dev - A link to the external docs.
 */

public class SimpleObjectWithType {
    /**
     * An any property.
     */
    @JsonProperty("any")
    public Object any;

    public SimpleObjectWithType withAny(Object any) {
        this.any = any;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bigint")
    public Long bigint;

    public SimpleObjectWithType withBigint(Long bigint) {
        this.bigint = bigint;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bigintStr")
    public String bigintStr;

    public SimpleObjectWithType withBigintStr(String bigintStr) {
        this.bigintStr = bigintStr;
        return this;
    }
    
    /**
     * A boolean property.
     */
    @JsonProperty("bool")
    public Boolean bool;

    public SimpleObjectWithType withBool(Boolean bool) {
        this.bool = bool;
        return this;
    }
    
    /**
     * An optional boolean property.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("boolOpt")
    public Boolean boolOpt;

    public SimpleObjectWithType withBoolOpt(Boolean boolOpt) {
        this.boolOpt = boolOpt;
        return this;
    }
    
    /**
     * A date property.
     */
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("date")
    public LocalDate date;

    public SimpleObjectWithType withDate(LocalDate date) {
        this.date = date;
        return this;
    }
    
    /**
     * A date-time property.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("dateTime")
    public OffsetDateTime dateTime;

    public SimpleObjectWithType withDateTime(OffsetDateTime dateTime) {
        this.dateTime = dateTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("decimal")
    public Double decimal;

    public SimpleObjectWithType withDecimal(Double decimal) {
        this.decimal = decimal;
        return this;
    }
    
    /**
     * A string based enum
     */
    @JsonProperty("enum")
    public Enum enum_;

    public SimpleObjectWithType withEnum(Enum enum_) {
        this.enum_ = enum_;
        return this;
    }
    
    /**
     * A float32 property.
     */
    @JsonProperty("float32")
    public Float float32;

    public SimpleObjectWithType withFloat32(Float float32) {
        this.float32 = float32;
        return this;
    }
    
    /**
     * An integer property.
     */
    @JsonProperty("int")
    public Long int_;

    public SimpleObjectWithType withInt(Long int_) {
        this.int_ = int_;
        return this;
    }
    
    /**
     * An int32 property.
     */
    @JsonProperty("int32")
    public Integer int32;

    public SimpleObjectWithType withInt32(Integer int32) {
        this.int32 = int32;
        return this;
    }
    
    /**
     * An int32 enum property.
     */
    @JsonProperty("int32Enum")
    public SimpleObjectWithTypeInt32Enum int32Enum;

    public SimpleObjectWithType withInt32Enum(SimpleObjectWithTypeInt32Enum int32Enum) {
        this.int32Enum = int32Enum;
        return this;
    }
    
    /**
     * An integer enum property.
     */
    @JsonProperty("intEnum")
    public SimpleObjectWithTypeIntEnum intEnum;

    public SimpleObjectWithType withIntEnum(SimpleObjectWithTypeIntEnum intEnum) {
        this.intEnum = intEnum;
        return this;
    }
    
    /**
     * An optional integer property will be null for tests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("intOptNull")
    public Long intOptNull;

    public SimpleObjectWithType withIntOptNull(Long intOptNull) {
        this.intOptNull = intOptNull;
        return this;
    }
    
    /**
     * A number property.
     */
    @JsonProperty("num")
    public Double num;

    public SimpleObjectWithType withNum(Double num) {
        this.num = num;
        return this;
    }
    
    /**
     * An optional number property will be null for tests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numOptNull")
    public Double numOptNull;

    public SimpleObjectWithType withNumOptNull(Double numOptNull) {
        this.numOptNull = numOptNull;
        return this;
    }
    
    /**
     * A string property.
     */
    @JsonProperty("str")
    public String str;

    public SimpleObjectWithType withStr(String str) {
        this.str = str;
        return this;
    }
    
    /**
     * An optional string property.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("strOpt")
    public String strOpt;

    public SimpleObjectWithType withStrOpt(String strOpt) {
        this.strOpt = strOpt;
        return this;
    }
    
    @JsonProperty("type")
    public String type;

    public SimpleObjectWithType withType(String type) {
        this.type = type;
        return this;
    }
    
    public SimpleObjectWithType(@JsonProperty("any") Object any, @JsonProperty("bool") Boolean bool, @JsonProperty("date") LocalDate date, @JsonProperty("dateTime") OffsetDateTime dateTime, @JsonProperty("enum") Enum enum_, @JsonProperty("float32") Float float32, @JsonProperty("int") Long int_, @JsonProperty("int32") Integer int32, @JsonProperty("int32Enum") SimpleObjectWithTypeInt32Enum int32Enum, @JsonProperty("intEnum") SimpleObjectWithTypeIntEnum intEnum, @JsonProperty("num") Double num, @JsonProperty("str") String str, @JsonProperty("type") String type) {
        this.any = any;
        this.bool = bool;
        this.date = date;
        this.dateTime = dateTime;
        this.enum_ = enum_;
        this.float32 = float32;
        this.int_ = int_;
        this.int32 = int32;
        this.int32Enum = int32Enum;
        this.intEnum = intEnum;
        this.num = num;
        this.str = str;
        this.type = type;
  }
}
