/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import org.junit.jupiter.api.Test;
import org.openapis.openapi.models.operations.*;
import org.openapis.openapi.models.shared.*;

import static org.junit.jupiter.api.Assertions.*;

public class AuthTests {
    @Test
    void testBasicAuth() throws Exception {
        Helpers.recordTest("auth-basic-auth");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        BasicAuthNewResponse res = s.authNew.basicAuthNew(new AuthServiceRequestBody() {
            {
                basicAuth = new AuthServiceRequestBodyBasicAuth("testUser", "testPass");
            }
        }, new BasicAuthNewSecurity("testUser", "testPass"));

        assertNotNull(res);
        assertEquals(200, res.statusCode);
    }

    @Test
    void testApiKeyAuthGlobal() throws Exception {
        Helpers.recordTest("auth-api-key-auth-global");

        SDK s = SDK.builder().setSecurity(new Security() {
            {
                apiKeyAuthNew = "test_api_key";
            }
        }).build();
        assertNotNull(s);

        ApiKeyAuthGlobalNewResponse res = s.authNew.apiKeyAuthGlobalNew(new AuthServiceRequestBody() {
            {
                headerAuth = new AuthServiceRequestBodyHeaderAuth[]{
                        new AuthServiceRequestBodyHeaderAuth("test_api_key", "x-api-key")
                };
            }

        });

        assertNotNull(res);
        assertEquals(200, res.statusCode);
    }

    @Test
    void testApiKeyAuthOperation() throws Exception {
        Helpers.recordTest("auth-api-key-auth-operation");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        ApiKeyAuthResponse res = s.auth.apiKeyAuth(new ApiKeyAuthSecurity("Bearer testToken"));

        assertNotNull(res);
        assertEquals(200, res.statusCode);
        assertTrue(res.token.authenticated);
        assertEquals("testToken", res.token.token);
    }

    @Test
    void testBearerAuthOperationWithPrefix() throws Exception {
        Helpers.recordTest("auth-bearer-auth-operation-with-prefix");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        BearerAuthResponse res = s.auth.bearerAuth(new BearerAuthSecurity("Bearer testToken"));

        assertNotNull(res);
        assertEquals(200, res.statusCode);
        assertTrue(res.token.authenticated);
        assertEquals("testToken", res.token.token);
    }

    @Test
    void testBearerAuthOperationWithoutPrefix() throws Exception {
        Helpers.recordTest("auth-bearer-auth-operation-without-prefix");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        BearerAuthResponse res = s.auth.bearerAuth(new BearerAuthSecurity("testToken"));

        assertNotNull(res);
        assertEquals(200, res.statusCode);
        assertTrue(res.token.authenticated);
        assertEquals("testToken", res.token.token);
    }

    @Test
    void testOauth2Auth() throws Exception {
        Helpers.recordTest("auth-oauth2-auth");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        Oauth2AuthNewResponse res = s.authNew.oauth2AuthNew(new AuthServiceRequestBody() {
            {
                headerAuth = new AuthServiceRequestBodyHeaderAuth[]{
                        new AuthServiceRequestBodyHeaderAuth("Bearer testToken", "Authorization")
                };
            }
        }, new Oauth2AuthNewSecurity("Bearer testToken"));

        assertNotNull(res);
        assertEquals(200, res.statusCode);
    }

    @Test
    void testOpenIdConnectAuth() throws Exception {
        Helpers.recordTest("auth-open-id-connect-auth");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        OpenIdConnectAuthNewResponse res = s.authNew.openIdConnectAuthNew(new AuthServiceRequestBody() {
            {
                headerAuth = new AuthServiceRequestBodyHeaderAuth[]{
                        new AuthServiceRequestBodyHeaderAuth("Bearer testToken", "Authorization")
                };
            }
        }, new OpenIdConnectAuthNewSecurity("Bearer testToken"));

        assertNotNull(res);
        assertEquals(200, res.statusCode);
    }

    @Test
    void testMultipleSimpleSchemeAuth() throws Exception {
        Helpers.recordTest("auth-multiple-simple-scheme-auth");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        MultipleSimpleSchemeAuthResponse res = s.authNew
                .multipleSimpleSchemeAuth(new AuthServiceRequestBody() {
                    {
                        headerAuth = new AuthServiceRequestBodyHeaderAuth[]{
                                new AuthServiceRequestBodyHeaderAuth("test_api_key", "x-api-key"),
                                new AuthServiceRequestBodyHeaderAuth("Bearer testToken", "Authorization")
                        };
                    }
                }, new MultipleSimpleSchemeAuthSecurity("test_api_key", "Bearer testToken"));

        assertNotNull(res);
        assertEquals(200, res.statusCode);
    }

    @Test
    void testMultipleMixedSchemeAuth() throws Exception {
        Helpers.recordTest("auth-multiple-mixed-scheme-auth");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        MultipleMixedSchemeAuthResponse res = s.authNew
                .multipleMixedSchemeAuth(new AuthServiceRequestBody() {
                    {
                        headerAuth = new AuthServiceRequestBodyHeaderAuth[]{
                                new AuthServiceRequestBodyHeaderAuth("test_api_key", "x-api-key")
                        };
                        basicAuth = new AuthServiceRequestBodyBasicAuth("testUser", "testPass");
                    }
                }, new MultipleMixedSchemeAuthSecurity("test_api_key", new SchemeBasicAuth("testUser", "testPass")));

        assertNotNull(res);
        assertEquals(200, res.statusCode);
    }

    @Test
    void testMultipleSimpleOptionsAuthFirstOption() throws Exception {
        Helpers.recordTest("auth-multiple-simple-options-auth-first-option");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        MultipleSimpleOptionsAuthResponse res = s.authNew
                .multipleSimpleOptionsAuth(new AuthServiceRequestBody() {
                    {
                        headerAuth = new AuthServiceRequestBodyHeaderAuth[]{
                                new AuthServiceRequestBodyHeaderAuth("test_api_key", "x-api-key"),
                        };
                    }
                }, new MultipleSimpleOptionsAuthSecurity() {
                    {
                        apiKeyAuthNew = "test_api_key";
                    }
                });

        assertNotNull(res);
        assertEquals(200, res.statusCode);
    }

    @Test
    void testMultipleSimpleOptionsAuthSecondOption() throws Exception {
        Helpers.recordTest("auth-multiple-simple-options-auth-second-option");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        MultipleSimpleOptionsAuthResponse res = s.authNew
                .multipleSimpleOptionsAuth(new AuthServiceRequestBody() {
                    {
                        headerAuth = new AuthServiceRequestBodyHeaderAuth[]{
                                new AuthServiceRequestBodyHeaderAuth("Bearer testToken", "Authorization"),
                        };
                    }
                }, new MultipleSimpleOptionsAuthSecurity() {
                    {
                        oauth2 = "Bearer testToken";
                    }
                });

        assertNotNull(res);
        assertEquals(200, res.statusCode);
    }

    @Test
    void testMultipleMixedOptionsAuthFirstOption() throws Exception {
        Helpers.recordTest("auth-multiple-mixed-options-auth-first-option");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        MultipleMixedOptionsAuthResponse res = s.authNew
                .multipleMixedOptionsAuth(new AuthServiceRequestBody() {
                    {
                        headerAuth = new AuthServiceRequestBodyHeaderAuth[]{
                                new AuthServiceRequestBodyHeaderAuth("test_api_key", "x-api-key"),
                        };
                    }
                }, new MultipleMixedOptionsAuthSecurity() {
                    {
                        apiKeyAuthNew = "test_api_key";
                    }
                });

        assertNotNull(res);
        assertEquals(200, res.statusCode);
    }

    @Test
    void testMultipleMixedOptionsAuthSecondOption() throws Exception {
        Helpers.recordTest("auth-multiple-mixed-options-auth-second-option");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        MultipleMixedOptionsAuthResponse res = s.authNew
                .multipleMixedOptionsAuth(new AuthServiceRequestBody() {
                    {
                        basicAuth = new AuthServiceRequestBodyBasicAuth("testUser", "testPass");
                    }
                }, new MultipleMixedOptionsAuthSecurity() {
                    {
                        basicAuth = new SchemeBasicAuth("testUser", "testPass");
                    }
                });

        assertNotNull(res);
        assertEquals(200, res.statusCode);
    }

    @Test
    void testMultipleOptionsWithSimpleSchemesAuthFirstOption() throws Exception {
        Helpers.recordTest("auth-multiple-options-with-simple-schemes-auth-first-option");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        MultipleOptionsWithSimpleSchemesAuthResponse res = s.authNew
                .multipleOptionsWithSimpleSchemesAuth(new AuthServiceRequestBody() {
                    {
                        headerAuth = new AuthServiceRequestBodyHeaderAuth[]{
                                new AuthServiceRequestBodyHeaderAuth("test_api_key", "x-api-key"),
                                new AuthServiceRequestBodyHeaderAuth("Bearer testToken", "Authorization"),
                        };
                    }
                }, new MultipleOptionsWithSimpleSchemesAuthSecurity() {
                    {
                        option1 = new MultipleOptionsWithSimpleSchemesAuthSecurityOption1("test_api_key", "Bearer testToken");
                    }
                });

        assertNotNull(res);
        assertEquals(200, res.statusCode);
    }

    @Test
    void testMultipleOptionsWithSimpleSchemesAuthSecondOption() throws Exception {
        Helpers.recordTest("auth-multiple-options-with-simple-schemes-auth-second-option");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        MultipleOptionsWithSimpleSchemesAuthResponse res = s.authNew
                .multipleOptionsWithSimpleSchemesAuth(new AuthServiceRequestBody() {
                    {
                        headerAuth = new AuthServiceRequestBodyHeaderAuth[]{
                                new AuthServiceRequestBodyHeaderAuth("test_api_key", "x-api-key"),
                                new AuthServiceRequestBodyHeaderAuth("Bearer testToken", "Authorization"),
                        };
                    }
                }, new MultipleOptionsWithSimpleSchemesAuthSecurity() {
                    {
                        option2 = new MultipleOptionsWithSimpleSchemesAuthSecurityOption2("test_api_key", "Bearer testToken");
                    }
                });

        assertNotNull(res);
        assertEquals(200, res.statusCode);
    }

    @Test
    void testMultipleOptionsWithMixedSchemesAuthFirstOption() throws Exception {
        Helpers.recordTest("auth-multiple-options-with-mixed-schemes-auth-first-option");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        MultipleOptionsWithMixedSchemesAuthResponse res = s.authNew
                .multipleOptionsWithMixedSchemesAuth(new AuthServiceRequestBody() {
                    {
                        headerAuth = new AuthServiceRequestBodyHeaderAuth[]{
                                new AuthServiceRequestBodyHeaderAuth("test_api_key", "x-api-key"),
                                new AuthServiceRequestBodyHeaderAuth("Bearer testToken", "Authorization"),
                        };
                    }
                }, new MultipleOptionsWithMixedSchemesAuthSecurity() {
                    {
                        option1 = new MultipleOptionsWithMixedSchemesAuthSecurityOption1("test_api_key", "Bearer testToken");
                    }
                });

        assertNotNull(res);
        assertEquals(200, res.statusCode);
    }

    @Test
    void testMultipleOptionsWithMixedSchemesAuthSecondOption() throws Exception {
        Helpers.recordTest("auth-multiple-options-with-mixed-schemes-auth-second-option");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        MultipleOptionsWithMixedSchemesAuthResponse res = s.authNew
                .multipleOptionsWithMixedSchemesAuth(new AuthServiceRequestBody() {
                    {
                        headerAuth = new AuthServiceRequestBodyHeaderAuth[]{
                                new AuthServiceRequestBodyHeaderAuth("test_api_key", "x-api-key"),
                        };
                        basicAuth = new AuthServiceRequestBodyBasicAuth("testUser", "testPass");
                    }
                }, new MultipleOptionsWithMixedSchemesAuthSecurity() {
                    {
                        option2 = new MultipleOptionsWithMixedSchemesAuthSecurityOption2("test_api_key", new SchemeBasicAuth("testUser", "testPass"));
                    }
                });

        assertNotNull(res);
        assertEquals(200, res.statusCode);
    }
}
