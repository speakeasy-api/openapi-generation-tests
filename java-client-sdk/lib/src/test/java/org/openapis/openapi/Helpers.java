/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;

import org.openapis.openapi.models.shared.DeepObject;
import org.openapis.openapi.models.shared.Enum;
import org.openapis.openapi.models.shared.SimpleObject;
import org.openapis.openapi.models.shared.SimpleObjectCamelCase;
import org.openapis.openapi.models.shared.SimpleObjectCamelCaseInt32EnumVal;
import org.openapis.openapi.models.shared.SimpleObjectCamelCaseIntEnumVal;
import org.openapis.openapi.models.shared.SimpleObjectInt32Enum;
import org.openapis.openapi.models.shared.SimpleObjectIntEnum;

public class Helpers {
    public static SimpleObject createSimpleObject() {
        return new SimpleObject("any", true, LocalDate.parse("2020-01-01"),
                OffsetDateTime.parse("2020-01-01T00:00:00.000000001Z"), Enum.ONE, 1.1f, Long.valueOf(1), 1,
                SimpleObjectInt32Enum.FIFTY_FIVE, SimpleObjectIntEnum.Second, 1.1, "test") {
            {
                boolOpt = true;
                intOptNull = null;
                numOptNull = null;
                strOpt = "testOptional";
            }
        };
    }

    public static SimpleObjectCamelCase createSimpleObjectCamelCase() {
        return new SimpleObjectCamelCase("any", true, OffsetDateTime.parse("2020-01-01T00:00:00.000000001Z"),
                LocalDate.parse("2020-01-01"), Enum.ONE, 1.1f, SimpleObjectCamelCaseInt32EnumVal.FIFTY_FIVE, 1,
                SimpleObjectCamelCaseIntEnumVal.Second, Long.valueOf(1), 1.1, "test") {
            {
                boolOptVal = true;
                intOptNullVal = null;
                numOptNullVal = null;
                strOptVal = "testOptional";
            }
        };
    }

    public static DeepObject createDeepObject() {
        return new DeepObject(Helpers.createSimpleObject(),
                new SimpleObject[] { Helpers.createSimpleObject(), Helpers.createSimpleObject() }, true,
                Long.valueOf(1), new HashMap<String, SimpleObject>() {
                    {
                        put("key", Helpers.createSimpleObject());
                    }
                }, 1.1, Helpers.createSimpleObject(), "test");
    }

    public static byte[] getData() {
        return "{\r  \"some\": \"json\",\r  \"to\": \"be\",\r  \"uploaded\": \"in\",\r  \"a\": \"file\"\r}\r"
                .getBytes();
    }

    public static void assertSimpleObject(SimpleObject r) {
        SimpleObject l = createSimpleObject();
        assertEquals(l.any, r.any);
        assertEquals(l.bool, r.bool);
        assertEquals(l.boolOpt, r.boolOpt);
        assertEquals(l.date, r.date);
        assertEquals(l.dateTime, r.dateTime);
        assertEquals(l.enum_, r.enum_);
        assertEquals(l.float32, r.float32);
        assertEquals(l.int32, r.int32);
        assertNull(r.intOptNull);
        assertEquals(l.int_, r.int_);
        assertEquals(l.num, r.num);
        assertNull(r.numOptNull);
        assertEquals(l.str, r.str);
        assertEquals(l.strOpt, r.strOpt);
    }

    public static void assertSimpleObjectCamelCase(SimpleObjectCamelCase r) {
        SimpleObjectCamelCase l = createSimpleObjectCamelCase();
        assertEquals(l.anyVal, r.anyVal);
        assertEquals(l.boolVal, r.boolVal);
        assertEquals(l.boolOptVal, r.boolOptVal);
        assertEquals(l.dateVal, r.dateVal);
        assertEquals(l.dateTimeVal, r.dateTimeVal);
        assertEquals(l.enumVal, r.enumVal);
        assertEquals(l.float32Val, r.float32Val);
        assertEquals(l.int32Val, r.int32Val);
        assertNull(r.intOptNullVal);
        assertEquals(l.intVal, r.intVal);
        assertEquals(l.numVal, r.numVal);
        assertNull(r.numOptNullVal);
        assertEquals(l.strVal, r.strVal);
        assertEquals(l.strOptVal, r.strOptVal);
    }

    public static void assertDeepObjectEqual(DeepObject l, DeepObject r) {
        SimpleObject any = (SimpleObject) l.any;
        Map<String, Object> rAny = (Map<String, Object>) r.any;

        assertEquals(any.any, rAny.get("any"));
        assertEquals(any.bool, rAny.get("bool"));
        assertEquals(any.boolOpt, rAny.get("boolOpt"));
        assertEquals("2020-01-01", rAny.get("date"));
        assertEquals("2020-01-01T00:00:00.000000001Z", rAny.get("dateTime"));
        assertEquals(any.enum_.value, rAny.get("enum"));
        assertEquals(any.float32, ((Double) rAny.get("float32")).floatValue());
        assertEquals(any.int32, rAny.get("int32"));
        assertEquals(any.int_, (long) ((Integer) rAny.get("int")).intValue());
        assertEquals(any.num, rAny.get("num"));
        assertEquals(any.str, rAny.get("str"));
        assertEquals(any.strOpt, rAny.get("strOpt"));

        assertEquals(l.arr.length, r.arr.length);
        for (int i = 0; i < l.arr.length; i++) {
            assertSimpleObject(r.arr[i]);
        }
        assertEquals(l.bool, r.bool);
        assertEquals(l.int_, r.int_);
        assertEquals(l.map.size(), r.map.size());
        for (String key : l.map.keySet()) {
            assertSimpleObject(r.map.get(key));
        }
        assertEquals(l.num, r.num);
        assertSimpleObject(r.obj);
        assertEquals(l.str, r.str);
    }

    public static void recordTest(String id) throws Exception {
        Files.writeString(Paths.get("test-java-record.txt"), id + "\n", StandardOpenOption.CREATE,
                StandardOpenOption.APPEND);
    }
}
