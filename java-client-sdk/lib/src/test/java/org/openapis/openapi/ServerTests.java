/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.HashMap;

import org.openapis.openapi.utils.Utils;
import org.junit.jupiter.api.Test;
import org.openapis.openapi.models.operations.SelectGlobalServerResponse;
import org.openapis.openapi.models.operations.SelectServerWithIDResponse;
import org.openapis.openapi.models.operations.ServerWithTemplatesGlobalResponse;
import org.openapis.openapi.models.operations.ServerWithTemplatesResponse;

public class ServerTests {
    @Test
    void testSelectGlobalServerValid() throws Exception {
        Helpers.recordTest("servers-select-global-server-valid");

        SDK s = SDK.builder().setServerURL(SDK.SERVERS[0]).build();
        assertNotNull(s);

        SelectGlobalServerResponse res = s.servers.selectGlobalServer();

        assertNotNull(res);
        assertEquals(200, res.statusCode);
    }

    @Test
    void testSelectGlobalServerBroken() throws Exception {
        Helpers.recordTest("servers-select-global-server-broken");

        SDK s = SDK.builder().setServerURL(SDK.SERVERS[1]).build();
        assertNotNull(s);

        assertThrows(Exception.class, () -> s.servers.selectGlobalServer());
    }

    @Test
    void testSelectServerWithIDDefault() throws Exception {
        Helpers.recordTest("servers-select-server-with-id-default");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        SelectServerWithIDResponse res = s.servers.selectServerWithID();

        assertNotNull(res);
        assertEquals(200, res.statusCode);
    }

    @Test
    void testSelectServerWithIDValid() throws Exception {
        Helpers.recordTest("servers-select-server-with-id-valid");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        SelectServerWithIDResponse res = s.servers
                .selectServerWithID(Servers.SELECT_SERVER_WITH_ID_SERVERS.get(Servers.SelectServerWithIDServers.VALID));

        assertNotNull(res);
        assertEquals(200, res.statusCode);
    }

    @Test
    void testSelectServerWithIBroken() throws Exception {
        Helpers.recordTest("servers-select-server-with-id-broken");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        assertThrows(Exception.class, () -> s.servers.selectServerWithID(
                Servers.SELECT_SERVER_WITH_ID_SERVERS.get(Servers.SelectServerWithIDServers.BROKEN)));
    }

    @Test
    void testServerWithTemplatesGlobal() throws Exception {
        Helpers.recordTest("servers-server-with-templates-global");

        SDK s = SDK.builder().setServerURL(SDK.SERVERS[2], new HashMap<String, String>() {
            {
                put("hostname", "localhost");
                put("port", "35123");
            }
        }).build();
        assertNotNull(s);

        ServerWithTemplatesGlobalResponse res = s.servers.serverWithTemplatesGlobal();

        assertNotNull(res);
        assertEquals(200, res.statusCode);
    }

    @Test
    void testServerWithTemplates() throws Exception {
        Helpers.recordTest("servers-server-with-templates");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        ServerWithTemplatesResponse res = s.servers
                .serverWithTemplates(Utils.templateUrl(Servers.SERVER_WITH_TEMPLATES_SERVERS[0],
                        new HashMap<String, String>() {
                            {
                                put("hostname", "localhost");
                                put("port", "35123");
                            }
                        }));

        assertNotNull(res);
        assertEquals(200, res.statusCode);
    }
}
