/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.Test;
import org.openapis.openapi.models.operations.*;
import org.openapis.openapi.models.shared.*;

public class AuthTests {
    @Test
    void testNoAuth() throws Exception {
        CommonHelpers.recordTest("auth-no-auth");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        NoAuthResponse res = s.auth.noAuth();

        assertNotNull(res);
        assertEquals(200, res.statusCode);
    }

    @Test
    void testBasicAuth() throws Exception {
        CommonHelpers.recordTest("auth-basic-auth");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        // WARNING: password and username are swapped, otherwise test fails (401)
        String passwd = "testUser"; // TODO
        String user = "testPass";  // TODO
        BasicAuthResponse res = s.auth.basicAuth(new BasicAuthSecurity("testUser", "testPass"), passwd, user);

        assertNotNull(res);
        assertEquals(200, res.statusCode);
        assertTrue(res.user.authenticated);
    }

    @Test
    void testApiKeyAuthGlobal() throws Exception {
        CommonHelpers.recordTest("auth-api-key-auth-global");

        SDK s = SDK.builder().setSecurity(new Security() {
            {
                apiKeyAuth = "Bearer testToken";
            }
        }).build();
        assertNotNull(s);

        ApiKeyAuthHoistedResponse res = s.auth.apiKeyAuthHoisted();

        assertNotNull(res);
        assertEquals(200, res.statusCode);
        assertTrue(res.token.authenticated);
        assertEquals("testToken", res.token.token);
    }

    @Test
    void testApiKeyAuthOperation() throws Exception {
        CommonHelpers.recordTest("auth-api-key-auth-operation");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        ApiKeyOrBearerAuthResponse res = s.auth.apiKeyOrBearerAuth(new ApiKeyOrBearerAuthSecurity() {
            {
                apiKeyAuth = "Bearer testToken";
            }
        });

        assertNotNull(res);
        assertEquals(200, res.statusCode);
        assertTrue(res.token.authenticated);
        assertEquals("testToken", res.token.token);
    }
}
