/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.HashMap;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.models.errors.SDKError;
import org.openapis.openapi.models.operations.AuthGlobalRequestBuilder;
import org.openapis.openapi.models.operations.AuthGlobalResponse;
import org.openapis.openapi.models.operations.BasicAuthNewRequestBuilder;
import org.openapis.openapi.models.operations.BasicAuthNewResponse;
import org.openapis.openapi.models.operations.BasicAuthNewSecurity;
import org.openapis.openapi.models.operations.CustomSchemeAppIdRequestBuilder;
import org.openapis.openapi.models.operations.CustomSchemeAppIdResponse;
import org.openapis.openapi.models.operations.CustomSchemeAppIdSecurity;
import org.openapis.openapi.models.operations.MultipleMixedOptionsAuthRequestBuilder;
import org.openapis.openapi.models.operations.MultipleMixedOptionsAuthResponse;
import org.openapis.openapi.models.operations.MultipleMixedOptionsAuthSecurity;
import org.openapis.openapi.models.operations.MultipleMixedSchemeAuthRequestBuilder;
import org.openapis.openapi.models.operations.MultipleMixedSchemeAuthResponse;
import org.openapis.openapi.models.operations.MultipleMixedSchemeAuthSecurity;
import org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthRequestBuilder;
import org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthResponse;
import org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthSecurity;
import org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthRequestBuilder;
import org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthResponse;
import org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthSecurity;
import org.openapis.openapi.models.operations.MultipleSimpleOptionsAuthRequestBuilder;
import org.openapis.openapi.models.operations.MultipleSimpleOptionsAuthResponse;
import org.openapis.openapi.models.operations.MultipleSimpleOptionsAuthSecurity;
import org.openapis.openapi.models.operations.MultipleSimpleSchemeAuthRequestBuilder;
import org.openapis.openapi.models.operations.MultipleSimpleSchemeAuthResponse;
import org.openapis.openapi.models.operations.MultipleSimpleSchemeAuthSecurity;
import org.openapis.openapi.models.operations.Oauth2AuthNewRequestBuilder;
import org.openapis.openapi.models.operations.Oauth2AuthNewResponse;
import org.openapis.openapi.models.operations.OpenIdConnectAuthNewRequestBuilder;
import org.openapis.openapi.models.operations.OpenIdConnectAuthNewResponse;
import org.openapis.openapi.models.operations.OpenIdConnectAuthNewSecurity;
import org.openapis.openapi.models.operations.SDKMethodInterfaces.*;
import org.openapis.openapi.models.shared.AuthServiceRequestBody;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.Hook.AfterErrorContextImpl;
import org.openapis.openapi.utils.Hook.AfterSuccessContextImpl;
import org.openapis.openapi.utils.Hook.BeforeRequestContextImpl;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.Utils.JsonShape;
import org.openapis.openapi.utils.Utils; 

/**
 * Endpoints for testing authentication.
 */
public class AuthNew implements
            MethodCallAuthGlobal,
            MethodCallBasicAuthNew,
            MethodCallCustomSchemeAppId,
            MethodCallMultipleMixedOptionsAuth,
            MethodCallMultipleMixedSchemeAuth,
            MethodCallMultipleOptionsWithMixedSchemesAuth,
            MethodCallMultipleOptionsWithSimpleSchemesAuth,
            MethodCallMultipleSimpleOptionsAuth,
            MethodCallMultipleSimpleSchemeAuth,
            MethodCallOauth2AuthNew,
            MethodCallOpenIdConnectAuthNew {
    
    /**
     * AUTH_GLOBAL_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] AUTH_GLOBAL_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * BASIC_AUTH_NEW_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] BASIC_AUTH_NEW_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * CUSTOM_SCHEME_APP_ID_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] CUSTOM_SCHEME_APP_ID_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * MULTIPLE_MIXED_OPTIONS_AUTH_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] MULTIPLE_MIXED_OPTIONS_AUTH_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * MULTIPLE_MIXED_SCHEME_AUTH_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] MULTIPLE_MIXED_SCHEME_AUTH_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * MULTIPLE_OPTIONS_WITH_MIXED_SCHEMES_AUTH_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] MULTIPLE_OPTIONS_WITH_MIXED_SCHEMES_AUTH_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * MULTIPLE_OPTIONS_WITH_SIMPLE_SCHEMES_AUTH_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] MULTIPLE_OPTIONS_WITH_SIMPLE_SCHEMES_AUTH_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * MULTIPLE_SIMPLE_OPTIONS_AUTH_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] MULTIPLE_SIMPLE_OPTIONS_AUTH_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * MULTIPLE_SIMPLE_SCHEME_AUTH_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] MULTIPLE_SIMPLE_SCHEME_AUTH_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * OAUTH2_AUTH_NEW_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] OAUTH2_AUTH_NEW_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * OPEN_ID_CONNECT_AUTH_NEW_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] OPEN_ID_CONNECT_AUTH_NEW_SERVERS = {
        "http://localhost:35456",
    };

    private final SDKConfiguration sdkConfiguration;

    AuthNew(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    public AuthGlobalRequestBuilder authGlobal() {
        return new AuthGlobalRequestBuilder(this);
    }

    public AuthGlobalResponse authGlobal(
            AuthServiceRequestBody request) throws Exception {
        return authGlobal(request, Optional.empty());
    }
    
    public AuthGlobalResponse authGlobal(
            AuthServiceRequestBody request,
            Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(AUTH_GLOBAL_SERVERS[0], new HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/auth#authGlobal");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<AuthServiceRequestBody>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "request",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                SDKConfiguration.USER_AGENT);

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "authGlobal", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "authGlobal",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "authGlobal",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "authGlobal",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        AuthGlobalResponse.Builder _resBuilder = 
            AuthGlobalResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        AuthGlobalResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    public BasicAuthNewRequestBuilder basicAuthNew() {
        return new BasicAuthNewRequestBuilder(this);
    }

    public BasicAuthNewResponse basicAuthNew(
            AuthServiceRequestBody request,
            BasicAuthNewSecurity security) throws Exception {
        return basicAuthNew(request, security, Optional.empty());
    }
    
    public BasicAuthNewResponse basicAuthNew(
            AuthServiceRequestBody request,
            BasicAuthNewSecurity security,
            Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(BASIC_AUTH_NEW_SERVERS[0], new HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/auth#basicAuth");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<AuthServiceRequestBody>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "request",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                SDKConfiguration.USER_AGENT);

        Utils.configureSecurity(_req, security);

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "basicAuthNew", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "basicAuthNew",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "basicAuthNew",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "basicAuthNew",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        BasicAuthNewResponse.Builder _resBuilder = 
            BasicAuthNewResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        BasicAuthNewResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    public CustomSchemeAppIdRequestBuilder customSchemeAppId() {
        return new CustomSchemeAppIdRequestBuilder(this);
    }

    public CustomSchemeAppIdResponse customSchemeAppId(
            CustomSchemeAppIdSecurity security) throws Exception {
        return customSchemeAppId(security, Optional.empty());
    }
    
    public CustomSchemeAppIdResponse customSchemeAppId(
            CustomSchemeAppIdSecurity security,
            Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(CUSTOM_SCHEME_APP_ID_SERVERS[0], new HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/auth/customsecurity/customSchemeAppId");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                SDKConfiguration.USER_AGENT);

        Utils.configureSecurity(_req, security);

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "customSchemeAppId", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "customSchemeAppId",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "customSchemeAppId",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "customSchemeAppId",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        CustomSchemeAppIdResponse.Builder _resBuilder = 
            CustomSchemeAppIdResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        CustomSchemeAppIdResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    public MultipleMixedOptionsAuthRequestBuilder multipleMixedOptionsAuth() {
        return new MultipleMixedOptionsAuthRequestBuilder(this);
    }

    public MultipleMixedOptionsAuthResponse multipleMixedOptionsAuth(
            AuthServiceRequestBody request,
            MultipleMixedOptionsAuthSecurity security) throws Exception {
        return multipleMixedOptionsAuth(request, security, Optional.empty());
    }
    
    public MultipleMixedOptionsAuthResponse multipleMixedOptionsAuth(
            AuthServiceRequestBody request,
            MultipleMixedOptionsAuthSecurity security,
            Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(MULTIPLE_MIXED_OPTIONS_AUTH_SERVERS[0], new HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/auth#multipleMixedOptionsAuth");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<AuthServiceRequestBody>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "request",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                SDKConfiguration.USER_AGENT);

        Utils.configureSecurity(_req, security);

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "multipleMixedOptionsAuth", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "multipleMixedOptionsAuth",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "multipleMixedOptionsAuth",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "multipleMixedOptionsAuth",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        MultipleMixedOptionsAuthResponse.Builder _resBuilder = 
            MultipleMixedOptionsAuthResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        MultipleMixedOptionsAuthResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    public MultipleMixedSchemeAuthRequestBuilder multipleMixedSchemeAuth() {
        return new MultipleMixedSchemeAuthRequestBuilder(this);
    }

    public MultipleMixedSchemeAuthResponse multipleMixedSchemeAuth(
            AuthServiceRequestBody request,
            MultipleMixedSchemeAuthSecurity security) throws Exception {
        return multipleMixedSchemeAuth(request, security, Optional.empty());
    }
    
    public MultipleMixedSchemeAuthResponse multipleMixedSchemeAuth(
            AuthServiceRequestBody request,
            MultipleMixedSchemeAuthSecurity security,
            Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(MULTIPLE_MIXED_SCHEME_AUTH_SERVERS[0], new HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/auth#multipleMixedSchemeAuth");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<AuthServiceRequestBody>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "request",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                SDKConfiguration.USER_AGENT);

        Utils.configureSecurity(_req, security);

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "multipleMixedSchemeAuth", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "multipleMixedSchemeAuth",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "multipleMixedSchemeAuth",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "multipleMixedSchemeAuth",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        MultipleMixedSchemeAuthResponse.Builder _resBuilder = 
            MultipleMixedSchemeAuthResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        MultipleMixedSchemeAuthResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    public MultipleOptionsWithMixedSchemesAuthRequestBuilder multipleOptionsWithMixedSchemesAuth() {
        return new MultipleOptionsWithMixedSchemesAuthRequestBuilder(this);
    }

    public MultipleOptionsWithMixedSchemesAuthResponse multipleOptionsWithMixedSchemesAuth(
            AuthServiceRequestBody request,
            MultipleOptionsWithMixedSchemesAuthSecurity security) throws Exception {
        return multipleOptionsWithMixedSchemesAuth(request, security, Optional.empty());
    }
    
    public MultipleOptionsWithMixedSchemesAuthResponse multipleOptionsWithMixedSchemesAuth(
            AuthServiceRequestBody request,
            MultipleOptionsWithMixedSchemesAuthSecurity security,
            Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(MULTIPLE_OPTIONS_WITH_MIXED_SCHEMES_AUTH_SERVERS[0], new HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/auth#multipleOptionsWithMixedSchemesAuth");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<AuthServiceRequestBody>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "request",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                SDKConfiguration.USER_AGENT);

        Utils.configureSecurity(_req, security);

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "multipleOptionsWithMixedSchemesAuth", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "multipleOptionsWithMixedSchemesAuth",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "multipleOptionsWithMixedSchemesAuth",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "multipleOptionsWithMixedSchemesAuth",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        MultipleOptionsWithMixedSchemesAuthResponse.Builder _resBuilder = 
            MultipleOptionsWithMixedSchemesAuthResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        MultipleOptionsWithMixedSchemesAuthResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    public MultipleOptionsWithSimpleSchemesAuthRequestBuilder multipleOptionsWithSimpleSchemesAuth() {
        return new MultipleOptionsWithSimpleSchemesAuthRequestBuilder(this);
    }

    public MultipleOptionsWithSimpleSchemesAuthResponse multipleOptionsWithSimpleSchemesAuth(
            AuthServiceRequestBody request,
            MultipleOptionsWithSimpleSchemesAuthSecurity security) throws Exception {
        return multipleOptionsWithSimpleSchemesAuth(request, security, Optional.empty());
    }
    
    public MultipleOptionsWithSimpleSchemesAuthResponse multipleOptionsWithSimpleSchemesAuth(
            AuthServiceRequestBody request,
            MultipleOptionsWithSimpleSchemesAuthSecurity security,
            Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(MULTIPLE_OPTIONS_WITH_SIMPLE_SCHEMES_AUTH_SERVERS[0], new HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/auth#multipleOptionsWithSimpleSchemesAuth");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<AuthServiceRequestBody>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "request",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                SDKConfiguration.USER_AGENT);

        Utils.configureSecurity(_req, security);

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "multipleOptionsWithSimpleSchemesAuth", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "multipleOptionsWithSimpleSchemesAuth",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "multipleOptionsWithSimpleSchemesAuth",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "multipleOptionsWithSimpleSchemesAuth",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        MultipleOptionsWithSimpleSchemesAuthResponse.Builder _resBuilder = 
            MultipleOptionsWithSimpleSchemesAuthResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        MultipleOptionsWithSimpleSchemesAuthResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    public MultipleSimpleOptionsAuthRequestBuilder multipleSimpleOptionsAuth() {
        return new MultipleSimpleOptionsAuthRequestBuilder(this);
    }

    public MultipleSimpleOptionsAuthResponse multipleSimpleOptionsAuth(
            AuthServiceRequestBody request,
            MultipleSimpleOptionsAuthSecurity security) throws Exception {
        return multipleSimpleOptionsAuth(request, security, Optional.empty());
    }
    
    public MultipleSimpleOptionsAuthResponse multipleSimpleOptionsAuth(
            AuthServiceRequestBody request,
            MultipleSimpleOptionsAuthSecurity security,
            Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(MULTIPLE_SIMPLE_OPTIONS_AUTH_SERVERS[0], new HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/auth#multipleSimpleOptionsAuth");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<AuthServiceRequestBody>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "request",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                SDKConfiguration.USER_AGENT);

        Utils.configureSecurity(_req, security);

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "multipleSimpleOptionsAuth", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "multipleSimpleOptionsAuth",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "multipleSimpleOptionsAuth",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "multipleSimpleOptionsAuth",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        MultipleSimpleOptionsAuthResponse.Builder _resBuilder = 
            MultipleSimpleOptionsAuthResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        MultipleSimpleOptionsAuthResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    public MultipleSimpleSchemeAuthRequestBuilder multipleSimpleSchemeAuth() {
        return new MultipleSimpleSchemeAuthRequestBuilder(this);
    }

    public MultipleSimpleSchemeAuthResponse multipleSimpleSchemeAuth(
            AuthServiceRequestBody request,
            MultipleSimpleSchemeAuthSecurity security) throws Exception {
        return multipleSimpleSchemeAuth(request, security, Optional.empty());
    }
    
    public MultipleSimpleSchemeAuthResponse multipleSimpleSchemeAuth(
            AuthServiceRequestBody request,
            MultipleSimpleSchemeAuthSecurity security,
            Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(MULTIPLE_SIMPLE_SCHEME_AUTH_SERVERS[0], new HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/auth#multipleSimpleSchemeAuth");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<AuthServiceRequestBody>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "request",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                SDKConfiguration.USER_AGENT);

        Utils.configureSecurity(_req, security);

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "multipleSimpleSchemeAuth", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "multipleSimpleSchemeAuth",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "multipleSimpleSchemeAuth",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "multipleSimpleSchemeAuth",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        MultipleSimpleSchemeAuthResponse.Builder _resBuilder = 
            MultipleSimpleSchemeAuthResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        MultipleSimpleSchemeAuthResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    public Oauth2AuthNewRequestBuilder oauth2AuthNew() {
        return new Oauth2AuthNewRequestBuilder(this);
    }

    public Oauth2AuthNewResponse oauth2AuthNew(
            AuthServiceRequestBody request) throws Exception {
        return oauth2AuthNew(request, Optional.empty());
    }
    
    public Oauth2AuthNewResponse oauth2AuthNew(
            AuthServiceRequestBody request,
            Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(OAUTH2_AUTH_NEW_SERVERS[0], new HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/auth#oauth2Auth");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<AuthServiceRequestBody>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "request",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                SDKConfiguration.USER_AGENT);

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "oauth2AuthNew", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "oauth2AuthNew",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "oauth2AuthNew",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "oauth2AuthNew",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        Oauth2AuthNewResponse.Builder _resBuilder = 
            Oauth2AuthNewResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        Oauth2AuthNewResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    public OpenIdConnectAuthNewRequestBuilder openIdConnectAuthNew() {
        return new OpenIdConnectAuthNewRequestBuilder(this);
    }

    public OpenIdConnectAuthNewResponse openIdConnectAuthNew(
            AuthServiceRequestBody request,
            OpenIdConnectAuthNewSecurity security) throws Exception {
        return openIdConnectAuthNew(request, security, Optional.empty());
    }
    
    public OpenIdConnectAuthNewResponse openIdConnectAuthNew(
            AuthServiceRequestBody request,
            OpenIdConnectAuthNewSecurity security,
            Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(OPEN_ID_CONNECT_AUTH_NEW_SERVERS[0], new HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/auth#openIdConnectAuth");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<AuthServiceRequestBody>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "request",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                SDKConfiguration.USER_AGENT);

        Utils.configureSecurity(_req, security);

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "openIdConnectAuthNew", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "openIdConnectAuthNew",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "openIdConnectAuthNew",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "openIdConnectAuthNew",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        OpenIdConnectAuthNewResponse.Builder _resBuilder = 
            OpenIdConnectAuthNewResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        OpenIdConnectAuthNewResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
