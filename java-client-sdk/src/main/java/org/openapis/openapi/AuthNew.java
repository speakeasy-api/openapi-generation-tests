/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.Optional;
import org.openapis.openapi.models.errors.SDKError;
import org.openapis.openapi.models.operations.SDKMethodInterfaces.*;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.Hook.AfterErrorContextImpl;
import org.openapis.openapi.utils.Hook.AfterSuccessContextImpl;
import org.openapis.openapi.utils.Hook.BeforeRequestContextImpl;
import org.openapis.openapi.utils.Retries.NonRetryableException;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.Utils;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Endpoints for testing authentication.
 */
public class AuthNew implements
            MethodCallAuthGlobal,
            MethodCallBasicAuthNew,
            MethodCallMultipleMixedOptionsAuth,
            MethodCallMultipleMixedSchemeAuth,
            MethodCallMultipleOptionsWithMixedSchemesAuth,
            MethodCallMultipleOptionsWithSimpleSchemesAuth,
            MethodCallMultipleSimpleOptionsAuth,
            MethodCallMultipleSimpleSchemeAuth,
            MethodCallOauth2AuthNew,
            MethodCallOpenIdConnectAuthNew {
    
    /**
     * AUTH_GLOBAL_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] AUTH_GLOBAL_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * BASIC_AUTH_NEW_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] BASIC_AUTH_NEW_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * MULTIPLE_MIXED_OPTIONS_AUTH_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] MULTIPLE_MIXED_OPTIONS_AUTH_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * MULTIPLE_MIXED_SCHEME_AUTH_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] MULTIPLE_MIXED_SCHEME_AUTH_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * MULTIPLE_OPTIONS_WITH_MIXED_SCHEMES_AUTH_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] MULTIPLE_OPTIONS_WITH_MIXED_SCHEMES_AUTH_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * MULTIPLE_OPTIONS_WITH_SIMPLE_SCHEMES_AUTH_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] MULTIPLE_OPTIONS_WITH_SIMPLE_SCHEMES_AUTH_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * MULTIPLE_SIMPLE_OPTIONS_AUTH_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] MULTIPLE_SIMPLE_OPTIONS_AUTH_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * MULTIPLE_SIMPLE_SCHEME_AUTH_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] MULTIPLE_SIMPLE_SCHEME_AUTH_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * OAUTH2_AUTH_NEW_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] OAUTH2_AUTH_NEW_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * OPEN_ID_CONNECT_AUTH_NEW_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] OPEN_ID_CONNECT_AUTH_NEW_SERVERS = {
        "http://localhost:35456",
    };

    private final SDKConfiguration sdkConfiguration;

    AuthNew(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    public org.openapis.openapi.models.operations.AuthGlobalRequestBuilder authGlobal() {
        return new org.openapis.openapi.models.operations.AuthGlobalRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.AuthGlobalResponse authGlobal(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request) throws Exception {
        return authGlobal(request, Optional.empty());
    }
    public org.openapis.openapi.models.operations.AuthGlobalResponse authGlobal(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request,
            java.util.Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(AUTH_GLOBAL_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/auth#authGlobal");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<org.openapis.openapi.models.shared.AuthServiceRequestBody>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                this.sdkConfiguration.userAgent);

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl("authGlobal", Optional.empty(), sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl("authGlobal", Optional.empty(), sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl("authGlobal", Optional.empty(), sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(new AfterErrorContextImpl("authGlobal", Optional.empty(), sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.AuthGlobalResponse.Builder _resBuilder = 
            org.openapis.openapi.models.operations.AuthGlobalResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        org.openapis.openapi.models.operations.AuthGlobalResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.toByteArrayAndClose(_httpRes.body()));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.toByteArrayAndClose(_httpRes.body()));
    }



    public org.openapis.openapi.models.operations.BasicAuthNewRequestBuilder basicAuthNew() {
        return new org.openapis.openapi.models.operations.BasicAuthNewRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.BasicAuthNewResponse basicAuthNew(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request,
            org.openapis.openapi.models.operations.BasicAuthNewSecurity security) throws Exception {
        return basicAuthNew(request, security, Optional.empty());
    }
    public org.openapis.openapi.models.operations.BasicAuthNewResponse basicAuthNew(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request,
            org.openapis.openapi.models.operations.BasicAuthNewSecurity security,
            java.util.Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(BASIC_AUTH_NEW_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/auth#basicAuth");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<org.openapis.openapi.models.shared.AuthServiceRequestBody>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                this.sdkConfiguration.userAgent);

        Utils.configureSecurity(_req, security);

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl("basicAuthNew", Optional.empty(), sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl("basicAuthNew", Optional.empty(), sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl("basicAuthNew", Optional.empty(), sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(new AfterErrorContextImpl("basicAuthNew", Optional.empty(), sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.BasicAuthNewResponse.Builder _resBuilder = 
            org.openapis.openapi.models.operations.BasicAuthNewResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        org.openapis.openapi.models.operations.BasicAuthNewResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.toByteArrayAndClose(_httpRes.body()));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.toByteArrayAndClose(_httpRes.body()));
    }



    public org.openapis.openapi.models.operations.MultipleMixedOptionsAuthRequestBuilder multipleMixedOptionsAuth() {
        return new org.openapis.openapi.models.operations.MultipleMixedOptionsAuthRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.MultipleMixedOptionsAuthResponse multipleMixedOptionsAuth(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request,
            org.openapis.openapi.models.operations.MultipleMixedOptionsAuthSecurity security) throws Exception {
        return multipleMixedOptionsAuth(request, security, Optional.empty());
    }
    public org.openapis.openapi.models.operations.MultipleMixedOptionsAuthResponse multipleMixedOptionsAuth(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request,
            org.openapis.openapi.models.operations.MultipleMixedOptionsAuthSecurity security,
            java.util.Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(MULTIPLE_MIXED_OPTIONS_AUTH_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/auth#multipleMixedOptionsAuth");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<org.openapis.openapi.models.shared.AuthServiceRequestBody>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                this.sdkConfiguration.userAgent);

        Utils.configureSecurity(_req, security);

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl("multipleMixedOptionsAuth", Optional.empty(), sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl("multipleMixedOptionsAuth", Optional.empty(), sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl("multipleMixedOptionsAuth", Optional.empty(), sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(new AfterErrorContextImpl("multipleMixedOptionsAuth", Optional.empty(), sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.MultipleMixedOptionsAuthResponse.Builder _resBuilder = 
            org.openapis.openapi.models.operations.MultipleMixedOptionsAuthResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        org.openapis.openapi.models.operations.MultipleMixedOptionsAuthResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.toByteArrayAndClose(_httpRes.body()));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.toByteArrayAndClose(_httpRes.body()));
    }



    public org.openapis.openapi.models.operations.MultipleMixedSchemeAuthRequestBuilder multipleMixedSchemeAuth() {
        return new org.openapis.openapi.models.operations.MultipleMixedSchemeAuthRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.MultipleMixedSchemeAuthResponse multipleMixedSchemeAuth(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request,
            org.openapis.openapi.models.operations.MultipleMixedSchemeAuthSecurity security) throws Exception {
        return multipleMixedSchemeAuth(request, security, Optional.empty());
    }
    public org.openapis.openapi.models.operations.MultipleMixedSchemeAuthResponse multipleMixedSchemeAuth(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request,
            org.openapis.openapi.models.operations.MultipleMixedSchemeAuthSecurity security,
            java.util.Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(MULTIPLE_MIXED_SCHEME_AUTH_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/auth#multipleMixedSchemeAuth");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<org.openapis.openapi.models.shared.AuthServiceRequestBody>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                this.sdkConfiguration.userAgent);

        Utils.configureSecurity(_req, security);

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl("multipleMixedSchemeAuth", Optional.empty(), sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl("multipleMixedSchemeAuth", Optional.empty(), sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl("multipleMixedSchemeAuth", Optional.empty(), sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(new AfterErrorContextImpl("multipleMixedSchemeAuth", Optional.empty(), sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.MultipleMixedSchemeAuthResponse.Builder _resBuilder = 
            org.openapis.openapi.models.operations.MultipleMixedSchemeAuthResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        org.openapis.openapi.models.operations.MultipleMixedSchemeAuthResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.toByteArrayAndClose(_httpRes.body()));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.toByteArrayAndClose(_httpRes.body()));
    }



    public org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthRequestBuilder multipleOptionsWithMixedSchemesAuth() {
        return new org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthResponse multipleOptionsWithMixedSchemesAuth(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request,
            org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthSecurity security) throws Exception {
        return multipleOptionsWithMixedSchemesAuth(request, security, Optional.empty());
    }
    public org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthResponse multipleOptionsWithMixedSchemesAuth(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request,
            org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthSecurity security,
            java.util.Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(MULTIPLE_OPTIONS_WITH_MIXED_SCHEMES_AUTH_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/auth#multipleOptionsWithMixedSchemesAuth");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<org.openapis.openapi.models.shared.AuthServiceRequestBody>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                this.sdkConfiguration.userAgent);

        Utils.configureSecurity(_req, security);

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl("multipleOptionsWithMixedSchemesAuth", Optional.empty(), sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl("multipleOptionsWithMixedSchemesAuth", Optional.empty(), sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl("multipleOptionsWithMixedSchemesAuth", Optional.empty(), sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(new AfterErrorContextImpl("multipleOptionsWithMixedSchemesAuth", Optional.empty(), sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthResponse.Builder _resBuilder = 
            org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.toByteArrayAndClose(_httpRes.body()));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.toByteArrayAndClose(_httpRes.body()));
    }



    public org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthRequestBuilder multipleOptionsWithSimpleSchemesAuth() {
        return new org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthResponse multipleOptionsWithSimpleSchemesAuth(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request,
            org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthSecurity security) throws Exception {
        return multipleOptionsWithSimpleSchemesAuth(request, security, Optional.empty());
    }
    public org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthResponse multipleOptionsWithSimpleSchemesAuth(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request,
            org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthSecurity security,
            java.util.Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(MULTIPLE_OPTIONS_WITH_SIMPLE_SCHEMES_AUTH_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/auth#multipleOptionsWithSimpleSchemesAuth");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<org.openapis.openapi.models.shared.AuthServiceRequestBody>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                this.sdkConfiguration.userAgent);

        Utils.configureSecurity(_req, security);

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl("multipleOptionsWithSimpleSchemesAuth", Optional.empty(), sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl("multipleOptionsWithSimpleSchemesAuth", Optional.empty(), sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl("multipleOptionsWithSimpleSchemesAuth", Optional.empty(), sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(new AfterErrorContextImpl("multipleOptionsWithSimpleSchemesAuth", Optional.empty(), sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthResponse.Builder _resBuilder = 
            org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.toByteArrayAndClose(_httpRes.body()));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.toByteArrayAndClose(_httpRes.body()));
    }



    public org.openapis.openapi.models.operations.MultipleSimpleOptionsAuthRequestBuilder multipleSimpleOptionsAuth() {
        return new org.openapis.openapi.models.operations.MultipleSimpleOptionsAuthRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.MultipleSimpleOptionsAuthResponse multipleSimpleOptionsAuth(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request,
            org.openapis.openapi.models.operations.MultipleSimpleOptionsAuthSecurity security) throws Exception {
        return multipleSimpleOptionsAuth(request, security, Optional.empty());
    }
    public org.openapis.openapi.models.operations.MultipleSimpleOptionsAuthResponse multipleSimpleOptionsAuth(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request,
            org.openapis.openapi.models.operations.MultipleSimpleOptionsAuthSecurity security,
            java.util.Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(MULTIPLE_SIMPLE_OPTIONS_AUTH_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/auth#multipleSimpleOptionsAuth");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<org.openapis.openapi.models.shared.AuthServiceRequestBody>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                this.sdkConfiguration.userAgent);

        Utils.configureSecurity(_req, security);

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl("multipleSimpleOptionsAuth", Optional.empty(), sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl("multipleSimpleOptionsAuth", Optional.empty(), sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl("multipleSimpleOptionsAuth", Optional.empty(), sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(new AfterErrorContextImpl("multipleSimpleOptionsAuth", Optional.empty(), sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.MultipleSimpleOptionsAuthResponse.Builder _resBuilder = 
            org.openapis.openapi.models.operations.MultipleSimpleOptionsAuthResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        org.openapis.openapi.models.operations.MultipleSimpleOptionsAuthResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.toByteArrayAndClose(_httpRes.body()));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.toByteArrayAndClose(_httpRes.body()));
    }



    public org.openapis.openapi.models.operations.MultipleSimpleSchemeAuthRequestBuilder multipleSimpleSchemeAuth() {
        return new org.openapis.openapi.models.operations.MultipleSimpleSchemeAuthRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.MultipleSimpleSchemeAuthResponse multipleSimpleSchemeAuth(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request,
            org.openapis.openapi.models.operations.MultipleSimpleSchemeAuthSecurity security) throws Exception {
        return multipleSimpleSchemeAuth(request, security, Optional.empty());
    }
    public org.openapis.openapi.models.operations.MultipleSimpleSchemeAuthResponse multipleSimpleSchemeAuth(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request,
            org.openapis.openapi.models.operations.MultipleSimpleSchemeAuthSecurity security,
            java.util.Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(MULTIPLE_SIMPLE_SCHEME_AUTH_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/auth#multipleSimpleSchemeAuth");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<org.openapis.openapi.models.shared.AuthServiceRequestBody>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                this.sdkConfiguration.userAgent);

        Utils.configureSecurity(_req, security);

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl("multipleSimpleSchemeAuth", Optional.empty(), sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl("multipleSimpleSchemeAuth", Optional.empty(), sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl("multipleSimpleSchemeAuth", Optional.empty(), sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(new AfterErrorContextImpl("multipleSimpleSchemeAuth", Optional.empty(), sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.MultipleSimpleSchemeAuthResponse.Builder _resBuilder = 
            org.openapis.openapi.models.operations.MultipleSimpleSchemeAuthResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        org.openapis.openapi.models.operations.MultipleSimpleSchemeAuthResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.toByteArrayAndClose(_httpRes.body()));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.toByteArrayAndClose(_httpRes.body()));
    }



    public org.openapis.openapi.models.operations.Oauth2AuthNewRequestBuilder oauth2AuthNew() {
        return new org.openapis.openapi.models.operations.Oauth2AuthNewRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.Oauth2AuthNewResponse oauth2AuthNew(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request) throws Exception {
        return oauth2AuthNew(request, Optional.empty());
    }
    public org.openapis.openapi.models.operations.Oauth2AuthNewResponse oauth2AuthNew(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request,
            java.util.Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(OAUTH2_AUTH_NEW_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/auth#oauth2Auth");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<org.openapis.openapi.models.shared.AuthServiceRequestBody>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                this.sdkConfiguration.userAgent);

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl("oauth2AuthNew", Optional.empty(), sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl("oauth2AuthNew", Optional.empty(), sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl("oauth2AuthNew", Optional.empty(), sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(new AfterErrorContextImpl("oauth2AuthNew", Optional.empty(), sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.Oauth2AuthNewResponse.Builder _resBuilder = 
            org.openapis.openapi.models.operations.Oauth2AuthNewResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        org.openapis.openapi.models.operations.Oauth2AuthNewResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.toByteArrayAndClose(_httpRes.body()));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.toByteArrayAndClose(_httpRes.body()));
    }



    public org.openapis.openapi.models.operations.OpenIdConnectAuthNewRequestBuilder openIdConnectAuthNew() {
        return new org.openapis.openapi.models.operations.OpenIdConnectAuthNewRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.OpenIdConnectAuthNewResponse openIdConnectAuthNew(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request,
            org.openapis.openapi.models.operations.OpenIdConnectAuthNewSecurity security) throws Exception {
        return openIdConnectAuthNew(request, security, Optional.empty());
    }
    public org.openapis.openapi.models.operations.OpenIdConnectAuthNewResponse openIdConnectAuthNew(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request,
            org.openapis.openapi.models.operations.OpenIdConnectAuthNewSecurity security,
            java.util.Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(OPEN_ID_CONNECT_AUTH_NEW_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/auth#openIdConnectAuth");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<org.openapis.openapi.models.shared.AuthServiceRequestBody>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                this.sdkConfiguration.userAgent);

        Utils.configureSecurity(_req, security);

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl("openIdConnectAuthNew", Optional.empty(), sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl("openIdConnectAuthNew", Optional.empty(), sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl("openIdConnectAuthNew", Optional.empty(), sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(new AfterErrorContextImpl("openIdConnectAuthNew", Optional.empty(), sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.OpenIdConnectAuthNewResponse.Builder _resBuilder = 
            org.openapis.openapi.models.operations.OpenIdConnectAuthNewResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        org.openapis.openapi.models.operations.OpenIdConnectAuthNewResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.toByteArrayAndClose(_httpRes.body()));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.toByteArrayAndClose(_httpRes.body()));
    }

}
