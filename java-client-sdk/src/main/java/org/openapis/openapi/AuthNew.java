/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.util.Optional;
import org.openapis.openapi.models.errors.SDKError;
import org.openapis.openapi.models.operations.SDKMethodInterfaces.*;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.Utils;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Endpoints for testing authentication.
 */
public class AuthNew implements
            MethodCallAuthGlobal,
            MethodCallBasicAuthNew,
            MethodCallMultipleMixedOptionsAuth,
            MethodCallMultipleMixedSchemeAuth,
            MethodCallMultipleOptionsWithMixedSchemesAuth,
            MethodCallMultipleOptionsWithSimpleSchemesAuth,
            MethodCallMultipleSimpleOptionsAuth,
            MethodCallMultipleSimpleSchemeAuth,
            MethodCallOauth2AuthNew,
            MethodCallOpenIdConnectAuthNew {
    
    /**
     * AUTH_GLOBAL_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] AUTH_GLOBAL_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * BASIC_AUTH_NEW_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] BASIC_AUTH_NEW_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * MULTIPLE_MIXED_OPTIONS_AUTH_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] MULTIPLE_MIXED_OPTIONS_AUTH_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * MULTIPLE_MIXED_SCHEME_AUTH_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] MULTIPLE_MIXED_SCHEME_AUTH_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * MULTIPLE_OPTIONS_WITH_MIXED_SCHEMES_AUTH_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] MULTIPLE_OPTIONS_WITH_MIXED_SCHEMES_AUTH_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * MULTIPLE_OPTIONS_WITH_SIMPLE_SCHEMES_AUTH_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] MULTIPLE_OPTIONS_WITH_SIMPLE_SCHEMES_AUTH_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * MULTIPLE_SIMPLE_OPTIONS_AUTH_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] MULTIPLE_SIMPLE_OPTIONS_AUTH_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * MULTIPLE_SIMPLE_SCHEME_AUTH_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] MULTIPLE_SIMPLE_SCHEME_AUTH_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * OAUTH2_AUTH_NEW_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] OAUTH2_AUTH_NEW_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * OPEN_ID_CONNECT_AUTH_NEW_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] OPEN_ID_CONNECT_AUTH_NEW_SERVERS = {
        "http://localhost:35456",
    };

    private final SDKConfiguration sdkConfiguration;

    AuthNew(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public org.openapis.openapi.models.operations.AuthGlobalRequestBuilder authGlobal() {
        return new org.openapis.openapi.models.operations.AuthGlobalRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.AuthGlobalResponse authGlobal(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request,
            java.util.Optional<String> serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(AUTH_GLOBAL_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/auth#authGlobal");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<org.openapis.openapi.models.shared.AuthServiceRequestBody>() {});
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.AuthGlobalResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.AuthGlobalResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.AuthGlobalResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }


    public org.openapis.openapi.models.operations.BasicAuthNewRequestBuilder basicAuthNew() {
        return new org.openapis.openapi.models.operations.BasicAuthNewRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.BasicAuthNewResponse basicAuthNew(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request,
            org.openapis.openapi.models.operations.BasicAuthNewSecurity security,
            java.util.Optional<String> serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(BASIC_AUTH_NEW_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/auth#basicAuth");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<org.openapis.openapi.models.shared.AuthServiceRequestBody>() {});
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, security);

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.BasicAuthNewResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.BasicAuthNewResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.BasicAuthNewResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }


    public org.openapis.openapi.models.operations.MultipleMixedOptionsAuthRequestBuilder multipleMixedOptionsAuth() {
        return new org.openapis.openapi.models.operations.MultipleMixedOptionsAuthRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.MultipleMixedOptionsAuthResponse multipleMixedOptionsAuth(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request,
            org.openapis.openapi.models.operations.MultipleMixedOptionsAuthSecurity security,
            java.util.Optional<String> serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(MULTIPLE_MIXED_OPTIONS_AUTH_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/auth#multipleMixedOptionsAuth");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<org.openapis.openapi.models.shared.AuthServiceRequestBody>() {});
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, security);

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.MultipleMixedOptionsAuthResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.MultipleMixedOptionsAuthResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.MultipleMixedOptionsAuthResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }


    public org.openapis.openapi.models.operations.MultipleMixedSchemeAuthRequestBuilder multipleMixedSchemeAuth() {
        return new org.openapis.openapi.models.operations.MultipleMixedSchemeAuthRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.MultipleMixedSchemeAuthResponse multipleMixedSchemeAuth(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request,
            org.openapis.openapi.models.operations.MultipleMixedSchemeAuthSecurity security,
            java.util.Optional<String> serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(MULTIPLE_MIXED_SCHEME_AUTH_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/auth#multipleMixedSchemeAuth");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<org.openapis.openapi.models.shared.AuthServiceRequestBody>() {});
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, security);

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.MultipleMixedSchemeAuthResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.MultipleMixedSchemeAuthResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.MultipleMixedSchemeAuthResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }


    public org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthRequestBuilder multipleOptionsWithMixedSchemesAuth() {
        return new org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthResponse multipleOptionsWithMixedSchemesAuth(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request,
            org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthSecurity security,
            java.util.Optional<String> serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(MULTIPLE_OPTIONS_WITH_MIXED_SCHEMES_AUTH_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/auth#multipleOptionsWithMixedSchemesAuth");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<org.openapis.openapi.models.shared.AuthServiceRequestBody>() {});
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, security);

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }


    public org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthRequestBuilder multipleOptionsWithSimpleSchemesAuth() {
        return new org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthResponse multipleOptionsWithSimpleSchemesAuth(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request,
            org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthSecurity security,
            java.util.Optional<String> serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(MULTIPLE_OPTIONS_WITH_SIMPLE_SCHEMES_AUTH_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/auth#multipleOptionsWithSimpleSchemesAuth");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<org.openapis.openapi.models.shared.AuthServiceRequestBody>() {});
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, security);

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }


    public org.openapis.openapi.models.operations.MultipleSimpleOptionsAuthRequestBuilder multipleSimpleOptionsAuth() {
        return new org.openapis.openapi.models.operations.MultipleSimpleOptionsAuthRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.MultipleSimpleOptionsAuthResponse multipleSimpleOptionsAuth(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request,
            org.openapis.openapi.models.operations.MultipleSimpleOptionsAuthSecurity security,
            java.util.Optional<String> serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(MULTIPLE_SIMPLE_OPTIONS_AUTH_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/auth#multipleSimpleOptionsAuth");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<org.openapis.openapi.models.shared.AuthServiceRequestBody>() {});
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, security);

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.MultipleSimpleOptionsAuthResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.MultipleSimpleOptionsAuthResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.MultipleSimpleOptionsAuthResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }


    public org.openapis.openapi.models.operations.MultipleSimpleSchemeAuthRequestBuilder multipleSimpleSchemeAuth() {
        return new org.openapis.openapi.models.operations.MultipleSimpleSchemeAuthRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.MultipleSimpleSchemeAuthResponse multipleSimpleSchemeAuth(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request,
            org.openapis.openapi.models.operations.MultipleSimpleSchemeAuthSecurity security,
            java.util.Optional<String> serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(MULTIPLE_SIMPLE_SCHEME_AUTH_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/auth#multipleSimpleSchemeAuth");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<org.openapis.openapi.models.shared.AuthServiceRequestBody>() {});
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, security);

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.MultipleSimpleSchemeAuthResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.MultipleSimpleSchemeAuthResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.MultipleSimpleSchemeAuthResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }


    public org.openapis.openapi.models.operations.Oauth2AuthNewRequestBuilder oauth2AuthNew() {
        return new org.openapis.openapi.models.operations.Oauth2AuthNewRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.Oauth2AuthNewResponse oauth2AuthNew(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request,
            java.util.Optional<String> serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(OAUTH2_AUTH_NEW_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/auth#oauth2Auth");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<org.openapis.openapi.models.shared.AuthServiceRequestBody>() {});
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.Oauth2AuthNewResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.Oauth2AuthNewResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.Oauth2AuthNewResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }


    public org.openapis.openapi.models.operations.OpenIdConnectAuthNewRequestBuilder openIdConnectAuthNew() {
        return new org.openapis.openapi.models.operations.OpenIdConnectAuthNewRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.OpenIdConnectAuthNewResponse openIdConnectAuthNew(
            org.openapis.openapi.models.shared.AuthServiceRequestBody request,
            org.openapis.openapi.models.operations.OpenIdConnectAuthNewSecurity security,
            java.util.Optional<String> serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(OPEN_ID_CONNECT_AUTH_NEW_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/auth#openIdConnectAuth");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<org.openapis.openapi.models.shared.AuthServiceRequestBody>() {});
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, security);

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.OpenIdConnectAuthNewResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.OpenIdConnectAuthNewResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.OpenIdConnectAuthNewResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }

}
