/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.util.Optional;
import org.apache.http.NameValuePair;
import org.openapis.openapi.models.errors.SDKError;
import org.openapis.openapi.models.operations.SDKMethodInterfaces.*;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.Utils;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Testing for documentation extensions and tooling.
 */
public class Documentation implements
            MethodCallGetDocumentationPerLanguage {

    private final SDKConfiguration sdkConfiguration;

    Documentation(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public org.openapis.openapi.models.operations.GetDocumentationPerLanguageRequestBuilder getDocumentationPerLanguage() {
        return new org.openapis.openapi.models.operations.GetDocumentationPerLanguageRequestBuilder(this);
    }

    /**
     * Gets documentation for some language, I guess.
     * @param language The language parameter for this endpoint.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public org.openapis.openapi.models.operations.GetDocumentationPerLanguageResponse getDocumentationPerLanguage(
            String language) throws Exception {
        org.openapis.openapi.models.operations.GetDocumentationPerLanguageRequest request =
            org.openapis.openapi.models.operations.GetDocumentationPerLanguageRequest
                .builder()
                .language(language)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/docs/per-language-docs");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.GetDocumentationPerLanguageRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.GetDocumentationPerLanguageResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.GetDocumentationPerLanguageResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.GetDocumentationPerLanguageResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }

}
