/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.Optional;
import org.openapis.openapi.models.errors.SDKError;
import org.openapis.openapi.models.operations.SDKMethodInterfaces.*;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.Utils;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Endpoints for testing error responses.
 */
public class Errors implements
            MethodCallConnectionErrorGet,
            MethodCallStatusGetError,
            MethodCallStatusGetXSpeakeasyErrors {
    
    /**
     * CONNECTION_ERROR_GET_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] CONNECTION_ERROR_GET_SERVERS = {
        "http://somebrokenapi.broken",
    };
    
    /**
     * STATUS_GET_X_SPEAKEASY_ERRORS_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] STATUS_GET_X_SPEAKEASY_ERRORS_SERVERS = {
        "http://localhost:35456",
    };

    private final SDKConfiguration sdkConfiguration;

    Errors(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public org.openapis.openapi.models.operations.ConnectionErrorGetRequestBuilder connectionErrorGet() {
        return new org.openapis.openapi.models.operations.ConnectionErrorGetRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.ConnectionErrorGetResponse connectionErrorGet(
            java.util.Optional<String> serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(CONNECTION_ERROR_GET_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/connectionError");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.ConnectionErrorGetResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.ConnectionErrorGetResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.ConnectionErrorGetResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }


    public org.openapis.openapi.models.operations.StatusGetErrorRequestBuilder statusGetError() {
        return new org.openapis.openapi.models.operations.StatusGetErrorRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.StatusGetErrorResponse statusGetError(
            long statusCode) throws Exception {
        org.openapis.openapi.models.operations.StatusGetErrorRequest request =
            org.openapis.openapi.models.operations.StatusGetErrorRequest
                .builder()
                .statusCode(statusCode)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                org.openapis.openapi.models.operations.StatusGetErrorRequest.class,
                baseUrl,
                "/status/{statusCode}",
                request, this.sdkConfiguration.globals);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.StatusGetErrorResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.StatusGetErrorResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.StatusGetErrorResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }


    public org.openapis.openapi.models.operations.StatusGetXSpeakeasyErrorsRequestBuilder statusGetXSpeakeasyErrors() {
        return new org.openapis.openapi.models.operations.StatusGetXSpeakeasyErrorsRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.StatusGetXSpeakeasyErrorsResponse statusGetXSpeakeasyErrors(
            long statusCode,
            java.util.Optional<String> serverURL) throws Exception {
        org.openapis.openapi.models.operations.StatusGetXSpeakeasyErrorsRequest request =
            org.openapis.openapi.models.operations.StatusGetXSpeakeasyErrorsRequest
                .builder()
                .statusCode(statusCode)
                .build();
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(STATUS_GET_X_SPEAKEASY_ERRORS_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                org.openapis.openapi.models.operations.StatusGetXSpeakeasyErrorsRequest.class,
                baseUrl,
                "/errors/{statusCode}",
                request, this.sdkConfiguration.globals);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.StatusGetXSpeakeasyErrorsResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.StatusGetXSpeakeasyErrorsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.StatusGetXSpeakeasyErrorsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 300) {
        } else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || (httpRes.statusCode() >= 400 && httpRes.statusCode() < 500)) {
            throw new SDKError(httpRes, httpRes.statusCode(), "API error occurred", Utils.toByteArrayAndClose(httpRes.body()));
        } else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.errors.Error out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.errors.Error>() {});
                throw out;
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 501) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.errors.StatusGetXSpeakeasyErrorsResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.errors.StatusGetXSpeakeasyErrorsResponseBody>() {});
                    out.withRawResponse(java.util.Optional.ofNullable(httpRes));
                
                throw out;
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }

}
