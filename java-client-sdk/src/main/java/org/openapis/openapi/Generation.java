/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.apache.http.NameValuePair;
import org.openapis.openapi.models.errors.SDKError;
import org.openapis.openapi.models.operations.SDKMethodInterfaces.*;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.Utils;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Endpoints for purely testing valid generation behavior.
 */
public class Generation implements
            MethodCallAnchorTypesGet,
            MethodCallArrayCircularReferenceGet,
            MethodCallCircularReferenceGet,
            MethodCallDateParamWithDefault,
            MethodCallDateTimeParamWithDefault,
            MethodCallDecimalParamWithDefault,
            MethodCallDeprecatedFieldInSchemaPost,
            MethodCallDeprecatedObjectInSchemaGet,
            MethodCallDeprecatedOperationNoCommentsGet,
            MethodCallDeprecatedOperationWithCommentsGet,
            MethodCallEmptyObjectGet,
            MethodCallEmptyResponseObjectWithCommentGet,
            MethodCallGetGlobalNameOverride,
            MethodCallIgnoredGenerationGet,
            MethodCallIgnoresPost,
            MethodCallNameOverrideGet,
            MethodCallObjectCircularReferenceGet,
            MethodCallOneOfCircularReferenceGet,
            MethodCallTypedParameterGenerationGet,
            MethodCallUsageExamplePost {

    private final SDKConfiguration sdkConfiguration;

    Generation(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public org.openapis.openapi.models.operations.AnchorTypesGetRequestBuilder anchorTypesGet() {
        return new org.openapis.openapi.models.operations.AnchorTypesGetRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.AnchorTypesGetResponse anchorTypesGetDirect() throws Exception {

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/anchorTypes");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.AnchorTypesGetResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.AnchorTypesGetResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.AnchorTypesGetResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.AnchorTypesGetTypeFromAnchor out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.AnchorTypesGetTypeFromAnchor>() {});
                res.withTypeFromAnchor(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.ArrayCircularReferenceGetRequestBuilder arrayCircularReferenceGet() {
        return new org.openapis.openapi.models.operations.ArrayCircularReferenceGetRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.ArrayCircularReferenceGetResponse arrayCircularReferenceGetDirect() throws Exception {

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/arrayCircularReference");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.ArrayCircularReferenceGetResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.ArrayCircularReferenceGetResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.ArrayCircularReferenceGetResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.List<org.openapis.openapi.models.shared.ArrayCircularReferenceObject> out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<java.util.List<org.openapis.openapi.models.shared.ArrayCircularReferenceObject>>() {});
                res.withArrayCircularReferenceObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.CircularReferenceGetRequestBuilder circularReferenceGet() {
        return new org.openapis.openapi.models.operations.CircularReferenceGetRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.CircularReferenceGetResponse circularReferenceGetDirect() throws Exception {

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/circularReference");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.CircularReferenceGetResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.CircularReferenceGetResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.CircularReferenceGetResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ValidCircularReferenceObject out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.shared.ValidCircularReferenceObject>() {});
                res.withValidCircularReferenceObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.DateParamWithDefaultRequestBuilder dateParamWithDefault() {
        return new org.openapis.openapi.models.operations.DateParamWithDefaultRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.DateParamWithDefaultResponse dateParamWithDefault(
            LocalDate dateInput) throws Exception {
        org.openapis.openapi.models.operations.DateParamWithDefaultRequest request =
            org.openapis.openapi.models.operations.DateParamWithDefaultRequest
                .builder()
                .dateInput(dateInput)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/dateParamWithDefault");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.DateParamWithDefaultRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.DateParamWithDefaultResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.DateParamWithDefaultResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.DateParamWithDefaultResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }


    public org.openapis.openapi.models.operations.DateTimeParamWithDefaultRequestBuilder dateTimeParamWithDefault() {
        return new org.openapis.openapi.models.operations.DateTimeParamWithDefaultRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.DateTimeParamWithDefaultResponse dateTimeParamWithDefault(
            OffsetDateTime dateTimeInput) throws Exception {
        org.openapis.openapi.models.operations.DateTimeParamWithDefaultRequest request =
            org.openapis.openapi.models.operations.DateTimeParamWithDefaultRequest
                .builder()
                .dateTimeInput(dateTimeInput)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/dateTimeParamWithDefault");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.DateTimeParamWithDefaultRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.DateTimeParamWithDefaultResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.DateTimeParamWithDefaultResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.DateTimeParamWithDefaultResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }


    public org.openapis.openapi.models.operations.DecimalParamWithDefaultRequestBuilder decimalParamWithDefault() {
        return new org.openapis.openapi.models.operations.DecimalParamWithDefaultRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.DecimalParamWithDefaultResponse decimalParamWithDefault(
            BigDecimal decimalInput) throws Exception {
        org.openapis.openapi.models.operations.DecimalParamWithDefaultRequest request =
            org.openapis.openapi.models.operations.DecimalParamWithDefaultRequest
                .builder()
                .decimalInput(decimalInput)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/decimalParamWithDefault");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.DecimalParamWithDefaultRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.DecimalParamWithDefaultResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.DecimalParamWithDefaultResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.DecimalParamWithDefaultResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }


    public org.openapis.openapi.models.operations.DeprecatedFieldInSchemaPostRequestBuilder deprecatedFieldInSchemaPost() {
        return new org.openapis.openapi.models.operations.DeprecatedFieldInSchemaPostRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.DeprecatedFieldInSchemaPostResponse deprecatedFieldInSchemaPost(
            org.openapis.openapi.models.shared.DeprecatedFieldInObject request) throws Exception {

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/deprecatedFieldInSchema");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<org.openapis.openapi.models.shared.DeprecatedFieldInObject>() {});
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.DeprecatedFieldInSchemaPostResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.DeprecatedFieldInSchemaPostResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.DeprecatedFieldInSchemaPostResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }


    public org.openapis.openapi.models.operations.DeprecatedObjectInSchemaGetRequestBuilder deprecatedObjectInSchemaGet() {
        return new org.openapis.openapi.models.operations.DeprecatedObjectInSchemaGetRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.DeprecatedObjectInSchemaGetResponse deprecatedObjectInSchemaGetDirect() throws Exception {

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/deprecatedObjectInSchema");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.DeprecatedObjectInSchemaGetResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.DeprecatedObjectInSchemaGetResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.DeprecatedObjectInSchemaGetResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DeprecatedObjectInSchemaGetResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.DeprecatedObjectInSchemaGetResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.DeprecatedOperationNoCommentsGetRequestBuilder deprecatedOperationNoCommentsGet() {
        return new org.openapis.openapi.models.operations.DeprecatedOperationNoCommentsGetRequestBuilder(this);
    }

    /**
     * @param deprecatedParameter
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public org.openapis.openapi.models.operations.DeprecatedOperationNoCommentsGetResponse deprecatedOperationNoCommentsGet(
            Optional<? extends String> deprecatedParameter) throws Exception {
        org.openapis.openapi.models.operations.DeprecatedOperationNoCommentsGetRequest request =
            org.openapis.openapi.models.operations.DeprecatedOperationNoCommentsGetRequest
                .builder()
                .deprecatedParameter(deprecatedParameter)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/deprecatedOperationNoComments");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.DeprecatedOperationNoCommentsGetRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.DeprecatedOperationNoCommentsGetResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.DeprecatedOperationNoCommentsGetResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.DeprecatedOperationNoCommentsGetResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }


    public org.openapis.openapi.models.operations.DeprecatedOperationWithCommentsGetRequestBuilder deprecatedOperationWithCommentsGet() {
        return new org.openapis.openapi.models.operations.DeprecatedOperationWithCommentsGetRequestBuilder(this);
    }

    /**
     * This is an endpoint setup to test deprecation with comments
     * @param deprecatedParameter This is a string parameter
     * @param newParameter This is a string parameter
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     * @deprecated method: This operation is deprecated. Use simplePathParameterObjects instead.
     */
    @Deprecated
    public org.openapis.openapi.models.operations.DeprecatedOperationWithCommentsGetResponse deprecatedOperationWithCommentsGet(
            Optional<? extends String> deprecatedParameter,
            Optional<? extends String> newParameter) throws Exception {
        org.openapis.openapi.models.operations.DeprecatedOperationWithCommentsGetRequest request =
            org.openapis.openapi.models.operations.DeprecatedOperationWithCommentsGetRequest
                .builder()
                .deprecatedParameter(deprecatedParameter)
                .newParameter(newParameter)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/deprecatedOperationWithComments");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.DeprecatedOperationWithCommentsGetRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.DeprecatedOperationWithCommentsGetResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.DeprecatedOperationWithCommentsGetResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.DeprecatedOperationWithCommentsGetResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }


    public org.openapis.openapi.models.operations.EmptyObjectGetRequestBuilder emptyObjectGet() {
        return new org.openapis.openapi.models.operations.EmptyObjectGetRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.EmptyObjectGetResponse emptyObjectGet(
            org.openapis.openapi.models.shared.EmptyObjectParam emptyObject) throws Exception {
        org.openapis.openapi.models.operations.EmptyObjectGetRequest request =
            org.openapis.openapi.models.operations.EmptyObjectGetRequest
                .builder()
                .emptyObject(emptyObject)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                org.openapis.openapi.models.operations.EmptyObjectGetRequest.class,
                baseUrl,
                "/anything/{emptyObject}",
                request, this.sdkConfiguration.globals);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.EmptyObjectGetResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.EmptyObjectGetResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.EmptyObjectGetResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }


    public org.openapis.openapi.models.operations.EmptyResponseObjectWithCommentGetRequestBuilder emptyResponseObjectWithCommentGet() {
        return new org.openapis.openapi.models.operations.EmptyResponseObjectWithCommentGetRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.EmptyResponseObjectWithCommentGetResponse emptyResponseObjectWithCommentGetDirect() throws Exception {

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/emptyResponseObjectWithComment");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/octet-stream");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.EmptyResponseObjectWithCommentGetResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.EmptyResponseObjectWithCommentGetResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.EmptyResponseObjectWithCommentGetResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/octet-stream")) {
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.GetGlobalNameOverrideRequestBuilder globalNameOverridden() {
        return new org.openapis.openapi.models.operations.GetGlobalNameOverrideRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.GetGlobalNameOverrideResponse globalNameOverridden(
            Optional<? extends org.openapis.openapi.models.shared.SimpleObject> request) throws Exception {

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/globalNameOverride");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<Optional<? extends org.openapis.openapi.models.shared.SimpleObject>>() {});
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.GetGlobalNameOverrideResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.GetGlobalNameOverrideResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.GetGlobalNameOverrideResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetGlobalNameOverrideResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.GetGlobalNameOverrideResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.IgnoredGenerationGetRequestBuilder ignoredGenerationGet() {
        return new org.openapis.openapi.models.operations.IgnoredGenerationGetRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.IgnoredGenerationGetResponse ignoredGenerationGetDirect() throws Exception {

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/ignoredGeneration");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.IgnoredGenerationGetResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.IgnoredGenerationGetResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.IgnoredGenerationGetResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.IgnoredGenerationGetResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.IgnoredGenerationGetResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.IgnoresPostRequestBuilder ignoresPost() {
        return new org.openapis.openapi.models.operations.IgnoresPostRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.IgnoresPostResponse ignoresPost(
            org.openapis.openapi.models.operations.IgnoresPostRequestBody requestBody,
            Optional<? extends String> testParam) throws Exception {
        org.openapis.openapi.models.operations.IgnoresPostRequest request =
            org.openapis.openapi.models.operations.IgnoresPostRequest
                .builder()
                .requestBody(requestBody)
                .testParam(testParam)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/ignores");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.IgnoresPostRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.IgnoresPostResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.IgnoresPostResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.IgnoresPostResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.HttpBinSimpleJsonObject out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.shared.HttpBinSimpleJsonObject>() {});
                res.withHttpBinSimpleJsonObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.NameOverrideGetRequestBuilder nameOverride() {
        return new org.openapis.openapi.models.operations.NameOverrideGetRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.NameOverrideGetResponse nameOverride(
            org.openapis.openapi.models.operations.EnumNameOverride testEnumQueryParam,
            String testQueryParam) throws Exception {
        org.openapis.openapi.models.operations.NameOverrideGetRequest request =
            org.openapis.openapi.models.operations.NameOverrideGetRequest
                .builder()
                .testEnumQueryParam(testEnumQueryParam)
                .testQueryParam(testQueryParam)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/nameOverride");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.NameOverrideGetRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.NameOverrideGetResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.NameOverrideGetResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.NameOverrideGetResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.NameOverrideGetOverriddenResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.NameOverrideGetOverriddenResponse>() {});
                res.withOverriddenResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.ObjectCircularReferenceGetRequestBuilder objectCircularReferenceGet() {
        return new org.openapis.openapi.models.operations.ObjectCircularReferenceGetRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.ObjectCircularReferenceGetResponse objectCircularReferenceGetDirect() throws Exception {

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/objectCircularReference");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.ObjectCircularReferenceGetResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.ObjectCircularReferenceGetResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.ObjectCircularReferenceGetResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ObjectCircularReferenceObject out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.shared.ObjectCircularReferenceObject>() {});
                res.withObjectCircularReferenceObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.OneOfCircularReferenceGetRequestBuilder oneOfCircularReferenceGet() {
        return new org.openapis.openapi.models.operations.OneOfCircularReferenceGetRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.OneOfCircularReferenceGetResponse oneOfCircularReferenceGetDirect() throws Exception {

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/oneOfCircularReference");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.OneOfCircularReferenceGetResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.OneOfCircularReferenceGetResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.OneOfCircularReferenceGetResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.OneOfCircularReferenceObject out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.shared.OneOfCircularReferenceObject>() {});
                res.withOneOfCircularReferenceObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.TypedParameterGenerationGetRequestBuilder typedParameterGenerationGet() {
        return new org.openapis.openapi.models.operations.TypedParameterGenerationGetRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.TypedParameterGenerationGetResponse typedParameterGenerationGet(
            Optional<? extends BigInteger> bigint,
            Optional<? extends LocalDate> date,
            Optional<? extends BigDecimal> decimal,
            Optional<? extends org.openapis.openapi.models.operations.Obj> obj) throws Exception {
        org.openapis.openapi.models.operations.TypedParameterGenerationGetRequest request =
            org.openapis.openapi.models.operations.TypedParameterGenerationGetRequest
                .builder()
                .bigint(bigint)
                .date(date)
                .decimal(decimal)
                .obj(obj)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/typedParameterGeneration");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.TypedParameterGenerationGetRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.TypedParameterGenerationGetResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.TypedParameterGenerationGetResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.TypedParameterGenerationGetResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }


    public org.openapis.openapi.models.operations.UsageExamplePostRequestBuilder usageExamplePost() {
        return new org.openapis.openapi.models.operations.UsageExamplePostRequestBuilder(this);
    }

    /**
     * An operation used for testing usage examples
     * An operation used for testing usage examples that includes a large array of parameters and input types to ensure that all are handled correctly
     * https://docs.example.com - Usage example docs
     * @param request The request object containing all of the parameters for the API call.
     * @param security The security details to use for authentication.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public org.openapis.openapi.models.operations.UsageExamplePostResponse usageExamplePost(
            org.openapis.openapi.models.operations.UsageExamplePostRequest request,
            org.openapis.openapi.models.operations.UsageExamplePostSecurity security) throws Exception {

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/usageExample");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<org.openapis.openapi.models.operations.UsageExamplePostRequest>() {});
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.UsageExamplePostRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, security);

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.UsageExamplePostResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.UsageExamplePostResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.UsageExamplePostResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.UsageExamplePostResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.UsageExamplePostResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }

}
