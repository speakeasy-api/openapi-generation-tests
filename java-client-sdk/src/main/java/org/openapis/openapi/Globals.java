/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.Long;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.models.errors.SDKError;
import org.openapis.openapi.models.operations.GlobalPathParameterGetRequest;
import org.openapis.openapi.models.operations.GlobalPathParameterGetRequestBuilder;
import org.openapis.openapi.models.operations.GlobalPathParameterGetRes;
import org.openapis.openapi.models.operations.GlobalPathParameterGetResponse;
import org.openapis.openapi.models.operations.GlobalsHeaderGetRequest;
import org.openapis.openapi.models.operations.GlobalsHeaderGetRequestBuilder;
import org.openapis.openapi.models.operations.GlobalsHeaderGetRes;
import org.openapis.openapi.models.operations.GlobalsHeaderGetResponse;
import org.openapis.openapi.models.operations.GlobalsHiddenPostRequest;
import org.openapis.openapi.models.operations.GlobalsHiddenPostRequestBuilder;
import org.openapis.openapi.models.operations.GlobalsHiddenPostRes;
import org.openapis.openapi.models.operations.GlobalsHiddenPostResponse;
import org.openapis.openapi.models.operations.GlobalsOptionalHiddenPathParameterOperationRequiredRequest;
import org.openapis.openapi.models.operations.GlobalsOptionalHiddenPathParameterOperationRequiredRequestBuilder;
import org.openapis.openapi.models.operations.GlobalsOptionalHiddenPathParameterOperationRequiredResponse;
import org.openapis.openapi.models.operations.GlobalsOptionalHiddenPathParameterPathRequiredRequest;
import org.openapis.openapi.models.operations.GlobalsOptionalHiddenPathParameterPathRequiredRequestBuilder;
import org.openapis.openapi.models.operations.GlobalsOptionalHiddenPathParameterPathRequiredResponse;
import org.openapis.openapi.models.operations.GlobalsOptionalPathParameterOperationRequiredRequest;
import org.openapis.openapi.models.operations.GlobalsOptionalPathParameterOperationRequiredRequestBuilder;
import org.openapis.openapi.models.operations.GlobalsOptionalPathParameterOperationRequiredResponse;
import org.openapis.openapi.models.operations.GlobalsOptionalPathParameterPathRequiredRequest;
import org.openapis.openapi.models.operations.GlobalsOptionalPathParameterPathRequiredRequestBuilder;
import org.openapis.openapi.models.operations.GlobalsOptionalPathParameterPathRequiredResponse;
import org.openapis.openapi.models.operations.GlobalsQueryParameterGetRequest;
import org.openapis.openapi.models.operations.GlobalsQueryParameterGetRequestBuilder;
import org.openapis.openapi.models.operations.GlobalsQueryParameterGetRes;
import org.openapis.openapi.models.operations.GlobalsQueryParameterGetResponse;
import org.openapis.openapi.models.operations.SDKMethodInterfaces.*;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.Hook.AfterErrorContextImpl;
import org.openapis.openapi.utils.Hook.AfterSuccessContextImpl;
import org.openapis.openapi.utils.Hook.BeforeRequestContextImpl;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.Utils.JsonShape;
import org.openapis.openapi.utils.Utils; 

/**
 * Endpoints for testing global parameters.
 */
public class Globals implements
            MethodCallGlobalPathParameterGet,
            MethodCallGlobalsHeaderGet,
            MethodCallGlobalsHiddenPost,
            MethodCallGlobalsOptionalHiddenPathParameterOperationRequired,
            MethodCallGlobalsOptionalHiddenPathParameterPathRequired,
            MethodCallGlobalsOptionalPathParameterOperationRequired,
            MethodCallGlobalsOptionalPathParameterPathRequired,
            MethodCallGlobalsQueryParameterGet {

    private final SDKConfiguration sdkConfiguration;

    Globals(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    public GlobalPathParameterGetRequestBuilder globalPathParameterGet() {
        return new GlobalPathParameterGetRequestBuilder(this);
    }

    public GlobalPathParameterGetResponse globalPathParameterGetDirect() throws Exception {
        return globalPathParameterGet(Optional.empty());
    }
    
    public GlobalPathParameterGetResponse globalPathParameterGet(
            Optional<Long> globalPathParam) throws Exception {
        GlobalPathParameterGetRequest request =
            GlobalPathParameterGetRequest
                .builder()
                .globalPathParam(globalPathParam)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                GlobalPathParameterGetRequest.class,
                _baseUrl,
                "/anything/globals/pathParameter/{globalPathParam}",
                request, this.sdkConfiguration.globals);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("x-speakeasy-user-agent", 
                SDKConfiguration.USER_AGENT);
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "globalPathParameterGet", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "globalPathParameterGet",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "globalPathParameterGet",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "globalPathParameterGet",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GlobalPathParameterGetResponse.Builder _resBuilder = 
            GlobalPathParameterGetResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GlobalPathParameterGetResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                GlobalPathParameterGetRes _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GlobalPathParameterGetRes>() {});
                _res.withRes(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    public GlobalsHeaderGetRequestBuilder globalsHeaderGet() {
        return new GlobalsHeaderGetRequestBuilder(this);
    }

    public GlobalsHeaderGetResponse globalsHeaderGetDirect() throws Exception {
        return globalsHeaderGet(Optional.empty());
    }
    
    public GlobalsHeaderGetResponse globalsHeaderGet(
            Optional<Boolean> globalHeaderParam) throws Exception {
        GlobalsHeaderGetRequest request =
            GlobalsHeaderGetRequest
                .builder()
                .globalHeaderParam(globalHeaderParam)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/anything/globals/header");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("x-speakeasy-user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, this.sdkConfiguration.globals));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "globalsHeaderGet", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "globalsHeaderGet",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "globalsHeaderGet",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "globalsHeaderGet",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GlobalsHeaderGetResponse.Builder _resBuilder = 
            GlobalsHeaderGetResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GlobalsHeaderGetResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                GlobalsHeaderGetRes _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GlobalsHeaderGetRes>() {});
                _res.withRes(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    public GlobalsHiddenPostRequestBuilder globalsHiddenPost() {
        return new GlobalsHiddenPostRequestBuilder(this);
    }

    public GlobalsHiddenPostResponse globalsHiddenPost(
            GlobalsHiddenPostRequest request) throws Exception {
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                GlobalsHiddenPostRequest.class,
                _baseUrl,
                "/anything/globals/hidden/{globalHiddenPathParam}",
                request, this.sdkConfiguration.globals);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<GlobalsHiddenPostRequest>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("x-speakeasy-user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GlobalsHiddenPostRequest.class,
                request, 
                this.sdkConfiguration.globals));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, this.sdkConfiguration.globals));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "globalsHiddenPost", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "globalsHiddenPost",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "globalsHiddenPost",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "globalsHiddenPost",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GlobalsHiddenPostResponse.Builder _resBuilder = 
            GlobalsHiddenPostResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GlobalsHiddenPostResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                GlobalsHiddenPostRes _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GlobalsHiddenPostRes>() {});
                _res.withRes(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * This operation requires a globally optional hidden path parameter. A - failing test with 404 likely indicates that the path parameter value is - not being templated into the client (.../hidden//...). - 
     * @return The call builder
     */
    public GlobalsOptionalHiddenPathParameterOperationRequiredRequestBuilder globalsOptionalHiddenPathParameterOperationRequired() {
        return new GlobalsOptionalHiddenPathParameterOperationRequiredRequestBuilder(this);
    }

    /**
     * This operation requires a globally optional hidden path parameter. A - failing test with 404 likely indicates that the path parameter value is - not being templated into the client (.../hidden//...). - 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GlobalsOptionalHiddenPathParameterOperationRequiredResponse globalsOptionalHiddenPathParameterOperationRequiredDirect() throws Exception {
        return globalsOptionalHiddenPathParameterOperationRequired(Optional.empty());
    }
    
    /**
     * This operation requires a globally optional hidden path parameter. A - failing test with 404 likely indicates that the path parameter value is - not being templated into the client (.../hidden//...). - 
     * @param globalOptionalHiddenPathParam An optional and hidden global path parameter. Some paths and operations
    will override it to required: true, especially for verifying test
    generation where the value should be templated in the SDK client.

     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GlobalsOptionalHiddenPathParameterOperationRequiredResponse globalsOptionalHiddenPathParameterOperationRequired(
            Optional<String> globalOptionalHiddenPathParam) throws Exception {
        GlobalsOptionalHiddenPathParameterOperationRequiredRequest request =
            GlobalsOptionalHiddenPathParameterOperationRequiredRequest
                .builder()
                .globalOptionalHiddenPathParam(globalOptionalHiddenPathParam)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                GlobalsOptionalHiddenPathParameterOperationRequiredRequest.class,
                _baseUrl,
                "/anything/globals/hidden/{globalOptionalHiddenPathParam}/operation/required",
                request, this.sdkConfiguration.globals);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                SDKConfiguration.USER_AGENT);
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "globalsOptionalHiddenPathParameterOperationRequired", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "globalsOptionalHiddenPathParameterOperationRequired",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "globalsOptionalHiddenPathParameterOperationRequired",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "globalsOptionalHiddenPathParameterOperationRequired",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GlobalsOptionalHiddenPathParameterOperationRequiredResponse.Builder _resBuilder = 
            GlobalsOptionalHiddenPathParameterOperationRequiredResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GlobalsOptionalHiddenPathParameterOperationRequiredResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "2XX")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * This path requires a globally optional hidden path parameter. A failing - test with 404 likely indicates that the path parameter value is not - being templated into the client (.../hidden//...). - 
     * @return The call builder
     */
    public GlobalsOptionalHiddenPathParameterPathRequiredRequestBuilder globalsOptionalHiddenPathParameterPathRequired() {
        return new GlobalsOptionalHiddenPathParameterPathRequiredRequestBuilder(this);
    }

    /**
     * This path requires a globally optional hidden path parameter. A failing - test with 404 likely indicates that the path parameter value is not - being templated into the client (.../hidden//...). - 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GlobalsOptionalHiddenPathParameterPathRequiredResponse globalsOptionalHiddenPathParameterPathRequiredDirect() throws Exception {
        return globalsOptionalHiddenPathParameterPathRequired(Optional.empty());
    }
    
    /**
     * This path requires a globally optional hidden path parameter. A failing - test with 404 likely indicates that the path parameter value is not - being templated into the client (.../hidden//...). - 
     * @param globalOptionalHiddenPathParam An optional and hidden global path parameter. Some paths and operations
    will override it to required: true, especially for verifying test
    generation where the value should be templated in the SDK client.

     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GlobalsOptionalHiddenPathParameterPathRequiredResponse globalsOptionalHiddenPathParameterPathRequired(
            Optional<String> globalOptionalHiddenPathParam) throws Exception {
        GlobalsOptionalHiddenPathParameterPathRequiredRequest request =
            GlobalsOptionalHiddenPathParameterPathRequiredRequest
                .builder()
                .globalOptionalHiddenPathParam(globalOptionalHiddenPathParam)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                GlobalsOptionalHiddenPathParameterPathRequiredRequest.class,
                _baseUrl,
                "/anything/globals/hidden/{globalOptionalHiddenPathParam}/path/required",
                request, this.sdkConfiguration.globals);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                SDKConfiguration.USER_AGENT);
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "globalsOptionalHiddenPathParameterPathRequired", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "globalsOptionalHiddenPathParameterPathRequired",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "globalsOptionalHiddenPathParameterPathRequired",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "globalsOptionalHiddenPathParameterPathRequired",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GlobalsOptionalHiddenPathParameterPathRequiredResponse.Builder _resBuilder = 
            GlobalsOptionalHiddenPathParameterPathRequiredResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GlobalsOptionalHiddenPathParameterPathRequiredResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "2XX")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * This operation requires a globally optional path parameter. A failing - test with 404 likely indicates that the path parameter value is not - being templated into the operation request (.../globals//...). - 
     * @return The call builder
     */
    public GlobalsOptionalPathParameterOperationRequiredRequestBuilder globalsOptionalPathParameterOperationRequired() {
        return new GlobalsOptionalPathParameterOperationRequiredRequestBuilder(this);
    }

    /**
     * This operation requires a globally optional path parameter. A failing - test with 404 likely indicates that the path parameter value is not - being templated into the operation request (.../globals//...). - 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GlobalsOptionalPathParameterOperationRequiredResponse globalsOptionalPathParameterOperationRequiredDirect() throws Exception {
        return globalsOptionalPathParameterOperationRequired(Optional.empty());
    }
    
    /**
     * This operation requires a globally optional path parameter. A failing - test with 404 likely indicates that the path parameter value is not - being templated into the operation request (.../globals//...). - 
     * @param globalOptionalPathParam An optional global path parameter. Some paths and operations will
    override it to required: true, especially for verifying test generation
    where the value should be templated in the operation request.

     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GlobalsOptionalPathParameterOperationRequiredResponse globalsOptionalPathParameterOperationRequired(
            Optional<String> globalOptionalPathParam) throws Exception {
        GlobalsOptionalPathParameterOperationRequiredRequest request =
            GlobalsOptionalPathParameterOperationRequiredRequest
                .builder()
                .globalOptionalPathParam(globalOptionalPathParam)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                GlobalsOptionalPathParameterOperationRequiredRequest.class,
                _baseUrl,
                "/anything/globals/{globalOptionalPathParam}/operation/required",
                request, this.sdkConfiguration.globals);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                SDKConfiguration.USER_AGENT);
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "globalsOptionalPathParameterOperationRequired", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "globalsOptionalPathParameterOperationRequired",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "globalsOptionalPathParameterOperationRequired",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "globalsOptionalPathParameterOperationRequired",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GlobalsOptionalPathParameterOperationRequiredResponse.Builder _resBuilder = 
            GlobalsOptionalPathParameterOperationRequiredResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GlobalsOptionalPathParameterOperationRequiredResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "2XX")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * This path requires a globally optional path parameter. A failing - test with 404 likely indicates that the path parameter value is not - being templated into the operation request (.../globals//...). - 
     * @return The call builder
     */
    public GlobalsOptionalPathParameterPathRequiredRequestBuilder globalsOptionalPathParameterPathRequired() {
        return new GlobalsOptionalPathParameterPathRequiredRequestBuilder(this);
    }

    /**
     * This path requires a globally optional path parameter. A failing - test with 404 likely indicates that the path parameter value is not - being templated into the operation request (.../globals//...). - 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GlobalsOptionalPathParameterPathRequiredResponse globalsOptionalPathParameterPathRequiredDirect() throws Exception {
        return globalsOptionalPathParameterPathRequired(Optional.empty());
    }
    
    /**
     * This path requires a globally optional path parameter. A failing - test with 404 likely indicates that the path parameter value is not - being templated into the operation request (.../globals//...). - 
     * @param globalOptionalPathParam An optional global path parameter. Some paths and operations will
    override it to required: true, especially for verifying test generation
    where the value should be templated in the operation request.

     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GlobalsOptionalPathParameterPathRequiredResponse globalsOptionalPathParameterPathRequired(
            Optional<String> globalOptionalPathParam) throws Exception {
        GlobalsOptionalPathParameterPathRequiredRequest request =
            GlobalsOptionalPathParameterPathRequiredRequest
                .builder()
                .globalOptionalPathParam(globalOptionalPathParam)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                GlobalsOptionalPathParameterPathRequiredRequest.class,
                _baseUrl,
                "/anything/globals/{globalOptionalPathParam}/path/required",
                request, this.sdkConfiguration.globals);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                SDKConfiguration.USER_AGENT);
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "globalsOptionalPathParameterPathRequired", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "globalsOptionalPathParameterPathRequired",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "globalsOptionalPathParameterPathRequired",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "globalsOptionalPathParameterPathRequired",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GlobalsOptionalPathParameterPathRequiredResponse.Builder _resBuilder = 
            GlobalsOptionalPathParameterPathRequiredResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GlobalsOptionalPathParameterPathRequiredResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "2XX")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    public GlobalsQueryParameterGetRequestBuilder globalsQueryParameterGet() {
        return new GlobalsQueryParameterGetRequestBuilder(this);
    }

    public GlobalsQueryParameterGetResponse globalsQueryParameterGetDirect() throws Exception {
        return globalsQueryParameterGet(Optional.empty());
    }
    
    public GlobalsQueryParameterGetResponse globalsQueryParameterGet(
            Optional<String> globalQueryParam) throws Exception {
        GlobalsQueryParameterGetRequest request =
            GlobalsQueryParameterGetRequest
                .builder()
                .globalQueryParam(globalQueryParam)
                .build();
        
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/anything/globals/queryParameter");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("x-speakeasy-user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GlobalsQueryParameterGetRequest.class,
                request, 
                this.sdkConfiguration.globals));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "globalsQueryParameterGet", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "globalsQueryParameterGet",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "globalsQueryParameterGet",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "globalsQueryParameterGet",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GlobalsQueryParameterGetResponse.Builder _resBuilder = 
            GlobalsQueryParameterGetResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GlobalsQueryParameterGetResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                GlobalsQueryParameterGetRes _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GlobalsQueryParameterGetRes>() {});
                _res.withRes(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
