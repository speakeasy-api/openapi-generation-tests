/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.jayway.jsonpath.JsonPath;
import com.jayway.jsonpath.ReadContext;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Long;
import java.lang.Object;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.TimeUnit;
import org.openapis.openapi.models.errors.SDKError;
import org.openapis.openapi.models.operations.PaginationCursorBodyRequestBody;
import org.openapis.openapi.models.operations.PaginationCursorBodyRequestBuilder;
import org.openapis.openapi.models.operations.PaginationCursorBodyRes;
import org.openapis.openapi.models.operations.PaginationCursorBodyResponse;
import org.openapis.openapi.models.operations.PaginationCursorNonNumericRequest;
import org.openapis.openapi.models.operations.PaginationCursorNonNumericRequestBuilder;
import org.openapis.openapi.models.operations.PaginationCursorNonNumericRes;
import org.openapis.openapi.models.operations.PaginationCursorNonNumericResponse;
import org.openapis.openapi.models.operations.PaginationCursorParamsRequest;
import org.openapis.openapi.models.operations.PaginationCursorParamsRequestBuilder;
import org.openapis.openapi.models.operations.PaginationCursorParamsRes;
import org.openapis.openapi.models.operations.PaginationCursorParamsResponse;
import org.openapis.openapi.models.operations.PaginationLimitOffsetDeepOutputsPageBodyRequestBuilder;
import org.openapis.openapi.models.operations.PaginationLimitOffsetDeepOutputsPageBodyRes;
import org.openapis.openapi.models.operations.PaginationLimitOffsetDeepOutputsPageBodyResponse;
import org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetBodyRequestBuilder;
import org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetBodyRes;
import org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetBodyResponse;
import org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetParamsRequest;
import org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetParamsRequestBuilder;
import org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetParamsRes;
import org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetParamsResponse;
import org.openapis.openapi.models.operations.PaginationLimitOffsetPageBodyRequestBuilder;
import org.openapis.openapi.models.operations.PaginationLimitOffsetPageBodyRes;
import org.openapis.openapi.models.operations.PaginationLimitOffsetPageBodyResponse;
import org.openapis.openapi.models.operations.PaginationLimitOffsetPageParamsRequest;
import org.openapis.openapi.models.operations.PaginationLimitOffsetPageParamsRequestBuilder;
import org.openapis.openapi.models.operations.PaginationLimitOffsetPageParamsRes;
import org.openapis.openapi.models.operations.PaginationLimitOffsetPageParamsResponse;
import org.openapis.openapi.models.operations.PaginationURLParamsRequest;
import org.openapis.openapi.models.operations.PaginationURLParamsRequestBuilder;
import org.openapis.openapi.models.operations.PaginationURLParamsRes;
import org.openapis.openapi.models.operations.PaginationURLParamsResponse;
import org.openapis.openapi.models.operations.PaginationWithRetriesRequest;
import org.openapis.openapi.models.operations.PaginationWithRetriesRequestBuilder;
import org.openapis.openapi.models.operations.PaginationWithRetriesRes;
import org.openapis.openapi.models.operations.PaginationWithRetriesResponse;
import org.openapis.openapi.models.operations.SDKMethodInterfaces.*;
import org.openapis.openapi.models.shared.LimitOffsetConfig;
import org.openapis.openapi.utils.BackoffStrategy;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.Hook.AfterErrorContextImpl;
import org.openapis.openapi.utils.Hook.AfterSuccessContextImpl;
import org.openapis.openapi.utils.Hook.BeforeRequestContextImpl;
import org.openapis.openapi.utils.Options;
import org.openapis.openapi.utils.Retries.NonRetryableException;
import org.openapis.openapi.utils.Retries;
import org.openapis.openapi.utils.RetryConfig;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.Utils.JsonShape;
import org.openapis.openapi.utils.Utils; 

/**
 * Endpoints for testing the pagination extension
 */
public class Pagination implements
            MethodCallPaginationCursorBody,
            MethodCallPaginationCursorNonNumeric,
            MethodCallPaginationCursorParams,
            MethodCallPaginationLimitOffsetDeepOutputsPageBody,
            MethodCallPaginationLimitOffsetOffsetBody,
            MethodCallPaginationLimitOffsetOffsetParams,
            MethodCallPaginationLimitOffsetPageBody,
            MethodCallPaginationLimitOffsetPageParams,
            MethodCallPaginationURLParams,
            MethodCallPaginationWithRetries {
    
    /**
     * PAGINATION_CURSOR_BODY_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] PAGINATION_CURSOR_BODY_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * PAGINATION_CURSOR_NON_NUMERIC_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] PAGINATION_CURSOR_NON_NUMERIC_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * PAGINATION_CURSOR_PARAMS_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] PAGINATION_CURSOR_PARAMS_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * PAGINATION_LIMIT_OFFSET_DEEP_OUTPUTS_PAGE_BODY_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] PAGINATION_LIMIT_OFFSET_DEEP_OUTPUTS_PAGE_BODY_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * PAGINATION_LIMIT_OFFSET_OFFSET_BODY_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] PAGINATION_LIMIT_OFFSET_OFFSET_BODY_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * PAGINATION_LIMIT_OFFSET_OFFSET_PARAMS_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] PAGINATION_LIMIT_OFFSET_OFFSET_PARAMS_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * PAGINATION_LIMIT_OFFSET_PAGE_BODY_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] PAGINATION_LIMIT_OFFSET_PAGE_BODY_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * PAGINATION_LIMIT_OFFSET_PAGE_PARAMS_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] PAGINATION_LIMIT_OFFSET_PAGE_PARAMS_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * PAGINATION_URL_PARAMS_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] PAGINATION_URL_PARAMS_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * PAGINATION_WITH_RETRIES_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] PAGINATION_WITH_RETRIES_SERVERS = {
        "http://localhost:35456",
    };

    private final SDKConfiguration sdkConfiguration;

    Pagination(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    public PaginationCursorBodyRequestBuilder paginationCursorBody() {
        return new PaginationCursorBodyRequestBuilder(this);
    }

    public PaginationCursorBodyResponse paginationCursorBody(
            PaginationCursorBodyRequestBody request) throws Exception {
        return paginationCursorBody(request, Optional.empty());
    }
    
    public PaginationCursorBodyResponse paginationCursorBody(
            PaginationCursorBodyRequestBody request,
            Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(PAGINATION_CURSOR_BODY_SERVERS[0], new HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/pagination/cursor");
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<PaginationCursorBodyRequestBody>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "request",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("x-speakeasy-user-agent", 
                this.sdkConfiguration.userAgent);

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "paginationCursorBody", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "paginationCursorBody",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "paginationCursorBody",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "paginationCursorBody",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        byte[] _fullResponse = Utils.extractByteArrayFromBody(_httpRes);
        
        @SuppressWarnings("deprecation")
        PaginationCursorBodyResponse.Builder _resBuilder = 
            PaginationCursorBodyResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes)
                .next(() -> {
                    String _stringBody = new String(_fullResponse, StandardCharsets.UTF_8);
                    ReadContext _body = JsonPath.parse(_stringBody);

                    if (request == null) {
                        return Optional.empty();
                    }
                    @SuppressWarnings("unchecked")
                    List<Integer> _nextCursorToken = _body.read("$.resultArray[-1:]", List.class);
                    if (_nextCursorToken == null || _nextCursorToken.isEmpty()) {
                        return Optional.empty();
                    };

                    long _nextCursor = Long.valueOf(_nextCursorToken.get(0));

                    
                     
                    PaginationCursorBodyRequestBuilder _ret = paginationCursorBody();
                    _ret.request(new PaginationCursorBodyRequestBody(
                        _nextCursor
                    ));
                    _ret.serverURL(serverURL);
                    return Optional.of(_ret.call());
                });

        PaginationCursorBodyResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                PaginationCursorBodyRes _out = Utils.mapper().readValue(
                    new String(_fullResponse, StandardCharsets.UTF_8),
                    new TypeReference<PaginationCursorBodyRes>() {});
                _res.withRes(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    _fullResponse);
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    _fullResponse);
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            _fullResponse);
    }



    public PaginationCursorNonNumericRequestBuilder paginationCursorNonNumeric() {
        return new PaginationCursorNonNumericRequestBuilder(this);
    }

    public PaginationCursorNonNumericResponse paginationCursorNonNumericDirect() throws Exception {
        return paginationCursorNonNumeric(Optional.empty(), Optional.empty());
    }
    
    public PaginationCursorNonNumericResponse paginationCursorNonNumeric(
            Optional<String> cursor,
            Optional<String> serverURL) throws Exception {
        PaginationCursorNonNumericRequest request =
            PaginationCursorNonNumericRequest
                .builder()
                .cursor(cursor)
                .build();
        
        String _baseUrl = Utils.templateUrl(PAGINATION_CURSOR_NON_NUMERIC_SERVERS[0], new HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/pagination/cursor_non_numeric");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("x-speakeasy-user-agent", 
                this.sdkConfiguration.userAgent);

        _req.addQueryParams(Utils.getQueryParams(
                PaginationCursorNonNumericRequest.class,
                request, 
                this.sdkConfiguration.globals));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "paginationCursorNonNumeric", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "paginationCursorNonNumeric",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "paginationCursorNonNumeric",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "paginationCursorNonNumeric",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        byte[] _fullResponse = Utils.extractByteArrayFromBody(_httpRes);
        
        @SuppressWarnings("deprecation")
        PaginationCursorNonNumericResponse.Builder _resBuilder = 
            PaginationCursorNonNumericResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes)
                .next(() -> {
                    String _stringBody = new String(_fullResponse, StandardCharsets.UTF_8);
                    ReadContext _body = JsonPath.parse(_stringBody);

                    if (request == null) {
                        return Optional.empty();
                    }
                    @SuppressWarnings("unchecked")
                    List<String> _nextCursorToken = _body.read("$.resultArray[-1:]", List.class);
                    if (_nextCursorToken == null || _nextCursorToken.isEmpty()) {
                        return Optional.empty();
                    };

                    String _nextCursor = _nextCursorToken.get(0);

                    
                     
                    PaginationCursorNonNumericRequestBuilder _ret = paginationCursorNonNumeric();
                    _ret.cursor(_nextCursor);
                    _ret.serverURL(serverURL);
                    return Optional.of(_ret.call());
                });

        PaginationCursorNonNumericResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                PaginationCursorNonNumericRes _out = Utils.mapper().readValue(
                    new String(_fullResponse, StandardCharsets.UTF_8),
                    new TypeReference<PaginationCursorNonNumericRes>() {});
                _res.withRes(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    _fullResponse);
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    _fullResponse);
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            _fullResponse);
    }



    public PaginationCursorParamsRequestBuilder paginationCursorParams() {
        return new PaginationCursorParamsRequestBuilder(this);
    }

    public PaginationCursorParamsResponse paginationCursorParams(
            long cursor) throws Exception {
        return paginationCursorParams(cursor, Optional.empty());
    }
    
    public PaginationCursorParamsResponse paginationCursorParams(
            long cursor,
            Optional<String> serverURL) throws Exception {
        PaginationCursorParamsRequest request =
            PaginationCursorParamsRequest
                .builder()
                .cursor(cursor)
                .build();
        
        String _baseUrl = Utils.templateUrl(PAGINATION_CURSOR_PARAMS_SERVERS[0], new HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/pagination/cursor");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("x-speakeasy-user-agent", 
                this.sdkConfiguration.userAgent);

        _req.addQueryParams(Utils.getQueryParams(
                PaginationCursorParamsRequest.class,
                request, 
                this.sdkConfiguration.globals));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "paginationCursorParams", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "paginationCursorParams",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "paginationCursorParams",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "paginationCursorParams",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        byte[] _fullResponse = Utils.extractByteArrayFromBody(_httpRes);
        
        @SuppressWarnings("deprecation")
        PaginationCursorParamsResponse.Builder _resBuilder = 
            PaginationCursorParamsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes)
                .next(() -> {
                    String _stringBody = new String(_fullResponse, StandardCharsets.UTF_8);
                    ReadContext _body = JsonPath.parse(_stringBody);

                    if (request == null) {
                        return Optional.empty();
                    }
                    @SuppressWarnings("unchecked")
                    List<Integer> _nextCursorToken = _body.read("$.resultArray[-1:]", List.class);
                    if (_nextCursorToken == null || _nextCursorToken.isEmpty()) {
                        return Optional.empty();
                    };

                    long _nextCursor = Long.valueOf(_nextCursorToken.get(0));

                    
                     
                    PaginationCursorParamsRequestBuilder _ret = paginationCursorParams();
                    _ret.cursor(_nextCursor);
                    _ret.serverURL(serverURL);
                    return Optional.of(_ret.call());
                });

        PaginationCursorParamsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                PaginationCursorParamsRes _out = Utils.mapper().readValue(
                    new String(_fullResponse, StandardCharsets.UTF_8),
                    new TypeReference<PaginationCursorParamsRes>() {});
                _res.withRes(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    _fullResponse);
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    _fullResponse);
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            _fullResponse);
    }



    public PaginationLimitOffsetDeepOutputsPageBodyRequestBuilder paginationLimitOffsetDeepOutputsPageBody() {
        return new PaginationLimitOffsetDeepOutputsPageBodyRequestBuilder(this);
    }

    public PaginationLimitOffsetDeepOutputsPageBodyResponse paginationLimitOffsetDeepOutputsPageBody(
            LimitOffsetConfig request) throws Exception {
        return paginationLimitOffsetDeepOutputsPageBody(request, Optional.empty());
    }
    
    public PaginationLimitOffsetDeepOutputsPageBodyResponse paginationLimitOffsetDeepOutputsPageBody(
            LimitOffsetConfig request,
            Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(PAGINATION_LIMIT_OFFSET_DEEP_OUTPUTS_PAGE_BODY_SERVERS[0], new HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/pagination/limitoffset/deep_outputs/page");
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<LimitOffsetConfig>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "request",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("x-speakeasy-user-agent", 
                this.sdkConfiguration.userAgent);

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "paginationLimitOffsetDeepOutputsPageBody", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "paginationLimitOffsetDeepOutputsPageBody",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "paginationLimitOffsetDeepOutputsPageBody",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "paginationLimitOffsetDeepOutputsPageBody",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        byte[] _fullResponse = Utils.extractByteArrayFromBody(_httpRes);
        
        @SuppressWarnings("deprecation")
        PaginationLimitOffsetDeepOutputsPageBodyResponse.Builder _resBuilder = 
            PaginationLimitOffsetDeepOutputsPageBodyResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes)
                .next(() -> {
                    String _stringBody = new String(_fullResponse, StandardCharsets.UTF_8);
                    ReadContext _body = JsonPath.parse(_stringBody);

                    if (request == null) {
                        return Optional.empty();
                    }
                    
                    long page = request.page().get();
                    long _newPage = page + 1;
                    
                    long _numPages = _body.read("$.pageInfo.numPages", Long.class);

                    if (_numPages <= page) {
                        return Optional.empty();
                    }; 
                    PaginationLimitOffsetDeepOutputsPageBodyRequestBuilder _ret = paginationLimitOffsetDeepOutputsPageBody();
                    _ret.request(new LimitOffsetConfig(
                        request.limit(),
                        request.offset(),
                        Optional.ofNullable(_newPage)
                    ));
                    _ret.serverURL(serverURL);
                    return Optional.of(_ret.call());
                });

        PaginationLimitOffsetDeepOutputsPageBodyResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                PaginationLimitOffsetDeepOutputsPageBodyRes _out = Utils.mapper().readValue(
                    new String(_fullResponse, StandardCharsets.UTF_8),
                    new TypeReference<PaginationLimitOffsetDeepOutputsPageBodyRes>() {});
                _res.withRes(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    _fullResponse);
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    _fullResponse);
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            _fullResponse);
    }



    public PaginationLimitOffsetOffsetBodyRequestBuilder paginationLimitOffsetOffsetBody() {
        return new PaginationLimitOffsetOffsetBodyRequestBuilder(this);
    }

    public PaginationLimitOffsetOffsetBodyResponse paginationLimitOffsetOffsetBody(
            LimitOffsetConfig request) throws Exception {
        return paginationLimitOffsetOffsetBody(request, Optional.empty());
    }
    
    public PaginationLimitOffsetOffsetBodyResponse paginationLimitOffsetOffsetBody(
            LimitOffsetConfig request,
            Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(PAGINATION_LIMIT_OFFSET_OFFSET_BODY_SERVERS[0], new HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/pagination/limitoffset/offset");
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<LimitOffsetConfig>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "request",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("x-speakeasy-user-agent", 
                this.sdkConfiguration.userAgent);

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "paginationLimitOffsetOffsetBody", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "paginationLimitOffsetOffsetBody",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "paginationLimitOffsetOffsetBody",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "paginationLimitOffsetOffsetBody",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        byte[] _fullResponse = Utils.extractByteArrayFromBody(_httpRes);
        
        @SuppressWarnings("deprecation")
        PaginationLimitOffsetOffsetBodyResponse.Builder _resBuilder = 
            PaginationLimitOffsetOffsetBodyResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes)
                .next(() -> {
                    String _stringBody = new String(_fullResponse, StandardCharsets.UTF_8);
                    ReadContext _body = JsonPath.parse(_stringBody);

                    if (request == null) {
                        return Optional.empty();
                    }
                    long _requestOffset = request.offset().get();
                    @SuppressWarnings("unchecked")
                    List<Long> _firstResult = _body.read("$.resultArray", List.class);
                    if (_firstResult == null || _firstResult.isEmpty()){
                        return Optional.empty();
                    };
                    long _resolvedLimit = request.limit().get();
                    
                    if (_firstResult.size() < _resolvedLimit) {
                        return Optional.empty();
                    };
                    long _newOffset = _requestOffset + _firstResult.size(); 
                    PaginationLimitOffsetOffsetBodyRequestBuilder _ret = paginationLimitOffsetOffsetBody();
                    _ret.request(new LimitOffsetConfig(
                        request.limit(),
                        Optional.ofNullable(_newOffset),
                        request.page()
                    ));
                    _ret.serverURL(serverURL);
                    return Optional.of(_ret.call());
                });

        PaginationLimitOffsetOffsetBodyResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                PaginationLimitOffsetOffsetBodyRes _out = Utils.mapper().readValue(
                    new String(_fullResponse, StandardCharsets.UTF_8),
                    new TypeReference<PaginationLimitOffsetOffsetBodyRes>() {});
                _res.withRes(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    _fullResponse);
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    _fullResponse);
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            _fullResponse);
    }



    public PaginationLimitOffsetOffsetParamsRequestBuilder paginationLimitOffsetOffsetParams() {
        return new PaginationLimitOffsetOffsetParamsRequestBuilder(this);
    }

    public PaginationLimitOffsetOffsetParamsResponse paginationLimitOffsetOffsetParamsDirect() throws Exception {
        return paginationLimitOffsetOffsetParams(Optional.empty(), Optional.empty(), Optional.empty());
    }
    
    public PaginationLimitOffsetOffsetParamsResponse paginationLimitOffsetOffsetParams(
            Optional<Long> limit,
            Optional<Long> offset,
            Optional<String> serverURL) throws Exception {
        PaginationLimitOffsetOffsetParamsRequest request =
            PaginationLimitOffsetOffsetParamsRequest
                .builder()
                .limit(limit)
                .offset(offset)
                .build();
        
        String _baseUrl = Utils.templateUrl(PAGINATION_LIMIT_OFFSET_OFFSET_PARAMS_SERVERS[0], new HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/pagination/limitoffset/offset");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("x-speakeasy-user-agent", 
                this.sdkConfiguration.userAgent);

        _req.addQueryParams(Utils.getQueryParams(
                PaginationLimitOffsetOffsetParamsRequest.class,
                request, 
                this.sdkConfiguration.globals));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "paginationLimitOffsetOffsetParams", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "paginationLimitOffsetOffsetParams",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "paginationLimitOffsetOffsetParams",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "paginationLimitOffsetOffsetParams",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        byte[] _fullResponse = Utils.extractByteArrayFromBody(_httpRes);
        
        @SuppressWarnings("deprecation")
        PaginationLimitOffsetOffsetParamsResponse.Builder _resBuilder = 
            PaginationLimitOffsetOffsetParamsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes)
                .next(() -> {
                    String _stringBody = new String(_fullResponse, StandardCharsets.UTF_8);
                    ReadContext _body = JsonPath.parse(_stringBody);

                    if (request == null) {
                        return Optional.empty();
                    }
                    long _requestOffset = request.offset().get();
                    @SuppressWarnings("unchecked")
                    List<Long> _firstResult = _body.read("$.resultArray", List.class);
                    if (_firstResult == null || _firstResult.isEmpty()){
                        return Optional.empty();
                    };
                    long _resolvedLimit = limit.get();
                    
                    if (_firstResult.size() < _resolvedLimit) {
                        return Optional.empty();
                    };
                    long _newOffset = _requestOffset + _firstResult.size(); 
                    PaginationLimitOffsetOffsetParamsRequestBuilder _ret = paginationLimitOffsetOffsetParams();
                    _ret.limit(_resolvedLimit);
                    _ret.offset(_newOffset);
                    _ret.serverURL(serverURL);
                    return Optional.of(_ret.call());
                });

        PaginationLimitOffsetOffsetParamsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                PaginationLimitOffsetOffsetParamsRes _out = Utils.mapper().readValue(
                    new String(_fullResponse, StandardCharsets.UTF_8),
                    new TypeReference<PaginationLimitOffsetOffsetParamsRes>() {});
                _res.withRes(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    _fullResponse);
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    _fullResponse);
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            _fullResponse);
    }



    public PaginationLimitOffsetPageBodyRequestBuilder paginationLimitOffsetPageBody() {
        return new PaginationLimitOffsetPageBodyRequestBuilder(this);
    }

    public PaginationLimitOffsetPageBodyResponse paginationLimitOffsetPageBody(
            LimitOffsetConfig request) throws Exception {
        return paginationLimitOffsetPageBody(request, Optional.empty());
    }
    
    public PaginationLimitOffsetPageBodyResponse paginationLimitOffsetPageBody(
            LimitOffsetConfig request,
            Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(PAGINATION_LIMIT_OFFSET_PAGE_BODY_SERVERS[0], new HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/pagination/limitoffset/page");
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<LimitOffsetConfig>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "request",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("x-speakeasy-user-agent", 
                this.sdkConfiguration.userAgent);

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "paginationLimitOffsetPageBody", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "paginationLimitOffsetPageBody",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "paginationLimitOffsetPageBody",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "paginationLimitOffsetPageBody",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        byte[] _fullResponse = Utils.extractByteArrayFromBody(_httpRes);
        
        @SuppressWarnings("deprecation")
        PaginationLimitOffsetPageBodyResponse.Builder _resBuilder = 
            PaginationLimitOffsetPageBodyResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes)
                .next(() -> {
                    String _stringBody = new String(_fullResponse, StandardCharsets.UTF_8);
                    ReadContext _body = JsonPath.parse(_stringBody);

                    if (request == null) {
                        return Optional.empty();
                    }
                    
                    long page = request.page().get();
                    long _newPage = page + 1;
                    
                    long _numPages = _body.read("$.numPages", Long.class);

                    if (_numPages <= page) {
                        return Optional.empty();
                    }; 
                    PaginationLimitOffsetPageBodyRequestBuilder _ret = paginationLimitOffsetPageBody();
                    _ret.request(new LimitOffsetConfig(
                        request.limit(),
                        request.offset(),
                        Optional.ofNullable(_newPage)
                    ));
                    _ret.serverURL(serverURL);
                    return Optional.of(_ret.call());
                });

        PaginationLimitOffsetPageBodyResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                PaginationLimitOffsetPageBodyRes _out = Utils.mapper().readValue(
                    new String(_fullResponse, StandardCharsets.UTF_8),
                    new TypeReference<PaginationLimitOffsetPageBodyRes>() {});
                _res.withRes(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    _fullResponse);
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    _fullResponse);
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            _fullResponse);
    }



    public PaginationLimitOffsetPageParamsRequestBuilder paginationLimitOffsetPageParams() {
        return new PaginationLimitOffsetPageParamsRequestBuilder(this);
    }

    public PaginationLimitOffsetPageParamsResponse paginationLimitOffsetPageParams(
            long page) throws Exception {
        return paginationLimitOffsetPageParams(page, Optional.empty());
    }
    
    public PaginationLimitOffsetPageParamsResponse paginationLimitOffsetPageParams(
            long page,
            Optional<String> serverURL) throws Exception {
        PaginationLimitOffsetPageParamsRequest request =
            PaginationLimitOffsetPageParamsRequest
                .builder()
                .page(page)
                .build();
        
        String _baseUrl = Utils.templateUrl(PAGINATION_LIMIT_OFFSET_PAGE_PARAMS_SERVERS[0], new HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/pagination/limitoffset/page");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("x-speakeasy-user-agent", 
                this.sdkConfiguration.userAgent);

        _req.addQueryParams(Utils.getQueryParams(
                PaginationLimitOffsetPageParamsRequest.class,
                request, 
                this.sdkConfiguration.globals));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "paginationLimitOffsetPageParams", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "paginationLimitOffsetPageParams",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "paginationLimitOffsetPageParams",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "paginationLimitOffsetPageParams",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        byte[] _fullResponse = Utils.extractByteArrayFromBody(_httpRes);
        
        @SuppressWarnings("deprecation")
        PaginationLimitOffsetPageParamsResponse.Builder _resBuilder = 
            PaginationLimitOffsetPageParamsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes)
                .next(() -> {
                    String _stringBody = new String(_fullResponse, StandardCharsets.UTF_8);
                    ReadContext _body = JsonPath.parse(_stringBody);

                    if (request == null) {
                        return Optional.empty();
                    }
                    long _newPage = page + 1;
                    
                    @SuppressWarnings("unchecked")
                    List<Long> _firstResult = _body.read("$.resultArray", List.class);
                    if (_firstResult == null || _firstResult.isEmpty()){
                        return Optional.empty();
                    }; 
                    PaginationLimitOffsetPageParamsRequestBuilder _ret = paginationLimitOffsetPageParams();
                    _ret.page(_newPage);
                    _ret.serverURL(serverURL);
                    return Optional.of(_ret.call());
                });

        PaginationLimitOffsetPageParamsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                PaginationLimitOffsetPageParamsRes _out = Utils.mapper().readValue(
                    new String(_fullResponse, StandardCharsets.UTF_8),
                    new TypeReference<PaginationLimitOffsetPageParamsRes>() {});
                _res.withRes(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    _fullResponse);
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    _fullResponse);
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            _fullResponse);
    }



    public PaginationURLParamsRequestBuilder paginationURLParams() {
        return new PaginationURLParamsRequestBuilder(this);
    }

    public PaginationURLParamsResponse paginationURLParams(
            long attempts) throws Exception {
        return paginationURLParams(attempts, Optional.empty(), Optional.empty());
    }
    
    public PaginationURLParamsResponse paginationURLParams(
            long attempts,
            Optional<String> isReferencePath,
            Optional<String> serverURL) throws Exception {
        PaginationURLParamsRequest request =
            PaginationURLParamsRequest
                .builder()
                .attempts(attempts)
                .isReferencePath(isReferencePath)
                .build();
        
        String _baseUrl = Utils.templateUrl(PAGINATION_URL_PARAMS_SERVERS[0], new HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/pagination/url");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("x-speakeasy-user-agent", 
                this.sdkConfiguration.userAgent);

        _req.addQueryParams(Utils.getQueryParams(
                PaginationURLParamsRequest.class,
                request, 
                this.sdkConfiguration.globals));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "paginationURLParams", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "paginationURLParams",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "paginationURLParams",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "paginationURLParams",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PaginationURLParamsResponse.Builder _resBuilder = 
            PaginationURLParamsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PaginationURLParamsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                PaginationURLParamsRes _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PaginationURLParamsRes>() {});
                _res.withRes(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    public PaginationWithRetriesRequestBuilder paginationWithRetries() {
        return new PaginationWithRetriesRequestBuilder(this);
    }

    public PaginationWithRetriesResponse paginationWithRetriesDirect() throws Exception {
        return paginationWithRetries(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }
    
    public PaginationWithRetriesResponse paginationWithRetries(
            Optional<String> cursor,
            Optional<String> faultSettings,
            Optional<String> requestId,
            Optional<String> serverURL,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(org.openapis.openapi.utils.Options.Option.RETRY_CONFIG));
        }

        PaginationWithRetriesRequest request =
            PaginationWithRetriesRequest
                .builder()
                .cursor(cursor)
                .faultSettings(faultSettings)
                .requestId(requestId)
                .build();
        
        String _baseUrl = Utils.templateUrl(PAGINATION_WITH_RETRIES_SERVERS[0], new HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/pagination/cursor_non_numeric#withRetries");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("x-speakeasy-user-agent", 
                this.sdkConfiguration.userAgent);

        _req.addQueryParams(Utils.getQueryParams(
                PaginationWithRetriesRequest.class,
                request, 
                this.sdkConfiguration.globals));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, this.sdkConfiguration.globals));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HTTPRequest _finalReq = _req;
        RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            _retryConfig = RetryConfig.builder()
                .backoff(BackoffStrategy.builder()
                            .initialInterval(10, TimeUnit.MILLISECONDS)
                            .maxInterval(100, TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(1000, TimeUnit.MILLISECONDS)
                            .retryConnectError(false)
                            .build())
                .build();
        }
        List<String> _statusCodes = new ArrayList<>();
        _statusCodes.add("503");
        Retries _retries = Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl(
                                "paginationWithRetries", 
                                Optional.of(List.of()), 
                                sdkConfiguration.securitySource()),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl(
                                "paginationWithRetries",
                                 Optional.of(List.of()),
                                 sdkConfiguration.securitySource()), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl(
                         "paginationWithRetries", 
                         Optional.of(List.of()), 
                         sdkConfiguration.securitySource()),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        byte[] _fullResponse = Utils.extractByteArrayFromBody(_httpRes);
        
        @SuppressWarnings("deprecation")
        PaginationWithRetriesResponse.Builder _resBuilder = 
            PaginationWithRetriesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes)
                .next(() -> {
                    String _stringBody = new String(_fullResponse, StandardCharsets.UTF_8);
                    ReadContext _body = JsonPath.parse(_stringBody);

                    if (request == null) {
                        return Optional.empty();
                    }
                    @SuppressWarnings("unchecked")
                    List<String> _nextCursorToken = _body.read("$.resultArray[-1:]", List.class);
                    if (_nextCursorToken == null || _nextCursorToken.isEmpty()) {
                        return Optional.empty();
                    };

                    String _nextCursor = _nextCursorToken.get(0);

                    
                    
                    
                     
                    PaginationWithRetriesRequestBuilder _ret = paginationWithRetries();
                    _ret.cursor(_nextCursor);
                    _ret.faultSettings(faultSettings);
                    _ret.requestId(requestId);
                    _ret.serverURL(serverURL);
                    return Optional.of(_ret.call());
                });

        PaginationWithRetriesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                PaginationWithRetriesRes _out = Utils.mapper().readValue(
                    new String(_fullResponse, StandardCharsets.UTF_8),
                    new TypeReference<PaginationWithRetriesRes>() {});
                _res.withRes(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    _fullResponse);
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    _fullResponse);
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            _fullResponse);
    }

}
