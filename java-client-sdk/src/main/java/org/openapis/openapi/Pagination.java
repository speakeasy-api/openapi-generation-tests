/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.jayway.jsonpath.JsonPath;
import com.jayway.jsonpath.ReadContext;
import java.io.InputStream;
import java.lang.Long;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Optional;
import org.apache.http.NameValuePair;
import org.openapis.openapi.models.errors.SDKError;
import org.openapis.openapi.models.operations.SDKMethodInterfaces.*;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.Utils;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Endpoints for testing the pagination extension
 */
public class Pagination implements
            MethodCallPaginationCursorBody,
            MethodCallPaginationCursorNonNumeric,
            MethodCallPaginationCursorParams,
            MethodCallPaginationLimitOffsetOffsetBody,
            MethodCallPaginationLimitOffsetOffsetParams,
            MethodCallPaginationLimitOffsetPageBody,
            MethodCallPaginationLimitOffsetPageParams,
            MethodCallPaginationURLParams {
    
    /**
     * PAGINATION_CURSOR_BODY_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] PAGINATION_CURSOR_BODY_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * PAGINATION_CURSOR_NON_NUMERIC_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] PAGINATION_CURSOR_NON_NUMERIC_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * PAGINATION_CURSOR_PARAMS_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] PAGINATION_CURSOR_PARAMS_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * PAGINATION_LIMIT_OFFSET_OFFSET_BODY_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] PAGINATION_LIMIT_OFFSET_OFFSET_BODY_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * PAGINATION_LIMIT_OFFSET_OFFSET_PARAMS_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] PAGINATION_LIMIT_OFFSET_OFFSET_PARAMS_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * PAGINATION_LIMIT_OFFSET_PAGE_BODY_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] PAGINATION_LIMIT_OFFSET_PAGE_BODY_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * PAGINATION_LIMIT_OFFSET_PAGE_PARAMS_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] PAGINATION_LIMIT_OFFSET_PAGE_PARAMS_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * PAGINATION_URL_PARAMS_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] PAGINATION_URL_PARAMS_SERVERS = {
        "http://localhost:35456",
    };

    private final SDKConfiguration sdkConfiguration;

    Pagination(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public org.openapis.openapi.models.operations.PaginationCursorBodyRequestBuilder paginationCursorBody() {
        return new org.openapis.openapi.models.operations.PaginationCursorBodyRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.PaginationCursorBodyResponse paginationCursorBody(
            org.openapis.openapi.models.operations.PaginationCursorBodyRequestBody request,
            java.util.Optional<String> serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(PAGINATION_CURSOR_BODY_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/pagination/cursor");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<org.openapis.openapi.models.operations.PaginationCursorBodyRequestBody>() {});
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        byte[] fullResponse = Utils.toByteArrayAndClose(httpRes.body());
        
        org.openapis.openapi.models.operations.PaginationCursorBodyResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.PaginationCursorBodyResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes)
                .next(() -> {
                    String stringBody = new String(fullResponse, StandardCharsets.UTF_8);
                    ReadContext body = JsonPath.parse(stringBody);

                    if (request == null) {
                        return Optional.empty();
                    }
                    List<Integer> nextCursorToken = body.read("$.resultArray[-1:]", List.class);
                    if (nextCursorToken == null || nextCursorToken.isEmpty()) {
                        return Optional.empty();
                    };

                    long nextCursor = Long.valueOf(nextCursorToken.get(0));

                    
                    
                    org.openapis.openapi.models.operations.PaginationCursorBodyRequestBuilder ret = paginationCursorBody();
                    ret.request(new org.openapis.openapi.models.operations.PaginationCursorBodyRequestBody(
                        nextCursor
                    ));
                    ret.serverURL(serverURL);
                    return Optional.of(ret.call());
                });

        org.openapis.openapi.models.operations.PaginationCursorBodyResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PaginationCursorBodyRes out = mapper.readValue(
                    new String(fullResponse, StandardCharsets.UTF_8),
                    new TypeReference<org.openapis.openapi.models.operations.PaginationCursorBodyRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, fullResponse);
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.PaginationCursorNonNumericRequestBuilder paginationCursorNonNumeric() {
        return new org.openapis.openapi.models.operations.PaginationCursorNonNumericRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.PaginationCursorNonNumericResponse paginationCursorNonNumeric(
            Optional<? extends String> cursor,
            java.util.Optional<String> serverURL) throws Exception {
        org.openapis.openapi.models.operations.PaginationCursorNonNumericRequest request =
            org.openapis.openapi.models.operations.PaginationCursorNonNumericRequest
                .builder()
                .cursor(cursor)
                .build();
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(PAGINATION_CURSOR_NON_NUMERIC_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/pagination/cursor_non_numeric");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.PaginationCursorNonNumericRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        byte[] fullResponse = Utils.toByteArrayAndClose(httpRes.body());
        
        org.openapis.openapi.models.operations.PaginationCursorNonNumericResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.PaginationCursorNonNumericResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes)
                .next(() -> {
                    String stringBody = new String(fullResponse, StandardCharsets.UTF_8);
                    ReadContext body = JsonPath.parse(stringBody);

                    if (request == null) {
                        return Optional.empty();
                    }
                    List<String> nextCursorToken = body.read("$.resultArray[-1:]", List.class);
                    if (nextCursorToken == null || nextCursorToken.isEmpty()) {
                        return Optional.empty();
                    };

                    String nextCursor = nextCursorToken.get(0);

                    
                    
                    org.openapis.openapi.models.operations.PaginationCursorNonNumericRequestBuilder ret = paginationCursorNonNumeric();
                    ret.cursor(nextCursor);
                    ret.serverURL(serverURL);
                    return Optional.of(ret.call());
                });

        org.openapis.openapi.models.operations.PaginationCursorNonNumericResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PaginationCursorNonNumericRes out = mapper.readValue(
                    new String(fullResponse, StandardCharsets.UTF_8),
                    new TypeReference<org.openapis.openapi.models.operations.PaginationCursorNonNumericRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, fullResponse);
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.PaginationCursorParamsRequestBuilder paginationCursorParams() {
        return new org.openapis.openapi.models.operations.PaginationCursorParamsRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.PaginationCursorParamsResponse paginationCursorParams(
            long cursor,
            java.util.Optional<String> serverURL) throws Exception {
        org.openapis.openapi.models.operations.PaginationCursorParamsRequest request =
            org.openapis.openapi.models.operations.PaginationCursorParamsRequest
                .builder()
                .cursor(cursor)
                .build();
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(PAGINATION_CURSOR_PARAMS_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/pagination/cursor");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.PaginationCursorParamsRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        byte[] fullResponse = Utils.toByteArrayAndClose(httpRes.body());
        
        org.openapis.openapi.models.operations.PaginationCursorParamsResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.PaginationCursorParamsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes)
                .next(() -> {
                    String stringBody = new String(fullResponse, StandardCharsets.UTF_8);
                    ReadContext body = JsonPath.parse(stringBody);

                    if (request == null) {
                        return Optional.empty();
                    }
                    List<Integer> nextCursorToken = body.read("$.resultArray[-1:]", List.class);
                    if (nextCursorToken == null || nextCursorToken.isEmpty()) {
                        return Optional.empty();
                    };

                    long nextCursor = Long.valueOf(nextCursorToken.get(0));

                    
                    
                    org.openapis.openapi.models.operations.PaginationCursorParamsRequestBuilder ret = paginationCursorParams();
                    ret.cursor(nextCursor);
                    ret.serverURL(serverURL);
                    return Optional.of(ret.call());
                });

        org.openapis.openapi.models.operations.PaginationCursorParamsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PaginationCursorParamsRes out = mapper.readValue(
                    new String(fullResponse, StandardCharsets.UTF_8),
                    new TypeReference<org.openapis.openapi.models.operations.PaginationCursorParamsRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, fullResponse);
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetBodyRequestBuilder paginationLimitOffsetOffsetBody() {
        return new org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetBodyRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetBodyResponse paginationLimitOffsetOffsetBody(
            org.openapis.openapi.models.shared.LimitOffsetConfig request,
            java.util.Optional<String> serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(PAGINATION_LIMIT_OFFSET_OFFSET_BODY_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/pagination/limitoffset/offset");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<org.openapis.openapi.models.shared.LimitOffsetConfig>() {});
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        byte[] fullResponse = Utils.toByteArrayAndClose(httpRes.body());
        
        org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetBodyResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetBodyResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes)
                .next(() -> {
                    String stringBody = new String(fullResponse, StandardCharsets.UTF_8);
                    ReadContext body = JsonPath.parse(stringBody);

                    if (request == null) {
                        return Optional.empty();
                    }
                    long requestOffset = request.offset().get();
                    List<Long> firstResult = body.read("$.resultArray", List.class);
                    if (firstResult == null || firstResult.isEmpty()){
                        return Optional.empty();
                    };
                    long resolvedLimit = request.limit().get();
                    
                    if (firstResult.size() < resolvedLimit) {
                        return Optional.empty();
                    };
                    long newOffset = requestOffset + firstResult.size();
                    org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetBodyRequestBuilder ret = paginationLimitOffsetOffsetBody();
                    ret.request(new org.openapis.openapi.models.shared.LimitOffsetConfig(
                        request.limit(),
                        java.util.Optional.ofNullable(newOffset),
                        request.page()
                    ));
                    ret.serverURL(serverURL);
                    return Optional.of(ret.call());
                });

        org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetBodyResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetBodyRes out = mapper.readValue(
                    new String(fullResponse, StandardCharsets.UTF_8),
                    new TypeReference<org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetBodyRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, fullResponse);
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetParamsRequestBuilder paginationLimitOffsetOffsetParams() {
        return new org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetParamsRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetParamsResponse paginationLimitOffsetOffsetParams(
            Optional<? extends Long> limit,
            Optional<? extends Long> offset,
            java.util.Optional<String> serverURL) throws Exception {
        org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetParamsRequest request =
            org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetParamsRequest
                .builder()
                .limit(limit)
                .offset(offset)
                .build();
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(PAGINATION_LIMIT_OFFSET_OFFSET_PARAMS_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/pagination/limitoffset/offset");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetParamsRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        byte[] fullResponse = Utils.toByteArrayAndClose(httpRes.body());
        
        org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetParamsResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetParamsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes)
                .next(() -> {
                    String stringBody = new String(fullResponse, StandardCharsets.UTF_8);
                    ReadContext body = JsonPath.parse(stringBody);

                    if (request == null) {
                        return Optional.empty();
                    }
                    long requestOffset = request.offset().get();
                    List<Long> firstResult = body.read("$.resultArray", List.class);
                    if (firstResult == null || firstResult.isEmpty()){
                        return Optional.empty();
                    };
                    long resolvedLimit = limit.get();
                    
                    if (firstResult.size() < resolvedLimit) {
                        return Optional.empty();
                    };
                    long newOffset = requestOffset + firstResult.size();
                    org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetParamsRequestBuilder ret = paginationLimitOffsetOffsetParams();
                    ret.limit(resolvedLimit);
                    ret.offset(newOffset);
                    ret.serverURL(serverURL);
                    return Optional.of(ret.call());
                });

        org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetParamsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetParamsRes out = mapper.readValue(
                    new String(fullResponse, StandardCharsets.UTF_8),
                    new TypeReference<org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetParamsRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, fullResponse);
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.PaginationLimitOffsetPageBodyRequestBuilder paginationLimitOffsetPageBody() {
        return new org.openapis.openapi.models.operations.PaginationLimitOffsetPageBodyRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.PaginationLimitOffsetPageBodyResponse paginationLimitOffsetPageBody(
            org.openapis.openapi.models.shared.LimitOffsetConfig request,
            java.util.Optional<String> serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(PAGINATION_LIMIT_OFFSET_PAGE_BODY_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/pagination/limitoffset/page");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<org.openapis.openapi.models.shared.LimitOffsetConfig>() {});
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        byte[] fullResponse = Utils.toByteArrayAndClose(httpRes.body());
        
        org.openapis.openapi.models.operations.PaginationLimitOffsetPageBodyResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.PaginationLimitOffsetPageBodyResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes)
                .next(() -> {
                    String stringBody = new String(fullResponse, StandardCharsets.UTF_8);
                    ReadContext body = JsonPath.parse(stringBody);

                    if (request == null) {
                        return Optional.empty();
                    }
                    
                    long page = request.page().get();
                    long newPage = page + 1;
                    
                    long numPages = body.read("$.numPages", Long.class);

                    if (numPages <= page) {
                        return Optional.empty();
                    };
                    org.openapis.openapi.models.operations.PaginationLimitOffsetPageBodyRequestBuilder ret = paginationLimitOffsetPageBody();
                    ret.request(new org.openapis.openapi.models.shared.LimitOffsetConfig(
                        request.limit(),
                        request.offset(),
                        java.util.Optional.ofNullable(newPage)
                    ));
                    ret.serverURL(serverURL);
                    return Optional.of(ret.call());
                });

        org.openapis.openapi.models.operations.PaginationLimitOffsetPageBodyResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PaginationLimitOffsetPageBodyRes out = mapper.readValue(
                    new String(fullResponse, StandardCharsets.UTF_8),
                    new TypeReference<org.openapis.openapi.models.operations.PaginationLimitOffsetPageBodyRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, fullResponse);
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.PaginationLimitOffsetPageParamsRequestBuilder paginationLimitOffsetPageParams() {
        return new org.openapis.openapi.models.operations.PaginationLimitOffsetPageParamsRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.PaginationLimitOffsetPageParamsResponse paginationLimitOffsetPageParams(
            long page,
            java.util.Optional<String> serverURL) throws Exception {
        org.openapis.openapi.models.operations.PaginationLimitOffsetPageParamsRequest request =
            org.openapis.openapi.models.operations.PaginationLimitOffsetPageParamsRequest
                .builder()
                .page(page)
                .build();
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(PAGINATION_LIMIT_OFFSET_PAGE_PARAMS_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/pagination/limitoffset/page");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.PaginationLimitOffsetPageParamsRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        byte[] fullResponse = Utils.toByteArrayAndClose(httpRes.body());
        
        org.openapis.openapi.models.operations.PaginationLimitOffsetPageParamsResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.PaginationLimitOffsetPageParamsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes)
                .next(() -> {
                    String stringBody = new String(fullResponse, StandardCharsets.UTF_8);
                    ReadContext body = JsonPath.parse(stringBody);

                    if (request == null) {
                        return Optional.empty();
                    }
                    long newPage = page + 1;
                    
                    List<Long> firstResult = body.read("$.resultArray", List.class);
                    if (firstResult == null || firstResult.isEmpty()){
                        return Optional.empty();
                    };
                    org.openapis.openapi.models.operations.PaginationLimitOffsetPageParamsRequestBuilder ret = paginationLimitOffsetPageParams();
                    ret.page(newPage);
                    ret.serverURL(serverURL);
                    return Optional.of(ret.call());
                });

        org.openapis.openapi.models.operations.PaginationLimitOffsetPageParamsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PaginationLimitOffsetPageParamsRes out = mapper.readValue(
                    new String(fullResponse, StandardCharsets.UTF_8),
                    new TypeReference<org.openapis.openapi.models.operations.PaginationLimitOffsetPageParamsRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, fullResponse);
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.PaginationURLParamsRequestBuilder paginationURLParams() {
        return new org.openapis.openapi.models.operations.PaginationURLParamsRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.PaginationURLParamsResponse paginationURLParams(
            long attempts,
            Optional<? extends String> isReferencePath,
            java.util.Optional<String> serverURL) throws Exception {
        org.openapis.openapi.models.operations.PaginationURLParamsRequest request =
            org.openapis.openapi.models.operations.PaginationURLParamsRequest
                .builder()
                .attempts(attempts)
                .isReferencePath(isReferencePath)
                .build();
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(PAGINATION_URL_PARAMS_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/pagination/url");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.PaginationURLParamsRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.PaginationURLParamsResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.PaginationURLParamsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.PaginationURLParamsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PaginationURLParamsRes out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.PaginationURLParamsRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }

}
