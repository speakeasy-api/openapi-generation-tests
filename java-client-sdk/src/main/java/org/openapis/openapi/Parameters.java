/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.apache.http.NameValuePair;
import org.openapis.openapi.models.errors.SDKError;
import org.openapis.openapi.models.operations.SDKMethodInterfaces.*;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.Utils;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Endpoints for testing parameters.
 */
public class Parameters implements
            MethodCallDeepObjectQueryParamsMap,
            MethodCallDeepObjectQueryParamsObject,
            MethodCallDuplicateParam,
            MethodCallFormQueryParamsArray,
            MethodCallFormQueryParamsCamelObject,
            MethodCallFormQueryParamsMap,
            MethodCallFormQueryParamsObject,
            MethodCallFormQueryParamsPrimitive,
            MethodCallFormQueryParamsRefParamObject,
            MethodCallHeaderParamsArray,
            MethodCallHeaderParamsMap,
            MethodCallHeaderParamsObject,
            MethodCallHeaderParamsPrimitive,
            MethodCallJsonQueryParamsObject,
            MethodCallMixedParametersCamelCase,
            MethodCallMixedParametersPrimitives,
            MethodCallMixedQueryParams,
            MethodCallPathParameterJson,
            MethodCallPipeDelimitedQueryParamsArray,
            MethodCallSimplePathParameterArrays,
            MethodCallSimplePathParameterMaps,
            MethodCallSimplePathParameterObjects,
            MethodCallSimplePathParameterPrimitives {

    private final SDKConfiguration sdkConfiguration;

    Parameters(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public org.openapis.openapi.models.operations.DeepObjectQueryParamsMapRequestBuilder deepObjectQueryParamsMap() {
        return new org.openapis.openapi.models.operations.DeepObjectQueryParamsMapRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.DeepObjectQueryParamsMapResponse deepObjectQueryParamsMap(
            Optional<? extends java.util.Map<String, java.util.List<String>>> mapArrParam,
            java.util.Map<String, String> mapParam) throws Exception {
        org.openapis.openapi.models.operations.DeepObjectQueryParamsMapRequest request =
            org.openapis.openapi.models.operations.DeepObjectQueryParamsMapRequest
                .builder()
                .mapArrParam(mapArrParam)
                .mapParam(mapParam)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/queryParams/deepObject/map");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.DeepObjectQueryParamsMapRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.DeepObjectQueryParamsMapResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.DeepObjectQueryParamsMapResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.DeepObjectQueryParamsMapResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DeepObjectQueryParamsMapRes out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.DeepObjectQueryParamsMapRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.DeepObjectQueryParamsObjectRequestBuilder deepObjectQueryParamsObject() {
        return new org.openapis.openapi.models.operations.DeepObjectQueryParamsObjectRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.DeepObjectQueryParamsObjectResponse deepObjectQueryParamsObject(
            Optional<? extends org.openapis.openapi.models.operations.ObjArrParam> objArrParam,
            org.openapis.openapi.models.shared.SimpleObject objParam) throws Exception {
        org.openapis.openapi.models.operations.DeepObjectQueryParamsObjectRequest request =
            org.openapis.openapi.models.operations.DeepObjectQueryParamsObjectRequest
                .builder()
                .objArrParam(objArrParam)
                .objParam(objParam)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/queryParams/deepObject/obj");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.DeepObjectQueryParamsObjectRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.DeepObjectQueryParamsObjectResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.DeepObjectQueryParamsObjectResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.DeepObjectQueryParamsObjectResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DeepObjectQueryParamsObjectRes out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.DeepObjectQueryParamsObjectRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.DuplicateParamRequestBuilder duplicateParam() {
        return new org.openapis.openapi.models.operations.DuplicateParamRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.DuplicateParamResponse duplicateParam(
            String duplicateParamRequest) throws Exception {
        org.openapis.openapi.models.operations.DuplicateParamRequest request =
            org.openapis.openapi.models.operations.DuplicateParamRequest
                .builder()
                .duplicateParamRequest(duplicateParamRequest)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                org.openapis.openapi.models.operations.DuplicateParamRequest.class,
                baseUrl,
                "/anything/params/{duplicateParamRequest}",
                request, this.sdkConfiguration.globals);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.DuplicateParamResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.DuplicateParamResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.DuplicateParamResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DuplicateParamDuplicateParamResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.DuplicateParamDuplicateParamResponse>() {});
                res.withDuplicateParamResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.FormQueryParamsArrayRequestBuilder formQueryParamsArray() {
        return new org.openapis.openapi.models.operations.FormQueryParamsArrayRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.FormQueryParamsArrayResponse formQueryParamsArray(
            Optional<? extends java.util.List<String>> arrParam,
            Optional<? extends java.util.List<Long>> arrParamExploded) throws Exception {
        org.openapis.openapi.models.operations.FormQueryParamsArrayRequest request =
            org.openapis.openapi.models.operations.FormQueryParamsArrayRequest
                .builder()
                .arrParam(arrParam)
                .arrParamExploded(arrParamExploded)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/queryParams/form/array");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.FormQueryParamsArrayRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.FormQueryParamsArrayResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.FormQueryParamsArrayResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.FormQueryParamsArrayResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.FormQueryParamsArrayRes out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.FormQueryParamsArrayRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.FormQueryParamsCamelObjectRequestBuilder formQueryParamsCamelObject() {
        return new org.openapis.openapi.models.operations.FormQueryParamsCamelObjectRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.FormQueryParamsCamelObjectResponse formQueryParamsCamelObject(
            Optional<? extends org.openapis.openapi.models.operations.ObjParam> objParam,
            org.openapis.openapi.models.operations.ObjParamExploded objParamExploded) throws Exception {
        org.openapis.openapi.models.operations.FormQueryParamsCamelObjectRequest request =
            org.openapis.openapi.models.operations.FormQueryParamsCamelObjectRequest
                .builder()
                .objParam(objParam)
                .objParamExploded(objParamExploded)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/queryParams/form/camelObj");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.FormQueryParamsCamelObjectRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.FormQueryParamsCamelObjectResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.FormQueryParamsCamelObjectResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.FormQueryParamsCamelObjectResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.FormQueryParamsCamelObjectRes out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.FormQueryParamsCamelObjectRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.FormQueryParamsMapRequestBuilder formQueryParamsMap() {
        return new org.openapis.openapi.models.operations.FormQueryParamsMapRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.FormQueryParamsMapResponse formQueryParamsMap(
            Optional<? extends java.util.Map<String, String>> mapParam,
            Optional<? extends java.util.Map<String, Long>> mapParamExploded) throws Exception {
        org.openapis.openapi.models.operations.FormQueryParamsMapRequest request =
            org.openapis.openapi.models.operations.FormQueryParamsMapRequest
                .builder()
                .mapParam(mapParam)
                .mapParamExploded(mapParamExploded)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/queryParams/form/map");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.FormQueryParamsMapRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.FormQueryParamsMapResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.FormQueryParamsMapResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.FormQueryParamsMapResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.FormQueryParamsMapRes out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.FormQueryParamsMapRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.FormQueryParamsObjectRequestBuilder formQueryParamsObject() {
        return new org.openapis.openapi.models.operations.FormQueryParamsObjectRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.FormQueryParamsObjectResponse formQueryParamsObject(
            Optional<? extends org.openapis.openapi.models.shared.SimpleObject> objParam,
            org.openapis.openapi.models.shared.SimpleObject objParamExploded) throws Exception {
        org.openapis.openapi.models.operations.FormQueryParamsObjectRequest request =
            org.openapis.openapi.models.operations.FormQueryParamsObjectRequest
                .builder()
                .objParam(objParam)
                .objParamExploded(objParamExploded)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/queryParams/form/obj");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.FormQueryParamsObjectRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.FormQueryParamsObjectResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.FormQueryParamsObjectResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.FormQueryParamsObjectResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.FormQueryParamsObjectRes out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.FormQueryParamsObjectRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.FormQueryParamsPrimitiveRequestBuilder formQueryParamsPrimitive() {
        return new org.openapis.openapi.models.operations.FormQueryParamsPrimitiveRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.FormQueryParamsPrimitiveResponse formQueryParamsPrimitive(
            boolean boolParam,
            long intParam,
            double numParam,
            String strParam) throws Exception {
        org.openapis.openapi.models.operations.FormQueryParamsPrimitiveRequest request =
            org.openapis.openapi.models.operations.FormQueryParamsPrimitiveRequest
                .builder()
                .boolParam(boolParam)
                .intParam(intParam)
                .numParam(numParam)
                .strParam(strParam)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/queryParams/form/primitive");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.FormQueryParamsPrimitiveRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.FormQueryParamsPrimitiveResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.FormQueryParamsPrimitiveResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.FormQueryParamsPrimitiveResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.FormQueryParamsPrimitiveRes out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.FormQueryParamsPrimitiveRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.FormQueryParamsRefParamObjectRequestBuilder formQueryParamsRefParamObject() {
        return new org.openapis.openapi.models.operations.FormQueryParamsRefParamObjectRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.FormQueryParamsRefParamObjectResponse formQueryParamsRefParamObject(
            Optional<? extends org.openapis.openapi.models.shared.RefQueryParamObj> refObjParam,
            Optional<? extends org.openapis.openapi.models.shared.RefQueryParamObjExploded> refObjParamExploded) throws Exception {
        org.openapis.openapi.models.operations.FormQueryParamsRefParamObjectRequest request =
            org.openapis.openapi.models.operations.FormQueryParamsRefParamObjectRequest
                .builder()
                .refObjParam(refObjParam)
                .refObjParamExploded(refObjParamExploded)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/queryParams/form/refParamObject");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.FormQueryParamsRefParamObjectRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.FormQueryParamsRefParamObjectResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.FormQueryParamsRefParamObjectResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.FormQueryParamsRefParamObjectResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.FormQueryParamsRefParamObjectRes out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.FormQueryParamsRefParamObjectRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.HeaderParamsArrayRequestBuilder headerParamsArray() {
        return new org.openapis.openapi.models.operations.HeaderParamsArrayRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.HeaderParamsArrayResponse headerParamsArray(
            java.util.List<String> xHeaderArray) throws Exception {
        org.openapis.openapi.models.operations.HeaderParamsArrayRequest request =
            org.openapis.openapi.models.operations.HeaderParamsArrayRequest
                .builder()
                .xHeaderArray(xHeaderArray)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/headers/array");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.HeaderParamsArrayResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.HeaderParamsArrayResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.HeaderParamsArrayResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.HeaderParamsArrayRes out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.HeaderParamsArrayRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.HeaderParamsMapRequestBuilder headerParamsMap() {
        return new org.openapis.openapi.models.operations.HeaderParamsMapRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.HeaderParamsMapResponse headerParamsMap(
            java.util.Map<String, String> xHeaderMap,
            java.util.Map<String, String> xHeaderMapExplode) throws Exception {
        org.openapis.openapi.models.operations.HeaderParamsMapRequest request =
            org.openapis.openapi.models.operations.HeaderParamsMapRequest
                .builder()
                .xHeaderMap(xHeaderMap)
                .xHeaderMapExplode(xHeaderMapExplode)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/headers/map");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.HeaderParamsMapResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.HeaderParamsMapResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.HeaderParamsMapResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.HeaderParamsMapRes out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.HeaderParamsMapRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.HeaderParamsObjectRequestBuilder headerParamsObject() {
        return new org.openapis.openapi.models.operations.HeaderParamsObjectRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.HeaderParamsObjectResponse headerParamsObject(
            org.openapis.openapi.models.shared.SimpleObject xHeaderObj,
            org.openapis.openapi.models.shared.SimpleObject xHeaderObjExplode) throws Exception {
        org.openapis.openapi.models.operations.HeaderParamsObjectRequest request =
            org.openapis.openapi.models.operations.HeaderParamsObjectRequest
                .builder()
                .xHeaderObj(xHeaderObj)
                .xHeaderObjExplode(xHeaderObjExplode)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/headers/obj");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.HeaderParamsObjectResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.HeaderParamsObjectResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.HeaderParamsObjectResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.HeaderParamsObjectRes out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.HeaderParamsObjectRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.HeaderParamsPrimitiveRequestBuilder headerParamsPrimitive() {
        return new org.openapis.openapi.models.operations.HeaderParamsPrimitiveRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.HeaderParamsPrimitiveResponse headerParamsPrimitive(
            boolean xHeaderBoolean,
            long xHeaderInteger,
            double xHeaderNumber,
            String xHeaderString) throws Exception {
        org.openapis.openapi.models.operations.HeaderParamsPrimitiveRequest request =
            org.openapis.openapi.models.operations.HeaderParamsPrimitiveRequest
                .builder()
                .xHeaderBoolean(xHeaderBoolean)
                .xHeaderInteger(xHeaderInteger)
                .xHeaderNumber(xHeaderNumber)
                .xHeaderString(xHeaderString)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/headers/primitive");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.HeaderParamsPrimitiveResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.HeaderParamsPrimitiveResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.HeaderParamsPrimitiveResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.HeaderParamsPrimitiveRes out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.HeaderParamsPrimitiveRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.JsonQueryParamsObjectRequestBuilder jsonQueryParamsObject() {
        return new org.openapis.openapi.models.operations.JsonQueryParamsObjectRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.JsonQueryParamsObjectResponse jsonQueryParamsObject(
            org.openapis.openapi.models.shared.DeepObject deepObjParam,
            org.openapis.openapi.models.shared.SimpleObject simpleObjParam) throws Exception {
        org.openapis.openapi.models.operations.JsonQueryParamsObjectRequest request =
            org.openapis.openapi.models.operations.JsonQueryParamsObjectRequest
                .builder()
                .deepObjParam(deepObjParam)
                .simpleObjParam(simpleObjParam)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/queryParams/json/obj");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.JsonQueryParamsObjectRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.JsonQueryParamsObjectResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.JsonQueryParamsObjectResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.JsonQueryParamsObjectResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.JsonQueryParamsObjectRes out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.JsonQueryParamsObjectRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.MixedParametersCamelCaseRequestBuilder mixedParametersCamelCase() {
        return new org.openapis.openapi.models.operations.MixedParametersCamelCaseRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.MixedParametersCamelCaseResponse mixedParametersCamelCase(
            String headerParam,
            String pathParam,
            String queryStringParam) throws Exception {
        org.openapis.openapi.models.operations.MixedParametersCamelCaseRequest request =
            org.openapis.openapi.models.operations.MixedParametersCamelCaseRequest
                .builder()
                .headerParam(headerParam)
                .pathParam(pathParam)
                .queryStringParam(queryStringParam)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                org.openapis.openapi.models.operations.MixedParametersCamelCaseRequest.class,
                baseUrl,
                "/anything/mixedParams/path/{path_param}/camelcase",
                request, this.sdkConfiguration.globals);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.MixedParametersCamelCaseRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.MixedParametersCamelCaseResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.MixedParametersCamelCaseResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.MixedParametersCamelCaseResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.MixedParametersCamelCaseRes out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.MixedParametersCamelCaseRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.MixedParametersPrimitivesRequestBuilder mixedParametersPrimitives() {
        return new org.openapis.openapi.models.operations.MixedParametersPrimitivesRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.MixedParametersPrimitivesResponse mixedParametersPrimitives(
            String headerParam,
            String pathParam,
            String queryStringParam) throws Exception {
        org.openapis.openapi.models.operations.MixedParametersPrimitivesRequest request =
            org.openapis.openapi.models.operations.MixedParametersPrimitivesRequest
                .builder()
                .headerParam(headerParam)
                .pathParam(pathParam)
                .queryStringParam(queryStringParam)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                org.openapis.openapi.models.operations.MixedParametersPrimitivesRequest.class,
                baseUrl,
                "/anything/mixedParams/path/{pathParam}",
                request, this.sdkConfiguration.globals);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.MixedParametersPrimitivesRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.MixedParametersPrimitivesResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.MixedParametersPrimitivesResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.MixedParametersPrimitivesResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.MixedParametersPrimitivesRes out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.MixedParametersPrimitivesRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.MixedQueryParamsRequestBuilder mixedQueryParams() {
        return new org.openapis.openapi.models.operations.MixedQueryParamsRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.MixedQueryParamsResponse mixedQueryParams(
            org.openapis.openapi.models.shared.SimpleObject deepObjectParam,
            org.openapis.openapi.models.shared.SimpleObject formParam,
            org.openapis.openapi.models.shared.SimpleObject jsonParam) throws Exception {
        org.openapis.openapi.models.operations.MixedQueryParamsRequest request =
            org.openapis.openapi.models.operations.MixedQueryParamsRequest
                .builder()
                .deepObjectParam(deepObjectParam)
                .formParam(formParam)
                .jsonParam(jsonParam)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/queryParams/mixed");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.MixedQueryParamsRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.MixedQueryParamsResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.MixedQueryParamsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.MixedQueryParamsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.MixedQueryParamsRes out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.MixedQueryParamsRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.PathParameterJsonRequestBuilder pathParameterJson() {
        return new org.openapis.openapi.models.operations.PathParameterJsonRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.PathParameterJsonResponse pathParameterJson(
            org.openapis.openapi.models.shared.SimpleObject jsonObj) throws Exception {
        org.openapis.openapi.models.operations.PathParameterJsonRequest request =
            org.openapis.openapi.models.operations.PathParameterJsonRequest
                .builder()
                .jsonObj(jsonObj)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                org.openapis.openapi.models.operations.PathParameterJsonRequest.class,
                baseUrl,
                "/anything/pathParams/json/{jsonObj}",
                request, this.sdkConfiguration.globals);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.PathParameterJsonResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.PathParameterJsonResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.PathParameterJsonResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PathParameterJsonRes out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.PathParameterJsonRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayRequestBuilder pipeDelimitedQueryParamsArray() {
        return new org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayResponse pipeDelimitedQueryParamsArray(
            Optional<? extends java.util.List<String>> arrParam,
            Optional<? extends java.util.List<Long>> arrParamExploded,
            Optional<? extends java.util.Map<String, String>> mapParam,
            Optional<? extends org.openapis.openapi.models.shared.SimpleObject> objParam) throws Exception {
        org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayRequest request =
            org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayRequest
                .builder()
                .arrParam(arrParam)
                .arrParamExploded(arrParamExploded)
                .mapParam(mapParam)
                .objParam(objParam)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/queryParams/pipe/array");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayRes out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.SimplePathParameterArraysRequestBuilder simplePathParameterArrays() {
        return new org.openapis.openapi.models.operations.SimplePathParameterArraysRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.SimplePathParameterArraysResponse simplePathParameterArrays(
            java.util.List<String> arrParam) throws Exception {
        org.openapis.openapi.models.operations.SimplePathParameterArraysRequest request =
            org.openapis.openapi.models.operations.SimplePathParameterArraysRequest
                .builder()
                .arrParam(arrParam)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                org.openapis.openapi.models.operations.SimplePathParameterArraysRequest.class,
                baseUrl,
                "/anything/pathParams/arr/{arrParam}",
                request, this.sdkConfiguration.globals);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.SimplePathParameterArraysResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.SimplePathParameterArraysResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.SimplePathParameterArraysResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SimplePathParameterArraysRes out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.SimplePathParameterArraysRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.SimplePathParameterMapsRequestBuilder simplePathParameterMaps() {
        return new org.openapis.openapi.models.operations.SimplePathParameterMapsRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.SimplePathParameterMapsResponse simplePathParameterMaps(
            java.util.Map<String, String> mapParam,
            java.util.Map<String, Long> mapParamExploded) throws Exception {
        org.openapis.openapi.models.operations.SimplePathParameterMapsRequest request =
            org.openapis.openapi.models.operations.SimplePathParameterMapsRequest
                .builder()
                .mapParam(mapParam)
                .mapParamExploded(mapParamExploded)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                org.openapis.openapi.models.operations.SimplePathParameterMapsRequest.class,
                baseUrl,
                "/anything/pathParams/map/{mapParam}/mapExploded/{mapParamExploded}",
                request, this.sdkConfiguration.globals);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.SimplePathParameterMapsResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.SimplePathParameterMapsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.SimplePathParameterMapsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SimplePathParameterMapsRes out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.SimplePathParameterMapsRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.SimplePathParameterObjectsRequestBuilder simplePathParameterObjects() {
        return new org.openapis.openapi.models.operations.SimplePathParameterObjectsRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.SimplePathParameterObjectsResponse simplePathParameterObjects(
            org.openapis.openapi.models.shared.SimpleObject objParam,
            org.openapis.openapi.models.shared.SimpleObject objParamExploded) throws Exception {
        org.openapis.openapi.models.operations.SimplePathParameterObjectsRequest request =
            org.openapis.openapi.models.operations.SimplePathParameterObjectsRequest
                .builder()
                .objParam(objParam)
                .objParamExploded(objParamExploded)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                org.openapis.openapi.models.operations.SimplePathParameterObjectsRequest.class,
                baseUrl,
                "/anything/pathParams/obj/{objParam}/objExploded/{objParamExploded}",
                request, this.sdkConfiguration.globals);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.SimplePathParameterObjectsResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.SimplePathParameterObjectsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.SimplePathParameterObjectsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SimplePathParameterObjectsRes out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.SimplePathParameterObjectsRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.SimplePathParameterPrimitivesRequestBuilder simplePathParameterPrimitives() {
        return new org.openapis.openapi.models.operations.SimplePathParameterPrimitivesRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.SimplePathParameterPrimitivesResponse simplePathParameterPrimitives(
            boolean boolParam,
            long intParam,
            double numParam,
            String strParam) throws Exception {
        org.openapis.openapi.models.operations.SimplePathParameterPrimitivesRequest request =
            org.openapis.openapi.models.operations.SimplePathParameterPrimitivesRequest
                .builder()
                .boolParam(boolParam)
                .intParam(intParam)
                .numParam(numParam)
                .strParam(strParam)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                org.openapis.openapi.models.operations.SimplePathParameterPrimitivesRequest.class,
                baseUrl,
                "/anything/pathParams/str/{strParam}/bool/{boolParam}/int/{intParam}/num/{numParam}",
                request, this.sdkConfiguration.globals);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.SimplePathParameterPrimitivesResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.SimplePathParameterPrimitivesResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.SimplePathParameterPrimitivesResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SimplePathParameterPrimitivesRes out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.SimplePathParameterPrimitivesRes>() {});
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }

}
