/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.apache.http.NameValuePair;
import org.openapis.openapi.models.errors.SDKError;
import org.openapis.openapi.models.operations.SDKMethodInterfaces.*;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.Utils;
import org.openapitools.jackson.nullable.JsonNullable;

public class Resource implements
            MethodCallCreateFile,
            MethodCallCreateResource,
            MethodCallDeleteResource,
            MethodCallGetArrayDataSource,
            MethodCallGetResource,
            MethodCallUpdateResource {

    private final SDKConfiguration sdkConfiguration;

    Resource(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public org.openapis.openapi.models.operations.CreateFileRequestBuilder createFile() {
        return new org.openapis.openapi.models.operations.CreateFileRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.CreateFileResponse createFile(
            org.openapis.openapi.models.operations.CreateFileRequestBody request) throws Exception {

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/fileResource");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<org.openapis.openapi.models.operations.CreateFileRequestBody>() {});
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "multipart", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.CreateFileResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.CreateFileResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.CreateFileResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FileResource out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.shared.FileResource>() {});
                res.withFileResource(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.CreateResourceRequestBuilder createResource() {
        return new org.openapis.openapi.models.operations.CreateResourceRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.CreateResourceResponse createResource(
            org.openapis.openapi.models.shared.ExampleResource request) throws Exception {

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/resource");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<org.openapis.openapi.models.shared.ExampleResource>() {});
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.CreateResourceResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.CreateResourceResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.CreateResourceResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ExampleResource out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.shared.ExampleResource>() {});
                res.withExampleResource(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.DeleteResourceRequestBuilder deleteResource() {
        return new org.openapis.openapi.models.operations.DeleteResourceRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.DeleteResourceResponse deleteResource(
            String resourceId) throws Exception {
        org.openapis.openapi.models.operations.DeleteResourceRequest request =
            org.openapis.openapi.models.operations.DeleteResourceRequest
                .builder()
                .resourceId(resourceId)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                org.openapis.openapi.models.operations.DeleteResourceRequest.class,
                baseUrl,
                "/resource/object/{resourceId}",
                request, this.sdkConfiguration.globals);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.DeleteResourceResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.DeleteResourceResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.DeleteResourceResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }


    public org.openapis.openapi.models.operations.GetArrayDataSourceRequestBuilder getArrayDataSource() {
        return new org.openapis.openapi.models.operations.GetArrayDataSourceRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.GetArrayDataSourceResponse getArrayDataSource(
            String filter) throws Exception {
        org.openapis.openapi.models.operations.GetArrayDataSourceRequest request =
            org.openapis.openapi.models.operations.GetArrayDataSourceRequest
                .builder()
                .filter(filter)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/datasource/array");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.GetArrayDataSourceRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.GetArrayDataSourceResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.GetArrayDataSourceResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.GetArrayDataSourceResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.List<String> out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<java.util.List<String>>() {});
                res.withArrayDataSource(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.GetResourceRequestBuilder getResource() {
        return new org.openapis.openapi.models.operations.GetResourceRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.GetResourceResponse getResource(
            String resourceId) throws Exception {
        org.openapis.openapi.models.operations.GetResourceRequest request =
            org.openapis.openapi.models.operations.GetResourceRequest
                .builder()
                .resourceId(resourceId)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                org.openapis.openapi.models.operations.GetResourceRequest.class,
                baseUrl,
                "/resource/object/{resourceId}",
                request, this.sdkConfiguration.globals);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.GetResourceResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.GetResourceResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.GetResourceResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ExampleResource out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.shared.ExampleResource>() {});
                res.withExampleResource(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.UpdateResourceRequestBuilder updateResource() {
        return new org.openapis.openapi.models.operations.UpdateResourceRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.UpdateResourceResponse updateResource(
            String augment,
            String resourceId) throws Exception {
        org.openapis.openapi.models.operations.UpdateResourceRequest request =
            org.openapis.openapi.models.operations.UpdateResourceRequest
                .builder()
                .augment(augment)
                .resourceId(resourceId)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                org.openapis.openapi.models.operations.UpdateResourceRequest.class,
                baseUrl,
                "/resource/object/{resourceId}",
                request, this.sdkConfiguration.globals);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.UpdateResourceRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.UpdateResourceResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.UpdateResourceResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.UpdateResourceResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }

}
