/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.LocalDate;
import java.util.Optional;
import java.util.function.Function;
import java.util.stream.Collectors;
import org.apache.http.NameValuePair;
import org.openapis.openapi.models.errors.SDKError;
import org.openapis.openapi.models.operations.SDKMethodInterfaces.*;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.Utils;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Endpoints for testing response bodies.
 */
public class ResponseBodies implements
            MethodCallResponseBodyAdditionalPropertiesAnyPost,
            MethodCallResponseBodyAdditionalPropertiesComplexNumbersPost,
            MethodCallResponseBodyAdditionalPropertiesDatePost,
            MethodCallResponseBodyAdditionalPropertiesObjectPost,
            MethodCallResponseBodyAdditionalPropertiesPost,
            MethodCallResponseBodyBytesGet,
            MethodCallResponseBodyEmptyWithHeaders,
            MethodCallResponseBodyOptionalGet,
            MethodCallResponseBodyReadOnly,
            MethodCallResponseBodyStringGet,
            MethodCallResponseBodyXmlGet,
            MethodCallResponseBodyZeroValueComplexTypePtrsPost {
    
    /**
     * RESPONSE_BODY_OPTIONAL_GET_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] RESPONSE_BODY_OPTIONAL_GET_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * RESPONSE_BODY_READ_ONLY_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] RESPONSE_BODY_READ_ONLY_SERVERS = {
        "http://localhost:35456",
    };

    private final SDKConfiguration sdkConfiguration;

    ResponseBodies(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesAnyPostRequestBuilder responseBodyAdditionalPropertiesAnyPost() {
        return new org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesAnyPostRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesAnyPostResponse responseBodyAdditionalPropertiesAnyPost(
            java.util.Map<String, java.lang.Object> request) throws Exception {

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/responseBodies/additionalPropertiesAny");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.util.Map<String, java.lang.Object>>() {});
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesAnyPostResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesAnyPostResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesAnyPostResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesAnyPostResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesAnyPostResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesComplexNumbersPostRequestBuilder responseBodyAdditionalPropertiesComplexNumbersPost() {
        return new org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesComplexNumbersPostRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesComplexNumbersPostResponse responseBodyAdditionalPropertiesComplexNumbersPost(
            java.util.Map<String, BigInteger> request) throws Exception {

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/responseBodies/additionalPropertiesComplexNumbers");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.STRING,
            new TypeReference<java.util.Map<String, BigInteger>>() {});
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesComplexNumbersPostResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesComplexNumbersPostResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesComplexNumbersPostResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesComplexNumbersPostResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesComplexNumbersPostResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesDatePostRequestBuilder responseBodyAdditionalPropertiesDatePost() {
        return new org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesDatePostRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesDatePostResponse responseBodyAdditionalPropertiesDatePost(
            java.util.Map<String, LocalDate> request) throws Exception {

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/responseBodies/additionalPropertiesDate");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.util.Map<String, LocalDate>>() {});
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesDatePostResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesDatePostResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesDatePostResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesDatePostResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesDatePostResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesObjectPostRequestBuilder responseBodyAdditionalPropertiesObjectPost() {
        return new org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesObjectPostRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesObjectPostResponse responseBodyAdditionalPropertiesObjectPost(
            java.util.Map<String, org.openapis.openapi.models.shared.SimpleObject> request) throws Exception {

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/responseBodies/additionalPropertiesObject");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.util.Map<String, org.openapis.openapi.models.shared.SimpleObject>>() {});
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesObjectPostResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesObjectPostResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesObjectPostResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesObjectPostResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesObjectPostResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesPostRequestBuilder responseBodyAdditionalPropertiesPost() {
        return new org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesPostRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesPostResponse responseBodyAdditionalPropertiesPost(
            java.util.Map<String, String> request) throws Exception {

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/responseBodies/additionalProperties");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.util.Map<String, String>>() {});
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesPostResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesPostResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesPostResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesPostResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.ResponseBodyAdditionalPropertiesPostResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.ResponseBodyBytesGetRequestBuilder responseBodyBytesGet() {
        return new org.openapis.openapi.models.operations.ResponseBodyBytesGetRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.ResponseBodyBytesGetResponse responseBodyBytesGetDirect() throws Exception {

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/bytes/100");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/octet-stream");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.ResponseBodyBytesGetResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.ResponseBodyBytesGetResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);
        if ((httpRes.statusCode() == 200) && org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/octet-stream")) {
            resBuilder.bytes(httpRes.body());
        }

        org.openapis.openapi.models.operations.ResponseBodyBytesGetResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/octet-stream")) {
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.ResponseBodyEmptyWithHeadersRequestBuilder responseBodyEmptyWithHeaders() {
        return new org.openapis.openapi.models.operations.ResponseBodyEmptyWithHeadersRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.ResponseBodyEmptyWithHeadersResponse responseBodyEmptyWithHeaders(
            double xNumberHeader,
            String xStringHeader) throws Exception {
        org.openapis.openapi.models.operations.ResponseBodyEmptyWithHeadersRequest request =
            org.openapis.openapi.models.operations.ResponseBodyEmptyWithHeadersRequest
                .builder()
                .xNumberHeader(xNumberHeader)
                .xStringHeader(xStringHeader)
                .build();
        

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/response-headers");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.ResponseBodyEmptyWithHeadersRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.ResponseBodyEmptyWithHeadersResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.ResponseBodyEmptyWithHeadersResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.ResponseBodyEmptyWithHeadersResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            res.withHeaders(httpRes
                    .headers()
                    .map()
                    .keySet()
                    .stream()
                    .collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k))));
        }

        return res;
    }


    public org.openapis.openapi.models.operations.ResponseBodyOptionalGetRequestBuilder responseBodyOptionalGet() {
        return new org.openapis.openapi.models.operations.ResponseBodyOptionalGetRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.ResponseBodyOptionalGetResponse responseBodyOptionalGet(
            java.util.Optional<String> serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(RESPONSE_BODY_OPTIONAL_GET_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/optional");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json;q=1, text/plain;q=0");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.ResponseBodyOptionalGetResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.ResponseBodyOptionalGetResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.ResponseBodyOptionalGetResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TypedObject1 out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.shared.TypedObject1>() {});
                res.withTypedObject1(java.util.Optional.ofNullable(out));
            } else if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/plain")) {
                String out = Utils.toUtf8AndClose(httpRes.body());
                res.withRes(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.ResponseBodyReadOnlyRequestBuilder responseBodyReadOnly() {
        return new org.openapis.openapi.models.operations.ResponseBodyReadOnlyRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.ResponseBodyReadOnlyResponse responseBodyReadOnly(
            java.util.Optional<String> serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(RESPONSE_BODY_READ_ONLY_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/readonlyorwriteonly#readOnly");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.ResponseBodyReadOnlyResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.ResponseBodyReadOnlyResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.ResponseBodyReadOnlyResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ReadOnlyObject out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.shared.ReadOnlyObject>() {});
                res.withReadOnlyObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.ResponseBodyStringGetRequestBuilder responseBodyStringGet() {
        return new org.openapis.openapi.models.operations.ResponseBodyStringGetRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.ResponseBodyStringGetResponse responseBodyStringGetDirect() throws Exception {

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/html");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "text/html");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.ResponseBodyStringGetResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.ResponseBodyStringGetResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.ResponseBodyStringGetResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/html")) {
                String out = Utils.toUtf8AndClose(httpRes.body());
                res.withHtml(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.ResponseBodyXmlGetRequestBuilder responseBodyXmlGet() {
        return new org.openapis.openapi.models.operations.ResponseBodyXmlGetRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.ResponseBodyXmlGetResponse responseBodyXmlGetDirect() throws Exception {

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/xml");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/xml");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.ResponseBodyXmlGetResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.ResponseBodyXmlGetResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.ResponseBodyXmlGetResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                String out = Utils.toUtf8AndClose(httpRes.body());
                res.withXml(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.ResponseBodyZeroValueComplexTypePtrsPostRequestBuilder responseBodyZeroValueComplexTypePtrsPost() {
        return new org.openapis.openapi.models.operations.ResponseBodyZeroValueComplexTypePtrsPostRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.ResponseBodyZeroValueComplexTypePtrsPostResponse responseBodyZeroValueComplexTypePtrsPost(
            org.openapis.openapi.models.shared.ObjWithZeroValueComplexTypePtrs request) throws Exception {

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/responseBodies/zeroValueComplexTypePtrs");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<org.openapis.openapi.models.shared.ObjWithZeroValueComplexTypePtrs>() {});
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.ResponseBodyZeroValueComplexTypePtrsPostResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.ResponseBodyZeroValueComplexTypePtrsPostResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.ResponseBodyZeroValueComplexTypePtrsPostResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ResponseBodyZeroValueComplexTypePtrsPostResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.ResponseBodyZeroValueComplexTypePtrsPostResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }

}
