/* 
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import org.apache.http.NameValuePair;
import org.openapis.openapi.models.errors.SDKError;
import org.openapis.openapi.models.operations.SDKMethodInterfaces.*;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.Hook.AfterErrorContextImpl;
import org.openapis.openapi.utils.Hook.AfterSuccessContextImpl;
import org.openapis.openapi.utils.Hook.BeforeRequestContextImpl;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.Options;
import org.openapis.openapi.utils.Retries.NonRetryableException;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.Utils;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Endpoints for testing retries.
 */
public class Retries implements
            MethodCallRetriesAfter,
            MethodCallRetriesConnectErrorGet,
            MethodCallRetriesFlatEmptyResponsePost,
            MethodCallRetriesGet,
            MethodCallRetriesPost {
    
    /**
     * RETRIES_AFTER_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] RETRIES_AFTER_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * RETRIES_CONNECT_ERROR_GET_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] RETRIES_CONNECT_ERROR_GET_SERVERS = {
        "http://localhost:33333",
    };
    
    /**
     * RETRIES_FLAT_EMPTY_RESPONSE_POST_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] RETRIES_FLAT_EMPTY_RESPONSE_POST_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * RETRIES_GET_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] RETRIES_GET_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * RETRIES_POST_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] RETRIES_POST_SERVERS = {
        "http://localhost:35456",
    };

    private final SDKConfiguration sdkConfiguration;

    Retries(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    public org.openapis.openapi.models.operations.RetriesAfterRequestBuilder retriesAfter() {
        return new org.openapis.openapi.models.operations.RetriesAfterRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.RetriesAfterResponse retriesAfter(
            String requestId) throws Exception {
        return retriesAfter(Optional.empty(), requestId, Optional.empty(), Optional.empty(), Optional.empty());
    }
    public org.openapis.openapi.models.operations.RetriesAfterResponse retriesAfter(
            Optional<? extends Long> numRetries,
            String requestId,
            Optional<? extends Long> retryAfterVal,
            java.util.Optional<String> serverURL,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }

        org.openapis.openapi.models.operations.RetriesAfterRequest request =
            org.openapis.openapi.models.operations.RetriesAfterRequest
                .builder()
                .numRetries(numRetries)
                .requestId(requestId)
                .retryAfterVal(retryAfterVal)
                .build();
        
        String _baseUrl = Utils.templateUrl(RETRIES_AFTER_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/retries/after");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("x-speakeasy-user-agent", 
                this.sdkConfiguration.userAgent);

        _req.addQueryParams(Utils.getQueryParams(
                org.openapis.openapi.models.operations.RetriesAfterRequest.class,
                request, 
                this.sdkConfiguration.globals));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HTTPRequest _finalReq = _req;
        org.openapis.openapi.utils.RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            _retryConfig = org.openapis.openapi.utils.RetryConfig.builder()
                .backoff(org.openapis.openapi.utils.BackoffStrategy.builder()
                            .initialInterval(10, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .maxInterval(200, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(1000, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .retryConnectError(false)
                            .build())
                .build();
        }
        List<String> _statusCodes = new java.util.ArrayList<>();
        _statusCodes.add("503");
        org.openapis.openapi.utils.Retries _retries = org.openapis.openapi.utils.Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl("retriesAfter", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl("retriesAfter", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl("retriesAfter", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.RetriesAfterResponse.Builder _resBuilder = 
            org.openapis.openapi.models.operations.RetriesAfterResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        org.openapis.openapi.models.operations.RetriesAfterResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                org.openapis.openapi.models.operations.RetriesAfterRetries _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.RetriesAfterRetries>() {});
                _res.withRetries(java.util.Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.toByteArrayAndClose(_httpRes.body()));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.toByteArrayAndClose(_httpRes.body()));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.toByteArrayAndClose(_httpRes.body()));
    }



    /**
     * A request to a non-valid port to test connection errors
     * @return The call builder
     */
    public org.openapis.openapi.models.operations.RetriesConnectErrorGetRequestBuilder retriesConnectErrorGet() {
        return new org.openapis.openapi.models.operations.RetriesConnectErrorGetRequestBuilder(this);
    }

    /**
     * A request to a non-valid port to test connection errors
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RetriesConnectErrorGetResponse retriesConnectErrorGetDirect() throws Exception {
        return retriesConnectErrorGet(Optional.empty(), Optional.empty());
    }
    /**
     * A request to a non-valid port to test connection errors
     * @param serverURL Overrides the server URL.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RetriesConnectErrorGetResponse retriesConnectErrorGet(
            java.util.Optional<String> serverURL,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }

        String _baseUrl = Utils.templateUrl(RETRIES_CONNECT_ERROR_GET_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/retriesConnectError");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("x-speakeasy-user-agent", 
                this.sdkConfiguration.userAgent);

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HTTPRequest _finalReq = _req;
        org.openapis.openapi.utils.RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            _retryConfig = org.openapis.openapi.utils.RetryConfig.builder()
                .backoff(org.openapis.openapi.utils.BackoffStrategy.builder()
                            .initialInterval(500, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .maxInterval(60000, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(3600000, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .retryConnectError(false)
                            .build())
                .build();
        }
        List<String> _statusCodes = new java.util.ArrayList<>();
        _statusCodes.add("5XX");
        org.openapis.openapi.utils.Retries _retries = org.openapis.openapi.utils.Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl("retriesConnectErrorGet", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl("retriesConnectErrorGet", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl("retriesConnectErrorGet", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.RetriesConnectErrorGetResponse.Builder _resBuilder = 
            org.openapis.openapi.models.operations.RetriesConnectErrorGetResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        org.openapis.openapi.models.operations.RetriesConnectErrorGetResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                org.openapis.openapi.models.operations.RetriesConnectErrorGetRetries _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.RetriesConnectErrorGetRetries>() {});
                _res.withRetries(java.util.Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.toByteArrayAndClose(_httpRes.body()));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.toByteArrayAndClose(_httpRes.body()));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.toByteArrayAndClose(_httpRes.body()));
    }



    public org.openapis.openapi.models.operations.RetriesFlatEmptyResponsePostRequestBuilder retriesFlatEmptyResponsePost() {
        return new org.openapis.openapi.models.operations.RetriesFlatEmptyResponsePostRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.RetriesFlatEmptyResponsePostResponse retriesFlatEmptyResponsePost(
            String requestId) throws Exception {
        return retriesFlatEmptyResponsePost(Optional.empty(), Optional.empty(), requestId, Optional.empty(), Optional.empty());
    }
    public org.openapis.openapi.models.operations.RetriesFlatEmptyResponsePostResponse retriesFlatEmptyResponsePost(
            Optional<? extends org.openapis.openapi.models.operations.RetriesFlatEmptyResponsePostRequestBody> requestBody,
            Optional<? extends Long> numRetries,
            String requestId,
            java.util.Optional<String> serverURL,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }

        org.openapis.openapi.models.operations.RetriesFlatEmptyResponsePostRequest request =
            org.openapis.openapi.models.operations.RetriesFlatEmptyResponsePostRequest
                .builder()
                .requestBody(requestBody)
                .numRetries(numRetries)
                .requestId(requestId)
                .build();
        
        String _baseUrl = Utils.templateUrl(RETRIES_FLAT_EMPTY_RESPONSE_POST_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/retriesFlatEmptyResponse");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                this.sdkConfiguration.userAgent);

        _req.addQueryParams(Utils.getQueryParams(
                org.openapis.openapi.models.operations.RetriesFlatEmptyResponsePostRequest.class,
                request, 
                this.sdkConfiguration.globals));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HTTPRequest _finalReq = _req;
        org.openapis.openapi.utils.RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            _retryConfig = org.openapis.openapi.utils.RetryConfig.builder()
                .backoff(org.openapis.openapi.utils.BackoffStrategy.builder()
                            .initialInterval(10, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .maxInterval(200, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(1000, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .retryConnectError(false)
                            .build())
                .build();
        }
        List<String> _statusCodes = new java.util.ArrayList<>();
        _statusCodes.add("503");
        org.openapis.openapi.utils.Retries _retries = org.openapis.openapi.utils.Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl("retriesFlatEmptyResponsePost", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl("retriesFlatEmptyResponsePost", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl("retriesFlatEmptyResponsePost", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.RetriesFlatEmptyResponsePostResponse.Builder _resBuilder = 
            org.openapis.openapi.models.operations.RetriesFlatEmptyResponsePostResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        org.openapis.openapi.models.operations.RetriesFlatEmptyResponsePostResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.toByteArrayAndClose(_httpRes.body()));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.toByteArrayAndClose(_httpRes.body()));
    }



    public org.openapis.openapi.models.operations.RetriesGetRequestBuilder retriesGet() {
        return new org.openapis.openapi.models.operations.RetriesGetRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.RetriesGetResponse retriesGet(
            String requestId) throws Exception {
        return retriesGet(Optional.empty(), requestId, Optional.empty(), Optional.empty());
    }
    public org.openapis.openapi.models.operations.RetriesGetResponse retriesGet(
            Optional<? extends Long> numRetries,
            String requestId,
            java.util.Optional<String> serverURL,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }

        org.openapis.openapi.models.operations.RetriesGetRequest request =
            org.openapis.openapi.models.operations.RetriesGetRequest
                .builder()
                .numRetries(numRetries)
                .requestId(requestId)
                .build();
        
        String _baseUrl = Utils.templateUrl(RETRIES_GET_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/retries");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("x-speakeasy-user-agent", 
                this.sdkConfiguration.userAgent);

        _req.addQueryParams(Utils.getQueryParams(
                org.openapis.openapi.models.operations.RetriesGetRequest.class,
                request, 
                this.sdkConfiguration.globals));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HTTPRequest _finalReq = _req;
        org.openapis.openapi.utils.RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            _retryConfig = org.openapis.openapi.utils.RetryConfig.builder()
                .backoff(org.openapis.openapi.utils.BackoffStrategy.builder()
                            .initialInterval(10, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .maxInterval(200, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(1000, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .retryConnectError(false)
                            .build())
                .build();
        }
        List<String> _statusCodes = new java.util.ArrayList<>();
        _statusCodes.add("503");
        org.openapis.openapi.utils.Retries _retries = org.openapis.openapi.utils.Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl("retriesGet", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl("retriesGet", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl("retriesGet", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.RetriesGetResponse.Builder _resBuilder = 
            org.openapis.openapi.models.operations.RetriesGetResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        org.openapis.openapi.models.operations.RetriesGetResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                org.openapis.openapi.models.operations.RetriesGetRetries _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.RetriesGetRetries>() {});
                _res.withRetries(java.util.Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.toByteArrayAndClose(_httpRes.body()));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.toByteArrayAndClose(_httpRes.body()));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.toByteArrayAndClose(_httpRes.body()));
    }



    public org.openapis.openapi.models.operations.RetriesPostRequestBuilder retriesPost() {
        return new org.openapis.openapi.models.operations.RetriesPostRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.RetriesPostResponse retriesPost(
            String requestId) throws Exception {
        return retriesPost(Optional.empty(), Optional.empty(), requestId, Optional.empty(), Optional.empty());
    }
    public org.openapis.openapi.models.operations.RetriesPostResponse retriesPost(
            Optional<? extends org.openapis.openapi.models.operations.RetriesPostRequestBody> requestBody,
            Optional<? extends Long> numRetries,
            String requestId,
            java.util.Optional<String> serverURL,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }

        org.openapis.openapi.models.operations.RetriesPostRequest request =
            org.openapis.openapi.models.operations.RetriesPostRequest
                .builder()
                .requestBody(requestBody)
                .numRetries(numRetries)
                .requestId(requestId)
                .build();
        
        String _baseUrl = Utils.templateUrl(RETRIES_POST_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/retries");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("x-speakeasy-user-agent", 
                this.sdkConfiguration.userAgent);

        _req.addQueryParams(Utils.getQueryParams(
                org.openapis.openapi.models.operations.RetriesPostRequest.class,
                request, 
                this.sdkConfiguration.globals));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HTTPRequest _finalReq = _req;
        org.openapis.openapi.utils.RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            _retryConfig = org.openapis.openapi.utils.RetryConfig.builder()
                .backoff(org.openapis.openapi.utils.BackoffStrategy.builder()
                            .initialInterval(10, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .maxInterval(200, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(1000, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .retryConnectError(false)
                            .build())
                .build();
        }
        List<String> _statusCodes = new java.util.ArrayList<>();
        _statusCodes.add("503");
        org.openapis.openapi.utils.Retries _retries = org.openapis.openapi.utils.Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl("retriesPost", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl("retriesPost", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl("retriesPost", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.RetriesPostResponse.Builder _resBuilder = 
            org.openapis.openapi.models.operations.RetriesPostResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        org.openapis.openapi.models.operations.RetriesPostResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                org.openapis.openapi.models.operations.RetriesPostRetries _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.RetriesPostRetries>() {});
                _res.withRetries(java.util.Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.toByteArrayAndClose(_httpRes.body()));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.toByteArrayAndClose(_httpRes.body()));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.toByteArrayAndClose(_httpRes.body()));
    }

}
