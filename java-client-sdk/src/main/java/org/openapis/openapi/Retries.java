/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import org.apache.http.NameValuePair;
import org.openapis.openapi.models.errors.SDKError;
import org.openapis.openapi.models.operations.SDKMethodInterfaces.*;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.Options;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.Utils;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Endpoints for testing retries.
 */
public class Retries implements
            MethodCallRetriesAfter,
            MethodCallRetriesConnectErrorGet,
            MethodCallRetriesGet,
            MethodCallRetriesPost {
    
    /**
     * RETRIES_AFTER_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] RETRIES_AFTER_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * RETRIES_CONNECT_ERROR_GET_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] RETRIES_CONNECT_ERROR_GET_SERVERS = {
        "http://localhost:33333",
    };
    
    /**
     * RETRIES_GET_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] RETRIES_GET_SERVERS = {
        "http://localhost:35456",
    };
    
    /**
     * RETRIES_POST_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] RETRIES_POST_SERVERS = {
        "http://localhost:35456",
    };

    private final SDKConfiguration sdkConfiguration;

    Retries(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public org.openapis.openapi.models.operations.RetriesAfterRequestBuilder retriesAfter() {
        return new org.openapis.openapi.models.operations.RetriesAfterRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.RetriesAfterResponse retriesAfter(
            Optional<? extends Long> numRetries,
            String requestId,
            Optional<? extends Long> retryAfterVal,
            java.util.Optional<String> serverURL,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }

        org.openapis.openapi.models.operations.RetriesAfterRequest request =
            org.openapis.openapi.models.operations.RetriesAfterRequest
                .builder()
                .numRetries(numRetries)
                .requestId(requestId)
                .retryAfterVal(retryAfterVal)
                .build();
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(RETRIES_AFTER_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/retries/after");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.RetriesAfterRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        org.openapis.openapi.utils.RetryConfig retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            retryConfig = org.openapis.openapi.utils.RetryConfig.builder()
                .backoff(org.openapis.openapi.utils.BackoffStrategy.builder()
                            .initialInterval(10L, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .maxInterval(200L, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(1000L, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .retryConnectError(false)
                            .build())
                .build();
        }

        List<String> statusCodes = new java.util.ArrayList<String>();
        statusCodes.add("503");
        org.openapis.openapi.utils.Retries retries = org.openapis.openapi.utils.Retries.builder()
            .action(() -> client.send(req))
            .retryConfig(retryConfig)
            .statusCodes(statusCodes)
            .build();

        HttpResponse<InputStream> httpRes = retries.run();

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.RetriesAfterResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.RetriesAfterResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.RetriesAfterResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.RetriesAfterRetries out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.RetriesAfterRetries>() {});
                res.withRetries(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.RetriesConnectErrorGetRequestBuilder retriesConnectErrorGet() {
        return new org.openapis.openapi.models.operations.RetriesConnectErrorGetRequestBuilder(this);
    }

    /**
     * A request to a non-valid port to test connection errors
     * @param serverURL Overrides the server URL.
     * @param options additional options
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public org.openapis.openapi.models.operations.RetriesConnectErrorGetResponse retriesConnectErrorGet(
            java.util.Optional<String> serverURL,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(RETRIES_CONNECT_ERROR_GET_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/retriesConnectError");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        org.openapis.openapi.utils.RetryConfig retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            retryConfig = org.openapis.openapi.utils.RetryConfig.builder()
                .backoff(org.openapis.openapi.utils.BackoffStrategy.builder()
                            .initialInterval(500L, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .maxInterval(60000L, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(3600000L, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .retryConnectError(false)
                            .build())
                .build();
        }

        List<String> statusCodes = new java.util.ArrayList<String>();
        statusCodes.add("5XX");
        org.openapis.openapi.utils.Retries retries = org.openapis.openapi.utils.Retries.builder()
            .action(() -> client.send(req))
            .retryConfig(retryConfig)
            .statusCodes(statusCodes)
            .build();

        HttpResponse<InputStream> httpRes = retries.run();

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.RetriesConnectErrorGetResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.RetriesConnectErrorGetResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.RetriesConnectErrorGetResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.RetriesConnectErrorGetRetries out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.RetriesConnectErrorGetRetries>() {});
                res.withRetries(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.RetriesGetRequestBuilder retriesGet() {
        return new org.openapis.openapi.models.operations.RetriesGetRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.RetriesGetResponse retriesGet(
            Optional<? extends Long> numRetries,
            String requestId,
            java.util.Optional<String> serverURL,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }

        org.openapis.openapi.models.operations.RetriesGetRequest request =
            org.openapis.openapi.models.operations.RetriesGetRequest
                .builder()
                .numRetries(numRetries)
                .requestId(requestId)
                .build();
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(RETRIES_GET_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/retries");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.RetriesGetRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        org.openapis.openapi.utils.RetryConfig retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            retryConfig = org.openapis.openapi.utils.RetryConfig.builder()
                .backoff(org.openapis.openapi.utils.BackoffStrategy.builder()
                            .initialInterval(10L, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .maxInterval(200L, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(1000L, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .retryConnectError(false)
                            .build())
                .build();
        }

        List<String> statusCodes = new java.util.ArrayList<String>();
        statusCodes.add("503");
        org.openapis.openapi.utils.Retries retries = org.openapis.openapi.utils.Retries.builder()
            .action(() -> client.send(req))
            .retryConfig(retryConfig)
            .statusCodes(statusCodes)
            .build();

        HttpResponse<InputStream> httpRes = retries.run();

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.RetriesGetResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.RetriesGetResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.RetriesGetResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.RetriesGetRetries out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.RetriesGetRetries>() {});
                res.withRetries(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public org.openapis.openapi.models.operations.RetriesPostRequestBuilder retriesPost() {
        return new org.openapis.openapi.models.operations.RetriesPostRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.RetriesPostResponse retriesPost(
            Optional<? extends org.openapis.openapi.models.operations.RetriesPostRequestBody> requestBody,
            Optional<? extends Long> numRetries,
            String requestId,
            java.util.Optional<String> serverURL,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }

        org.openapis.openapi.models.operations.RetriesPostRequest request =
            org.openapis.openapi.models.operations.RetriesPostRequest
                .builder()
                .requestBody(requestBody)
                .numRetries(numRetries)
                .requestId(requestId)
                .build();
        
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(RETRIES_POST_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/retries");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<java.lang.Object>() {});
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(
                _convertedRequest, "requestBody", "json", false);
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(
                org.openapis.openapi.models.operations.RetriesPostRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        org.openapis.openapi.utils.RetryConfig retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            retryConfig = org.openapis.openapi.utils.RetryConfig.builder()
                .backoff(org.openapis.openapi.utils.BackoffStrategy.builder()
                            .initialInterval(10L, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .maxInterval(200L, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(1000L, java.util.concurrent.TimeUnit.MILLISECONDS)
                            .retryConnectError(false)
                            .build())
                .build();
        }

        List<String> statusCodes = new java.util.ArrayList<String>();
        statusCodes.add("503");
        org.openapis.openapi.utils.Retries retries = org.openapis.openapi.utils.Retries.builder()
            .action(() -> client.send(req))
            .retryConfig(retryConfig)
            .statusCodes(statusCodes)
            .build();

        HttpResponse<InputStream> httpRes = retries.run();

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.RetriesPostResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.RetriesPostResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.RetriesPostResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.RetriesPostRetries out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.RetriesPostRetries>() {});
                res.withRetries(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }

}
