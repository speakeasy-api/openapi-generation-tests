/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapis.openapi.models.errors.SDKError;
import org.openapis.openapi.models.operations.SDKMethodInterfaces.*;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.RetryConfig;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;
import org.openapis.openapi.utils.Utils;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Test: Test Summary
 * Some test description.
 * About our test document.
 * https://speakeasyapi.dev/docs/home - Speakeasy Docs
 */
public class SDK implements
            MethodCallConflictingEnum,
            MethodCallPutAnythingIgnoredGeneration,
            MethodCallResponseBodyJsonGet {
    /**
     * SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] SERVERS = {
        /**
         * The default server.
         */
        "http://localhost:35123",
        /**
         * A server url to a non-existent server.
         */
        "http://broken",
        /**
         * A server url with templated variables.
         */
        "http://{hostname}:{port}",
        /**
         * A server url with templated variables.
         */
        "http://localhost:35123/anything/{something}",
        /**
         * A server url with templated variables (including the protocol).
         */
        "{protocol}://{hostname}:{port}",
    };

    /**
     * Endpoints for purely testing valid generation behavior.
     */
    private final Generation generation;

    /**
     * Endpoints for testing error responses.
     */
    private final Errors errors;

    /**
     * Endpoints for testing union types.
     */
    private final Unions unions;

    /**
     * Endpoints for testing flattening through request body and parameter combinations.
     */
    private final Flattening flattening;

    /**
     * Endpoints for testing global parameters.
     */
    private final Globals globals;

    /**
     * Endpoints for testing parameters.
     */
    private final Parameters parameters;

    /**
     * Endpoints for testing hooks
     */
    private final Hooks hooks;

    private final Nest nest;

    private final Nested nested;

    /**
     * Endpoints for testing authentication.
     */
    private final Auth auth;

    /**
     * Endpoints for testing request bodies.
     */
    private final RequestBodies requestBodies;

    /**
     * Endpoints for testing response bodies.
     */
    private final ResponseBodies responseBodies;

    /**
     * Endpoints for testing servers.
     */
    private final Servers servers;

    /**
     * Endpoints for testing telemetry.
     */
    private final Telemetry telemetry;

    /**
     * Endpoints for testing authentication.
     */
    private final AuthNew authNew;

    private final Resource resource;

    /**
     * Testing for documentation extensions and tooling.
     */
    private final Documentation documentation;

    private final First first;

    private final Second second;

    /**
     * Endpoints for testing the pagination extension
     */
    private final Pagination pagination;

    /**
     * Endpoints for testing retries.
     */
    private final Retries retries;

    /**
     * Endpoints for purely testing valid generation behavior.
     */
    public Generation generation() {
        return generation;
    }

    /**
     * Endpoints for testing error responses.
     */
    public Errors errors() {
        return errors;
    }

    /**
     * Endpoints for testing union types.
     */
    public Unions unions() {
        return unions;
    }

    /**
     * Endpoints for testing flattening through request body and parameter combinations.
     */
    public Flattening flattening() {
        return flattening;
    }

    /**
     * Endpoints for testing global parameters.
     */
    public Globals globals() {
        return globals;
    }

    /**
     * Endpoints for testing parameters.
     */
    public Parameters parameters() {
        return parameters;
    }

    /**
     * Endpoints for testing hooks
     */
    public Hooks hooks() {
        return hooks;
    }

    public Nest nest() {
        return nest;
    }

    public Nested nested() {
        return nested;
    }

    /**
     * Endpoints for testing authentication.
     */
    public Auth auth() {
        return auth;
    }

    /**
     * Endpoints for testing request bodies.
     */
    public RequestBodies requestBodies() {
        return requestBodies;
    }

    /**
     * Endpoints for testing response bodies.
     */
    public ResponseBodies responseBodies() {
        return responseBodies;
    }

    /**
     * Endpoints for testing servers.
     */
    public Servers servers() {
        return servers;
    }

    /**
     * Endpoints for testing telemetry.
     */
    public Telemetry telemetry() {
        return telemetry;
    }

    /**
     * Endpoints for testing authentication.
     */
    public AuthNew authNew() {
        return authNew;
    }

    public Resource resource() {
        return resource;
    }

    /**
     * Testing for documentation extensions and tooling.
     */
    public Documentation documentation() {
        return documentation;
    }

    public First first() {
        return first;
    }

    public Second second() {
        return second;
    }

    /**
     * Endpoints for testing the pagination extension
     */
    public Pagination pagination() {
        return pagination;
    }

    /**
     * Endpoints for testing retries.
     */
    public Retries retries() {
        return retries;
    }

    private final SDKConfiguration sdkConfiguration;

    /**
     * The Builder class allows the configuration of a new instance of the SDK.
     */
    public static class Builder {

        private final SDKConfiguration sdkConfiguration = new SDKConfiguration();

        private Builder() {
        }

        /**
         * Allows the default HTTP client to be overridden with a custom implementation.
         *
         * @param client The HTTP client to use for all requests.
         * @return The builder instance.
         */
        public Builder client(HTTPClient client) {
            this.sdkConfiguration.defaultClient = client;
            return this;
        }
        
        /**
         * Configures the SDK to use the provided security details.
         *
         * @param security The security details to use for all requests.
         * @return The builder instance.
         */
        public Builder security(org.openapis.openapi.models.shared.Security security) {
            this.sdkConfiguration.securitySource = SecuritySource.of(security);
            return this;
        }

        /**
         * Configures the SDK to use a custom security source.
         * @param securitySource The security source to use for all requests.
         * @return The builder instance.
         */
        public Builder securitySource(SecuritySource securitySource) {
            this.sdkConfiguration.securitySource = securitySource;
            return this;
        }
        
        /**
         * Overrides the default server URL.
         *
         * @param serverUrl The server URL to use for all requests.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl) {
            this.sdkConfiguration.serverUrl = serverUrl;
            return this;
        }

        /**
         * Overrides the default server URL  with a templated URL populated with the provided parameters.
         *
         * @param serverUrl The server URL to use for all requests.
         * @param params The parameters to use when templating the URL.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl, java.util.Map<String, String> params) {
            this.sdkConfiguration.serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
            return this;
        }
        
        /**
         * Overrides the default server by index.
         *
         * @param serverIdx The server to use for all requests.
         * @return The builder instance.
         */
        public Builder serverIndex(int serverIdx) {
            this.sdkConfiguration.serverIdx = serverIdx;
            this.sdkConfiguration.serverUrl = SERVERS[serverIdx];
            return this;
        }
        
        /**
         * Overrides the default configuration for retries
         *
         * @param retryConfig The retry configuration to use for all requests.
         * @return The builder instance.
         */
        public Builder retryConfig(RetryConfig retryConfig) {
            this.sdkConfiguration.retryConfig = Optional.of(retryConfig);
            return this;
        }
        /**
         * Sets the hostname variable for url substitution.
         *
         * @param hostname The value to set.
         * @return The builder instance.
         */
        public Builder hostname(String hostname) {
            for (java.util.Map<String, String> server : this.sdkConfiguration.serverDefaults) {
                if (!server.containsKey("hostname")) {
                    continue;
                }
                server.put("hostname", hostname.toString());
            }

            return this;
        }
        
        /**
         * Sets the port variable for url substitution.
         *
         * @param port The value to set.
         * @return The builder instance.
         */
        public Builder port(String port) {
            for (java.util.Map<String, String> server : this.sdkConfiguration.serverDefaults) {
                if (!server.containsKey("port")) {
                    continue;
                }
                server.put("port", port.toString());
            }

            return this;
        }
        
        /**
         * ServerSomething - Something is a variable for changing the root path
         */
        public enum ServerSomething {
            SOMETHING("something"),
            SOMETHING_ELSE("somethingElse"),
            SOMETHING_ELSE_AGAIN("somethingElseAgain");

            @JsonValue
            private final String value;

            private ServerSomething(String value) {
                this.value = value;
            }

            public String value() {
                return value;
            }
        }

        /**
         * Sets the something variable for url substitution.
         *
         * @param something The value to set.
         * @return The builder instance.
         */
        public Builder something(ServerSomething something) {
            for (java.util.Map<String, String> server : this.sdkConfiguration.serverDefaults) {
                if (!server.containsKey("something")) {
                    continue;
                }
                server.put("something", something.toString());
            }

            return this;
        }
        
        /**
         * Sets the protocol variable for url substitution.
         *
         * @param protocol The value to set.
         * @return The builder instance.
         */
        public Builder protocol(String protocol) {
            for (java.util.Map<String, String> server : this.sdkConfiguration.serverDefaults) {
                if (!server.containsKey("protocol")) {
                    continue;
                }
                server.put("protocol", protocol.toString());
            }

            return this;
        }
        
        /**
         * Allows setting the globalPathParam parameter for all supported operations.
         *
         * @param globalPathParam The value to set.
         * @return The builder instance.
         */
        public Builder globalPathParam(long globalPathParam) {
            if (!this.sdkConfiguration.globals.get("parameters").containsKey("pathParam")) {
                this.sdkConfiguration.globals.get("parameters").put("pathParam", new java.util.HashMap<>());
            }

            this.sdkConfiguration.globals.get("parameters").get("pathParam").put("globalPathParam", globalPathParam);

            return this;
        }
        
        /**
         * Allows setting the globalQueryParam parameter for all supported operations.
         *
         * @param globalQueryParam The value to set.
         * @return The builder instance.
         */
        public Builder globalQueryParam(String globalQueryParam) {
            if (!this.sdkConfiguration.globals.get("parameters").containsKey("queryParam")) {
                this.sdkConfiguration.globals.get("parameters").put("queryParam", new java.util.HashMap<>());
            }

            this.sdkConfiguration.globals.get("parameters").get("queryParam").put("globalQueryParam", globalQueryParam);

            return this;
        }
        
        /**
         * Builds a new instance of the SDK.
         * @return The SDK instance.
         */
        public SDK build() {
            if (sdkConfiguration.defaultClient == null) {
                sdkConfiguration.defaultClient = new SpeakeasyHTTPClient();
            }
	    if (sdkConfiguration.securitySource == null) {
	    	sdkConfiguration.securitySource = SecuritySource.of(null);
	    }
            if (sdkConfiguration.serverUrl == null || sdkConfiguration.serverUrl.isBlank()) {
                sdkConfiguration.serverUrl = SERVERS[0];
                sdkConfiguration.serverIdx = 0;
            }
            if (sdkConfiguration.serverUrl.endsWith("/")) {
                sdkConfiguration.serverUrl = sdkConfiguration.serverUrl.substring(0, sdkConfiguration.serverUrl.length() - 1);
            }
            return new SDK(sdkConfiguration);
        }
    }

    /**
     * Get a new instance of the SDK builder to configure a new instance of the SDK.
     * @return The SDK builder instance.
     */
    public static Builder builder() {
        return new Builder();
    }

    private SDK(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.generation = new Generation(sdkConfiguration);
        this.errors = new Errors(sdkConfiguration);
        this.unions = new Unions(sdkConfiguration);
        this.flattening = new Flattening(sdkConfiguration);
        this.globals = new Globals(sdkConfiguration);
        this.parameters = new Parameters(sdkConfiguration);
        this.hooks = new Hooks(sdkConfiguration);
        this.nest = new Nest(sdkConfiguration);
        this.nested = new Nested(sdkConfiguration);
        this.auth = new Auth(sdkConfiguration);
        this.requestBodies = new RequestBodies(sdkConfiguration);
        this.responseBodies = new ResponseBodies(sdkConfiguration);
        this.servers = new Servers(sdkConfiguration);
        this.telemetry = new Telemetry(sdkConfiguration);
        this.authNew = new AuthNew(sdkConfiguration);
        this.resource = new Resource(sdkConfiguration);
        this.documentation = new Documentation(sdkConfiguration);
        this.first = new First(sdkConfiguration);
        this.second = new Second(sdkConfiguration);
        this.pagination = new Pagination(sdkConfiguration);
        this.retries = new Retries(sdkConfiguration);
    }
    public org.openapis.openapi.models.operations.ConflictingEnumRequestBuilder conflictingEnum() {
        return new org.openapis.openapi.models.operations.ConflictingEnumRequestBuilder(this);
    }

    /**
     * Test potential namespace conflicts with java.lang.Object
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public org.openapis.openapi.models.operations.ConflictingEnumResponse conflictingEnum(
            Optional<? extends org.openapis.openapi.models.shared.ConflictingEnum> request) throws Exception {

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/conflictingEnum/");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<Optional<? extends org.openapis.openapi.models.shared.ConflictingEnum>>() {});
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.ConflictingEnumResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.ConflictingEnumResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.ConflictingEnumResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }

    public org.openapis.openapi.models.operations.PutAnythingIgnoredGenerationRequestBuilder putAnythingIgnoredGeneration() {
        return new org.openapis.openapi.models.operations.PutAnythingIgnoredGenerationRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.PutAnythingIgnoredGenerationResponse putAnythingIgnoredGeneration(
            String request) throws Exception {

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/ignoredGeneration");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<String>() {});
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.PutAnythingIgnoredGenerationResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.PutAnythingIgnoredGenerationResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.PutAnythingIgnoredGenerationResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PutAnythingIgnoredGenerationResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.operations.PutAnythingIgnoredGenerationResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ResponseBodyJsonGetRequestBuilder responseBodyJsonGet() {
        return new org.openapis.openapi.models.operations.ResponseBodyJsonGetRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.ResponseBodyJsonGetResponse responseBodyJsonGetDirect() throws Exception {

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/json");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.ResponseBodyJsonGetResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.ResponseBodyJsonGetResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.ResponseBodyJsonGetResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.HttpBinSimpleJsonObject out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.shared.HttpBinSimpleJsonObject>() {});
                res.withHttpBinSimpleJsonObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }




































































































































































































































}
