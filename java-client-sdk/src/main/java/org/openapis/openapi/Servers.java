/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.util.Optional;
import java.util.function.Function;
import java.util.stream.Collectors;
import org.openapis.openapi.models.errors.SDKError;
import org.openapis.openapi.models.operations.SDKMethodInterfaces.*;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.Utils;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Endpoints for testing servers.
 */
public class Servers implements
            MethodCallSelectGlobalServer,
            MethodCallSelectServerWithID,
            MethodCallServerWithProtocolTemplate,
            MethodCallServerWithTemplates,
            MethodCallServerWithTemplatesGlobal,
            MethodCallServersByIDWithTemplates {
    /**
     * SelectServerWithIDServers contains identifiers for the servers available to the SDK.
     */
    public enum SelectServerWithIDServers {
        /**
         * VALID - The default server.
         */
VALID("valid"),
        /**
         * BROKEN - A server url to a non-existent server.
         */
BROKEN("broken");

        private final String server;

        private SelectServerWithIDServers(String server) {
            this.server = server;
        }

        public String server() {
            return server;
        }
    }

    /**
     * SELECT_SERVER_WITH_ID_SERVERS contains the list of server urls available to the SDK.
     */
    public static final java.util.Map<SelectServerWithIDServers, String> SELECT_SERVER_WITH_ID_SERVERS = new java.util.HashMap<SelectServerWithIDServers, String>() {{
        put(SelectServerWithIDServers.VALID, "http://localhost:35123");
        put(SelectServerWithIDServers.BROKEN, "http://broken");
    }};
    /**
     * ServerWithProtocolTemplateServers contains identifiers for the servers available to the SDK.
     */
    public enum ServerWithProtocolTemplateServers {
MAIN("main");

        private final String server;

        private ServerWithProtocolTemplateServers(String server) {
            this.server = server;
        }

        public String server() {
            return server;
        }
    }

    /**
     * SERVER_WITH_PROTOCOL_TEMPLATE_SERVERS contains the list of server urls available to the SDK.
     */
    public static final java.util.Map<ServerWithProtocolTemplateServers, String> SERVER_WITH_PROTOCOL_TEMPLATE_SERVERS = new java.util.HashMap<ServerWithProtocolTemplateServers, String>() {{
        put(ServerWithProtocolTemplateServers.MAIN, "{protocol}://{hostname}:{port}");
    }};
    
    /**
     * SERVER_WITH_TEMPLATES_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] SERVER_WITH_TEMPLATES_SERVERS = {
        "http://{hostname}:{port}",
    };
    /**
     * ServersByIDWithTemplatesServers contains identifiers for the servers available to the SDK.
     */
    public enum ServersByIDWithTemplatesServers {
MAIN("main");

        private final String server;

        private ServersByIDWithTemplatesServers(String server) {
            this.server = server;
        }

        public String server() {
            return server;
        }
    }

    /**
     * SERVERS_BY_ID_WITH_TEMPLATES_SERVERS contains the list of server urls available to the SDK.
     */
    public static final java.util.Map<ServersByIDWithTemplatesServers, String> SERVERS_BY_ID_WITH_TEMPLATES_SERVERS = new java.util.HashMap<ServersByIDWithTemplatesServers, String>() {{
        put(ServersByIDWithTemplatesServers.MAIN, "http://{hostname}:{port}");
    }};

    private final SDKConfiguration sdkConfiguration;

    Servers(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public org.openapis.openapi.models.operations.SelectGlobalServerRequestBuilder selectGlobalServer() {
        return new org.openapis.openapi.models.operations.SelectGlobalServerRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.SelectGlobalServerResponse selectGlobalServerDirect() throws Exception {

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/selectGlobalServer");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.SelectGlobalServerResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.SelectGlobalServerResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.SelectGlobalServerResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            res.withHeaders(httpRes
                    .headers()
                    .map()
                    .keySet()
                    .stream()
                    .collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k))));
        }

        return res;
    }


    public org.openapis.openapi.models.operations.SelectServerWithIDRequestBuilder selectServerWithID() {
        return new org.openapis.openapi.models.operations.SelectServerWithIDRequestBuilder(this);
    }

    /**
     * Select a server by ID.
     * @param serverURL Overrides the server URL.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public org.openapis.openapi.models.operations.SelectServerWithIDResponse selectServerWithID(
            java.util.Optional<String> serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(SELECT_SERVER_WITH_ID_SERVERS.get(SelectServerWithIDServers.VALID), new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/selectServerWithID");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.SelectServerWithIDResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.SelectServerWithIDResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.SelectServerWithIDResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }


    public org.openapis.openapi.models.operations.ServerWithProtocolTemplateRequestBuilder serverWithProtocolTemplate() {
        return new org.openapis.openapi.models.operations.ServerWithProtocolTemplateRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.ServerWithProtocolTemplateResponse serverWithProtocolTemplate(
            java.util.Optional<String> serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(SERVER_WITH_PROTOCOL_TEMPLATE_SERVERS.get(ServerWithProtocolTemplateServers.MAIN), new java.util.HashMap<String, String>(){{
            put("hostname", "localhost");
            put("port", "35123");
            put("protocol", "http");
        }});
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/serverWithProtocolTemplate");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.ServerWithProtocolTemplateResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.ServerWithProtocolTemplateResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.ServerWithProtocolTemplateResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }


    public org.openapis.openapi.models.operations.ServerWithTemplatesRequestBuilder serverWithTemplates() {
        return new org.openapis.openapi.models.operations.ServerWithTemplatesRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.ServerWithTemplatesResponse serverWithTemplates(
            java.util.Optional<String> serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(SERVER_WITH_TEMPLATES_SERVERS[0], new java.util.HashMap<String, String>(){{
            put("hostname", "localhost");
            put("port", "35123");
        }});
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/serverWithTemplates");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.ServerWithTemplatesResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.ServerWithTemplatesResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.ServerWithTemplatesResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }


    public org.openapis.openapi.models.operations.ServerWithTemplatesGlobalRequestBuilder serverWithTemplatesGlobal() {
        return new org.openapis.openapi.models.operations.ServerWithTemplatesGlobalRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.ServerWithTemplatesGlobalResponse serverWithTemplatesGlobalDirect() throws Exception {

        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/serverWithTemplatesGlobal");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.ServerWithTemplatesGlobalResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.ServerWithTemplatesGlobalResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.ServerWithTemplatesGlobalResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }


    public org.openapis.openapi.models.operations.ServersByIDWithTemplatesRequestBuilder serversByIDWithTemplates() {
        return new org.openapis.openapi.models.operations.ServersByIDWithTemplatesRequestBuilder(this);
    }

    public org.openapis.openapi.models.operations.ServersByIDWithTemplatesResponse serversByIDWithTemplates(
            java.util.Optional<String> serverURL) throws Exception {
        String baseUrl = org.openapis.openapi.utils.Utils.templateUrl(SERVERS_BY_ID_WITH_TEMPLATES_SERVERS.get(ServersByIDWithTemplatesServers.MAIN), new java.util.HashMap<String, String>(){{
            put("hostname", "localhost");
            put("port", "35123");
        }});
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = org.openapis.openapi.utils.Utils.generateURL(
                baseUrl,
                "/anything/serversByIDWithTemplates");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("x-speakeasy-user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        org.openapis.openapi.models.operations.ServersByIDWithTemplatesResponse.Builder resBuilder = 
            org.openapis.openapi.models.operations.ServersByIDWithTemplatesResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        org.openapis.openapi.models.operations.ServersByIDWithTemplatesResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        

        return res;
    }

}
