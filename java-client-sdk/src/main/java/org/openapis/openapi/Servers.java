/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi;

import java.io.InputStream;
import java.lang.Exception;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.HashMap;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.models.errors.SDKError;
import org.openapis.openapi.models.operations.SDKMethodInterfaces.*;
import org.openapis.openapi.models.operations.SelectGlobalServerRequestBuilder;
import org.openapis.openapi.models.operations.SelectGlobalServerResponse;
import org.openapis.openapi.models.operations.SelectServerWithIDRequestBuilder;
import org.openapis.openapi.models.operations.SelectServerWithIDResponse;
import org.openapis.openapi.models.operations.ServerWithProtocolTemplateRequestBuilder;
import org.openapis.openapi.models.operations.ServerWithProtocolTemplateResponse;
import org.openapis.openapi.models.operations.ServerWithTemplatesGlobalRequestBuilder;
import org.openapis.openapi.models.operations.ServerWithTemplatesGlobalResponse;
import org.openapis.openapi.models.operations.ServerWithTemplatesRequestBuilder;
import org.openapis.openapi.models.operations.ServerWithTemplatesResponse;
import org.openapis.openapi.models.operations.ServersByIDWithTemplatesRequestBuilder;
import org.openapis.openapi.models.operations.ServersByIDWithTemplatesResponse;
import org.openapis.openapi.models.operations.ServersOverrideGlobalServerURLRequestBuilder;
import org.openapis.openapi.models.operations.ServersOverrideGlobalServerURLResponse;
import org.openapis.openapi.models.operations.ServersOverrideOperationServerURLRequestBuilder;
import org.openapis.openapi.models.operations.ServersOverrideOperationServerURLResponse;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.Hook.AfterErrorContextImpl;
import org.openapis.openapi.utils.Hook.AfterSuccessContextImpl;
import org.openapis.openapi.utils.Hook.BeforeRequestContextImpl;
import org.openapis.openapi.utils.Utils; 

/**
 * Endpoints for testing servers.
 */
public class Servers implements
            MethodCallSelectGlobalServer,
            MethodCallSelectServerWithID,
            MethodCallServerWithProtocolTemplate,
            MethodCallServerWithTemplates,
            MethodCallServerWithTemplatesGlobal,
            MethodCallServersByIDWithTemplates,
            MethodCallServersOverrideGlobalServerURL,
            MethodCallServersOverrideOperationServerURL {
    /**
     * SelectServerWithIDServers contains identifiers for the servers available to the SDK.
     */
    public enum SelectServerWithIDServers {
        /**
         * VALID - The default server.
         */
        VALID("valid"),
        /**
         * BROKEN - A server url to a non-existent server.
         */
        BROKEN("broken");

        private final String server;

        private SelectServerWithIDServers(String server) {
            this.server = server;
        }

        public String server() {
            return server;
        }
    }

    /**
     * SELECT_SERVER_WITH_ID_SERVERS contains the list of server urls available to the SDK.
     */
    public static final java.util.Map<SelectServerWithIDServers, String> SELECT_SERVER_WITH_ID_SERVERS = new java.util.HashMap<SelectServerWithIDServers, String>() { {
        put(SelectServerWithIDServers.VALID, "http://localhost:35123");
        put(SelectServerWithIDServers.BROKEN, "http://broken");
    } };
    /**
     * ServerWithProtocolTemplateServers contains identifiers for the servers available to the SDK.
     */
    public enum ServerWithProtocolTemplateServers {
        MAIN("main");

        private final String server;

        private ServerWithProtocolTemplateServers(String server) {
            this.server = server;
        }

        public String server() {
            return server;
        }
    }

    /**
     * SERVER_WITH_PROTOCOL_TEMPLATE_SERVERS contains the list of server urls available to the SDK.
     */
    public static final java.util.Map<ServerWithProtocolTemplateServers, String> SERVER_WITH_PROTOCOL_TEMPLATE_SERVERS = new java.util.HashMap<ServerWithProtocolTemplateServers, String>() { {
        put(ServerWithProtocolTemplateServers.MAIN, "{protocol}://{hostname}:{port}");
    } };
    
    /**
     * SERVER_WITH_TEMPLATES_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] SERVER_WITH_TEMPLATES_SERVERS = {
        "http://{hostname}:{port}",
    };
    /**
     * ServersByIDWithTemplatesServers contains identifiers for the servers available to the SDK.
     */
    public enum ServersByIDWithTemplatesServers {
        MAIN("main");

        private final String server;

        private ServersByIDWithTemplatesServers(String server) {
            this.server = server;
        }

        public String server() {
            return server;
        }
    }

    /**
     * SERVERS_BY_ID_WITH_TEMPLATES_SERVERS contains the list of server urls available to the SDK.
     */
    public static final java.util.Map<ServersByIDWithTemplatesServers, String> SERVERS_BY_ID_WITH_TEMPLATES_SERVERS = new java.util.HashMap<ServersByIDWithTemplatesServers, String>() { {
        put(ServersByIDWithTemplatesServers.MAIN, "http://{hostname}:{port}");
    } };
    /**
     * ServersOverrideOperationServerURLServers contains identifiers for the servers available to the SDK.
     */
    public enum ServersOverrideOperationServerURLServers {
        MAIN("main");

        private final String server;

        private ServersOverrideOperationServerURLServers(String server) {
            this.server = server;
        }

        public String server() {
            return server;
        }
    }

    /**
     * SERVERS_OVERRIDE_OPERATION_SERVER_URL_SERVERS contains the list of server urls available to the SDK.
     */
    public static final java.util.Map<ServersOverrideOperationServerURLServers, String> SERVERS_OVERRIDE_OPERATION_SERVER_URL_SERVERS = new java.util.HashMap<ServersOverrideOperationServerURLServers, String>() { {
        put(ServersOverrideOperationServerURLServers.MAIN, "{protocol}://{hostname}:{port}/{base_path}");
    } };

    private final SDKConfiguration sdkConfiguration;

    Servers(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    public SelectGlobalServerRequestBuilder selectGlobalServer() {
        return new SelectGlobalServerRequestBuilder(this);
    }

    public SelectGlobalServerResponse selectGlobalServerDirect() throws Exception {
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/anything/selectGlobalServer");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                SDKConfiguration.USER_AGENT);
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "selectGlobalServer", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "selectGlobalServer",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "selectGlobalServer",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "selectGlobalServer",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        SelectGlobalServerResponse.Builder _resBuilder = 
            SelectGlobalServerResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        SelectGlobalServerResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            _res.withHeaders(_httpRes.headers().map());
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Select a server by ID.
     * @return The call builder
     */
    public SelectServerWithIDRequestBuilder selectServerWithID() {
        return new SelectServerWithIDRequestBuilder(this);
    }

    /**
     * Select a server by ID.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public SelectServerWithIDResponse selectServerWithIDDirect() throws Exception {
        return selectServerWithID(Optional.empty());
    }
    
    /**
     * Select a server by ID.
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public SelectServerWithIDResponse selectServerWithID(
            Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(SELECT_SERVER_WITH_ID_SERVERS.get(SelectServerWithIDServers.VALID), new HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/anything/selectServerWithID");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                SDKConfiguration.USER_AGENT);
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "selectServerWithID", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "selectServerWithID",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "selectServerWithID",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "selectServerWithID",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        SelectServerWithIDResponse.Builder _resBuilder = 
            SelectServerWithIDResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        SelectServerWithIDResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    public ServerWithProtocolTemplateRequestBuilder serverWithProtocolTemplate() {
        return new ServerWithProtocolTemplateRequestBuilder(this);
    }

    public ServerWithProtocolTemplateResponse serverWithProtocolTemplateDirect() throws Exception {
        return serverWithProtocolTemplate(Optional.empty());
    }
    
    public ServerWithProtocolTemplateResponse serverWithProtocolTemplate(
            Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(SERVER_WITH_PROTOCOL_TEMPLATE_SERVERS.get(ServerWithProtocolTemplateServers.MAIN), new HashMap<String, String>(){ {
            put("hostname", "localhost");
            put("port", "35123");
            put("protocol", "http");
        } });
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/anything/serverWithProtocolTemplate");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                SDKConfiguration.USER_AGENT);
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "serverWithProtocolTemplate", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "serverWithProtocolTemplate",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "serverWithProtocolTemplate",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "serverWithProtocolTemplate",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        ServerWithProtocolTemplateResponse.Builder _resBuilder = 
            ServerWithProtocolTemplateResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        ServerWithProtocolTemplateResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    public ServerWithTemplatesRequestBuilder serverWithTemplates() {
        return new ServerWithTemplatesRequestBuilder(this);
    }

    public ServerWithTemplatesResponse serverWithTemplatesDirect() throws Exception {
        return serverWithTemplates(Optional.empty());
    }
    
    public ServerWithTemplatesResponse serverWithTemplates(
            Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(SERVER_WITH_TEMPLATES_SERVERS[0], new HashMap<String, String>(){ {
            put("hostname", "localhost");
            put("port", "35123");
        } });
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/anything/serverWithTemplates");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                SDKConfiguration.USER_AGENT);
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "serverWithTemplates", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "serverWithTemplates",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "serverWithTemplates",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "serverWithTemplates",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        ServerWithTemplatesResponse.Builder _resBuilder = 
            ServerWithTemplatesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        ServerWithTemplatesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    public ServerWithTemplatesGlobalRequestBuilder serverWithTemplatesGlobal() {
        return new ServerWithTemplatesGlobalRequestBuilder(this);
    }

    public ServerWithTemplatesGlobalResponse serverWithTemplatesGlobalDirect() throws Exception {
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/anything/serverWithTemplatesGlobal");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                SDKConfiguration.USER_AGENT);
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "serverWithTemplatesGlobal", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "serverWithTemplatesGlobal",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "serverWithTemplatesGlobal",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "serverWithTemplatesGlobal",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        ServerWithTemplatesGlobalResponse.Builder _resBuilder = 
            ServerWithTemplatesGlobalResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        ServerWithTemplatesGlobalResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    public ServersByIDWithTemplatesRequestBuilder serversByIDWithTemplates() {
        return new ServersByIDWithTemplatesRequestBuilder(this);
    }

    public ServersByIDWithTemplatesResponse serversByIDWithTemplatesDirect() throws Exception {
        return serversByIDWithTemplates(Optional.empty());
    }
    
    public ServersByIDWithTemplatesResponse serversByIDWithTemplates(
            Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(SERVERS_BY_ID_WITH_TEMPLATES_SERVERS.get(ServersByIDWithTemplatesServers.MAIN), new HashMap<String, String>(){ {
            put("hostname", "localhost");
            put("port", "35123");
        } });
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/anything/serversByIDWithTemplates");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                SDKConfiguration.USER_AGENT);
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "serversByIDWithTemplates", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "serversByIDWithTemplates",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "serversByIDWithTemplates",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "serversByIDWithTemplates",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        ServersByIDWithTemplatesResponse.Builder _resBuilder = 
            ServersByIDWithTemplatesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        ServersByIDWithTemplatesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    public ServersOverrideGlobalServerURLRequestBuilder serversOverrideGlobalServerURL() {
        return new ServersOverrideGlobalServerURLRequestBuilder(this);
    }

    public ServersOverrideGlobalServerURLResponse serversOverrideGlobalServerURLDirect() throws Exception {
        String _baseUrl = Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());
        String _url = Utils.generateURL(
                _baseUrl,
                "/ping#serversOverrideGlobalServerURL");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                SDKConfiguration.USER_AGENT);
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "serversOverrideGlobalServerURL", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "serversOverrideGlobalServerURL",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "serversOverrideGlobalServerURL",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "serversOverrideGlobalServerURL",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        ServersOverrideGlobalServerURLResponse.Builder _resBuilder = 
            ServersOverrideGlobalServerURLResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        ServersOverrideGlobalServerURLResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    public ServersOverrideOperationServerURLRequestBuilder serversOverrideOperationServerURL() {
        return new ServersOverrideOperationServerURLRequestBuilder(this);
    }

    public ServersOverrideOperationServerURLResponse serversOverrideOperationServerURLDirect() throws Exception {
        return serversOverrideOperationServerURL(Optional.empty());
    }
    
    public ServersOverrideOperationServerURLResponse serversOverrideOperationServerURL(
            Optional<String> serverURL) throws Exception {
        String _baseUrl = Utils.templateUrl(SERVERS_OVERRIDE_OPERATION_SERVER_URL_SERVERS.get(ServersOverrideOperationServerURLServers.MAIN), new HashMap<String, String>(){ {
            put("base_path", "/status/404");
            put("hostname", "localhost");
            put("port", "35123");
            put("protocol", "https");
        } });
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/ping#serversOverrideOperationServerURL");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "*/*")
            .addHeader("x-speakeasy-user-agent", 
                SDKConfiguration.USER_AGENT);
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "serversOverrideOperationServerURL", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "serversOverrideOperationServerURL",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "serversOverrideOperationServerURL",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "serversOverrideOperationServerURL",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        ServersOverrideOperationServerURLResponse.Builder _resBuilder = 
            ServersOverrideOperationServerURLResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        ServersOverrideOperationServerURLResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
