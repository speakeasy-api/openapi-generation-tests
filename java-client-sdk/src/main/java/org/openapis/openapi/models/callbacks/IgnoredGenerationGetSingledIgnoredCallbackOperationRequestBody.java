/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.callbacks;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class IgnoredGenerationGetSingledIgnoredCallbackOperationRequestBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("someProp")
    private Optional<String> someProp;

    @JsonCreator
    public IgnoredGenerationGetSingledIgnoredCallbackOperationRequestBody(
            @JsonProperty("someProp") Optional<String> someProp) {
        Utils.checkNotNull(someProp, "someProp");
        this.someProp = someProp;
    }
    
    public IgnoredGenerationGetSingledIgnoredCallbackOperationRequestBody() {
        this(Optional.empty());
    }

    @JsonIgnore
    public Optional<String> someProp() {
        return someProp;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public IgnoredGenerationGetSingledIgnoredCallbackOperationRequestBody withSomeProp(String someProp) {
        Utils.checkNotNull(someProp, "someProp");
        this.someProp = Optional.ofNullable(someProp);
        return this;
    }

    public IgnoredGenerationGetSingledIgnoredCallbackOperationRequestBody withSomeProp(Optional<String> someProp) {
        Utils.checkNotNull(someProp, "someProp");
        this.someProp = someProp;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IgnoredGenerationGetSingledIgnoredCallbackOperationRequestBody other = (IgnoredGenerationGetSingledIgnoredCallbackOperationRequestBody) o;
        return 
            Objects.deepEquals(this.someProp, other.someProp);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            someProp);
    }
    
    @Override
    public String toString() {
        return Utils.toString(IgnoredGenerationGetSingledIgnoredCallbackOperationRequestBody.class,
                "someProp", someProp);
    }
    
    public final static class Builder {
 
        private Optional<String> someProp = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder someProp(String someProp) {
            Utils.checkNotNull(someProp, "someProp");
            this.someProp = Optional.ofNullable(someProp);
            return this;
        }

        public Builder someProp(Optional<String> someProp) {
            Utils.checkNotNull(someProp, "someProp");
            this.someProp = someProp;
            return this;
        }
        
        public IgnoredGenerationGetSingledIgnoredCallbackOperationRequestBody build() {
            return new IgnoredGenerationGetSingledIgnoredCallbackOperationRequestBody(
                someProp);
        }
    }
}

