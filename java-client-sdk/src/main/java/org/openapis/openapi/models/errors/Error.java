/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.errors;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

public class Error extends RuntimeException {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private Optional<? extends String> code;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    private Optional<? extends String> message;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends org.openapis.openapi.models.shared.ErrorType> type;

    public Error(
            @JsonProperty("code") Optional<? extends String> code,
            @JsonProperty("message") Optional<? extends String> message,
            @JsonProperty("type") Optional<? extends org.openapis.openapi.models.shared.ErrorType> type) {
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(message, "message");
        Utils.checkNotNull(type, "type");
        this.code = code;
        this.message = message;
        this.type = type;
    }

    public Optional<? extends String> code(){
        return code;
    }

    public Optional<? extends String> message(){
        return message;
    }

    public Optional<? extends org.openapis.openapi.models.shared.ErrorType> type(){
        return type;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    public Error withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = Optional.ofNullable(code);
        return this;
    }
    
    public Error withCode(Optional<? extends String> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    public Error withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = Optional.ofNullable(message);
        return this;
    }
    
    public Error withMessage(Optional<? extends String> message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }

    public Error withType(org.openapis.openapi.models.shared.ErrorType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }
    
    public Error withType(Optional<? extends org.openapis.openapi.models.shared.ErrorType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Error other = (Error) o;
        return
            java.util.Objects.deepEquals(this.code, other.code) &&
            java.util.Objects.deepEquals(this.message, other.message) &&
            java.util.Objects.deepEquals(this.type, other.type);
    }

    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            code,
            message,
            type);
    }

    @Override
    public String toString() {
        return Utils.toString(Error.class,
                "code", code,
                "message", message,
                "type", type);
    }

    public final static class Builder {

        private Optional<? extends String> code = Optional.empty();

        private Optional<? extends String> message = Optional.empty();

        private Optional<? extends org.openapis.openapi.models.shared.ErrorType> type = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }

        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = Optional.ofNullable(code);
            return this;
        }
        
        public Builder code(Optional<? extends String> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = Optional.ofNullable(message);
            return this;
        }
        
        public Builder message(Optional<? extends String> message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }

        public Builder type(org.openapis.openapi.models.shared.ErrorType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }
        
        public Builder type(Optional<? extends org.openapis.openapi.models.shared.ErrorType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Error build() {
            return new Error(
                code,
                message,
                type);
        }
    }
}
