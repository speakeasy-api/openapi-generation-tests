/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.io.InputStream;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.net.http.HttpResponse;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.models.shared.ErrorType;
import org.openapis.openapi.utils.Utils;

/**
 * StatusGetXSpeakeasyErrorsResponseBody - Not Implemented
 */
public class StatusGetXSpeakeasyErrorsResponseBody extends RuntimeException {

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("-")
    private Optional<? extends HttpResponse<InputStream>> rawResponse;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private Optional<String> code;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    private Optional<String> message;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends ErrorType> type;

    @JsonCreator
    public StatusGetXSpeakeasyErrorsResponseBody(
            @JsonProperty("RawResponse") Optional<? extends HttpResponse<InputStream>> rawResponse,
            @JsonProperty("code") Optional<String> code,
            @JsonProperty("message") Optional<String> message,
            @JsonProperty("type") Optional<? extends ErrorType> type) {
        Utils.checkNotNull(rawResponse, "rawResponse");
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(message, "message");
        Utils.checkNotNull(type, "type");
        this.rawResponse = rawResponse;
        this.code = code;
        this.message = message;
        this.type = type;
    }
    
    public StatusGetXSpeakeasyErrorsResponseBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SuppressWarnings("unchecked")
    public Optional<HttpResponse<InputStream>> rawResponse(){
        return (Optional<HttpResponse<InputStream>>) rawResponse;
    }

    public Optional<String> code(){
        return code;
    }

    public Optional<String> message(){
        return message;
    }

    @SuppressWarnings("unchecked")
    public Optional<ErrorType> type(){
        return (Optional<ErrorType>) type;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    public StatusGetXSpeakeasyErrorsResponseBody withRawResponse(HttpResponse<InputStream> rawResponse) {
        Utils.checkNotNull(rawResponse, "rawResponse");
        this.rawResponse = Optional.ofNullable(rawResponse);
        return this;
    }
    
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    public StatusGetXSpeakeasyErrorsResponseBody withRawResponse(Optional<? extends HttpResponse<InputStream>> rawResponse) {
        Utils.checkNotNull(rawResponse, "rawResponse");
        this.rawResponse = rawResponse;
        return this;
    }

    public StatusGetXSpeakeasyErrorsResponseBody withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = Optional.ofNullable(code);
        return this;
    }
    
    public StatusGetXSpeakeasyErrorsResponseBody withCode(Optional<String> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    public StatusGetXSpeakeasyErrorsResponseBody withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = Optional.ofNullable(message);
        return this;
    }
    
    public StatusGetXSpeakeasyErrorsResponseBody withMessage(Optional<String> message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }

    public StatusGetXSpeakeasyErrorsResponseBody withType(ErrorType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }
    
    public StatusGetXSpeakeasyErrorsResponseBody withType(Optional<? extends ErrorType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StatusGetXSpeakeasyErrorsResponseBody other = (StatusGetXSpeakeasyErrorsResponseBody) o;
        return
            Objects.deepEquals(this.rawResponse, other.rawResponse) &&
            Objects.deepEquals(this.code, other.code) &&
            Objects.deepEquals(this.message, other.message) &&
            Objects.deepEquals(this.type, other.type);
    }

    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            rawResponse,
            code,
            message,
            type);
    }

    @Override
    public String toString() {
        return Utils.toString(StatusGetXSpeakeasyErrorsResponseBody.class,
                "rawResponse", rawResponse,
                "code", code,
                "message", message,
                "type", type);
    }

    public final static class Builder {

        private Optional<? extends HttpResponse<InputStream>> rawResponse;

        private Optional<String> code = Optional.empty();

        private Optional<String> message = Optional.empty();

        private Optional<? extends ErrorType> type = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Raw HTTP response; suitable for custom response parsing
         */
        public Builder rawResponse(HttpResponse<InputStream> rawResponse) {
            Utils.checkNotNull(rawResponse, "rawResponse");
            this.rawResponse = Optional.ofNullable(rawResponse);
            return this;
        }
        
        /**
         * Raw HTTP response; suitable for custom response parsing
         */
        public Builder rawResponse(Optional<? extends HttpResponse<InputStream>> rawResponse) {
            Utils.checkNotNull(rawResponse, "rawResponse");
            this.rawResponse = rawResponse;
            return this;
        }

        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = Optional.ofNullable(code);
            return this;
        }
        
        public Builder code(Optional<String> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = Optional.ofNullable(message);
            return this;
        }
        
        public Builder message(Optional<String> message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }

        public Builder type(ErrorType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }
        
        public Builder type(Optional<? extends ErrorType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public StatusGetXSpeakeasyErrorsResponseBody build() {
            return new StatusGetXSpeakeasyErrorsResponseBody(
                rawResponse,
                code,
                message,
                type);
        }
    }
}
