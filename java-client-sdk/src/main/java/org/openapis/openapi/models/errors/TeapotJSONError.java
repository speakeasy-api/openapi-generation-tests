/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

public class TeapotJSONError extends RuntimeException {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    private Optional<String> message;

    @JsonCreator
    public TeapotJSONError(
            @JsonProperty("message") Optional<String> message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
    }
    
    public TeapotJSONError() {
        this(Optional.empty());
    }

    public Optional<String> message(){
        return message;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    public TeapotJSONError withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = Optional.ofNullable(message);
        return this;
    }
    
    public TeapotJSONError withMessage(Optional<String> message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TeapotJSONError other = (TeapotJSONError) o;
        return
            Objects.deepEquals(this.message, other.message);
    }

    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            message);
    }

    @Override
    public String toString() {
        return Utils.toString(TeapotJSONError.class,
                "message", message);
    }

    public final static class Builder {

        private Optional<String> message = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }

        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = Optional.ofNullable(message);
            return this;
        }
        
        public Builder message(Optional<String> message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }

        public TeapotJSONError build() {
            return new TeapotJSONError(
                message);
        }
    }
}
