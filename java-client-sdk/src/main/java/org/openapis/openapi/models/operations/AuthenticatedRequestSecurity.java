/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;

public class AuthenticatedRequestSecurity {

    @SpeakeasyMetadata("security:scheme=true,type=oauth2,name=Authorization")
    private String clientCredentials;

    @JsonCreator
    public AuthenticatedRequestSecurity(
            String clientCredentials) {
        Utils.checkNotNull(clientCredentials, "clientCredentials");
        this.clientCredentials = clientCredentials;
    }

    @JsonIgnore
    public String clientCredentials() {
        return clientCredentials;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public AuthenticatedRequestSecurity withClientCredentials(String clientCredentials) {
        Utils.checkNotNull(clientCredentials, "clientCredentials");
        this.clientCredentials = clientCredentials;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthenticatedRequestSecurity other = (AuthenticatedRequestSecurity) o;
        return 
            java.util.Objects.deepEquals(this.clientCredentials, other.clientCredentials);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            clientCredentials);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuthenticatedRequestSecurity.class,
                "clientCredentials", clientCredentials);
    }
    
    public final static class Builder {
 
        private String clientCredentials;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder clientCredentials(String clientCredentials) {
            Utils.checkNotNull(clientCredentials, "clientCredentials");
            this.clientCredentials = clientCredentials;
            return this;
        }
        
        public AuthenticatedRequestSecurity build() {
            return new AuthenticatedRequestSecurity(
                clientCredentials);
        }
    }
}

