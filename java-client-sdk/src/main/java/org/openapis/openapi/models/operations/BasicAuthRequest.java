/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class BasicAuthRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=passwd")
    private String passwd;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=user")
    private String user;

    @JsonCreator
    public BasicAuthRequest(
            String passwd,
            String user) {
        Utils.checkNotNull(passwd, "passwd");
        Utils.checkNotNull(user, "user");
        this.passwd = passwd;
        this.user = user;
    }

    @JsonIgnore
    public String passwd() {
        return passwd;
    }

    @JsonIgnore
    public String user() {
        return user;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public BasicAuthRequest withPasswd(String passwd) {
        Utils.checkNotNull(passwd, "passwd");
        this.passwd = passwd;
        return this;
    }

    public BasicAuthRequest withUser(String user) {
        Utils.checkNotNull(user, "user");
        this.user = user;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BasicAuthRequest other = (BasicAuthRequest) o;
        return 
            Objects.deepEquals(this.passwd, other.passwd) &&
            Objects.deepEquals(this.user, other.user);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            passwd,
            user);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BasicAuthRequest.class,
                "passwd", passwd,
                "user", user);
    }
    
    public final static class Builder {
 
        private String passwd;
 
        private String user;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder passwd(String passwd) {
            Utils.checkNotNull(passwd, "passwd");
            this.passwd = passwd;
            return this;
        }

        public Builder user(String user) {
            Utils.checkNotNull(user, "user");
            this.user = user;
            return this;
        }
        
        public BasicAuthRequest build() {
            return new BasicAuthRequest(
                passwd,
                user);
        }
    }
}

