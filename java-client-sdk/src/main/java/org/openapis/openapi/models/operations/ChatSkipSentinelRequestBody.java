/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class ChatSkipSentinelRequestBody {

    @JsonProperty("prompt")
    private String prompt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stream")
    private Optional<Boolean> stream;

    @JsonCreator
    public ChatSkipSentinelRequestBody(
            @JsonProperty("prompt") String prompt,
            @JsonProperty("stream") Optional<Boolean> stream) {
        Utils.checkNotNull(prompt, "prompt");
        Utils.checkNotNull(stream, "stream");
        this.prompt = prompt;
        this.stream = stream;
    }
    
    public ChatSkipSentinelRequestBody(
            String prompt) {
        this(prompt, Optional.empty());
    }

    @JsonIgnore
    public String prompt() {
        return prompt;
    }

    @JsonIgnore
    public Optional<Boolean> stream() {
        return stream;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ChatSkipSentinelRequestBody withPrompt(String prompt) {
        Utils.checkNotNull(prompt, "prompt");
        this.prompt = prompt;
        return this;
    }

    public ChatSkipSentinelRequestBody withStream(boolean stream) {
        Utils.checkNotNull(stream, "stream");
        this.stream = Optional.ofNullable(stream);
        return this;
    }

    public ChatSkipSentinelRequestBody withStream(Optional<Boolean> stream) {
        Utils.checkNotNull(stream, "stream");
        this.stream = stream;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ChatSkipSentinelRequestBody other = (ChatSkipSentinelRequestBody) o;
        return 
            Objects.deepEquals(this.prompt, other.prompt) &&
            Objects.deepEquals(this.stream, other.stream);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            prompt,
            stream);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ChatSkipSentinelRequestBody.class,
                "prompt", prompt,
                "stream", stream);
    }
    
    public final static class Builder {
 
        private String prompt;
 
        private Optional<Boolean> stream = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder prompt(String prompt) {
            Utils.checkNotNull(prompt, "prompt");
            this.prompt = prompt;
            return this;
        }

        public Builder stream(boolean stream) {
            Utils.checkNotNull(stream, "stream");
            this.stream = Optional.ofNullable(stream);
            return this;
        }

        public Builder stream(Optional<Boolean> stream) {
            Utils.checkNotNull(stream, "stream");
            this.stream = stream;
            return this;
        }
        
        public ChatSkipSentinelRequestBody build() {
            return new ChatSkipSentinelRequestBody(
                prompt,
                stream);
        }
    }
}

