/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;

public class ComponentBodyAndParamNoConflictRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=paramStr")
    private String paramStr;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private org.openapis.openapi.models.shared.SimpleObject simpleObject;

    @JsonCreator
    public ComponentBodyAndParamNoConflictRequest(
            String paramStr,
            org.openapis.openapi.models.shared.SimpleObject simpleObject) {
        Utils.checkNotNull(paramStr, "paramStr");
        Utils.checkNotNull(simpleObject, "simpleObject");
        this.paramStr = paramStr;
        this.simpleObject = simpleObject;
    }

    @JsonIgnore
    public String paramStr() {
        return paramStr;
    }

    @JsonIgnore
    public org.openapis.openapi.models.shared.SimpleObject simpleObject() {
        return simpleObject;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ComponentBodyAndParamNoConflictRequest withParamStr(String paramStr) {
        Utils.checkNotNull(paramStr, "paramStr");
        this.paramStr = paramStr;
        return this;
    }

    public ComponentBodyAndParamNoConflictRequest withSimpleObject(org.openapis.openapi.models.shared.SimpleObject simpleObject) {
        Utils.checkNotNull(simpleObject, "simpleObject");
        this.simpleObject = simpleObject;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ComponentBodyAndParamNoConflictRequest other = (ComponentBodyAndParamNoConflictRequest) o;
        return 
            java.util.Objects.deepEquals(this.paramStr, other.paramStr) &&
            java.util.Objects.deepEquals(this.simpleObject, other.simpleObject);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            paramStr,
            simpleObject);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ComponentBodyAndParamNoConflictRequest.class,
                "paramStr", paramStr,
                "simpleObject", simpleObject);
    }
    
    public final static class Builder {
 
        private String paramStr;
 
        private org.openapis.openapi.models.shared.SimpleObject simpleObject;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder paramStr(String paramStr) {
            Utils.checkNotNull(paramStr, "paramStr");
            this.paramStr = paramStr;
            return this;
        }

        public Builder simpleObject(org.openapis.openapi.models.shared.SimpleObject simpleObject) {
            Utils.checkNotNull(simpleObject, "simpleObject");
            this.simpleObject = simpleObject;
            return this;
        }
        
        public ComponentBodyAndParamNoConflictRequest build() {
            return new ComponentBodyAndParamNoConflictRequest(
                paramStr,
                simpleObject);
        }
    }
}

