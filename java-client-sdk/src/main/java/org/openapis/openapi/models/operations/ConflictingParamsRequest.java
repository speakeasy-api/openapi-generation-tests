/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;

public class ConflictingParamsRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=str")
    private String strPathParameter;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=str")
    private String strQueryParameter;

    @JsonCreator
    public ConflictingParamsRequest(
            String strPathParameter,
            String strQueryParameter) {
        Utils.checkNotNull(strPathParameter, "strPathParameter");
        Utils.checkNotNull(strQueryParameter, "strQueryParameter");
        this.strPathParameter = strPathParameter;
        this.strQueryParameter = strQueryParameter;
    }

    @JsonIgnore
    public String strPathParameter() {
        return strPathParameter;
    }

    @JsonIgnore
    public String strQueryParameter() {
        return strQueryParameter;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ConflictingParamsRequest withStrPathParameter(String strPathParameter) {
        Utils.checkNotNull(strPathParameter, "strPathParameter");
        this.strPathParameter = strPathParameter;
        return this;
    }

    public ConflictingParamsRequest withStrQueryParameter(String strQueryParameter) {
        Utils.checkNotNull(strQueryParameter, "strQueryParameter");
        this.strQueryParameter = strQueryParameter;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConflictingParamsRequest other = (ConflictingParamsRequest) o;
        return 
            java.util.Objects.deepEquals(this.strPathParameter, other.strPathParameter) &&
            java.util.Objects.deepEquals(this.strQueryParameter, other.strQueryParameter);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            strPathParameter,
            strQueryParameter);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConflictingParamsRequest.class,
                "strPathParameter", strPathParameter,
                "strQueryParameter", strQueryParameter);
    }
    
    public final static class Builder {
 
        private String strPathParameter;
 
        private String strQueryParameter;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder strPathParameter(String strPathParameter) {
            Utils.checkNotNull(strPathParameter, "strPathParameter");
            this.strPathParameter = strPathParameter;
            return this;
        }

        public Builder strQueryParameter(String strQueryParameter) {
            Utils.checkNotNull(strQueryParameter, "strQueryParameter");
            this.strQueryParameter = strQueryParameter;
            return this;
        }
        
        public ConflictingParamsRequest build() {
            return new ConflictingParamsRequest(
                strPathParameter,
                strQueryParameter);
        }
    }
}

