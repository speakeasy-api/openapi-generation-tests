/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.models.shared.SimpleObject;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class CustomClientPostRequest {

    @SpeakeasyMetadata("header:style=simple,explode=false,name=headerParam")
    private String headerParam;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=pathParam")
    private String pathParam;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=queryStringParam")
    private String queryStringParam;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends SimpleObject> simpleObject;

    @JsonCreator
    public CustomClientPostRequest(
            String headerParam,
            String pathParam,
            String queryStringParam,
            Optional<? extends SimpleObject> simpleObject) {
        Utils.checkNotNull(headerParam, "headerParam");
        Utils.checkNotNull(pathParam, "pathParam");
        Utils.checkNotNull(queryStringParam, "queryStringParam");
        Utils.checkNotNull(simpleObject, "simpleObject");
        this.headerParam = headerParam;
        this.pathParam = pathParam;
        this.queryStringParam = queryStringParam;
        this.simpleObject = simpleObject;
    }
    
    public CustomClientPostRequest(
            String headerParam,
            String pathParam,
            String queryStringParam) {
        this(headerParam, pathParam, queryStringParam, Optional.empty());
    }

    @JsonIgnore
    public String headerParam() {
        return headerParam;
    }

    @JsonIgnore
    public String pathParam() {
        return pathParam;
    }

    @JsonIgnore
    public String queryStringParam() {
        return queryStringParam;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SimpleObject> simpleObject() {
        return (Optional<SimpleObject>) simpleObject;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CustomClientPostRequest withHeaderParam(String headerParam) {
        Utils.checkNotNull(headerParam, "headerParam");
        this.headerParam = headerParam;
        return this;
    }

    public CustomClientPostRequest withPathParam(String pathParam) {
        Utils.checkNotNull(pathParam, "pathParam");
        this.pathParam = pathParam;
        return this;
    }

    public CustomClientPostRequest withQueryStringParam(String queryStringParam) {
        Utils.checkNotNull(queryStringParam, "queryStringParam");
        this.queryStringParam = queryStringParam;
        return this;
    }

    public CustomClientPostRequest withSimpleObject(SimpleObject simpleObject) {
        Utils.checkNotNull(simpleObject, "simpleObject");
        this.simpleObject = Optional.ofNullable(simpleObject);
        return this;
    }

    public CustomClientPostRequest withSimpleObject(Optional<? extends SimpleObject> simpleObject) {
        Utils.checkNotNull(simpleObject, "simpleObject");
        this.simpleObject = simpleObject;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomClientPostRequest other = (CustomClientPostRequest) o;
        return 
            Objects.deepEquals(this.headerParam, other.headerParam) &&
            Objects.deepEquals(this.pathParam, other.pathParam) &&
            Objects.deepEquals(this.queryStringParam, other.queryStringParam) &&
            Objects.deepEquals(this.simpleObject, other.simpleObject);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            headerParam,
            pathParam,
            queryStringParam,
            simpleObject);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CustomClientPostRequest.class,
                "headerParam", headerParam,
                "pathParam", pathParam,
                "queryStringParam", queryStringParam,
                "simpleObject", simpleObject);
    }
    
    public final static class Builder {
 
        private String headerParam;
 
        private String pathParam;
 
        private String queryStringParam;
 
        private Optional<? extends SimpleObject> simpleObject = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder headerParam(String headerParam) {
            Utils.checkNotNull(headerParam, "headerParam");
            this.headerParam = headerParam;
            return this;
        }

        public Builder pathParam(String pathParam) {
            Utils.checkNotNull(pathParam, "pathParam");
            this.pathParam = pathParam;
            return this;
        }

        public Builder queryStringParam(String queryStringParam) {
            Utils.checkNotNull(queryStringParam, "queryStringParam");
            this.queryStringParam = queryStringParam;
            return this;
        }

        public Builder simpleObject(SimpleObject simpleObject) {
            Utils.checkNotNull(simpleObject, "simpleObject");
            this.simpleObject = Optional.ofNullable(simpleObject);
            return this;
        }

        public Builder simpleObject(Optional<? extends SimpleObject> simpleObject) {
            Utils.checkNotNull(simpleObject, "simpleObject");
            this.simpleObject = simpleObject;
            return this;
        }
        
        public CustomClientPostRequest build() {
            return new CustomClientPostRequest(
                headerParam,
                pathParam,
                queryStringParam,
                simpleObject);
        }
    }
}

