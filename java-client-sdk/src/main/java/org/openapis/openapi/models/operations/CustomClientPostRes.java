/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.models.shared.SimpleObject;
import org.openapis.openapi.utils.Utils;

/**
 * CustomClientPostRes - OK
 */

public class CustomClientPostRes {

    @JsonProperty("args")
    private Args args;

    @JsonProperty("headers")
    private Map<String, String> headers;

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     * https://speakeasy.com/docs - A link to the external docs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("json")
    private Optional<? extends SimpleObject> json;

    @JsonProperty("url")
    private String url;

    @JsonCreator
    public CustomClientPostRes(
            @JsonProperty("args") Args args,
            @JsonProperty("headers") Map<String, String> headers,
            @JsonProperty("json") Optional<? extends SimpleObject> json,
            @JsonProperty("url") String url) {
        Utils.checkNotNull(args, "args");
        headers = Utils.emptyMapIfNull(headers);
        Utils.checkNotNull(json, "json");
        Utils.checkNotNull(url, "url");
        this.args = args;
        this.headers = headers;
        this.json = json;
        this.url = url;
    }
    
    public CustomClientPostRes(
            Args args,
            Map<String, String> headers,
            String url) {
        this(args, headers, Optional.empty(), url);
    }

    @JsonIgnore
    public Args args() {
        return args;
    }

    @JsonIgnore
    public Map<String, String> headers() {
        return headers;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     * https://speakeasy.com/docs - A link to the external docs.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SimpleObject> json() {
        return (Optional<SimpleObject>) json;
    }

    @JsonIgnore
    public String url() {
        return url;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CustomClientPostRes withArgs(Args args) {
        Utils.checkNotNull(args, "args");
        this.args = args;
        return this;
    }

    public CustomClientPostRes withHeaders(Map<String, String> headers) {
        Utils.checkNotNull(headers, "headers");
        this.headers = headers;
        return this;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     * https://speakeasy.com/docs - A link to the external docs.
     */
    public CustomClientPostRes withJson(SimpleObject json) {
        Utils.checkNotNull(json, "json");
        this.json = Optional.ofNullable(json);
        return this;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     * https://speakeasy.com/docs - A link to the external docs.
     */
    public CustomClientPostRes withJson(Optional<? extends SimpleObject> json) {
        Utils.checkNotNull(json, "json");
        this.json = json;
        return this;
    }

    public CustomClientPostRes withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomClientPostRes other = (CustomClientPostRes) o;
        return 
            Objects.deepEquals(this.args, other.args) &&
            Objects.deepEquals(this.headers, other.headers) &&
            Objects.deepEquals(this.json, other.json) &&
            Objects.deepEquals(this.url, other.url);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            args,
            headers,
            json,
            url);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CustomClientPostRes.class,
                "args", args,
                "headers", headers,
                "json", json,
                "url", url);
    }
    
    public final static class Builder {
 
        private Args args;
 
        private Map<String, String> headers;
 
        private Optional<? extends SimpleObject> json = Optional.empty();
 
        private String url;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder args(Args args) {
            Utils.checkNotNull(args, "args");
            this.args = args;
            return this;
        }

        public Builder headers(Map<String, String> headers) {
            Utils.checkNotNull(headers, "headers");
            this.headers = headers;
            return this;
        }

        /**
         * A simple object that uses all our supported primitive types and enums and has optional properties.
         * https://speakeasy.com/docs - A link to the external docs.
         */
        public Builder json(SimpleObject json) {
            Utils.checkNotNull(json, "json");
            this.json = Optional.ofNullable(json);
            return this;
        }

        /**
         * A simple object that uses all our supported primitive types and enums and has optional properties.
         * https://speakeasy.com/docs - A link to the external docs.
         */
        public Builder json(Optional<? extends SimpleObject> json) {
            Utils.checkNotNull(json, "json");
            this.json = json;
            return this;
        }

        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }
        
        public CustomClientPostRes build() {
            return new CustomClientPostRes(
                args,
                headers,
                json,
                url);
        }
    }
}

