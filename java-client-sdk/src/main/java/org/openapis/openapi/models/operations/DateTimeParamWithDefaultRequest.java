/* 
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;

public class DateTimeParamWithDefaultRequest {

    /**
     * A date time parameter with a default value
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=dateTimeInput")
    private OffsetDateTime dateTimeInput;

    @JsonCreator
    public DateTimeParamWithDefaultRequest(
            OffsetDateTime dateTimeInput) {
        Utils.checkNotNull(dateTimeInput, "dateTimeInput");
        this.dateTimeInput = dateTimeInput;
    }

    /**
     * A date time parameter with a default value
     */
    @JsonIgnore
    public OffsetDateTime dateTimeInput() {
        return dateTimeInput;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A date time parameter with a default value
     */
    public DateTimeParamWithDefaultRequest withDateTimeInput(OffsetDateTime dateTimeInput) {
        Utils.checkNotNull(dateTimeInput, "dateTimeInput");
        this.dateTimeInput = dateTimeInput;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DateTimeParamWithDefaultRequest other = (DateTimeParamWithDefaultRequest) o;
        return 
            java.util.Objects.deepEquals(this.dateTimeInput, other.dateTimeInput);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            dateTimeInput);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DateTimeParamWithDefaultRequest.class,
                "dateTimeInput", dateTimeInput);
    }
    
    public final static class Builder {
 
        private OffsetDateTime dateTimeInput;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A date time parameter with a default value
         */
        public Builder dateTimeInput(OffsetDateTime dateTimeInput) {
            Utils.checkNotNull(dateTimeInput, "dateTimeInput");
            this.dateTimeInput = dateTimeInput;
            return this;
        }
        
        public DateTimeParamWithDefaultRequest build() {
            if (dateTimeInput == null) {
                dateTimeInput = _SINGLETON_VALUE_DateTimeInput.value();
            }
            return new DateTimeParamWithDefaultRequest(
                dateTimeInput);
        }

        private static final LazySingletonValue<OffsetDateTime> _SINGLETON_VALUE_DateTimeInput =
                new LazySingletonValue<>(
                        "dateTimeInput",
                        "\"2023-10-13T12:42:42.999+00:00\"",
                        new TypeReference<OffsetDateTime>() {});
    }
}

