/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.math.BigDecimal;
import java.util.Objects;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class DecimalParamWithDefaultRequest {

    /**
     * A decimal parameter with a default value
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=decimalInput")
    private BigDecimal decimalInput;

    @JsonCreator
    public DecimalParamWithDefaultRequest(
            BigDecimal decimalInput) {
        Utils.checkNotNull(decimalInput, "decimalInput");
        this.decimalInput = decimalInput;
    }

    /**
     * A decimal parameter with a default value
     */
    @JsonIgnore
    public BigDecimal decimalInput() {
        return decimalInput;
    }

    public final static Builder builder() {
        return new Builder();
    }

        /**
         * A decimal parameter with a default value
         */
    public DecimalParamWithDefaultRequest withDecimalInput(double decimalInput) {
        this.decimalInput = BigDecimal.valueOf(decimalInput);
        return this;
    }

    /**
     * A decimal parameter with a default value
     */
    public DecimalParamWithDefaultRequest withDecimalInput(BigDecimal decimalInput) {
        Utils.checkNotNull(decimalInput, "decimalInput");
        this.decimalInput = decimalInput;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DecimalParamWithDefaultRequest other = (DecimalParamWithDefaultRequest) o;
        return 
            Objects.deepEquals(this.decimalInput, other.decimalInput);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            decimalInput);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DecimalParamWithDefaultRequest.class,
                "decimalInput", decimalInput);
    }
    
    public final static class Builder {
 
        private BigDecimal decimalInput;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A decimal parameter with a default value
         */
        public Builder decimalInput(double decimalInput) {
            this.decimalInput = BigDecimal.valueOf(decimalInput);
            return this;
        }

        /**
         * A decimal parameter with a default value
         */
        public Builder decimalInput(BigDecimal decimalInput) {
            Utils.checkNotNull(decimalInput, "decimalInput");
            this.decimalInput = decimalInput;
            return this;
        }
        
        public DecimalParamWithDefaultRequest build() {
            if (decimalInput == null) {
                decimalInput = _SINGLETON_VALUE_DecimalInput.value();
            }
            return new DecimalParamWithDefaultRequest(
                decimalInput);
        }

        private static final LazySingletonValue<BigDecimal> _SINGLETON_VALUE_DecimalInput =
                new LazySingletonValue<>(
                        "decimalInput",
                        "903275809834567300000",
                        new TypeReference<BigDecimal>() {});
    }
}

