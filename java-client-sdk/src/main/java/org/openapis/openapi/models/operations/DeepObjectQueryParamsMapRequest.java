/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class DeepObjectQueryParamsMapRequest {

    @SpeakeasyMetadata("queryParam:style=deepObject,explode=true,name=mapArrParam")
    private Optional<? extends Map<String, List<String>>> mapArrParam;

    @SpeakeasyMetadata("queryParam:style=deepObject,explode=true,name=mapParam")
    private Map<String, String> mapParam;

    @JsonCreator
    public DeepObjectQueryParamsMapRequest(
            Optional<? extends Map<String, List<String>>> mapArrParam,
            Map<String, String> mapParam) {
        Utils.checkNotNull(mapArrParam, "mapArrParam");
        mapParam = Utils.emptyMapIfNull(mapParam);
        this.mapArrParam = mapArrParam;
        this.mapParam = mapParam;
    }
    
    public DeepObjectQueryParamsMapRequest(
            Map<String, String> mapParam) {
        this(Optional.empty(), mapParam);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, List<String>>> mapArrParam() {
        return (Optional<Map<String, List<String>>>) mapArrParam;
    }

    @JsonIgnore
    public Map<String, String> mapParam() {
        return mapParam;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public DeepObjectQueryParamsMapRequest withMapArrParam(Map<String, List<String>> mapArrParam) {
        Utils.checkNotNull(mapArrParam, "mapArrParam");
        this.mapArrParam = Optional.ofNullable(mapArrParam);
        return this;
    }

    public DeepObjectQueryParamsMapRequest withMapArrParam(Optional<? extends Map<String, List<String>>> mapArrParam) {
        Utils.checkNotNull(mapArrParam, "mapArrParam");
        this.mapArrParam = mapArrParam;
        return this;
    }

    public DeepObjectQueryParamsMapRequest withMapParam(Map<String, String> mapParam) {
        Utils.checkNotNull(mapParam, "mapParam");
        this.mapParam = mapParam;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeepObjectQueryParamsMapRequest other = (DeepObjectQueryParamsMapRequest) o;
        return 
            Objects.deepEquals(this.mapArrParam, other.mapArrParam) &&
            Objects.deepEquals(this.mapParam, other.mapParam);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            mapArrParam,
            mapParam);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DeepObjectQueryParamsMapRequest.class,
                "mapArrParam", mapArrParam,
                "mapParam", mapParam);
    }
    
    public final static class Builder {
 
        private Optional<? extends Map<String, List<String>>> mapArrParam = Optional.empty();
 
        private Map<String, String> mapParam;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder mapArrParam(Map<String, List<String>> mapArrParam) {
            Utils.checkNotNull(mapArrParam, "mapArrParam");
            this.mapArrParam = Optional.ofNullable(mapArrParam);
            return this;
        }

        public Builder mapArrParam(Optional<? extends Map<String, List<String>>> mapArrParam) {
            Utils.checkNotNull(mapArrParam, "mapArrParam");
            this.mapArrParam = mapArrParam;
            return this;
        }

        public Builder mapParam(Map<String, String> mapParam) {
            Utils.checkNotNull(mapParam, "mapParam");
            this.mapParam = mapParam;
            return this;
        }
        
        public DeepObjectQueryParamsMapRequest build() {
            return new DeepObjectQueryParamsMapRequest(
                mapArrParam,
                mapParam);
        }
    }
}

