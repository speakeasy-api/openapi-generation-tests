/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.models.shared.SimpleObject;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class DeepObjectQueryParamsObjectRequest {

    @SpeakeasyMetadata("queryParam:style=deepObject,explode=true,name=objArrParam")
    private Optional<? extends ObjArrParam> objArrParam;

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    @SpeakeasyMetadata("queryParam:style=deepObject,explode=true,name=objParam")
    private SimpleObject objParam;

    @JsonCreator
    public DeepObjectQueryParamsObjectRequest(
            Optional<? extends ObjArrParam> objArrParam,
            SimpleObject objParam) {
        Utils.checkNotNull(objArrParam, "objArrParam");
        Utils.checkNotNull(objParam, "objParam");
        this.objArrParam = objArrParam;
        this.objParam = objParam;
    }
    
    public DeepObjectQueryParamsObjectRequest(
            SimpleObject objParam) {
        this(Optional.empty(), objParam);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ObjArrParam> objArrParam() {
        return (Optional<ObjArrParam>) objArrParam;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    @JsonIgnore
    public SimpleObject objParam() {
        return objParam;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public DeepObjectQueryParamsObjectRequest withObjArrParam(ObjArrParam objArrParam) {
        Utils.checkNotNull(objArrParam, "objArrParam");
        this.objArrParam = Optional.ofNullable(objArrParam);
        return this;
    }

    public DeepObjectQueryParamsObjectRequest withObjArrParam(Optional<? extends ObjArrParam> objArrParam) {
        Utils.checkNotNull(objArrParam, "objArrParam");
        this.objArrParam = objArrParam;
        return this;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    public DeepObjectQueryParamsObjectRequest withObjParam(SimpleObject objParam) {
        Utils.checkNotNull(objParam, "objParam");
        this.objParam = objParam;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeepObjectQueryParamsObjectRequest other = (DeepObjectQueryParamsObjectRequest) o;
        return 
            Objects.deepEquals(this.objArrParam, other.objArrParam) &&
            Objects.deepEquals(this.objParam, other.objParam);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            objArrParam,
            objParam);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DeepObjectQueryParamsObjectRequest.class,
                "objArrParam", objArrParam,
                "objParam", objParam);
    }
    
    public final static class Builder {
 
        private Optional<? extends ObjArrParam> objArrParam = Optional.empty();
 
        private SimpleObject objParam;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder objArrParam(ObjArrParam objArrParam) {
            Utils.checkNotNull(objArrParam, "objArrParam");
            this.objArrParam = Optional.ofNullable(objArrParam);
            return this;
        }

        public Builder objArrParam(Optional<? extends ObjArrParam> objArrParam) {
            Utils.checkNotNull(objArrParam, "objArrParam");
            this.objArrParam = objArrParam;
            return this;
        }

        /**
         * A simple object that uses all our supported primitive types and enums and has optional properties.
         */
        public Builder objParam(SimpleObject objParam) {
            Utils.checkNotNull(objParam, "objParam");
            this.objParam = objParam;
            return this;
        }
        
        public DeepObjectQueryParamsObjectRequest build() {
            return new DeepObjectQueryParamsObjectRequest(
                objArrParam,
                objParam);
        }
    }
}

