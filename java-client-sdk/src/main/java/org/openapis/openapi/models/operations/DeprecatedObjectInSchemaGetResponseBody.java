/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.models.shared.DeprecatedObject;
import org.openapis.openapi.utils.Utils;

/**
 * DeprecatedObjectInSchemaGetResponseBody - A successful response that contains a deprecatedObject sent in the request body
 */

public class DeprecatedObjectInSchemaGetResponseBody {

    /**
     * @deprecated field: This object is deprecated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("json")
    @Deprecated
    private Optional<? extends DeprecatedObject> json;

    @JsonCreator
    public DeprecatedObjectInSchemaGetResponseBody(
            @JsonProperty("json") Optional<? extends DeprecatedObject> json) {
        Utils.checkNotNull(json, "json");
        this.json = json;
    }
    
    public DeprecatedObjectInSchemaGetResponseBody() {
        this(Optional.empty());
    }

    /**
     * @deprecated field: This object is deprecated.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DeprecatedObject> json() {
        return (Optional<DeprecatedObject>) json;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * @deprecated field: This object is deprecated.
     */
    @Deprecated
    public DeprecatedObjectInSchemaGetResponseBody withJson(DeprecatedObject json) {
        Utils.checkNotNull(json, "json");
        this.json = Optional.ofNullable(json);
        return this;
    }

    /**
     * @deprecated field: This object is deprecated.
     */
    @Deprecated
    public DeprecatedObjectInSchemaGetResponseBody withJson(Optional<? extends DeprecatedObject> json) {
        Utils.checkNotNull(json, "json");
        this.json = json;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeprecatedObjectInSchemaGetResponseBody other = (DeprecatedObjectInSchemaGetResponseBody) o;
        return 
            Objects.deepEquals(this.json, other.json);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            json);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DeprecatedObjectInSchemaGetResponseBody.class,
                "json", json);
    }
    
    public final static class Builder {
 
        @Deprecated
        private Optional<? extends DeprecatedObject> json = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * @deprecated field: This object is deprecated.
         */
        @Deprecated
        public Builder json(DeprecatedObject json) {
            Utils.checkNotNull(json, "json");
            this.json = Optional.ofNullable(json);
            return this;
        }

        /**
         * @deprecated field: This object is deprecated.
         */
        @Deprecated
        public Builder json(Optional<? extends DeprecatedObject> json) {
            Utils.checkNotNull(json, "json");
            this.json = json;
            return this;
        }
        
        public DeprecatedObjectInSchemaGetResponseBody build() {
            return new DeprecatedObjectInSchemaGetResponseBody(
                json);
        }
    }
}

