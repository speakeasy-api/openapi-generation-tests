/* 
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;

public class DeprecatedOperationNoCommentsGetRequest {

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=deprecatedParameter")
    @Deprecated
    private Optional<? extends String> deprecatedParameter;

    @JsonCreator
    public DeprecatedOperationNoCommentsGetRequest(
            Optional<? extends String> deprecatedParameter) {
        Utils.checkNotNull(deprecatedParameter, "deprecatedParameter");
        this.deprecatedParameter = deprecatedParameter;
    }
    
    public DeprecatedOperationNoCommentsGetRequest() {
        this(Optional.empty());
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> deprecatedParameter() {
        return (Optional<String>) deprecatedParameter;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public DeprecatedOperationNoCommentsGetRequest withDeprecatedParameter(String deprecatedParameter) {
        Utils.checkNotNull(deprecatedParameter, "deprecatedParameter");
        this.deprecatedParameter = Optional.ofNullable(deprecatedParameter);
        return this;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public DeprecatedOperationNoCommentsGetRequest withDeprecatedParameter(Optional<? extends String> deprecatedParameter) {
        Utils.checkNotNull(deprecatedParameter, "deprecatedParameter");
        this.deprecatedParameter = deprecatedParameter;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeprecatedOperationNoCommentsGetRequest other = (DeprecatedOperationNoCommentsGetRequest) o;
        return 
            java.util.Objects.deepEquals(this.deprecatedParameter, other.deprecatedParameter);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            deprecatedParameter);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DeprecatedOperationNoCommentsGetRequest.class,
                "deprecatedParameter", deprecatedParameter);
    }
    
    public final static class Builder {
 
        @Deprecated
        private Optional<? extends String> deprecatedParameter = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder deprecatedParameter(String deprecatedParameter) {
            Utils.checkNotNull(deprecatedParameter, "deprecatedParameter");
            this.deprecatedParameter = Optional.ofNullable(deprecatedParameter);
            return this;
        }

        /**
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder deprecatedParameter(Optional<? extends String> deprecatedParameter) {
            Utils.checkNotNull(deprecatedParameter, "deprecatedParameter");
            this.deprecatedParameter = deprecatedParameter;
            return this;
        }
        
        public DeprecatedOperationNoCommentsGetRequest build() {
            return new DeprecatedOperationNoCommentsGetRequest(
                deprecatedParameter);
        }
    }
}

