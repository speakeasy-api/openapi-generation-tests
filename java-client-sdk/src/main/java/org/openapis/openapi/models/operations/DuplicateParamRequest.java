/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class DuplicateParamRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=duplicateParamRequest")
    private String duplicateParamRequest;

    public DuplicateParamRequest(
            String duplicateParamRequest) {
        Utils.checkNotNull(duplicateParamRequest, "duplicateParamRequest");
        this.duplicateParamRequest = duplicateParamRequest;
    }

    public String duplicateParamRequest() {
        return duplicateParamRequest;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public DuplicateParamRequest withDuplicateParamRequest(String duplicateParamRequest) {
        Utils.checkNotNull(duplicateParamRequest, "duplicateParamRequest");
        this.duplicateParamRequest = duplicateParamRequest;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DuplicateParamRequest other = (DuplicateParamRequest) o;
        return 
            java.util.Objects.deepEquals(this.duplicateParamRequest, other.duplicateParamRequest);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            duplicateParamRequest);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DuplicateParamRequest.class,
                "duplicateParamRequest", duplicateParamRequest);
    }
    
    public final static class Builder {
 
        private String duplicateParamRequest;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder duplicateParamRequest(String duplicateParamRequest) {
            Utils.checkNotNull(duplicateParamRequest, "duplicateParamRequest");
            this.duplicateParamRequest = duplicateParamRequest;
            return this;
        }
        
        public DuplicateParamRequest build() {
            return new DuplicateParamRequest(
                duplicateParamRequest);
        }
    }
}

