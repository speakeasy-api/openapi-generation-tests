/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.models.shared.EmptyObjectParam;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class EmptyObjectGetRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=emptyObject")
    private EmptyObjectParam emptyObject;

    @JsonCreator
    public EmptyObjectGetRequest(
            EmptyObjectParam emptyObject) {
        Utils.checkNotNull(emptyObject, "emptyObject");
        this.emptyObject = emptyObject;
    }

    @JsonIgnore
    public EmptyObjectParam emptyObject() {
        return emptyObject;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public EmptyObjectGetRequest withEmptyObject(EmptyObjectParam emptyObject) {
        Utils.checkNotNull(emptyObject, "emptyObject");
        this.emptyObject = emptyObject;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmptyObjectGetRequest other = (EmptyObjectGetRequest) o;
        return 
            Objects.deepEquals(this.emptyObject, other.emptyObject);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            emptyObject);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EmptyObjectGetRequest.class,
                "emptyObject", emptyObject);
    }
    
    public final static class Builder {
 
        private EmptyObjectParam emptyObject;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder emptyObject(EmptyObjectParam emptyObject) {
            Utils.checkNotNull(emptyObject, "emptyObject");
            this.emptyObject = emptyObject;
            return this;
        }
        
        public EmptyObjectGetRequest build() {
            return new EmptyObjectGetRequest(
                emptyObject);
        }
    }
}

