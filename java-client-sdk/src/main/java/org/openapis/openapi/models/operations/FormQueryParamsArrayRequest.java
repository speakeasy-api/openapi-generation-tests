/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class FormQueryParamsArrayRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=arrParam")
    private Optional<? extends java.util.List<String>> arrParam;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=arrParamExploded")
    private Optional<? extends java.util.List<Long>> arrParamExploded;

    public FormQueryParamsArrayRequest(
            Optional<? extends java.util.List<String>> arrParam,
            Optional<? extends java.util.List<Long>> arrParamExploded) {
        Utils.checkNotNull(arrParam, "arrParam");
        Utils.checkNotNull(arrParamExploded, "arrParamExploded");
        this.arrParam = arrParam;
        this.arrParamExploded = arrParamExploded;
    }

    public Optional<? extends java.util.List<String>> arrParam() {
        return arrParam;
    }

    public Optional<? extends java.util.List<Long>> arrParamExploded() {
        return arrParamExploded;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public FormQueryParamsArrayRequest withArrParam(java.util.List<String> arrParam) {
        Utils.checkNotNull(arrParam, "arrParam");
        this.arrParam = Optional.ofNullable(arrParam);
        return this;
    }

    public FormQueryParamsArrayRequest withArrParam(Optional<? extends java.util.List<String>> arrParam) {
        Utils.checkNotNull(arrParam, "arrParam");
        this.arrParam = arrParam;
        return this;
    }

    public FormQueryParamsArrayRequest withArrParamExploded(java.util.List<Long> arrParamExploded) {
        Utils.checkNotNull(arrParamExploded, "arrParamExploded");
        this.arrParamExploded = Optional.ofNullable(arrParamExploded);
        return this;
    }

    public FormQueryParamsArrayRequest withArrParamExploded(Optional<? extends java.util.List<Long>> arrParamExploded) {
        Utils.checkNotNull(arrParamExploded, "arrParamExploded");
        this.arrParamExploded = arrParamExploded;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FormQueryParamsArrayRequest other = (FormQueryParamsArrayRequest) o;
        return 
            java.util.Objects.deepEquals(this.arrParam, other.arrParam) &&
            java.util.Objects.deepEquals(this.arrParamExploded, other.arrParamExploded);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            arrParam,
            arrParamExploded);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FormQueryParamsArrayRequest.class,
                "arrParam", arrParam,
                "arrParamExploded", arrParamExploded);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<String>> arrParam = Optional.empty();
 
        private Optional<? extends java.util.List<Long>> arrParamExploded = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder arrParam(java.util.List<String> arrParam) {
            Utils.checkNotNull(arrParam, "arrParam");
            this.arrParam = Optional.ofNullable(arrParam);
            return this;
        }

        public Builder arrParam(Optional<? extends java.util.List<String>> arrParam) {
            Utils.checkNotNull(arrParam, "arrParam");
            this.arrParam = arrParam;
            return this;
        }

        public Builder arrParamExploded(java.util.List<Long> arrParamExploded) {
            Utils.checkNotNull(arrParamExploded, "arrParamExploded");
            this.arrParamExploded = Optional.ofNullable(arrParamExploded);
            return this;
        }

        public Builder arrParamExploded(Optional<? extends java.util.List<Long>> arrParamExploded) {
            Utils.checkNotNull(arrParamExploded, "arrParamExploded");
            this.arrParamExploded = arrParamExploded;
            return this;
        }
        
        public FormQueryParamsArrayRequest build() {
            return new FormQueryParamsArrayRequest(
                arrParam,
                arrParamExploded);
        }
    }
}

