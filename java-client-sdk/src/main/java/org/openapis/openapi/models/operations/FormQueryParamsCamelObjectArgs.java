/* 
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.Utils;

public class FormQueryParamsCamelObjectArgs {

    @JsonProperty("item_count")
    private String itemCount;

    @JsonProperty("search_term")
    private String searchTerm;

    @JsonCreator
    public FormQueryParamsCamelObjectArgs(
            @JsonProperty("item_count") String itemCount,
            @JsonProperty("search_term") String searchTerm) {
        Utils.checkNotNull(itemCount, "itemCount");
        Utils.checkNotNull(searchTerm, "searchTerm");
        this.itemCount = itemCount;
        this.searchTerm = searchTerm;
    }

    @JsonIgnore
    public String itemCount() {
        return itemCount;
    }

    @JsonIgnore
    public String searchTerm() {
        return searchTerm;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public FormQueryParamsCamelObjectArgs withItemCount(String itemCount) {
        Utils.checkNotNull(itemCount, "itemCount");
        this.itemCount = itemCount;
        return this;
    }

    public FormQueryParamsCamelObjectArgs withSearchTerm(String searchTerm) {
        Utils.checkNotNull(searchTerm, "searchTerm");
        this.searchTerm = searchTerm;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FormQueryParamsCamelObjectArgs other = (FormQueryParamsCamelObjectArgs) o;
        return 
            java.util.Objects.deepEquals(this.itemCount, other.itemCount) &&
            java.util.Objects.deepEquals(this.searchTerm, other.searchTerm);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            itemCount,
            searchTerm);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FormQueryParamsCamelObjectArgs.class,
                "itemCount", itemCount,
                "searchTerm", searchTerm);
    }
    
    public final static class Builder {
 
        private String itemCount;
 
        private String searchTerm;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder itemCount(String itemCount) {
            Utils.checkNotNull(itemCount, "itemCount");
            this.itemCount = itemCount;
            return this;
        }

        public Builder searchTerm(String searchTerm) {
            Utils.checkNotNull(searchTerm, "searchTerm");
            this.searchTerm = searchTerm;
            return this;
        }
        
        public FormQueryParamsCamelObjectArgs build() {
            return new FormQueryParamsCamelObjectArgs(
                itemCount,
                searchTerm);
        }
    }
}

