/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class FormQueryParamsMapRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=mapParam")
    private Optional<? extends Map<String, String>> mapParam;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=mapParamExploded")
    private Optional<? extends Map<String, Long>> mapParamExploded;

    @JsonCreator
    public FormQueryParamsMapRequest(
            Optional<? extends Map<String, String>> mapParam,
            Optional<? extends Map<String, Long>> mapParamExploded) {
        Utils.checkNotNull(mapParam, "mapParam");
        Utils.checkNotNull(mapParamExploded, "mapParamExploded");
        this.mapParam = mapParam;
        this.mapParamExploded = mapParamExploded;
    }
    
    public FormQueryParamsMapRequest() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, String>> mapParam() {
        return (Optional<Map<String, String>>) mapParam;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Long>> mapParamExploded() {
        return (Optional<Map<String, Long>>) mapParamExploded;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public FormQueryParamsMapRequest withMapParam(Map<String, String> mapParam) {
        Utils.checkNotNull(mapParam, "mapParam");
        this.mapParam = Optional.ofNullable(mapParam);
        return this;
    }

    public FormQueryParamsMapRequest withMapParam(Optional<? extends Map<String, String>> mapParam) {
        Utils.checkNotNull(mapParam, "mapParam");
        this.mapParam = mapParam;
        return this;
    }

    public FormQueryParamsMapRequest withMapParamExploded(Map<String, Long> mapParamExploded) {
        Utils.checkNotNull(mapParamExploded, "mapParamExploded");
        this.mapParamExploded = Optional.ofNullable(mapParamExploded);
        return this;
    }

    public FormQueryParamsMapRequest withMapParamExploded(Optional<? extends Map<String, Long>> mapParamExploded) {
        Utils.checkNotNull(mapParamExploded, "mapParamExploded");
        this.mapParamExploded = mapParamExploded;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FormQueryParamsMapRequest other = (FormQueryParamsMapRequest) o;
        return 
            Objects.deepEquals(this.mapParam, other.mapParam) &&
            Objects.deepEquals(this.mapParamExploded, other.mapParamExploded);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            mapParam,
            mapParamExploded);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FormQueryParamsMapRequest.class,
                "mapParam", mapParam,
                "mapParamExploded", mapParamExploded);
    }
    
    public final static class Builder {
 
        private Optional<? extends Map<String, String>> mapParam = Optional.empty();
 
        private Optional<? extends Map<String, Long>> mapParamExploded = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder mapParam(Map<String, String> mapParam) {
            Utils.checkNotNull(mapParam, "mapParam");
            this.mapParam = Optional.ofNullable(mapParam);
            return this;
        }

        public Builder mapParam(Optional<? extends Map<String, String>> mapParam) {
            Utils.checkNotNull(mapParam, "mapParam");
            this.mapParam = mapParam;
            return this;
        }

        public Builder mapParamExploded(Map<String, Long> mapParamExploded) {
            Utils.checkNotNull(mapParamExploded, "mapParamExploded");
            this.mapParamExploded = Optional.ofNullable(mapParamExploded);
            return this;
        }

        public Builder mapParamExploded(Optional<? extends Map<String, Long>> mapParamExploded) {
            Utils.checkNotNull(mapParamExploded, "mapParamExploded");
            this.mapParamExploded = mapParamExploded;
            return this;
        }
        
        public FormQueryParamsMapRequest build() {
            return new FormQueryParamsMapRequest(
                mapParam,
                mapParamExploded);
        }
    }
}

