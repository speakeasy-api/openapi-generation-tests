/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;

public class FormQueryParamsObjectRequest {

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=objParam")
    private Optional<? extends org.openapis.openapi.models.shared.SimpleObject> objParam;

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=objParamExploded")
    private org.openapis.openapi.models.shared.SimpleObject objParamExploded;

    @JsonCreator
    public FormQueryParamsObjectRequest(
            Optional<? extends org.openapis.openapi.models.shared.SimpleObject> objParam,
            org.openapis.openapi.models.shared.SimpleObject objParamExploded) {
        Utils.checkNotNull(objParam, "objParam");
        Utils.checkNotNull(objParamExploded, "objParamExploded");
        this.objParam = objParam;
        this.objParamExploded = objParamExploded;
    }
    
    public FormQueryParamsObjectRequest(
            org.openapis.openapi.models.shared.SimpleObject objParamExploded) {
        this(Optional.empty(), objParamExploded);
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<org.openapis.openapi.models.shared.SimpleObject> objParam() {
        return (Optional<org.openapis.openapi.models.shared.SimpleObject>) objParam;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    @JsonIgnore
    public org.openapis.openapi.models.shared.SimpleObject objParamExploded() {
        return objParamExploded;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    public FormQueryParamsObjectRequest withObjParam(org.openapis.openapi.models.shared.SimpleObject objParam) {
        Utils.checkNotNull(objParam, "objParam");
        this.objParam = Optional.ofNullable(objParam);
        return this;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    public FormQueryParamsObjectRequest withObjParam(Optional<? extends org.openapis.openapi.models.shared.SimpleObject> objParam) {
        Utils.checkNotNull(objParam, "objParam");
        this.objParam = objParam;
        return this;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    public FormQueryParamsObjectRequest withObjParamExploded(org.openapis.openapi.models.shared.SimpleObject objParamExploded) {
        Utils.checkNotNull(objParamExploded, "objParamExploded");
        this.objParamExploded = objParamExploded;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FormQueryParamsObjectRequest other = (FormQueryParamsObjectRequest) o;
        return 
            java.util.Objects.deepEquals(this.objParam, other.objParam) &&
            java.util.Objects.deepEquals(this.objParamExploded, other.objParamExploded);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            objParam,
            objParamExploded);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FormQueryParamsObjectRequest.class,
                "objParam", objParam,
                "objParamExploded", objParamExploded);
    }
    
    public final static class Builder {
 
        private Optional<? extends org.openapis.openapi.models.shared.SimpleObject> objParam = Optional.empty();
 
        private org.openapis.openapi.models.shared.SimpleObject objParamExploded;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A simple object that uses all our supported primitive types and enums and has optional properties.
         */
        public Builder objParam(org.openapis.openapi.models.shared.SimpleObject objParam) {
            Utils.checkNotNull(objParam, "objParam");
            this.objParam = Optional.ofNullable(objParam);
            return this;
        }

        /**
         * A simple object that uses all our supported primitive types and enums and has optional properties.
         */
        public Builder objParam(Optional<? extends org.openapis.openapi.models.shared.SimpleObject> objParam) {
            Utils.checkNotNull(objParam, "objParam");
            this.objParam = objParam;
            return this;
        }

        /**
         * A simple object that uses all our supported primitive types and enums and has optional properties.
         */
        public Builder objParamExploded(org.openapis.openapi.models.shared.SimpleObject objParamExploded) {
            Utils.checkNotNull(objParamExploded, "objParamExploded");
            this.objParamExploded = objParamExploded;
            return this;
        }
        
        public FormQueryParamsObjectRequest build() {
            return new FormQueryParamsObjectRequest(
                objParam,
                objParamExploded);
        }
    }
}

