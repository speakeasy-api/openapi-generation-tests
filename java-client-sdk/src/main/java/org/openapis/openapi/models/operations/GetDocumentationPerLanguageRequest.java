/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class GetDocumentationPerLanguageRequest {

    /**
     * The language parameter for this endpoint.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=language")
    private String language;

    @JsonCreator
    public GetDocumentationPerLanguageRequest(
            String language) {
        Utils.checkNotNull(language, "language");
        this.language = language;
    }

    /**
     * The language parameter for this endpoint.
     */
    @JsonIgnore
    public String language() {
        return language;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The language parameter for this endpoint.
     */
    public GetDocumentationPerLanguageRequest withLanguage(String language) {
        Utils.checkNotNull(language, "language");
        this.language = language;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetDocumentationPerLanguageRequest other = (GetDocumentationPerLanguageRequest) o;
        return 
            java.util.Objects.deepEquals(this.language, other.language);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            language);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetDocumentationPerLanguageRequest.class,
                "language", language);
    }
    
    public final static class Builder {
 
        private String language;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The language parameter for this endpoint.
         */
        public Builder language(String language) {
            Utils.checkNotNull(language, "language");
            this.language = language;
            return this;
        }
        
        public GetDocumentationPerLanguageRequest build() {
            return new GetDocumentationPerLanguageRequest(
                language);
        }
    }
}

