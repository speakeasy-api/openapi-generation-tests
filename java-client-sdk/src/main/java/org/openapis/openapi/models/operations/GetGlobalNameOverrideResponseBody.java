/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.models.shared.SimpleObject;
import org.openapis.openapi.utils.Utils;

/**
 * GetGlobalNameOverrideResponseBody - A successful response that contains the simpleObject sent in the request body
 */

public class GetGlobalNameOverrideResponseBody {

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     * https://speakeasy.com/docs - A link to the external docs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("json")
    private Optional<? extends SimpleObject> json;

    @JsonCreator
    public GetGlobalNameOverrideResponseBody(
            @JsonProperty("json") Optional<? extends SimpleObject> json) {
        Utils.checkNotNull(json, "json");
        this.json = json;
    }
    
    public GetGlobalNameOverrideResponseBody() {
        this(Optional.empty());
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     * https://speakeasy.com/docs - A link to the external docs.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SimpleObject> json() {
        return (Optional<SimpleObject>) json;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     * https://speakeasy.com/docs - A link to the external docs.
     */
    public GetGlobalNameOverrideResponseBody withJson(SimpleObject json) {
        Utils.checkNotNull(json, "json");
        this.json = Optional.ofNullable(json);
        return this;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     * https://speakeasy.com/docs - A link to the external docs.
     */
    public GetGlobalNameOverrideResponseBody withJson(Optional<? extends SimpleObject> json) {
        Utils.checkNotNull(json, "json");
        this.json = json;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetGlobalNameOverrideResponseBody other = (GetGlobalNameOverrideResponseBody) o;
        return 
            Objects.deepEquals(this.json, other.json);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            json);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetGlobalNameOverrideResponseBody.class,
                "json", json);
    }
    
    public final static class Builder {
 
        private Optional<? extends SimpleObject> json = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A simple object that uses all our supported primitive types and enums and has optional properties.
         * https://speakeasy.com/docs - A link to the external docs.
         */
        public Builder json(SimpleObject json) {
            Utils.checkNotNull(json, "json");
            this.json = Optional.ofNullable(json);
            return this;
        }

        /**
         * A simple object that uses all our supported primitive types and enums and has optional properties.
         * https://speakeasy.com/docs - A link to the external docs.
         */
        public Builder json(Optional<? extends SimpleObject> json) {
            Utils.checkNotNull(json, "json");
            this.json = json;
            return this;
        }
        
        public GetGlobalNameOverrideResponseBody build() {
            return new GetGlobalNameOverrideResponseBody(
                json);
        }
    }
}

