/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;

public class GlobalPathParameterGetRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=globalPathParam")
    private Optional<? extends Long> globalPathParam;

    @JsonCreator
    public GlobalPathParameterGetRequest(
            Optional<? extends Long> globalPathParam) {
        Utils.checkNotNull(globalPathParam, "globalPathParam");
        this.globalPathParam = globalPathParam;
    }
    
    public GlobalPathParameterGetRequest() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> globalPathParam() {
        return (Optional<Long>) globalPathParam;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GlobalPathParameterGetRequest withGlobalPathParam(long globalPathParam) {
        Utils.checkNotNull(globalPathParam, "globalPathParam");
        this.globalPathParam = Optional.ofNullable(globalPathParam);
        return this;
    }

    public GlobalPathParameterGetRequest withGlobalPathParam(Optional<? extends Long> globalPathParam) {
        Utils.checkNotNull(globalPathParam, "globalPathParam");
        this.globalPathParam = globalPathParam;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GlobalPathParameterGetRequest other = (GlobalPathParameterGetRequest) o;
        return 
            java.util.Objects.deepEquals(this.globalPathParam, other.globalPathParam);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            globalPathParam);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GlobalPathParameterGetRequest.class,
                "globalPathParam", globalPathParam);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> globalPathParam = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder globalPathParam(long globalPathParam) {
            Utils.checkNotNull(globalPathParam, "globalPathParam");
            this.globalPathParam = Optional.ofNullable(globalPathParam);
            return this;
        }

        public Builder globalPathParam(Optional<? extends Long> globalPathParam) {
            Utils.checkNotNull(globalPathParam, "globalPathParam");
            this.globalPathParam = globalPathParam;
            return this;
        }
        
        public GlobalPathParameterGetRequest build() {
            return new GlobalPathParameterGetRequest(
                globalPathParam);
        }
    }
}

