/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class GlobalsHeaderGetRequest {

    @SpeakeasyMetadata("header:style=simple,explode=false,name=globalHeaderParam")
    private boolean globalHeaderParam;

    public GlobalsHeaderGetRequest(
            boolean globalHeaderParam) {
        Utils.checkNotNull(globalHeaderParam, "globalHeaderParam");
        this.globalHeaderParam = globalHeaderParam;
    }

    public boolean globalHeaderParam() {
        return globalHeaderParam;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GlobalsHeaderGetRequest withGlobalHeaderParam(boolean globalHeaderParam) {
        Utils.checkNotNull(globalHeaderParam, "globalHeaderParam");
        this.globalHeaderParam = globalHeaderParam;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GlobalsHeaderGetRequest other = (GlobalsHeaderGetRequest) o;
        return 
            java.util.Objects.deepEquals(this.globalHeaderParam, other.globalHeaderParam);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            globalHeaderParam);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GlobalsHeaderGetRequest.class,
                "globalHeaderParam", globalHeaderParam);
    }
    
    public final static class Builder {
 
        private Boolean globalHeaderParam;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder globalHeaderParam(boolean globalHeaderParam) {
            Utils.checkNotNull(globalHeaderParam, "globalHeaderParam");
            this.globalHeaderParam = globalHeaderParam;
            return this;
        }
        
        public GlobalsHeaderGetRequest build() {
            return new GlobalsHeaderGetRequest(
                globalHeaderParam);
        }
    }
}

