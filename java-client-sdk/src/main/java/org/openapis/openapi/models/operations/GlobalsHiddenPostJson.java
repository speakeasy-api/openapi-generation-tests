/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.utils.Utils;


public class GlobalsHiddenPostJson {

    @JsonProperty("other")
    private long other;

    @JsonProperty("test")
    private String test;

    @JsonCreator
    public GlobalsHiddenPostJson(
            @JsonProperty("other") long other,
            @JsonProperty("test") String test) {
        Utils.checkNotNull(other, "other");
        Utils.checkNotNull(test, "test");
        this.other = other;
        this.test = test;
    }

    @JsonIgnore
    public long other() {
        return other;
    }

    @JsonIgnore
    public String test() {
        return test;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GlobalsHiddenPostJson withOther(long other) {
        Utils.checkNotNull(other, "other");
        this.other = other;
        return this;
    }

    public GlobalsHiddenPostJson withTest(String test) {
        Utils.checkNotNull(test, "test");
        this.test = test;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GlobalsHiddenPostJson other = (GlobalsHiddenPostJson) o;
        return 
            Objects.deepEquals(this.other, other.other) &&
            Objects.deepEquals(this.test, other.test);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            other,
            test);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GlobalsHiddenPostJson.class,
                "other", other,
                "test", test);
    }
    
    public final static class Builder {
 
        private Long other;
 
        private String test;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder other(long other) {
            Utils.checkNotNull(other, "other");
            this.other = other;
            return this;
        }

        public Builder test(String test) {
            Utils.checkNotNull(test, "test");
            this.test = test;
            return this;
        }
        
        public GlobalsHiddenPostJson build() {
            return new GlobalsHiddenPostJson(
                other,
                test);
        }
    }
}

