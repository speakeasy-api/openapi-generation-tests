/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;

public class GlobalsQueryParameterGetRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=globalQueryParam")
    private Optional<? extends String> globalQueryParam;

    @JsonCreator
    public GlobalsQueryParameterGetRequest(
            Optional<? extends String> globalQueryParam) {
        Utils.checkNotNull(globalQueryParam, "globalQueryParam");
        this.globalQueryParam = globalQueryParam;
    }
    
    public GlobalsQueryParameterGetRequest() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> globalQueryParam() {
        return (Optional<String>) globalQueryParam;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GlobalsQueryParameterGetRequest withGlobalQueryParam(String globalQueryParam) {
        Utils.checkNotNull(globalQueryParam, "globalQueryParam");
        this.globalQueryParam = Optional.ofNullable(globalQueryParam);
        return this;
    }

    public GlobalsQueryParameterGetRequest withGlobalQueryParam(Optional<? extends String> globalQueryParam) {
        Utils.checkNotNull(globalQueryParam, "globalQueryParam");
        this.globalQueryParam = globalQueryParam;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GlobalsQueryParameterGetRequest other = (GlobalsQueryParameterGetRequest) o;
        return 
            java.util.Objects.deepEquals(this.globalQueryParam, other.globalQueryParam);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            globalQueryParam);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GlobalsQueryParameterGetRequest.class,
                "globalQueryParam", globalQueryParam);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> globalQueryParam = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder globalQueryParam(String globalQueryParam) {
            Utils.checkNotNull(globalQueryParam, "globalQueryParam");
            this.globalQueryParam = Optional.ofNullable(globalQueryParam);
            return this;
        }

        public Builder globalQueryParam(Optional<? extends String> globalQueryParam) {
            Utils.checkNotNull(globalQueryParam, "globalQueryParam");
            this.globalQueryParam = globalQueryParam;
            return this;
        }
        
        public GlobalsQueryParameterGetRequest build() {
            return new GlobalsQueryParameterGetRequest(
                globalQueryParam);
        }
    }
}

