/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.Utils;


public class HeaderParamsMapHeaders {

    @JsonProperty("X-Header-Map")
    private String xHeaderMap;

    @JsonProperty("X-Header-Map-Explode")
    private String xHeaderMapExplode;

    @JsonCreator
    public HeaderParamsMapHeaders(
            @JsonProperty("X-Header-Map") String xHeaderMap,
            @JsonProperty("X-Header-Map-Explode") String xHeaderMapExplode) {
        Utils.checkNotNull(xHeaderMap, "xHeaderMap");
        Utils.checkNotNull(xHeaderMapExplode, "xHeaderMapExplode");
        this.xHeaderMap = xHeaderMap;
        this.xHeaderMapExplode = xHeaderMapExplode;
    }

    @JsonIgnore
    public String xHeaderMap() {
        return xHeaderMap;
    }

    @JsonIgnore
    public String xHeaderMapExplode() {
        return xHeaderMapExplode;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public HeaderParamsMapHeaders withXHeaderMap(String xHeaderMap) {
        Utils.checkNotNull(xHeaderMap, "xHeaderMap");
        this.xHeaderMap = xHeaderMap;
        return this;
    }

    public HeaderParamsMapHeaders withXHeaderMapExplode(String xHeaderMapExplode) {
        Utils.checkNotNull(xHeaderMapExplode, "xHeaderMapExplode");
        this.xHeaderMapExplode = xHeaderMapExplode;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HeaderParamsMapHeaders other = (HeaderParamsMapHeaders) o;
        return 
            java.util.Objects.deepEquals(this.xHeaderMap, other.xHeaderMap) &&
            java.util.Objects.deepEquals(this.xHeaderMapExplode, other.xHeaderMapExplode);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            xHeaderMap,
            xHeaderMapExplode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HeaderParamsMapHeaders.class,
                "xHeaderMap", xHeaderMap,
                "xHeaderMapExplode", xHeaderMapExplode);
    }
    
    public final static class Builder {
 
        private String xHeaderMap;
 
        private String xHeaderMapExplode;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder xHeaderMap(String xHeaderMap) {
            Utils.checkNotNull(xHeaderMap, "xHeaderMap");
            this.xHeaderMap = xHeaderMap;
            return this;
        }

        public Builder xHeaderMapExplode(String xHeaderMapExplode) {
            Utils.checkNotNull(xHeaderMapExplode, "xHeaderMapExplode");
            this.xHeaderMapExplode = xHeaderMapExplode;
            return this;
        }
        
        public HeaderParamsMapHeaders build() {
            return new HeaderParamsMapHeaders(
                xHeaderMap,
                xHeaderMapExplode);
        }
    }
}

