/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class HeaderParamsMapRequest {

    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Header-Map")
    private java.util.Map<String, String> xHeaderMap;

    @SpeakeasyMetadata("header:style=simple,explode=true,name=X-Header-Map-Explode")
    private java.util.Map<String, String> xHeaderMapExplode;

    public HeaderParamsMapRequest(
            java.util.Map<String, String> xHeaderMap,
            java.util.Map<String, String> xHeaderMapExplode) {
        xHeaderMap = Utils.emptyMapIfNull(xHeaderMap);
        xHeaderMapExplode = Utils.emptyMapIfNull(xHeaderMapExplode);
        this.xHeaderMap = xHeaderMap;
        this.xHeaderMapExplode = xHeaderMapExplode;
    }

    public java.util.Map<String, String> xHeaderMap() {
        return xHeaderMap;
    }

    public java.util.Map<String, String> xHeaderMapExplode() {
        return xHeaderMapExplode;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public HeaderParamsMapRequest withXHeaderMap(java.util.Map<String, String> xHeaderMap) {
        Utils.checkNotNull(xHeaderMap, "xHeaderMap");
        this.xHeaderMap = xHeaderMap;
        return this;
    }

    public HeaderParamsMapRequest withXHeaderMapExplode(java.util.Map<String, String> xHeaderMapExplode) {
        Utils.checkNotNull(xHeaderMapExplode, "xHeaderMapExplode");
        this.xHeaderMapExplode = xHeaderMapExplode;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HeaderParamsMapRequest other = (HeaderParamsMapRequest) o;
        return 
            java.util.Objects.deepEquals(this.xHeaderMap, other.xHeaderMap) &&
            java.util.Objects.deepEquals(this.xHeaderMapExplode, other.xHeaderMapExplode);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            xHeaderMap,
            xHeaderMapExplode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HeaderParamsMapRequest.class,
                "xHeaderMap", xHeaderMap,
                "xHeaderMapExplode", xHeaderMapExplode);
    }
    
    public final static class Builder {
 
        private java.util.Map<String, String> xHeaderMap;
 
        private java.util.Map<String, String> xHeaderMapExplode;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder xHeaderMap(java.util.Map<String, String> xHeaderMap) {
            Utils.checkNotNull(xHeaderMap, "xHeaderMap");
            this.xHeaderMap = xHeaderMap;
            return this;
        }

        public Builder xHeaderMapExplode(java.util.Map<String, String> xHeaderMapExplode) {
            Utils.checkNotNull(xHeaderMapExplode, "xHeaderMapExplode");
            this.xHeaderMapExplode = xHeaderMapExplode;
            return this;
        }
        
        public HeaderParamsMapRequest build() {
            return new HeaderParamsMapRequest(
                xHeaderMap,
                xHeaderMapExplode);
        }
    }
}

