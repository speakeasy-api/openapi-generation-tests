/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;
import org.openapitools.jackson.nullable.JsonNullable;


public class HeaderParamsNilRequest {

    @SpeakeasyMetadata("header:style=simple,explode=false,name=Nullable-Header")
    private Optional<String> nullableHeader;

    @SpeakeasyMetadata("header:style=simple,explode=false,name=Optional-Header")
    private Optional<String> optionalHeader;

    @SpeakeasyMetadata("header:style=simple,explode=false,name=Optional-Nullable-Header")
    private JsonNullable<String> optionalNullableHeader;

    @JsonCreator
    public HeaderParamsNilRequest(
            Optional<String> nullableHeader,
            Optional<String> optionalHeader,
            JsonNullable<String> optionalNullableHeader) {
        Utils.checkNotNull(nullableHeader, "nullableHeader");
        Utils.checkNotNull(optionalHeader, "optionalHeader");
        Utils.checkNotNull(optionalNullableHeader, "optionalNullableHeader");
        this.nullableHeader = nullableHeader;
        this.optionalHeader = optionalHeader;
        this.optionalNullableHeader = optionalNullableHeader;
    }
    
    public HeaderParamsNilRequest() {
        this(Optional.empty(), Optional.empty(), JsonNullable.undefined());
    }

    @JsonIgnore
    public Optional<String> nullableHeader() {
        return nullableHeader;
    }

    @JsonIgnore
    public Optional<String> optionalHeader() {
        return optionalHeader;
    }

    @JsonIgnore
    public JsonNullable<String> optionalNullableHeader() {
        return optionalNullableHeader;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public HeaderParamsNilRequest withNullableHeader(String nullableHeader) {
        Utils.checkNotNull(nullableHeader, "nullableHeader");
        this.nullableHeader = Optional.ofNullable(nullableHeader);
        return this;
    }

    public HeaderParamsNilRequest withNullableHeader(Optional<String> nullableHeader) {
        Utils.checkNotNull(nullableHeader, "nullableHeader");
        this.nullableHeader = nullableHeader;
        return this;
    }

    public HeaderParamsNilRequest withOptionalHeader(String optionalHeader) {
        Utils.checkNotNull(optionalHeader, "optionalHeader");
        this.optionalHeader = Optional.ofNullable(optionalHeader);
        return this;
    }

    public HeaderParamsNilRequest withOptionalHeader(Optional<String> optionalHeader) {
        Utils.checkNotNull(optionalHeader, "optionalHeader");
        this.optionalHeader = optionalHeader;
        return this;
    }

    public HeaderParamsNilRequest withOptionalNullableHeader(String optionalNullableHeader) {
        Utils.checkNotNull(optionalNullableHeader, "optionalNullableHeader");
        this.optionalNullableHeader = JsonNullable.of(optionalNullableHeader);
        return this;
    }

    public HeaderParamsNilRequest withOptionalNullableHeader(JsonNullable<String> optionalNullableHeader) {
        Utils.checkNotNull(optionalNullableHeader, "optionalNullableHeader");
        this.optionalNullableHeader = optionalNullableHeader;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HeaderParamsNilRequest other = (HeaderParamsNilRequest) o;
        return 
            Objects.deepEquals(this.nullableHeader, other.nullableHeader) &&
            Objects.deepEquals(this.optionalHeader, other.optionalHeader) &&
            Objects.deepEquals(this.optionalNullableHeader, other.optionalNullableHeader);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            nullableHeader,
            optionalHeader,
            optionalNullableHeader);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HeaderParamsNilRequest.class,
                "nullableHeader", nullableHeader,
                "optionalHeader", optionalHeader,
                "optionalNullableHeader", optionalNullableHeader);
    }
    
    public final static class Builder {
 
        private Optional<String> nullableHeader = Optional.empty();
 
        private Optional<String> optionalHeader = Optional.empty();
 
        private JsonNullable<String> optionalNullableHeader = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder nullableHeader(String nullableHeader) {
            Utils.checkNotNull(nullableHeader, "nullableHeader");
            this.nullableHeader = Optional.ofNullable(nullableHeader);
            return this;
        }

        public Builder nullableHeader(Optional<String> nullableHeader) {
            Utils.checkNotNull(nullableHeader, "nullableHeader");
            this.nullableHeader = nullableHeader;
            return this;
        }

        public Builder optionalHeader(String optionalHeader) {
            Utils.checkNotNull(optionalHeader, "optionalHeader");
            this.optionalHeader = Optional.ofNullable(optionalHeader);
            return this;
        }

        public Builder optionalHeader(Optional<String> optionalHeader) {
            Utils.checkNotNull(optionalHeader, "optionalHeader");
            this.optionalHeader = optionalHeader;
            return this;
        }

        public Builder optionalNullableHeader(String optionalNullableHeader) {
            Utils.checkNotNull(optionalNullableHeader, "optionalNullableHeader");
            this.optionalNullableHeader = JsonNullable.of(optionalNullableHeader);
            return this;
        }

        public Builder optionalNullableHeader(JsonNullable<String> optionalNullableHeader) {
            Utils.checkNotNull(optionalNullableHeader, "optionalNullableHeader");
            this.optionalNullableHeader = optionalNullableHeader;
            return this;
        }
        
        public HeaderParamsNilRequest build() {
            return new HeaderParamsNilRequest(
                nullableHeader,
                optionalHeader,
                optionalNullableHeader);
        }
    }
}

