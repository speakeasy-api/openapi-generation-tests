/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class HeaderParamsPrimitiveRequest {

    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Header-Boolean")
    private boolean xHeaderBoolean;

    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Header-Integer")
    private long xHeaderInteger;

    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Header-Number")
    private double xHeaderNumber;

    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Header-String")
    private String xHeaderString;

    @JsonCreator
    public HeaderParamsPrimitiveRequest(
            boolean xHeaderBoolean,
            long xHeaderInteger,
            double xHeaderNumber,
            String xHeaderString) {
        Utils.checkNotNull(xHeaderBoolean, "xHeaderBoolean");
        Utils.checkNotNull(xHeaderInteger, "xHeaderInteger");
        Utils.checkNotNull(xHeaderNumber, "xHeaderNumber");
        Utils.checkNotNull(xHeaderString, "xHeaderString");
        this.xHeaderBoolean = xHeaderBoolean;
        this.xHeaderInteger = xHeaderInteger;
        this.xHeaderNumber = xHeaderNumber;
        this.xHeaderString = xHeaderString;
    }

    @JsonIgnore
    public boolean xHeaderBoolean() {
        return xHeaderBoolean;
    }

    @JsonIgnore
    public long xHeaderInteger() {
        return xHeaderInteger;
    }

    @JsonIgnore
    public double xHeaderNumber() {
        return xHeaderNumber;
    }

    @JsonIgnore
    public String xHeaderString() {
        return xHeaderString;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public HeaderParamsPrimitiveRequest withXHeaderBoolean(boolean xHeaderBoolean) {
        Utils.checkNotNull(xHeaderBoolean, "xHeaderBoolean");
        this.xHeaderBoolean = xHeaderBoolean;
        return this;
    }

    public HeaderParamsPrimitiveRequest withXHeaderInteger(long xHeaderInteger) {
        Utils.checkNotNull(xHeaderInteger, "xHeaderInteger");
        this.xHeaderInteger = xHeaderInteger;
        return this;
    }

    public HeaderParamsPrimitiveRequest withXHeaderNumber(double xHeaderNumber) {
        Utils.checkNotNull(xHeaderNumber, "xHeaderNumber");
        this.xHeaderNumber = xHeaderNumber;
        return this;
    }

    public HeaderParamsPrimitiveRequest withXHeaderString(String xHeaderString) {
        Utils.checkNotNull(xHeaderString, "xHeaderString");
        this.xHeaderString = xHeaderString;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HeaderParamsPrimitiveRequest other = (HeaderParamsPrimitiveRequest) o;
        return 
            Objects.deepEquals(this.xHeaderBoolean, other.xHeaderBoolean) &&
            Objects.deepEquals(this.xHeaderInteger, other.xHeaderInteger) &&
            Objects.deepEquals(this.xHeaderNumber, other.xHeaderNumber) &&
            Objects.deepEquals(this.xHeaderString, other.xHeaderString);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            xHeaderBoolean,
            xHeaderInteger,
            xHeaderNumber,
            xHeaderString);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HeaderParamsPrimitiveRequest.class,
                "xHeaderBoolean", xHeaderBoolean,
                "xHeaderInteger", xHeaderInteger,
                "xHeaderNumber", xHeaderNumber,
                "xHeaderString", xHeaderString);
    }
    
    public final static class Builder {
 
        private Boolean xHeaderBoolean;
 
        private Long xHeaderInteger;
 
        private Double xHeaderNumber;
 
        private String xHeaderString;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder xHeaderBoolean(boolean xHeaderBoolean) {
            Utils.checkNotNull(xHeaderBoolean, "xHeaderBoolean");
            this.xHeaderBoolean = xHeaderBoolean;
            return this;
        }

        public Builder xHeaderInteger(long xHeaderInteger) {
            Utils.checkNotNull(xHeaderInteger, "xHeaderInteger");
            this.xHeaderInteger = xHeaderInteger;
            return this;
        }

        public Builder xHeaderNumber(double xHeaderNumber) {
            Utils.checkNotNull(xHeaderNumber, "xHeaderNumber");
            this.xHeaderNumber = xHeaderNumber;
            return this;
        }

        public Builder xHeaderString(String xHeaderString) {
            Utils.checkNotNull(xHeaderString, "xHeaderString");
            this.xHeaderString = xHeaderString;
            return this;
        }
        
        public HeaderParamsPrimitiveRequest build() {
            return new HeaderParamsPrimitiveRequest(
                xHeaderBoolean,
                xHeaderInteger,
                xHeaderNumber,
                xHeaderString);
        }
    }
}

