/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class Headers {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Client-Level-Header")
    private Optional<String> clientLevelHeader;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Idempotency-Key")
    private Optional<String> idempotencyKey;

    @JsonCreator
    public Headers(
            @JsonProperty("Client-Level-Header") Optional<String> clientLevelHeader,
            @JsonProperty("Idempotency-Key") Optional<String> idempotencyKey) {
        Utils.checkNotNull(clientLevelHeader, "clientLevelHeader");
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.clientLevelHeader = clientLevelHeader;
        this.idempotencyKey = idempotencyKey;
    }
    
    public Headers() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> clientLevelHeader() {
        return clientLevelHeader;
    }

    @JsonIgnore
    public Optional<String> idempotencyKey() {
        return idempotencyKey;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Headers withClientLevelHeader(String clientLevelHeader) {
        Utils.checkNotNull(clientLevelHeader, "clientLevelHeader");
        this.clientLevelHeader = Optional.ofNullable(clientLevelHeader);
        return this;
    }

    public Headers withClientLevelHeader(Optional<String> clientLevelHeader) {
        Utils.checkNotNull(clientLevelHeader, "clientLevelHeader");
        this.clientLevelHeader = clientLevelHeader;
        return this;
    }

    public Headers withIdempotencyKey(String idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = Optional.ofNullable(idempotencyKey);
        return this;
    }

    public Headers withIdempotencyKey(Optional<String> idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = idempotencyKey;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Headers other = (Headers) o;
        return 
            Objects.deepEquals(this.clientLevelHeader, other.clientLevelHeader) &&
            Objects.deepEquals(this.idempotencyKey, other.idempotencyKey);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            clientLevelHeader,
            idempotencyKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Headers.class,
                "clientLevelHeader", clientLevelHeader,
                "idempotencyKey", idempotencyKey);
    }
    
    public final static class Builder {
 
        private Optional<String> clientLevelHeader = Optional.empty();
 
        private Optional<String> idempotencyKey = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder clientLevelHeader(String clientLevelHeader) {
            Utils.checkNotNull(clientLevelHeader, "clientLevelHeader");
            this.clientLevelHeader = Optional.ofNullable(clientLevelHeader);
            return this;
        }

        public Builder clientLevelHeader(Optional<String> clientLevelHeader) {
            Utils.checkNotNull(clientLevelHeader, "clientLevelHeader");
            this.clientLevelHeader = clientLevelHeader;
            return this;
        }

        public Builder idempotencyKey(String idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        public Builder idempotencyKey(Optional<String> idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        public Headers build() {
            return new Headers(
                clientLevelHeader,
                idempotencyKey);
        }
    }
}

