/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class IgnoresPostRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private IgnoresPostRequestBody requestBody;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=testParam")
    private Optional<String> testParam;

    @JsonCreator
    public IgnoresPostRequest(
            IgnoresPostRequestBody requestBody,
            Optional<String> testParam) {
        Utils.checkNotNull(requestBody, "requestBody");
        Utils.checkNotNull(testParam, "testParam");
        this.requestBody = requestBody;
        this.testParam = testParam;
    }
    
    public IgnoresPostRequest(
            IgnoresPostRequestBody requestBody) {
        this(requestBody, Optional.empty());
    }

    @JsonIgnore
    public IgnoresPostRequestBody requestBody() {
        return requestBody;
    }

    @JsonIgnore
    public Optional<String> testParam() {
        return testParam;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public IgnoresPostRequest withRequestBody(IgnoresPostRequestBody requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }

    public IgnoresPostRequest withTestParam(String testParam) {
        Utils.checkNotNull(testParam, "testParam");
        this.testParam = Optional.ofNullable(testParam);
        return this;
    }

    public IgnoresPostRequest withTestParam(Optional<String> testParam) {
        Utils.checkNotNull(testParam, "testParam");
        this.testParam = testParam;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IgnoresPostRequest other = (IgnoresPostRequest) o;
        return 
            Objects.deepEquals(this.requestBody, other.requestBody) &&
            Objects.deepEquals(this.testParam, other.testParam);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            requestBody,
            testParam);
    }
    
    @Override
    public String toString() {
        return Utils.toString(IgnoresPostRequest.class,
                "requestBody", requestBody,
                "testParam", testParam);
    }
    
    public final static class Builder {
 
        private IgnoresPostRequestBody requestBody;
 
        private Optional<String> testParam = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder requestBody(IgnoresPostRequestBody requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }

        public Builder testParam(String testParam) {
            Utils.checkNotNull(testParam, "testParam");
            this.testParam = Optional.ofNullable(testParam);
            return this;
        }

        public Builder testParam(Optional<String> testParam) {
            Utils.checkNotNull(testParam, "testParam");
            this.testParam = testParam;
            return this;
        }
        
        public IgnoresPostRequest build() {
            return new IgnoresPostRequest(
                requestBody,
                testParam);
        }
    }
}

