/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class IgnoresPostRequestBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callbackUrl")
    private Optional<? extends String> callbackUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("testProp")
    private Optional<? extends String> testProp;

    @JsonCreator
    public IgnoresPostRequestBody(
            @JsonProperty("callbackUrl") Optional<? extends String> callbackUrl,
            @JsonProperty("testProp") Optional<? extends String> testProp) {
        Utils.checkNotNull(callbackUrl, "callbackUrl");
        Utils.checkNotNull(testProp, "testProp");
        this.callbackUrl = callbackUrl;
        this.testProp = testProp;
    }
    
    public IgnoresPostRequestBody() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> callbackUrl() {
        return (Optional<String>) callbackUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> testProp() {
        return (Optional<String>) testProp;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public IgnoresPostRequestBody withCallbackUrl(String callbackUrl) {
        Utils.checkNotNull(callbackUrl, "callbackUrl");
        this.callbackUrl = Optional.ofNullable(callbackUrl);
        return this;
    }

    public IgnoresPostRequestBody withCallbackUrl(Optional<? extends String> callbackUrl) {
        Utils.checkNotNull(callbackUrl, "callbackUrl");
        this.callbackUrl = callbackUrl;
        return this;
    }

    public IgnoresPostRequestBody withTestProp(String testProp) {
        Utils.checkNotNull(testProp, "testProp");
        this.testProp = Optional.ofNullable(testProp);
        return this;
    }

    public IgnoresPostRequestBody withTestProp(Optional<? extends String> testProp) {
        Utils.checkNotNull(testProp, "testProp");
        this.testProp = testProp;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IgnoresPostRequestBody other = (IgnoresPostRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.callbackUrl, other.callbackUrl) &&
            java.util.Objects.deepEquals(this.testProp, other.testProp);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            callbackUrl,
            testProp);
    }
    
    @Override
    public String toString() {
        return Utils.toString(IgnoresPostRequestBody.class,
                "callbackUrl", callbackUrl,
                "testProp", testProp);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> callbackUrl = Optional.empty();
 
        private Optional<? extends String> testProp = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder callbackUrl(String callbackUrl) {
            Utils.checkNotNull(callbackUrl, "callbackUrl");
            this.callbackUrl = Optional.ofNullable(callbackUrl);
            return this;
        }

        public Builder callbackUrl(Optional<? extends String> callbackUrl) {
            Utils.checkNotNull(callbackUrl, "callbackUrl");
            this.callbackUrl = callbackUrl;
            return this;
        }

        public Builder testProp(String testProp) {
            Utils.checkNotNull(testProp, "testProp");
            this.testProp = Optional.ofNullable(testProp);
            return this;
        }

        public Builder testProp(Optional<? extends String> testProp) {
            Utils.checkNotNull(testProp, "testProp");
            this.testProp = testProp;
            return this;
        }
        
        public IgnoresPostRequestBody build() {
            return new IgnoresPostRequestBody(
                callbackUrl,
                testProp);
        }
    }
}

