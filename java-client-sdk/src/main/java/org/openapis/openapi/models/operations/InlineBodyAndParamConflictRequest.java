/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class InlineBodyAndParamConflictRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private InlineBodyAndParamConflictRequestBody requestBody;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=str")
    private String str;

    @JsonCreator
    public InlineBodyAndParamConflictRequest(
            InlineBodyAndParamConflictRequestBody requestBody,
            String str) {
        Utils.checkNotNull(requestBody, "requestBody");
        Utils.checkNotNull(str, "str");
        this.requestBody = requestBody;
        this.str = str;
    }

    @JsonIgnore
    public InlineBodyAndParamConflictRequestBody requestBody() {
        return requestBody;
    }

    @JsonIgnore
    public String str() {
        return str;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public InlineBodyAndParamConflictRequest withRequestBody(InlineBodyAndParamConflictRequestBody requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }

    public InlineBodyAndParamConflictRequest withStr(String str) {
        Utils.checkNotNull(str, "str");
        this.str = str;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InlineBodyAndParamConflictRequest other = (InlineBodyAndParamConflictRequest) o;
        return 
            Objects.deepEquals(this.requestBody, other.requestBody) &&
            Objects.deepEquals(this.str, other.str);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            requestBody,
            str);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InlineBodyAndParamConflictRequest.class,
                "requestBody", requestBody,
                "str", str);
    }
    
    public final static class Builder {
 
        private InlineBodyAndParamConflictRequestBody requestBody;
 
        private String str;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder requestBody(InlineBodyAndParamConflictRequestBody requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }

        public Builder str(String str) {
            Utils.checkNotNull(str, "str");
            this.str = str;
            return this;
        }
        
        public InlineBodyAndParamConflictRequest build() {
            return new InlineBodyAndParamConflictRequest(
                requestBody,
                str);
        }
    }
}

