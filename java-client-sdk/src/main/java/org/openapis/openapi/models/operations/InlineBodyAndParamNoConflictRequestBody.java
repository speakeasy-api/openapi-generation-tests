/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.utils.Utils;


public class InlineBodyAndParamNoConflictRequestBody {

    @JsonProperty("bodyStr")
    private String bodyStr;

    @JsonCreator
    public InlineBodyAndParamNoConflictRequestBody(
            @JsonProperty("bodyStr") String bodyStr) {
        Utils.checkNotNull(bodyStr, "bodyStr");
        this.bodyStr = bodyStr;
    }

    @JsonIgnore
    public String bodyStr() {
        return bodyStr;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public InlineBodyAndParamNoConflictRequestBody withBodyStr(String bodyStr) {
        Utils.checkNotNull(bodyStr, "bodyStr");
        this.bodyStr = bodyStr;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InlineBodyAndParamNoConflictRequestBody other = (InlineBodyAndParamNoConflictRequestBody) o;
        return 
            Objects.deepEquals(this.bodyStr, other.bodyStr);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            bodyStr);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InlineBodyAndParamNoConflictRequestBody.class,
                "bodyStr", bodyStr);
    }
    
    public final static class Builder {
 
        private String bodyStr;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder bodyStr(String bodyStr) {
            Utils.checkNotNull(bodyStr, "bodyStr");
            this.bodyStr = bodyStr;
            return this;
        }
        
        public InlineBodyAndParamNoConflictRequestBody build() {
            return new InlineBodyAndParamNoConflictRequestBody(
                bodyStr);
        }
    }
}

