/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.models.shared.DeepObjectSmaller;
import org.openapis.openapi.models.shared.SimpleObject;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class JsonQueryParamsObjectSmallerRequest {

    @SpeakeasyMetadata("queryParam:serialization=json,name=deepObjParam")
    private DeepObjectSmaller deepObjParam;

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    @SpeakeasyMetadata("queryParam:serialization=json,name=simpleObjParam")
    private SimpleObject simpleObjParam;

    @JsonCreator
    public JsonQueryParamsObjectSmallerRequest(
            DeepObjectSmaller deepObjParam,
            SimpleObject simpleObjParam) {
        Utils.checkNotNull(deepObjParam, "deepObjParam");
        Utils.checkNotNull(simpleObjParam, "simpleObjParam");
        this.deepObjParam = deepObjParam;
        this.simpleObjParam = simpleObjParam;
    }

    @JsonIgnore
    public DeepObjectSmaller deepObjParam() {
        return deepObjParam;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    @JsonIgnore
    public SimpleObject simpleObjParam() {
        return simpleObjParam;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public JsonQueryParamsObjectSmallerRequest withDeepObjParam(DeepObjectSmaller deepObjParam) {
        Utils.checkNotNull(deepObjParam, "deepObjParam");
        this.deepObjParam = deepObjParam;
        return this;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    public JsonQueryParamsObjectSmallerRequest withSimpleObjParam(SimpleObject simpleObjParam) {
        Utils.checkNotNull(simpleObjParam, "simpleObjParam");
        this.simpleObjParam = simpleObjParam;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JsonQueryParamsObjectSmallerRequest other = (JsonQueryParamsObjectSmallerRequest) o;
        return 
            Objects.deepEquals(this.deepObjParam, other.deepObjParam) &&
            Objects.deepEquals(this.simpleObjParam, other.simpleObjParam);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            deepObjParam,
            simpleObjParam);
    }
    
    @Override
    public String toString() {
        return Utils.toString(JsonQueryParamsObjectSmallerRequest.class,
                "deepObjParam", deepObjParam,
                "simpleObjParam", simpleObjParam);
    }
    
    public final static class Builder {
 
        private DeepObjectSmaller deepObjParam;
 
        private SimpleObject simpleObjParam;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder deepObjParam(DeepObjectSmaller deepObjParam) {
            Utils.checkNotNull(deepObjParam, "deepObjParam");
            this.deepObjParam = deepObjParam;
            return this;
        }

        /**
         * A simple object that uses all our supported primitive types and enums and has optional properties.
         */
        public Builder simpleObjParam(SimpleObject simpleObjParam) {
            Utils.checkNotNull(simpleObjParam, "simpleObjParam");
            this.simpleObjParam = simpleObjParam;
            return this;
        }
        
        public JsonQueryParamsObjectSmallerRequest build() {
            return new JsonQueryParamsObjectSmallerRequest(
                deepObjParam,
                simpleObjParam);
        }
    }
}

