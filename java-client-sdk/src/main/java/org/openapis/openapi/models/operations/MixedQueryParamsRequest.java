/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.models.shared.SimpleObject;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class MixedQueryParamsRequest {

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    @SpeakeasyMetadata("queryParam:style=deepObject,explode=true,name=deepObjectParam")
    private SimpleObject deepObjectParam;

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=formParam")
    private SimpleObject formParam;

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    @SpeakeasyMetadata("queryParam:serialization=json,name=jsonParam")
    private SimpleObject jsonParam;

    @JsonCreator
    public MixedQueryParamsRequest(
            SimpleObject deepObjectParam,
            SimpleObject formParam,
            SimpleObject jsonParam) {
        Utils.checkNotNull(deepObjectParam, "deepObjectParam");
        Utils.checkNotNull(formParam, "formParam");
        Utils.checkNotNull(jsonParam, "jsonParam");
        this.deepObjectParam = deepObjectParam;
        this.formParam = formParam;
        this.jsonParam = jsonParam;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    @JsonIgnore
    public SimpleObject deepObjectParam() {
        return deepObjectParam;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    @JsonIgnore
    public SimpleObject formParam() {
        return formParam;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    @JsonIgnore
    public SimpleObject jsonParam() {
        return jsonParam;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    public MixedQueryParamsRequest withDeepObjectParam(SimpleObject deepObjectParam) {
        Utils.checkNotNull(deepObjectParam, "deepObjectParam");
        this.deepObjectParam = deepObjectParam;
        return this;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    public MixedQueryParamsRequest withFormParam(SimpleObject formParam) {
        Utils.checkNotNull(formParam, "formParam");
        this.formParam = formParam;
        return this;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    public MixedQueryParamsRequest withJsonParam(SimpleObject jsonParam) {
        Utils.checkNotNull(jsonParam, "jsonParam");
        this.jsonParam = jsonParam;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MixedQueryParamsRequest other = (MixedQueryParamsRequest) o;
        return 
            Objects.deepEquals(this.deepObjectParam, other.deepObjectParam) &&
            Objects.deepEquals(this.formParam, other.formParam) &&
            Objects.deepEquals(this.jsonParam, other.jsonParam);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            deepObjectParam,
            formParam,
            jsonParam);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MixedQueryParamsRequest.class,
                "deepObjectParam", deepObjectParam,
                "formParam", formParam,
                "jsonParam", jsonParam);
    }
    
    public final static class Builder {
 
        private SimpleObject deepObjectParam;
 
        private SimpleObject formParam;
 
        private SimpleObject jsonParam;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A simple object that uses all our supported primitive types and enums and has optional properties.
         */
        public Builder deepObjectParam(SimpleObject deepObjectParam) {
            Utils.checkNotNull(deepObjectParam, "deepObjectParam");
            this.deepObjectParam = deepObjectParam;
            return this;
        }

        /**
         * A simple object that uses all our supported primitive types and enums and has optional properties.
         */
        public Builder formParam(SimpleObject formParam) {
            Utils.checkNotNull(formParam, "formParam");
            this.formParam = formParam;
            return this;
        }

        /**
         * A simple object that uses all our supported primitive types and enums and has optional properties.
         */
        public Builder jsonParam(SimpleObject jsonParam) {
            Utils.checkNotNull(jsonParam, "jsonParam");
            this.jsonParam = jsonParam;
            return this;
        }
        
        public MixedQueryParamsRequest build() {
            return new MixedQueryParamsRequest(
                deepObjectParam,
                formParam,
                jsonParam);
        }
    }
}

