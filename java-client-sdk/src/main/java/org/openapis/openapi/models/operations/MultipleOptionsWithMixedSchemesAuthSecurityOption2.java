/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.models.shared.SchemeBasicAuth;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class MultipleOptionsWithMixedSchemesAuthSecurityOption2 {

    @SpeakeasyMetadata("security:scheme=true,type=apiKey,subtype=header,name=x-api-key")
    private String apiKeyAuthNew;

    @SpeakeasyMetadata("security:scheme=true,type=http,subtype=basic")
    private SchemeBasicAuth basicAuth;

    @JsonCreator
    public MultipleOptionsWithMixedSchemesAuthSecurityOption2(
            String apiKeyAuthNew,
            SchemeBasicAuth basicAuth) {
        Utils.checkNotNull(apiKeyAuthNew, "apiKeyAuthNew");
        Utils.checkNotNull(basicAuth, "basicAuth");
        this.apiKeyAuthNew = apiKeyAuthNew;
        this.basicAuth = basicAuth;
    }

    @JsonIgnore
    public String apiKeyAuthNew() {
        return apiKeyAuthNew;
    }

    @JsonIgnore
    public SchemeBasicAuth basicAuth() {
        return basicAuth;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public MultipleOptionsWithMixedSchemesAuthSecurityOption2 withApiKeyAuthNew(String apiKeyAuthNew) {
        Utils.checkNotNull(apiKeyAuthNew, "apiKeyAuthNew");
        this.apiKeyAuthNew = apiKeyAuthNew;
        return this;
    }

    public MultipleOptionsWithMixedSchemesAuthSecurityOption2 withBasicAuth(SchemeBasicAuth basicAuth) {
        Utils.checkNotNull(basicAuth, "basicAuth");
        this.basicAuth = basicAuth;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MultipleOptionsWithMixedSchemesAuthSecurityOption2 other = (MultipleOptionsWithMixedSchemesAuthSecurityOption2) o;
        return 
            Objects.deepEquals(this.apiKeyAuthNew, other.apiKeyAuthNew) &&
            Objects.deepEquals(this.basicAuth, other.basicAuth);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiKeyAuthNew,
            basicAuth);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MultipleOptionsWithMixedSchemesAuthSecurityOption2.class,
                "apiKeyAuthNew", apiKeyAuthNew,
                "basicAuth", basicAuth);
    }
    
    public final static class Builder {
 
        private String apiKeyAuthNew;
 
        private SchemeBasicAuth basicAuth;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder apiKeyAuthNew(String apiKeyAuthNew) {
            Utils.checkNotNull(apiKeyAuthNew, "apiKeyAuthNew");
            this.apiKeyAuthNew = apiKeyAuthNew;
            return this;
        }

        public Builder basicAuth(SchemeBasicAuth basicAuth) {
            Utils.checkNotNull(basicAuth, "basicAuth");
            this.basicAuth = basicAuth;
            return this;
        }
        
        public MultipleOptionsWithMixedSchemesAuthSecurityOption2 build() {
            return new MultipleOptionsWithMixedSchemesAuthSecurityOption2(
                apiKeyAuthNew,
                basicAuth);
        }
    }
}

