/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class MultipleOptionsWithSimpleSchemesAuthSecurity {

    @SpeakeasyMetadata("security:option=true")
    private Optional<? extends MultipleOptionsWithSimpleSchemesAuthSecurityOption1> option1;

    @SpeakeasyMetadata("security:option=true")
    private Optional<? extends MultipleOptionsWithSimpleSchemesAuthSecurityOption2> option2;

    public MultipleOptionsWithSimpleSchemesAuthSecurity(
            Optional<? extends MultipleOptionsWithSimpleSchemesAuthSecurityOption1> option1,
            Optional<? extends MultipleOptionsWithSimpleSchemesAuthSecurityOption2> option2) {
        Utils.checkNotNull(option1, "option1");
        Utils.checkNotNull(option2, "option2");
        this.option1 = option1;
        this.option2 = option2;
    }

    public Optional<? extends MultipleOptionsWithSimpleSchemesAuthSecurityOption1> option1() {
        return option1;
    }

    public Optional<? extends MultipleOptionsWithSimpleSchemesAuthSecurityOption2> option2() {
        return option2;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public MultipleOptionsWithSimpleSchemesAuthSecurity withOption1(MultipleOptionsWithSimpleSchemesAuthSecurityOption1 option1) {
        Utils.checkNotNull(option1, "option1");
        this.option1 = Optional.ofNullable(option1);
        return this;
    }

    public MultipleOptionsWithSimpleSchemesAuthSecurity withOption1(Optional<? extends MultipleOptionsWithSimpleSchemesAuthSecurityOption1> option1) {
        Utils.checkNotNull(option1, "option1");
        this.option1 = option1;
        return this;
    }

    public MultipleOptionsWithSimpleSchemesAuthSecurity withOption2(MultipleOptionsWithSimpleSchemesAuthSecurityOption2 option2) {
        Utils.checkNotNull(option2, "option2");
        this.option2 = Optional.ofNullable(option2);
        return this;
    }

    public MultipleOptionsWithSimpleSchemesAuthSecurity withOption2(Optional<? extends MultipleOptionsWithSimpleSchemesAuthSecurityOption2> option2) {
        Utils.checkNotNull(option2, "option2");
        this.option2 = option2;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MultipleOptionsWithSimpleSchemesAuthSecurity other = (MultipleOptionsWithSimpleSchemesAuthSecurity) o;
        return 
            java.util.Objects.deepEquals(this.option1, other.option1) &&
            java.util.Objects.deepEquals(this.option2, other.option2);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            option1,
            option2);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MultipleOptionsWithSimpleSchemesAuthSecurity.class,
                "option1", option1,
                "option2", option2);
    }
    
    public final static class Builder {
 
        private Optional<? extends MultipleOptionsWithSimpleSchemesAuthSecurityOption1> option1 = Optional.empty();
 
        private Optional<? extends MultipleOptionsWithSimpleSchemesAuthSecurityOption2> option2 = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder option1(MultipleOptionsWithSimpleSchemesAuthSecurityOption1 option1) {
            Utils.checkNotNull(option1, "option1");
            this.option1 = Optional.ofNullable(option1);
            return this;
        }

        public Builder option1(Optional<? extends MultipleOptionsWithSimpleSchemesAuthSecurityOption1> option1) {
            Utils.checkNotNull(option1, "option1");
            this.option1 = option1;
            return this;
        }

        public Builder option2(MultipleOptionsWithSimpleSchemesAuthSecurityOption2 option2) {
            Utils.checkNotNull(option2, "option2");
            this.option2 = Optional.ofNullable(option2);
            return this;
        }

        public Builder option2(Optional<? extends MultipleOptionsWithSimpleSchemesAuthSecurityOption2> option2) {
            Utils.checkNotNull(option2, "option2");
            this.option2 = option2;
            return this;
        }
        
        public MultipleOptionsWithSimpleSchemesAuthSecurity build() {
            return new MultipleOptionsWithSimpleSchemesAuthSecurity(
                option1,
                option2);
        }
    }
}

