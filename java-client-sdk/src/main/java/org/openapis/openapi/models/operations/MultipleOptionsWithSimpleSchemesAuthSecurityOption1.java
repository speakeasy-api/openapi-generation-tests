/* 
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;

public class MultipleOptionsWithSimpleSchemesAuthSecurityOption1 {

    @SpeakeasyMetadata("security:scheme=true,type=apiKey,subtype=header,name=x-api-key")
    private String apiKeyAuthNew;

    @SpeakeasyMetadata("security:scheme=true,type=oauth2,name=Authorization")
    private String oauth2;

    @JsonCreator
    public MultipleOptionsWithSimpleSchemesAuthSecurityOption1(
            String apiKeyAuthNew,
            String oauth2) {
        Utils.checkNotNull(apiKeyAuthNew, "apiKeyAuthNew");
        Utils.checkNotNull(oauth2, "oauth2");
        this.apiKeyAuthNew = apiKeyAuthNew;
        this.oauth2 = oauth2;
    }

    @JsonIgnore
    public String apiKeyAuthNew() {
        return apiKeyAuthNew;
    }

    @JsonIgnore
    public String oauth2() {
        return oauth2;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public MultipleOptionsWithSimpleSchemesAuthSecurityOption1 withApiKeyAuthNew(String apiKeyAuthNew) {
        Utils.checkNotNull(apiKeyAuthNew, "apiKeyAuthNew");
        this.apiKeyAuthNew = apiKeyAuthNew;
        return this;
    }

    public MultipleOptionsWithSimpleSchemesAuthSecurityOption1 withOauth2(String oauth2) {
        Utils.checkNotNull(oauth2, "oauth2");
        this.oauth2 = oauth2;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MultipleOptionsWithSimpleSchemesAuthSecurityOption1 other = (MultipleOptionsWithSimpleSchemesAuthSecurityOption1) o;
        return 
            java.util.Objects.deepEquals(this.apiKeyAuthNew, other.apiKeyAuthNew) &&
            java.util.Objects.deepEquals(this.oauth2, other.oauth2);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            apiKeyAuthNew,
            oauth2);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MultipleOptionsWithSimpleSchemesAuthSecurityOption1.class,
                "apiKeyAuthNew", apiKeyAuthNew,
                "oauth2", oauth2);
    }
    
    public final static class Builder {
 
        private String apiKeyAuthNew;
 
        private String oauth2;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder apiKeyAuthNew(String apiKeyAuthNew) {
            Utils.checkNotNull(apiKeyAuthNew, "apiKeyAuthNew");
            this.apiKeyAuthNew = apiKeyAuthNew;
            return this;
        }

        public Builder oauth2(String oauth2) {
            Utils.checkNotNull(oauth2, "oauth2");
            this.oauth2 = oauth2;
            return this;
        }
        
        public MultipleOptionsWithSimpleSchemesAuthSecurityOption1 build() {
            return new MultipleOptionsWithSimpleSchemesAuthSecurityOption1(
                apiKeyAuthNew,
                oauth2);
        }
    }
}

