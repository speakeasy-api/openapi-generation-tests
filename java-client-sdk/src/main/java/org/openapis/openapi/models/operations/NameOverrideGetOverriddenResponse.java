/* 
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;
/**
 * NameOverrideGetOverriddenResponse - A successful response that contains the simpleObject sent in the request body
 */

public class NameOverrideGetOverriddenResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deepAllOf")
    private Optional<? extends DeepOverriddenAllOf> deepOverriddenAllOf;

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     * https://speakeasy.com/docs - A link to the external docs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("json")
    private Optional<? extends org.openapis.openapi.models.shared.SimpleObject> json;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allOf")
    private Optional<? extends OverriddenAllOf> overriddenAllOf;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("normal")
    private Optional<? extends OverriddenNormal> overriddenNormal;

    @JsonCreator
    public NameOverrideGetOverriddenResponse(
            @JsonProperty("deepOverriddenAllOf") Optional<? extends DeepOverriddenAllOf> deepOverriddenAllOf,
            @JsonProperty("json") Optional<? extends org.openapis.openapi.models.shared.SimpleObject> json,
            @JsonProperty("overriddenAllOf") Optional<? extends OverriddenAllOf> overriddenAllOf,
            @JsonProperty("overriddenNormal") Optional<? extends OverriddenNormal> overriddenNormal) {
        Utils.checkNotNull(deepOverriddenAllOf, "deepOverriddenAllOf");
        Utils.checkNotNull(json, "json");
        Utils.checkNotNull(overriddenAllOf, "overriddenAllOf");
        Utils.checkNotNull(overriddenNormal, "overriddenNormal");
        this.deepOverriddenAllOf = deepOverriddenAllOf;
        this.json = json;
        this.overriddenAllOf = overriddenAllOf;
        this.overriddenNormal = overriddenNormal;
    }
    
    public NameOverrideGetOverriddenResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DeepOverriddenAllOf> deepOverriddenAllOf() {
        return (Optional<DeepOverriddenAllOf>) deepOverriddenAllOf;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     * https://speakeasy.com/docs - A link to the external docs.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<org.openapis.openapi.models.shared.SimpleObject> json() {
        return (Optional<org.openapis.openapi.models.shared.SimpleObject>) json;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OverriddenAllOf> overriddenAllOf() {
        return (Optional<OverriddenAllOf>) overriddenAllOf;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OverriddenNormal> overriddenNormal() {
        return (Optional<OverriddenNormal>) overriddenNormal;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public NameOverrideGetOverriddenResponse withDeepOverriddenAllOf(DeepOverriddenAllOf deepOverriddenAllOf) {
        Utils.checkNotNull(deepOverriddenAllOf, "deepOverriddenAllOf");
        this.deepOverriddenAllOf = Optional.ofNullable(deepOverriddenAllOf);
        return this;
    }

    public NameOverrideGetOverriddenResponse withDeepOverriddenAllOf(Optional<? extends DeepOverriddenAllOf> deepOverriddenAllOf) {
        Utils.checkNotNull(deepOverriddenAllOf, "deepOverriddenAllOf");
        this.deepOverriddenAllOf = deepOverriddenAllOf;
        return this;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     * https://speakeasy.com/docs - A link to the external docs.
     */
    public NameOverrideGetOverriddenResponse withJson(org.openapis.openapi.models.shared.SimpleObject json) {
        Utils.checkNotNull(json, "json");
        this.json = Optional.ofNullable(json);
        return this;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     * https://speakeasy.com/docs - A link to the external docs.
     */
    public NameOverrideGetOverriddenResponse withJson(Optional<? extends org.openapis.openapi.models.shared.SimpleObject> json) {
        Utils.checkNotNull(json, "json");
        this.json = json;
        return this;
    }

    public NameOverrideGetOverriddenResponse withOverriddenAllOf(OverriddenAllOf overriddenAllOf) {
        Utils.checkNotNull(overriddenAllOf, "overriddenAllOf");
        this.overriddenAllOf = Optional.ofNullable(overriddenAllOf);
        return this;
    }

    public NameOverrideGetOverriddenResponse withOverriddenAllOf(Optional<? extends OverriddenAllOf> overriddenAllOf) {
        Utils.checkNotNull(overriddenAllOf, "overriddenAllOf");
        this.overriddenAllOf = overriddenAllOf;
        return this;
    }

    public NameOverrideGetOverriddenResponse withOverriddenNormal(OverriddenNormal overriddenNormal) {
        Utils.checkNotNull(overriddenNormal, "overriddenNormal");
        this.overriddenNormal = Optional.ofNullable(overriddenNormal);
        return this;
    }

    public NameOverrideGetOverriddenResponse withOverriddenNormal(Optional<? extends OverriddenNormal> overriddenNormal) {
        Utils.checkNotNull(overriddenNormal, "overriddenNormal");
        this.overriddenNormal = overriddenNormal;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NameOverrideGetOverriddenResponse other = (NameOverrideGetOverriddenResponse) o;
        return 
            java.util.Objects.deepEquals(this.deepOverriddenAllOf, other.deepOverriddenAllOf) &&
            java.util.Objects.deepEquals(this.json, other.json) &&
            java.util.Objects.deepEquals(this.overriddenAllOf, other.overriddenAllOf) &&
            java.util.Objects.deepEquals(this.overriddenNormal, other.overriddenNormal);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            deepOverriddenAllOf,
            json,
            overriddenAllOf,
            overriddenNormal);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NameOverrideGetOverriddenResponse.class,
                "deepOverriddenAllOf", deepOverriddenAllOf,
                "json", json,
                "overriddenAllOf", overriddenAllOf,
                "overriddenNormal", overriddenNormal);
    }
    
    public final static class Builder {
 
        private Optional<? extends DeepOverriddenAllOf> deepOverriddenAllOf = Optional.empty();
 
        private Optional<? extends org.openapis.openapi.models.shared.SimpleObject> json = Optional.empty();
 
        private Optional<? extends OverriddenAllOf> overriddenAllOf = Optional.empty();
 
        private Optional<? extends OverriddenNormal> overriddenNormal = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder deepOverriddenAllOf(DeepOverriddenAllOf deepOverriddenAllOf) {
            Utils.checkNotNull(deepOverriddenAllOf, "deepOverriddenAllOf");
            this.deepOverriddenAllOf = Optional.ofNullable(deepOverriddenAllOf);
            return this;
        }

        public Builder deepOverriddenAllOf(Optional<? extends DeepOverriddenAllOf> deepOverriddenAllOf) {
            Utils.checkNotNull(deepOverriddenAllOf, "deepOverriddenAllOf");
            this.deepOverriddenAllOf = deepOverriddenAllOf;
            return this;
        }

        /**
         * A simple object that uses all our supported primitive types and enums and has optional properties.
         * https://speakeasy.com/docs - A link to the external docs.
         */
        public Builder json(org.openapis.openapi.models.shared.SimpleObject json) {
            Utils.checkNotNull(json, "json");
            this.json = Optional.ofNullable(json);
            return this;
        }

        /**
         * A simple object that uses all our supported primitive types and enums and has optional properties.
         * https://speakeasy.com/docs - A link to the external docs.
         */
        public Builder json(Optional<? extends org.openapis.openapi.models.shared.SimpleObject> json) {
            Utils.checkNotNull(json, "json");
            this.json = json;
            return this;
        }

        public Builder overriddenAllOf(OverriddenAllOf overriddenAllOf) {
            Utils.checkNotNull(overriddenAllOf, "overriddenAllOf");
            this.overriddenAllOf = Optional.ofNullable(overriddenAllOf);
            return this;
        }

        public Builder overriddenAllOf(Optional<? extends OverriddenAllOf> overriddenAllOf) {
            Utils.checkNotNull(overriddenAllOf, "overriddenAllOf");
            this.overriddenAllOf = overriddenAllOf;
            return this;
        }

        public Builder overriddenNormal(OverriddenNormal overriddenNormal) {
            Utils.checkNotNull(overriddenNormal, "overriddenNormal");
            this.overriddenNormal = Optional.ofNullable(overriddenNormal);
            return this;
        }

        public Builder overriddenNormal(Optional<? extends OverriddenNormal> overriddenNormal) {
            Utils.checkNotNull(overriddenNormal, "overriddenNormal");
            this.overriddenNormal = overriddenNormal;
            return this;
        }
        
        public NameOverrideGetOverriddenResponse build() {
            return new NameOverrideGetOverriddenResponse(
                deepOverriddenAllOf,
                json,
                overriddenAllOf,
                overriddenNormal);
        }
    }
}

