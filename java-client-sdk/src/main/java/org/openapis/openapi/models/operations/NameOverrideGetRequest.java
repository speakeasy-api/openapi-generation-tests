/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class NameOverrideGetRequest {

    /**
     * An enum type
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=enumNameOverride")
    private EnumNameOverride testEnumQueryParam;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=nameOverride")
    private String testQueryParam;

    @JsonCreator
    public NameOverrideGetRequest(
            EnumNameOverride testEnumQueryParam,
            String testQueryParam) {
        Utils.checkNotNull(testEnumQueryParam, "testEnumQueryParam");
        Utils.checkNotNull(testQueryParam, "testQueryParam");
        this.testEnumQueryParam = testEnumQueryParam;
        this.testQueryParam = testQueryParam;
    }

    /**
     * An enum type
     */
    @JsonIgnore
    public EnumNameOverride testEnumQueryParam() {
        return testEnumQueryParam;
    }

    @JsonIgnore
    public String testQueryParam() {
        return testQueryParam;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * An enum type
     */
    public NameOverrideGetRequest withTestEnumQueryParam(EnumNameOverride testEnumQueryParam) {
        Utils.checkNotNull(testEnumQueryParam, "testEnumQueryParam");
        this.testEnumQueryParam = testEnumQueryParam;
        return this;
    }

    public NameOverrideGetRequest withTestQueryParam(String testQueryParam) {
        Utils.checkNotNull(testQueryParam, "testQueryParam");
        this.testQueryParam = testQueryParam;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NameOverrideGetRequest other = (NameOverrideGetRequest) o;
        return 
            java.util.Objects.deepEquals(this.testEnumQueryParam, other.testEnumQueryParam) &&
            java.util.Objects.deepEquals(this.testQueryParam, other.testQueryParam);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            testEnumQueryParam,
            testQueryParam);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NameOverrideGetRequest.class,
                "testEnumQueryParam", testEnumQueryParam,
                "testQueryParam", testQueryParam);
    }
    
    public final static class Builder {
 
        private EnumNameOverride testEnumQueryParam;
 
        private String testQueryParam;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * An enum type
         */
        public Builder testEnumQueryParam(EnumNameOverride testEnumQueryParam) {
            Utils.checkNotNull(testEnumQueryParam, "testEnumQueryParam");
            this.testEnumQueryParam = testEnumQueryParam;
            return this;
        }

        public Builder testQueryParam(String testQueryParam) {
            Utils.checkNotNull(testQueryParam, "testQueryParam");
            this.testQueryParam = testQueryParam;
            return this;
        }
        
        public NameOverrideGetRequest build() {
            return new NameOverrideGetRequest(
                testEnumQueryParam,
                testQueryParam);
        }
    }
}

