/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;
import org.openapitools.jackson.nullable.JsonNullable;


public class NullableRequiredEmptyObjectPostRequestBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NullableOptionalObj")
    private JsonNullable<? extends NullableOptionalObj> nullableOptionalObj;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("NullableRequiredObj")
    private Optional<? extends NullableRequiredObj> nullableRequiredObj;

    @JsonProperty("RequiredObj")
    private RequiredObj requiredObj;

    @JsonCreator
    public NullableRequiredEmptyObjectPostRequestBody(
            @JsonProperty("NullableOptionalObj") JsonNullable<? extends NullableOptionalObj> nullableOptionalObj,
            @JsonProperty("NullableRequiredObj") Optional<? extends NullableRequiredObj> nullableRequiredObj,
            @JsonProperty("RequiredObj") RequiredObj requiredObj) {
        Utils.checkNotNull(nullableOptionalObj, "nullableOptionalObj");
        Utils.checkNotNull(nullableRequiredObj, "nullableRequiredObj");
        Utils.checkNotNull(requiredObj, "requiredObj");
        this.nullableOptionalObj = nullableOptionalObj;
        this.nullableRequiredObj = nullableRequiredObj;
        this.requiredObj = requiredObj;
    }
    
    public NullableRequiredEmptyObjectPostRequestBody(
            RequiredObj requiredObj) {
        this(JsonNullable.undefined(), Optional.empty(), requiredObj);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<NullableOptionalObj> nullableOptionalObj() {
        return (JsonNullable<NullableOptionalObj>) nullableOptionalObj;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<NullableRequiredObj> nullableRequiredObj() {
        return (Optional<NullableRequiredObj>) nullableRequiredObj;
    }

    @JsonIgnore
    public RequiredObj requiredObj() {
        return requiredObj;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public NullableRequiredEmptyObjectPostRequestBody withNullableOptionalObj(NullableOptionalObj nullableOptionalObj) {
        Utils.checkNotNull(nullableOptionalObj, "nullableOptionalObj");
        this.nullableOptionalObj = JsonNullable.of(nullableOptionalObj);
        return this;
    }

    public NullableRequiredEmptyObjectPostRequestBody withNullableOptionalObj(JsonNullable<? extends NullableOptionalObj> nullableOptionalObj) {
        Utils.checkNotNull(nullableOptionalObj, "nullableOptionalObj");
        this.nullableOptionalObj = nullableOptionalObj;
        return this;
    }

    public NullableRequiredEmptyObjectPostRequestBody withNullableRequiredObj(NullableRequiredObj nullableRequiredObj) {
        Utils.checkNotNull(nullableRequiredObj, "nullableRequiredObj");
        this.nullableRequiredObj = Optional.ofNullable(nullableRequiredObj);
        return this;
    }

    public NullableRequiredEmptyObjectPostRequestBody withNullableRequiredObj(Optional<? extends NullableRequiredObj> nullableRequiredObj) {
        Utils.checkNotNull(nullableRequiredObj, "nullableRequiredObj");
        this.nullableRequiredObj = nullableRequiredObj;
        return this;
    }

    public NullableRequiredEmptyObjectPostRequestBody withRequiredObj(RequiredObj requiredObj) {
        Utils.checkNotNull(requiredObj, "requiredObj");
        this.requiredObj = requiredObj;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NullableRequiredEmptyObjectPostRequestBody other = (NullableRequiredEmptyObjectPostRequestBody) o;
        return 
            Objects.deepEquals(this.nullableOptionalObj, other.nullableOptionalObj) &&
            Objects.deepEquals(this.nullableRequiredObj, other.nullableRequiredObj) &&
            Objects.deepEquals(this.requiredObj, other.requiredObj);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            nullableOptionalObj,
            nullableRequiredObj,
            requiredObj);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NullableRequiredEmptyObjectPostRequestBody.class,
                "nullableOptionalObj", nullableOptionalObj,
                "nullableRequiredObj", nullableRequiredObj,
                "requiredObj", requiredObj);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends NullableOptionalObj> nullableOptionalObj = JsonNullable.undefined();
 
        private Optional<? extends NullableRequiredObj> nullableRequiredObj = Optional.empty();
 
        private RequiredObj requiredObj;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder nullableOptionalObj(NullableOptionalObj nullableOptionalObj) {
            Utils.checkNotNull(nullableOptionalObj, "nullableOptionalObj");
            this.nullableOptionalObj = JsonNullable.of(nullableOptionalObj);
            return this;
        }

        public Builder nullableOptionalObj(JsonNullable<? extends NullableOptionalObj> nullableOptionalObj) {
            Utils.checkNotNull(nullableOptionalObj, "nullableOptionalObj");
            this.nullableOptionalObj = nullableOptionalObj;
            return this;
        }

        public Builder nullableRequiredObj(NullableRequiredObj nullableRequiredObj) {
            Utils.checkNotNull(nullableRequiredObj, "nullableRequiredObj");
            this.nullableRequiredObj = Optional.ofNullable(nullableRequiredObj);
            return this;
        }

        public Builder nullableRequiredObj(Optional<? extends NullableRequiredObj> nullableRequiredObj) {
            Utils.checkNotNull(nullableRequiredObj, "nullableRequiredObj");
            this.nullableRequiredObj = nullableRequiredObj;
            return this;
        }

        public Builder requiredObj(RequiredObj requiredObj) {
            Utils.checkNotNull(requiredObj, "requiredObj");
            this.requiredObj = requiredObj;
            return this;
        }
        
        public NullableRequiredEmptyObjectPostRequestBody build() {
            return new NullableRequiredEmptyObjectPostRequestBody(
                nullableOptionalObj,
                nullableRequiredObj,
                requiredObj);
        }
    }
}

