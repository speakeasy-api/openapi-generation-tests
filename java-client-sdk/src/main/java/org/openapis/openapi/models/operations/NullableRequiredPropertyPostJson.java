/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;
import org.openapitools.jackson.nullable.JsonNullable;

public class NullableRequiredPropertyPostJson {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NullableOptionalInt")
    private JsonNullable<? extends Long> nullableOptionalInt;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("NullableRequiredArray")
    private Optional<? extends java.util.List<Double>> nullableRequiredArray;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("NullableRequiredBigIntStr")
    @JsonFormat(shape = JsonFormat.Shape.STRING)
    private Optional<? extends BigInteger> nullableRequiredBigIntStr;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("NullableRequiredDateTime")
    private Optional<? extends OffsetDateTime> nullableRequiredDateTime;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("NullableRequiredDecimalStr")
    @JsonFormat(shape = JsonFormat.Shape.STRING)
    private Optional<? extends BigDecimal> nullableRequiredDecimalStr;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("NullableRequiredEnum")
    private Optional<? extends NullableRequiredPropertyPostNullableRequiredEnum> nullableRequiredEnum;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("NullableRequiredInt")
    private Optional<? extends Long> nullableRequiredInt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("x-speakeasy-test-internal-directives")
    private Optional<? extends java.lang.Object> xSpeakeasyTestInternalDirectives;

    @JsonCreator
    public NullableRequiredPropertyPostJson(
            @JsonProperty("NullableOptionalInt") JsonNullable<? extends Long> nullableOptionalInt,
            @JsonProperty("NullableRequiredArray") Optional<? extends java.util.List<Double>> nullableRequiredArray,
            @JsonProperty("NullableRequiredBigIntStr") Optional<? extends BigInteger> nullableRequiredBigIntStr,
            @JsonProperty("NullableRequiredDateTime") Optional<? extends OffsetDateTime> nullableRequiredDateTime,
            @JsonProperty("NullableRequiredDecimalStr") Optional<? extends BigDecimal> nullableRequiredDecimalStr,
            @JsonProperty("NullableRequiredEnum") Optional<? extends NullableRequiredPropertyPostNullableRequiredEnum> nullableRequiredEnum,
            @JsonProperty("NullableRequiredInt") Optional<? extends Long> nullableRequiredInt,
            @JsonProperty("x-speakeasy-test-internal-directives") Optional<? extends java.lang.Object> xSpeakeasyTestInternalDirectives) {
        Utils.checkNotNull(nullableOptionalInt, "nullableOptionalInt");
        Utils.checkNotNull(nullableRequiredArray, "nullableRequiredArray");
        Utils.checkNotNull(nullableRequiredBigIntStr, "nullableRequiredBigIntStr");
        Utils.checkNotNull(nullableRequiredDateTime, "nullableRequiredDateTime");
        Utils.checkNotNull(nullableRequiredDecimalStr, "nullableRequiredDecimalStr");
        Utils.checkNotNull(nullableRequiredEnum, "nullableRequiredEnum");
        Utils.checkNotNull(nullableRequiredInt, "nullableRequiredInt");
        Utils.checkNotNull(xSpeakeasyTestInternalDirectives, "xSpeakeasyTestInternalDirectives");
        this.nullableOptionalInt = nullableOptionalInt;
        this.nullableRequiredArray = nullableRequiredArray;
        this.nullableRequiredBigIntStr = nullableRequiredBigIntStr;
        this.nullableRequiredDateTime = nullableRequiredDateTime;
        this.nullableRequiredDecimalStr = nullableRequiredDecimalStr;
        this.nullableRequiredEnum = nullableRequiredEnum;
        this.nullableRequiredInt = nullableRequiredInt;
        this.xSpeakeasyTestInternalDirectives = xSpeakeasyTestInternalDirectives;
    }
    
    public NullableRequiredPropertyPostJson() {
        this(JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Long> nullableOptionalInt() {
        return (JsonNullable<Long>) nullableOptionalInt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<Double>> nullableRequiredArray() {
        return (Optional<java.util.List<Double>>) nullableRequiredArray;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BigInteger> nullableRequiredBigIntStr() {
        return (Optional<BigInteger>) nullableRequiredBigIntStr;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OffsetDateTime> nullableRequiredDateTime() {
        return (Optional<OffsetDateTime>) nullableRequiredDateTime;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BigDecimal> nullableRequiredDecimalStr() {
        return (Optional<BigDecimal>) nullableRequiredDecimalStr;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<NullableRequiredPropertyPostNullableRequiredEnum> nullableRequiredEnum() {
        return (Optional<NullableRequiredPropertyPostNullableRequiredEnum>) nullableRequiredEnum;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> nullableRequiredInt() {
        return (Optional<Long>) nullableRequiredInt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.lang.Object> xSpeakeasyTestInternalDirectives() {
        return (Optional<java.lang.Object>) xSpeakeasyTestInternalDirectives;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public NullableRequiredPropertyPostJson withNullableOptionalInt(long nullableOptionalInt) {
        Utils.checkNotNull(nullableOptionalInt, "nullableOptionalInt");
        this.nullableOptionalInt = JsonNullable.of(nullableOptionalInt);
        return this;
    }

    public NullableRequiredPropertyPostJson withNullableOptionalInt(JsonNullable<? extends Long> nullableOptionalInt) {
        Utils.checkNotNull(nullableOptionalInt, "nullableOptionalInt");
        this.nullableOptionalInt = nullableOptionalInt;
        return this;
    }

    public NullableRequiredPropertyPostJson withNullableRequiredArray(java.util.List<Double> nullableRequiredArray) {
        Utils.checkNotNull(nullableRequiredArray, "nullableRequiredArray");
        this.nullableRequiredArray = Optional.ofNullable(nullableRequiredArray);
        return this;
    }

    public NullableRequiredPropertyPostJson withNullableRequiredArray(Optional<? extends java.util.List<Double>> nullableRequiredArray) {
        Utils.checkNotNull(nullableRequiredArray, "nullableRequiredArray");
        this.nullableRequiredArray = nullableRequiredArray;
        return this;
    }

    public NullableRequiredPropertyPostJson withNullableRequiredBigIntStr(BigInteger nullableRequiredBigIntStr) {
        Utils.checkNotNull(nullableRequiredBigIntStr, "nullableRequiredBigIntStr");
        this.nullableRequiredBigIntStr = Optional.ofNullable(nullableRequiredBigIntStr);
        return this;
    }

    public NullableRequiredPropertyPostJson withNullableRequiredBigIntStr(long nullableRequiredBigIntStr) {
        this.nullableRequiredBigIntStr = Optional.of(BigInteger.valueOf(nullableRequiredBigIntStr));
        return this;
    }

    public NullableRequiredPropertyPostJson withNullableRequiredBigIntStr(Optional<? extends BigInteger> nullableRequiredBigIntStr) {
        Utils.checkNotNull(nullableRequiredBigIntStr, "nullableRequiredBigIntStr");
        this.nullableRequiredBigIntStr = nullableRequiredBigIntStr;
        return this;
    }

    public NullableRequiredPropertyPostJson withNullableRequiredDateTime(OffsetDateTime nullableRequiredDateTime) {
        Utils.checkNotNull(nullableRequiredDateTime, "nullableRequiredDateTime");
        this.nullableRequiredDateTime = Optional.ofNullable(nullableRequiredDateTime);
        return this;
    }

    public NullableRequiredPropertyPostJson withNullableRequiredDateTime(Optional<? extends OffsetDateTime> nullableRequiredDateTime) {
        Utils.checkNotNull(nullableRequiredDateTime, "nullableRequiredDateTime");
        this.nullableRequiredDateTime = nullableRequiredDateTime;
        return this;
    }

    public NullableRequiredPropertyPostJson withNullableRequiredDecimalStr(BigDecimal nullableRequiredDecimalStr) {
        Utils.checkNotNull(nullableRequiredDecimalStr, "nullableRequiredDecimalStr");
        this.nullableRequiredDecimalStr = Optional.ofNullable(nullableRequiredDecimalStr);
        return this;
    }

    public NullableRequiredPropertyPostJson withNullableRequiredDecimalStr(double nullableRequiredDecimalStr) {
        this.nullableRequiredDecimalStr = Optional.of(BigDecimal.valueOf(nullableRequiredDecimalStr));
        return this;
    }

    public NullableRequiredPropertyPostJson withNullableRequiredDecimalStr(Optional<? extends BigDecimal> nullableRequiredDecimalStr) {
        Utils.checkNotNull(nullableRequiredDecimalStr, "nullableRequiredDecimalStr");
        this.nullableRequiredDecimalStr = nullableRequiredDecimalStr;
        return this;
    }

    public NullableRequiredPropertyPostJson withNullableRequiredEnum(NullableRequiredPropertyPostNullableRequiredEnum nullableRequiredEnum) {
        Utils.checkNotNull(nullableRequiredEnum, "nullableRequiredEnum");
        this.nullableRequiredEnum = Optional.ofNullable(nullableRequiredEnum);
        return this;
    }

    public NullableRequiredPropertyPostJson withNullableRequiredEnum(Optional<? extends NullableRequiredPropertyPostNullableRequiredEnum> nullableRequiredEnum) {
        Utils.checkNotNull(nullableRequiredEnum, "nullableRequiredEnum");
        this.nullableRequiredEnum = nullableRequiredEnum;
        return this;
    }

    public NullableRequiredPropertyPostJson withNullableRequiredInt(long nullableRequiredInt) {
        Utils.checkNotNull(nullableRequiredInt, "nullableRequiredInt");
        this.nullableRequiredInt = Optional.ofNullable(nullableRequiredInt);
        return this;
    }

    public NullableRequiredPropertyPostJson withNullableRequiredInt(Optional<? extends Long> nullableRequiredInt) {
        Utils.checkNotNull(nullableRequiredInt, "nullableRequiredInt");
        this.nullableRequiredInt = nullableRequiredInt;
        return this;
    }

    public NullableRequiredPropertyPostJson withXSpeakeasyTestInternalDirectives(java.lang.Object xSpeakeasyTestInternalDirectives) {
        Utils.checkNotNull(xSpeakeasyTestInternalDirectives, "xSpeakeasyTestInternalDirectives");
        this.xSpeakeasyTestInternalDirectives = Optional.ofNullable(xSpeakeasyTestInternalDirectives);
        return this;
    }

    public NullableRequiredPropertyPostJson withXSpeakeasyTestInternalDirectives(Optional<? extends java.lang.Object> xSpeakeasyTestInternalDirectives) {
        Utils.checkNotNull(xSpeakeasyTestInternalDirectives, "xSpeakeasyTestInternalDirectives");
        this.xSpeakeasyTestInternalDirectives = xSpeakeasyTestInternalDirectives;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NullableRequiredPropertyPostJson other = (NullableRequiredPropertyPostJson) o;
        return 
            java.util.Objects.deepEquals(this.nullableOptionalInt, other.nullableOptionalInt) &&
            java.util.Objects.deepEquals(this.nullableRequiredArray, other.nullableRequiredArray) &&
            java.util.Objects.deepEquals(this.nullableRequiredBigIntStr, other.nullableRequiredBigIntStr) &&
            java.util.Objects.deepEquals(this.nullableRequiredDateTime, other.nullableRequiredDateTime) &&
            java.util.Objects.deepEquals(this.nullableRequiredDecimalStr, other.nullableRequiredDecimalStr) &&
            java.util.Objects.deepEquals(this.nullableRequiredEnum, other.nullableRequiredEnum) &&
            java.util.Objects.deepEquals(this.nullableRequiredInt, other.nullableRequiredInt) &&
            java.util.Objects.deepEquals(this.xSpeakeasyTestInternalDirectives, other.xSpeakeasyTestInternalDirectives);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            nullableOptionalInt,
            nullableRequiredArray,
            nullableRequiredBigIntStr,
            nullableRequiredDateTime,
            nullableRequiredDecimalStr,
            nullableRequiredEnum,
            nullableRequiredInt,
            xSpeakeasyTestInternalDirectives);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NullableRequiredPropertyPostJson.class,
                "nullableOptionalInt", nullableOptionalInt,
                "nullableRequiredArray", nullableRequiredArray,
                "nullableRequiredBigIntStr", nullableRequiredBigIntStr,
                "nullableRequiredDateTime", nullableRequiredDateTime,
                "nullableRequiredDecimalStr", nullableRequiredDecimalStr,
                "nullableRequiredEnum", nullableRequiredEnum,
                "nullableRequiredInt", nullableRequiredInt,
                "xSpeakeasyTestInternalDirectives", xSpeakeasyTestInternalDirectives);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends Long> nullableOptionalInt = JsonNullable.undefined();
 
        private Optional<? extends java.util.List<Double>> nullableRequiredArray = Optional.empty();
 
        private Optional<? extends BigInteger> nullableRequiredBigIntStr = Optional.empty();
 
        private Optional<? extends OffsetDateTime> nullableRequiredDateTime = Optional.empty();
 
        private Optional<? extends BigDecimal> nullableRequiredDecimalStr = Optional.empty();
 
        private Optional<? extends NullableRequiredPropertyPostNullableRequiredEnum> nullableRequiredEnum = Optional.empty();
 
        private Optional<? extends Long> nullableRequiredInt = Optional.empty();
 
        private Optional<? extends java.lang.Object> xSpeakeasyTestInternalDirectives = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder nullableOptionalInt(long nullableOptionalInt) {
            Utils.checkNotNull(nullableOptionalInt, "nullableOptionalInt");
            this.nullableOptionalInt = JsonNullable.of(nullableOptionalInt);
            return this;
        }

        public Builder nullableOptionalInt(JsonNullable<? extends Long> nullableOptionalInt) {
            Utils.checkNotNull(nullableOptionalInt, "nullableOptionalInt");
            this.nullableOptionalInt = nullableOptionalInt;
            return this;
        }

        public Builder nullableRequiredArray(java.util.List<Double> nullableRequiredArray) {
            Utils.checkNotNull(nullableRequiredArray, "nullableRequiredArray");
            this.nullableRequiredArray = Optional.ofNullable(nullableRequiredArray);
            return this;
        }

        public Builder nullableRequiredArray(Optional<? extends java.util.List<Double>> nullableRequiredArray) {
            Utils.checkNotNull(nullableRequiredArray, "nullableRequiredArray");
            this.nullableRequiredArray = nullableRequiredArray;
            return this;
        }

        public Builder nullableRequiredBigIntStr(BigInteger nullableRequiredBigIntStr) {
            Utils.checkNotNull(nullableRequiredBigIntStr, "nullableRequiredBigIntStr");
            this.nullableRequiredBigIntStr = Optional.ofNullable(nullableRequiredBigIntStr);
            return this;
        }

        public Builder nullableRequiredBigIntStr(long nullableRequiredBigIntStr) {
            this.nullableRequiredBigIntStr = Optional.of(BigInteger.valueOf(nullableRequiredBigIntStr));
            return this;
        }

        public Builder nullableRequiredBigIntStr(Optional<? extends BigInteger> nullableRequiredBigIntStr) {
            Utils.checkNotNull(nullableRequiredBigIntStr, "nullableRequiredBigIntStr");
            this.nullableRequiredBigIntStr = nullableRequiredBigIntStr;
            return this;
        }

        public Builder nullableRequiredDateTime(OffsetDateTime nullableRequiredDateTime) {
            Utils.checkNotNull(nullableRequiredDateTime, "nullableRequiredDateTime");
            this.nullableRequiredDateTime = Optional.ofNullable(nullableRequiredDateTime);
            return this;
        }

        public Builder nullableRequiredDateTime(Optional<? extends OffsetDateTime> nullableRequiredDateTime) {
            Utils.checkNotNull(nullableRequiredDateTime, "nullableRequiredDateTime");
            this.nullableRequiredDateTime = nullableRequiredDateTime;
            return this;
        }

        public Builder nullableRequiredDecimalStr(BigDecimal nullableRequiredDecimalStr) {
            Utils.checkNotNull(nullableRequiredDecimalStr, "nullableRequiredDecimalStr");
            this.nullableRequiredDecimalStr = Optional.ofNullable(nullableRequiredDecimalStr);
            return this;
        }

        public Builder nullableRequiredDecimalStr(double nullableRequiredDecimalStr) {
            this.nullableRequiredDecimalStr = Optional.of(BigDecimal.valueOf(nullableRequiredDecimalStr));
            return this;
        }

        public Builder nullableRequiredDecimalStr(Optional<? extends BigDecimal> nullableRequiredDecimalStr) {
            Utils.checkNotNull(nullableRequiredDecimalStr, "nullableRequiredDecimalStr");
            this.nullableRequiredDecimalStr = nullableRequiredDecimalStr;
            return this;
        }

        public Builder nullableRequiredEnum(NullableRequiredPropertyPostNullableRequiredEnum nullableRequiredEnum) {
            Utils.checkNotNull(nullableRequiredEnum, "nullableRequiredEnum");
            this.nullableRequiredEnum = Optional.ofNullable(nullableRequiredEnum);
            return this;
        }

        public Builder nullableRequiredEnum(Optional<? extends NullableRequiredPropertyPostNullableRequiredEnum> nullableRequiredEnum) {
            Utils.checkNotNull(nullableRequiredEnum, "nullableRequiredEnum");
            this.nullableRequiredEnum = nullableRequiredEnum;
            return this;
        }

        public Builder nullableRequiredInt(long nullableRequiredInt) {
            Utils.checkNotNull(nullableRequiredInt, "nullableRequiredInt");
            this.nullableRequiredInt = Optional.ofNullable(nullableRequiredInt);
            return this;
        }

        public Builder nullableRequiredInt(Optional<? extends Long> nullableRequiredInt) {
            Utils.checkNotNull(nullableRequiredInt, "nullableRequiredInt");
            this.nullableRequiredInt = nullableRequiredInt;
            return this;
        }

        public Builder xSpeakeasyTestInternalDirectives(java.lang.Object xSpeakeasyTestInternalDirectives) {
            Utils.checkNotNull(xSpeakeasyTestInternalDirectives, "xSpeakeasyTestInternalDirectives");
            this.xSpeakeasyTestInternalDirectives = Optional.ofNullable(xSpeakeasyTestInternalDirectives);
            return this;
        }

        public Builder xSpeakeasyTestInternalDirectives(Optional<? extends java.lang.Object> xSpeakeasyTestInternalDirectives) {
            Utils.checkNotNull(xSpeakeasyTestInternalDirectives, "xSpeakeasyTestInternalDirectives");
            this.xSpeakeasyTestInternalDirectives = xSpeakeasyTestInternalDirectives;
            return this;
        }
        
        public NullableRequiredPropertyPostJson build() {
            return new NullableRequiredPropertyPostJson(
                nullableOptionalInt,
                nullableRequiredArray,
                nullableRequiredBigIntStr,
                nullableRequiredDateTime,
                nullableRequiredDecimalStr,
                nullableRequiredEnum,
                nullableRequiredInt,
                xSpeakeasyTestInternalDirectives);
        }
    }
}

