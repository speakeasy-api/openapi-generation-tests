/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class Oauth2AuthNewSecurity {

    @SpeakeasyMetadata("security:scheme=true,type=oauth2,name=Authorization")
    private String oauth2;

    public Oauth2AuthNewSecurity(
            String oauth2) {
        Utils.checkNotNull(oauth2, "oauth2");
        this.oauth2 = oauth2;
    }

    public String oauth2() {
        return oauth2;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Oauth2AuthNewSecurity withOauth2(String oauth2) {
        Utils.checkNotNull(oauth2, "oauth2");
        this.oauth2 = oauth2;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Oauth2AuthNewSecurity other = (Oauth2AuthNewSecurity) o;
        return 
            java.util.Objects.deepEquals(this.oauth2, other.oauth2);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            oauth2);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Oauth2AuthNewSecurity.class,
                "oauth2", oauth2);
    }
    
    public final static class Builder {
 
        private String oauth2;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder oauth2(String oauth2) {
            Utils.checkNotNull(oauth2, "oauth2");
            this.oauth2 = oauth2;
            return this;
        }
        
        public Oauth2AuthNewSecurity build() {
            return new Oauth2AuthNewSecurity(
                oauth2);
        }
    }
}

