/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;

/**
 * ObjArrParam
 */

public class ObjArrParam {

    @SpeakeasyMetadata("queryParam:name=arr")
    private Optional<? extends List<String>> arr;

    @JsonCreator
    public ObjArrParam(
            Optional<? extends List<String>> arr) {
        Utils.checkNotNull(arr, "arr");
        this.arr = arr;
    }
    
    public ObjArrParam() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> arr() {
        return (Optional<List<String>>) arr;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ObjArrParam withArr(List<String> arr) {
        Utils.checkNotNull(arr, "arr");
        this.arr = Optional.ofNullable(arr);
        return this;
    }

    public ObjArrParam withArr(Optional<? extends List<String>> arr) {
        Utils.checkNotNull(arr, "arr");
        this.arr = arr;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ObjArrParam other = (ObjArrParam) o;
        return 
            Objects.deepEquals(this.arr, other.arr);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            arr);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ObjArrParam.class,
                "arr", arr);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<String>> arr = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder arr(List<String> arr) {
            Utils.checkNotNull(arr, "arr");
            this.arr = Optional.ofNullable(arr);
            return this;
        }

        public Builder arr(Optional<? extends List<String>> arr) {
            Utils.checkNotNull(arr, "arr");
            this.arr = arr;
            return this;
        }
        
        public ObjArrParam build() {
            return new ObjArrParam(
                arr);
        }
    }
}

