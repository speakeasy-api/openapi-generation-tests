/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;

/**
 * ObjParam
 */

public class ObjParam {

    @SpeakeasyMetadata("queryParam:name=encoded_count")
    private Optional<String> encodedCount;

    @SpeakeasyMetadata("queryParam:name=encoded_term")
    private Optional<String> encodedTerm;

    @JsonCreator
    public ObjParam(
            Optional<String> encodedCount,
            Optional<String> encodedTerm) {
        Utils.checkNotNull(encodedCount, "encodedCount");
        Utils.checkNotNull(encodedTerm, "encodedTerm");
        this.encodedCount = encodedCount;
        this.encodedTerm = encodedTerm;
    }
    
    public ObjParam() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> encodedCount() {
        return encodedCount;
    }

    @JsonIgnore
    public Optional<String> encodedTerm() {
        return encodedTerm;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ObjParam withEncodedCount(String encodedCount) {
        Utils.checkNotNull(encodedCount, "encodedCount");
        this.encodedCount = Optional.ofNullable(encodedCount);
        return this;
    }

    public ObjParam withEncodedCount(Optional<String> encodedCount) {
        Utils.checkNotNull(encodedCount, "encodedCount");
        this.encodedCount = encodedCount;
        return this;
    }

    public ObjParam withEncodedTerm(String encodedTerm) {
        Utils.checkNotNull(encodedTerm, "encodedTerm");
        this.encodedTerm = Optional.ofNullable(encodedTerm);
        return this;
    }

    public ObjParam withEncodedTerm(Optional<String> encodedTerm) {
        Utils.checkNotNull(encodedTerm, "encodedTerm");
        this.encodedTerm = encodedTerm;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ObjParam other = (ObjParam) o;
        return 
            Objects.deepEquals(this.encodedCount, other.encodedCount) &&
            Objects.deepEquals(this.encodedTerm, other.encodedTerm);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            encodedCount,
            encodedTerm);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ObjParam.class,
                "encodedCount", encodedCount,
                "encodedTerm", encodedTerm);
    }
    
    public final static class Builder {
 
        private Optional<String> encodedCount = Optional.empty();
 
        private Optional<String> encodedTerm = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder encodedCount(String encodedCount) {
            Utils.checkNotNull(encodedCount, "encodedCount");
            this.encodedCount = Optional.ofNullable(encodedCount);
            return this;
        }

        public Builder encodedCount(Optional<String> encodedCount) {
            Utils.checkNotNull(encodedCount, "encodedCount");
            this.encodedCount = encodedCount;
            return this;
        }

        public Builder encodedTerm(String encodedTerm) {
            Utils.checkNotNull(encodedTerm, "encodedTerm");
            this.encodedTerm = Optional.ofNullable(encodedTerm);
            return this;
        }

        public Builder encodedTerm(Optional<String> encodedTerm) {
            Utils.checkNotNull(encodedTerm, "encodedTerm");
            this.encodedTerm = encodedTerm;
            return this;
        }
        
        public ObjParam build() {
            return new ObjParam(
                encodedCount,
                encodedTerm);
        }
    }
}

