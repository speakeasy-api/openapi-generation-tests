/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;

/**
 * ObjParamExploded
 */

public class ObjParamExploded {

    @SpeakeasyMetadata("queryParam:name=item_count")
    private Optional<String> itemCount;

    @SpeakeasyMetadata("queryParam:name=search_term")
    private Optional<String> searchTerm;

    @JsonCreator
    public ObjParamExploded(
            Optional<String> itemCount,
            Optional<String> searchTerm) {
        Utils.checkNotNull(itemCount, "itemCount");
        Utils.checkNotNull(searchTerm, "searchTerm");
        this.itemCount = itemCount;
        this.searchTerm = searchTerm;
    }
    
    public ObjParamExploded() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> itemCount() {
        return itemCount;
    }

    @JsonIgnore
    public Optional<String> searchTerm() {
        return searchTerm;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ObjParamExploded withItemCount(String itemCount) {
        Utils.checkNotNull(itemCount, "itemCount");
        this.itemCount = Optional.ofNullable(itemCount);
        return this;
    }

    public ObjParamExploded withItemCount(Optional<String> itemCount) {
        Utils.checkNotNull(itemCount, "itemCount");
        this.itemCount = itemCount;
        return this;
    }

    public ObjParamExploded withSearchTerm(String searchTerm) {
        Utils.checkNotNull(searchTerm, "searchTerm");
        this.searchTerm = Optional.ofNullable(searchTerm);
        return this;
    }

    public ObjParamExploded withSearchTerm(Optional<String> searchTerm) {
        Utils.checkNotNull(searchTerm, "searchTerm");
        this.searchTerm = searchTerm;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ObjParamExploded other = (ObjParamExploded) o;
        return 
            Objects.deepEquals(this.itemCount, other.itemCount) &&
            Objects.deepEquals(this.searchTerm, other.searchTerm);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            itemCount,
            searchTerm);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ObjParamExploded.class,
                "itemCount", itemCount,
                "searchTerm", searchTerm);
    }
    
    public final static class Builder {
 
        private Optional<String> itemCount = Optional.empty();
 
        private Optional<String> searchTerm = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder itemCount(String itemCount) {
            Utils.checkNotNull(itemCount, "itemCount");
            this.itemCount = Optional.ofNullable(itemCount);
            return this;
        }

        public Builder itemCount(Optional<String> itemCount) {
            Utils.checkNotNull(itemCount, "itemCount");
            this.itemCount = itemCount;
            return this;
        }

        public Builder searchTerm(String searchTerm) {
            Utils.checkNotNull(searchTerm, "searchTerm");
            this.searchTerm = Optional.ofNullable(searchTerm);
            return this;
        }

        public Builder searchTerm(Optional<String> searchTerm) {
            Utils.checkNotNull(searchTerm, "searchTerm");
            this.searchTerm = searchTerm;
            return this;
        }
        
        public ObjParamExploded build() {
            return new ObjParamExploded(
                itemCount,
                searchTerm);
        }
    }
}

