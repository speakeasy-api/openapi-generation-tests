/* 
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

public class OneOfOverlappingObjectsRequestBody {

    @JsonProperty("field1")
    private String field1;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("field2")
    private Optional<? extends Boolean> field2;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("field3")
    private Optional<? extends Double> field3;

    @JsonCreator
    public OneOfOverlappingObjectsRequestBody(
            @JsonProperty("field1") String field1,
            @JsonProperty("field2") Optional<? extends Boolean> field2,
            @JsonProperty("field3") Optional<? extends Double> field3) {
        Utils.checkNotNull(field1, "field1");
        Utils.checkNotNull(field2, "field2");
        Utils.checkNotNull(field3, "field3");
        this.field1 = field1;
        this.field2 = field2;
        this.field3 = field3;
    }
    
    public OneOfOverlappingObjectsRequestBody(
            String field1) {
        this(field1, Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public String field1() {
        return field1;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> field2() {
        return (Optional<Boolean>) field2;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> field3() {
        return (Optional<Double>) field3;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public OneOfOverlappingObjectsRequestBody withField1(String field1) {
        Utils.checkNotNull(field1, "field1");
        this.field1 = field1;
        return this;
    }

    public OneOfOverlappingObjectsRequestBody withField2(boolean field2) {
        Utils.checkNotNull(field2, "field2");
        this.field2 = Optional.ofNullable(field2);
        return this;
    }

    public OneOfOverlappingObjectsRequestBody withField2(Optional<? extends Boolean> field2) {
        Utils.checkNotNull(field2, "field2");
        this.field2 = field2;
        return this;
    }

    public OneOfOverlappingObjectsRequestBody withField3(double field3) {
        Utils.checkNotNull(field3, "field3");
        this.field3 = Optional.ofNullable(field3);
        return this;
    }

    public OneOfOverlappingObjectsRequestBody withField3(Optional<? extends Double> field3) {
        Utils.checkNotNull(field3, "field3");
        this.field3 = field3;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OneOfOverlappingObjectsRequestBody other = (OneOfOverlappingObjectsRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.field1, other.field1) &&
            java.util.Objects.deepEquals(this.field2, other.field2) &&
            java.util.Objects.deepEquals(this.field3, other.field3);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            field1,
            field2,
            field3);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OneOfOverlappingObjectsRequestBody.class,
                "field1", field1,
                "field2", field2,
                "field3", field3);
    }
    
    public final static class Builder {
 
        private String field1;
 
        private Optional<? extends Boolean> field2 = Optional.empty();
 
        private Optional<? extends Double> field3 = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder field1(String field1) {
            Utils.checkNotNull(field1, "field1");
            this.field1 = field1;
            return this;
        }

        public Builder field2(boolean field2) {
            Utils.checkNotNull(field2, "field2");
            this.field2 = Optional.ofNullable(field2);
            return this;
        }

        public Builder field2(Optional<? extends Boolean> field2) {
            Utils.checkNotNull(field2, "field2");
            this.field2 = field2;
            return this;
        }

        public Builder field3(double field3) {
            Utils.checkNotNull(field3, "field3");
            this.field3 = Optional.ofNullable(field3);
            return this;
        }

        public Builder field3(Optional<? extends Double> field3) {
            Utils.checkNotNull(field3, "field3");
            this.field3 = field3;
            return this;
        }
        
        public OneOfOverlappingObjectsRequestBody build() {
            return new OneOfOverlappingObjectsRequestBody(
                field1,
                field2,
                field3);
        }
    }
}

