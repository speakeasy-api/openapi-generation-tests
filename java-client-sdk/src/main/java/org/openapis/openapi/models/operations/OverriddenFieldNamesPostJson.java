/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

public class OverriddenFieldNamesPostJson {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("int")
    private Optional<? extends Long> outInt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("str")
    private Optional<? extends String> outStr;

    @JsonCreator
    public OverriddenFieldNamesPostJson(
            @JsonProperty("outInt") Optional<? extends Long> outInt,
            @JsonProperty("outStr") Optional<? extends String> outStr) {
        Utils.checkNotNull(outInt, "outInt");
        Utils.checkNotNull(outStr, "outStr");
        this.outInt = outInt;
        this.outStr = outStr;
    }
    
    public OverriddenFieldNamesPostJson() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> outInt() {
        return (Optional<Long>) outInt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> outStr() {
        return (Optional<String>) outStr;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public OverriddenFieldNamesPostJson withOutInt(long outInt) {
        Utils.checkNotNull(outInt, "outInt");
        this.outInt = Optional.ofNullable(outInt);
        return this;
    }

    public OverriddenFieldNamesPostJson withOutInt(Optional<? extends Long> outInt) {
        Utils.checkNotNull(outInt, "outInt");
        this.outInt = outInt;
        return this;
    }

    public OverriddenFieldNamesPostJson withOutStr(String outStr) {
        Utils.checkNotNull(outStr, "outStr");
        this.outStr = Optional.ofNullable(outStr);
        return this;
    }

    public OverriddenFieldNamesPostJson withOutStr(Optional<? extends String> outStr) {
        Utils.checkNotNull(outStr, "outStr");
        this.outStr = outStr;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OverriddenFieldNamesPostJson other = (OverriddenFieldNamesPostJson) o;
        return 
            java.util.Objects.deepEquals(this.outInt, other.outInt) &&
            java.util.Objects.deepEquals(this.outStr, other.outStr);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            outInt,
            outStr);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OverriddenFieldNamesPostJson.class,
                "outInt", outInt,
                "outStr", outStr);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> outInt = Optional.empty();
 
        private Optional<? extends String> outStr = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder outInt(long outInt) {
            Utils.checkNotNull(outInt, "outInt");
            this.outInt = Optional.ofNullable(outInt);
            return this;
        }

        public Builder outInt(Optional<? extends Long> outInt) {
            Utils.checkNotNull(outInt, "outInt");
            this.outInt = outInt;
            return this;
        }

        public Builder outStr(String outStr) {
            Utils.checkNotNull(outStr, "outStr");
            this.outStr = Optional.ofNullable(outStr);
            return this;
        }

        public Builder outStr(Optional<? extends String> outStr) {
            Utils.checkNotNull(outStr, "outStr");
            this.outStr = outStr;
            return this;
        }
        
        public OverriddenFieldNamesPostJson build() {
            return new OverriddenFieldNamesPostJson(
                outInt,
                outStr);
        }
    }
}

