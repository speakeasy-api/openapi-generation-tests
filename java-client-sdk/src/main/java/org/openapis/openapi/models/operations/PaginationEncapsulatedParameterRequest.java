/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class PaginationEncapsulatedParameterRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=cursor")
    private Optional<Long> cursor;

    @SpeakeasyMetadata("header:style=simple,explode=false,name=headerParam")
    private Optional<String> headerParam;

    @JsonCreator
    public PaginationEncapsulatedParameterRequest(
            Optional<Long> cursor,
            Optional<String> headerParam) {
        Utils.checkNotNull(cursor, "cursor");
        Utils.checkNotNull(headerParam, "headerParam");
        this.cursor = cursor;
        this.headerParam = headerParam;
    }
    
    public PaginationEncapsulatedParameterRequest() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Long> cursor() {
        return cursor;
    }

    @JsonIgnore
    public Optional<String> headerParam() {
        return headerParam;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PaginationEncapsulatedParameterRequest withCursor(long cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = Optional.ofNullable(cursor);
        return this;
    }

    public PaginationEncapsulatedParameterRequest withCursor(Optional<Long> cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = cursor;
        return this;
    }

    public PaginationEncapsulatedParameterRequest withHeaderParam(String headerParam) {
        Utils.checkNotNull(headerParam, "headerParam");
        this.headerParam = Optional.ofNullable(headerParam);
        return this;
    }

    public PaginationEncapsulatedParameterRequest withHeaderParam(Optional<String> headerParam) {
        Utils.checkNotNull(headerParam, "headerParam");
        this.headerParam = headerParam;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaginationEncapsulatedParameterRequest other = (PaginationEncapsulatedParameterRequest) o;
        return 
            Objects.deepEquals(this.cursor, other.cursor) &&
            Objects.deepEquals(this.headerParam, other.headerParam);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            cursor,
            headerParam);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaginationEncapsulatedParameterRequest.class,
                "cursor", cursor,
                "headerParam", headerParam);
    }
    
    public final static class Builder {
 
        private Optional<Long> cursor = Optional.empty();
 
        private Optional<String> headerParam = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder cursor(long cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        public Builder cursor(Optional<Long> cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = cursor;
            return this;
        }

        public Builder headerParam(String headerParam) {
            Utils.checkNotNull(headerParam, "headerParam");
            this.headerParam = Optional.ofNullable(headerParam);
            return this;
        }

        public Builder headerParam(Optional<String> headerParam) {
            Utils.checkNotNull(headerParam, "headerParam");
            this.headerParam = headerParam;
            return this;
        }
        
        public PaginationEncapsulatedParameterRequest build() {
            return new PaginationEncapsulatedParameterRequest(
                cursor,
                headerParam);
        }
    }
}

