/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import org.openapis.openapi.utils.Utils;

/**
 * PaginationLimitOffsetDeepOutputsPageBodyRes - OK
 */

public class PaginationLimitOffsetDeepOutputsPageBodyRes {

    @JsonProperty("pageInfo")
    private PageInfo pageInfo;

    @JsonProperty("resultArray")
    private List<Long> resultArray;

    @JsonCreator
    public PaginationLimitOffsetDeepOutputsPageBodyRes(
            @JsonProperty("pageInfo") PageInfo pageInfo,
            @JsonProperty("resultArray") List<Long> resultArray) {
        Utils.checkNotNull(pageInfo, "pageInfo");
        Utils.checkNotNull(resultArray, "resultArray");
        this.pageInfo = pageInfo;
        this.resultArray = resultArray;
    }

    @JsonIgnore
    public PageInfo pageInfo() {
        return pageInfo;
    }

    @JsonIgnore
    public List<Long> resultArray() {
        return resultArray;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PaginationLimitOffsetDeepOutputsPageBodyRes withPageInfo(PageInfo pageInfo) {
        Utils.checkNotNull(pageInfo, "pageInfo");
        this.pageInfo = pageInfo;
        return this;
    }

    public PaginationLimitOffsetDeepOutputsPageBodyRes withResultArray(List<Long> resultArray) {
        Utils.checkNotNull(resultArray, "resultArray");
        this.resultArray = resultArray;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaginationLimitOffsetDeepOutputsPageBodyRes other = (PaginationLimitOffsetDeepOutputsPageBodyRes) o;
        return 
            Objects.deepEquals(this.pageInfo, other.pageInfo) &&
            Objects.deepEquals(this.resultArray, other.resultArray);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            pageInfo,
            resultArray);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaginationLimitOffsetDeepOutputsPageBodyRes.class,
                "pageInfo", pageInfo,
                "resultArray", resultArray);
    }
    
    public final static class Builder {
 
        private PageInfo pageInfo;
 
        private List<Long> resultArray;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder pageInfo(PageInfo pageInfo) {
            Utils.checkNotNull(pageInfo, "pageInfo");
            this.pageInfo = pageInfo;
            return this;
        }

        public Builder resultArray(List<Long> resultArray) {
            Utils.checkNotNull(resultArray, "resultArray");
            this.resultArray = resultArray;
            return this;
        }
        
        public PaginationLimitOffsetDeepOutputsPageBodyRes build() {
            return new PaginationLimitOffsetDeepOutputsPageBodyRes(
                pageInfo,
                resultArray);
        }
    }
}

