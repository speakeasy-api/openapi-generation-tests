/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

/**
 * PaginationLimitOffsetOffsetBodyRes - OK
 */

public class PaginationLimitOffsetOffsetBodyRes {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("next")
    private Optional<String> next;

    @JsonProperty("numPages")
    private long numPages;

    @JsonProperty("resultArray")
    private List<Long> resultArray;

    @JsonCreator
    public PaginationLimitOffsetOffsetBodyRes(
            @JsonProperty("next") Optional<String> next,
            @JsonProperty("numPages") long numPages,
            @JsonProperty("resultArray") List<Long> resultArray) {
        Utils.checkNotNull(next, "next");
        Utils.checkNotNull(numPages, "numPages");
        Utils.checkNotNull(resultArray, "resultArray");
        this.next = next;
        this.numPages = numPages;
        this.resultArray = resultArray;
    }
    
    public PaginationLimitOffsetOffsetBodyRes(
            long numPages,
            List<Long> resultArray) {
        this(Optional.empty(), numPages, resultArray);
    }

    @JsonIgnore
    public Optional<String> next() {
        return next;
    }

    @JsonIgnore
    public long numPages() {
        return numPages;
    }

    @JsonIgnore
    public List<Long> resultArray() {
        return resultArray;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PaginationLimitOffsetOffsetBodyRes withNext(String next) {
        Utils.checkNotNull(next, "next");
        this.next = Optional.ofNullable(next);
        return this;
    }

    public PaginationLimitOffsetOffsetBodyRes withNext(Optional<String> next) {
        Utils.checkNotNull(next, "next");
        this.next = next;
        return this;
    }

    public PaginationLimitOffsetOffsetBodyRes withNumPages(long numPages) {
        Utils.checkNotNull(numPages, "numPages");
        this.numPages = numPages;
        return this;
    }

    public PaginationLimitOffsetOffsetBodyRes withResultArray(List<Long> resultArray) {
        Utils.checkNotNull(resultArray, "resultArray");
        this.resultArray = resultArray;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaginationLimitOffsetOffsetBodyRes other = (PaginationLimitOffsetOffsetBodyRes) o;
        return 
            Objects.deepEquals(this.next, other.next) &&
            Objects.deepEquals(this.numPages, other.numPages) &&
            Objects.deepEquals(this.resultArray, other.resultArray);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            next,
            numPages,
            resultArray);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaginationLimitOffsetOffsetBodyRes.class,
                "next", next,
                "numPages", numPages,
                "resultArray", resultArray);
    }
    
    public final static class Builder {
 
        private Optional<String> next = Optional.empty();
 
        private Long numPages;
 
        private List<Long> resultArray;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder next(String next) {
            Utils.checkNotNull(next, "next");
            this.next = Optional.ofNullable(next);
            return this;
        }

        public Builder next(Optional<String> next) {
            Utils.checkNotNull(next, "next");
            this.next = next;
            return this;
        }

        public Builder numPages(long numPages) {
            Utils.checkNotNull(numPages, "numPages");
            this.numPages = numPages;
            return this;
        }

        public Builder resultArray(List<Long> resultArray) {
            Utils.checkNotNull(resultArray, "resultArray");
            this.resultArray = resultArray;
            return this;
        }
        
        public PaginationLimitOffsetOffsetBodyRes build() {
            return new PaginationLimitOffsetOffsetBodyRes(
                next,
                numPages,
                resultArray);
        }
    }
}

