/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class PaginationLimitOffsetOffsetParamsRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private Optional<Long> limit;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")
    private Optional<Long> offset;

    @JsonCreator
    public PaginationLimitOffsetOffsetParamsRequest(
            Optional<Long> limit,
            Optional<Long> offset) {
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(offset, "offset");
        this.limit = limit;
        this.offset = offset;
    }
    
    public PaginationLimitOffsetOffsetParamsRequest() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Long> limit() {
        return limit;
    }

    @JsonIgnore
    public Optional<Long> offset() {
        return offset;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PaginationLimitOffsetOffsetParamsRequest withLimit(long limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }

    public PaginationLimitOffsetOffsetParamsRequest withLimit(Optional<Long> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    public PaginationLimitOffsetOffsetParamsRequest withOffset(long offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = Optional.ofNullable(offset);
        return this;
    }

    public PaginationLimitOffsetOffsetParamsRequest withOffset(Optional<Long> offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = offset;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaginationLimitOffsetOffsetParamsRequest other = (PaginationLimitOffsetOffsetParamsRequest) o;
        return 
            Objects.deepEquals(this.limit, other.limit) &&
            Objects.deepEquals(this.offset, other.offset);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            limit,
            offset);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaginationLimitOffsetOffsetParamsRequest.class,
                "limit", limit,
                "offset", offset);
    }
    
    public final static class Builder {
 
        private Optional<Long> limit = Optional.empty();
 
        private Optional<Long> offset = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder limit(long limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        public Builder limit(Optional<Long> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }

        public Builder offset(long offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = Optional.ofNullable(offset);
            return this;
        }

        public Builder offset(Optional<Long> offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = offset;
            return this;
        }
        
        public PaginationLimitOffsetOffsetParamsRequest build() {
            return new PaginationLimitOffsetOffsetParamsRequest(
                limit,
                offset);
        }
    }
}

