/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class PaginationURLParamsRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=attempts")
    private long attempts;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=is-reference-path")
    private Optional<? extends String> isReferencePath;

    @JsonCreator
    public PaginationURLParamsRequest(
            long attempts,
            Optional<? extends String> isReferencePath) {
        Utils.checkNotNull(attempts, "attempts");
        Utils.checkNotNull(isReferencePath, "isReferencePath");
        this.attempts = attempts;
        this.isReferencePath = isReferencePath;
    }
    
    public PaginationURLParamsRequest(
            long attempts) {
        this(attempts, Optional.empty());
    }

    @JsonIgnore
    public long attempts() {
        return attempts;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> isReferencePath() {
        return (Optional<String>) isReferencePath;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PaginationURLParamsRequest withAttempts(long attempts) {
        Utils.checkNotNull(attempts, "attempts");
        this.attempts = attempts;
        return this;
    }

    public PaginationURLParamsRequest withIsReferencePath(String isReferencePath) {
        Utils.checkNotNull(isReferencePath, "isReferencePath");
        this.isReferencePath = Optional.ofNullable(isReferencePath);
        return this;
    }

    public PaginationURLParamsRequest withIsReferencePath(Optional<? extends String> isReferencePath) {
        Utils.checkNotNull(isReferencePath, "isReferencePath");
        this.isReferencePath = isReferencePath;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaginationURLParamsRequest other = (PaginationURLParamsRequest) o;
        return 
            java.util.Objects.deepEquals(this.attempts, other.attempts) &&
            java.util.Objects.deepEquals(this.isReferencePath, other.isReferencePath);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            attempts,
            isReferencePath);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaginationURLParamsRequest.class,
                "attempts", attempts,
                "isReferencePath", isReferencePath);
    }
    
    public final static class Builder {
 
        private Long attempts;
 
        private Optional<? extends String> isReferencePath = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder attempts(long attempts) {
            Utils.checkNotNull(attempts, "attempts");
            this.attempts = attempts;
            return this;
        }

        public Builder isReferencePath(String isReferencePath) {
            Utils.checkNotNull(isReferencePath, "isReferencePath");
            this.isReferencePath = Optional.ofNullable(isReferencePath);
            return this;
        }

        public Builder isReferencePath(Optional<? extends String> isReferencePath) {
            Utils.checkNotNull(isReferencePath, "isReferencePath");
            this.isReferencePath = isReferencePath;
            return this;
        }
        
        public PaginationURLParamsRequest build() {
            return new PaginationURLParamsRequest(
                attempts,
                isReferencePath);
        }
    }
}

