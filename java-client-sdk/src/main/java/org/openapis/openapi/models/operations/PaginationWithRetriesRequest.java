/* 
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;

public class PaginationWithRetriesRequest {

    /**
     * The page token used to request a specific page of the search results
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=cursor")
    private Optional<? extends String> cursor;

    @SpeakeasyMetadata("header:style=simple,explode=false,name=fault-settings")
    private Optional<? extends String> faultSettings;

    @SpeakeasyMetadata("header:style=simple,explode=false,name=request-id")
    private Optional<? extends String> requestId;

    @JsonCreator
    public PaginationWithRetriesRequest(
            Optional<? extends String> cursor,
            Optional<? extends String> faultSettings,
            Optional<? extends String> requestId) {
        Utils.checkNotNull(cursor, "cursor");
        Utils.checkNotNull(faultSettings, "faultSettings");
        Utils.checkNotNull(requestId, "requestId");
        this.cursor = cursor;
        this.faultSettings = faultSettings;
        this.requestId = requestId;
    }
    
    public PaginationWithRetriesRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The page token used to request a specific page of the search results
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> cursor() {
        return (Optional<String>) cursor;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> faultSettings() {
        return (Optional<String>) faultSettings;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> requestId() {
        return (Optional<String>) requestId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The page token used to request a specific page of the search results
     */
    public PaginationWithRetriesRequest withCursor(String cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = Optional.ofNullable(cursor);
        return this;
    }

    /**
     * The page token used to request a specific page of the search results
     */
    public PaginationWithRetriesRequest withCursor(Optional<? extends String> cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = cursor;
        return this;
    }

    public PaginationWithRetriesRequest withFaultSettings(String faultSettings) {
        Utils.checkNotNull(faultSettings, "faultSettings");
        this.faultSettings = Optional.ofNullable(faultSettings);
        return this;
    }

    public PaginationWithRetriesRequest withFaultSettings(Optional<? extends String> faultSettings) {
        Utils.checkNotNull(faultSettings, "faultSettings");
        this.faultSettings = faultSettings;
        return this;
    }

    public PaginationWithRetriesRequest withRequestId(String requestId) {
        Utils.checkNotNull(requestId, "requestId");
        this.requestId = Optional.ofNullable(requestId);
        return this;
    }

    public PaginationWithRetriesRequest withRequestId(Optional<? extends String> requestId) {
        Utils.checkNotNull(requestId, "requestId");
        this.requestId = requestId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaginationWithRetriesRequest other = (PaginationWithRetriesRequest) o;
        return 
            java.util.Objects.deepEquals(this.cursor, other.cursor) &&
            java.util.Objects.deepEquals(this.faultSettings, other.faultSettings) &&
            java.util.Objects.deepEquals(this.requestId, other.requestId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            cursor,
            faultSettings,
            requestId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaginationWithRetriesRequest.class,
                "cursor", cursor,
                "faultSettings", faultSettings,
                "requestId", requestId);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> cursor = Optional.empty();
 
        private Optional<? extends String> faultSettings;
 
        private Optional<? extends String> requestId;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The page token used to request a specific page of the search results
         */
        public Builder cursor(String cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        /**
         * The page token used to request a specific page of the search results
         */
        public Builder cursor(Optional<? extends String> cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = cursor;
            return this;
        }

        public Builder faultSettings(String faultSettings) {
            Utils.checkNotNull(faultSettings, "faultSettings");
            this.faultSettings = Optional.ofNullable(faultSettings);
            return this;
        }

        public Builder faultSettings(Optional<? extends String> faultSettings) {
            Utils.checkNotNull(faultSettings, "faultSettings");
            this.faultSettings = faultSettings;
            return this;
        }

        public Builder requestId(String requestId) {
            Utils.checkNotNull(requestId, "requestId");
            this.requestId = Optional.ofNullable(requestId);
            return this;
        }

        public Builder requestId(Optional<? extends String> requestId) {
            Utils.checkNotNull(requestId, "requestId");
            this.requestId = requestId;
            return this;
        }
        
        public PaginationWithRetriesRequest build() {
            if (faultSettings == null) {
                faultSettings = _SINGLETON_VALUE_FaultSettings.value();
            }
            if (requestId == null) {
                requestId = _SINGLETON_VALUE_RequestId.value();
            }
            return new PaginationWithRetriesRequest(
                cursor,
                faultSettings,
                requestId);
        }

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_FaultSettings =
                new LazySingletonValue<>(
                        "fault-settings",
                        "\"{\\\"error_code\\\": 503, \\\"error_count\\\": 3}\"",
                        new TypeReference<Optional<? extends String>>() {});

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_RequestId =
                new LazySingletonValue<>(
                        "request-id",
                        "\"paginationWithRetries\"",
                        new TypeReference<Optional<? extends String>>() {});
    }
}

