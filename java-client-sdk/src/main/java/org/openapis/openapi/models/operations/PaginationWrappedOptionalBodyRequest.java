/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.models.shared.LimitOffsetConfig;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class PaginationWrappedOptionalBodyRequest {

    @SpeakeasyMetadata("header:style=simple,explode=false,name=idempotency-key")
    private Optional<String> idempotencyKey;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends LimitOffsetConfig> limitOffsetConfig;

    @SpeakeasyMetadata("header:style=simple,explode=false,name=request-id")
    private Optional<String> requestId;

    @JsonCreator
    public PaginationWrappedOptionalBodyRequest(
            Optional<String> idempotencyKey,
            Optional<? extends LimitOffsetConfig> limitOffsetConfig,
            Optional<String> requestId) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        Utils.checkNotNull(limitOffsetConfig, "limitOffsetConfig");
        Utils.checkNotNull(requestId, "requestId");
        this.idempotencyKey = idempotencyKey;
        this.limitOffsetConfig = limitOffsetConfig;
        this.requestId = requestId;
    }
    
    public PaginationWrappedOptionalBodyRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> idempotencyKey() {
        return idempotencyKey;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LimitOffsetConfig> limitOffsetConfig() {
        return (Optional<LimitOffsetConfig>) limitOffsetConfig;
    }

    @JsonIgnore
    public Optional<String> requestId() {
        return requestId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PaginationWrappedOptionalBodyRequest withIdempotencyKey(String idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = Optional.ofNullable(idempotencyKey);
        return this;
    }

    public PaginationWrappedOptionalBodyRequest withIdempotencyKey(Optional<String> idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = idempotencyKey;
        return this;
    }

    public PaginationWrappedOptionalBodyRequest withLimitOffsetConfig(LimitOffsetConfig limitOffsetConfig) {
        Utils.checkNotNull(limitOffsetConfig, "limitOffsetConfig");
        this.limitOffsetConfig = Optional.ofNullable(limitOffsetConfig);
        return this;
    }

    public PaginationWrappedOptionalBodyRequest withLimitOffsetConfig(Optional<? extends LimitOffsetConfig> limitOffsetConfig) {
        Utils.checkNotNull(limitOffsetConfig, "limitOffsetConfig");
        this.limitOffsetConfig = limitOffsetConfig;
        return this;
    }

    public PaginationWrappedOptionalBodyRequest withRequestId(String requestId) {
        Utils.checkNotNull(requestId, "requestId");
        this.requestId = Optional.ofNullable(requestId);
        return this;
    }

    public PaginationWrappedOptionalBodyRequest withRequestId(Optional<String> requestId) {
        Utils.checkNotNull(requestId, "requestId");
        this.requestId = requestId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaginationWrappedOptionalBodyRequest other = (PaginationWrappedOptionalBodyRequest) o;
        return 
            Objects.deepEquals(this.idempotencyKey, other.idempotencyKey) &&
            Objects.deepEquals(this.limitOffsetConfig, other.limitOffsetConfig) &&
            Objects.deepEquals(this.requestId, other.requestId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            idempotencyKey,
            limitOffsetConfig,
            requestId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaginationWrappedOptionalBodyRequest.class,
                "idempotencyKey", idempotencyKey,
                "limitOffsetConfig", limitOffsetConfig,
                "requestId", requestId);
    }
    
    public final static class Builder {
 
        private Optional<String> idempotencyKey = Optional.empty();
 
        private Optional<? extends LimitOffsetConfig> limitOffsetConfig = Optional.empty();
 
        private Optional<String> requestId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder idempotencyKey(String idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        public Builder idempotencyKey(Optional<String> idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        public Builder limitOffsetConfig(LimitOffsetConfig limitOffsetConfig) {
            Utils.checkNotNull(limitOffsetConfig, "limitOffsetConfig");
            this.limitOffsetConfig = Optional.ofNullable(limitOffsetConfig);
            return this;
        }

        public Builder limitOffsetConfig(Optional<? extends LimitOffsetConfig> limitOffsetConfig) {
            Utils.checkNotNull(limitOffsetConfig, "limitOffsetConfig");
            this.limitOffsetConfig = limitOffsetConfig;
            return this;
        }

        public Builder requestId(String requestId) {
            Utils.checkNotNull(requestId, "requestId");
            this.requestId = Optional.ofNullable(requestId);
            return this;
        }

        public Builder requestId(Optional<String> requestId) {
            Utils.checkNotNull(requestId, "requestId");
            this.requestId = requestId;
            return this;
        }
        
        public PaginationWrappedOptionalBodyRequest build() {
            return new PaginationWrappedOptionalBodyRequest(
                idempotencyKey,
                limitOffsetConfig,
                requestId);
        }
    }
}

