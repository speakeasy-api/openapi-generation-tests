/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class PathEncodingRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=param1")
    private String param1;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,allowReserved=true,name=param2")
    private String param2;

    @JsonCreator
    public PathEncodingRequest(
            String param1,
            String param2) {
        Utils.checkNotNull(param1, "param1");
        Utils.checkNotNull(param2, "param2");
        this.param1 = param1;
        this.param2 = param2;
    }

    @JsonIgnore
    public String param1() {
        return param1;
    }

    @JsonIgnore
    public String param2() {
        return param2;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PathEncodingRequest withParam1(String param1) {
        Utils.checkNotNull(param1, "param1");
        this.param1 = param1;
        return this;
    }

    public PathEncodingRequest withParam2(String param2) {
        Utils.checkNotNull(param2, "param2");
        this.param2 = param2;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PathEncodingRequest other = (PathEncodingRequest) o;
        return 
            Objects.deepEquals(this.param1, other.param1) &&
            Objects.deepEquals(this.param2, other.param2);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            param1,
            param2);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PathEncodingRequest.class,
                "param1", param1,
                "param2", param2);
    }
    
    public final static class Builder {
 
        private String param1;
 
        private String param2;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder param1(String param1) {
            Utils.checkNotNull(param1, "param1");
            this.param1 = param1;
            return this;
        }

        public Builder param2(String param2) {
            Utils.checkNotNull(param2, "param2");
            this.param2 = param2;
            return this;
        }
        
        public PathEncodingRequest build() {
            return new PathEncodingRequest(
                param1,
                param2);
        }
    }
}

