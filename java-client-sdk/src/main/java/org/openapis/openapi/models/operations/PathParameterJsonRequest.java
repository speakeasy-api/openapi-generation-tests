/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.models.shared.SimpleObject;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class PathParameterJsonRequest {

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    @SpeakeasyMetadata("pathParam:serialization=json,name=jsonObj")
    private SimpleObject jsonObj;

    @JsonCreator
    public PathParameterJsonRequest(
            SimpleObject jsonObj) {
        Utils.checkNotNull(jsonObj, "jsonObj");
        this.jsonObj = jsonObj;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    @JsonIgnore
    public SimpleObject jsonObj() {
        return jsonObj;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    public PathParameterJsonRequest withJsonObj(SimpleObject jsonObj) {
        Utils.checkNotNull(jsonObj, "jsonObj");
        this.jsonObj = jsonObj;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PathParameterJsonRequest other = (PathParameterJsonRequest) o;
        return 
            Objects.deepEquals(this.jsonObj, other.jsonObj);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            jsonObj);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PathParameterJsonRequest.class,
                "jsonObj", jsonObj);
    }
    
    public final static class Builder {
 
        private SimpleObject jsonObj;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A simple object that uses all our supported primitive types and enums and has optional properties.
         */
        public Builder jsonObj(SimpleObject jsonObj) {
            Utils.checkNotNull(jsonObj, "jsonObj");
            this.jsonObj = jsonObj;
            return this;
        }
        
        public PathParameterJsonRequest build() {
            return new PathParameterJsonRequest(
                jsonObj);
        }
    }
}

