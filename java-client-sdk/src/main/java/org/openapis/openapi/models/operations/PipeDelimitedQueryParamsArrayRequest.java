/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.models.shared.SimpleObject;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class PipeDelimitedQueryParamsArrayRequest {

    @SpeakeasyMetadata("queryParam:style=pipeDelimited,explode=false,name=arrParam")
    private Optional<? extends List<String>> arrParam;

    @SpeakeasyMetadata("queryParam:style=pipeDelimited,explode=true,name=arrParamExploded")
    private Optional<? extends List<Long>> arrParamExploded;

    @SpeakeasyMetadata("queryParam:style=pipeDelimited,explode=false,name=mapParam")
    private Optional<? extends Map<String, String>> mapParam;

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    @SpeakeasyMetadata("queryParam:style=pipeDelimited,explode=false,name=objParam")
    private Optional<? extends SimpleObject> objParam;

    @JsonCreator
    public PipeDelimitedQueryParamsArrayRequest(
            Optional<? extends List<String>> arrParam,
            Optional<? extends List<Long>> arrParamExploded,
            Optional<? extends Map<String, String>> mapParam,
            Optional<? extends SimpleObject> objParam) {
        Utils.checkNotNull(arrParam, "arrParam");
        Utils.checkNotNull(arrParamExploded, "arrParamExploded");
        Utils.checkNotNull(mapParam, "mapParam");
        Utils.checkNotNull(objParam, "objParam");
        this.arrParam = arrParam;
        this.arrParamExploded = arrParamExploded;
        this.mapParam = mapParam;
        this.objParam = objParam;
    }
    
    public PipeDelimitedQueryParamsArrayRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> arrParam() {
        return (Optional<List<String>>) arrParam;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Long>> arrParamExploded() {
        return (Optional<List<Long>>) arrParamExploded;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, String>> mapParam() {
        return (Optional<Map<String, String>>) mapParam;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SimpleObject> objParam() {
        return (Optional<SimpleObject>) objParam;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PipeDelimitedQueryParamsArrayRequest withArrParam(List<String> arrParam) {
        Utils.checkNotNull(arrParam, "arrParam");
        this.arrParam = Optional.ofNullable(arrParam);
        return this;
    }

    public PipeDelimitedQueryParamsArrayRequest withArrParam(Optional<? extends List<String>> arrParam) {
        Utils.checkNotNull(arrParam, "arrParam");
        this.arrParam = arrParam;
        return this;
    }

    public PipeDelimitedQueryParamsArrayRequest withArrParamExploded(List<Long> arrParamExploded) {
        Utils.checkNotNull(arrParamExploded, "arrParamExploded");
        this.arrParamExploded = Optional.ofNullable(arrParamExploded);
        return this;
    }

    public PipeDelimitedQueryParamsArrayRequest withArrParamExploded(Optional<? extends List<Long>> arrParamExploded) {
        Utils.checkNotNull(arrParamExploded, "arrParamExploded");
        this.arrParamExploded = arrParamExploded;
        return this;
    }

    public PipeDelimitedQueryParamsArrayRequest withMapParam(Map<String, String> mapParam) {
        Utils.checkNotNull(mapParam, "mapParam");
        this.mapParam = Optional.ofNullable(mapParam);
        return this;
    }

    public PipeDelimitedQueryParamsArrayRequest withMapParam(Optional<? extends Map<String, String>> mapParam) {
        Utils.checkNotNull(mapParam, "mapParam");
        this.mapParam = mapParam;
        return this;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    public PipeDelimitedQueryParamsArrayRequest withObjParam(SimpleObject objParam) {
        Utils.checkNotNull(objParam, "objParam");
        this.objParam = Optional.ofNullable(objParam);
        return this;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    public PipeDelimitedQueryParamsArrayRequest withObjParam(Optional<? extends SimpleObject> objParam) {
        Utils.checkNotNull(objParam, "objParam");
        this.objParam = objParam;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PipeDelimitedQueryParamsArrayRequest other = (PipeDelimitedQueryParamsArrayRequest) o;
        return 
            Objects.deepEquals(this.arrParam, other.arrParam) &&
            Objects.deepEquals(this.arrParamExploded, other.arrParamExploded) &&
            Objects.deepEquals(this.mapParam, other.mapParam) &&
            Objects.deepEquals(this.objParam, other.objParam);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            arrParam,
            arrParamExploded,
            mapParam,
            objParam);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PipeDelimitedQueryParamsArrayRequest.class,
                "arrParam", arrParam,
                "arrParamExploded", arrParamExploded,
                "mapParam", mapParam,
                "objParam", objParam);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<String>> arrParam = Optional.empty();
 
        private Optional<? extends List<Long>> arrParamExploded = Optional.empty();
 
        private Optional<? extends Map<String, String>> mapParam = Optional.empty();
 
        private Optional<? extends SimpleObject> objParam = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder arrParam(List<String> arrParam) {
            Utils.checkNotNull(arrParam, "arrParam");
            this.arrParam = Optional.ofNullable(arrParam);
            return this;
        }

        public Builder arrParam(Optional<? extends List<String>> arrParam) {
            Utils.checkNotNull(arrParam, "arrParam");
            this.arrParam = arrParam;
            return this;
        }

        public Builder arrParamExploded(List<Long> arrParamExploded) {
            Utils.checkNotNull(arrParamExploded, "arrParamExploded");
            this.arrParamExploded = Optional.ofNullable(arrParamExploded);
            return this;
        }

        public Builder arrParamExploded(Optional<? extends List<Long>> arrParamExploded) {
            Utils.checkNotNull(arrParamExploded, "arrParamExploded");
            this.arrParamExploded = arrParamExploded;
            return this;
        }

        public Builder mapParam(Map<String, String> mapParam) {
            Utils.checkNotNull(mapParam, "mapParam");
            this.mapParam = Optional.ofNullable(mapParam);
            return this;
        }

        public Builder mapParam(Optional<? extends Map<String, String>> mapParam) {
            Utils.checkNotNull(mapParam, "mapParam");
            this.mapParam = mapParam;
            return this;
        }

        /**
         * A simple object that uses all our supported primitive types and enums and has optional properties.
         */
        public Builder objParam(SimpleObject objParam) {
            Utils.checkNotNull(objParam, "objParam");
            this.objParam = Optional.ofNullable(objParam);
            return this;
        }

        /**
         * A simple object that uses all our supported primitive types and enums and has optional properties.
         */
        public Builder objParam(Optional<? extends SimpleObject> objParam) {
            Utils.checkNotNull(objParam, "objParam");
            this.objParam = objParam;
            return this;
        }
        
        public PipeDelimitedQueryParamsArrayRequest build() {
            return new PipeDelimitedQueryParamsArrayRequest(
                arrParam,
                arrParamExploded,
                mapParam,
                objParam);
        }
    }
}

