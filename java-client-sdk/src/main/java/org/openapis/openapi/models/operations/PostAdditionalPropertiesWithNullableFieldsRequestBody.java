/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.openapis.openapi.utils.Utils;
import org.openapitools.jackson.nullable.JsonNullable;


public class PostAdditionalPropertiesWithNullableFieldsRequestBody {

    @JsonIgnore
    private Map<String, Object> additionalProperties;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("someCamelCase")
    private JsonNullable<String> someCamelCase;

    @JsonCreator
    public PostAdditionalPropertiesWithNullableFieldsRequestBody(
            @JsonProperty("someCamelCase") JsonNullable<String> someCamelCase) {
        Utils.checkNotNull(someCamelCase, "someCamelCase");
        this.additionalProperties = new HashMap<>();
        this.someCamelCase = someCamelCase;
    }
    
    public PostAdditionalPropertiesWithNullableFieldsRequestBody() {
        this(JsonNullable.undefined());
    }

    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return additionalProperties;
    }

    @JsonIgnore
    public JsonNullable<String> someCamelCase() {
        return someCamelCase;
    }

    public final static Builder builder() {
        return new Builder();
    }

    @JsonAnySetter
    public PostAdditionalPropertiesWithNullableFieldsRequestBody withAdditionalProperty(String key, Object value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalProperties.put(key, value); 
        return this;
    }
    
    public PostAdditionalPropertiesWithNullableFieldsRequestBody withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }

    public PostAdditionalPropertiesWithNullableFieldsRequestBody withSomeCamelCase(String someCamelCase) {
        Utils.checkNotNull(someCamelCase, "someCamelCase");
        this.someCamelCase = JsonNullable.of(someCamelCase);
        return this;
    }

    public PostAdditionalPropertiesWithNullableFieldsRequestBody withSomeCamelCase(JsonNullable<String> someCamelCase) {
        Utils.checkNotNull(someCamelCase, "someCamelCase");
        this.someCamelCase = someCamelCase;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PostAdditionalPropertiesWithNullableFieldsRequestBody other = (PostAdditionalPropertiesWithNullableFieldsRequestBody) o;
        return 
            Objects.deepEquals(this.additionalProperties, other.additionalProperties) &&
            Objects.deepEquals(this.someCamelCase, other.someCamelCase);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            additionalProperties,
            someCamelCase);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PostAdditionalPropertiesWithNullableFieldsRequestBody.class,
                "additionalProperties", additionalProperties,
                "someCamelCase", someCamelCase);
    }
    
    public final static class Builder {
 
        private Map<String, Object> additionalProperties = new HashMap<>();
 
        private JsonNullable<String> someCamelCase = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder additionalProperty(String key, Object value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalProperties.put(key, value);
            return this;
        }

        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }

        public Builder someCamelCase(String someCamelCase) {
            Utils.checkNotNull(someCamelCase, "someCamelCase");
            this.someCamelCase = JsonNullable.of(someCamelCase);
            return this;
        }

        public Builder someCamelCase(JsonNullable<String> someCamelCase) {
            Utils.checkNotNull(someCamelCase, "someCamelCase");
            this.someCamelCase = someCamelCase;
            return this;
        }
        
        public PostAdditionalPropertiesWithNullableFieldsRequestBody build() {
            return new PostAdditionalPropertiesWithNullableFieldsRequestBody(
                someCamelCase)
                .withAdditionalProperties(additionalProperties);
        }
    }
}

