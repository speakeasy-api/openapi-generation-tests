/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class ReactHookCombinedOptionsRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private long page;

    @JsonCreator
    public ReactHookCombinedOptionsRequest(
            long page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
    }

    @JsonIgnore
    public long page() {
        return page;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ReactHookCombinedOptionsRequest withPage(long page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReactHookCombinedOptionsRequest other = (ReactHookCombinedOptionsRequest) o;
        return 
            Objects.deepEquals(this.page, other.page);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            page);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ReactHookCombinedOptionsRequest.class,
                "page", page);
    }
    
    public final static class Builder {
 
        private Long page;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder page(long page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }
        
        public ReactHookCombinedOptionsRequest build() {
            return new ReactHookCombinedOptionsRequest(
                page);
        }
    }
}

