/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class RequestBodyGetInferredOptionalRequestWrapperArgs {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keyword")
    private Optional<String> keyword;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limit")
    private Optional<Long> limit;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offset")
    private Optional<Long> offset;

    @JsonCreator
    public RequestBodyGetInferredOptionalRequestWrapperArgs(
            @JsonProperty("keyword") Optional<String> keyword,
            @JsonProperty("limit") Optional<Long> limit,
            @JsonProperty("offset") Optional<Long> offset) {
        Utils.checkNotNull(keyword, "keyword");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(offset, "offset");
        this.keyword = keyword;
        this.limit = limit;
        this.offset = offset;
    }
    
    public RequestBodyGetInferredOptionalRequestWrapperArgs() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> keyword() {
        return keyword;
    }

    @JsonIgnore
    public Optional<Long> limit() {
        return limit;
    }

    @JsonIgnore
    public Optional<Long> offset() {
        return offset;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RequestBodyGetInferredOptionalRequestWrapperArgs withKeyword(String keyword) {
        Utils.checkNotNull(keyword, "keyword");
        this.keyword = Optional.ofNullable(keyword);
        return this;
    }

    public RequestBodyGetInferredOptionalRequestWrapperArgs withKeyword(Optional<String> keyword) {
        Utils.checkNotNull(keyword, "keyword");
        this.keyword = keyword;
        return this;
    }

    public RequestBodyGetInferredOptionalRequestWrapperArgs withLimit(long limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }

    public RequestBodyGetInferredOptionalRequestWrapperArgs withLimit(Optional<Long> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    public RequestBodyGetInferredOptionalRequestWrapperArgs withOffset(long offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = Optional.ofNullable(offset);
        return this;
    }

    public RequestBodyGetInferredOptionalRequestWrapperArgs withOffset(Optional<Long> offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = offset;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestBodyGetInferredOptionalRequestWrapperArgs other = (RequestBodyGetInferredOptionalRequestWrapperArgs) o;
        return 
            Objects.deepEquals(this.keyword, other.keyword) &&
            Objects.deepEquals(this.limit, other.limit) &&
            Objects.deepEquals(this.offset, other.offset);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            keyword,
            limit,
            offset);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequestBodyGetInferredOptionalRequestWrapperArgs.class,
                "keyword", keyword,
                "limit", limit,
                "offset", offset);
    }
    
    public final static class Builder {
 
        private Optional<String> keyword = Optional.empty();
 
        private Optional<Long> limit = Optional.empty();
 
        private Optional<Long> offset = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder keyword(String keyword) {
            Utils.checkNotNull(keyword, "keyword");
            this.keyword = Optional.ofNullable(keyword);
            return this;
        }

        public Builder keyword(Optional<String> keyword) {
            Utils.checkNotNull(keyword, "keyword");
            this.keyword = keyword;
            return this;
        }

        public Builder limit(long limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        public Builder limit(Optional<Long> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }

        public Builder offset(long offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = Optional.ofNullable(offset);
            return this;
        }

        public Builder offset(Optional<Long> offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = offset;
            return this;
        }
        
        public RequestBodyGetInferredOptionalRequestWrapperArgs build() {
            return new RequestBodyGetInferredOptionalRequestWrapperArgs(
                keyword,
                limit,
                offset);
        }
    }
}

