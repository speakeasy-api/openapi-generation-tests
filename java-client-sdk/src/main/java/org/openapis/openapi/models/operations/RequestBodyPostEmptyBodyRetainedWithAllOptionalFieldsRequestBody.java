/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bool")
    private Optional<Boolean> bool;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("int")
    private Optional<Long> int_;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("str")
    private Optional<String> str;

    @JsonCreator
    public RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody(
            @JsonProperty("bool") Optional<Boolean> bool,
            @JsonProperty("int") Optional<Long> int_,
            @JsonProperty("str") Optional<String> str) {
        Utils.checkNotNull(bool, "bool");
        Utils.checkNotNull(int_, "int_");
        Utils.checkNotNull(str, "str");
        this.bool = bool;
        this.int_ = int_;
        this.str = str;
    }
    
    public RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Boolean> bool() {
        return bool;
    }

    @JsonIgnore
    public Optional<Long> int_() {
        return int_;
    }

    @JsonIgnore
    public Optional<String> str() {
        return str;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody withBool(boolean bool) {
        Utils.checkNotNull(bool, "bool");
        this.bool = Optional.ofNullable(bool);
        return this;
    }

    public RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody withBool(Optional<Boolean> bool) {
        Utils.checkNotNull(bool, "bool");
        this.bool = bool;
        return this;
    }

    public RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody withInt(long int_) {
        Utils.checkNotNull(int_, "int_");
        this.int_ = Optional.ofNullable(int_);
        return this;
    }

    public RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody withInt(Optional<Long> int_) {
        Utils.checkNotNull(int_, "int_");
        this.int_ = int_;
        return this;
    }

    public RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody withStr(String str) {
        Utils.checkNotNull(str, "str");
        this.str = Optional.ofNullable(str);
        return this;
    }

    public RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody withStr(Optional<String> str) {
        Utils.checkNotNull(str, "str");
        this.str = str;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody other = (RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody) o;
        return 
            Objects.deepEquals(this.bool, other.bool) &&
            Objects.deepEquals(this.int_, other.int_) &&
            Objects.deepEquals(this.str, other.str);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            bool,
            int_,
            str);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody.class,
                "bool", bool,
                "int_", int_,
                "str", str);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> bool = Optional.empty();
 
        private Optional<Long> int_ = Optional.empty();
 
        private Optional<String> str = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder bool(boolean bool) {
            Utils.checkNotNull(bool, "bool");
            this.bool = Optional.ofNullable(bool);
            return this;
        }

        public Builder bool(Optional<Boolean> bool) {
            Utils.checkNotNull(bool, "bool");
            this.bool = bool;
            return this;
        }

        public Builder int_(long int_) {
            Utils.checkNotNull(int_, "int_");
            this.int_ = Optional.ofNullable(int_);
            return this;
        }

        public Builder int_(Optional<Long> int_) {
            Utils.checkNotNull(int_, "int_");
            this.int_ = int_;
            return this;
        }

        public Builder str(String str) {
            Utils.checkNotNull(str, "str");
            this.str = Optional.ofNullable(str);
            return this;
        }

        public Builder str(Optional<String> str) {
            Utils.checkNotNull(str, "str");
            this.str = str;
            return this;
        }
        
        public RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody build() {
            return new RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody(
                bool,
                int_,
                str);
        }
    }
}

