/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

public class RequestBodyPostEmptyObjectRequestBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("empty")
    private Optional<? extends Empty> empty;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emptyWithEmptyProperties")
    private Optional<? extends EmptyWithEmptyProperties> emptyWithEmptyProperties;

    @JsonCreator
    public RequestBodyPostEmptyObjectRequestBody(
            @JsonProperty("empty") Optional<? extends Empty> empty,
            @JsonProperty("emptyWithEmptyProperties") Optional<? extends EmptyWithEmptyProperties> emptyWithEmptyProperties) {
        Utils.checkNotNull(empty, "empty");
        Utils.checkNotNull(emptyWithEmptyProperties, "emptyWithEmptyProperties");
        this.empty = empty;
        this.emptyWithEmptyProperties = emptyWithEmptyProperties;
    }
    
    public RequestBodyPostEmptyObjectRequestBody() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Empty> empty() {
        return (Optional<Empty>) empty;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EmptyWithEmptyProperties> emptyWithEmptyProperties() {
        return (Optional<EmptyWithEmptyProperties>) emptyWithEmptyProperties;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RequestBodyPostEmptyObjectRequestBody withEmpty(Empty empty) {
        Utils.checkNotNull(empty, "empty");
        this.empty = Optional.ofNullable(empty);
        return this;
    }

    public RequestBodyPostEmptyObjectRequestBody withEmpty(Optional<? extends Empty> empty) {
        Utils.checkNotNull(empty, "empty");
        this.empty = empty;
        return this;
    }

    public RequestBodyPostEmptyObjectRequestBody withEmptyWithEmptyProperties(EmptyWithEmptyProperties emptyWithEmptyProperties) {
        Utils.checkNotNull(emptyWithEmptyProperties, "emptyWithEmptyProperties");
        this.emptyWithEmptyProperties = Optional.ofNullable(emptyWithEmptyProperties);
        return this;
    }

    public RequestBodyPostEmptyObjectRequestBody withEmptyWithEmptyProperties(Optional<? extends EmptyWithEmptyProperties> emptyWithEmptyProperties) {
        Utils.checkNotNull(emptyWithEmptyProperties, "emptyWithEmptyProperties");
        this.emptyWithEmptyProperties = emptyWithEmptyProperties;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestBodyPostEmptyObjectRequestBody other = (RequestBodyPostEmptyObjectRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.empty, other.empty) &&
            java.util.Objects.deepEquals(this.emptyWithEmptyProperties, other.emptyWithEmptyProperties);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            empty,
            emptyWithEmptyProperties);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequestBodyPostEmptyObjectRequestBody.class,
                "empty", empty,
                "emptyWithEmptyProperties", emptyWithEmptyProperties);
    }
    
    public final static class Builder {
 
        private Optional<? extends Empty> empty = Optional.empty();
 
        private Optional<? extends EmptyWithEmptyProperties> emptyWithEmptyProperties = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder empty(Empty empty) {
            Utils.checkNotNull(empty, "empty");
            this.empty = Optional.ofNullable(empty);
            return this;
        }

        public Builder empty(Optional<? extends Empty> empty) {
            Utils.checkNotNull(empty, "empty");
            this.empty = empty;
            return this;
        }

        public Builder emptyWithEmptyProperties(EmptyWithEmptyProperties emptyWithEmptyProperties) {
            Utils.checkNotNull(emptyWithEmptyProperties, "emptyWithEmptyProperties");
            this.emptyWithEmptyProperties = Optional.ofNullable(emptyWithEmptyProperties);
            return this;
        }

        public Builder emptyWithEmptyProperties(Optional<? extends EmptyWithEmptyProperties> emptyWithEmptyProperties) {
            Utils.checkNotNull(emptyWithEmptyProperties, "emptyWithEmptyProperties");
            this.emptyWithEmptyProperties = emptyWithEmptyProperties;
            return this;
        }
        
        public RequestBodyPostEmptyObjectRequestBody build() {
            return new RequestBodyPostEmptyObjectRequestBody(
                empty,
                emptyWithEmptyProperties);
        }
    }
}

