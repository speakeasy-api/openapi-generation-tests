/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

/**
 * RequestBodyPostEmptyObjectResponseBody - OK
 */

public class RequestBodyPostEmptyObjectResponseBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("empty")
    private Optional<? extends RequestBodyPostEmptyObjectEmpty> empty;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emptyRespWithEmptyProperies")
    private Optional<? extends EmptyRespWithEmptyProperies> emptyRespWithEmptyProperies;

    @JsonCreator
    public RequestBodyPostEmptyObjectResponseBody(
            @JsonProperty("empty") Optional<? extends RequestBodyPostEmptyObjectEmpty> empty,
            @JsonProperty("emptyRespWithEmptyProperies") Optional<? extends EmptyRespWithEmptyProperies> emptyRespWithEmptyProperies) {
        Utils.checkNotNull(empty, "empty");
        Utils.checkNotNull(emptyRespWithEmptyProperies, "emptyRespWithEmptyProperies");
        this.empty = empty;
        this.emptyRespWithEmptyProperies = emptyRespWithEmptyProperies;
    }
    
    public RequestBodyPostEmptyObjectResponseBody() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<RequestBodyPostEmptyObjectEmpty> empty() {
        return (Optional<RequestBodyPostEmptyObjectEmpty>) empty;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EmptyRespWithEmptyProperies> emptyRespWithEmptyProperies() {
        return (Optional<EmptyRespWithEmptyProperies>) emptyRespWithEmptyProperies;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RequestBodyPostEmptyObjectResponseBody withEmpty(RequestBodyPostEmptyObjectEmpty empty) {
        Utils.checkNotNull(empty, "empty");
        this.empty = Optional.ofNullable(empty);
        return this;
    }

    public RequestBodyPostEmptyObjectResponseBody withEmpty(Optional<? extends RequestBodyPostEmptyObjectEmpty> empty) {
        Utils.checkNotNull(empty, "empty");
        this.empty = empty;
        return this;
    }

    public RequestBodyPostEmptyObjectResponseBody withEmptyRespWithEmptyProperies(EmptyRespWithEmptyProperies emptyRespWithEmptyProperies) {
        Utils.checkNotNull(emptyRespWithEmptyProperies, "emptyRespWithEmptyProperies");
        this.emptyRespWithEmptyProperies = Optional.ofNullable(emptyRespWithEmptyProperies);
        return this;
    }

    public RequestBodyPostEmptyObjectResponseBody withEmptyRespWithEmptyProperies(Optional<? extends EmptyRespWithEmptyProperies> emptyRespWithEmptyProperies) {
        Utils.checkNotNull(emptyRespWithEmptyProperies, "emptyRespWithEmptyProperies");
        this.emptyRespWithEmptyProperies = emptyRespWithEmptyProperies;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestBodyPostEmptyObjectResponseBody other = (RequestBodyPostEmptyObjectResponseBody) o;
        return 
            Objects.deepEquals(this.empty, other.empty) &&
            Objects.deepEquals(this.emptyRespWithEmptyProperies, other.emptyRespWithEmptyProperies);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            empty,
            emptyRespWithEmptyProperies);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequestBodyPostEmptyObjectResponseBody.class,
                "empty", empty,
                "emptyRespWithEmptyProperies", emptyRespWithEmptyProperies);
    }
    
    public final static class Builder {
 
        private Optional<? extends RequestBodyPostEmptyObjectEmpty> empty = Optional.empty();
 
        private Optional<? extends EmptyRespWithEmptyProperies> emptyRespWithEmptyProperies = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder empty(RequestBodyPostEmptyObjectEmpty empty) {
            Utils.checkNotNull(empty, "empty");
            this.empty = Optional.ofNullable(empty);
            return this;
        }

        public Builder empty(Optional<? extends RequestBodyPostEmptyObjectEmpty> empty) {
            Utils.checkNotNull(empty, "empty");
            this.empty = empty;
            return this;
        }

        public Builder emptyRespWithEmptyProperies(EmptyRespWithEmptyProperies emptyRespWithEmptyProperies) {
            Utils.checkNotNull(emptyRespWithEmptyProperies, "emptyRespWithEmptyProperies");
            this.emptyRespWithEmptyProperies = Optional.ofNullable(emptyRespWithEmptyProperies);
            return this;
        }

        public Builder emptyRespWithEmptyProperies(Optional<? extends EmptyRespWithEmptyProperies> emptyRespWithEmptyProperies) {
            Utils.checkNotNull(emptyRespWithEmptyProperies, "emptyRespWithEmptyProperies");
            this.emptyRespWithEmptyProperies = emptyRespWithEmptyProperies;
            return this;
        }
        
        public RequestBodyPostEmptyObjectResponseBody build() {
            return new RequestBodyPostEmptyObjectResponseBody(
                empty,
                emptyRespWithEmptyProperies);
        }
    }
}

