/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.Utils;

/**
 * RequestBodyPostJsonDataTypesDecimalResponseBody - OK
 */

public class RequestBodyPostJsonDataTypesDecimalResponseBody {

    @JsonProperty("data")
    private String data;

    @JsonProperty("json")
    private BigDecimal json;

    @JsonCreator
    public RequestBodyPostJsonDataTypesDecimalResponseBody(
            @JsonProperty("data") String data,
            @JsonProperty("json") BigDecimal json) {
        Utils.checkNotNull(data, "data");
        Utils.checkNotNull(json, "json");
        this.data = data;
        this.json = json;
    }

    @JsonIgnore
    public String data() {
        return data;
    }

    @JsonIgnore
    public BigDecimal json() {
        return json;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RequestBodyPostJsonDataTypesDecimalResponseBody withData(String data) {
        Utils.checkNotNull(data, "data");
        this.data = data;
        return this;
    }

    public RequestBodyPostJsonDataTypesDecimalResponseBody withJson(double json) {
        this.json = BigDecimal.valueOf(json);
        return this;
    }

    public RequestBodyPostJsonDataTypesDecimalResponseBody withJson(BigDecimal json) {
        Utils.checkNotNull(json, "json");
        this.json = json;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestBodyPostJsonDataTypesDecimalResponseBody other = (RequestBodyPostJsonDataTypesDecimalResponseBody) o;
        return 
            java.util.Objects.deepEquals(this.data, other.data) &&
            java.util.Objects.deepEquals(this.json, other.json);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            data,
            json);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequestBodyPostJsonDataTypesDecimalResponseBody.class,
                "data", data,
                "json", json);
    }
    
    public final static class Builder {
 
        private String data;
 
        private BigDecimal json;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder data(String data) {
            Utils.checkNotNull(data, "data");
            this.data = data;
            return this;
        }

        public Builder json(double json) {
            this.json = BigDecimal.valueOf(json);
            return this;
        }

        public Builder json(BigDecimal json) {
            Utils.checkNotNull(json, "json");
            this.json = json;
            return this;
        }
        
        public RequestBodyPostJsonDataTypesDecimalResponseBody build() {
            return new RequestBodyPostJsonDataTypesDecimalResponseBody(
                data,
                json);
        }
    }
}

