/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.utils.Utils;

/**
 * RequestBodyPostJsonDataTypesFloat32ResponseBody - OK
 */

public class RequestBodyPostJsonDataTypesFloat32ResponseBody {

    @JsonProperty("json")
    private double json;

    @JsonCreator
    public RequestBodyPostJsonDataTypesFloat32ResponseBody(
            @JsonProperty("json") double json) {
        Utils.checkNotNull(json, "json");
        this.json = json;
    }

    @JsonIgnore
    public double json() {
        return json;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RequestBodyPostJsonDataTypesFloat32ResponseBody withJson(double json) {
        Utils.checkNotNull(json, "json");
        this.json = json;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestBodyPostJsonDataTypesFloat32ResponseBody other = (RequestBodyPostJsonDataTypesFloat32ResponseBody) o;
        return 
            Objects.deepEquals(this.json, other.json);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            json);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequestBodyPostJsonDataTypesFloat32ResponseBody.class,
                "json", json);
    }
    
    public final static class Builder {
 
        private Double json;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder json(double json) {
            Utils.checkNotNull(json, "json");
            this.json = json;
            return this;
        }
        
        public RequestBodyPostJsonDataTypesFloat32ResponseBody build() {
            return new RequestBodyPostJsonDataTypesFloat32ResponseBody(
                json);
        }
    }
}

