/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class RequestBodyPostMultipleContentTypesSplitFormRequestBody {

    @SpeakeasyMetadata("form:name=bool3")
    private boolean bool3;

    @SpeakeasyMetadata("form:name=num3")
    private double num3;

    @SpeakeasyMetadata("form:name=str3")
    private String str3;

    @JsonCreator
    public RequestBodyPostMultipleContentTypesSplitFormRequestBody(
            boolean bool3,
            double num3,
            String str3) {
        Utils.checkNotNull(bool3, "bool3");
        Utils.checkNotNull(num3, "num3");
        Utils.checkNotNull(str3, "str3");
        this.bool3 = bool3;
        this.num3 = num3;
        this.str3 = str3;
    }

    @JsonIgnore
    public boolean bool3() {
        return bool3;
    }

    @JsonIgnore
    public double num3() {
        return num3;
    }

    @JsonIgnore
    public String str3() {
        return str3;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RequestBodyPostMultipleContentTypesSplitFormRequestBody withBool3(boolean bool3) {
        Utils.checkNotNull(bool3, "bool3");
        this.bool3 = bool3;
        return this;
    }

    public RequestBodyPostMultipleContentTypesSplitFormRequestBody withNum3(double num3) {
        Utils.checkNotNull(num3, "num3");
        this.num3 = num3;
        return this;
    }

    public RequestBodyPostMultipleContentTypesSplitFormRequestBody withStr3(String str3) {
        Utils.checkNotNull(str3, "str3");
        this.str3 = str3;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestBodyPostMultipleContentTypesSplitFormRequestBody other = (RequestBodyPostMultipleContentTypesSplitFormRequestBody) o;
        return 
            Objects.deepEquals(this.bool3, other.bool3) &&
            Objects.deepEquals(this.num3, other.num3) &&
            Objects.deepEquals(this.str3, other.str3);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            bool3,
            num3,
            str3);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequestBodyPostMultipleContentTypesSplitFormRequestBody.class,
                "bool3", bool3,
                "num3", num3,
                "str3", str3);
    }
    
    public final static class Builder {
 
        private Boolean bool3;
 
        private Double num3;
 
        private String str3;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder bool3(boolean bool3) {
            Utils.checkNotNull(bool3, "bool3");
            this.bool3 = bool3;
            return this;
        }

        public Builder num3(double num3) {
            Utils.checkNotNull(num3, "num3");
            this.num3 = num3;
            return this;
        }

        public Builder str3(String str3) {
            Utils.checkNotNull(str3, "str3");
            this.str3 = str3;
            return this;
        }
        
        public RequestBodyPostMultipleContentTypesSplitFormRequestBody build() {
            return new RequestBodyPostMultipleContentTypesSplitFormRequestBody(
                bool3,
                num3,
                str3);
        }
    }
}

