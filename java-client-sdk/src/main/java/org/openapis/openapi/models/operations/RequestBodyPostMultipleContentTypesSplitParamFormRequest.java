/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class RequestBodyPostMultipleContentTypesSplitParamFormRequest {

    @SpeakeasyMetadata("request:mediaType=application/x-www-form-urlencoded")
    private RequestBodyPostMultipleContentTypesSplitParamFormRequestBody requestBody;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=paramStr")
    private String paramStr;

    public RequestBodyPostMultipleContentTypesSplitParamFormRequest(
            RequestBodyPostMultipleContentTypesSplitParamFormRequestBody requestBody,
            String paramStr) {
        Utils.checkNotNull(requestBody, "requestBody");
        Utils.checkNotNull(paramStr, "paramStr");
        this.requestBody = requestBody;
        this.paramStr = paramStr;
    }

    public RequestBodyPostMultipleContentTypesSplitParamFormRequestBody requestBody() {
        return requestBody;
    }

    public String paramStr() {
        return paramStr;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RequestBodyPostMultipleContentTypesSplitParamFormRequest withRequestBody(RequestBodyPostMultipleContentTypesSplitParamFormRequestBody requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }

    public RequestBodyPostMultipleContentTypesSplitParamFormRequest withParamStr(String paramStr) {
        Utils.checkNotNull(paramStr, "paramStr");
        this.paramStr = paramStr;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestBodyPostMultipleContentTypesSplitParamFormRequest other = (RequestBodyPostMultipleContentTypesSplitParamFormRequest) o;
        return 
            java.util.Objects.deepEquals(this.requestBody, other.requestBody) &&
            java.util.Objects.deepEquals(this.paramStr, other.paramStr);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            requestBody,
            paramStr);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequestBodyPostMultipleContentTypesSplitParamFormRequest.class,
                "requestBody", requestBody,
                "paramStr", paramStr);
    }
    
    public final static class Builder {
 
        private RequestBodyPostMultipleContentTypesSplitParamFormRequestBody requestBody;
 
        private String paramStr;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder requestBody(RequestBodyPostMultipleContentTypesSplitParamFormRequestBody requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }

        public Builder paramStr(String paramStr) {
            Utils.checkNotNull(paramStr, "paramStr");
            this.paramStr = paramStr;
            return this;
        }
        
        public RequestBodyPostMultipleContentTypesSplitParamFormRequest build() {
            return new RequestBodyPostMultipleContentTypesSplitParamFormRequest(
                requestBody,
                paramStr);
        }
    }
}

