/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.utils.Utils;


public class RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody {

    @JsonProperty("bool")
    private boolean bool;

    @JsonProperty("num")
    private double num;

    @JsonProperty("str")
    private String str;

    @JsonCreator
    public RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody(
            @JsonProperty("bool") boolean bool,
            @JsonProperty("num") double num,
            @JsonProperty("str") String str) {
        Utils.checkNotNull(bool, "bool");
        Utils.checkNotNull(num, "num");
        Utils.checkNotNull(str, "str");
        this.bool = bool;
        this.num = num;
        this.str = str;
    }

    @JsonIgnore
    public boolean bool() {
        return bool;
    }

    @JsonIgnore
    public double num() {
        return num;
    }

    @JsonIgnore
    public String str() {
        return str;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody withBool(boolean bool) {
        Utils.checkNotNull(bool, "bool");
        this.bool = bool;
        return this;
    }

    public RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody withNum(double num) {
        Utils.checkNotNull(num, "num");
        this.num = num;
        return this;
    }

    public RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody withStr(String str) {
        Utils.checkNotNull(str, "str");
        this.str = str;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody other = (RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody) o;
        return 
            Objects.deepEquals(this.bool, other.bool) &&
            Objects.deepEquals(this.num, other.num) &&
            Objects.deepEquals(this.str, other.str);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            bool,
            num,
            str);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody.class,
                "bool", bool,
                "num", num,
                "str", str);
    }
    
    public final static class Builder {
 
        private Boolean bool;
 
        private Double num;
 
        private String str;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder bool(boolean bool) {
            Utils.checkNotNull(bool, "bool");
            this.bool = bool;
            return this;
        }

        public Builder num(double num) {
            Utils.checkNotNull(num, "num");
            this.num = num;
            return this;
        }

        public Builder str(String str) {
            Utils.checkNotNull(str, "str");
            this.str = str;
            return this;
        }
        
        public RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody build() {
            return new RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody(
                bool,
                num,
                str);
        }
    }
}

