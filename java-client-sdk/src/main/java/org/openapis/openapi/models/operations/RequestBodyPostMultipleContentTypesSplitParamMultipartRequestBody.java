/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;

public class RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody {

    @SpeakeasyMetadata("multipartForm:name=bool2")
    private boolean bool2;

    @SpeakeasyMetadata("multipartForm:name=num2")
    private double num2;

    @SpeakeasyMetadata("multipartForm:name=str2")
    private String str2;

    @JsonCreator
    public RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody(
            boolean bool2,
            double num2,
            String str2) {
        Utils.checkNotNull(bool2, "bool2");
        Utils.checkNotNull(num2, "num2");
        Utils.checkNotNull(str2, "str2");
        this.bool2 = bool2;
        this.num2 = num2;
        this.str2 = str2;
    }

    @JsonIgnore
    public boolean bool2() {
        return bool2;
    }

    @JsonIgnore
    public double num2() {
        return num2;
    }

    @JsonIgnore
    public String str2() {
        return str2;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody withBool2(boolean bool2) {
        Utils.checkNotNull(bool2, "bool2");
        this.bool2 = bool2;
        return this;
    }

    public RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody withNum2(double num2) {
        Utils.checkNotNull(num2, "num2");
        this.num2 = num2;
        return this;
    }

    public RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody withStr2(String str2) {
        Utils.checkNotNull(str2, "str2");
        this.str2 = str2;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody other = (RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.bool2, other.bool2) &&
            java.util.Objects.deepEquals(this.num2, other.num2) &&
            java.util.Objects.deepEquals(this.str2, other.str2);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            bool2,
            num2,
            str2);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody.class,
                "bool2", bool2,
                "num2", num2,
                "str2", str2);
    }
    
    public final static class Builder {
 
        private Boolean bool2;
 
        private Double num2;
 
        private String str2;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder bool2(boolean bool2) {
            Utils.checkNotNull(bool2, "bool2");
            this.bool2 = bool2;
            return this;
        }

        public Builder num2(double num2) {
            Utils.checkNotNull(num2, "num2");
            this.num2 = num2;
            return this;
        }

        public Builder str2(String str2) {
            Utils.checkNotNull(str2, "str2");
            this.str2 = str2;
            return this;
        }
        
        public RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody build() {
            return new RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody(
                bool2,
                num2,
                str2);
        }
    }
}

