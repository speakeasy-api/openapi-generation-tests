/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;

public class RequestBodyPutMultipartDifferentFileNameRequestBody {

    @SpeakeasyMetadata("multipartForm:file")
    private Optional<? extends DifferentFileName> differentFileName;

    @JsonCreator
    public RequestBodyPutMultipartDifferentFileNameRequestBody(
            Optional<? extends DifferentFileName> differentFileName) {
        Utils.checkNotNull(differentFileName, "differentFileName");
        this.differentFileName = differentFileName;
    }
    
    public RequestBodyPutMultipartDifferentFileNameRequestBody() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DifferentFileName> differentFileName() {
        return (Optional<DifferentFileName>) differentFileName;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RequestBodyPutMultipartDifferentFileNameRequestBody withDifferentFileName(DifferentFileName differentFileName) {
        Utils.checkNotNull(differentFileName, "differentFileName");
        this.differentFileName = Optional.ofNullable(differentFileName);
        return this;
    }

    public RequestBodyPutMultipartDifferentFileNameRequestBody withDifferentFileName(Optional<? extends DifferentFileName> differentFileName) {
        Utils.checkNotNull(differentFileName, "differentFileName");
        this.differentFileName = differentFileName;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestBodyPutMultipartDifferentFileNameRequestBody other = (RequestBodyPutMultipartDifferentFileNameRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.differentFileName, other.differentFileName);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            differentFileName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequestBodyPutMultipartDifferentFileNameRequestBody.class,
                "differentFileName", differentFileName);
    }
    
    public final static class Builder {
 
        private Optional<? extends DifferentFileName> differentFileName = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder differentFileName(DifferentFileName differentFileName) {
            Utils.checkNotNull(differentFileName, "differentFileName");
            this.differentFileName = Optional.ofNullable(differentFileName);
            return this;
        }

        public Builder differentFileName(Optional<? extends DifferentFileName> differentFileName) {
            Utils.checkNotNull(differentFileName, "differentFileName");
            this.differentFileName = differentFileName;
            return this;
        }
        
        public RequestBodyPutMultipartDifferentFileNameRequestBody build() {
            return new RequestBodyPutMultipartDifferentFileNameRequestBody(
                differentFileName);
        }
    }
}

