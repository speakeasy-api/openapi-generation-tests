/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.Utils;
/**
 * RequestBodyPutMultipartDifferentFileNameRes - OK
 */

public class RequestBodyPutMultipartDifferentFileNameRes {

    @JsonProperty("files")
    private java.util.Map<String, String> files;

    @JsonCreator
    public RequestBodyPutMultipartDifferentFileNameRes(
            @JsonProperty("files") java.util.Map<String, String> files) {
        files = Utils.emptyMapIfNull(files);
        this.files = files;
    }

    @JsonIgnore
    public java.util.Map<String, String> files() {
        return files;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RequestBodyPutMultipartDifferentFileNameRes withFiles(java.util.Map<String, String> files) {
        Utils.checkNotNull(files, "files");
        this.files = files;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestBodyPutMultipartDifferentFileNameRes other = (RequestBodyPutMultipartDifferentFileNameRes) o;
        return 
            java.util.Objects.deepEquals(this.files, other.files);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            files);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequestBodyPutMultipartDifferentFileNameRes.class,
                "files", files);
    }
    
    public final static class Builder {
 
        private java.util.Map<String, String> files;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder files(java.util.Map<String, String> files) {
            Utils.checkNotNull(files, "files");
            this.files = files;
            return this;
        }
        
        public RequestBodyPutMultipartDifferentFileNameRes build() {
            return new RequestBodyPutMultipartDifferentFileNameRes(
                files);
        }
    }
}

