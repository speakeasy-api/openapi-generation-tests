/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class RequestBodyPutMultipartFileRequestBody {

    @SpeakeasyMetadata("multipartForm:file")
    private Optional<? extends File> file;

    public RequestBodyPutMultipartFileRequestBody(
            Optional<? extends File> file) {
        Utils.checkNotNull(file, "file");
        this.file = file;
    }

    public Optional<? extends File> file() {
        return file;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RequestBodyPutMultipartFileRequestBody withFile(File file) {
        Utils.checkNotNull(file, "file");
        this.file = Optional.ofNullable(file);
        return this;
    }

    public RequestBodyPutMultipartFileRequestBody withFile(Optional<? extends File> file) {
        Utils.checkNotNull(file, "file");
        this.file = file;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestBodyPutMultipartFileRequestBody other = (RequestBodyPutMultipartFileRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.file, other.file);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            file);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequestBodyPutMultipartFileRequestBody.class,
                "file", file);
    }
    
    public final static class Builder {
 
        private Optional<? extends File> file = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder file(File file) {
            Utils.checkNotNull(file, "file");
            this.file = Optional.ofNullable(file);
            return this;
        }

        public Builder file(Optional<? extends File> file) {
            Utils.checkNotNull(file, "file");
            this.file = file;
            return this;
        }
        
        public RequestBodyPutMultipartFileRequestBody build() {
            return new RequestBodyPutMultipartFileRequestBody(
                file);
        }
    }
}

