/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class RequestBodyPutMultipartOptionalRequestBodyForm {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sampleField")
    private Optional<? extends String> sampleField;

    public RequestBodyPutMultipartOptionalRequestBodyForm(
            @JsonProperty("sampleField") Optional<? extends String> sampleField) {
        Utils.checkNotNull(sampleField, "sampleField");
        this.sampleField = sampleField;
    }

    public Optional<? extends String> sampleField() {
        return sampleField;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RequestBodyPutMultipartOptionalRequestBodyForm withSampleField(String sampleField) {
        Utils.checkNotNull(sampleField, "sampleField");
        this.sampleField = Optional.ofNullable(sampleField);
        return this;
    }

    public RequestBodyPutMultipartOptionalRequestBodyForm withSampleField(Optional<? extends String> sampleField) {
        Utils.checkNotNull(sampleField, "sampleField");
        this.sampleField = sampleField;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestBodyPutMultipartOptionalRequestBodyForm other = (RequestBodyPutMultipartOptionalRequestBodyForm) o;
        return 
            java.util.Objects.deepEquals(this.sampleField, other.sampleField);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            sampleField);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequestBodyPutMultipartOptionalRequestBodyForm.class,
                "sampleField", sampleField);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> sampleField = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder sampleField(String sampleField) {
            Utils.checkNotNull(sampleField, "sampleField");
            this.sampleField = Optional.ofNullable(sampleField);
            return this;
        }

        public Builder sampleField(Optional<? extends String> sampleField) {
            Utils.checkNotNull(sampleField, "sampleField");
            this.sampleField = sampleField;
            return this;
        }
        
        public RequestBodyPutMultipartOptionalRequestBodyForm build() {
            return new RequestBodyPutMultipartOptionalRequestBodyForm(
                sampleField);
        }
    }
}

