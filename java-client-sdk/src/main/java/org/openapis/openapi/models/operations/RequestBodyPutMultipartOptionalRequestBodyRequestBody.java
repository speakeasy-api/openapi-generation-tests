/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class RequestBodyPutMultipartOptionalRequestBodyRequestBody {

    @SpeakeasyMetadata("multipartForm:name=sampleField")
    private Optional<? extends String> sampleField;

    @SpeakeasyMetadata("multipartForm:file")
    private Optional<? extends SampleFile> sampleFile;

    @JsonCreator
    public RequestBodyPutMultipartOptionalRequestBodyRequestBody(
            Optional<? extends String> sampleField,
            Optional<? extends SampleFile> sampleFile) {
        Utils.checkNotNull(sampleField, "sampleField");
        Utils.checkNotNull(sampleFile, "sampleFile");
        this.sampleField = sampleField;
        this.sampleFile = sampleFile;
    }
    
    public RequestBodyPutMultipartOptionalRequestBodyRequestBody() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> sampleField() {
        return (Optional<String>) sampleField;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SampleFile> sampleFile() {
        return (Optional<SampleFile>) sampleFile;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RequestBodyPutMultipartOptionalRequestBodyRequestBody withSampleField(String sampleField) {
        Utils.checkNotNull(sampleField, "sampleField");
        this.sampleField = Optional.ofNullable(sampleField);
        return this;
    }

    public RequestBodyPutMultipartOptionalRequestBodyRequestBody withSampleField(Optional<? extends String> sampleField) {
        Utils.checkNotNull(sampleField, "sampleField");
        this.sampleField = sampleField;
        return this;
    }

    public RequestBodyPutMultipartOptionalRequestBodyRequestBody withSampleFile(SampleFile sampleFile) {
        Utils.checkNotNull(sampleFile, "sampleFile");
        this.sampleFile = Optional.ofNullable(sampleFile);
        return this;
    }

    public RequestBodyPutMultipartOptionalRequestBodyRequestBody withSampleFile(Optional<? extends SampleFile> sampleFile) {
        Utils.checkNotNull(sampleFile, "sampleFile");
        this.sampleFile = sampleFile;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestBodyPutMultipartOptionalRequestBodyRequestBody other = (RequestBodyPutMultipartOptionalRequestBodyRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.sampleField, other.sampleField) &&
            java.util.Objects.deepEquals(this.sampleFile, other.sampleFile);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            sampleField,
            sampleFile);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequestBodyPutMultipartOptionalRequestBodyRequestBody.class,
                "sampleField", sampleField,
                "sampleFile", sampleFile);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> sampleField = Optional.empty();
 
        private Optional<? extends SampleFile> sampleFile = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder sampleField(String sampleField) {
            Utils.checkNotNull(sampleField, "sampleField");
            this.sampleField = Optional.ofNullable(sampleField);
            return this;
        }

        public Builder sampleField(Optional<? extends String> sampleField) {
            Utils.checkNotNull(sampleField, "sampleField");
            this.sampleField = sampleField;
            return this;
        }

        public Builder sampleFile(SampleFile sampleFile) {
            Utils.checkNotNull(sampleFile, "sampleFile");
            this.sampleFile = Optional.ofNullable(sampleFile);
            return this;
        }

        public Builder sampleFile(Optional<? extends SampleFile> sampleFile) {
            Utils.checkNotNull(sampleFile, "sampleFile");
            this.sampleFile = sampleFile;
            return this;
        }
        
        public RequestBodyPutMultipartOptionalRequestBodyRequestBody build() {
            return new RequestBodyPutMultipartOptionalRequestBodyRequestBody(
                sampleField,
                sampleFile);
        }
    }
}

