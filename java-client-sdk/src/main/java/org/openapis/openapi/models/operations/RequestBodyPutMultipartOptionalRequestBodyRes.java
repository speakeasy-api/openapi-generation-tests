/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

/**
 * RequestBodyPutMultipartOptionalRequestBodyRes - OK
 */

public class RequestBodyPutMultipartOptionalRequestBodyRes {

    @JsonProperty("files")
    private Map<String, String> files;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("form")
    private Optional<? extends RequestBodyPutMultipartOptionalRequestBodyForm> form;

    @JsonCreator
    public RequestBodyPutMultipartOptionalRequestBodyRes(
            @JsonProperty("files") Map<String, String> files,
            @JsonProperty("form") Optional<? extends RequestBodyPutMultipartOptionalRequestBodyForm> form) {
        files = Utils.emptyMapIfNull(files);
        Utils.checkNotNull(form, "form");
        this.files = files;
        this.form = form;
    }
    
    public RequestBodyPutMultipartOptionalRequestBodyRes(
            Map<String, String> files) {
        this(files, Optional.empty());
    }

    @JsonIgnore
    public Map<String, String> files() {
        return files;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<RequestBodyPutMultipartOptionalRequestBodyForm> form() {
        return (Optional<RequestBodyPutMultipartOptionalRequestBodyForm>) form;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RequestBodyPutMultipartOptionalRequestBodyRes withFiles(Map<String, String> files) {
        Utils.checkNotNull(files, "files");
        this.files = files;
        return this;
    }

    public RequestBodyPutMultipartOptionalRequestBodyRes withForm(RequestBodyPutMultipartOptionalRequestBodyForm form) {
        Utils.checkNotNull(form, "form");
        this.form = Optional.ofNullable(form);
        return this;
    }

    public RequestBodyPutMultipartOptionalRequestBodyRes withForm(Optional<? extends RequestBodyPutMultipartOptionalRequestBodyForm> form) {
        Utils.checkNotNull(form, "form");
        this.form = form;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestBodyPutMultipartOptionalRequestBodyRes other = (RequestBodyPutMultipartOptionalRequestBodyRes) o;
        return 
            Objects.deepEquals(this.files, other.files) &&
            Objects.deepEquals(this.form, other.form);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            files,
            form);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequestBodyPutMultipartOptionalRequestBodyRes.class,
                "files", files,
                "form", form);
    }
    
    public final static class Builder {
 
        private Map<String, String> files;
 
        private Optional<? extends RequestBodyPutMultipartOptionalRequestBodyForm> form = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder files(Map<String, String> files) {
            Utils.checkNotNull(files, "files");
            this.files = files;
            return this;
        }

        public Builder form(RequestBodyPutMultipartOptionalRequestBodyForm form) {
            Utils.checkNotNull(form, "form");
            this.form = Optional.ofNullable(form);
            return this;
        }

        public Builder form(Optional<? extends RequestBodyPutMultipartOptionalRequestBodyForm> form) {
            Utils.checkNotNull(form, "form");
            this.form = form;
            return this;
        }
        
        public RequestBodyPutMultipartOptionalRequestBodyRes build() {
            return new RequestBodyPutMultipartOptionalRequestBodyRes(
                files,
                form);
        }
    }
}

