/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class RequestBodyPutMultipartSimpleForm {

    @JsonProperty("any")
    private String any;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bigint")
    private Optional<String> bigint;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bigintStr")
    private Optional<String> bigintStr;

    @JsonProperty("bool")
    private String bool;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("boolOpt")
    private Optional<String> boolOpt;

    @JsonProperty("date")
    private String date;

    @JsonProperty("dateTime")
    private String dateTime;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("decimal")
    private Optional<String> decimal;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("decimalStr")
    private Optional<String> decimalStr;

    @JsonProperty("enum")
    private String enum_;

    @JsonProperty("float32")
    private String float32;

    @JsonProperty("int")
    private String int_;

    @JsonProperty("int32")
    private String int32;

    @JsonProperty("int32Enum")
    private String int32Enum;

    @JsonProperty("intEnum")
    private String intEnum;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("intOptNull")
    private Optional<String> intOptNull;

    @JsonProperty("num")
    private String num;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numOptNull")
    private Optional<String> numOptNull;

    @JsonProperty("str")
    private String str;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("strOpt")
    private Optional<String> strOpt;

    @JsonCreator
    public RequestBodyPutMultipartSimpleForm(
            @JsonProperty("any") String any,
            @JsonProperty("bigint") Optional<String> bigint,
            @JsonProperty("bigintStr") Optional<String> bigintStr,
            @JsonProperty("bool") String bool,
            @JsonProperty("boolOpt") Optional<String> boolOpt,
            @JsonProperty("date") String date,
            @JsonProperty("dateTime") String dateTime,
            @JsonProperty("decimal") Optional<String> decimal,
            @JsonProperty("decimalStr") Optional<String> decimalStr,
            @JsonProperty("enum") String enum_,
            @JsonProperty("float32") String float32,
            @JsonProperty("int") String int_,
            @JsonProperty("int32") String int32,
            @JsonProperty("int32Enum") String int32Enum,
            @JsonProperty("intEnum") String intEnum,
            @JsonProperty("intOptNull") Optional<String> intOptNull,
            @JsonProperty("num") String num,
            @JsonProperty("numOptNull") Optional<String> numOptNull,
            @JsonProperty("str") String str,
            @JsonProperty("strOpt") Optional<String> strOpt) {
        Utils.checkNotNull(any, "any");
        Utils.checkNotNull(bigint, "bigint");
        Utils.checkNotNull(bigintStr, "bigintStr");
        Utils.checkNotNull(bool, "bool");
        Utils.checkNotNull(boolOpt, "boolOpt");
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(dateTime, "dateTime");
        Utils.checkNotNull(decimal, "decimal");
        Utils.checkNotNull(decimalStr, "decimalStr");
        Utils.checkNotNull(enum_, "enum_");
        Utils.checkNotNull(float32, "float32");
        Utils.checkNotNull(int_, "int_");
        Utils.checkNotNull(int32, "int32");
        Utils.checkNotNull(int32Enum, "int32Enum");
        Utils.checkNotNull(intEnum, "intEnum");
        Utils.checkNotNull(intOptNull, "intOptNull");
        Utils.checkNotNull(num, "num");
        Utils.checkNotNull(numOptNull, "numOptNull");
        Utils.checkNotNull(str, "str");
        Utils.checkNotNull(strOpt, "strOpt");
        this.any = any;
        this.bigint = bigint;
        this.bigintStr = bigintStr;
        this.bool = bool;
        this.boolOpt = boolOpt;
        this.date = date;
        this.dateTime = dateTime;
        this.decimal = decimal;
        this.decimalStr = decimalStr;
        this.enum_ = enum_;
        this.float32 = float32;
        this.int_ = int_;
        this.int32 = int32;
        this.int32Enum = int32Enum;
        this.intEnum = intEnum;
        this.intOptNull = intOptNull;
        this.num = num;
        this.numOptNull = numOptNull;
        this.str = str;
        this.strOpt = strOpt;
    }
    
    public RequestBodyPutMultipartSimpleForm(
            String any,
            String bool,
            String date,
            String dateTime,
            String enum_,
            String float32,
            String int_,
            String int32,
            String int32Enum,
            String intEnum,
            String num,
            String str) {
        this(any, Optional.empty(), Optional.empty(), bool, Optional.empty(), date, dateTime, Optional.empty(), Optional.empty(), enum_, float32, int_, int32, int32Enum, intEnum, Optional.empty(), num, Optional.empty(), str, Optional.empty());
    }

    @JsonIgnore
    public String any() {
        return any;
    }

    @JsonIgnore
    public Optional<String> bigint() {
        return bigint;
    }

    @JsonIgnore
    public Optional<String> bigintStr() {
        return bigintStr;
    }

    @JsonIgnore
    public String bool() {
        return bool;
    }

    @JsonIgnore
    public Optional<String> boolOpt() {
        return boolOpt;
    }

    @JsonIgnore
    public String date() {
        return date;
    }

    @JsonIgnore
    public String dateTime() {
        return dateTime;
    }

    @JsonIgnore
    public Optional<String> decimal() {
        return decimal;
    }

    @JsonIgnore
    public Optional<String> decimalStr() {
        return decimalStr;
    }

    @JsonIgnore
    public String enum_() {
        return enum_;
    }

    @JsonIgnore
    public String float32() {
        return float32;
    }

    @JsonIgnore
    public String int_() {
        return int_;
    }

    @JsonIgnore
    public String int32() {
        return int32;
    }

    @JsonIgnore
    public String int32Enum() {
        return int32Enum;
    }

    @JsonIgnore
    public String intEnum() {
        return intEnum;
    }

    @JsonIgnore
    public Optional<String> intOptNull() {
        return intOptNull;
    }

    @JsonIgnore
    public String num() {
        return num;
    }

    @JsonIgnore
    public Optional<String> numOptNull() {
        return numOptNull;
    }

    @JsonIgnore
    public String str() {
        return str;
    }

    @JsonIgnore
    public Optional<String> strOpt() {
        return strOpt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RequestBodyPutMultipartSimpleForm withAny(String any) {
        Utils.checkNotNull(any, "any");
        this.any = any;
        return this;
    }

    public RequestBodyPutMultipartSimpleForm withBigint(String bigint) {
        Utils.checkNotNull(bigint, "bigint");
        this.bigint = Optional.ofNullable(bigint);
        return this;
    }

    public RequestBodyPutMultipartSimpleForm withBigint(Optional<String> bigint) {
        Utils.checkNotNull(bigint, "bigint");
        this.bigint = bigint;
        return this;
    }

    public RequestBodyPutMultipartSimpleForm withBigintStr(String bigintStr) {
        Utils.checkNotNull(bigintStr, "bigintStr");
        this.bigintStr = Optional.ofNullable(bigintStr);
        return this;
    }

    public RequestBodyPutMultipartSimpleForm withBigintStr(Optional<String> bigintStr) {
        Utils.checkNotNull(bigintStr, "bigintStr");
        this.bigintStr = bigintStr;
        return this;
    }

    public RequestBodyPutMultipartSimpleForm withBool(String bool) {
        Utils.checkNotNull(bool, "bool");
        this.bool = bool;
        return this;
    }

    public RequestBodyPutMultipartSimpleForm withBoolOpt(String boolOpt) {
        Utils.checkNotNull(boolOpt, "boolOpt");
        this.boolOpt = Optional.ofNullable(boolOpt);
        return this;
    }

    public RequestBodyPutMultipartSimpleForm withBoolOpt(Optional<String> boolOpt) {
        Utils.checkNotNull(boolOpt, "boolOpt");
        this.boolOpt = boolOpt;
        return this;
    }

    public RequestBodyPutMultipartSimpleForm withDate(String date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    public RequestBodyPutMultipartSimpleForm withDateTime(String dateTime) {
        Utils.checkNotNull(dateTime, "dateTime");
        this.dateTime = dateTime;
        return this;
    }

    public RequestBodyPutMultipartSimpleForm withDecimal(String decimal) {
        Utils.checkNotNull(decimal, "decimal");
        this.decimal = Optional.ofNullable(decimal);
        return this;
    }

    public RequestBodyPutMultipartSimpleForm withDecimal(Optional<String> decimal) {
        Utils.checkNotNull(decimal, "decimal");
        this.decimal = decimal;
        return this;
    }

    public RequestBodyPutMultipartSimpleForm withDecimalStr(String decimalStr) {
        Utils.checkNotNull(decimalStr, "decimalStr");
        this.decimalStr = Optional.ofNullable(decimalStr);
        return this;
    }

    public RequestBodyPutMultipartSimpleForm withDecimalStr(Optional<String> decimalStr) {
        Utils.checkNotNull(decimalStr, "decimalStr");
        this.decimalStr = decimalStr;
        return this;
    }

    public RequestBodyPutMultipartSimpleForm withEnum(String enum_) {
        Utils.checkNotNull(enum_, "enum_");
        this.enum_ = enum_;
        return this;
    }

    public RequestBodyPutMultipartSimpleForm withFloat32(String float32) {
        Utils.checkNotNull(float32, "float32");
        this.float32 = float32;
        return this;
    }

    public RequestBodyPutMultipartSimpleForm withInt(String int_) {
        Utils.checkNotNull(int_, "int_");
        this.int_ = int_;
        return this;
    }

    public RequestBodyPutMultipartSimpleForm withInt32(String int32) {
        Utils.checkNotNull(int32, "int32");
        this.int32 = int32;
        return this;
    }

    public RequestBodyPutMultipartSimpleForm withInt32Enum(String int32Enum) {
        Utils.checkNotNull(int32Enum, "int32Enum");
        this.int32Enum = int32Enum;
        return this;
    }

    public RequestBodyPutMultipartSimpleForm withIntEnum(String intEnum) {
        Utils.checkNotNull(intEnum, "intEnum");
        this.intEnum = intEnum;
        return this;
    }

    public RequestBodyPutMultipartSimpleForm withIntOptNull(String intOptNull) {
        Utils.checkNotNull(intOptNull, "intOptNull");
        this.intOptNull = Optional.ofNullable(intOptNull);
        return this;
    }

    public RequestBodyPutMultipartSimpleForm withIntOptNull(Optional<String> intOptNull) {
        Utils.checkNotNull(intOptNull, "intOptNull");
        this.intOptNull = intOptNull;
        return this;
    }

    public RequestBodyPutMultipartSimpleForm withNum(String num) {
        Utils.checkNotNull(num, "num");
        this.num = num;
        return this;
    }

    public RequestBodyPutMultipartSimpleForm withNumOptNull(String numOptNull) {
        Utils.checkNotNull(numOptNull, "numOptNull");
        this.numOptNull = Optional.ofNullable(numOptNull);
        return this;
    }

    public RequestBodyPutMultipartSimpleForm withNumOptNull(Optional<String> numOptNull) {
        Utils.checkNotNull(numOptNull, "numOptNull");
        this.numOptNull = numOptNull;
        return this;
    }

    public RequestBodyPutMultipartSimpleForm withStr(String str) {
        Utils.checkNotNull(str, "str");
        this.str = str;
        return this;
    }

    public RequestBodyPutMultipartSimpleForm withStrOpt(String strOpt) {
        Utils.checkNotNull(strOpt, "strOpt");
        this.strOpt = Optional.ofNullable(strOpt);
        return this;
    }

    public RequestBodyPutMultipartSimpleForm withStrOpt(Optional<String> strOpt) {
        Utils.checkNotNull(strOpt, "strOpt");
        this.strOpt = strOpt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestBodyPutMultipartSimpleForm other = (RequestBodyPutMultipartSimpleForm) o;
        return 
            Objects.deepEquals(this.any, other.any) &&
            Objects.deepEquals(this.bigint, other.bigint) &&
            Objects.deepEquals(this.bigintStr, other.bigintStr) &&
            Objects.deepEquals(this.bool, other.bool) &&
            Objects.deepEquals(this.boolOpt, other.boolOpt) &&
            Objects.deepEquals(this.date, other.date) &&
            Objects.deepEquals(this.dateTime, other.dateTime) &&
            Objects.deepEquals(this.decimal, other.decimal) &&
            Objects.deepEquals(this.decimalStr, other.decimalStr) &&
            Objects.deepEquals(this.enum_, other.enum_) &&
            Objects.deepEquals(this.float32, other.float32) &&
            Objects.deepEquals(this.int_, other.int_) &&
            Objects.deepEquals(this.int32, other.int32) &&
            Objects.deepEquals(this.int32Enum, other.int32Enum) &&
            Objects.deepEquals(this.intEnum, other.intEnum) &&
            Objects.deepEquals(this.intOptNull, other.intOptNull) &&
            Objects.deepEquals(this.num, other.num) &&
            Objects.deepEquals(this.numOptNull, other.numOptNull) &&
            Objects.deepEquals(this.str, other.str) &&
            Objects.deepEquals(this.strOpt, other.strOpt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            any,
            bigint,
            bigintStr,
            bool,
            boolOpt,
            date,
            dateTime,
            decimal,
            decimalStr,
            enum_,
            float32,
            int_,
            int32,
            int32Enum,
            intEnum,
            intOptNull,
            num,
            numOptNull,
            str,
            strOpt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequestBodyPutMultipartSimpleForm.class,
                "any", any,
                "bigint", bigint,
                "bigintStr", bigintStr,
                "bool", bool,
                "boolOpt", boolOpt,
                "date", date,
                "dateTime", dateTime,
                "decimal", decimal,
                "decimalStr", decimalStr,
                "enum_", enum_,
                "float32", float32,
                "int_", int_,
                "int32", int32,
                "int32Enum", int32Enum,
                "intEnum", intEnum,
                "intOptNull", intOptNull,
                "num", num,
                "numOptNull", numOptNull,
                "str", str,
                "strOpt", strOpt);
    }
    
    public final static class Builder {
 
        private String any;
 
        private Optional<String> bigint = Optional.empty();
 
        private Optional<String> bigintStr = Optional.empty();
 
        private String bool;
 
        private Optional<String> boolOpt = Optional.empty();
 
        private String date;
 
        private String dateTime;
 
        private Optional<String> decimal = Optional.empty();
 
        private Optional<String> decimalStr = Optional.empty();
 
        private String enum_;
 
        private String float32;
 
        private String int_;
 
        private String int32;
 
        private String int32Enum;
 
        private String intEnum;
 
        private Optional<String> intOptNull = Optional.empty();
 
        private String num;
 
        private Optional<String> numOptNull = Optional.empty();
 
        private String str;
 
        private Optional<String> strOpt = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder any(String any) {
            Utils.checkNotNull(any, "any");
            this.any = any;
            return this;
        }

        public Builder bigint(String bigint) {
            Utils.checkNotNull(bigint, "bigint");
            this.bigint = Optional.ofNullable(bigint);
            return this;
        }

        public Builder bigint(Optional<String> bigint) {
            Utils.checkNotNull(bigint, "bigint");
            this.bigint = bigint;
            return this;
        }

        public Builder bigintStr(String bigintStr) {
            Utils.checkNotNull(bigintStr, "bigintStr");
            this.bigintStr = Optional.ofNullable(bigintStr);
            return this;
        }

        public Builder bigintStr(Optional<String> bigintStr) {
            Utils.checkNotNull(bigintStr, "bigintStr");
            this.bigintStr = bigintStr;
            return this;
        }

        public Builder bool(String bool) {
            Utils.checkNotNull(bool, "bool");
            this.bool = bool;
            return this;
        }

        public Builder boolOpt(String boolOpt) {
            Utils.checkNotNull(boolOpt, "boolOpt");
            this.boolOpt = Optional.ofNullable(boolOpt);
            return this;
        }

        public Builder boolOpt(Optional<String> boolOpt) {
            Utils.checkNotNull(boolOpt, "boolOpt");
            this.boolOpt = boolOpt;
            return this;
        }

        public Builder date(String date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }

        public Builder dateTime(String dateTime) {
            Utils.checkNotNull(dateTime, "dateTime");
            this.dateTime = dateTime;
            return this;
        }

        public Builder decimal(String decimal) {
            Utils.checkNotNull(decimal, "decimal");
            this.decimal = Optional.ofNullable(decimal);
            return this;
        }

        public Builder decimal(Optional<String> decimal) {
            Utils.checkNotNull(decimal, "decimal");
            this.decimal = decimal;
            return this;
        }

        public Builder decimalStr(String decimalStr) {
            Utils.checkNotNull(decimalStr, "decimalStr");
            this.decimalStr = Optional.ofNullable(decimalStr);
            return this;
        }

        public Builder decimalStr(Optional<String> decimalStr) {
            Utils.checkNotNull(decimalStr, "decimalStr");
            this.decimalStr = decimalStr;
            return this;
        }

        public Builder enum_(String enum_) {
            Utils.checkNotNull(enum_, "enum_");
            this.enum_ = enum_;
            return this;
        }

        public Builder float32(String float32) {
            Utils.checkNotNull(float32, "float32");
            this.float32 = float32;
            return this;
        }

        public Builder int_(String int_) {
            Utils.checkNotNull(int_, "int_");
            this.int_ = int_;
            return this;
        }

        public Builder int32(String int32) {
            Utils.checkNotNull(int32, "int32");
            this.int32 = int32;
            return this;
        }

        public Builder int32Enum(String int32Enum) {
            Utils.checkNotNull(int32Enum, "int32Enum");
            this.int32Enum = int32Enum;
            return this;
        }

        public Builder intEnum(String intEnum) {
            Utils.checkNotNull(intEnum, "intEnum");
            this.intEnum = intEnum;
            return this;
        }

        public Builder intOptNull(String intOptNull) {
            Utils.checkNotNull(intOptNull, "intOptNull");
            this.intOptNull = Optional.ofNullable(intOptNull);
            return this;
        }

        public Builder intOptNull(Optional<String> intOptNull) {
            Utils.checkNotNull(intOptNull, "intOptNull");
            this.intOptNull = intOptNull;
            return this;
        }

        public Builder num(String num) {
            Utils.checkNotNull(num, "num");
            this.num = num;
            return this;
        }

        public Builder numOptNull(String numOptNull) {
            Utils.checkNotNull(numOptNull, "numOptNull");
            this.numOptNull = Optional.ofNullable(numOptNull);
            return this;
        }

        public Builder numOptNull(Optional<String> numOptNull) {
            Utils.checkNotNull(numOptNull, "numOptNull");
            this.numOptNull = numOptNull;
            return this;
        }

        public Builder str(String str) {
            Utils.checkNotNull(str, "str");
            this.str = str;
            return this;
        }

        public Builder strOpt(String strOpt) {
            Utils.checkNotNull(strOpt, "strOpt");
            this.strOpt = Optional.ofNullable(strOpt);
            return this;
        }

        public Builder strOpt(Optional<String> strOpt) {
            Utils.checkNotNull(strOpt, "strOpt");
            this.strOpt = strOpt;
            return this;
        }
        
        public RequestBodyPutMultipartSimpleForm build() {
            return new RequestBodyPutMultipartSimpleForm(
                any,
                bigint,
                bigintStr,
                bool,
                boolOpt,
                date,
                dateTime,
                decimal,
                decimalStr,
                enum_,
                float32,
                int_,
                int32,
                int32Enum,
                intEnum,
                intOptNull,
                num,
                numOptNull,
                str,
                strOpt);
        }
    }
}

