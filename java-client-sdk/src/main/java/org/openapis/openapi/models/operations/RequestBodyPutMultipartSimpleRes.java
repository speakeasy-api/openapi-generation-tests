/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.Utils;

/**
 * RequestBodyPutMultipartSimpleRes - OK
 */

public class RequestBodyPutMultipartSimpleRes {

    @JsonProperty("form")
    private RequestBodyPutMultipartSimpleForm form;

    @JsonProperty("headers")
    private RequestBodyPutMultipartSimpleHeaders headers;

    public RequestBodyPutMultipartSimpleRes(
            @JsonProperty("form") RequestBodyPutMultipartSimpleForm form,
            @JsonProperty("headers") RequestBodyPutMultipartSimpleHeaders headers) {
        Utils.checkNotNull(form, "form");
        Utils.checkNotNull(headers, "headers");
        this.form = form;
        this.headers = headers;
    }

    public RequestBodyPutMultipartSimpleForm form() {
        return form;
    }

    public RequestBodyPutMultipartSimpleHeaders headers() {
        return headers;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RequestBodyPutMultipartSimpleRes withForm(RequestBodyPutMultipartSimpleForm form) {
        Utils.checkNotNull(form, "form");
        this.form = form;
        return this;
    }

    public RequestBodyPutMultipartSimpleRes withHeaders(RequestBodyPutMultipartSimpleHeaders headers) {
        Utils.checkNotNull(headers, "headers");
        this.headers = headers;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestBodyPutMultipartSimpleRes other = (RequestBodyPutMultipartSimpleRes) o;
        return 
            java.util.Objects.deepEquals(this.form, other.form) &&
            java.util.Objects.deepEquals(this.headers, other.headers);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            form,
            headers);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequestBodyPutMultipartSimpleRes.class,
                "form", form,
                "headers", headers);
    }
    
    public final static class Builder {
 
        private RequestBodyPutMultipartSimpleForm form;
 
        private RequestBodyPutMultipartSimpleHeaders headers;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder form(RequestBodyPutMultipartSimpleForm form) {
            Utils.checkNotNull(form, "form");
            this.form = form;
            return this;
        }

        public Builder headers(RequestBodyPutMultipartSimpleHeaders headers) {
            Utils.checkNotNull(headers, "headers");
            this.headers = headers;
            return this;
        }
        
        public RequestBodyPutMultipartSimpleRes build() {
            return new RequestBodyPutMultipartSimpleRes(
                form,
                headers);
        }
    }
}

