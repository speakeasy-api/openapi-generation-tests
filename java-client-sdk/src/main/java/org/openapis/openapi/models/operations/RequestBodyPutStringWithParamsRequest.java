/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class RequestBodyPutStringWithParamsRequest {

    @SpeakeasyMetadata("request:mediaType=text/plain")
    private String requestBody;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=queryStringParam")
    private String queryStringParam;

    @JsonCreator
    public RequestBodyPutStringWithParamsRequest(
            String requestBody,
            String queryStringParam) {
        Utils.checkNotNull(requestBody, "requestBody");
        Utils.checkNotNull(queryStringParam, "queryStringParam");
        this.requestBody = requestBody;
        this.queryStringParam = queryStringParam;
    }

    @JsonIgnore
    public String requestBody() {
        return requestBody;
    }

    @JsonIgnore
    public String queryStringParam() {
        return queryStringParam;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RequestBodyPutStringWithParamsRequest withRequestBody(String requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }

    public RequestBodyPutStringWithParamsRequest withQueryStringParam(String queryStringParam) {
        Utils.checkNotNull(queryStringParam, "queryStringParam");
        this.queryStringParam = queryStringParam;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestBodyPutStringWithParamsRequest other = (RequestBodyPutStringWithParamsRequest) o;
        return 
            Objects.deepEquals(this.requestBody, other.requestBody) &&
            Objects.deepEquals(this.queryStringParam, other.queryStringParam);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            requestBody,
            queryStringParam);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequestBodyPutStringWithParamsRequest.class,
                "requestBody", requestBody,
                "queryStringParam", queryStringParam);
    }
    
    public final static class Builder {
 
        private String requestBody;
 
        private String queryStringParam;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder requestBody(String requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }

        public Builder queryStringParam(String queryStringParam) {
            Utils.checkNotNull(queryStringParam, "queryStringParam");
            this.queryStringParam = queryStringParam;
            return this;
        }
        
        public RequestBodyPutStringWithParamsRequest build() {
            return new RequestBodyPutStringWithParamsRequest(
                requestBody,
                queryStringParam);
        }
    }
}

