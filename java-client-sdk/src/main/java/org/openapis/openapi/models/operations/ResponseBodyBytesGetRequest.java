/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class ResponseBodyBytesGetRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=seed")
    private Optional<Integer> seed;

    @JsonCreator
    public ResponseBodyBytesGetRequest(
            Optional<Integer> seed) {
        Utils.checkNotNull(seed, "seed");
        this.seed = seed;
    }
    
    public ResponseBodyBytesGetRequest() {
        this(Optional.empty());
    }

    @JsonIgnore
    public Optional<Integer> seed() {
        return seed;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ResponseBodyBytesGetRequest withSeed(int seed) {
        Utils.checkNotNull(seed, "seed");
        this.seed = Optional.ofNullable(seed);
        return this;
    }

    public ResponseBodyBytesGetRequest withSeed(Optional<Integer> seed) {
        Utils.checkNotNull(seed, "seed");
        this.seed = seed;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ResponseBodyBytesGetRequest other = (ResponseBodyBytesGetRequest) o;
        return 
            Objects.deepEquals(this.seed, other.seed);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            seed);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ResponseBodyBytesGetRequest.class,
                "seed", seed);
    }
    
    public final static class Builder {
 
        private Optional<Integer> seed = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder seed(int seed) {
            Utils.checkNotNull(seed, "seed");
            this.seed = Optional.ofNullable(seed);
            return this;
        }

        public Builder seed(Optional<Integer> seed) {
            Utils.checkNotNull(seed, "seed");
            this.seed = seed;
            return this;
        }
        
        public ResponseBodyBytesGetRequest build() {
            return new ResponseBodyBytesGetRequest(
                seed);
        }
    }
}

