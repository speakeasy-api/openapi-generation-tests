/* 
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;

public class ResponseBodyEmptyWithHeadersRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=X-Number-Header")
    private double xNumberHeader;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=X-String-Header")
    private String xStringHeader;

    @JsonCreator
    public ResponseBodyEmptyWithHeadersRequest(
            double xNumberHeader,
            String xStringHeader) {
        Utils.checkNotNull(xNumberHeader, "xNumberHeader");
        Utils.checkNotNull(xStringHeader, "xStringHeader");
        this.xNumberHeader = xNumberHeader;
        this.xStringHeader = xStringHeader;
    }

    @JsonIgnore
    public double xNumberHeader() {
        return xNumberHeader;
    }

    @JsonIgnore
    public String xStringHeader() {
        return xStringHeader;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ResponseBodyEmptyWithHeadersRequest withXNumberHeader(double xNumberHeader) {
        Utils.checkNotNull(xNumberHeader, "xNumberHeader");
        this.xNumberHeader = xNumberHeader;
        return this;
    }

    public ResponseBodyEmptyWithHeadersRequest withXStringHeader(String xStringHeader) {
        Utils.checkNotNull(xStringHeader, "xStringHeader");
        this.xStringHeader = xStringHeader;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ResponseBodyEmptyWithHeadersRequest other = (ResponseBodyEmptyWithHeadersRequest) o;
        return 
            java.util.Objects.deepEquals(this.xNumberHeader, other.xNumberHeader) &&
            java.util.Objects.deepEquals(this.xStringHeader, other.xStringHeader);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            xNumberHeader,
            xStringHeader);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ResponseBodyEmptyWithHeadersRequest.class,
                "xNumberHeader", xNumberHeader,
                "xStringHeader", xStringHeader);
    }
    
    public final static class Builder {
 
        private Double xNumberHeader;
 
        private String xStringHeader;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder xNumberHeader(double xNumberHeader) {
            Utils.checkNotNull(xNumberHeader, "xNumberHeader");
            this.xNumberHeader = xNumberHeader;
            return this;
        }

        public Builder xStringHeader(String xStringHeader) {
            Utils.checkNotNull(xStringHeader, "xStringHeader");
            this.xStringHeader = xStringHeader;
            return this;
        }
        
        public ResponseBodyEmptyWithHeadersRequest build() {
            return new ResponseBodyEmptyWithHeadersRequest(
                xNumberHeader,
                xStringHeader);
        }
    }
}

