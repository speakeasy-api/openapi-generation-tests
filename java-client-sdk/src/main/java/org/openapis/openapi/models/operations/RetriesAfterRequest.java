/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class RetriesAfterRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=num-retries")
    private Optional<Long> numRetries;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=request-id")
    private String requestId;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=retry-after-val")
    private Optional<Long> retryAfterVal;

    @JsonCreator
    public RetriesAfterRequest(
            Optional<Long> numRetries,
            String requestId,
            Optional<Long> retryAfterVal) {
        Utils.checkNotNull(numRetries, "numRetries");
        Utils.checkNotNull(requestId, "requestId");
        Utils.checkNotNull(retryAfterVal, "retryAfterVal");
        this.numRetries = numRetries;
        this.requestId = requestId;
        this.retryAfterVal = retryAfterVal;
    }
    
    public RetriesAfterRequest(
            String requestId) {
        this(Optional.empty(), requestId, Optional.empty());
    }

    @JsonIgnore
    public Optional<Long> numRetries() {
        return numRetries;
    }

    @JsonIgnore
    public String requestId() {
        return requestId;
    }

    @JsonIgnore
    public Optional<Long> retryAfterVal() {
        return retryAfterVal;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RetriesAfterRequest withNumRetries(long numRetries) {
        Utils.checkNotNull(numRetries, "numRetries");
        this.numRetries = Optional.ofNullable(numRetries);
        return this;
    }

    public RetriesAfterRequest withNumRetries(Optional<Long> numRetries) {
        Utils.checkNotNull(numRetries, "numRetries");
        this.numRetries = numRetries;
        return this;
    }

    public RetriesAfterRequest withRequestId(String requestId) {
        Utils.checkNotNull(requestId, "requestId");
        this.requestId = requestId;
        return this;
    }

    public RetriesAfterRequest withRetryAfterVal(long retryAfterVal) {
        Utils.checkNotNull(retryAfterVal, "retryAfterVal");
        this.retryAfterVal = Optional.ofNullable(retryAfterVal);
        return this;
    }

    public RetriesAfterRequest withRetryAfterVal(Optional<Long> retryAfterVal) {
        Utils.checkNotNull(retryAfterVal, "retryAfterVal");
        this.retryAfterVal = retryAfterVal;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RetriesAfterRequest other = (RetriesAfterRequest) o;
        return 
            Objects.deepEquals(this.numRetries, other.numRetries) &&
            Objects.deepEquals(this.requestId, other.requestId) &&
            Objects.deepEquals(this.retryAfterVal, other.retryAfterVal);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            numRetries,
            requestId,
            retryAfterVal);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RetriesAfterRequest.class,
                "numRetries", numRetries,
                "requestId", requestId,
                "retryAfterVal", retryAfterVal);
    }
    
    public final static class Builder {
 
        private Optional<Long> numRetries = Optional.empty();
 
        private String requestId;
 
        private Optional<Long> retryAfterVal = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder numRetries(long numRetries) {
            Utils.checkNotNull(numRetries, "numRetries");
            this.numRetries = Optional.ofNullable(numRetries);
            return this;
        }

        public Builder numRetries(Optional<Long> numRetries) {
            Utils.checkNotNull(numRetries, "numRetries");
            this.numRetries = numRetries;
            return this;
        }

        public Builder requestId(String requestId) {
            Utils.checkNotNull(requestId, "requestId");
            this.requestId = requestId;
            return this;
        }

        public Builder retryAfterVal(long retryAfterVal) {
            Utils.checkNotNull(retryAfterVal, "retryAfterVal");
            this.retryAfterVal = Optional.ofNullable(retryAfterVal);
            return this;
        }

        public Builder retryAfterVal(Optional<Long> retryAfterVal) {
            Utils.checkNotNull(retryAfterVal, "retryAfterVal");
            this.retryAfterVal = retryAfterVal;
            return this;
        }
        
        public RetriesAfterRequest build() {
            return new RetriesAfterRequest(
                numRetries,
                requestId,
                retryAfterVal);
        }
    }
}

