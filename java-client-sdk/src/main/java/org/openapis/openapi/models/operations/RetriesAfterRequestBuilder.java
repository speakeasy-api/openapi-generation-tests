/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.lang.Long;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.Options;
import org.openapis.openapi.utils.RetryConfig;
import org.openapis.openapi.utils.Utils;

public class RetriesAfterRequestBuilder {

    private Optional<Long> numRetries = Optional.empty();
    private String requestId;
    private Optional<Long> retryAfterVal = Optional.empty();
    private Optional<String> serverURL = Optional.empty();
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKMethodInterfaces.MethodCallRetriesAfter sdk;

    public RetriesAfterRequestBuilder(SDKMethodInterfaces.MethodCallRetriesAfter sdk) {
        this.sdk = sdk;
    }
                
    public RetriesAfterRequestBuilder numRetries(long numRetries) {
        Utils.checkNotNull(numRetries, "numRetries");
        this.numRetries = Optional.of(numRetries);
        return this;
    }

    public RetriesAfterRequestBuilder numRetries(Optional<Long> numRetries) {
        Utils.checkNotNull(numRetries, "numRetries");
        this.numRetries = numRetries;
        return this;
    }

    public RetriesAfterRequestBuilder requestId(String requestId) {
        Utils.checkNotNull(requestId, "requestId");
        this.requestId = requestId;
        return this;
    }
                
    public RetriesAfterRequestBuilder retryAfterVal(long retryAfterVal) {
        Utils.checkNotNull(retryAfterVal, "retryAfterVal");
        this.retryAfterVal = Optional.of(retryAfterVal);
        return this;
    }

    public RetriesAfterRequestBuilder retryAfterVal(Optional<Long> retryAfterVal) {
        Utils.checkNotNull(retryAfterVal, "retryAfterVal");
        this.retryAfterVal = retryAfterVal;
        return this;
    }
                
    public RetriesAfterRequestBuilder serverURL(String serverURL) {
        Utils.checkNotNull(serverURL, "serverURL");
        this.serverURL = Optional.of(serverURL);
        return this;
    }

    public RetriesAfterRequestBuilder serverURL(Optional<String> serverURL) {
        Utils.checkNotNull(serverURL, "serverURL");
        this.serverURL = serverURL;
        return this;
    }
                
    public RetriesAfterRequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public RetriesAfterRequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }

    public RetriesAfterResponse call() throws Exception {
        Optional<Options> options = Optional.of(Options.builder()
                                                    .retryConfig(retryConfig)
                                                    .build());
        return sdk.retriesAfter(
            numRetries,
            requestId,
            retryAfterVal,
            serverURL,
            options);
    }
}
