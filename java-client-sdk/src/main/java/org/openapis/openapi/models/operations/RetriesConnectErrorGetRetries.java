/* 
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.Utils;
/**
 * RetriesConnectErrorGetRetries - OK
 */

public class RetriesConnectErrorGetRetries {

    @JsonProperty("retries")
    private long retries;

    @JsonCreator
    public RetriesConnectErrorGetRetries(
            @JsonProperty("retries") long retries) {
        Utils.checkNotNull(retries, "retries");
        this.retries = retries;
    }

    @JsonIgnore
    public long retries() {
        return retries;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RetriesConnectErrorGetRetries withRetries(long retries) {
        Utils.checkNotNull(retries, "retries");
        this.retries = retries;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RetriesConnectErrorGetRetries other = (RetriesConnectErrorGetRetries) o;
        return 
            java.util.Objects.deepEquals(this.retries, other.retries);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            retries);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RetriesConnectErrorGetRetries.class,
                "retries", retries);
    }
    
    public final static class Builder {
 
        private Long retries;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder retries(long retries) {
            Utils.checkNotNull(retries, "retries");
            this.retries = retries;
            return this;
        }
        
        public RetriesConnectErrorGetRetries build() {
            return new RetriesConnectErrorGetRetries(
                retries);
        }
    }
}

