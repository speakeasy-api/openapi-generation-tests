/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.lang.Boolean;
import java.lang.Exception;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.String;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapis.openapi.models.shared.AnyOfMultiMatch;
import org.openapis.openapi.models.shared.AuthServiceRequestBody;
import org.openapis.openapi.models.shared.CollectionOneOfObject;
import org.openapis.openapi.models.shared.ComplexNumberArrays;
import org.openapis.openapi.models.shared.ComplexNumberMaps;
import org.openapis.openapi.models.shared.ConflictingEnum;
import org.openapis.openapi.models.shared.ConstDiscriminatedOneOf;
import org.openapis.openapi.models.shared.DeepObject;
import org.openapis.openapi.models.shared.DeepObjectCamelCase;
import org.openapis.openapi.models.shared.DeepObjectSmaller;
import org.openapis.openapi.models.shared.DefaultsAndConsts;
import org.openapis.openapi.models.shared.DeprecatedFieldInObject;
import org.openapis.openapi.models.shared.DeprecatedObjectWithExample;
import org.openapis.openapi.models.shared.EmptyObjectParam;
import org.openapis.openapi.models.shared.ExampleResource;
import org.openapis.openapi.models.shared.FlattenedTypedObject1;
import org.openapis.openapi.models.shared.HasWheels;
import org.openapis.openapi.models.shared.InfectedWithAny;
import org.openapis.openapi.models.shared.LimitOffsetConfig;
import org.openapis.openapi.models.shared.MixedUnionTypes;
import org.openapis.openapi.models.shared.NullableObject;
import org.openapis.openapi.models.shared.NullableOneOfRefInObject;
import org.openapis.openapi.models.shared.NullableOneOfTypeInObject;
import org.openapis.openapi.models.shared.ObjectWithNullEnums;
import org.openapis.openapi.models.shared.ReadOnlyObjectInput;
import org.openapis.openapi.models.shared.ReadWriteObject;
import org.openapis.openapi.models.shared.RefQueryParamObj;
import org.openapis.openapi.models.shared.RefQueryParamObjExploded;
import org.openapis.openapi.models.shared.SimpleObject;
import org.openapis.openapi.models.shared.SimpleObjectCamelCase;
import org.openapis.openapi.models.shared.StronglyTypedOneOfDiscriminatedObject;
import org.openapis.openapi.models.shared.StronglyTypedOneOfObject;
import org.openapis.openapi.models.shared.StronglyTypedOneOfObjectWithNonStandardDiscriminatorName;
import org.openapis.openapi.models.shared.ThemeRequestOpaque;
import org.openapis.openapi.models.shared.TypedObject1;
import org.openapis.openapi.models.shared.TypedObjectNullableOneOf;
import org.openapis.openapi.models.shared.TypedObjectOneOf;
import org.openapis.openapi.models.shared.UnionOfArrays;
import org.openapis.openapi.models.shared.Vehicle;
import org.openapis.openapi.models.shared.WeaklyTypedOneOfNullEnumObject;
import org.openapis.openapi.models.shared.WeaklyTypedOneOfObject;
import org.openapis.openapi.models.shared.WeaklyTypedOneOfReadOnlyObjectInput;
import org.openapis.openapi.models.shared.WeaklyTypedOneOfReadWriteObject;
import org.openapis.openapi.models.shared.WeaklyTypedOneOfWriteOnlyObject;
import org.openapis.openapi.models.shared.WriteOnlyObject;
import org.openapis.openapi.utils.Options;
import org.openapitools.jackson.nullable.JsonNullable;

public class SDKMethodInterfaces {


    public interface MethodCallAmbiguousQueryParam {
        AmbiguousQueryParamResponse ambiguousQueryParam(
            Console console) throws Exception;
    }


    public interface MethodCallAuthenticatedRequest {
        AuthenticatedRequestResponse authenticatedRequest(
            Optional<? extends AuthenticatedRequestRequestBody> request,
            AuthenticatedRequestSecurity security) throws Exception;
    }


    public interface MethodCallConflictingEnum {
        ConflictingEnumResponse conflictingEnum(
            Optional<? extends ConflictingEnum> request) throws Exception;
    }


    public interface MethodCallIgnoredGenerationPut {
        IgnoredGenerationPutResponse ignoredGenerationPut(
            String request) throws Exception;
    }


    public interface MethodCallMultilineExample {
        MultilineExampleResponse multilineExample(
            Optional<? extends MultilineExampleRequestBody> request) throws Exception;
    }


    public interface MethodCallPostAdditionalPropertiesWithNullableFields {
        PostAdditionalPropertiesWithNullableFieldsResponse postAdditionalPropertiesWithNullableFields(
            Map<String, Object> request) throws Exception;
    }


    public interface MethodCallResponseBodyJsonGet {
        ResponseBodyJsonGetResponse responseBodyJsonGetDirect() throws Exception;
    }


    public interface MethodCallAnchorTypesGet {
        AnchorTypesGetResponse anchorTypesGetDirect() throws Exception;
    }


    public interface MethodCallArrayCircularReferenceGet {
        ArrayCircularReferenceGetResponse arrayCircularReferenceGetDirect() throws Exception;
    }


    public interface MethodCallCircularReferenceGet {
        CircularReferenceGetResponse circularReferenceGetDirect() throws Exception;
    }


    public interface MethodCallDateParamWithDefault {
        DateParamWithDefaultResponse dateParamWithDefault(
            LocalDate dateInput) throws Exception;
    }


    public interface MethodCallDateTimeParamWithDefault {
        DateTimeParamWithDefaultResponse dateTimeParamWithDefault(
            OffsetDateTime dateTimeInput) throws Exception;
    }


    public interface MethodCallDecimalParamWithDefault {
        DecimalParamWithDefaultResponse decimalParamWithDefault(
            BigDecimal decimalInput) throws Exception;
    }


    public interface MethodCallDeprecatedFieldInSchemaPost {
        DeprecatedFieldInSchemaPostResponse deprecatedFieldInSchemaPost(
            DeprecatedFieldInObject request) throws Exception;
    }


    public interface MethodCallDeprecatedObjectInSchemaGet {
        DeprecatedObjectInSchemaGetResponse deprecatedObjectInSchemaGetDirect() throws Exception;
    }


    public interface MethodCallDeprecatedOperationNoCommentsGet {
        DeprecatedOperationNoCommentsGetResponse deprecatedOperationNoCommentsGet(
            Optional<String> deprecatedParameter) throws Exception;
    }


    public interface MethodCallDeprecatedOperationWithCommentsGet {
        DeprecatedOperationWithCommentsGetResponse deprecatedOperationWithCommentsGet(
            Optional<String> deprecatedParameter,
            Optional<String> newParameter) throws Exception;
    }


    public interface MethodCallEmptyObjectGet {
        EmptyObjectGetResponse emptyObjectGet(
            EmptyObjectParam emptyObject) throws Exception;
    }


    public interface MethodCallEmptyResponseObjectWithCommentGet {
        EmptyResponseObjectWithCommentGetResponse emptyResponseObjectWithCommentGetDirect() throws Exception;
    }


    public interface MethodCallGetGlobalNameOverride {
        GetGlobalNameOverrideResponse globalNameOverridden(
            Optional<? extends SimpleObject> request) throws Exception;
    }


    public interface MethodCallIgnoredGenerationGet {
        IgnoredGenerationGetResponse ignoredGenerationGetDirect() throws Exception;
    }


    public interface MethodCallIgnoresPost {
        IgnoresPostResponse ignoresPost(
            IgnoresPostRequestBody requestBody,
            Optional<String> testParam) throws Exception;
    }


    public interface MethodCallNameOverrideGet {
        NameOverrideGetResponse nameOverride(
            EnumNameOverride testEnumQueryParam,
            String testQueryParam) throws Exception;
    }


    public interface MethodCallObjectCircularReferenceGet {
        ObjectCircularReferenceGetResponse objectCircularReferenceGetDirect() throws Exception;
    }


    public interface MethodCallOneOfCircularReferenceGet {
        OneOfCircularReferenceGetResponse oneOfCircularReferenceGetDirect() throws Exception;
    }


    public interface MethodCallTypedParameterGenerationGet {
        TypedParameterGenerationGetResponse typedParameterGenerationGet(
            Optional<? extends BigInteger> bigint,
            Optional<LocalDate> date,
            Optional<? extends BigDecimal> decimal,
            Optional<? extends Obj> obj) throws Exception;
    }


    public interface MethodCallUsageExamplePost {
        UsageExamplePostResponse usageExamplePost(
            UsageExamplePostRequest request,
            UsageExamplePostSecurity security) throws Exception;
    }


    public interface MethodCallCollectionOneOfPost {
        CollectionOneOfPostResponse collectionOneOfPost(
            CollectionOneOfObject request) throws Exception;
    }


    public interface MethodCallConstDiscriminatedOneOf {
        ConstDiscriminatedOneOfResponse constDiscriminatedOneOf(
            ConstDiscriminatedOneOf request) throws Exception;
    }


    public interface MethodCallDiscriminatedOneMultipleMemberships {
        DiscriminatedOneMultipleMembershipsResponse discriminatedOneMultipleMemberships(
            Vehicle request) throws Exception;
    }


    public interface MethodCallDiscriminatedOneMultipleMembershipsHasWheels {
        DiscriminatedOneMultipleMembershipsHasWheelsResponse discriminatedOneMultipleMembershipsHasWheels(
            HasWheels request) throws Exception;
    }


    public interface MethodCallFlattenedTypedObjectPost {
        FlattenedTypedObjectPostResponse flattenedTypedObjectPost(
            FlattenedTypedObject1 request) throws Exception;
    }


    public interface MethodCallInfectedWithAny {
        InfectedWithAnyResponse infectedWithAny(
            InfectedWithAny request) throws Exception;
    }


    public interface MethodCallMixedTypeOneOfPost {
        MixedTypeOneOfPostResponse mixedTypeOneOfPost(
            MixedTypeOneOfPostRequestBody request) throws Exception;
    }


    public interface MethodCallMixedUnionTypes {
        MixedUnionTypesResponse mixedUnionTypes(
            MixedUnionTypes request) throws Exception;
    }


    public interface MethodCallMultiMatchAnyOf {
        MultiMatchAnyOfResponse multiMatchAnyOf(
            AnyOfMultiMatch request) throws Exception;
    }


    public interface MethodCallNullableOneOfRefInObjectPost {
        NullableOneOfRefInObjectPostResponse nullableOneOfRefInObjectPost(
            NullableOneOfRefInObject request) throws Exception;
    }


    public interface MethodCallNullableOneOfSchemaPost {
        NullableOneOfSchemaPostResponse nullableOneOfSchemaPost(
            Optional<? extends NullableOneOfSchemaPostRequestBody> request) throws Exception;
    }


    public interface MethodCallNullableOneOfTypeInObjectPost {
        NullableOneOfTypeInObjectPostResponse nullableOneOfTypeInObjectPost(
            NullableOneOfTypeInObject request) throws Exception;
    }


    public interface MethodCallNullableTypedObjectPost {
        NullableTypedObjectPostResponse nullableTypedObjectPost(
            Optional<? extends TypedObject1> request) throws Exception;
    }


    public interface MethodCallOneOfOverlappingObjects {
        OneOfOverlappingObjectsResponse oneOfOverlappingObjects(
            OneOfOverlappingObjectsRequestBody request) throws Exception;
    }


    public interface MethodCallPrimitiveTypeOneOfPost {
        PrimitiveTypeOneOfPostResponse primitiveTypeOneOfPost(
            PrimitiveTypeOneOfPostRequestBody request) throws Exception;
    }


    public interface MethodCallStronglyTypedOneOfDiscriminatedPost {
        StronglyTypedOneOfDiscriminatedPostResponse stronglyTypedOneOfDiscriminatedPost(
            StronglyTypedOneOfDiscriminatedObject request) throws Exception;
    }


    public interface MethodCallStronglyTypedOneOfPost {
        StronglyTypedOneOfPostResponse stronglyTypedOneOfPost(
            StronglyTypedOneOfObject request) throws Exception;
    }


    public interface MethodCallStronglyTypedOneOfPostWithNonStandardDiscriminatorName {
        StronglyTypedOneOfPostWithNonStandardDiscriminatorNameResponse stronglyTypedOneOfPostWithNonStandardDiscriminatorName(
            StronglyTypedOneOfObjectWithNonStandardDiscriminatorName request) throws Exception;
    }


    public interface MethodCallTypedObjectNullableOneOfPost {
        TypedObjectNullableOneOfPostResponse typedObjectNullableOneOfPost(
            Optional<? extends TypedObjectNullableOneOf> request) throws Exception;
    }


    public interface MethodCallTypedObjectOneOfPost {
        TypedObjectOneOfPostResponse typedObjectOneOfPost(
            TypedObjectOneOf request) throws Exception;
    }


    public interface MethodCallUnionBigIntStrDecimal {
        UnionBigIntStrDecimalResponse unionBigIntStrDecimal(
            UnionBigIntStrDecimalRequestBody request) throws Exception;
    }


    public interface MethodCallUnionDateNull {
        UnionDateNullResponse unionDateNull(
            Optional<LocalDate> request) throws Exception;
    }


    public interface MethodCallUnionDateTimeBigInt {
        UnionDateTimeBigIntResponse unionDateTimeBigInt(
            UnionDateTimeBigIntRequestBody request) throws Exception;
    }


    public interface MethodCallUnionDateTimeNull {
        UnionDateTimeNullResponse unionDateTimeNull(
            Optional<OffsetDateTime> request) throws Exception;
    }


    public interface MethodCallUnionMap {
        UnionMapResponse unionMap(
            UnionMapRequestBody request) throws Exception;
    }


    public interface MethodCallUnionMapOptional {
        UnionMapOptionalResponse unionMapOptional(
            UnionMapOptionalRequestBody request) throws Exception;
    }


    public interface MethodCallUnionNestedEnumsForm {
        UnionNestedEnumsFormResponse unionNestedEnumsForm(
            UnionNestedEnumsFormRequestBody request) throws Exception;
    }


    public interface MethodCallUnionNestedEnumsMultipart {
        UnionNestedEnumsMultipartResponse unionNestedEnumsMultipart(
            UnionNestedEnumsMultipartRequestBody request) throws Exception;
    }


    public interface MethodCallUnionOfArraysPost {
        UnionOfArraysPostResponse unionOfArraysPost(
            List<UnionOfArrays> request) throws Exception;
    }


    public interface MethodCallWeaklyTypedOneOfNullEnumPost {
        WeaklyTypedOneOfNullEnumPostResponse weaklyTypedOneOfNullEnumPost(
            WeaklyTypedOneOfNullEnumObject request) throws Exception;
    }


    public interface MethodCallWeaklyTypedOneOfPost {
        WeaklyTypedOneOfPostResponse weaklyTypedOneOfPost(
            WeaklyTypedOneOfObject request) throws Exception;
    }


    public interface MethodCallConnectionErrorGet {
        ConnectionErrorGetResponse connectionErrorGet(
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallStatusGetError {
        StatusGetErrorResponse statusGetError(
            long statusCode) throws Exception;
    }


    public interface MethodCallStatusGetXSpeakeasyErrors {
        StatusGetXSpeakeasyErrorsResponse statusGetXSpeakeasyErrors(
            long statusCode,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallCustomClientPost {
        CustomClientPostResponse customClientPost(
            String headerParam,
            String pathParam,
            String queryStringParam,
            Optional<? extends SimpleObject> simpleObject) throws Exception;
    }


    public interface MethodCallFlattenedEnvelopePaginationResponse {
        FlattenedEnvelopePaginationResponseResponse flattenedEnvelopePaginationResponse(
            Optional<String> cursor) throws Exception;
    }


    public interface MethodCallFlattenedEnvelopeResponse {
        FlattenedEnvelopeResponseResponse flattenedEnvelopeResponseDirect() throws Exception;
    }


    public interface MethodCallFlattenedEnvelopeUnionResponse {
        FlattenedEnvelopeUnionResponseResponse flattenedEnvelopeUnionResponseDirect() throws Exception;
    }


    public interface MethodCallFlattenedUnionResponse {
        FlattenedUnionResponseResponse flattenedUnionResponseDirect() throws Exception;
    }


    public interface MethodCallOverriddenFieldNamesPost {
        OverriddenFieldNamesPostResponse overriddenFieldNamesPost(
            OverriddenFieldNamesPostRequestBody request) throws Exception;
    }


    public interface MethodCallResponseBodyAdditionalPropertiesAnyPost {
        ResponseBodyAdditionalPropertiesAnyPostResponse responseBodyAdditionalPropertiesAnyPost(
            Map<String, Object> request) throws Exception;
    }


    public interface MethodCallResponseBodyAdditionalPropertiesComplexNumbersPost {
        ResponseBodyAdditionalPropertiesComplexNumbersPostResponse responseBodyAdditionalPropertiesComplexNumbersPost(
            Map<String, BigInteger> request) throws Exception;
    }


    public interface MethodCallResponseBodyAdditionalPropertiesDatePost {
        ResponseBodyAdditionalPropertiesDatePostResponse responseBodyAdditionalPropertiesDatePost(
            Map<String, LocalDate> request) throws Exception;
    }


    public interface MethodCallResponseBodyAdditionalPropertiesObjectPost {
        ResponseBodyAdditionalPropertiesObjectPostResponse responseBodyAdditionalPropertiesObjectPost(
            Map<String, SimpleObject> request) throws Exception;
    }


    public interface MethodCallResponseBodyAdditionalPropertiesPost {
        ResponseBodyAdditionalPropertiesPostResponse responseBodyAdditionalPropertiesPost(
            Map<String, String> request) throws Exception;
    }


    public interface MethodCallResponseBodyBytesGet {
        ResponseBodyBytesGetResponse responseBodyBytesGet(
            Optional<Integer> seed) throws Exception;
    }


    public interface MethodCallResponseBodyDecimalStr {
        ResponseBodyDecimalStrResponse responseBodyDecimalStr(
            BigDecimal request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallResponseBodyEmptyWithHeaders {
        ResponseBodyEmptyWithHeadersResponse responseBodyEmptyWithHeaders(
            double xNumberHeader,
            String xStringHeader) throws Exception;
    }


    public interface MethodCallResponseBodyMissing2xxOr3xxGet {
        ResponseBodyMissing2xxOr3xxGetResponse responseBodyMissing2xxOr3xxGetDirect() throws Exception;
    }


    public interface MethodCallResponseBodyMultilineStringPost {
        ResponseBodyMultilineStringPostResponse responseBodyMultilineStringPost(
            ResponseBodyMultilineStringPostRequestBody request) throws Exception;
    }


    public interface MethodCallResponseBodyOptionalGet {
        ResponseBodyOptionalGetResponse responseBodyOptionalGet(
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallResponseBodyReadOnly {
        ResponseBodyReadOnlyResponse responseBodyReadOnly(
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallResponseBodyStringGet {
        ResponseBodyStringGetResponse responseBodyStringGetDirect() throws Exception;
    }


    public interface MethodCallResponseBodyXmlGet {
        ResponseBodyXmlGetResponse responseBodyXmlGetDirect() throws Exception;
    }


    public interface MethodCallComponentBodyAndParamConflict {
        ComponentBodyAndParamConflictResponse componentBodyAndParamConflict(
            SimpleObject simpleObject,
            String str) throws Exception;
    }


    public interface MethodCallComponentBodyAndParamNoConflict {
        ComponentBodyAndParamNoConflictResponse componentBodyAndParamNoConflict(
            String paramStr,
            SimpleObject simpleObject) throws Exception;
    }


    public interface MethodCallConflictingParams {
        ConflictingParamsResponse conflictingParams(
            String strPathParameter,
            String strQueryParameter) throws Exception;
    }


    public interface MethodCallInlineBodyAndParamConflict {
        InlineBodyAndParamConflictResponse inlineBodyAndParamConflict(
            InlineBodyAndParamConflictRequestBody requestBody,
            String str) throws Exception;
    }


    public interface MethodCallInlineBodyAndParamNoConflict {
        InlineBodyAndParamNoConflictResponse inlineBodyAndParamNoConflict(
            InlineBodyAndParamNoConflictRequestBody requestBody,
            String paramStr) throws Exception;
    }


    public interface MethodCallGlobalPathParameterGet {
        GlobalPathParameterGetResponse globalPathParameterGet(
            Optional<Long> globalPathParam) throws Exception;
    }


    public interface MethodCallGlobalsHeaderGet {
        GlobalsHeaderGetResponse globalsHeaderGet(
            Optional<Boolean> globalHeaderParam) throws Exception;
    }


    public interface MethodCallGlobalsHiddenPost {
        GlobalsHiddenPostResponse globalsHiddenPost(
            GlobalsHiddenPostRequest request) throws Exception;
    }


    public interface MethodCallGlobalsQueryParameterGet {
        GlobalsQueryParameterGetResponse globalsQueryParameterGet(
            Optional<String> globalQueryParam) throws Exception;
    }


    public interface MethodCallDeepObjectQueryParamsMap {
        DeepObjectQueryParamsMapResponse deepObjectQueryParamsMap(
            Optional<? extends Map<String, List<String>>> mapArrParam,
            Map<String, String> mapParam) throws Exception;
    }


    public interface MethodCallDeepObjectQueryParamsObject {
        DeepObjectQueryParamsObjectResponse deepObjectQueryParamsObject(
            Optional<? extends ObjArrParam> objArrParam,
            SimpleObject objParam) throws Exception;
    }


    public interface MethodCallDuplicateParam {
        DuplicateParamResponse duplicateParam(
            String duplicateParamRequest) throws Exception;
    }


    public interface MethodCallFormQueryParamsArray {
        FormQueryParamsArrayResponse formQueryParamsArray(
            Optional<? extends List<String>> arrParam,
            Optional<? extends List<Long>> arrParamExploded) throws Exception;
    }


    public interface MethodCallFormQueryParamsCamelObject {
        FormQueryParamsCamelObjectResponse formQueryParamsCamelObject(
            Optional<? extends ObjParam> objParam,
            ObjParamExploded objParamExploded) throws Exception;
    }


    public interface MethodCallFormQueryParamsMap {
        FormQueryParamsMapResponse formQueryParamsMap(
            Optional<? extends Map<String, String>> mapParam,
            Optional<? extends Map<String, Long>> mapParamExploded) throws Exception;
    }


    public interface MethodCallFormQueryParamsObject {
        FormQueryParamsObjectResponse formQueryParamsObject(
            Optional<? extends SimpleObject> objParam,
            SimpleObject objParamExploded) throws Exception;
    }


    public interface MethodCallFormQueryParamsPrimitive {
        FormQueryParamsPrimitiveResponse formQueryParamsPrimitive(
            boolean boolParam,
            long intParam,
            double numParam,
            String strParam) throws Exception;
    }


    public interface MethodCallFormQueryParamsRefParamObject {
        FormQueryParamsRefParamObjectResponse formQueryParamsRefParamObject(
            Optional<? extends RefQueryParamObj> refObjParam,
            Optional<? extends RefQueryParamObjExploded> refObjParamExploded) throws Exception;
    }


    public interface MethodCallHeaderParamsArray {
        HeaderParamsArrayResponse headerParamsArray(
            List<String> xHeaderArray) throws Exception;
    }


    public interface MethodCallHeaderParamsMap {
        HeaderParamsMapResponse headerParamsMap(
            Map<String, String> xHeaderMap,
            Map<String, String> xHeaderMapExplode) throws Exception;
    }


    public interface MethodCallHeaderParamsObject {
        HeaderParamsObjectResponse headerParamsObject(
            SimpleObject xHeaderObj,
            SimpleObject xHeaderObjExplode) throws Exception;
    }


    public interface MethodCallHeaderParamsPrimitive {
        HeaderParamsPrimitiveResponse headerParamsPrimitive(
            boolean xHeaderBoolean,
            long xHeaderInteger,
            double xHeaderNumber,
            String xHeaderString) throws Exception;
    }


    public interface MethodCallJsonQueryParamsObject {
        JsonQueryParamsObjectResponse jsonQueryParamsObject(
            DeepObject deepObjParam,
            SimpleObject simpleObjParam) throws Exception;
    }


    public interface MethodCallJsonQueryParamsObjectSmaller {
        JsonQueryParamsObjectSmallerResponse jsonQueryParamsObjectSmaller(
            DeepObjectSmaller deepObjParam,
            SimpleObject simpleObjParam) throws Exception;
    }


    public interface MethodCallMixedParametersCamelCase {
        MixedParametersCamelCaseResponse mixedParametersCamelCase(
            String headerParam,
            String pathParam,
            String queryStringParam) throws Exception;
    }


    public interface MethodCallMixedParametersPrimitives {
        MixedParametersPrimitivesResponse mixedParametersPrimitives(
            String headerParam,
            String pathParam,
            String queryStringParam) throws Exception;
    }


    public interface MethodCallMixedQueryParams {
        MixedQueryParamsResponse mixedQueryParams(
            SimpleObject deepObjectParam,
            SimpleObject formParam,
            SimpleObject jsonParam) throws Exception;
    }


    public interface MethodCallPathParameterJson {
        PathParameterJsonResponse pathParameterJson(
            SimpleObject jsonObj) throws Exception;
    }


    public interface MethodCallPipeDelimitedQueryParamsArray {
        PipeDelimitedQueryParamsArrayResponse pipeDelimitedQueryParamsArray(
            Optional<? extends List<String>> arrParam,
            Optional<? extends List<Long>> arrParamExploded,
            Optional<? extends Map<String, String>> mapParam,
            Optional<? extends SimpleObject> objParam) throws Exception;
    }


    public interface MethodCallSimplePathParameterArrays {
        SimplePathParameterArraysResponse simplePathParameterArrays(
            List<String> arrParam) throws Exception;
    }


    public interface MethodCallSimplePathParameterMaps {
        SimplePathParameterMapsResponse simplePathParameterMaps(
            Map<String, String> mapParam,
            Map<String, Long> mapParamExploded) throws Exception;
    }


    public interface MethodCallSimplePathParameterObjects {
        SimplePathParameterObjectsResponse simplePathParameterObjects(
            SimpleObject objParam,
            SimpleObject objParamExploded) throws Exception;
    }


    public interface MethodCallSimplePathParameterPrimitives {
        SimplePathParameterPrimitivesResponse simplePathParameterPrimitives(
            boolean boolParam,
            long intParam,
            double numParam,
            String strParam) throws Exception;
    }


    public interface MethodCallAuthorizationHeaderModification {
        AuthorizationHeaderModificationResponse authorizationHeaderModificationDirect() throws Exception;
    }


    public interface MethodCallTestHooks {
        TestHooksResponse testHooks(
            String someParam) throws Exception;
    }


    public interface MethodCallTestHooksAfterResponse {
        TestHooksAfterResponseResponse testHooksAfterResponseDirect() throws Exception;
    }


    public interface MethodCallTestHooksBeforeCreateRequestPaths {
        TestHooksBeforeCreateRequestPathsResponse testHooksBeforeCreateRequestPaths(
            String namespace) throws Exception;
    }


    public interface MethodCallTestHooksError {
        TestHooksErrorResponse testHooksErrorDirect() throws Exception;
    }


    public interface MethodCallNullEnumPost {
        NullEnumPostResponse nullEnumPost(
            ObjectWithNullEnums request) throws Exception;
    }


    public interface MethodCallNullableObjectPost {
        NullableObjectPostResponse nullableObjectPost(
            Optional<? extends NullableObject> request) throws Exception;
    }


    public interface MethodCallNullableOptionalFieldsPost {
        NullableOptionalFieldsPostResponse nullableOptionalFieldsPost(
            NullableOptionalFieldsPostRequestBody request) throws Exception;
    }


    public interface MethodCallNullableRequiredEmptyObjectPost {
        NullableRequiredEmptyObjectPostResponse nullableRequiredEmptyObjectPost(
            NullableRequiredEmptyObjectPostRequestBody request) throws Exception;
    }


    public interface MethodCallNullableRequiredPropertyPost {
        NullableRequiredPropertyPostResponse nullableRequiredPropertyPost(
            NullableRequiredPropertyPostRequestBody request) throws Exception;
    }


    public interface MethodCallNullableRequiredSharedObjectPost {
        NullableRequiredSharedObjectPostResponse nullableRequiredSharedObjectPost(
            NullableRequiredSharedObjectPostRequestBody request) throws Exception;
    }


    public interface MethodCallRequestBodyDeprecatedRequestBodyRefPost {
        RequestBodyDeprecatedRequestBodyRefPostResponse requestBodyDeprecatedRequestBodyRefPost(
            DeprecatedObjectWithExample request) throws Exception;
    }


    public interface MethodCallRequestBodyGetInferredOptionalRequestWrapper {
        RequestBodyGetInferredOptionalRequestWrapperResponse requestBodyGetInferredOptionalRequestWrapper(
            RequestBodyGetInferredOptionalRequestWrapperRequest request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallRequestBodyPostApplicationJsonArray {
        RequestBodyPostApplicationJsonArrayResponse requestBodyPostApplicationJsonArray(
            List<SimpleObject> request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallRequestBodyPostApplicationJsonArrayCamelCase {
        RequestBodyPostApplicationJsonArrayCamelCaseResponse requestBodyPostApplicationJsonArrayCamelCase(
            List<SimpleObjectCamelCase> request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallRequestBodyPostApplicationJsonArrayObj {
        RequestBodyPostApplicationJsonArrayObjResponse requestBodyPostApplicationJsonArrayObj(
            List<SimpleObject> request) throws Exception;
    }


    public interface MethodCallRequestBodyPostApplicationJsonArrayObjCamelCase {
        RequestBodyPostApplicationJsonArrayObjCamelCaseResponse requestBodyPostApplicationJsonArrayObjCamelCase(
            List<SimpleObjectCamelCase> request) throws Exception;
    }


    public interface MethodCallRequestBodyPostApplicationJsonArrayOfArray {
        RequestBodyPostApplicationJsonArrayOfArrayResponse requestBodyPostApplicationJsonArrayOfArray(
            List<List<SimpleObject>> request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallRequestBodyPostApplicationJsonArrayOfArrayCamelCase {
        RequestBodyPostApplicationJsonArrayOfArrayCamelCaseResponse requestBodyPostApplicationJsonArrayOfArrayCamelCase(
            List<List<SimpleObjectCamelCase>> request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallRequestBodyPostApplicationJsonArrayOfArrayOfPrimitive {
        RequestBodyPostApplicationJsonArrayOfArrayOfPrimitiveResponse requestBodyPostApplicationJsonArrayOfArrayOfPrimitive(
            List<List<String>> request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallRequestBodyPostApplicationJsonArrayOfMap {
        RequestBodyPostApplicationJsonArrayOfMapResponse requestBodyPostApplicationJsonArrayOfMap(
            List<Map<String, SimpleObject>> request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallRequestBodyPostApplicationJsonArrayOfMapCamelCase {
        RequestBodyPostApplicationJsonArrayOfMapCamelCaseResponse requestBodyPostApplicationJsonArrayOfMapCamelCase(
            List<Map<String, SimpleObjectCamelCase>> request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallRequestBodyPostApplicationJsonArrayOfPrimitive {
        RequestBodyPostApplicationJsonArrayOfPrimitiveResponse requestBodyPostApplicationJsonArrayOfPrimitive(
            List<String> request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallRequestBodyPostApplicationJsonArrayOfUnions {
        RequestBodyPostApplicationJsonArrayOfUnionsResponse requestBodyPostApplicationJsonArrayOfUnions(
            RequestBodyPostApplicationJsonArrayOfUnionsRequestBody request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallRequestBodyPostApplicationJsonDeep {
        RequestBodyPostApplicationJsonDeepResponse requestBodyPostApplicationJsonDeep(
            DeepObject request) throws Exception;
    }


    public interface MethodCallRequestBodyPostApplicationJsonDeepCamelCase {
        RequestBodyPostApplicationJsonDeepCamelCaseResponse requestBodyPostApplicationJsonDeepCamelCase(
            DeepObjectCamelCase request) throws Exception;
    }


    public interface MethodCallRequestBodyPostApplicationJsonMap {
        RequestBodyPostApplicationJsonMapResponse requestBodyPostApplicationJsonMap(
            Map<String, SimpleObject> request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallRequestBodyPostApplicationJsonMapCamelCase {
        RequestBodyPostApplicationJsonMapCamelCaseResponse requestBodyPostApplicationJsonMapCamelCase(
            Map<String, SimpleObjectCamelCase> request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallRequestBodyPostApplicationJsonMapObj {
        RequestBodyPostApplicationJsonMapObjResponse requestBodyPostApplicationJsonMapObj(
            Map<String, SimpleObject> request) throws Exception;
    }


    public interface MethodCallRequestBodyPostApplicationJsonMapObjCamelCase {
        RequestBodyPostApplicationJsonMapObjCamelCaseResponse requestBodyPostApplicationJsonMapObjCamelCase(
            Map<String, SimpleObjectCamelCase> request) throws Exception;
    }


    public interface MethodCallRequestBodyPostApplicationJsonMapOfArray {
        RequestBodyPostApplicationJsonMapOfArrayResponse requestBodyPostApplicationJsonMapOfArray(
            Map<String, List<SimpleObject>> request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallRequestBodyPostApplicationJsonMapOfArrayCamelCase {
        RequestBodyPostApplicationJsonMapOfArrayCamelCaseResponse requestBodyPostApplicationJsonMapOfArrayCamelCase(
            Map<String, List<SimpleObjectCamelCase>> request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallRequestBodyPostApplicationJsonMapOfMap {
        RequestBodyPostApplicationJsonMapOfMapResponse requestBodyPostApplicationJsonMapOfMap(
            Map<String, Map<String, SimpleObject>> request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallRequestBodyPostApplicationJsonMapOfMapCamelCase {
        RequestBodyPostApplicationJsonMapOfMapCamelCaseResponse requestBodyPostApplicationJsonMapOfMapCamelCase(
            Map<String, Map<String, SimpleObjectCamelCase>> request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallRequestBodyPostApplicationJsonMapOfMapOfPrimitive {
        RequestBodyPostApplicationJsonMapOfMapOfPrimitiveResponse requestBodyPostApplicationJsonMapOfMapOfPrimitive(
            Map<String, Map<String, String>> request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallRequestBodyPostApplicationJsonMapOfPrimitive {
        RequestBodyPostApplicationJsonMapOfPrimitiveResponse requestBodyPostApplicationJsonMapOfPrimitive(
            Map<String, String> request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallRequestBodyPostApplicationJsonMultipleJsonFiltered {
        RequestBodyPostApplicationJsonMultipleJsonFilteredResponse requestBodyPostApplicationJsonMultipleJsonFiltered(
            SimpleObject request) throws Exception;
    }


    public interface MethodCallRequestBodyPostApplicationJsonSimple {
        RequestBodyPostApplicationJsonSimpleResponse requestBodyPostApplicationJsonSimple(
            SimpleObject request) throws Exception;
    }


    public interface MethodCallRequestBodyPostApplicationJsonSimpleCamelCase {
        RequestBodyPostApplicationJsonSimpleCamelCaseResponse requestBodyPostApplicationJsonSimpleCamelCase(
            SimpleObjectCamelCase request) throws Exception;
    }


    public interface MethodCallRequestBodyPostComplexNumberTypes {
        RequestBodyPostComplexNumberTypesResponse requestBodyPostComplexNumberTypes(
            RequestBodyPostComplexNumberTypesRequest request) throws Exception;
    }


    public interface MethodCallRequestBodyPostDefaultsAndConsts {
        RequestBodyPostDefaultsAndConstsResponse requestBodyPostDefaultsAndConsts(
            DefaultsAndConsts request) throws Exception;
    }


    public interface MethodCallRequestBodyPostEmptyBodyRetainedWithAllOptionalFields {
        RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsResponse requestBodyPostEmptyBodyRetainedWithAllOptionalFields(
            Optional<? extends RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody> request) throws Exception;
    }


    public interface MethodCallRequestBodyPostEmptyObject {
        RequestBodyPostEmptyObjectResponse requestBodyPostEmptyObject(
            RequestBodyPostEmptyObjectRequestBody request) throws Exception;
    }


    public interface MethodCallRequestBodyPostFormDeep {
        RequestBodyPostFormDeepResponse requestBodyPostFormDeep(
            DeepObject request) throws Exception;
    }


    public interface MethodCallRequestBodyPostFormMapPrimitive {
        RequestBodyPostFormMapPrimitiveResponse requestBodyPostFormMapPrimitive(
            Map<String, String> request) throws Exception;
    }


    public interface MethodCallRequestBodyPostFormSimple {
        RequestBodyPostFormSimpleResponse requestBodyPostFormSimple(
            SimpleObject request) throws Exception;
    }


    public interface MethodCallRequestBodyPostJsonDataTypesArrayBigInt {
        RequestBodyPostJsonDataTypesArrayBigIntResponse requestBodyPostJsonDataTypesArrayBigInt(
            List<BigInteger> request) throws Exception;
    }


    public interface MethodCallRequestBodyPostJsonDataTypesArrayDate {
        RequestBodyPostJsonDataTypesArrayDateResponse requestBodyPostJsonDataTypesArrayDate(
            List<LocalDate> request) throws Exception;
    }


    public interface MethodCallRequestBodyPostJsonDataTypesArrayDecimalStr {
        RequestBodyPostJsonDataTypesArrayDecimalStrResponse requestBodyPostJsonDataTypesArrayDecimalStr(
            List<BigDecimal> request) throws Exception;
    }


    public interface MethodCallRequestBodyPostJsonDataTypesBigInt {
        RequestBodyPostJsonDataTypesBigIntResponse requestBodyPostJsonDataTypesBigInt(
            BigInteger request) throws Exception;
    }


    public interface MethodCallRequestBodyPostJsonDataTypesBigIntStr {
        RequestBodyPostJsonDataTypesBigIntStrResponse requestBodyPostJsonDataTypesBigIntStr(
            BigInteger request) throws Exception;
    }


    public interface MethodCallRequestBodyPostJsonDataTypesBoolean {
        RequestBodyPostJsonDataTypesBooleanResponse requestBodyPostJsonDataTypesBoolean(
            boolean request) throws Exception;
    }


    public interface MethodCallRequestBodyPostJsonDataTypesComplexNumberArrays {
        RequestBodyPostJsonDataTypesComplexNumberArraysResponse requestBodyPostJsonDataTypesComplexNumberArrays(
            ComplexNumberArrays request) throws Exception;
    }


    public interface MethodCallRequestBodyPostJsonDataTypesComplexNumberMaps {
        RequestBodyPostJsonDataTypesComplexNumberMapsResponse requestBodyPostJsonDataTypesComplexNumberMaps(
            ComplexNumberMaps request) throws Exception;
    }


    public interface MethodCallRequestBodyPostJsonDataTypesDate {
        RequestBodyPostJsonDataTypesDateResponse requestBodyPostJsonDataTypesDate(
            LocalDate request) throws Exception;
    }


    public interface MethodCallRequestBodyPostJsonDataTypesDateTime {
        RequestBodyPostJsonDataTypesDateTimeResponse requestBodyPostJsonDataTypesDateTime(
            OffsetDateTime request) throws Exception;
    }


    public interface MethodCallRequestBodyPostJsonDataTypesDecimal {
        RequestBodyPostJsonDataTypesDecimalResponse requestBodyPostJsonDataTypesDecimal(
            BigDecimal request) throws Exception;
    }


    public interface MethodCallRequestBodyPostJsonDataTypesDecimalStr {
        RequestBodyPostJsonDataTypesDecimalStrResponse requestBodyPostJsonDataTypesDecimalStr(
            BigDecimal request) throws Exception;
    }


    public interface MethodCallRequestBodyPostJsonDataTypesFloat32 {
        RequestBodyPostJsonDataTypesFloat32Response requestBodyPostJsonDataTypesFloat32(
            double request) throws Exception;
    }


    public interface MethodCallRequestBodyPostJsonDataTypesInt32 {
        RequestBodyPostJsonDataTypesInt32Response requestBodyPostJsonDataTypesInt32(
            int request) throws Exception;
    }


    public interface MethodCallRequestBodyPostJsonDataTypesInteger {
        RequestBodyPostJsonDataTypesIntegerResponse requestBodyPostJsonDataTypesInteger(
            long request) throws Exception;
    }


    public interface MethodCallRequestBodyPostJsonDataTypesMapBigIntStr {
        RequestBodyPostJsonDataTypesMapBigIntStrResponse requestBodyPostJsonDataTypesMapBigIntStr(
            Map<String, BigInteger> request) throws Exception;
    }


    public interface MethodCallRequestBodyPostJsonDataTypesMapDateTime {
        RequestBodyPostJsonDataTypesMapDateTimeResponse requestBodyPostJsonDataTypesMapDateTime(
            Map<String, OffsetDateTime> request) throws Exception;
    }


    public interface MethodCallRequestBodyPostJsonDataTypesMapDecimal {
        RequestBodyPostJsonDataTypesMapDecimalResponse requestBodyPostJsonDataTypesMapDecimal(
            Map<String, BigDecimal> request) throws Exception;
    }


    public interface MethodCallRequestBodyPostJsonDataTypesNumber {
        RequestBodyPostJsonDataTypesNumberResponse requestBodyPostJsonDataTypesNumber(
            double request) throws Exception;
    }


    public interface MethodCallRequestBodyPostJsonDataTypesString {
        RequestBodyPostJsonDataTypesStringResponse requestBodyPostJsonDataTypesString(
            String request) throws Exception;
    }


    public interface MethodCallRequestBodyPostMultipleContentTypesComponentFiltered {
        RequestBodyPostMultipleContentTypesComponentFilteredResponse requestBodyPostMultipleContentTypesComponentFiltered(
            SimpleObject request) throws Exception;
    }


    public interface MethodCallRequestBodyPostMultipleContentTypesComponentFilteredDefaultTest {
        RequestBodyPostMultipleContentTypesComponentFilteredDefaultTestResponse requestBodyPostMultipleContentTypesComponentFilteredDefaultTest(
            SimpleObject request) throws Exception;
    }


    public interface MethodCallRequestBodyPostMultipleContentTypesInlineFiltered {
        RequestBodyPostMultipleContentTypesInlineFilteredResponse requestBodyPostMultipleContentTypesInlineFiltered(
            RequestBodyPostMultipleContentTypesInlineFilteredRequestBody request) throws Exception;
    }


    public interface MethodCallRequestBodyPostMultipleContentTypesSplitParamForm {
        RequestBodyPostMultipleContentTypesSplitParamFormResponse requestBodyPostMultipleContentTypesSplitParamForm(
            RequestBodyPostMultipleContentTypesSplitParamFormRequestBody requestBody,
            String paramStr) throws Exception;
    }


    public interface MethodCallRequestBodyPostMultipleContentTypesSplitParamJson {
        RequestBodyPostMultipleContentTypesSplitParamJsonResponse requestBodyPostMultipleContentTypesSplitParamJson(
            RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody requestBody,
            String paramStr) throws Exception;
    }


    public interface MethodCallRequestBodyPostMultipleContentTypesSplitParamMultipart {
        RequestBodyPostMultipleContentTypesSplitParamMultipartResponse requestBodyPostMultipleContentTypesSplitParamMultipart(
            RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody requestBody,
            String paramStr) throws Exception;
    }


    public interface MethodCallRequestBodyPostMultipleContentTypesSplitForm {
        RequestBodyPostMultipleContentTypesSplitFormResponse requestBodyPostMultipleContentTypesSplitForm(
            RequestBodyPostMultipleContentTypesSplitFormRequestBody request) throws Exception;
    }


    public interface MethodCallRequestBodyPostMultipleContentTypesSplitJson {
        RequestBodyPostMultipleContentTypesSplitJsonResponse requestBodyPostMultipleContentTypesSplitJson(
            RequestBodyPostMultipleContentTypesSplitJsonRequestBody request) throws Exception;
    }


    public interface MethodCallRequestBodyPostMultipleContentTypesSplitMultipart {
        RequestBodyPostMultipleContentTypesSplitMultipartResponse requestBodyPostMultipleContentTypesSplitMultipart(
            RequestBodyPostMultipleContentTypesSplitMultipartRequestBody request) throws Exception;
    }


    public interface MethodCallRequestBodyPostNotNullableNotRequiredStringBody {
        RequestBodyPostNotNullableNotRequiredStringBodyResponse requestBodyPostNotNullableNotRequiredStringBody(
            Optional<String> request) throws Exception;
    }


    public interface MethodCallRequestBodyPostNullArray {
        RequestBodyPostNullArrayResponse requestBodyPostNullArray(
            Optional<? extends List<String>> request) throws Exception;
    }


    public interface MethodCallRequestBodyPostNullDictionary {
        RequestBodyPostNullDictionaryResponse requestBodyPostNullDictionary(
            Optional<? extends Map<String, String>> request) throws Exception;
    }


    public interface MethodCallRequestBodyPostNullableNotRequiredStringBody {
        RequestBodyPostNullableNotRequiredStringBodyResponse requestBodyPostNullableNotRequiredStringBody(
            JsonNullable<String> request) throws Exception;
    }


    public interface MethodCallRequestBodyPostNullableRequiredStringBody {
        RequestBodyPostNullableRequiredStringBodyResponse requestBodyPostNullableRequiredStringBody(
            Optional<String> request) throws Exception;
    }


    public interface MethodCallRequestBodyPutBytes {
        RequestBodyPutBytesResponse requestBodyPutBytes(
            byte[] request) throws Exception;
    }


    public interface MethodCallRequestBodyPutBytesWithParams {
        RequestBodyPutBytesWithParamsResponse requestBodyPutBytesWithParams(
            byte[] requestBody,
            String queryStringParam) throws Exception;
    }


    public interface MethodCallRequestBodyPutMultipartDeep {
        RequestBodyPutMultipartDeepResponse requestBodyPutMultipartDeep(
            DeepObject request) throws Exception;
    }


    public interface MethodCallRequestBodyPutMultipartDifferentFileName {
        RequestBodyPutMultipartDifferentFileNameResponse requestBodyPutMultipartDifferentFileName(
            RequestBodyPutMultipartDifferentFileNameRequestBody request) throws Exception;
    }


    public interface MethodCallRequestBodyPutMultipartFile {
        RequestBodyPutMultipartFileResponse requestBodyPutMultipartFile(
            RequestBodyPutMultipartFileRequestBody request) throws Exception;
    }


    public interface MethodCallRequestBodyPutMultipartOptionalRequestBody {
        RequestBodyPutMultipartOptionalRequestBodyResponse requestBodyPutMultipartOptionalRequestBody(
            Optional<? extends RequestBodyPutMultipartOptionalRequestBodyRequestBody> request) throws Exception;
    }


    public interface MethodCallRequestBodyPutMultipartSimple {
        RequestBodyPutMultipartSimpleResponse requestBodyPutMultipartSimple(
            SimpleObject request) throws Exception;
    }


    public interface MethodCallRequestBodyPutString {
        RequestBodyPutStringResponse requestBodyPutString(
            String request) throws Exception;
    }


    public interface MethodCallRequestBodyPutStringWithParams {
        RequestBodyPutStringWithParamsResponse requestBodyPutStringWithParams(
            String requestBody,
            String queryStringParam) throws Exception;
    }


    public interface MethodCallRequestBodyReadAndWrite {
        RequestBodyReadAndWriteResponse requestBodyReadAndWrite(
            ReadWriteObject request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallRequestBodyReadOnlyInput {
        RequestBodyReadOnlyInputResponse requestBodyReadOnlyInput(
            ReadOnlyObjectInput request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallRequestBodyReadOnlyUnion {
        RequestBodyReadOnlyUnionResponse requestBodyReadOnlyUnion(
            WeaklyTypedOneOfReadOnlyObjectInput request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallRequestBodyReadWriteOnlyUnion {
        RequestBodyReadWriteOnlyUnionResponse requestBodyReadWriteOnlyUnion(
            WeaklyTypedOneOfReadWriteObject request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallRequestBodyWriteOnly {
        RequestBodyWriteOnlyResponse requestBodyWriteOnly(
            WriteOnlyObject request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallRequestBodyWriteOnlyOutput {
        RequestBodyWriteOnlyOutputResponse requestBodyWriteOnlyOutput(
            WriteOnlyObject request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallRequestBodyWriteOnlyUnion {
        RequestBodyWriteOnlyUnionResponse requestBodyWriteOnlyUnion(
            WeaklyTypedOneOfWriteOnlyObject request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallNestFirstGet {
        NestFirstGetResponse getDirect() throws Exception;
    }


    public interface MethodCallNestedGet {
        NestedGetResponse getDirect() throws Exception;
    }


    public interface MethodCallNestedFirstGet {
        NestedFirstGetResponse getDirect() throws Exception;
    }


    public interface MethodCallNestedSecondGet {
        NestedSecondGetResponse getDirect() throws Exception;
    }


    public interface MethodCallApiKeyAuth {
        ApiKeyAuthResponse apiKeyAuthDirect() throws Exception;
    }


    public interface MethodCallApiKeyAuthGlobal {
        ApiKeyAuthGlobalResponse apiKeyAuthGlobalDirect() throws Exception;
    }


    public interface MethodCallBasicAuth {
        BasicAuthResponse basicAuth(
            BasicAuthSecurity security,
            String passwd,
            String user) throws Exception;
    }


    public interface MethodCallBearerAuth {
        BearerAuthResponse bearerAuth(
            BearerAuthSecurity security) throws Exception;
    }


    public interface MethodCallGlobalBearerAuth {
        GlobalBearerAuthResponse globalBearerAuthDirect() throws Exception;
    }


    public interface MethodCallNoAuth {
        NoAuthResponse noAuthDirect() throws Exception;
    }


    public interface MethodCallOauth2Auth {
        Oauth2AuthResponse oauth2AuthDirect() throws Exception;
    }


    public interface MethodCallOauth2Override {
        Oauth2OverrideResponse oauth2OverrideDirect() throws Exception;
    }


    public interface MethodCallOpenIdConnectAuth {
        OpenIdConnectAuthResponse openIdConnectAuth(
            OpenIdConnectAuthSecurity security) throws Exception;
    }


    public interface MethodCallOpenEnumsPostUnrecognized {
        OpenEnumsPostUnrecognizedResponse openEnumsPostUnrecognized(
            ThemeRequestOpaque request) throws Exception;
    }


    public interface MethodCallSelectGlobalServer {
        SelectGlobalServerResponse selectGlobalServerDirect() throws Exception;
    }


    public interface MethodCallSelectServerWithID {
        SelectServerWithIDResponse selectServerWithID(
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallServerWithProtocolTemplate {
        ServerWithProtocolTemplateResponse serverWithProtocolTemplate(
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallServerWithTemplates {
        ServerWithTemplatesResponse serverWithTemplates(
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallServerWithTemplatesGlobal {
        ServerWithTemplatesGlobalResponse serverWithTemplatesGlobalDirect() throws Exception;
    }


    public interface MethodCallServersByIDWithTemplates {
        ServersByIDWithTemplatesResponse serversByIDWithTemplates(
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallTelemetrySpeakeasyUserAgentGet {
        TelemetrySpeakeasyUserAgentGetResponse telemetrySpeakeasyUserAgentGet(
            String userAgent) throws Exception;
    }


    public interface MethodCallTelemetryUserAgentGet {
        TelemetryUserAgentGetResponse telemetryUserAgentGetDirect() throws Exception;
    }


    public interface MethodCallAuthGlobal {
        AuthGlobalResponse authGlobal(
            AuthServiceRequestBody request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallBasicAuthNew {
        BasicAuthNewResponse basicAuthNew(
            AuthServiceRequestBody request,
            BasicAuthNewSecurity security,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallCustomSchemeAppId {
        CustomSchemeAppIdResponse customSchemeAppId(
            CustomSchemeAppIdSecurity security,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallMultipleMixedOptionsAuth {
        MultipleMixedOptionsAuthResponse multipleMixedOptionsAuth(
            AuthServiceRequestBody request,
            MultipleMixedOptionsAuthSecurity security,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallMultipleMixedSchemeAuth {
        MultipleMixedSchemeAuthResponse multipleMixedSchemeAuth(
            AuthServiceRequestBody request,
            MultipleMixedSchemeAuthSecurity security,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallMultipleOptionsWithMixedSchemesAuth {
        MultipleOptionsWithMixedSchemesAuthResponse multipleOptionsWithMixedSchemesAuth(
            AuthServiceRequestBody request,
            MultipleOptionsWithMixedSchemesAuthSecurity security,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallMultipleOptionsWithSimpleSchemesAuth {
        MultipleOptionsWithSimpleSchemesAuthResponse multipleOptionsWithSimpleSchemesAuth(
            AuthServiceRequestBody request,
            MultipleOptionsWithSimpleSchemesAuthSecurity security,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallMultipleSimpleOptionsAuth {
        MultipleSimpleOptionsAuthResponse multipleSimpleOptionsAuth(
            AuthServiceRequestBody request,
            MultipleSimpleOptionsAuthSecurity security,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallMultipleSimpleSchemeAuth {
        MultipleSimpleSchemeAuthResponse multipleSimpleSchemeAuth(
            AuthServiceRequestBody request,
            MultipleSimpleSchemeAuthSecurity security,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallOauth2AuthNew {
        Oauth2AuthNewResponse oauth2AuthNew(
            AuthServiceRequestBody request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallOpenIdConnectAuthNew {
        OpenIdConnectAuthNewResponse openIdConnectAuthNew(
            AuthServiceRequestBody request,
            OpenIdConnectAuthNewSecurity security,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallCreateFile {
        CreateFileResponse createFile(
            CreateFileRequestBody request) throws Exception;
    }


    public interface MethodCallCreateResource {
        CreateResourceResponse createResource(
            ExampleResource request) throws Exception;
    }


    public interface MethodCallDeleteResource {
        DeleteResourceResponse deleteResource(
            String resourceId) throws Exception;
    }


    public interface MethodCallGetArrayDataSource {
        GetArrayDataSourceResponse getArrayDataSource(
            String filter) throws Exception;
    }


    public interface MethodCallGetResource {
        GetResourceResponse getResource(
            String resourceId) throws Exception;
    }


    public interface MethodCallUpdateResource {
        UpdateResourceResponse updateResource(
            String augment,
            String resourceId) throws Exception;
    }


    public interface MethodCallGetDocumentationPerLanguage {
        GetDocumentationPerLanguageResponse getDocumentationPerLanguage(
            String language) throws Exception;
    }


    public interface MethodCallChat {
        ChatResponse chat(
            ChatRequestBody request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallChatSkipSentinel {
        ChatSkipSentinelResponse chatSkipSentinel(
            ChatSkipSentinelRequestBody request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallDifferentDataSchemas {
        DifferentDataSchemasResponse differentDataSchemas(
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallJson {
        JsonResponse json(
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallMultiline {
        MultilineResponse multiline(
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallRich {
        RichResponse rich(
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallText {
        TextResponse text(
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallGroupFirstGet {
        GroupFirstGetResponse getDirect() throws Exception;
    }


    public interface MethodCallGroupSecondGet {
        GroupSecondGetResponse getDirect() throws Exception;
    }


    public interface MethodCallMethodDelete {
        MethodDeleteResponse methodDelete(
            MethodDeleteRequestBody request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallMethodGet {
        MethodGetResponse methodGet(
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallMethodHead {
        MethodHeadResponse methodHead(
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallMethodOptions {
        MethodOptionsResponse methodOptions(
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallMethodPatch {
        MethodPatchResponse methodPatch(
            MethodPatchRequestBody request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallMethodPost {
        MethodPostResponse methodPost(
            MethodPostRequestBody request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallMethodPut {
        MethodPutResponse methodPut(
            MethodPutRequestBody request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallMethodTrace {
        MethodTraceResponse methodTrace(
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallPaginationAmbiguousInput {
        PaginationAmbiguousInputResponse paginationAmbiguousInput(
            PaginationAmbiguousInputRequestBody requestBody,
            Optional<Long> cursor,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallPaginationBodyFlattenedOptionalSecurity {
        PaginationBodyFlattenedOptionalSecurityResponse paginationBodyFlattenedOptionalSecurity(
            PaginationBodyFlattenedOptionalSecuritySecurity security,
            long limit,
            long offset,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallPaginationBodyFlattenedWithSecurity {
        PaginationBodyFlattenedWithSecurityResponse paginationBodyFlattenedWithSecurity(
            PaginationBodyFlattenedWithSecuritySecurity security,
            long limit,
            long offset,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallPaginationBodyWrappedRequest {
        PaginationBodyWrappedRequestResponse paginationBodyWrappedRequest(
            PaginationBodyWrappedRequestRequest request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallPaginationCursorBody {
        PaginationCursorBodyResponse paginationCursorBody(
            PaginationCursorBodyRequestBody request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallPaginationCursorNonNumeric {
        PaginationCursorNonNumericResponse paginationCursorNonNumeric(
            Optional<String> cursor,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallPaginationCursorParams {
        PaginationCursorParamsResponse paginationCursorParams(
            long cursor,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallPaginationLimitOffsetDeepOutputsPageBody {
        PaginationLimitOffsetDeepOutputsPageBodyResponse paginationLimitOffsetDeepOutputsPageBody(
            LimitOffsetConfig request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallPaginationLimitOffsetOffsetBody {
        PaginationLimitOffsetOffsetBodyResponse paginationLimitOffsetOffsetBody(
            LimitOffsetConfig request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallPaginationLimitOffsetOffsetParams {
        PaginationLimitOffsetOffsetParamsResponse paginationLimitOffsetOffsetParams(
            Optional<Long> limit,
            Optional<Long> offset,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallPaginationLimitOffsetPageBody {
        PaginationLimitOffsetPageBodyResponse paginationLimitOffsetPageBody(
            LimitOffsetConfig request,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallPaginationLimitOffsetPageParams {
        PaginationLimitOffsetPageParamsResponse paginationLimitOffsetPageParams(
            long page,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallPaginationURLParams {
        PaginationURLParamsResponse paginationURLParams(
            long attempts,
            Optional<String> isReferencePath,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallPaginationWithRetries {
        PaginationWithRetriesResponse paginationWithRetries(
            Optional<String> cursor,
            Optional<String> faultSettings,
            Optional<String> requestId,
            Optional<String> serverURL,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallPaginationWrappedOptionalBody {
        PaginationWrappedOptionalBodyResponse paginationWrappedOptionalBody(
            PaginationWrappedOptionalBodyRequest request,
            PaginationWrappedOptionalBodySecurity security,
            Optional<String> serverURL) throws Exception;
    }


    public interface MethodCallRetriesAfter {
        RetriesAfterResponse retriesAfter(
            Optional<Long> numRetries,
            String requestId,
            Optional<Long> retryAfterVal,
            Optional<String> serverURL,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallRetriesConnectErrorGet {
        RetriesConnectErrorGetResponse retriesConnectErrorGet(
            Optional<String> serverURL,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallRetriesFlatEmptyResponsePost {
        RetriesFlatEmptyResponsePostResponse retriesFlatEmptyResponsePost(
            Optional<? extends RetriesFlatEmptyResponsePostRequestBody> requestBody,
            Optional<Long> numRetries,
            String requestId,
            Optional<String> serverURL,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallRetriesGet {
        RetriesGetResponse retriesGet(
            Optional<Long> numRetries,
            String requestId,
            Optional<String> serverURL,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallRetriesPost {
        RetriesPostResponse retriesPost(
            Optional<? extends RetriesPostRequestBody> requestBody,
            Optional<Long> numRetries,
            String requestId,
            Optional<String> serverURL,
            Optional<Options> options) throws Exception;
    }


}
