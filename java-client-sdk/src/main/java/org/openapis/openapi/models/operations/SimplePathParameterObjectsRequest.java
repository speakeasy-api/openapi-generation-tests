/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.models.shared.SimpleObject;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class SimplePathParameterObjectsRequest {

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=objParam")
    private SimpleObject objParam;

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=true,name=objParamExploded")
    private SimpleObject objParamExploded;

    @JsonCreator
    public SimplePathParameterObjectsRequest(
            SimpleObject objParam,
            SimpleObject objParamExploded) {
        Utils.checkNotNull(objParam, "objParam");
        Utils.checkNotNull(objParamExploded, "objParamExploded");
        this.objParam = objParam;
        this.objParamExploded = objParamExploded;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    @JsonIgnore
    public SimpleObject objParam() {
        return objParam;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    @JsonIgnore
    public SimpleObject objParamExploded() {
        return objParamExploded;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    public SimplePathParameterObjectsRequest withObjParam(SimpleObject objParam) {
        Utils.checkNotNull(objParam, "objParam");
        this.objParam = objParam;
        return this;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    public SimplePathParameterObjectsRequest withObjParamExploded(SimpleObject objParamExploded) {
        Utils.checkNotNull(objParamExploded, "objParamExploded");
        this.objParamExploded = objParamExploded;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SimplePathParameterObjectsRequest other = (SimplePathParameterObjectsRequest) o;
        return 
            Objects.deepEquals(this.objParam, other.objParam) &&
            Objects.deepEquals(this.objParamExploded, other.objParamExploded);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            objParam,
            objParamExploded);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SimplePathParameterObjectsRequest.class,
                "objParam", objParam,
                "objParamExploded", objParamExploded);
    }
    
    public final static class Builder {
 
        private SimpleObject objParam;
 
        private SimpleObject objParamExploded;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A simple object that uses all our supported primitive types and enums and has optional properties.
         */
        public Builder objParam(SimpleObject objParam) {
            Utils.checkNotNull(objParam, "objParam");
            this.objParam = objParam;
            return this;
        }

        /**
         * A simple object that uses all our supported primitive types and enums and has optional properties.
         */
        public Builder objParamExploded(SimpleObject objParamExploded) {
            Utils.checkNotNull(objParamExploded, "objParamExploded");
            this.objParamExploded = objParamExploded;
            return this;
        }
        
        public SimplePathParameterObjectsRequest build() {
            return new SimplePathParameterObjectsRequest(
                objParam,
                objParamExploded);
        }
    }
}

