/* 
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

public class TestHooksBeforeCreateRequestPathsHeaders {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Old-Pathname")
    private Optional<? extends String> oldPathname;

    @JsonCreator
    public TestHooksBeforeCreateRequestPathsHeaders(
            @JsonProperty("Old-Pathname") Optional<? extends String> oldPathname) {
        Utils.checkNotNull(oldPathname, "oldPathname");
        this.oldPathname = oldPathname;
    }
    
    public TestHooksBeforeCreateRequestPathsHeaders() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> oldPathname() {
        return (Optional<String>) oldPathname;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public TestHooksBeforeCreateRequestPathsHeaders withOldPathname(String oldPathname) {
        Utils.checkNotNull(oldPathname, "oldPathname");
        this.oldPathname = Optional.ofNullable(oldPathname);
        return this;
    }

    public TestHooksBeforeCreateRequestPathsHeaders withOldPathname(Optional<? extends String> oldPathname) {
        Utils.checkNotNull(oldPathname, "oldPathname");
        this.oldPathname = oldPathname;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TestHooksBeforeCreateRequestPathsHeaders other = (TestHooksBeforeCreateRequestPathsHeaders) o;
        return 
            java.util.Objects.deepEquals(this.oldPathname, other.oldPathname);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            oldPathname);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TestHooksBeforeCreateRequestPathsHeaders.class,
                "oldPathname", oldPathname);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> oldPathname = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder oldPathname(String oldPathname) {
            Utils.checkNotNull(oldPathname, "oldPathname");
            this.oldPathname = Optional.ofNullable(oldPathname);
            return this;
        }

        public Builder oldPathname(Optional<? extends String> oldPathname) {
            Utils.checkNotNull(oldPathname, "oldPathname");
            this.oldPathname = oldPathname;
            return this;
        }
        
        public TestHooksBeforeCreateRequestPathsHeaders build() {
            return new TestHooksBeforeCreateRequestPathsHeaders(
                oldPathname);
        }
    }
}

