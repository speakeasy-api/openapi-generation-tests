/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class TypedParameterGenerationGetRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=bigint")
    private Optional<? extends BigInteger> bigint;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=date")
    private Optional<LocalDate> date;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=decimal")
    private Optional<? extends BigDecimal> decimal;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=obj")
    private Optional<? extends Obj> obj;

    @JsonCreator
    public TypedParameterGenerationGetRequest(
            Optional<? extends BigInteger> bigint,
            Optional<LocalDate> date,
            Optional<? extends BigDecimal> decimal,
            Optional<? extends Obj> obj) {
        Utils.checkNotNull(bigint, "bigint");
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(decimal, "decimal");
        Utils.checkNotNull(obj, "obj");
        this.bigint = bigint;
        this.date = date;
        this.decimal = decimal;
        this.obj = obj;
    }
    
    public TypedParameterGenerationGetRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BigInteger> bigint() {
        return (Optional<BigInteger>) bigint;
    }

    @JsonIgnore
    public Optional<LocalDate> date() {
        return date;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BigDecimal> decimal() {
        return (Optional<BigDecimal>) decimal;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Obj> obj() {
        return (Optional<Obj>) obj;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public TypedParameterGenerationGetRequest withBigint(BigInteger bigint) {
        Utils.checkNotNull(bigint, "bigint");
        this.bigint = Optional.ofNullable(bigint);
        return this;
    }

    public TypedParameterGenerationGetRequest withBigint(long bigint) {
        this.bigint = Optional.of(BigInteger.valueOf(bigint));
        return this;
    }

    public TypedParameterGenerationGetRequest withBigint(Optional<? extends BigInteger> bigint) {
        Utils.checkNotNull(bigint, "bigint");
        this.bigint = bigint;
        return this;
    }

    public TypedParameterGenerationGetRequest withDate(LocalDate date) {
        Utils.checkNotNull(date, "date");
        this.date = Optional.ofNullable(date);
        return this;
    }

    public TypedParameterGenerationGetRequest withDate(Optional<LocalDate> date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    public TypedParameterGenerationGetRequest withDecimal(BigDecimal decimal) {
        Utils.checkNotNull(decimal, "decimal");
        this.decimal = Optional.ofNullable(decimal);
        return this;
    }

    public TypedParameterGenerationGetRequest withDecimal(double decimal) {
        this.decimal = Optional.of(BigDecimal.valueOf(decimal));
        return this;
    }

    public TypedParameterGenerationGetRequest withDecimal(Optional<? extends BigDecimal> decimal) {
        Utils.checkNotNull(decimal, "decimal");
        this.decimal = decimal;
        return this;
    }

    public TypedParameterGenerationGetRequest withObj(Obj obj) {
        Utils.checkNotNull(obj, "obj");
        this.obj = Optional.ofNullable(obj);
        return this;
    }

    public TypedParameterGenerationGetRequest withObj(Optional<? extends Obj> obj) {
        Utils.checkNotNull(obj, "obj");
        this.obj = obj;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TypedParameterGenerationGetRequest other = (TypedParameterGenerationGetRequest) o;
        return 
            Objects.deepEquals(this.bigint, other.bigint) &&
            Objects.deepEquals(this.date, other.date) &&
            Objects.deepEquals(this.decimal, other.decimal) &&
            Objects.deepEquals(this.obj, other.obj);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            bigint,
            date,
            decimal,
            obj);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TypedParameterGenerationGetRequest.class,
                "bigint", bigint,
                "date", date,
                "decimal", decimal,
                "obj", obj);
    }
    
    public final static class Builder {
 
        private Optional<? extends BigInteger> bigint = Optional.empty();
 
        private Optional<LocalDate> date = Optional.empty();
 
        private Optional<? extends BigDecimal> decimal = Optional.empty();
 
        private Optional<? extends Obj> obj = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder bigint(BigInteger bigint) {
            Utils.checkNotNull(bigint, "bigint");
            this.bigint = Optional.ofNullable(bigint);
            return this;
        }

        public Builder bigint(long bigint) {
            this.bigint = Optional.of(BigInteger.valueOf(bigint));
            return this;
        }

        public Builder bigint(Optional<? extends BigInteger> bigint) {
            Utils.checkNotNull(bigint, "bigint");
            this.bigint = bigint;
            return this;
        }

        public Builder date(LocalDate date) {
            Utils.checkNotNull(date, "date");
            this.date = Optional.ofNullable(date);
            return this;
        }

        public Builder date(Optional<LocalDate> date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }

        public Builder decimal(BigDecimal decimal) {
            Utils.checkNotNull(decimal, "decimal");
            this.decimal = Optional.ofNullable(decimal);
            return this;
        }

        public Builder decimal(double decimal) {
            this.decimal = Optional.of(BigDecimal.valueOf(decimal));
            return this;
        }

        public Builder decimal(Optional<? extends BigDecimal> decimal) {
            Utils.checkNotNull(decimal, "decimal");
            this.decimal = decimal;
            return this;
        }

        public Builder obj(Obj obj) {
            Utils.checkNotNull(obj, "obj");
            this.obj = Optional.ofNullable(obj);
            return this;
        }

        public Builder obj(Optional<? extends Obj> obj) {
            Utils.checkNotNull(obj, "obj");
            this.obj = obj;
            return this;
        }
        
        public TypedParameterGenerationGetRequest build() {
            return new TypedParameterGenerationGetRequest(
                bigint,
                date,
                decimal,
                obj);
        }
    }
}

