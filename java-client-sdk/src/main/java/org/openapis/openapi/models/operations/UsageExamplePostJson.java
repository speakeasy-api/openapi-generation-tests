/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.models.shared.FakerFormattedStrings;
import org.openapis.openapi.models.shared.FakerStrings;
import org.openapis.openapi.models.shared.SimpleObject;
import org.openapis.openapi.utils.Utils;


public class UsageExamplePostJson {

    /**
     * A set of strings with format values that lead to relevant examples being generated for them
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fakerFormattedStrings")
    private Optional<? extends FakerFormattedStrings> fakerFormattedStrings;

    /**
     * A set of strings with fieldnames that lead to relevant examples being generated for them
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fakerStrings")
    private Optional<? extends FakerStrings> fakerStrings;

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     * https://speakeasy.com/docs - A link to the external docs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("simpleObject")
    private Optional<? extends SimpleObject> simpleObject;

    @JsonCreator
    public UsageExamplePostJson(
            @JsonProperty("fakerFormattedStrings") Optional<? extends FakerFormattedStrings> fakerFormattedStrings,
            @JsonProperty("fakerStrings") Optional<? extends FakerStrings> fakerStrings,
            @JsonProperty("simpleObject") Optional<? extends SimpleObject> simpleObject) {
        Utils.checkNotNull(fakerFormattedStrings, "fakerFormattedStrings");
        Utils.checkNotNull(fakerStrings, "fakerStrings");
        Utils.checkNotNull(simpleObject, "simpleObject");
        this.fakerFormattedStrings = fakerFormattedStrings;
        this.fakerStrings = fakerStrings;
        this.simpleObject = simpleObject;
    }
    
    public UsageExamplePostJson() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A set of strings with format values that lead to relevant examples being generated for them
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<FakerFormattedStrings> fakerFormattedStrings() {
        return (Optional<FakerFormattedStrings>) fakerFormattedStrings;
    }

    /**
     * A set of strings with fieldnames that lead to relevant examples being generated for them
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<FakerStrings> fakerStrings() {
        return (Optional<FakerStrings>) fakerStrings;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     * https://speakeasy.com/docs - A link to the external docs.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SimpleObject> simpleObject() {
        return (Optional<SimpleObject>) simpleObject;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A set of strings with format values that lead to relevant examples being generated for them
     */
    public UsageExamplePostJson withFakerFormattedStrings(FakerFormattedStrings fakerFormattedStrings) {
        Utils.checkNotNull(fakerFormattedStrings, "fakerFormattedStrings");
        this.fakerFormattedStrings = Optional.ofNullable(fakerFormattedStrings);
        return this;
    }

    /**
     * A set of strings with format values that lead to relevant examples being generated for them
     */
    public UsageExamplePostJson withFakerFormattedStrings(Optional<? extends FakerFormattedStrings> fakerFormattedStrings) {
        Utils.checkNotNull(fakerFormattedStrings, "fakerFormattedStrings");
        this.fakerFormattedStrings = fakerFormattedStrings;
        return this;
    }

    /**
     * A set of strings with fieldnames that lead to relevant examples being generated for them
     */
    public UsageExamplePostJson withFakerStrings(FakerStrings fakerStrings) {
        Utils.checkNotNull(fakerStrings, "fakerStrings");
        this.fakerStrings = Optional.ofNullable(fakerStrings);
        return this;
    }

    /**
     * A set of strings with fieldnames that lead to relevant examples being generated for them
     */
    public UsageExamplePostJson withFakerStrings(Optional<? extends FakerStrings> fakerStrings) {
        Utils.checkNotNull(fakerStrings, "fakerStrings");
        this.fakerStrings = fakerStrings;
        return this;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     * https://speakeasy.com/docs - A link to the external docs.
     */
    public UsageExamplePostJson withSimpleObject(SimpleObject simpleObject) {
        Utils.checkNotNull(simpleObject, "simpleObject");
        this.simpleObject = Optional.ofNullable(simpleObject);
        return this;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     * https://speakeasy.com/docs - A link to the external docs.
     */
    public UsageExamplePostJson withSimpleObject(Optional<? extends SimpleObject> simpleObject) {
        Utils.checkNotNull(simpleObject, "simpleObject");
        this.simpleObject = simpleObject;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UsageExamplePostJson other = (UsageExamplePostJson) o;
        return 
            Objects.deepEquals(this.fakerFormattedStrings, other.fakerFormattedStrings) &&
            Objects.deepEquals(this.fakerStrings, other.fakerStrings) &&
            Objects.deepEquals(this.simpleObject, other.simpleObject);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            fakerFormattedStrings,
            fakerStrings,
            simpleObject);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UsageExamplePostJson.class,
                "fakerFormattedStrings", fakerFormattedStrings,
                "fakerStrings", fakerStrings,
                "simpleObject", simpleObject);
    }
    
    public final static class Builder {
 
        private Optional<? extends FakerFormattedStrings> fakerFormattedStrings = Optional.empty();
 
        private Optional<? extends FakerStrings> fakerStrings = Optional.empty();
 
        private Optional<? extends SimpleObject> simpleObject = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A set of strings with format values that lead to relevant examples being generated for them
         */
        public Builder fakerFormattedStrings(FakerFormattedStrings fakerFormattedStrings) {
            Utils.checkNotNull(fakerFormattedStrings, "fakerFormattedStrings");
            this.fakerFormattedStrings = Optional.ofNullable(fakerFormattedStrings);
            return this;
        }

        /**
         * A set of strings with format values that lead to relevant examples being generated for them
         */
        public Builder fakerFormattedStrings(Optional<? extends FakerFormattedStrings> fakerFormattedStrings) {
            Utils.checkNotNull(fakerFormattedStrings, "fakerFormattedStrings");
            this.fakerFormattedStrings = fakerFormattedStrings;
            return this;
        }

        /**
         * A set of strings with fieldnames that lead to relevant examples being generated for them
         */
        public Builder fakerStrings(FakerStrings fakerStrings) {
            Utils.checkNotNull(fakerStrings, "fakerStrings");
            this.fakerStrings = Optional.ofNullable(fakerStrings);
            return this;
        }

        /**
         * A set of strings with fieldnames that lead to relevant examples being generated for them
         */
        public Builder fakerStrings(Optional<? extends FakerStrings> fakerStrings) {
            Utils.checkNotNull(fakerStrings, "fakerStrings");
            this.fakerStrings = fakerStrings;
            return this;
        }

        /**
         * A simple object that uses all our supported primitive types and enums and has optional properties.
         * https://speakeasy.com/docs - A link to the external docs.
         */
        public Builder simpleObject(SimpleObject simpleObject) {
            Utils.checkNotNull(simpleObject, "simpleObject");
            this.simpleObject = Optional.ofNullable(simpleObject);
            return this;
        }

        /**
         * A simple object that uses all our supported primitive types and enums and has optional properties.
         * https://speakeasy.com/docs - A link to the external docs.
         */
        public Builder simpleObject(Optional<? extends SimpleObject> simpleObject) {
            Utils.checkNotNull(simpleObject, "simpleObject");
            this.simpleObject = simpleObject;
            return this;
        }
        
        public UsageExamplePostJson build() {
            return new UsageExamplePostJson(
                fakerFormattedStrings,
                fakerStrings,
                simpleObject);
        }
    }
}

