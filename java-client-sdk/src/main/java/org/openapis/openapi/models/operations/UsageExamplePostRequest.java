/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;

public class UsageExamplePostRequest {

    /**
     * A request body that contains fields with different formats for testing example generation
     */
    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends UsageExamplePostRequestBody> requestBody;

    /**
     * An bigint parameter
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=bigintParameter")
    private BigInteger bigintParameter;

    /**
     * An bigint parameter
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=bigintParameterOptional")
    private Optional<? extends BigInteger> bigintParameterOptional;

    /**
     * An bigint parameter
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=bigintStrParameter")
    private BigInteger bigintStrParameter;
    @SuppressWarnings("unused")
    private static final TypeReference<BigInteger> bigintStrParameter_typeReference = new TypeReference<>() {}; // only appears if JsonShape is STRING

    /**
     * An bigint parameter
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=bigintStrParameterOptional")
    private Optional<? extends BigInteger> bigintStrParameterOptional;
    @SuppressWarnings("unused")
    private static final TypeReference<Optional<? extends BigInteger>> bigintStrParameterOptional_typeReference = new TypeReference<>() {}; // only appears if JsonShape is STRING

    /**
     * A boolean parameter
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=boolParameter")
    private boolean boolParameter;

    /**
     * A date parameter
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=dateParameter")
    private LocalDate dateParameter;

    /**
     * A date time parameter with a default value
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=dateTimeDefaultParameter")
    private OffsetDateTime dateTimeDefaultParameter;

    /**
     * A date time parameter
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=dateTimeParameter")
    private OffsetDateTime dateTimeParameter;

    /**
     * A decimal parameter
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=decimalParameter")
    private BigDecimal decimalParameter;

    /**
     * A decimal parameter
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=decimalParameterOptional")
    private Optional<? extends BigDecimal> decimalParameterOptional;

    /**
     * A decimal parameter
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=decimalStrParameter")
    private BigDecimal decimalStrParameter;
    @SuppressWarnings("unused")
    private static final TypeReference<BigDecimal> decimalStrParameter_typeReference = new TypeReference<>() {}; // only appears if JsonShape is STRING

    /**
     * A decimal parameter
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=decimalStrParameterOptional")
    private Optional<? extends BigDecimal> decimalStrParameterOptional;
    @SuppressWarnings("unused")
    private static final TypeReference<Optional<? extends BigDecimal>> decimalStrParameterOptional_typeReference = new TypeReference<>() {}; // only appears if JsonShape is STRING

    /**
     * A double parameter
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=doubleParameter")
    private double doubleParameter;

    /**
     * An enum parameter
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=enumParameter")
    private EnumParameter enumParameter;

    /**
     * A number parameter that contains a falsey example value
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=falseyNumberParameter")
    private double falseyNumberParameter;

    /**
     * A float32 parameter
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=float32Parameter")
    private float float32Parameter;

    /**
     * A float64 parameter
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=float64StringParameter")
    private String float64StringParameter;

    /**
     * A float parameter
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=floatParameter")
    private double floatParameter;

    /**
     * An int64 parameter
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=int64Parameter")
    private long int64Parameter;

    /**
     * An int64 parameter
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=int64StringParameter")
    private String int64StringParameter;

    /**
     * An integer parameter
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=intParameter")
    private int intParameter;

    /**
     * An enum parameter
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=optEnumParameter")
    private Optional<? extends OptEnumParameter> optEnumParameter;

    /**
     * A string parameter
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=strParameter")
    private String strParameter;

    @JsonCreator
    public UsageExamplePostRequest(
            Optional<? extends UsageExamplePostRequestBody> requestBody,
            BigInteger bigintParameter,
            Optional<? extends BigInteger> bigintParameterOptional,
            BigInteger bigintStrParameter,
            Optional<? extends BigInteger> bigintStrParameterOptional,
            boolean boolParameter,
            LocalDate dateParameter,
            OffsetDateTime dateTimeDefaultParameter,
            OffsetDateTime dateTimeParameter,
            BigDecimal decimalParameter,
            Optional<? extends BigDecimal> decimalParameterOptional,
            BigDecimal decimalStrParameter,
            Optional<? extends BigDecimal> decimalStrParameterOptional,
            double doubleParameter,
            EnumParameter enumParameter,
            double falseyNumberParameter,
            float float32Parameter,
            String float64StringParameter,
            double floatParameter,
            long int64Parameter,
            String int64StringParameter,
            int intParameter,
            Optional<? extends OptEnumParameter> optEnumParameter,
            String strParameter) {
        Utils.checkNotNull(requestBody, "requestBody");
        Utils.checkNotNull(bigintParameter, "bigintParameter");
        Utils.checkNotNull(bigintParameterOptional, "bigintParameterOptional");
        Utils.checkNotNull(bigintStrParameter, "bigintStrParameter");
        Utils.checkNotNull(bigintStrParameterOptional, "bigintStrParameterOptional");
        Utils.checkNotNull(boolParameter, "boolParameter");
        Utils.checkNotNull(dateParameter, "dateParameter");
        Utils.checkNotNull(dateTimeDefaultParameter, "dateTimeDefaultParameter");
        Utils.checkNotNull(dateTimeParameter, "dateTimeParameter");
        Utils.checkNotNull(decimalParameter, "decimalParameter");
        Utils.checkNotNull(decimalParameterOptional, "decimalParameterOptional");
        Utils.checkNotNull(decimalStrParameter, "decimalStrParameter");
        Utils.checkNotNull(decimalStrParameterOptional, "decimalStrParameterOptional");
        Utils.checkNotNull(doubleParameter, "doubleParameter");
        Utils.checkNotNull(enumParameter, "enumParameter");
        Utils.checkNotNull(falseyNumberParameter, "falseyNumberParameter");
        Utils.checkNotNull(float32Parameter, "float32Parameter");
        Utils.checkNotNull(float64StringParameter, "float64StringParameter");
        Utils.checkNotNull(floatParameter, "floatParameter");
        Utils.checkNotNull(int64Parameter, "int64Parameter");
        Utils.checkNotNull(int64StringParameter, "int64StringParameter");
        Utils.checkNotNull(intParameter, "intParameter");
        Utils.checkNotNull(optEnumParameter, "optEnumParameter");
        Utils.checkNotNull(strParameter, "strParameter");
        this.requestBody = requestBody;
        this.bigintParameter = bigintParameter;
        this.bigintParameterOptional = bigintParameterOptional;
        this.bigintStrParameter = bigintStrParameter;
        this.bigintStrParameterOptional = bigintStrParameterOptional;
        this.boolParameter = boolParameter;
        this.dateParameter = dateParameter;
        this.dateTimeDefaultParameter = dateTimeDefaultParameter;
        this.dateTimeParameter = dateTimeParameter;
        this.decimalParameter = decimalParameter;
        this.decimalParameterOptional = decimalParameterOptional;
        this.decimalStrParameter = decimalStrParameter;
        this.decimalStrParameterOptional = decimalStrParameterOptional;
        this.doubleParameter = doubleParameter;
        this.enumParameter = enumParameter;
        this.falseyNumberParameter = falseyNumberParameter;
        this.float32Parameter = float32Parameter;
        this.float64StringParameter = float64StringParameter;
        this.floatParameter = floatParameter;
        this.int64Parameter = int64Parameter;
        this.int64StringParameter = int64StringParameter;
        this.intParameter = intParameter;
        this.optEnumParameter = optEnumParameter;
        this.strParameter = strParameter;
    }
    
    public UsageExamplePostRequest(
            BigInteger bigintParameter,
            BigInteger bigintStrParameter,
            boolean boolParameter,
            LocalDate dateParameter,
            OffsetDateTime dateTimeDefaultParameter,
            OffsetDateTime dateTimeParameter,
            BigDecimal decimalParameter,
            BigDecimal decimalStrParameter,
            double doubleParameter,
            EnumParameter enumParameter,
            double falseyNumberParameter,
            float float32Parameter,
            String float64StringParameter,
            double floatParameter,
            long int64Parameter,
            String int64StringParameter,
            int intParameter,
            String strParameter) {
        this(Optional.empty(), bigintParameter, Optional.empty(), bigintStrParameter, Optional.empty(), boolParameter, dateParameter, dateTimeDefaultParameter, dateTimeParameter, decimalParameter, Optional.empty(), decimalStrParameter, Optional.empty(), doubleParameter, enumParameter, falseyNumberParameter, float32Parameter, float64StringParameter, floatParameter, int64Parameter, int64StringParameter, intParameter, Optional.empty(), strParameter);
    }

    /**
     * A request body that contains fields with different formats for testing example generation
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UsageExamplePostRequestBody> requestBody() {
        return (Optional<UsageExamplePostRequestBody>) requestBody;
    }

    /**
     * An bigint parameter
     */
    @JsonIgnore
    public BigInteger bigintParameter() {
        return bigintParameter;
    }

    /**
     * An bigint parameter
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BigInteger> bigintParameterOptional() {
        return (Optional<BigInteger>) bigintParameterOptional;
    }

    /**
     * An bigint parameter
     */
    @JsonIgnore
    public BigInteger bigintStrParameter() {
        return bigintStrParameter;
    }

    /**
     * An bigint parameter
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BigInteger> bigintStrParameterOptional() {
        return (Optional<BigInteger>) bigintStrParameterOptional;
    }

    /**
     * A boolean parameter
     */
    @JsonIgnore
    public boolean boolParameter() {
        return boolParameter;
    }

    /**
     * A date parameter
     */
    @JsonIgnore
    public LocalDate dateParameter() {
        return dateParameter;
    }

    /**
     * A date time parameter with a default value
     */
    @JsonIgnore
    public OffsetDateTime dateTimeDefaultParameter() {
        return dateTimeDefaultParameter;
    }

    /**
     * A date time parameter
     */
    @JsonIgnore
    public OffsetDateTime dateTimeParameter() {
        return dateTimeParameter;
    }

    /**
     * A decimal parameter
     */
    @JsonIgnore
    public BigDecimal decimalParameter() {
        return decimalParameter;
    }

    /**
     * A decimal parameter
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BigDecimal> decimalParameterOptional() {
        return (Optional<BigDecimal>) decimalParameterOptional;
    }

    /**
     * A decimal parameter
     */
    @JsonIgnore
    public BigDecimal decimalStrParameter() {
        return decimalStrParameter;
    }

    /**
     * A decimal parameter
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BigDecimal> decimalStrParameterOptional() {
        return (Optional<BigDecimal>) decimalStrParameterOptional;
    }

    /**
     * A double parameter
     */
    @JsonIgnore
    public double doubleParameter() {
        return doubleParameter;
    }

    /**
     * An enum parameter
     */
    @JsonIgnore
    public EnumParameter enumParameter() {
        return enumParameter;
    }

    /**
     * A number parameter that contains a falsey example value
     */
    @JsonIgnore
    public double falseyNumberParameter() {
        return falseyNumberParameter;
    }

    /**
     * A float32 parameter
     */
    @JsonIgnore
    public float float32Parameter() {
        return float32Parameter;
    }

    /**
     * A float64 parameter
     */
    @JsonIgnore
    public String float64StringParameter() {
        return float64StringParameter;
    }

    /**
     * A float parameter
     */
    @JsonIgnore
    public double floatParameter() {
        return floatParameter;
    }

    /**
     * An int64 parameter
     */
    @JsonIgnore
    public long int64Parameter() {
        return int64Parameter;
    }

    /**
     * An int64 parameter
     */
    @JsonIgnore
    public String int64StringParameter() {
        return int64StringParameter;
    }

    /**
     * An integer parameter
     */
    @JsonIgnore
    public int intParameter() {
        return intParameter;
    }

    /**
     * An enum parameter
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OptEnumParameter> optEnumParameter() {
        return (Optional<OptEnumParameter>) optEnumParameter;
    }

    /**
     * A string parameter
     */
    @JsonIgnore
    public String strParameter() {
        return strParameter;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A request body that contains fields with different formats for testing example generation
     */
    public UsageExamplePostRequest withRequestBody(UsageExamplePostRequestBody requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = Optional.ofNullable(requestBody);
        return this;
    }

    /**
     * A request body that contains fields with different formats for testing example generation
     */
    public UsageExamplePostRequest withRequestBody(Optional<? extends UsageExamplePostRequestBody> requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }

        /**
         * An bigint parameter
         */
    public UsageExamplePostRequest withBigintParameter(long bigintParameter) {
        this.bigintParameter = BigInteger.valueOf(bigintParameter);
        return this;
    }

    /**
     * An bigint parameter
     */
    public UsageExamplePostRequest withBigintParameter(BigInteger bigintParameter) {
        Utils.checkNotNull(bigintParameter, "bigintParameter");
        this.bigintParameter = bigintParameter;
        return this;
    }

    /**
     * An bigint parameter
     */
    public UsageExamplePostRequest withBigintParameterOptional(BigInteger bigintParameterOptional) {
        Utils.checkNotNull(bigintParameterOptional, "bigintParameterOptional");
        this.bigintParameterOptional = Optional.ofNullable(bigintParameterOptional);
        return this;
    }

    /**
     * An bigint parameter
     */
    public UsageExamplePostRequest withBigintParameterOptional(long bigintParameterOptional) {
        this.bigintParameterOptional = Optional.of(BigInteger.valueOf(bigintParameterOptional));
        return this;
    }

    /**
     * An bigint parameter
     */
    public UsageExamplePostRequest withBigintParameterOptional(Optional<? extends BigInteger> bigintParameterOptional) {
        Utils.checkNotNull(bigintParameterOptional, "bigintParameterOptional");
        this.bigintParameterOptional = bigintParameterOptional;
        return this;
    }

        /**
         * An bigint parameter
         */
    public UsageExamplePostRequest withBigintStrParameter(long bigintStrParameter) {
        this.bigintStrParameter = BigInteger.valueOf(bigintStrParameter);
        return this;
    }

    /**
     * An bigint parameter
     */
    public UsageExamplePostRequest withBigintStrParameter(BigInteger bigintStrParameter) {
        Utils.checkNotNull(bigintStrParameter, "bigintStrParameter");
        this.bigintStrParameter = bigintStrParameter;
        return this;
    }

    /**
     * An bigint parameter
     */
    public UsageExamplePostRequest withBigintStrParameterOptional(BigInteger bigintStrParameterOptional) {
        Utils.checkNotNull(bigintStrParameterOptional, "bigintStrParameterOptional");
        this.bigintStrParameterOptional = Optional.ofNullable(bigintStrParameterOptional);
        return this;
    }

    /**
     * An bigint parameter
     */
    public UsageExamplePostRequest withBigintStrParameterOptional(long bigintStrParameterOptional) {
        this.bigintStrParameterOptional = Optional.of(BigInteger.valueOf(bigintStrParameterOptional));
        return this;
    }

    /**
     * An bigint parameter
     */
    public UsageExamplePostRequest withBigintStrParameterOptional(Optional<? extends BigInteger> bigintStrParameterOptional) {
        Utils.checkNotNull(bigintStrParameterOptional, "bigintStrParameterOptional");
        this.bigintStrParameterOptional = bigintStrParameterOptional;
        return this;
    }

    /**
     * A boolean parameter
     */
    public UsageExamplePostRequest withBoolParameter(boolean boolParameter) {
        Utils.checkNotNull(boolParameter, "boolParameter");
        this.boolParameter = boolParameter;
        return this;
    }

    /**
     * A date parameter
     */
    public UsageExamplePostRequest withDateParameter(LocalDate dateParameter) {
        Utils.checkNotNull(dateParameter, "dateParameter");
        this.dateParameter = dateParameter;
        return this;
    }

    /**
     * A date time parameter with a default value
     */
    public UsageExamplePostRequest withDateTimeDefaultParameter(OffsetDateTime dateTimeDefaultParameter) {
        Utils.checkNotNull(dateTimeDefaultParameter, "dateTimeDefaultParameter");
        this.dateTimeDefaultParameter = dateTimeDefaultParameter;
        return this;
    }

    /**
     * A date time parameter
     */
    public UsageExamplePostRequest withDateTimeParameter(OffsetDateTime dateTimeParameter) {
        Utils.checkNotNull(dateTimeParameter, "dateTimeParameter");
        this.dateTimeParameter = dateTimeParameter;
        return this;
    }

        /**
         * A decimal parameter
         */
    public UsageExamplePostRequest withDecimalParameter(double decimalParameter) {
        this.decimalParameter = BigDecimal.valueOf(decimalParameter);
        return this;
    }

    /**
     * A decimal parameter
     */
    public UsageExamplePostRequest withDecimalParameter(BigDecimal decimalParameter) {
        Utils.checkNotNull(decimalParameter, "decimalParameter");
        this.decimalParameter = decimalParameter;
        return this;
    }

    /**
     * A decimal parameter
     */
    public UsageExamplePostRequest withDecimalParameterOptional(BigDecimal decimalParameterOptional) {
        Utils.checkNotNull(decimalParameterOptional, "decimalParameterOptional");
        this.decimalParameterOptional = Optional.ofNullable(decimalParameterOptional);
        return this;
    }

        /**
         * A decimal parameter
         */
    public UsageExamplePostRequest withDecimalParameterOptional(double decimalParameterOptional) {
        this.decimalParameterOptional = Optional.of(BigDecimal.valueOf(decimalParameterOptional));
        return this;
    }

    /**
     * A decimal parameter
     */
    public UsageExamplePostRequest withDecimalParameterOptional(Optional<? extends BigDecimal> decimalParameterOptional) {
        Utils.checkNotNull(decimalParameterOptional, "decimalParameterOptional");
        this.decimalParameterOptional = decimalParameterOptional;
        return this;
    }

        /**
         * A decimal parameter
         */
    public UsageExamplePostRequest withDecimalStrParameter(double decimalStrParameter) {
        this.decimalStrParameter = BigDecimal.valueOf(decimalStrParameter);
        return this;
    }

    /**
     * A decimal parameter
     */
    public UsageExamplePostRequest withDecimalStrParameter(BigDecimal decimalStrParameter) {
        Utils.checkNotNull(decimalStrParameter, "decimalStrParameter");
        this.decimalStrParameter = decimalStrParameter;
        return this;
    }

    /**
     * A decimal parameter
     */
    public UsageExamplePostRequest withDecimalStrParameterOptional(BigDecimal decimalStrParameterOptional) {
        Utils.checkNotNull(decimalStrParameterOptional, "decimalStrParameterOptional");
        this.decimalStrParameterOptional = Optional.ofNullable(decimalStrParameterOptional);
        return this;
    }

        /**
         * A decimal parameter
         */
    public UsageExamplePostRequest withDecimalStrParameterOptional(double decimalStrParameterOptional) {
        this.decimalStrParameterOptional = Optional.of(BigDecimal.valueOf(decimalStrParameterOptional));
        return this;
    }

    /**
     * A decimal parameter
     */
    public UsageExamplePostRequest withDecimalStrParameterOptional(Optional<? extends BigDecimal> decimalStrParameterOptional) {
        Utils.checkNotNull(decimalStrParameterOptional, "decimalStrParameterOptional");
        this.decimalStrParameterOptional = decimalStrParameterOptional;
        return this;
    }

    /**
     * A double parameter
     */
    public UsageExamplePostRequest withDoubleParameter(double doubleParameter) {
        Utils.checkNotNull(doubleParameter, "doubleParameter");
        this.doubleParameter = doubleParameter;
        return this;
    }

    /**
     * An enum parameter
     */
    public UsageExamplePostRequest withEnumParameter(EnumParameter enumParameter) {
        Utils.checkNotNull(enumParameter, "enumParameter");
        this.enumParameter = enumParameter;
        return this;
    }

    /**
     * A number parameter that contains a falsey example value
     */
    public UsageExamplePostRequest withFalseyNumberParameter(double falseyNumberParameter) {
        Utils.checkNotNull(falseyNumberParameter, "falseyNumberParameter");
        this.falseyNumberParameter = falseyNumberParameter;
        return this;
    }

    /**
     * A float32 parameter
     */
    public UsageExamplePostRequest withFloat32Parameter(float float32Parameter) {
        Utils.checkNotNull(float32Parameter, "float32Parameter");
        this.float32Parameter = float32Parameter;
        return this;
    }

    /**
     * A float64 parameter
     */
    public UsageExamplePostRequest withFloat64StringParameter(String float64StringParameter) {
        Utils.checkNotNull(float64StringParameter, "float64StringParameter");
        this.float64StringParameter = float64StringParameter;
        return this;
    }

    /**
     * A float parameter
     */
    public UsageExamplePostRequest withFloatParameter(double floatParameter) {
        Utils.checkNotNull(floatParameter, "floatParameter");
        this.floatParameter = floatParameter;
        return this;
    }

    /**
     * An int64 parameter
     */
    public UsageExamplePostRequest withInt64Parameter(long int64Parameter) {
        Utils.checkNotNull(int64Parameter, "int64Parameter");
        this.int64Parameter = int64Parameter;
        return this;
    }

    /**
     * An int64 parameter
     */
    public UsageExamplePostRequest withInt64StringParameter(String int64StringParameter) {
        Utils.checkNotNull(int64StringParameter, "int64StringParameter");
        this.int64StringParameter = int64StringParameter;
        return this;
    }

    /**
     * An integer parameter
     */
    public UsageExamplePostRequest withIntParameter(int intParameter) {
        Utils.checkNotNull(intParameter, "intParameter");
        this.intParameter = intParameter;
        return this;
    }

    /**
     * An enum parameter
     */
    public UsageExamplePostRequest withOptEnumParameter(OptEnumParameter optEnumParameter) {
        Utils.checkNotNull(optEnumParameter, "optEnumParameter");
        this.optEnumParameter = Optional.ofNullable(optEnumParameter);
        return this;
    }

    /**
     * An enum parameter
     */
    public UsageExamplePostRequest withOptEnumParameter(Optional<? extends OptEnumParameter> optEnumParameter) {
        Utils.checkNotNull(optEnumParameter, "optEnumParameter");
        this.optEnumParameter = optEnumParameter;
        return this;
    }

    /**
     * A string parameter
     */
    public UsageExamplePostRequest withStrParameter(String strParameter) {
        Utils.checkNotNull(strParameter, "strParameter");
        this.strParameter = strParameter;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UsageExamplePostRequest other = (UsageExamplePostRequest) o;
        return 
            java.util.Objects.deepEquals(this.requestBody, other.requestBody) &&
            java.util.Objects.deepEquals(this.bigintParameter, other.bigintParameter) &&
            java.util.Objects.deepEquals(this.bigintParameterOptional, other.bigintParameterOptional) &&
            java.util.Objects.deepEquals(this.bigintStrParameter, other.bigintStrParameter) &&
            java.util.Objects.deepEquals(this.bigintStrParameterOptional, other.bigintStrParameterOptional) &&
            java.util.Objects.deepEquals(this.boolParameter, other.boolParameter) &&
            java.util.Objects.deepEquals(this.dateParameter, other.dateParameter) &&
            java.util.Objects.deepEquals(this.dateTimeDefaultParameter, other.dateTimeDefaultParameter) &&
            java.util.Objects.deepEquals(this.dateTimeParameter, other.dateTimeParameter) &&
            java.util.Objects.deepEquals(this.decimalParameter, other.decimalParameter) &&
            java.util.Objects.deepEquals(this.decimalParameterOptional, other.decimalParameterOptional) &&
            java.util.Objects.deepEquals(this.decimalStrParameter, other.decimalStrParameter) &&
            java.util.Objects.deepEquals(this.decimalStrParameterOptional, other.decimalStrParameterOptional) &&
            java.util.Objects.deepEquals(this.doubleParameter, other.doubleParameter) &&
            java.util.Objects.deepEquals(this.enumParameter, other.enumParameter) &&
            java.util.Objects.deepEquals(this.falseyNumberParameter, other.falseyNumberParameter) &&
            java.util.Objects.deepEquals(this.float32Parameter, other.float32Parameter) &&
            java.util.Objects.deepEquals(this.float64StringParameter, other.float64StringParameter) &&
            java.util.Objects.deepEquals(this.floatParameter, other.floatParameter) &&
            java.util.Objects.deepEquals(this.int64Parameter, other.int64Parameter) &&
            java.util.Objects.deepEquals(this.int64StringParameter, other.int64StringParameter) &&
            java.util.Objects.deepEquals(this.intParameter, other.intParameter) &&
            java.util.Objects.deepEquals(this.optEnumParameter, other.optEnumParameter) &&
            java.util.Objects.deepEquals(this.strParameter, other.strParameter);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            requestBody,
            bigintParameter,
            bigintParameterOptional,
            bigintStrParameter,
            bigintStrParameterOptional,
            boolParameter,
            dateParameter,
            dateTimeDefaultParameter,
            dateTimeParameter,
            decimalParameter,
            decimalParameterOptional,
            decimalStrParameter,
            decimalStrParameterOptional,
            doubleParameter,
            enumParameter,
            falseyNumberParameter,
            float32Parameter,
            float64StringParameter,
            floatParameter,
            int64Parameter,
            int64StringParameter,
            intParameter,
            optEnumParameter,
            strParameter);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UsageExamplePostRequest.class,
                "requestBody", requestBody,
                "bigintParameter", bigintParameter,
                "bigintParameterOptional", bigintParameterOptional,
                "bigintStrParameter", bigintStrParameter,
                "bigintStrParameterOptional", bigintStrParameterOptional,
                "boolParameter", boolParameter,
                "dateParameter", dateParameter,
                "dateTimeDefaultParameter", dateTimeDefaultParameter,
                "dateTimeParameter", dateTimeParameter,
                "decimalParameter", decimalParameter,
                "decimalParameterOptional", decimalParameterOptional,
                "decimalStrParameter", decimalStrParameter,
                "decimalStrParameterOptional", decimalStrParameterOptional,
                "doubleParameter", doubleParameter,
                "enumParameter", enumParameter,
                "falseyNumberParameter", falseyNumberParameter,
                "float32Parameter", float32Parameter,
                "float64StringParameter", float64StringParameter,
                "floatParameter", floatParameter,
                "int64Parameter", int64Parameter,
                "int64StringParameter", int64StringParameter,
                "intParameter", intParameter,
                "optEnumParameter", optEnumParameter,
                "strParameter", strParameter);
    }
    
    public final static class Builder {
 
        private Optional<? extends UsageExamplePostRequestBody> requestBody = Optional.empty();
 
        private BigInteger bigintParameter;
 
        private Optional<? extends BigInteger> bigintParameterOptional = Optional.empty();
 
        private BigInteger bigintStrParameter;
 
        private Optional<? extends BigInteger> bigintStrParameterOptional = Optional.empty();
 
        private Boolean boolParameter;
 
        private LocalDate dateParameter;
 
        private OffsetDateTime dateTimeDefaultParameter;
 
        private OffsetDateTime dateTimeParameter;
 
        private BigDecimal decimalParameter;
 
        private Optional<? extends BigDecimal> decimalParameterOptional = Optional.empty();
 
        private BigDecimal decimalStrParameter;
 
        private Optional<? extends BigDecimal> decimalStrParameterOptional = Optional.empty();
 
        private Double doubleParameter;
 
        private EnumParameter enumParameter;
 
        private Double falseyNumberParameter;
 
        private Float float32Parameter;
 
        private String float64StringParameter;
 
        private Double floatParameter;
 
        private Long int64Parameter;
 
        private String int64StringParameter;
 
        private Integer intParameter;
 
        private Optional<? extends OptEnumParameter> optEnumParameter = Optional.empty();
 
        private String strParameter;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A request body that contains fields with different formats for testing example generation
         */
        public Builder requestBody(UsageExamplePostRequestBody requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = Optional.ofNullable(requestBody);
            return this;
        }

        /**
         * A request body that contains fields with different formats for testing example generation
         */
        public Builder requestBody(Optional<? extends UsageExamplePostRequestBody> requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }

        /**
         * An bigint parameter
         */
        public Builder bigintParameter(long bigintParameter) {
            this.bigintParameter = BigInteger.valueOf(bigintParameter);
            return this;
        }

        /**
         * An bigint parameter
         */
        public Builder bigintParameter(BigInteger bigintParameter) {
            Utils.checkNotNull(bigintParameter, "bigintParameter");
            this.bigintParameter = bigintParameter;
            return this;
        }

        /**
         * An bigint parameter
         */
        public Builder bigintParameterOptional(BigInteger bigintParameterOptional) {
            Utils.checkNotNull(bigintParameterOptional, "bigintParameterOptional");
            this.bigintParameterOptional = Optional.ofNullable(bigintParameterOptional);
            return this;
        }

        /**
         * An bigint parameter
         */
        public Builder bigintParameterOptional(long bigintParameterOptional) {
            this.bigintParameterOptional = Optional.of(BigInteger.valueOf(bigintParameterOptional));
            return this;
        }

        /**
         * An bigint parameter
         */
        public Builder bigintParameterOptional(Optional<? extends BigInteger> bigintParameterOptional) {
            Utils.checkNotNull(bigintParameterOptional, "bigintParameterOptional");
            this.bigintParameterOptional = bigintParameterOptional;
            return this;
        }

        /**
         * An bigint parameter
         */
        public Builder bigintStrParameter(long bigintStrParameter) {
            this.bigintStrParameter = BigInteger.valueOf(bigintStrParameter);
            return this;
        }

        /**
         * An bigint parameter
         */
        public Builder bigintStrParameter(BigInteger bigintStrParameter) {
            Utils.checkNotNull(bigintStrParameter, "bigintStrParameter");
            this.bigintStrParameter = bigintStrParameter;
            return this;
        }

        /**
         * An bigint parameter
         */
        public Builder bigintStrParameterOptional(BigInteger bigintStrParameterOptional) {
            Utils.checkNotNull(bigintStrParameterOptional, "bigintStrParameterOptional");
            this.bigintStrParameterOptional = Optional.ofNullable(bigintStrParameterOptional);
            return this;
        }

        /**
         * An bigint parameter
         */
        public Builder bigintStrParameterOptional(long bigintStrParameterOptional) {
            this.bigintStrParameterOptional = Optional.of(BigInteger.valueOf(bigintStrParameterOptional));
            return this;
        }

        /**
         * An bigint parameter
         */
        public Builder bigintStrParameterOptional(Optional<? extends BigInteger> bigintStrParameterOptional) {
            Utils.checkNotNull(bigintStrParameterOptional, "bigintStrParameterOptional");
            this.bigintStrParameterOptional = bigintStrParameterOptional;
            return this;
        }

        /**
         * A boolean parameter
         */
        public Builder boolParameter(boolean boolParameter) {
            Utils.checkNotNull(boolParameter, "boolParameter");
            this.boolParameter = boolParameter;
            return this;
        }

        /**
         * A date parameter
         */
        public Builder dateParameter(LocalDate dateParameter) {
            Utils.checkNotNull(dateParameter, "dateParameter");
            this.dateParameter = dateParameter;
            return this;
        }

        /**
         * A date time parameter with a default value
         */
        public Builder dateTimeDefaultParameter(OffsetDateTime dateTimeDefaultParameter) {
            Utils.checkNotNull(dateTimeDefaultParameter, "dateTimeDefaultParameter");
            this.dateTimeDefaultParameter = dateTimeDefaultParameter;
            return this;
        }

        /**
         * A date time parameter
         */
        public Builder dateTimeParameter(OffsetDateTime dateTimeParameter) {
            Utils.checkNotNull(dateTimeParameter, "dateTimeParameter");
            this.dateTimeParameter = dateTimeParameter;
            return this;
        }

        /**
         * A decimal parameter
         */
        public Builder decimalParameter(double decimalParameter) {
            this.decimalParameter = BigDecimal.valueOf(decimalParameter);
            return this;
        }

        /**
         * A decimal parameter
         */
        public Builder decimalParameter(BigDecimal decimalParameter) {
            Utils.checkNotNull(decimalParameter, "decimalParameter");
            this.decimalParameter = decimalParameter;
            return this;
        }

        /**
         * A decimal parameter
         */
        public Builder decimalParameterOptional(BigDecimal decimalParameterOptional) {
            Utils.checkNotNull(decimalParameterOptional, "decimalParameterOptional");
            this.decimalParameterOptional = Optional.ofNullable(decimalParameterOptional);
            return this;
        }

        /**
         * A decimal parameter
         */
        public Builder decimalParameterOptional(double decimalParameterOptional) {
            this.decimalParameterOptional = Optional.of(BigDecimal.valueOf(decimalParameterOptional));
            return this;
        }

        /**
         * A decimal parameter
         */
        public Builder decimalParameterOptional(Optional<? extends BigDecimal> decimalParameterOptional) {
            Utils.checkNotNull(decimalParameterOptional, "decimalParameterOptional");
            this.decimalParameterOptional = decimalParameterOptional;
            return this;
        }

        /**
         * A decimal parameter
         */
        public Builder decimalStrParameter(double decimalStrParameter) {
            this.decimalStrParameter = BigDecimal.valueOf(decimalStrParameter);
            return this;
        }

        /**
         * A decimal parameter
         */
        public Builder decimalStrParameter(BigDecimal decimalStrParameter) {
            Utils.checkNotNull(decimalStrParameter, "decimalStrParameter");
            this.decimalStrParameter = decimalStrParameter;
            return this;
        }

        /**
         * A decimal parameter
         */
        public Builder decimalStrParameterOptional(BigDecimal decimalStrParameterOptional) {
            Utils.checkNotNull(decimalStrParameterOptional, "decimalStrParameterOptional");
            this.decimalStrParameterOptional = Optional.ofNullable(decimalStrParameterOptional);
            return this;
        }

        /**
         * A decimal parameter
         */
        public Builder decimalStrParameterOptional(double decimalStrParameterOptional) {
            this.decimalStrParameterOptional = Optional.of(BigDecimal.valueOf(decimalStrParameterOptional));
            return this;
        }

        /**
         * A decimal parameter
         */
        public Builder decimalStrParameterOptional(Optional<? extends BigDecimal> decimalStrParameterOptional) {
            Utils.checkNotNull(decimalStrParameterOptional, "decimalStrParameterOptional");
            this.decimalStrParameterOptional = decimalStrParameterOptional;
            return this;
        }

        /**
         * A double parameter
         */
        public Builder doubleParameter(double doubleParameter) {
            Utils.checkNotNull(doubleParameter, "doubleParameter");
            this.doubleParameter = doubleParameter;
            return this;
        }

        /**
         * An enum parameter
         */
        public Builder enumParameter(EnumParameter enumParameter) {
            Utils.checkNotNull(enumParameter, "enumParameter");
            this.enumParameter = enumParameter;
            return this;
        }

        /**
         * A number parameter that contains a falsey example value
         */
        public Builder falseyNumberParameter(double falseyNumberParameter) {
            Utils.checkNotNull(falseyNumberParameter, "falseyNumberParameter");
            this.falseyNumberParameter = falseyNumberParameter;
            return this;
        }

        /**
         * A float32 parameter
         */
        public Builder float32Parameter(float float32Parameter) {
            Utils.checkNotNull(float32Parameter, "float32Parameter");
            this.float32Parameter = float32Parameter;
            return this;
        }

        /**
         * A float64 parameter
         */
        public Builder float64StringParameter(String float64StringParameter) {
            Utils.checkNotNull(float64StringParameter, "float64StringParameter");
            this.float64StringParameter = float64StringParameter;
            return this;
        }

        /**
         * A float parameter
         */
        public Builder floatParameter(double floatParameter) {
            Utils.checkNotNull(floatParameter, "floatParameter");
            this.floatParameter = floatParameter;
            return this;
        }

        /**
         * An int64 parameter
         */
        public Builder int64Parameter(long int64Parameter) {
            Utils.checkNotNull(int64Parameter, "int64Parameter");
            this.int64Parameter = int64Parameter;
            return this;
        }

        /**
         * An int64 parameter
         */
        public Builder int64StringParameter(String int64StringParameter) {
            Utils.checkNotNull(int64StringParameter, "int64StringParameter");
            this.int64StringParameter = int64StringParameter;
            return this;
        }

        /**
         * An integer parameter
         */
        public Builder intParameter(int intParameter) {
            Utils.checkNotNull(intParameter, "intParameter");
            this.intParameter = intParameter;
            return this;
        }

        /**
         * An enum parameter
         */
        public Builder optEnumParameter(OptEnumParameter optEnumParameter) {
            Utils.checkNotNull(optEnumParameter, "optEnumParameter");
            this.optEnumParameter = Optional.ofNullable(optEnumParameter);
            return this;
        }

        /**
         * An enum parameter
         */
        public Builder optEnumParameter(Optional<? extends OptEnumParameter> optEnumParameter) {
            Utils.checkNotNull(optEnumParameter, "optEnumParameter");
            this.optEnumParameter = optEnumParameter;
            return this;
        }

        /**
         * A string parameter
         */
        public Builder strParameter(String strParameter) {
            Utils.checkNotNull(strParameter, "strParameter");
            this.strParameter = strParameter;
            return this;
        }
        
        public UsageExamplePostRequest build() {
            return new UsageExamplePostRequest(
                requestBody,
                bigintParameter,
                bigintParameterOptional,
                bigintStrParameter,
                bigintStrParameterOptional,
                boolParameter,
                dateParameter,
                dateTimeDefaultParameter,
                dateTimeParameter,
                decimalParameter,
                decimalParameterOptional,
                decimalStrParameter,
                decimalStrParameterOptional,
                doubleParameter,
                enumParameter,
                falseyNumberParameter,
                float32Parameter,
                float64StringParameter,
                floatParameter,
                int64Parameter,
                int64StringParameter,
                intParameter,
                optEnumParameter,
                strParameter);
        }
    }
}

