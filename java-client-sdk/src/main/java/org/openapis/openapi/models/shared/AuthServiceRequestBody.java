/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class AuthServiceRequestBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("basicAuth")
    private Optional<? extends BasicAuth> basicAuth;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("headerAuth")
    private Optional<? extends List<HeaderAuth>> headerAuth;

    @JsonCreator
    public AuthServiceRequestBody(
            @JsonProperty("basicAuth") Optional<? extends BasicAuth> basicAuth,
            @JsonProperty("headerAuth") Optional<? extends List<HeaderAuth>> headerAuth) {
        Utils.checkNotNull(basicAuth, "basicAuth");
        Utils.checkNotNull(headerAuth, "headerAuth");
        this.basicAuth = basicAuth;
        this.headerAuth = headerAuth;
    }
    
    public AuthServiceRequestBody() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BasicAuth> basicAuth() {
        return (Optional<BasicAuth>) basicAuth;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<HeaderAuth>> headerAuth() {
        return (Optional<List<HeaderAuth>>) headerAuth;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public AuthServiceRequestBody withBasicAuth(BasicAuth basicAuth) {
        Utils.checkNotNull(basicAuth, "basicAuth");
        this.basicAuth = Optional.ofNullable(basicAuth);
        return this;
    }

    public AuthServiceRequestBody withBasicAuth(Optional<? extends BasicAuth> basicAuth) {
        Utils.checkNotNull(basicAuth, "basicAuth");
        this.basicAuth = basicAuth;
        return this;
    }

    public AuthServiceRequestBody withHeaderAuth(List<HeaderAuth> headerAuth) {
        Utils.checkNotNull(headerAuth, "headerAuth");
        this.headerAuth = Optional.ofNullable(headerAuth);
        return this;
    }

    public AuthServiceRequestBody withHeaderAuth(Optional<? extends List<HeaderAuth>> headerAuth) {
        Utils.checkNotNull(headerAuth, "headerAuth");
        this.headerAuth = headerAuth;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthServiceRequestBody other = (AuthServiceRequestBody) o;
        return 
            Objects.deepEquals(this.basicAuth, other.basicAuth) &&
            Objects.deepEquals(this.headerAuth, other.headerAuth);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            basicAuth,
            headerAuth);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuthServiceRequestBody.class,
                "basicAuth", basicAuth,
                "headerAuth", headerAuth);
    }
    
    public final static class Builder {
 
        private Optional<? extends BasicAuth> basicAuth = Optional.empty();
 
        private Optional<? extends List<HeaderAuth>> headerAuth = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder basicAuth(BasicAuth basicAuth) {
            Utils.checkNotNull(basicAuth, "basicAuth");
            this.basicAuth = Optional.ofNullable(basicAuth);
            return this;
        }

        public Builder basicAuth(Optional<? extends BasicAuth> basicAuth) {
            Utils.checkNotNull(basicAuth, "basicAuth");
            this.basicAuth = basicAuth;
            return this;
        }

        public Builder headerAuth(List<HeaderAuth> headerAuth) {
            Utils.checkNotNull(headerAuth, "headerAuth");
            this.headerAuth = Optional.ofNullable(headerAuth);
            return this;
        }

        public Builder headerAuth(Optional<? extends List<HeaderAuth>> headerAuth) {
            Utils.checkNotNull(headerAuth, "headerAuth");
            this.headerAuth = headerAuth;
            return this;
        }
        
        public AuthServiceRequestBody build() {
            return new AuthServiceRequestBody(
                basicAuth,
                headerAuth);
        }
    }
}

