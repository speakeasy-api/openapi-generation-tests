/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.Utils;

public class Car implements Vehicle, HasWheels {

    @JsonProperty("vehicleType")
    private String vehicleType;

    @JsonProperty("wheelsType")
    private String wheelsType;

    @JsonCreator
    public Car() {
        
        this.vehicleType = Builder._SINGLETON_VALUE_VehicleType.value();
        this.wheelsType = Builder._SINGLETON_VALUE_WheelsType.value();
    }

    @JsonIgnore
    @Override
    public java.lang.String vehicleType() {
        return Utils.discriminatorToString(vehicleType);
    }

    @JsonIgnore
    @Override
    public java.lang.String wheelsType() {
        return Utils.discriminatorToString(wheelsType);
    }

    public final static Builder builder() {
        return new Builder();
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Car other = (Car) o;
        return 
            java.util.Objects.deepEquals(this.vehicleType, other.vehicleType) &&
            java.util.Objects.deepEquals(this.wheelsType, other.wheelsType);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            vehicleType,
            wheelsType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Car.class,
                "vehicleType", vehicleType,
                "wheelsType", wheelsType);
    }
    
    public final static class Builder {  
        
        private Builder() {
          // force use of static builder() method
        }
        
        public Car build() {
            return new Car(
                );
        }

        private static final LazySingletonValue<String> _SINGLETON_VALUE_VehicleType =
                new LazySingletonValue<>(
                        "vehicleType",
                        "\"car\"",
                        new TypeReference<String>() {});

        private static final LazySingletonValue<String> _SINGLETON_VALUE_WheelsType =
                new LazySingletonValue<>(
                        "wheelsType",
                        "\"four\"",
                        new TypeReference<String>() {});
    }
}

