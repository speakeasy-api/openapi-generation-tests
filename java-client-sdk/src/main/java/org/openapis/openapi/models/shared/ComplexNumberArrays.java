/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class ComplexNumberArrays {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bigintArray")
    private Optional<? extends List<BigInteger>> bigintArray;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bigintStrArray")
    private Optional<? extends List<BigInteger>> bigintStrArray;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("decimalArray")
    private Optional<? extends List<BigDecimal>> decimalArray;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("decimalStrArray")
    private Optional<? extends List<BigDecimal>> decimalStrArray;

    @JsonCreator
    public ComplexNumberArrays(
            @JsonProperty("bigintArray") Optional<? extends List<BigInteger>> bigintArray,
            @JsonProperty("bigintStrArray") Optional<? extends List<BigInteger>> bigintStrArray,
            @JsonProperty("decimalArray") Optional<? extends List<BigDecimal>> decimalArray,
            @JsonProperty("decimalStrArray") Optional<? extends List<BigDecimal>> decimalStrArray) {
        Utils.checkNotNull(bigintArray, "bigintArray");
        Utils.checkNotNull(bigintStrArray, "bigintStrArray");
        Utils.checkNotNull(decimalArray, "decimalArray");
        Utils.checkNotNull(decimalStrArray, "decimalStrArray");
        this.bigintArray = bigintArray;
        this.bigintStrArray = bigintStrArray;
        this.decimalArray = decimalArray;
        this.decimalStrArray = decimalStrArray;
    }
    
    public ComplexNumberArrays() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<BigInteger>> bigintArray() {
        return (Optional<List<BigInteger>>) bigintArray;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<BigInteger>> bigintStrArray() {
        return (Optional<List<BigInteger>>) bigintStrArray;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<BigDecimal>> decimalArray() {
        return (Optional<List<BigDecimal>>) decimalArray;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<BigDecimal>> decimalStrArray() {
        return (Optional<List<BigDecimal>>) decimalStrArray;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ComplexNumberArrays withBigintArray(List<BigInteger> bigintArray) {
        Utils.checkNotNull(bigintArray, "bigintArray");
        this.bigintArray = Optional.ofNullable(bigintArray);
        return this;
    }

    public ComplexNumberArrays withBigintArray(Optional<? extends List<BigInteger>> bigintArray) {
        Utils.checkNotNull(bigintArray, "bigintArray");
        this.bigintArray = bigintArray;
        return this;
    }

    public ComplexNumberArrays withBigintStrArray(List<BigInteger> bigintStrArray) {
        Utils.checkNotNull(bigintStrArray, "bigintStrArray");
        this.bigintStrArray = Optional.ofNullable(bigintStrArray);
        return this;
    }

    public ComplexNumberArrays withBigintStrArray(Optional<? extends List<BigInteger>> bigintStrArray) {
        Utils.checkNotNull(bigintStrArray, "bigintStrArray");
        this.bigintStrArray = bigintStrArray;
        return this;
    }

    public ComplexNumberArrays withDecimalArray(List<BigDecimal> decimalArray) {
        Utils.checkNotNull(decimalArray, "decimalArray");
        this.decimalArray = Optional.ofNullable(decimalArray);
        return this;
    }

    public ComplexNumberArrays withDecimalArray(Optional<? extends List<BigDecimal>> decimalArray) {
        Utils.checkNotNull(decimalArray, "decimalArray");
        this.decimalArray = decimalArray;
        return this;
    }

    public ComplexNumberArrays withDecimalStrArray(List<BigDecimal> decimalStrArray) {
        Utils.checkNotNull(decimalStrArray, "decimalStrArray");
        this.decimalStrArray = Optional.ofNullable(decimalStrArray);
        return this;
    }

    public ComplexNumberArrays withDecimalStrArray(Optional<? extends List<BigDecimal>> decimalStrArray) {
        Utils.checkNotNull(decimalStrArray, "decimalStrArray");
        this.decimalStrArray = decimalStrArray;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ComplexNumberArrays other = (ComplexNumberArrays) o;
        return 
            Objects.deepEquals(this.bigintArray, other.bigintArray) &&
            Objects.deepEquals(this.bigintStrArray, other.bigintStrArray) &&
            Objects.deepEquals(this.decimalArray, other.decimalArray) &&
            Objects.deepEquals(this.decimalStrArray, other.decimalStrArray);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            bigintArray,
            bigintStrArray,
            decimalArray,
            decimalStrArray);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ComplexNumberArrays.class,
                "bigintArray", bigintArray,
                "bigintStrArray", bigintStrArray,
                "decimalArray", decimalArray,
                "decimalStrArray", decimalStrArray);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<BigInteger>> bigintArray = Optional.empty();
 
        private Optional<? extends List<BigInteger>> bigintStrArray = Optional.empty();
 
        private Optional<? extends List<BigDecimal>> decimalArray = Optional.empty();
 
        private Optional<? extends List<BigDecimal>> decimalStrArray = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder bigintArray(List<BigInteger> bigintArray) {
            Utils.checkNotNull(bigintArray, "bigintArray");
            this.bigintArray = Optional.ofNullable(bigintArray);
            return this;
        }

        public Builder bigintArray(Optional<? extends List<BigInteger>> bigintArray) {
            Utils.checkNotNull(bigintArray, "bigintArray");
            this.bigintArray = bigintArray;
            return this;
        }

        public Builder bigintStrArray(List<BigInteger> bigintStrArray) {
            Utils.checkNotNull(bigintStrArray, "bigintStrArray");
            this.bigintStrArray = Optional.ofNullable(bigintStrArray);
            return this;
        }

        public Builder bigintStrArray(Optional<? extends List<BigInteger>> bigintStrArray) {
            Utils.checkNotNull(bigintStrArray, "bigintStrArray");
            this.bigintStrArray = bigintStrArray;
            return this;
        }

        public Builder decimalArray(List<BigDecimal> decimalArray) {
            Utils.checkNotNull(decimalArray, "decimalArray");
            this.decimalArray = Optional.ofNullable(decimalArray);
            return this;
        }

        public Builder decimalArray(Optional<? extends List<BigDecimal>> decimalArray) {
            Utils.checkNotNull(decimalArray, "decimalArray");
            this.decimalArray = decimalArray;
            return this;
        }

        public Builder decimalStrArray(List<BigDecimal> decimalStrArray) {
            Utils.checkNotNull(decimalStrArray, "decimalStrArray");
            this.decimalStrArray = Optional.ofNullable(decimalStrArray);
            return this;
        }

        public Builder decimalStrArray(Optional<? extends List<BigDecimal>> decimalStrArray) {
            Utils.checkNotNull(decimalStrArray, "decimalStrArray");
            this.decimalStrArray = decimalStrArray;
            return this;
        }
        
        public ComplexNumberArrays build() {
            return new ComplexNumberArrays(
                bigintArray,
                bigintStrArray,
                decimalArray,
                decimalStrArray);
        }
    }
}

