/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class ComplexNumberMaps {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bigintMap")
    private Optional<? extends java.util.Map<String, BigInteger>> bigintMap;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bigintStrMap")
    private Optional<? extends java.util.Map<String, BigInteger>> bigintStrMap;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("decimalMap")
    private Optional<? extends java.util.Map<String, BigDecimal>> decimalMap;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("decimalStrMap")
    private Optional<? extends java.util.Map<String, BigDecimal>> decimalStrMap;

    public ComplexNumberMaps(
            @JsonProperty("bigintMap") Optional<? extends java.util.Map<String, BigInteger>> bigintMap,
            @JsonProperty("bigintStrMap") Optional<? extends java.util.Map<String, BigInteger>> bigintStrMap,
            @JsonProperty("decimalMap") Optional<? extends java.util.Map<String, BigDecimal>> decimalMap,
            @JsonProperty("decimalStrMap") Optional<? extends java.util.Map<String, BigDecimal>> decimalStrMap) {
        Utils.checkNotNull(bigintMap, "bigintMap");
        Utils.checkNotNull(bigintStrMap, "bigintStrMap");
        Utils.checkNotNull(decimalMap, "decimalMap");
        Utils.checkNotNull(decimalStrMap, "decimalStrMap");
        this.bigintMap = bigintMap;
        this.bigintStrMap = bigintStrMap;
        this.decimalMap = decimalMap;
        this.decimalStrMap = decimalStrMap;
    }

    public Optional<? extends java.util.Map<String, BigInteger>> bigintMap() {
        return bigintMap;
    }

    public Optional<? extends java.util.Map<String, BigInteger>> bigintStrMap() {
        return bigintStrMap;
    }

    public Optional<? extends java.util.Map<String, BigDecimal>> decimalMap() {
        return decimalMap;
    }

    public Optional<? extends java.util.Map<String, BigDecimal>> decimalStrMap() {
        return decimalStrMap;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ComplexNumberMaps withBigintMap(java.util.Map<String, BigInteger> bigintMap) {
        Utils.checkNotNull(bigintMap, "bigintMap");
        this.bigintMap = Optional.ofNullable(bigintMap);
        return this;
    }

    public ComplexNumberMaps withBigintMap(Optional<? extends java.util.Map<String, BigInteger>> bigintMap) {
        Utils.checkNotNull(bigintMap, "bigintMap");
        this.bigintMap = bigintMap;
        return this;
    }

    public ComplexNumberMaps withBigintStrMap(java.util.Map<String, BigInteger> bigintStrMap) {
        Utils.checkNotNull(bigintStrMap, "bigintStrMap");
        this.bigintStrMap = Optional.ofNullable(bigintStrMap);
        return this;
    }

    public ComplexNumberMaps withBigintStrMap(Optional<? extends java.util.Map<String, BigInteger>> bigintStrMap) {
        Utils.checkNotNull(bigintStrMap, "bigintStrMap");
        this.bigintStrMap = bigintStrMap;
        return this;
    }

    public ComplexNumberMaps withDecimalMap(java.util.Map<String, BigDecimal> decimalMap) {
        Utils.checkNotNull(decimalMap, "decimalMap");
        this.decimalMap = Optional.ofNullable(decimalMap);
        return this;
    }

    public ComplexNumberMaps withDecimalMap(Optional<? extends java.util.Map<String, BigDecimal>> decimalMap) {
        Utils.checkNotNull(decimalMap, "decimalMap");
        this.decimalMap = decimalMap;
        return this;
    }

    public ComplexNumberMaps withDecimalStrMap(java.util.Map<String, BigDecimal> decimalStrMap) {
        Utils.checkNotNull(decimalStrMap, "decimalStrMap");
        this.decimalStrMap = Optional.ofNullable(decimalStrMap);
        return this;
    }

    public ComplexNumberMaps withDecimalStrMap(Optional<? extends java.util.Map<String, BigDecimal>> decimalStrMap) {
        Utils.checkNotNull(decimalStrMap, "decimalStrMap");
        this.decimalStrMap = decimalStrMap;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ComplexNumberMaps other = (ComplexNumberMaps) o;
        return 
            java.util.Objects.deepEquals(this.bigintMap, other.bigintMap) &&
            java.util.Objects.deepEquals(this.bigintStrMap, other.bigintStrMap) &&
            java.util.Objects.deepEquals(this.decimalMap, other.decimalMap) &&
            java.util.Objects.deepEquals(this.decimalStrMap, other.decimalStrMap);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            bigintMap,
            bigintStrMap,
            decimalMap,
            decimalStrMap);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ComplexNumberMaps.class,
                "bigintMap", bigintMap,
                "bigintStrMap", bigintStrMap,
                "decimalMap", decimalMap,
                "decimalStrMap", decimalStrMap);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.Map<String, BigInteger>> bigintMap = Optional.empty();
 
        private Optional<? extends java.util.Map<String, BigInteger>> bigintStrMap = Optional.empty();
 
        private Optional<? extends java.util.Map<String, BigDecimal>> decimalMap = Optional.empty();
 
        private Optional<? extends java.util.Map<String, BigDecimal>> decimalStrMap = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder bigintMap(java.util.Map<String, BigInteger> bigintMap) {
            Utils.checkNotNull(bigintMap, "bigintMap");
            this.bigintMap = Optional.ofNullable(bigintMap);
            return this;
        }

        public Builder bigintMap(Optional<? extends java.util.Map<String, BigInteger>> bigintMap) {
            Utils.checkNotNull(bigintMap, "bigintMap");
            this.bigintMap = bigintMap;
            return this;
        }

        public Builder bigintStrMap(java.util.Map<String, BigInteger> bigintStrMap) {
            Utils.checkNotNull(bigintStrMap, "bigintStrMap");
            this.bigintStrMap = Optional.ofNullable(bigintStrMap);
            return this;
        }

        public Builder bigintStrMap(Optional<? extends java.util.Map<String, BigInteger>> bigintStrMap) {
            Utils.checkNotNull(bigintStrMap, "bigintStrMap");
            this.bigintStrMap = bigintStrMap;
            return this;
        }

        public Builder decimalMap(java.util.Map<String, BigDecimal> decimalMap) {
            Utils.checkNotNull(decimalMap, "decimalMap");
            this.decimalMap = Optional.ofNullable(decimalMap);
            return this;
        }

        public Builder decimalMap(Optional<? extends java.util.Map<String, BigDecimal>> decimalMap) {
            Utils.checkNotNull(decimalMap, "decimalMap");
            this.decimalMap = decimalMap;
            return this;
        }

        public Builder decimalStrMap(java.util.Map<String, BigDecimal> decimalStrMap) {
            Utils.checkNotNull(decimalStrMap, "decimalStrMap");
            this.decimalStrMap = Optional.ofNullable(decimalStrMap);
            return this;
        }

        public Builder decimalStrMap(Optional<? extends java.util.Map<String, BigDecimal>> decimalStrMap) {
            Utils.checkNotNull(decimalStrMap, "decimalStrMap");
            this.decimalStrMap = decimalStrMap;
            return this;
        }
        
        public ComplexNumberMaps build() {
            return new ComplexNumberMaps(
                bigintMap,
                bigintStrMap,
                decimalMap,
                decimalStrMap);
        }
    }
}

