/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.Utils;


public class ComplexNumberTypes {

    @JsonProperty("bigint")
    private BigInteger bigint;

    @JsonProperty("bigintStr")
    @JsonFormat(shape = JsonFormat.Shape.STRING)
    private BigInteger bigintStr;

    @JsonProperty("decimal")
    private BigDecimal decimal;

    @JsonProperty("decimalStr")
    @JsonFormat(shape = JsonFormat.Shape.STRING)
    private BigDecimal decimalStr;

    @JsonCreator
    public ComplexNumberTypes(
            @JsonProperty("bigint") BigInteger bigint,
            @JsonProperty("bigintStr") BigInteger bigintStr,
            @JsonProperty("decimal") BigDecimal decimal,
            @JsonProperty("decimalStr") BigDecimal decimalStr) {
        Utils.checkNotNull(bigint, "bigint");
        Utils.checkNotNull(bigintStr, "bigintStr");
        Utils.checkNotNull(decimal, "decimal");
        Utils.checkNotNull(decimalStr, "decimalStr");
        this.bigint = bigint;
        this.bigintStr = bigintStr;
        this.decimal = decimal;
        this.decimalStr = decimalStr;
    }

    @JsonIgnore
    public BigInteger bigint() {
        return bigint;
    }

    @JsonIgnore
    public BigInteger bigintStr() {
        return bigintStr;
    }

    @JsonIgnore
    public BigDecimal decimal() {
        return decimal;
    }

    @JsonIgnore
    public BigDecimal decimalStr() {
        return decimalStr;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ComplexNumberTypes withBigint(long bigint) {
        this.bigint = BigInteger.valueOf(bigint);
        return this;
    }

    public ComplexNumberTypes withBigint(BigInteger bigint) {
        Utils.checkNotNull(bigint, "bigint");
        this.bigint = bigint;
        return this;
    }

    public ComplexNumberTypes withBigintStr(long bigintStr) {
        this.bigintStr = BigInteger.valueOf(bigintStr);
        return this;
    }

    public ComplexNumberTypes withBigintStr(BigInteger bigintStr) {
        Utils.checkNotNull(bigintStr, "bigintStr");
        this.bigintStr = bigintStr;
        return this;
    }

    public ComplexNumberTypes withDecimal(double decimal) {
        this.decimal = BigDecimal.valueOf(decimal);
        return this;
    }

    public ComplexNumberTypes withDecimal(BigDecimal decimal) {
        Utils.checkNotNull(decimal, "decimal");
        this.decimal = decimal;
        return this;
    }

    public ComplexNumberTypes withDecimalStr(double decimalStr) {
        this.decimalStr = BigDecimal.valueOf(decimalStr);
        return this;
    }

    public ComplexNumberTypes withDecimalStr(BigDecimal decimalStr) {
        Utils.checkNotNull(decimalStr, "decimalStr");
        this.decimalStr = decimalStr;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ComplexNumberTypes other = (ComplexNumberTypes) o;
        return 
            java.util.Objects.deepEquals(this.bigint, other.bigint) &&
            java.util.Objects.deepEquals(this.bigintStr, other.bigintStr) &&
            java.util.Objects.deepEquals(this.decimal, other.decimal) &&
            java.util.Objects.deepEquals(this.decimalStr, other.decimalStr);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            bigint,
            bigintStr,
            decimal,
            decimalStr);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ComplexNumberTypes.class,
                "bigint", bigint,
                "bigintStr", bigintStr,
                "decimal", decimal,
                "decimalStr", decimalStr);
    }
    
    public final static class Builder {
 
        private BigInteger bigint;
 
        private BigInteger bigintStr;
 
        private BigDecimal decimal;
 
        private BigDecimal decimalStr;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder bigint(long bigint) {
            this.bigint = BigInteger.valueOf(bigint);
            return this;
        }

        public Builder bigint(BigInteger bigint) {
            Utils.checkNotNull(bigint, "bigint");
            this.bigint = bigint;
            return this;
        }

        public Builder bigintStr(long bigintStr) {
            this.bigintStr = BigInteger.valueOf(bigintStr);
            return this;
        }

        public Builder bigintStr(BigInteger bigintStr) {
            Utils.checkNotNull(bigintStr, "bigintStr");
            this.bigintStr = bigintStr;
            return this;
        }

        public Builder decimal(double decimal) {
            this.decimal = BigDecimal.valueOf(decimal);
            return this;
        }

        public Builder decimal(BigDecimal decimal) {
            Utils.checkNotNull(decimal, "decimal");
            this.decimal = decimal;
            return this;
        }

        public Builder decimalStr(double decimalStr) {
            this.decimalStr = BigDecimal.valueOf(decimalStr);
            return this;
        }

        public Builder decimalStr(BigDecimal decimalStr) {
            Utils.checkNotNull(decimalStr, "decimalStr");
            this.decimalStr = decimalStr;
            return this;
        }
        
        public ComplexNumberTypes build() {
            return new ComplexNumberTypes(
                bigint,
                bigintStr,
                decimal,
                decimalStr);
        }
    }
}

