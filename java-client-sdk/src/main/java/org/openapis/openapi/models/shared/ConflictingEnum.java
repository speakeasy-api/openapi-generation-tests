/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class ConflictingEnum {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object")
    private Optional<? extends Object> object;

    @JsonCreator
    public ConflictingEnum(
            @JsonProperty("object") Optional<? extends Object> object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
    }
    
    public ConflictingEnum() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Object> object() {
        return (Optional<Object>) object;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ConflictingEnum withObject(Object object) {
        Utils.checkNotNull(object, "object");
        this.object = Optional.ofNullable(object);
        return this;
    }

    public ConflictingEnum withObject(Optional<? extends Object> object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConflictingEnum other = (ConflictingEnum) o;
        return 
            Objects.deepEquals(this.object, other.object);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            object);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConflictingEnum.class,
                "object", object);
    }
    
    public final static class Builder {
 
        private Optional<? extends Object> object = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder object(Object object) {
            Utils.checkNotNull(object, "object");
            this.object = Optional.ofNullable(object);
            return this;
        }

        public Builder object(Optional<? extends Object> object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }
        
        public ConflictingEnum build() {
            return new ConflictingEnum(
                object);
        }
    }
}

