/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.Utils;

public class ConstObject1 implements ConstDiscriminatedOneOf {

    @JsonProperty("imageURL")
    private String imageURL;

    @JsonProperty("tag")
    private String tag;

    @JsonCreator
    public ConstObject1(
            @JsonProperty("imageURL") String imageURL) {
        Utils.checkNotNull(imageURL, "imageURL");
        this.imageURL = imageURL;
        this.tag = Builder._SINGLETON_VALUE_Tag.value();
    }

    @JsonIgnore
    public String imageURL() {
        return imageURL;
    }

    @JsonIgnore
    @Override
    public java.lang.String tag() {
        return Utils.discriminatorToString(tag);
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ConstObject1 withImageURL(String imageURL) {
        Utils.checkNotNull(imageURL, "imageURL");
        this.imageURL = imageURL;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConstObject1 other = (ConstObject1) o;
        return 
            java.util.Objects.deepEquals(this.imageURL, other.imageURL) &&
            java.util.Objects.deepEquals(this.tag, other.tag);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            imageURL,
            tag);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConstObject1.class,
                "imageURL", imageURL,
                "tag", tag);
    }
    
    public final static class Builder {
 
        private String imageURL;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder imageURL(String imageURL) {
            Utils.checkNotNull(imageURL, "imageURL");
            this.imageURL = imageURL;
            return this;
        }
        
        public ConstObject1 build() {
            return new ConstObject1(
                imageURL);
        }

        private static final LazySingletonValue<String> _SINGLETON_VALUE_Tag =
                new LazySingletonValue<>(
                        "tag",
                        "\"tag1\"",
                        new TypeReference<String>() {});
    }
}

