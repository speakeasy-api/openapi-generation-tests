/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class DeepObjectCamelCase {

    @JsonProperty("any_val")
    private AnyVal anyVal;

    @JsonProperty("arr_val")
    private List<SimpleObjectCamelCase> arrVal;

    @JsonProperty("bool_val")
    private boolean boolVal;

    @JsonProperty("int_val")
    private long intVal;

    @JsonProperty("map_val")
    private Map<String, SimpleObjectCamelCase> mapVal;

    @JsonProperty("num_val")
    private double numVal;

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     * https://speakeasy.com/docs - A link to the external docs.
     */
    @JsonProperty("obj_val")
    private SimpleObjectCamelCase objVal;

    @JsonProperty("str_val")
    private String strVal;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    @JsonCreator
    public DeepObjectCamelCase(
            @JsonProperty("any_val") AnyVal anyVal,
            @JsonProperty("arr_val") List<SimpleObjectCamelCase> arrVal,
            @JsonProperty("bool_val") boolean boolVal,
            @JsonProperty("int_val") long intVal,
            @JsonProperty("map_val") Map<String, SimpleObjectCamelCase> mapVal,
            @JsonProperty("num_val") double numVal,
            @JsonProperty("obj_val") SimpleObjectCamelCase objVal,
            @JsonProperty("str_val") String strVal,
            @JsonProperty("type") Optional<String> type) {
        Utils.checkNotNull(anyVal, "anyVal");
        Utils.checkNotNull(arrVal, "arrVal");
        Utils.checkNotNull(boolVal, "boolVal");
        Utils.checkNotNull(intVal, "intVal");
        mapVal = Utils.emptyMapIfNull(mapVal);
        Utils.checkNotNull(numVal, "numVal");
        Utils.checkNotNull(objVal, "objVal");
        Utils.checkNotNull(strVal, "strVal");
        Utils.checkNotNull(type, "type");
        this.anyVal = anyVal;
        this.arrVal = arrVal;
        this.boolVal = boolVal;
        this.intVal = intVal;
        this.mapVal = mapVal;
        this.numVal = numVal;
        this.objVal = objVal;
        this.strVal = strVal;
        this.type = type;
    }
    
    public DeepObjectCamelCase(
            AnyVal anyVal,
            List<SimpleObjectCamelCase> arrVal,
            boolean boolVal,
            long intVal,
            Map<String, SimpleObjectCamelCase> mapVal,
            double numVal,
            SimpleObjectCamelCase objVal,
            String strVal) {
        this(anyVal, arrVal, boolVal, intVal, mapVal, numVal, objVal, strVal, Optional.empty());
    }

    @JsonIgnore
    public AnyVal anyVal() {
        return anyVal;
    }

    @JsonIgnore
    public List<SimpleObjectCamelCase> arrVal() {
        return arrVal;
    }

    @JsonIgnore
    public boolean boolVal() {
        return boolVal;
    }

    @JsonIgnore
    public long intVal() {
        return intVal;
    }

    @JsonIgnore
    public Map<String, SimpleObjectCamelCase> mapVal() {
        return mapVal;
    }

    @JsonIgnore
    public double numVal() {
        return numVal;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     * https://speakeasy.com/docs - A link to the external docs.
     */
    @JsonIgnore
    public SimpleObjectCamelCase objVal() {
        return objVal;
    }

    @JsonIgnore
    public String strVal() {
        return strVal;
    }

    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public DeepObjectCamelCase withAnyVal(AnyVal anyVal) {
        Utils.checkNotNull(anyVal, "anyVal");
        this.anyVal = anyVal;
        return this;
    }

    public DeepObjectCamelCase withArrVal(List<SimpleObjectCamelCase> arrVal) {
        Utils.checkNotNull(arrVal, "arrVal");
        this.arrVal = arrVal;
        return this;
    }

    public DeepObjectCamelCase withBoolVal(boolean boolVal) {
        Utils.checkNotNull(boolVal, "boolVal");
        this.boolVal = boolVal;
        return this;
    }

    public DeepObjectCamelCase withIntVal(long intVal) {
        Utils.checkNotNull(intVal, "intVal");
        this.intVal = intVal;
        return this;
    }

    public DeepObjectCamelCase withMapVal(Map<String, SimpleObjectCamelCase> mapVal) {
        Utils.checkNotNull(mapVal, "mapVal");
        this.mapVal = mapVal;
        return this;
    }

    public DeepObjectCamelCase withNumVal(double numVal) {
        Utils.checkNotNull(numVal, "numVal");
        this.numVal = numVal;
        return this;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     * https://speakeasy.com/docs - A link to the external docs.
     */
    public DeepObjectCamelCase withObjVal(SimpleObjectCamelCase objVal) {
        Utils.checkNotNull(objVal, "objVal");
        this.objVal = objVal;
        return this;
    }

    public DeepObjectCamelCase withStrVal(String strVal) {
        Utils.checkNotNull(strVal, "strVal");
        this.strVal = strVal;
        return this;
    }

    public DeepObjectCamelCase withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public DeepObjectCamelCase withType(Optional<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeepObjectCamelCase other = (DeepObjectCamelCase) o;
        return 
            Objects.deepEquals(this.anyVal, other.anyVal) &&
            Objects.deepEquals(this.arrVal, other.arrVal) &&
            Objects.deepEquals(this.boolVal, other.boolVal) &&
            Objects.deepEquals(this.intVal, other.intVal) &&
            Objects.deepEquals(this.mapVal, other.mapVal) &&
            Objects.deepEquals(this.numVal, other.numVal) &&
            Objects.deepEquals(this.objVal, other.objVal) &&
            Objects.deepEquals(this.strVal, other.strVal) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            anyVal,
            arrVal,
            boolVal,
            intVal,
            mapVal,
            numVal,
            objVal,
            strVal,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DeepObjectCamelCase.class,
                "anyVal", anyVal,
                "arrVal", arrVal,
                "boolVal", boolVal,
                "intVal", intVal,
                "mapVal", mapVal,
                "numVal", numVal,
                "objVal", objVal,
                "strVal", strVal,
                "type", type);
    }
    
    public final static class Builder {
 
        private AnyVal anyVal;
 
        private List<SimpleObjectCamelCase> arrVal;
 
        private Boolean boolVal;
 
        private Long intVal;
 
        private Map<String, SimpleObjectCamelCase> mapVal;
 
        private Double numVal;
 
        private SimpleObjectCamelCase objVal;
 
        private String strVal;
 
        private Optional<String> type = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder anyVal(AnyVal anyVal) {
            Utils.checkNotNull(anyVal, "anyVal");
            this.anyVal = anyVal;
            return this;
        }

        public Builder arrVal(List<SimpleObjectCamelCase> arrVal) {
            Utils.checkNotNull(arrVal, "arrVal");
            this.arrVal = arrVal;
            return this;
        }

        public Builder boolVal(boolean boolVal) {
            Utils.checkNotNull(boolVal, "boolVal");
            this.boolVal = boolVal;
            return this;
        }

        public Builder intVal(long intVal) {
            Utils.checkNotNull(intVal, "intVal");
            this.intVal = intVal;
            return this;
        }

        public Builder mapVal(Map<String, SimpleObjectCamelCase> mapVal) {
            Utils.checkNotNull(mapVal, "mapVal");
            this.mapVal = mapVal;
            return this;
        }

        public Builder numVal(double numVal) {
            Utils.checkNotNull(numVal, "numVal");
            this.numVal = numVal;
            return this;
        }

        /**
         * A simple object that uses all our supported primitive types and enums and has optional properties.
         * https://speakeasy.com/docs - A link to the external docs.
         */
        public Builder objVal(SimpleObjectCamelCase objVal) {
            Utils.checkNotNull(objVal, "objVal");
            this.objVal = objVal;
            return this;
        }

        public Builder strVal(String strVal) {
            Utils.checkNotNull(strVal, "strVal");
            this.strVal = strVal;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public DeepObjectCamelCase build() {
            return new DeepObjectCamelCase(
                anyVal,
                arrVal,
                boolVal,
                intVal,
                mapVal,
                numVal,
                objVal,
                strVal,
                type);
        }
    }
}

