/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class DeepObjectSmaller {

    @JsonProperty("any")
    private DeepObjectSmallerAny any;

    @JsonProperty("arr")
    private List<SimpleObject> arr;

    @JsonProperty("bool")
    private boolean bool;

    @JsonProperty("int")
    private long int_;

    @JsonProperty("map")
    private Map<String, SimpleObject> map;

    @JsonProperty("num")
    private double num;

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     * https://speakeasy.com/docs - A link to the external docs.
     */
    @JsonProperty("obj")
    private SimpleObject obj;

    @JsonProperty("str")
    private String str;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    @JsonCreator
    public DeepObjectSmaller(
            @JsonProperty("any") DeepObjectSmallerAny any,
            @JsonProperty("arr") List<SimpleObject> arr,
            @JsonProperty("bool") boolean bool,
            @JsonProperty("int") long int_,
            @JsonProperty("map") Map<String, SimpleObject> map,
            @JsonProperty("num") double num,
            @JsonProperty("obj") SimpleObject obj,
            @JsonProperty("str") String str,
            @JsonProperty("type") Optional<String> type) {
        Utils.checkNotNull(any, "any");
        Utils.checkNotNull(arr, "arr");
        Utils.checkNotNull(bool, "bool");
        Utils.checkNotNull(int_, "int_");
        map = Utils.emptyMapIfNull(map);
        Utils.checkNotNull(num, "num");
        Utils.checkNotNull(obj, "obj");
        Utils.checkNotNull(str, "str");
        Utils.checkNotNull(type, "type");
        this.any = any;
        this.arr = arr;
        this.bool = bool;
        this.int_ = int_;
        this.map = map;
        this.num = num;
        this.obj = obj;
        this.str = str;
        this.type = type;
    }
    
    public DeepObjectSmaller(
            DeepObjectSmallerAny any,
            List<SimpleObject> arr,
            boolean bool,
            long int_,
            Map<String, SimpleObject> map,
            double num,
            SimpleObject obj,
            String str) {
        this(any, arr, bool, int_, map, num, obj, str, Optional.empty());
    }

    @JsonIgnore
    public DeepObjectSmallerAny any() {
        return any;
    }

    @JsonIgnore
    public List<SimpleObject> arr() {
        return arr;
    }

    @JsonIgnore
    public boolean bool() {
        return bool;
    }

    @JsonIgnore
    public long int_() {
        return int_;
    }

    @JsonIgnore
    public Map<String, SimpleObject> map() {
        return map;
    }

    @JsonIgnore
    public double num() {
        return num;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     * https://speakeasy.com/docs - A link to the external docs.
     */
    @JsonIgnore
    public SimpleObject obj() {
        return obj;
    }

    @JsonIgnore
    public String str() {
        return str;
    }

    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public DeepObjectSmaller withAny(DeepObjectSmallerAny any) {
        Utils.checkNotNull(any, "any");
        this.any = any;
        return this;
    }

    public DeepObjectSmaller withArr(List<SimpleObject> arr) {
        Utils.checkNotNull(arr, "arr");
        this.arr = arr;
        return this;
    }

    public DeepObjectSmaller withBool(boolean bool) {
        Utils.checkNotNull(bool, "bool");
        this.bool = bool;
        return this;
    }

    public DeepObjectSmaller withInt(long int_) {
        Utils.checkNotNull(int_, "int_");
        this.int_ = int_;
        return this;
    }

    public DeepObjectSmaller withMap(Map<String, SimpleObject> map) {
        Utils.checkNotNull(map, "map");
        this.map = map;
        return this;
    }

    public DeepObjectSmaller withNum(double num) {
        Utils.checkNotNull(num, "num");
        this.num = num;
        return this;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     * https://speakeasy.com/docs - A link to the external docs.
     */
    public DeepObjectSmaller withObj(SimpleObject obj) {
        Utils.checkNotNull(obj, "obj");
        this.obj = obj;
        return this;
    }

    public DeepObjectSmaller withStr(String str) {
        Utils.checkNotNull(str, "str");
        this.str = str;
        return this;
    }

    public DeepObjectSmaller withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public DeepObjectSmaller withType(Optional<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeepObjectSmaller other = (DeepObjectSmaller) o;
        return 
            Objects.deepEquals(this.any, other.any) &&
            Objects.deepEquals(this.arr, other.arr) &&
            Objects.deepEquals(this.bool, other.bool) &&
            Objects.deepEquals(this.int_, other.int_) &&
            Objects.deepEquals(this.map, other.map) &&
            Objects.deepEquals(this.num, other.num) &&
            Objects.deepEquals(this.obj, other.obj) &&
            Objects.deepEquals(this.str, other.str) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            any,
            arr,
            bool,
            int_,
            map,
            num,
            obj,
            str,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DeepObjectSmaller.class,
                "any", any,
                "arr", arr,
                "bool", bool,
                "int_", int_,
                "map", map,
                "num", num,
                "obj", obj,
                "str", str,
                "type", type);
    }
    
    public final static class Builder {
 
        private DeepObjectSmallerAny any;
 
        private List<SimpleObject> arr;
 
        private Boolean bool;
 
        private Long int_;
 
        private Map<String, SimpleObject> map;
 
        private Double num;
 
        private SimpleObject obj;
 
        private String str;
 
        private Optional<String> type = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder any(DeepObjectSmallerAny any) {
            Utils.checkNotNull(any, "any");
            this.any = any;
            return this;
        }

        public Builder arr(List<SimpleObject> arr) {
            Utils.checkNotNull(arr, "arr");
            this.arr = arr;
            return this;
        }

        public Builder bool(boolean bool) {
            Utils.checkNotNull(bool, "bool");
            this.bool = bool;
            return this;
        }

        public Builder int_(long int_) {
            Utils.checkNotNull(int_, "int_");
            this.int_ = int_;
            return this;
        }

        public Builder map(Map<String, SimpleObject> map) {
            Utils.checkNotNull(map, "map");
            this.map = map;
            return this;
        }

        public Builder num(double num) {
            Utils.checkNotNull(num, "num");
            this.num = num;
            return this;
        }

        /**
         * A simple object that uses all our supported primitive types and enums and has optional properties.
         * https://speakeasy.com/docs - A link to the external docs.
         */
        public Builder obj(SimpleObject obj) {
            Utils.checkNotNull(obj, "obj");
            this.obj = obj;
            return this;
        }

        public Builder str(String str) {
            Utils.checkNotNull(str, "str");
            this.str = str;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public DeepObjectSmaller build() {
            return new DeepObjectSmaller(
                any,
                arr,
                bool,
                int_,
                map,
                num,
                obj,
                str,
                type);
        }
    }
}

