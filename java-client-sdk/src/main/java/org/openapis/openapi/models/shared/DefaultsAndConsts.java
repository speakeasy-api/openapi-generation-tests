/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.Utils;
import org.openapitools.jackson.nullable.JsonNullable;


public class DefaultsAndConsts {

    @JsonProperty("constBigInt")
    private BigInteger constBigInt;

    @JsonProperty("constBigIntStr")
    @JsonFormat(shape = JsonFormat.Shape.STRING)
    private BigInteger constBigIntStr;

    @JsonProperty("constBool")
    private boolean constBool;

    @JsonProperty("constDate")
    private LocalDate constDate;

    @JsonProperty("constDateTime")
    private OffsetDateTime constDateTime;

    @JsonProperty("constDecimal")
    private BigDecimal constDecimal;

    @JsonProperty("constDecimalStr")
    @JsonFormat(shape = JsonFormat.Shape.STRING)
    private BigDecimal constDecimalStr;

    @JsonProperty("constEnumInt")
    private ConstEnumInt constEnumInt;

    @JsonProperty("constEnumStr")
    private ConstEnumStr constEnumStr;

    @JsonProperty("constInt")
    private long constInt;

    @JsonProperty("constNum")
    private double constNum;

    @JsonProperty("constStr")
    private String constStr;

    @JsonProperty("constStrDQuotes")
    private String constStrDQuotes;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("constStrNull")
    private Optional<? extends String> constStrNull;

    @JsonProperty("constStrSQuotes")
    private String constStrSQuotes;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultBigInt")
    private Optional<? extends BigInteger> defaultBigInt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultBigIntStr")
    @JsonFormat(shape = JsonFormat.Shape.STRING)
    private Optional<? extends BigInteger> defaultBigIntStr;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultBool")
    private Optional<? extends Boolean> defaultBool;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultDate")
    private Optional<? extends LocalDate> defaultDate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultDateTime")
    private Optional<? extends OffsetDateTime> defaultDateTime;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultDecimal")
    private Optional<? extends BigDecimal> defaultDecimal;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultDecimalStr")
    @JsonFormat(shape = JsonFormat.Shape.STRING)
    private Optional<? extends BigDecimal> defaultDecimalStr;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultEnumInt")
    private Optional<? extends DefaultEnumInt> defaultEnumInt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultEnumStr")
    private Optional<? extends DefaultEnumStr> defaultEnumStr;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultInt")
    private Optional<? extends Long> defaultInt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultNum")
    private Optional<? extends Double> defaultNum;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultStr")
    private Optional<? extends String> defaultStr;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultStrDQuotes")
    private Optional<? extends String> defaultStrDQuotes;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultStrNullable")
    private JsonNullable<? extends String> defaultStrNullable;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultStrOptional")
    private Optional<? extends String> defaultStrOptional;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultStrSQuotes")
    private Optional<? extends String> defaultStrSQuotes;

    @JsonProperty("normalField")
    private String normalField;

    public DefaultsAndConsts(
            @JsonProperty("defaultBigInt") Optional<? extends BigInteger> defaultBigInt,
            @JsonProperty("defaultBigIntStr") Optional<? extends BigInteger> defaultBigIntStr,
            @JsonProperty("defaultBool") Optional<? extends Boolean> defaultBool,
            @JsonProperty("defaultDate") Optional<? extends LocalDate> defaultDate,
            @JsonProperty("defaultDateTime") Optional<? extends OffsetDateTime> defaultDateTime,
            @JsonProperty("defaultDecimal") Optional<? extends BigDecimal> defaultDecimal,
            @JsonProperty("defaultDecimalStr") Optional<? extends BigDecimal> defaultDecimalStr,
            @JsonProperty("defaultEnumInt") Optional<? extends DefaultEnumInt> defaultEnumInt,
            @JsonProperty("defaultEnumStr") Optional<? extends DefaultEnumStr> defaultEnumStr,
            @JsonProperty("defaultInt") Optional<? extends Long> defaultInt,
            @JsonProperty("defaultNum") Optional<? extends Double> defaultNum,
            @JsonProperty("defaultStr") Optional<? extends String> defaultStr,
            @JsonProperty("defaultStrDQuotes") Optional<? extends String> defaultStrDQuotes,
            @JsonProperty("defaultStrNullable") JsonNullable<? extends String> defaultStrNullable,
            @JsonProperty("defaultStrOptional") Optional<? extends String> defaultStrOptional,
            @JsonProperty("defaultStrSQuotes") Optional<? extends String> defaultStrSQuotes,
            @JsonProperty("normalField") String normalField) {
        Utils.checkNotNull(defaultBigInt, "defaultBigInt");
        Utils.checkNotNull(defaultBigIntStr, "defaultBigIntStr");
        Utils.checkNotNull(defaultBool, "defaultBool");
        Utils.checkNotNull(defaultDate, "defaultDate");
        Utils.checkNotNull(defaultDateTime, "defaultDateTime");
        Utils.checkNotNull(defaultDecimal, "defaultDecimal");
        Utils.checkNotNull(defaultDecimalStr, "defaultDecimalStr");
        Utils.checkNotNull(defaultEnumInt, "defaultEnumInt");
        Utils.checkNotNull(defaultEnumStr, "defaultEnumStr");
        Utils.checkNotNull(defaultInt, "defaultInt");
        Utils.checkNotNull(defaultNum, "defaultNum");
        Utils.checkNotNull(defaultStr, "defaultStr");
        Utils.checkNotNull(defaultStrDQuotes, "defaultStrDQuotes");
        Utils.checkNotNull(defaultStrNullable, "defaultStrNullable");
        Utils.checkNotNull(defaultStrOptional, "defaultStrOptional");
        Utils.checkNotNull(defaultStrSQuotes, "defaultStrSQuotes");
        Utils.checkNotNull(normalField, "normalField");
        this.constBigInt = Builder._SINGLETON_VALUE_ConstBigInt.value();
        this.constBigIntStr = Builder._SINGLETON_VALUE_ConstBigIntStr.value();
        this.constBool = Builder._SINGLETON_VALUE_ConstBool.value();
        this.constDate = Builder._SINGLETON_VALUE_ConstDate.value();
        this.constDateTime = Builder._SINGLETON_VALUE_ConstDateTime.value();
        this.constDecimal = Builder._SINGLETON_VALUE_ConstDecimal.value();
        this.constDecimalStr = Builder._SINGLETON_VALUE_ConstDecimalStr.value();
        this.constEnumInt = Builder._SINGLETON_VALUE_ConstEnumInt.value();
        this.constEnumStr = Builder._SINGLETON_VALUE_ConstEnumStr.value();
        this.constInt = Builder._SINGLETON_VALUE_ConstInt.value();
        this.constNum = Builder._SINGLETON_VALUE_ConstNum.value();
        this.constStr = Builder._SINGLETON_VALUE_ConstStr.value();
        this.constStrDQuotes = Builder._SINGLETON_VALUE_ConstStrDQuotes.value();
        this.constStrNull = Builder._SINGLETON_VALUE_ConstStrNull.value();
        this.constStrSQuotes = Builder._SINGLETON_VALUE_ConstStrSQuotes.value();
        this.defaultBigInt = defaultBigInt;
        this.defaultBigIntStr = defaultBigIntStr;
        this.defaultBool = defaultBool;
        this.defaultDate = defaultDate;
        this.defaultDateTime = defaultDateTime;
        this.defaultDecimal = defaultDecimal;
        this.defaultDecimalStr = defaultDecimalStr;
        this.defaultEnumInt = defaultEnumInt;
        this.defaultEnumStr = defaultEnumStr;
        this.defaultInt = defaultInt;
        this.defaultNum = defaultNum;
        this.defaultStr = defaultStr;
        this.defaultStrDQuotes = defaultStrDQuotes;
        this.defaultStrNullable = defaultStrNullable;
        this.defaultStrOptional = defaultStrOptional;
        this.defaultStrSQuotes = defaultStrSQuotes;
        this.normalField = normalField;
    }

    public BigInteger constBigInt() {
        return constBigInt;
    }

    public BigInteger constBigIntStr() {
        return constBigIntStr;
    }

    public boolean constBool() {
        return constBool;
    }

    public LocalDate constDate() {
        return constDate;
    }

    public OffsetDateTime constDateTime() {
        return constDateTime;
    }

    public BigDecimal constDecimal() {
        return constDecimal;
    }

    public BigDecimal constDecimalStr() {
        return constDecimalStr;
    }

    public ConstEnumInt constEnumInt() {
        return constEnumInt;
    }

    public ConstEnumStr constEnumStr() {
        return constEnumStr;
    }

    public long constInt() {
        return constInt;
    }

    public double constNum() {
        return constNum;
    }

    public String constStr() {
        return constStr;
    }

    public String constStrDQuotes() {
        return constStrDQuotes;
    }

    public Optional<? extends String> constStrNull() {
        return constStrNull;
    }

    public String constStrSQuotes() {
        return constStrSQuotes;
    }

    public Optional<? extends BigInteger> defaultBigInt() {
        return defaultBigInt;
    }

    public Optional<? extends BigInteger> defaultBigIntStr() {
        return defaultBigIntStr;
    }

    public Optional<? extends Boolean> defaultBool() {
        return defaultBool;
    }

    public Optional<? extends LocalDate> defaultDate() {
        return defaultDate;
    }

    public Optional<? extends OffsetDateTime> defaultDateTime() {
        return defaultDateTime;
    }

    public Optional<? extends BigDecimal> defaultDecimal() {
        return defaultDecimal;
    }

    public Optional<? extends BigDecimal> defaultDecimalStr() {
        return defaultDecimalStr;
    }

    public Optional<? extends DefaultEnumInt> defaultEnumInt() {
        return defaultEnumInt;
    }

    public Optional<? extends DefaultEnumStr> defaultEnumStr() {
        return defaultEnumStr;
    }

    public Optional<? extends Long> defaultInt() {
        return defaultInt;
    }

    public Optional<? extends Double> defaultNum() {
        return defaultNum;
    }

    public Optional<? extends String> defaultStr() {
        return defaultStr;
    }

    public Optional<? extends String> defaultStrDQuotes() {
        return defaultStrDQuotes;
    }

    public JsonNullable<? extends String> defaultStrNullable() {
        return defaultStrNullable;
    }

    public Optional<? extends String> defaultStrOptional() {
        return defaultStrOptional;
    }

    public Optional<? extends String> defaultStrSQuotes() {
        return defaultStrSQuotes;
    }

    public String normalField() {
        return normalField;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public DefaultsAndConsts withDefaultBigInt(BigInteger defaultBigInt) {
        Utils.checkNotNull(defaultBigInt, "defaultBigInt");
        this.defaultBigInt = Optional.ofNullable(defaultBigInt);
        return this;
    }

    public DefaultsAndConsts withDefaultBigInt(long defaultBigInt) {
        this.defaultBigInt = Optional.of(BigInteger.valueOf(defaultBigInt));
        return this;
    }

    public DefaultsAndConsts withDefaultBigInt(Optional<? extends BigInteger> defaultBigInt) {
        Utils.checkNotNull(defaultBigInt, "defaultBigInt");
        this.defaultBigInt = defaultBigInt;
        return this;
    }

    public DefaultsAndConsts withDefaultBigIntStr(BigInteger defaultBigIntStr) {
        Utils.checkNotNull(defaultBigIntStr, "defaultBigIntStr");
        this.defaultBigIntStr = Optional.ofNullable(defaultBigIntStr);
        return this;
    }

    public DefaultsAndConsts withDefaultBigIntStr(long defaultBigIntStr) {
        this.defaultBigIntStr = Optional.of(BigInteger.valueOf(defaultBigIntStr));
        return this;
    }

    public DefaultsAndConsts withDefaultBigIntStr(Optional<? extends BigInteger> defaultBigIntStr) {
        Utils.checkNotNull(defaultBigIntStr, "defaultBigIntStr");
        this.defaultBigIntStr = defaultBigIntStr;
        return this;
    }

    public DefaultsAndConsts withDefaultBool(boolean defaultBool) {
        Utils.checkNotNull(defaultBool, "defaultBool");
        this.defaultBool = Optional.ofNullable(defaultBool);
        return this;
    }

    public DefaultsAndConsts withDefaultBool(Optional<? extends Boolean> defaultBool) {
        Utils.checkNotNull(defaultBool, "defaultBool");
        this.defaultBool = defaultBool;
        return this;
    }

    public DefaultsAndConsts withDefaultDate(LocalDate defaultDate) {
        Utils.checkNotNull(defaultDate, "defaultDate");
        this.defaultDate = Optional.ofNullable(defaultDate);
        return this;
    }

    public DefaultsAndConsts withDefaultDate(Optional<? extends LocalDate> defaultDate) {
        Utils.checkNotNull(defaultDate, "defaultDate");
        this.defaultDate = defaultDate;
        return this;
    }

    public DefaultsAndConsts withDefaultDateTime(OffsetDateTime defaultDateTime) {
        Utils.checkNotNull(defaultDateTime, "defaultDateTime");
        this.defaultDateTime = Optional.ofNullable(defaultDateTime);
        return this;
    }

    public DefaultsAndConsts withDefaultDateTime(Optional<? extends OffsetDateTime> defaultDateTime) {
        Utils.checkNotNull(defaultDateTime, "defaultDateTime");
        this.defaultDateTime = defaultDateTime;
        return this;
    }

    public DefaultsAndConsts withDefaultDecimal(BigDecimal defaultDecimal) {
        Utils.checkNotNull(defaultDecimal, "defaultDecimal");
        this.defaultDecimal = Optional.ofNullable(defaultDecimal);
        return this;
    }

    public DefaultsAndConsts withDefaultDecimal(double defaultDecimal) {
        this.defaultDecimal = Optional.of(BigDecimal.valueOf(defaultDecimal));
        return this;
    }

    public DefaultsAndConsts withDefaultDecimal(Optional<? extends BigDecimal> defaultDecimal) {
        Utils.checkNotNull(defaultDecimal, "defaultDecimal");
        this.defaultDecimal = defaultDecimal;
        return this;
    }

    public DefaultsAndConsts withDefaultDecimalStr(BigDecimal defaultDecimalStr) {
        Utils.checkNotNull(defaultDecimalStr, "defaultDecimalStr");
        this.defaultDecimalStr = Optional.ofNullable(defaultDecimalStr);
        return this;
    }

    public DefaultsAndConsts withDefaultDecimalStr(double defaultDecimalStr) {
        this.defaultDecimalStr = Optional.of(BigDecimal.valueOf(defaultDecimalStr));
        return this;
    }

    public DefaultsAndConsts withDefaultDecimalStr(Optional<? extends BigDecimal> defaultDecimalStr) {
        Utils.checkNotNull(defaultDecimalStr, "defaultDecimalStr");
        this.defaultDecimalStr = defaultDecimalStr;
        return this;
    }

    public DefaultsAndConsts withDefaultEnumInt(DefaultEnumInt defaultEnumInt) {
        Utils.checkNotNull(defaultEnumInt, "defaultEnumInt");
        this.defaultEnumInt = Optional.ofNullable(defaultEnumInt);
        return this;
    }

    public DefaultsAndConsts withDefaultEnumInt(Optional<? extends DefaultEnumInt> defaultEnumInt) {
        Utils.checkNotNull(defaultEnumInt, "defaultEnumInt");
        this.defaultEnumInt = defaultEnumInt;
        return this;
    }

    public DefaultsAndConsts withDefaultEnumStr(DefaultEnumStr defaultEnumStr) {
        Utils.checkNotNull(defaultEnumStr, "defaultEnumStr");
        this.defaultEnumStr = Optional.ofNullable(defaultEnumStr);
        return this;
    }

    public DefaultsAndConsts withDefaultEnumStr(Optional<? extends DefaultEnumStr> defaultEnumStr) {
        Utils.checkNotNull(defaultEnumStr, "defaultEnumStr");
        this.defaultEnumStr = defaultEnumStr;
        return this;
    }

    public DefaultsAndConsts withDefaultInt(long defaultInt) {
        Utils.checkNotNull(defaultInt, "defaultInt");
        this.defaultInt = Optional.ofNullable(defaultInt);
        return this;
    }

    public DefaultsAndConsts withDefaultInt(Optional<? extends Long> defaultInt) {
        Utils.checkNotNull(defaultInt, "defaultInt");
        this.defaultInt = defaultInt;
        return this;
    }

    public DefaultsAndConsts withDefaultNum(double defaultNum) {
        Utils.checkNotNull(defaultNum, "defaultNum");
        this.defaultNum = Optional.ofNullable(defaultNum);
        return this;
    }

    public DefaultsAndConsts withDefaultNum(Optional<? extends Double> defaultNum) {
        Utils.checkNotNull(defaultNum, "defaultNum");
        this.defaultNum = defaultNum;
        return this;
    }

    public DefaultsAndConsts withDefaultStr(String defaultStr) {
        Utils.checkNotNull(defaultStr, "defaultStr");
        this.defaultStr = Optional.ofNullable(defaultStr);
        return this;
    }

    public DefaultsAndConsts withDefaultStr(Optional<? extends String> defaultStr) {
        Utils.checkNotNull(defaultStr, "defaultStr");
        this.defaultStr = defaultStr;
        return this;
    }

    public DefaultsAndConsts withDefaultStrDQuotes(String defaultStrDQuotes) {
        Utils.checkNotNull(defaultStrDQuotes, "defaultStrDQuotes");
        this.defaultStrDQuotes = Optional.ofNullable(defaultStrDQuotes);
        return this;
    }

    public DefaultsAndConsts withDefaultStrDQuotes(Optional<? extends String> defaultStrDQuotes) {
        Utils.checkNotNull(defaultStrDQuotes, "defaultStrDQuotes");
        this.defaultStrDQuotes = defaultStrDQuotes;
        return this;
    }

    public DefaultsAndConsts withDefaultStrNullable(String defaultStrNullable) {
        Utils.checkNotNull(defaultStrNullable, "defaultStrNullable");
        this.defaultStrNullable = JsonNullable.of(defaultStrNullable);
        return this;
    }

    public DefaultsAndConsts withDefaultStrNullable(JsonNullable<? extends String> defaultStrNullable) {
        Utils.checkNotNull(defaultStrNullable, "defaultStrNullable");
        this.defaultStrNullable = defaultStrNullable;
        return this;
    }

    public DefaultsAndConsts withDefaultStrOptional(String defaultStrOptional) {
        Utils.checkNotNull(defaultStrOptional, "defaultStrOptional");
        this.defaultStrOptional = Optional.ofNullable(defaultStrOptional);
        return this;
    }

    public DefaultsAndConsts withDefaultStrOptional(Optional<? extends String> defaultStrOptional) {
        Utils.checkNotNull(defaultStrOptional, "defaultStrOptional");
        this.defaultStrOptional = defaultStrOptional;
        return this;
    }

    public DefaultsAndConsts withDefaultStrSQuotes(String defaultStrSQuotes) {
        Utils.checkNotNull(defaultStrSQuotes, "defaultStrSQuotes");
        this.defaultStrSQuotes = Optional.ofNullable(defaultStrSQuotes);
        return this;
    }

    public DefaultsAndConsts withDefaultStrSQuotes(Optional<? extends String> defaultStrSQuotes) {
        Utils.checkNotNull(defaultStrSQuotes, "defaultStrSQuotes");
        this.defaultStrSQuotes = defaultStrSQuotes;
        return this;
    }

    public DefaultsAndConsts withNormalField(String normalField) {
        Utils.checkNotNull(normalField, "normalField");
        this.normalField = normalField;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DefaultsAndConsts other = (DefaultsAndConsts) o;
        return 
            java.util.Objects.deepEquals(this.constBigInt, other.constBigInt) &&
            java.util.Objects.deepEquals(this.constBigIntStr, other.constBigIntStr) &&
            java.util.Objects.deepEquals(this.constBool, other.constBool) &&
            java.util.Objects.deepEquals(this.constDate, other.constDate) &&
            java.util.Objects.deepEquals(this.constDateTime, other.constDateTime) &&
            java.util.Objects.deepEquals(this.constDecimal, other.constDecimal) &&
            java.util.Objects.deepEquals(this.constDecimalStr, other.constDecimalStr) &&
            java.util.Objects.deepEquals(this.constEnumInt, other.constEnumInt) &&
            java.util.Objects.deepEquals(this.constEnumStr, other.constEnumStr) &&
            java.util.Objects.deepEquals(this.constInt, other.constInt) &&
            java.util.Objects.deepEquals(this.constNum, other.constNum) &&
            java.util.Objects.deepEquals(this.constStr, other.constStr) &&
            java.util.Objects.deepEquals(this.constStrDQuotes, other.constStrDQuotes) &&
            java.util.Objects.deepEquals(this.constStrNull, other.constStrNull) &&
            java.util.Objects.deepEquals(this.constStrSQuotes, other.constStrSQuotes) &&
            java.util.Objects.deepEquals(this.defaultBigInt, other.defaultBigInt) &&
            java.util.Objects.deepEquals(this.defaultBigIntStr, other.defaultBigIntStr) &&
            java.util.Objects.deepEquals(this.defaultBool, other.defaultBool) &&
            java.util.Objects.deepEquals(this.defaultDate, other.defaultDate) &&
            java.util.Objects.deepEquals(this.defaultDateTime, other.defaultDateTime) &&
            java.util.Objects.deepEquals(this.defaultDecimal, other.defaultDecimal) &&
            java.util.Objects.deepEquals(this.defaultDecimalStr, other.defaultDecimalStr) &&
            java.util.Objects.deepEquals(this.defaultEnumInt, other.defaultEnumInt) &&
            java.util.Objects.deepEquals(this.defaultEnumStr, other.defaultEnumStr) &&
            java.util.Objects.deepEquals(this.defaultInt, other.defaultInt) &&
            java.util.Objects.deepEquals(this.defaultNum, other.defaultNum) &&
            java.util.Objects.deepEquals(this.defaultStr, other.defaultStr) &&
            java.util.Objects.deepEquals(this.defaultStrDQuotes, other.defaultStrDQuotes) &&
            java.util.Objects.deepEquals(this.defaultStrNullable, other.defaultStrNullable) &&
            java.util.Objects.deepEquals(this.defaultStrOptional, other.defaultStrOptional) &&
            java.util.Objects.deepEquals(this.defaultStrSQuotes, other.defaultStrSQuotes) &&
            java.util.Objects.deepEquals(this.normalField, other.normalField);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            constBigInt,
            constBigIntStr,
            constBool,
            constDate,
            constDateTime,
            constDecimal,
            constDecimalStr,
            constEnumInt,
            constEnumStr,
            constInt,
            constNum,
            constStr,
            constStrDQuotes,
            constStrNull,
            constStrSQuotes,
            defaultBigInt,
            defaultBigIntStr,
            defaultBool,
            defaultDate,
            defaultDateTime,
            defaultDecimal,
            defaultDecimalStr,
            defaultEnumInt,
            defaultEnumStr,
            defaultInt,
            defaultNum,
            defaultStr,
            defaultStrDQuotes,
            defaultStrNullable,
            defaultStrOptional,
            defaultStrSQuotes,
            normalField);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DefaultsAndConsts.class,
                "constBigInt", constBigInt,
                "constBigIntStr", constBigIntStr,
                "constBool", constBool,
                "constDate", constDate,
                "constDateTime", constDateTime,
                "constDecimal", constDecimal,
                "constDecimalStr", constDecimalStr,
                "constEnumInt", constEnumInt,
                "constEnumStr", constEnumStr,
                "constInt", constInt,
                "constNum", constNum,
                "constStr", constStr,
                "constStrDQuotes", constStrDQuotes,
                "constStrNull", constStrNull,
                "constStrSQuotes", constStrSQuotes,
                "defaultBigInt", defaultBigInt,
                "defaultBigIntStr", defaultBigIntStr,
                "defaultBool", defaultBool,
                "defaultDate", defaultDate,
                "defaultDateTime", defaultDateTime,
                "defaultDecimal", defaultDecimal,
                "defaultDecimalStr", defaultDecimalStr,
                "defaultEnumInt", defaultEnumInt,
                "defaultEnumStr", defaultEnumStr,
                "defaultInt", defaultInt,
                "defaultNum", defaultNum,
                "defaultStr", defaultStr,
                "defaultStrDQuotes", defaultStrDQuotes,
                "defaultStrNullable", defaultStrNullable,
                "defaultStrOptional", defaultStrOptional,
                "defaultStrSQuotes", defaultStrSQuotes,
                "normalField", normalField);
    }
    
    public final static class Builder {
 
        private Optional<? extends BigInteger> defaultBigInt;
 
        private Optional<? extends BigInteger> defaultBigIntStr;
 
        private Optional<? extends Boolean> defaultBool;
 
        private Optional<? extends LocalDate> defaultDate;
 
        private Optional<? extends OffsetDateTime> defaultDateTime;
 
        private Optional<? extends BigDecimal> defaultDecimal;
 
        private Optional<? extends BigDecimal> defaultDecimalStr;
 
        private Optional<? extends DefaultEnumInt> defaultEnumInt;
 
        private Optional<? extends DefaultEnumStr> defaultEnumStr;
 
        private Optional<? extends Long> defaultInt;
 
        private Optional<? extends Double> defaultNum;
 
        private Optional<? extends String> defaultStr;
 
        private Optional<? extends String> defaultStrDQuotes;
 
        private JsonNullable<? extends String> defaultStrNullable;
 
        private Optional<? extends String> defaultStrOptional;
 
        private Optional<? extends String> defaultStrSQuotes;
 
        private String normalField;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder defaultBigInt(BigInteger defaultBigInt) {
            Utils.checkNotNull(defaultBigInt, "defaultBigInt");
            this.defaultBigInt = Optional.ofNullable(defaultBigInt);
            return this;
        }

        public Builder defaultBigInt(long defaultBigInt) {
            this.defaultBigInt = Optional.of(BigInteger.valueOf(defaultBigInt));
            return this;
        }

        public Builder defaultBigInt(Optional<? extends BigInteger> defaultBigInt) {
            Utils.checkNotNull(defaultBigInt, "defaultBigInt");
            this.defaultBigInt = defaultBigInt;
            return this;
        }

        public Builder defaultBigIntStr(BigInteger defaultBigIntStr) {
            Utils.checkNotNull(defaultBigIntStr, "defaultBigIntStr");
            this.defaultBigIntStr = Optional.ofNullable(defaultBigIntStr);
            return this;
        }

        public Builder defaultBigIntStr(long defaultBigIntStr) {
            this.defaultBigIntStr = Optional.of(BigInteger.valueOf(defaultBigIntStr));
            return this;
        }

        public Builder defaultBigIntStr(Optional<? extends BigInteger> defaultBigIntStr) {
            Utils.checkNotNull(defaultBigIntStr, "defaultBigIntStr");
            this.defaultBigIntStr = defaultBigIntStr;
            return this;
        }

        public Builder defaultBool(boolean defaultBool) {
            Utils.checkNotNull(defaultBool, "defaultBool");
            this.defaultBool = Optional.ofNullable(defaultBool);
            return this;
        }

        public Builder defaultBool(Optional<? extends Boolean> defaultBool) {
            Utils.checkNotNull(defaultBool, "defaultBool");
            this.defaultBool = defaultBool;
            return this;
        }

        public Builder defaultDate(LocalDate defaultDate) {
            Utils.checkNotNull(defaultDate, "defaultDate");
            this.defaultDate = Optional.ofNullable(defaultDate);
            return this;
        }

        public Builder defaultDate(Optional<? extends LocalDate> defaultDate) {
            Utils.checkNotNull(defaultDate, "defaultDate");
            this.defaultDate = defaultDate;
            return this;
        }

        public Builder defaultDateTime(OffsetDateTime defaultDateTime) {
            Utils.checkNotNull(defaultDateTime, "defaultDateTime");
            this.defaultDateTime = Optional.ofNullable(defaultDateTime);
            return this;
        }

        public Builder defaultDateTime(Optional<? extends OffsetDateTime> defaultDateTime) {
            Utils.checkNotNull(defaultDateTime, "defaultDateTime");
            this.defaultDateTime = defaultDateTime;
            return this;
        }

        public Builder defaultDecimal(BigDecimal defaultDecimal) {
            Utils.checkNotNull(defaultDecimal, "defaultDecimal");
            this.defaultDecimal = Optional.ofNullable(defaultDecimal);
            return this;
        }

        public Builder defaultDecimal(double defaultDecimal) {
            this.defaultDecimal = Optional.of(BigDecimal.valueOf(defaultDecimal));
            return this;
        }

        public Builder defaultDecimal(Optional<? extends BigDecimal> defaultDecimal) {
            Utils.checkNotNull(defaultDecimal, "defaultDecimal");
            this.defaultDecimal = defaultDecimal;
            return this;
        }

        public Builder defaultDecimalStr(BigDecimal defaultDecimalStr) {
            Utils.checkNotNull(defaultDecimalStr, "defaultDecimalStr");
            this.defaultDecimalStr = Optional.ofNullable(defaultDecimalStr);
            return this;
        }

        public Builder defaultDecimalStr(double defaultDecimalStr) {
            this.defaultDecimalStr = Optional.of(BigDecimal.valueOf(defaultDecimalStr));
            return this;
        }

        public Builder defaultDecimalStr(Optional<? extends BigDecimal> defaultDecimalStr) {
            Utils.checkNotNull(defaultDecimalStr, "defaultDecimalStr");
            this.defaultDecimalStr = defaultDecimalStr;
            return this;
        }

        public Builder defaultEnumInt(DefaultEnumInt defaultEnumInt) {
            Utils.checkNotNull(defaultEnumInt, "defaultEnumInt");
            this.defaultEnumInt = Optional.ofNullable(defaultEnumInt);
            return this;
        }

        public Builder defaultEnumInt(Optional<? extends DefaultEnumInt> defaultEnumInt) {
            Utils.checkNotNull(defaultEnumInt, "defaultEnumInt");
            this.defaultEnumInt = defaultEnumInt;
            return this;
        }

        public Builder defaultEnumStr(DefaultEnumStr defaultEnumStr) {
            Utils.checkNotNull(defaultEnumStr, "defaultEnumStr");
            this.defaultEnumStr = Optional.ofNullable(defaultEnumStr);
            return this;
        }

        public Builder defaultEnumStr(Optional<? extends DefaultEnumStr> defaultEnumStr) {
            Utils.checkNotNull(defaultEnumStr, "defaultEnumStr");
            this.defaultEnumStr = defaultEnumStr;
            return this;
        }

        public Builder defaultInt(long defaultInt) {
            Utils.checkNotNull(defaultInt, "defaultInt");
            this.defaultInt = Optional.ofNullable(defaultInt);
            return this;
        }

        public Builder defaultInt(Optional<? extends Long> defaultInt) {
            Utils.checkNotNull(defaultInt, "defaultInt");
            this.defaultInt = defaultInt;
            return this;
        }

        public Builder defaultNum(double defaultNum) {
            Utils.checkNotNull(defaultNum, "defaultNum");
            this.defaultNum = Optional.ofNullable(defaultNum);
            return this;
        }

        public Builder defaultNum(Optional<? extends Double> defaultNum) {
            Utils.checkNotNull(defaultNum, "defaultNum");
            this.defaultNum = defaultNum;
            return this;
        }

        public Builder defaultStr(String defaultStr) {
            Utils.checkNotNull(defaultStr, "defaultStr");
            this.defaultStr = Optional.ofNullable(defaultStr);
            return this;
        }

        public Builder defaultStr(Optional<? extends String> defaultStr) {
            Utils.checkNotNull(defaultStr, "defaultStr");
            this.defaultStr = defaultStr;
            return this;
        }

        public Builder defaultStrDQuotes(String defaultStrDQuotes) {
            Utils.checkNotNull(defaultStrDQuotes, "defaultStrDQuotes");
            this.defaultStrDQuotes = Optional.ofNullable(defaultStrDQuotes);
            return this;
        }

        public Builder defaultStrDQuotes(Optional<? extends String> defaultStrDQuotes) {
            Utils.checkNotNull(defaultStrDQuotes, "defaultStrDQuotes");
            this.defaultStrDQuotes = defaultStrDQuotes;
            return this;
        }

        public Builder defaultStrNullable(String defaultStrNullable) {
            Utils.checkNotNull(defaultStrNullable, "defaultStrNullable");
            this.defaultStrNullable = JsonNullable.of(defaultStrNullable);
            return this;
        }

        public Builder defaultStrNullable(JsonNullable<? extends String> defaultStrNullable) {
            Utils.checkNotNull(defaultStrNullable, "defaultStrNullable");
            this.defaultStrNullable = defaultStrNullable;
            return this;
        }

        public Builder defaultStrOptional(String defaultStrOptional) {
            Utils.checkNotNull(defaultStrOptional, "defaultStrOptional");
            this.defaultStrOptional = Optional.ofNullable(defaultStrOptional);
            return this;
        }

        public Builder defaultStrOptional(Optional<? extends String> defaultStrOptional) {
            Utils.checkNotNull(defaultStrOptional, "defaultStrOptional");
            this.defaultStrOptional = defaultStrOptional;
            return this;
        }

        public Builder defaultStrSQuotes(String defaultStrSQuotes) {
            Utils.checkNotNull(defaultStrSQuotes, "defaultStrSQuotes");
            this.defaultStrSQuotes = Optional.ofNullable(defaultStrSQuotes);
            return this;
        }

        public Builder defaultStrSQuotes(Optional<? extends String> defaultStrSQuotes) {
            Utils.checkNotNull(defaultStrSQuotes, "defaultStrSQuotes");
            this.defaultStrSQuotes = defaultStrSQuotes;
            return this;
        }

        public Builder normalField(String normalField) {
            Utils.checkNotNull(normalField, "normalField");
            this.normalField = normalField;
            return this;
        }
        
        public DefaultsAndConsts build() {
            if (defaultBigInt == null) {
                defaultBigInt = _SINGLETON_VALUE_DefaultBigInt.value();
            }
            if (defaultBigIntStr == null) {
                defaultBigIntStr = _SINGLETON_VALUE_DefaultBigIntStr.value();
            }
            if (defaultBool == null) {
                defaultBool = _SINGLETON_VALUE_DefaultBool.value();
            }
            if (defaultDate == null) {
                defaultDate = _SINGLETON_VALUE_DefaultDate.value();
            }
            if (defaultDateTime == null) {
                defaultDateTime = _SINGLETON_VALUE_DefaultDateTime.value();
            }
            if (defaultDecimal == null) {
                defaultDecimal = _SINGLETON_VALUE_DefaultDecimal.value();
            }
            if (defaultDecimalStr == null) {
                defaultDecimalStr = _SINGLETON_VALUE_DefaultDecimalStr.value();
            }
            if (defaultEnumInt == null) {
                defaultEnumInt = _SINGLETON_VALUE_DefaultEnumInt.value();
            }
            if (defaultEnumStr == null) {
                defaultEnumStr = _SINGLETON_VALUE_DefaultEnumStr.value();
            }
            if (defaultInt == null) {
                defaultInt = _SINGLETON_VALUE_DefaultInt.value();
            }
            if (defaultNum == null) {
                defaultNum = _SINGLETON_VALUE_DefaultNum.value();
            }
            if (defaultStr == null) {
                defaultStr = _SINGLETON_VALUE_DefaultStr.value();
            }
            if (defaultStrDQuotes == null) {
                defaultStrDQuotes = _SINGLETON_VALUE_DefaultStrDQuotes.value();
            }
            if (defaultStrNullable == null) {
                defaultStrNullable = _SINGLETON_VALUE_DefaultStrNullable.value();
            }
            if (defaultStrOptional == null) {
                defaultStrOptional = _SINGLETON_VALUE_DefaultStrOptional.value();
            }
            if (defaultStrSQuotes == null) {
                defaultStrSQuotes = _SINGLETON_VALUE_DefaultStrSQuotes.value();
            }
            return new DefaultsAndConsts(
                defaultBigInt,
                defaultBigIntStr,
                defaultBool,
                defaultDate,
                defaultDateTime,
                defaultDecimal,
                defaultDecimalStr,
                defaultEnumInt,
                defaultEnumStr,
                defaultInt,
                defaultNum,
                defaultStr,
                defaultStrDQuotes,
                defaultStrNullable,
                defaultStrOptional,
                defaultStrSQuotes,
                normalField);
        }

        private static final LazySingletonValue<BigInteger> _SINGLETON_VALUE_ConstBigInt =
                new LazySingletonValue<>(
                        "constBigInt",
                        "9007199254740991",
                        new TypeReference<BigInteger>() {});

        private static final LazySingletonValue<BigInteger> _SINGLETON_VALUE_ConstBigIntStr =
                new LazySingletonValue<>(
                        "constBigIntStr",
                        "\"9223372036854775807\"",
                        new TypeReference<BigInteger>() {});

        private static final LazySingletonValue<Boolean> _SINGLETON_VALUE_ConstBool =
                new LazySingletonValue<>(
                        "constBool",
                        "true",
                        new TypeReference<Boolean>() {});

        private static final LazySingletonValue<LocalDate> _SINGLETON_VALUE_ConstDate =
                new LazySingletonValue<>(
                        "constDate",
                        "\"2020-01-01\"",
                        new TypeReference<LocalDate>() {});

        private static final LazySingletonValue<OffsetDateTime> _SINGLETON_VALUE_ConstDateTime =
                new LazySingletonValue<>(
                        "constDateTime",
                        "\"2020-01-01T00:00:00Z\"",
                        new TypeReference<OffsetDateTime>() {});

        private static final LazySingletonValue<BigDecimal> _SINGLETON_VALUE_ConstDecimal =
                new LazySingletonValue<>(
                        "constDecimal",
                        "3.141592653589793",
                        new TypeReference<BigDecimal>() {});

        private static final LazySingletonValue<BigDecimal> _SINGLETON_VALUE_ConstDecimalStr =
                new LazySingletonValue<>(
                        "constDecimalStr",
                        "\"3.141592653589793238462643383279\"",
                        new TypeReference<BigDecimal>() {});

        private static final LazySingletonValue<ConstEnumInt> _SINGLETON_VALUE_ConstEnumInt =
                new LazySingletonValue<>(
                        "constEnumInt",
                        "2",
                        new TypeReference<ConstEnumInt>() {});

        private static final LazySingletonValue<ConstEnumStr> _SINGLETON_VALUE_ConstEnumStr =
                new LazySingletonValue<>(
                        "constEnumStr",
                        "\"two\"",
                        new TypeReference<ConstEnumStr>() {});

        private static final LazySingletonValue<Long> _SINGLETON_VALUE_ConstInt =
                new LazySingletonValue<>(
                        "constInt",
                        "123",
                        new TypeReference<Long>() {});

        private static final LazySingletonValue<Double> _SINGLETON_VALUE_ConstNum =
                new LazySingletonValue<>(
                        "constNum",
                        "123.456",
                        new TypeReference<Double>() {});

        private static final LazySingletonValue<String> _SINGLETON_VALUE_ConstStr =
                new LazySingletonValue<>(
                        "constStr",
                        "\"const\"",
                        new TypeReference<String>() {});

        private static final LazySingletonValue<String> _SINGLETON_VALUE_ConstStrDQuotes =
                new LazySingletonValue<>(
                        "constStrDQuotes",
                        "\"const with \\\"double quotes\\\"\"",
                        new TypeReference<String>() {});

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_ConstStrNull =
                new LazySingletonValue<>(
                        "constStrNull",
                        "null",
                        new TypeReference<Optional<? extends String>>() {});

        private static final LazySingletonValue<String> _SINGLETON_VALUE_ConstStrSQuotes =
                new LazySingletonValue<>(
                        "constStrSQuotes",
                        "\"const with 'single quotes'\"",
                        new TypeReference<String>() {});

        private static final LazySingletonValue<Optional<? extends BigInteger>> _SINGLETON_VALUE_DefaultBigInt =
                new LazySingletonValue<>(
                        "defaultBigInt",
                        "9007199254740991",
                        new TypeReference<Optional<? extends BigInteger>>() {});

        private static final LazySingletonValue<Optional<? extends BigInteger>> _SINGLETON_VALUE_DefaultBigIntStr =
                new LazySingletonValue<>(
                        "defaultBigIntStr",
                        "\"9223372036854775807\"",
                        new TypeReference<Optional<? extends BigInteger>>() {});

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_DefaultBool =
                new LazySingletonValue<>(
                        "defaultBool",
                        "true",
                        new TypeReference<Optional<? extends Boolean>>() {});

        private static final LazySingletonValue<Optional<? extends LocalDate>> _SINGLETON_VALUE_DefaultDate =
                new LazySingletonValue<>(
                        "defaultDate",
                        "\"2020-01-01\"",
                        new TypeReference<Optional<? extends LocalDate>>() {});

        private static final LazySingletonValue<Optional<? extends OffsetDateTime>> _SINGLETON_VALUE_DefaultDateTime =
                new LazySingletonValue<>(
                        "defaultDateTime",
                        "\"2020-01-01T00:00:00Z\"",
                        new TypeReference<Optional<? extends OffsetDateTime>>() {});

        private static final LazySingletonValue<Optional<? extends BigDecimal>> _SINGLETON_VALUE_DefaultDecimal =
                new LazySingletonValue<>(
                        "defaultDecimal",
                        "3.141592653589793",
                        new TypeReference<Optional<? extends BigDecimal>>() {});

        private static final LazySingletonValue<Optional<? extends BigDecimal>> _SINGLETON_VALUE_DefaultDecimalStr =
                new LazySingletonValue<>(
                        "defaultDecimalStr",
                        "\"3.141592653589793238462643383279\"",
                        new TypeReference<Optional<? extends BigDecimal>>() {});

        private static final LazySingletonValue<Optional<? extends DefaultEnumInt>> _SINGLETON_VALUE_DefaultEnumInt =
                new LazySingletonValue<>(
                        "defaultEnumInt",
                        "2",
                        new TypeReference<Optional<? extends DefaultEnumInt>>() {});

        private static final LazySingletonValue<Optional<? extends DefaultEnumStr>> _SINGLETON_VALUE_DefaultEnumStr =
                new LazySingletonValue<>(
                        "defaultEnumStr",
                        "\"two\"",
                        new TypeReference<Optional<? extends DefaultEnumStr>>() {});

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_DefaultInt =
                new LazySingletonValue<>(
                        "defaultInt",
                        "123",
                        new TypeReference<Optional<? extends Long>>() {});

        private static final LazySingletonValue<Optional<? extends Double>> _SINGLETON_VALUE_DefaultNum =
                new LazySingletonValue<>(
                        "defaultNum",
                        "123.456",
                        new TypeReference<Optional<? extends Double>>() {});

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_DefaultStr =
                new LazySingletonValue<>(
                        "defaultStr",
                        "\"default\"",
                        new TypeReference<Optional<? extends String>>() {});

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_DefaultStrDQuotes =
                new LazySingletonValue<>(
                        "defaultStrDQuotes",
                        "\"default with \\\"double quotes\\\"\"",
                        new TypeReference<Optional<? extends String>>() {});

        private static final LazySingletonValue<JsonNullable<? extends String>> _SINGLETON_VALUE_DefaultStrNullable =
                new LazySingletonValue<>(
                        "defaultStrNullable",
                        "null",
                        new TypeReference<JsonNullable<? extends String>>() {});

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_DefaultStrOptional =
                new LazySingletonValue<>(
                        "defaultStrOptional",
                        "\"default\"",
                        new TypeReference<Optional<? extends String>>() {});

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_DefaultStrSQuotes =
                new LazySingletonValue<>(
                        "defaultStrSQuotes",
                        "\"default with 'single quotes'\"",
                        new TypeReference<Optional<? extends String>>() {});
    }
}

