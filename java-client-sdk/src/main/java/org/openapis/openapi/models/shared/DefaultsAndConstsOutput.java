/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

public class DefaultsAndConstsOutput {

    @JsonProperty("constBigInt")
    private BigInteger constBigInt;

    @JsonProperty("constBigIntStr")
    @JsonFormat(shape = JsonFormat.Shape.STRING)
    private BigInteger constBigIntStr;

    @JsonProperty("constBool")
    private boolean constBool;

    @JsonProperty("constDate")
    private LocalDate constDate;

    @JsonProperty("constDateTime")
    private OffsetDateTime constDateTime;

    @JsonProperty("constDecimal")
    private BigDecimal constDecimal;

    @JsonProperty("constDecimalStr")
    @JsonFormat(shape = JsonFormat.Shape.STRING)
    private BigDecimal constDecimalStr;

    @JsonProperty("constEnumInt")
    private DefaultsAndConstsOutputConstEnumInt constEnumInt;

    @JsonProperty("constEnumStr")
    private DefaultsAndConstsOutputConstEnumStr constEnumStr;

    @JsonProperty("constInt")
    private long constInt;

    @JsonProperty("constNum")
    private double constNum;

    @JsonProperty("constStr")
    private String constStr;

    @JsonProperty("constStrDQuotes")
    private String constStrDQuotes;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("constStrNull")
    private Optional<? extends String> constStrNull;

    @JsonProperty("constStrSQuotes")
    private String constStrSQuotes;

    @JsonProperty("defaultBigInt")
    private BigInteger defaultBigInt;

    @JsonProperty("defaultBigIntStr")
    @JsonFormat(shape = JsonFormat.Shape.STRING)
    private BigInteger defaultBigIntStr;

    @JsonProperty("defaultBool")
    private boolean defaultBool;

    @JsonProperty("defaultDate")
    private LocalDate defaultDate;

    @JsonProperty("defaultDateTime")
    private OffsetDateTime defaultDateTime;

    @JsonProperty("defaultDecimal")
    private BigDecimal defaultDecimal;

    @JsonProperty("defaultDecimalStr")
    @JsonFormat(shape = JsonFormat.Shape.STRING)
    private BigDecimal defaultDecimalStr;

    @JsonProperty("defaultEnumInt")
    private DefaultsAndConstsOutputDefaultEnumInt defaultEnumInt;

    @JsonProperty("defaultEnumStr")
    private DefaultsAndConstsOutputDefaultEnumStr defaultEnumStr;

    @JsonProperty("defaultInt")
    private long defaultInt;

    @JsonProperty("defaultNum")
    private double defaultNum;

    @JsonProperty("defaultStr")
    private String defaultStr;

    @JsonProperty("defaultStrDQuotes")
    private String defaultStrDQuotes;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("defaultStrNullable")
    private Optional<? extends String> defaultStrNullable;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultStrOptional")
    private Optional<? extends String> defaultStrOptional;

    @JsonProperty("defaultStrSQuotes")
    private String defaultStrSQuotes;

    @JsonProperty("normalField")
    private String normalField;

    @JsonCreator
    public DefaultsAndConstsOutput(
            @JsonProperty("constBigInt") BigInteger constBigInt,
            @JsonProperty("constBigIntStr") BigInteger constBigIntStr,
            @JsonProperty("constBool") boolean constBool,
            @JsonProperty("constDate") LocalDate constDate,
            @JsonProperty("constDateTime") OffsetDateTime constDateTime,
            @JsonProperty("constDecimal") BigDecimal constDecimal,
            @JsonProperty("constDecimalStr") BigDecimal constDecimalStr,
            @JsonProperty("constEnumInt") DefaultsAndConstsOutputConstEnumInt constEnumInt,
            @JsonProperty("constEnumStr") DefaultsAndConstsOutputConstEnumStr constEnumStr,
            @JsonProperty("constInt") long constInt,
            @JsonProperty("constNum") double constNum,
            @JsonProperty("constStr") String constStr,
            @JsonProperty("constStrDQuotes") String constStrDQuotes,
            @JsonProperty("constStrNull") Optional<? extends String> constStrNull,
            @JsonProperty("constStrSQuotes") String constStrSQuotes,
            @JsonProperty("defaultBigInt") BigInteger defaultBigInt,
            @JsonProperty("defaultBigIntStr") BigInteger defaultBigIntStr,
            @JsonProperty("defaultBool") boolean defaultBool,
            @JsonProperty("defaultDate") LocalDate defaultDate,
            @JsonProperty("defaultDateTime") OffsetDateTime defaultDateTime,
            @JsonProperty("defaultDecimal") BigDecimal defaultDecimal,
            @JsonProperty("defaultDecimalStr") BigDecimal defaultDecimalStr,
            @JsonProperty("defaultEnumInt") DefaultsAndConstsOutputDefaultEnumInt defaultEnumInt,
            @JsonProperty("defaultEnumStr") DefaultsAndConstsOutputDefaultEnumStr defaultEnumStr,
            @JsonProperty("defaultInt") long defaultInt,
            @JsonProperty("defaultNum") double defaultNum,
            @JsonProperty("defaultStr") String defaultStr,
            @JsonProperty("defaultStrDQuotes") String defaultStrDQuotes,
            @JsonProperty("defaultStrNullable") Optional<? extends String> defaultStrNullable,
            @JsonProperty("defaultStrOptional") Optional<? extends String> defaultStrOptional,
            @JsonProperty("defaultStrSQuotes") String defaultStrSQuotes,
            @JsonProperty("normalField") String normalField) {
        Utils.checkNotNull(constBigInt, "constBigInt");
        Utils.checkNotNull(constBigIntStr, "constBigIntStr");
        Utils.checkNotNull(constBool, "constBool");
        Utils.checkNotNull(constDate, "constDate");
        Utils.checkNotNull(constDateTime, "constDateTime");
        Utils.checkNotNull(constDecimal, "constDecimal");
        Utils.checkNotNull(constDecimalStr, "constDecimalStr");
        Utils.checkNotNull(constEnumInt, "constEnumInt");
        Utils.checkNotNull(constEnumStr, "constEnumStr");
        Utils.checkNotNull(constInt, "constInt");
        Utils.checkNotNull(constNum, "constNum");
        Utils.checkNotNull(constStr, "constStr");
        Utils.checkNotNull(constStrDQuotes, "constStrDQuotes");
        Utils.checkNotNull(constStrNull, "constStrNull");
        Utils.checkNotNull(constStrSQuotes, "constStrSQuotes");
        Utils.checkNotNull(defaultBigInt, "defaultBigInt");
        Utils.checkNotNull(defaultBigIntStr, "defaultBigIntStr");
        Utils.checkNotNull(defaultBool, "defaultBool");
        Utils.checkNotNull(defaultDate, "defaultDate");
        Utils.checkNotNull(defaultDateTime, "defaultDateTime");
        Utils.checkNotNull(defaultDecimal, "defaultDecimal");
        Utils.checkNotNull(defaultDecimalStr, "defaultDecimalStr");
        Utils.checkNotNull(defaultEnumInt, "defaultEnumInt");
        Utils.checkNotNull(defaultEnumStr, "defaultEnumStr");
        Utils.checkNotNull(defaultInt, "defaultInt");
        Utils.checkNotNull(defaultNum, "defaultNum");
        Utils.checkNotNull(defaultStr, "defaultStr");
        Utils.checkNotNull(defaultStrDQuotes, "defaultStrDQuotes");
        Utils.checkNotNull(defaultStrNullable, "defaultStrNullable");
        Utils.checkNotNull(defaultStrOptional, "defaultStrOptional");
        Utils.checkNotNull(defaultStrSQuotes, "defaultStrSQuotes");
        Utils.checkNotNull(normalField, "normalField");
        this.constBigInt = constBigInt;
        this.constBigIntStr = constBigIntStr;
        this.constBool = constBool;
        this.constDate = constDate;
        this.constDateTime = constDateTime;
        this.constDecimal = constDecimal;
        this.constDecimalStr = constDecimalStr;
        this.constEnumInt = constEnumInt;
        this.constEnumStr = constEnumStr;
        this.constInt = constInt;
        this.constNum = constNum;
        this.constStr = constStr;
        this.constStrDQuotes = constStrDQuotes;
        this.constStrNull = constStrNull;
        this.constStrSQuotes = constStrSQuotes;
        this.defaultBigInt = defaultBigInt;
        this.defaultBigIntStr = defaultBigIntStr;
        this.defaultBool = defaultBool;
        this.defaultDate = defaultDate;
        this.defaultDateTime = defaultDateTime;
        this.defaultDecimal = defaultDecimal;
        this.defaultDecimalStr = defaultDecimalStr;
        this.defaultEnumInt = defaultEnumInt;
        this.defaultEnumStr = defaultEnumStr;
        this.defaultInt = defaultInt;
        this.defaultNum = defaultNum;
        this.defaultStr = defaultStr;
        this.defaultStrDQuotes = defaultStrDQuotes;
        this.defaultStrNullable = defaultStrNullable;
        this.defaultStrOptional = defaultStrOptional;
        this.defaultStrSQuotes = defaultStrSQuotes;
        this.normalField = normalField;
    }
    
    public DefaultsAndConstsOutput(
            BigInteger constBigInt,
            BigInteger constBigIntStr,
            boolean constBool,
            LocalDate constDate,
            OffsetDateTime constDateTime,
            BigDecimal constDecimal,
            BigDecimal constDecimalStr,
            DefaultsAndConstsOutputConstEnumInt constEnumInt,
            DefaultsAndConstsOutputConstEnumStr constEnumStr,
            long constInt,
            double constNum,
            String constStr,
            String constStrDQuotes,
            String constStrSQuotes,
            BigInteger defaultBigInt,
            BigInteger defaultBigIntStr,
            boolean defaultBool,
            LocalDate defaultDate,
            OffsetDateTime defaultDateTime,
            BigDecimal defaultDecimal,
            BigDecimal defaultDecimalStr,
            DefaultsAndConstsOutputDefaultEnumInt defaultEnumInt,
            DefaultsAndConstsOutputDefaultEnumStr defaultEnumStr,
            long defaultInt,
            double defaultNum,
            String defaultStr,
            String defaultStrDQuotes,
            String defaultStrSQuotes,
            String normalField) {
        this(constBigInt, constBigIntStr, constBool, constDate, constDateTime, constDecimal, constDecimalStr, constEnumInt, constEnumStr, constInt, constNum, constStr, constStrDQuotes, Optional.empty(), constStrSQuotes, defaultBigInt, defaultBigIntStr, defaultBool, defaultDate, defaultDateTime, defaultDecimal, defaultDecimalStr, defaultEnumInt, defaultEnumStr, defaultInt, defaultNum, defaultStr, defaultStrDQuotes, Optional.empty(), Optional.empty(), defaultStrSQuotes, normalField);
    }

    @JsonIgnore
    public BigInteger constBigInt() {
        return constBigInt;
    }

    @JsonIgnore
    public BigInteger constBigIntStr() {
        return constBigIntStr;
    }

    @JsonIgnore
    public boolean constBool() {
        return constBool;
    }

    @JsonIgnore
    public LocalDate constDate() {
        return constDate;
    }

    @JsonIgnore
    public OffsetDateTime constDateTime() {
        return constDateTime;
    }

    @JsonIgnore
    public BigDecimal constDecimal() {
        return constDecimal;
    }

    @JsonIgnore
    public BigDecimal constDecimalStr() {
        return constDecimalStr;
    }

    @JsonIgnore
    public DefaultsAndConstsOutputConstEnumInt constEnumInt() {
        return constEnumInt;
    }

    @JsonIgnore
    public DefaultsAndConstsOutputConstEnumStr constEnumStr() {
        return constEnumStr;
    }

    @JsonIgnore
    public long constInt() {
        return constInt;
    }

    @JsonIgnore
    public double constNum() {
        return constNum;
    }

    @JsonIgnore
    public String constStr() {
        return constStr;
    }

    @JsonIgnore
    public String constStrDQuotes() {
        return constStrDQuotes;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> constStrNull() {
        return (Optional<String>) constStrNull;
    }

    @JsonIgnore
    public String constStrSQuotes() {
        return constStrSQuotes;
    }

    @JsonIgnore
    public BigInteger defaultBigInt() {
        return defaultBigInt;
    }

    @JsonIgnore
    public BigInteger defaultBigIntStr() {
        return defaultBigIntStr;
    }

    @JsonIgnore
    public boolean defaultBool() {
        return defaultBool;
    }

    @JsonIgnore
    public LocalDate defaultDate() {
        return defaultDate;
    }

    @JsonIgnore
    public OffsetDateTime defaultDateTime() {
        return defaultDateTime;
    }

    @JsonIgnore
    public BigDecimal defaultDecimal() {
        return defaultDecimal;
    }

    @JsonIgnore
    public BigDecimal defaultDecimalStr() {
        return defaultDecimalStr;
    }

    @JsonIgnore
    public DefaultsAndConstsOutputDefaultEnumInt defaultEnumInt() {
        return defaultEnumInt;
    }

    @JsonIgnore
    public DefaultsAndConstsOutputDefaultEnumStr defaultEnumStr() {
        return defaultEnumStr;
    }

    @JsonIgnore
    public long defaultInt() {
        return defaultInt;
    }

    @JsonIgnore
    public double defaultNum() {
        return defaultNum;
    }

    @JsonIgnore
    public String defaultStr() {
        return defaultStr;
    }

    @JsonIgnore
    public String defaultStrDQuotes() {
        return defaultStrDQuotes;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> defaultStrNullable() {
        return (Optional<String>) defaultStrNullable;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> defaultStrOptional() {
        return (Optional<String>) defaultStrOptional;
    }

    @JsonIgnore
    public String defaultStrSQuotes() {
        return defaultStrSQuotes;
    }

    @JsonIgnore
    public String normalField() {
        return normalField;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public DefaultsAndConstsOutput withConstBigInt(long constBigInt) {
        this.constBigInt = BigInteger.valueOf(constBigInt);
        return this;
    }

    public DefaultsAndConstsOutput withConstBigInt(BigInteger constBigInt) {
        Utils.checkNotNull(constBigInt, "constBigInt");
        this.constBigInt = constBigInt;
        return this;
    }

    public DefaultsAndConstsOutput withConstBigIntStr(long constBigIntStr) {
        this.constBigIntStr = BigInteger.valueOf(constBigIntStr);
        return this;
    }

    public DefaultsAndConstsOutput withConstBigIntStr(BigInteger constBigIntStr) {
        Utils.checkNotNull(constBigIntStr, "constBigIntStr");
        this.constBigIntStr = constBigIntStr;
        return this;
    }

    public DefaultsAndConstsOutput withConstBool(boolean constBool) {
        Utils.checkNotNull(constBool, "constBool");
        this.constBool = constBool;
        return this;
    }

    public DefaultsAndConstsOutput withConstDate(LocalDate constDate) {
        Utils.checkNotNull(constDate, "constDate");
        this.constDate = constDate;
        return this;
    }

    public DefaultsAndConstsOutput withConstDateTime(OffsetDateTime constDateTime) {
        Utils.checkNotNull(constDateTime, "constDateTime");
        this.constDateTime = constDateTime;
        return this;
    }

    public DefaultsAndConstsOutput withConstDecimal(double constDecimal) {
        this.constDecimal = BigDecimal.valueOf(constDecimal);
        return this;
    }

    public DefaultsAndConstsOutput withConstDecimal(BigDecimal constDecimal) {
        Utils.checkNotNull(constDecimal, "constDecimal");
        this.constDecimal = constDecimal;
        return this;
    }

    public DefaultsAndConstsOutput withConstDecimalStr(double constDecimalStr) {
        this.constDecimalStr = BigDecimal.valueOf(constDecimalStr);
        return this;
    }

    public DefaultsAndConstsOutput withConstDecimalStr(BigDecimal constDecimalStr) {
        Utils.checkNotNull(constDecimalStr, "constDecimalStr");
        this.constDecimalStr = constDecimalStr;
        return this;
    }

    public DefaultsAndConstsOutput withConstEnumInt(DefaultsAndConstsOutputConstEnumInt constEnumInt) {
        Utils.checkNotNull(constEnumInt, "constEnumInt");
        this.constEnumInt = constEnumInt;
        return this;
    }

    public DefaultsAndConstsOutput withConstEnumStr(DefaultsAndConstsOutputConstEnumStr constEnumStr) {
        Utils.checkNotNull(constEnumStr, "constEnumStr");
        this.constEnumStr = constEnumStr;
        return this;
    }

    public DefaultsAndConstsOutput withConstInt(long constInt) {
        Utils.checkNotNull(constInt, "constInt");
        this.constInt = constInt;
        return this;
    }

    public DefaultsAndConstsOutput withConstNum(double constNum) {
        Utils.checkNotNull(constNum, "constNum");
        this.constNum = constNum;
        return this;
    }

    public DefaultsAndConstsOutput withConstStr(String constStr) {
        Utils.checkNotNull(constStr, "constStr");
        this.constStr = constStr;
        return this;
    }

    public DefaultsAndConstsOutput withConstStrDQuotes(String constStrDQuotes) {
        Utils.checkNotNull(constStrDQuotes, "constStrDQuotes");
        this.constStrDQuotes = constStrDQuotes;
        return this;
    }

    public DefaultsAndConstsOutput withConstStrNull(String constStrNull) {
        Utils.checkNotNull(constStrNull, "constStrNull");
        this.constStrNull = Optional.ofNullable(constStrNull);
        return this;
    }

    public DefaultsAndConstsOutput withConstStrNull(Optional<? extends String> constStrNull) {
        Utils.checkNotNull(constStrNull, "constStrNull");
        this.constStrNull = constStrNull;
        return this;
    }

    public DefaultsAndConstsOutput withConstStrSQuotes(String constStrSQuotes) {
        Utils.checkNotNull(constStrSQuotes, "constStrSQuotes");
        this.constStrSQuotes = constStrSQuotes;
        return this;
    }

    public DefaultsAndConstsOutput withDefaultBigInt(long defaultBigInt) {
        this.defaultBigInt = BigInteger.valueOf(defaultBigInt);
        return this;
    }

    public DefaultsAndConstsOutput withDefaultBigInt(BigInteger defaultBigInt) {
        Utils.checkNotNull(defaultBigInt, "defaultBigInt");
        this.defaultBigInt = defaultBigInt;
        return this;
    }

    public DefaultsAndConstsOutput withDefaultBigIntStr(long defaultBigIntStr) {
        this.defaultBigIntStr = BigInteger.valueOf(defaultBigIntStr);
        return this;
    }

    public DefaultsAndConstsOutput withDefaultBigIntStr(BigInteger defaultBigIntStr) {
        Utils.checkNotNull(defaultBigIntStr, "defaultBigIntStr");
        this.defaultBigIntStr = defaultBigIntStr;
        return this;
    }

    public DefaultsAndConstsOutput withDefaultBool(boolean defaultBool) {
        Utils.checkNotNull(defaultBool, "defaultBool");
        this.defaultBool = defaultBool;
        return this;
    }

    public DefaultsAndConstsOutput withDefaultDate(LocalDate defaultDate) {
        Utils.checkNotNull(defaultDate, "defaultDate");
        this.defaultDate = defaultDate;
        return this;
    }

    public DefaultsAndConstsOutput withDefaultDateTime(OffsetDateTime defaultDateTime) {
        Utils.checkNotNull(defaultDateTime, "defaultDateTime");
        this.defaultDateTime = defaultDateTime;
        return this;
    }

    public DefaultsAndConstsOutput withDefaultDecimal(double defaultDecimal) {
        this.defaultDecimal = BigDecimal.valueOf(defaultDecimal);
        return this;
    }

    public DefaultsAndConstsOutput withDefaultDecimal(BigDecimal defaultDecimal) {
        Utils.checkNotNull(defaultDecimal, "defaultDecimal");
        this.defaultDecimal = defaultDecimal;
        return this;
    }

    public DefaultsAndConstsOutput withDefaultDecimalStr(double defaultDecimalStr) {
        this.defaultDecimalStr = BigDecimal.valueOf(defaultDecimalStr);
        return this;
    }

    public DefaultsAndConstsOutput withDefaultDecimalStr(BigDecimal defaultDecimalStr) {
        Utils.checkNotNull(defaultDecimalStr, "defaultDecimalStr");
        this.defaultDecimalStr = defaultDecimalStr;
        return this;
    }

    public DefaultsAndConstsOutput withDefaultEnumInt(DefaultsAndConstsOutputDefaultEnumInt defaultEnumInt) {
        Utils.checkNotNull(defaultEnumInt, "defaultEnumInt");
        this.defaultEnumInt = defaultEnumInt;
        return this;
    }

    public DefaultsAndConstsOutput withDefaultEnumStr(DefaultsAndConstsOutputDefaultEnumStr defaultEnumStr) {
        Utils.checkNotNull(defaultEnumStr, "defaultEnumStr");
        this.defaultEnumStr = defaultEnumStr;
        return this;
    }

    public DefaultsAndConstsOutput withDefaultInt(long defaultInt) {
        Utils.checkNotNull(defaultInt, "defaultInt");
        this.defaultInt = defaultInt;
        return this;
    }

    public DefaultsAndConstsOutput withDefaultNum(double defaultNum) {
        Utils.checkNotNull(defaultNum, "defaultNum");
        this.defaultNum = defaultNum;
        return this;
    }

    public DefaultsAndConstsOutput withDefaultStr(String defaultStr) {
        Utils.checkNotNull(defaultStr, "defaultStr");
        this.defaultStr = defaultStr;
        return this;
    }

    public DefaultsAndConstsOutput withDefaultStrDQuotes(String defaultStrDQuotes) {
        Utils.checkNotNull(defaultStrDQuotes, "defaultStrDQuotes");
        this.defaultStrDQuotes = defaultStrDQuotes;
        return this;
    }

    public DefaultsAndConstsOutput withDefaultStrNullable(String defaultStrNullable) {
        Utils.checkNotNull(defaultStrNullable, "defaultStrNullable");
        this.defaultStrNullable = Optional.ofNullable(defaultStrNullable);
        return this;
    }

    public DefaultsAndConstsOutput withDefaultStrNullable(Optional<? extends String> defaultStrNullable) {
        Utils.checkNotNull(defaultStrNullable, "defaultStrNullable");
        this.defaultStrNullable = defaultStrNullable;
        return this;
    }

    public DefaultsAndConstsOutput withDefaultStrOptional(String defaultStrOptional) {
        Utils.checkNotNull(defaultStrOptional, "defaultStrOptional");
        this.defaultStrOptional = Optional.ofNullable(defaultStrOptional);
        return this;
    }

    public DefaultsAndConstsOutput withDefaultStrOptional(Optional<? extends String> defaultStrOptional) {
        Utils.checkNotNull(defaultStrOptional, "defaultStrOptional");
        this.defaultStrOptional = defaultStrOptional;
        return this;
    }

    public DefaultsAndConstsOutput withDefaultStrSQuotes(String defaultStrSQuotes) {
        Utils.checkNotNull(defaultStrSQuotes, "defaultStrSQuotes");
        this.defaultStrSQuotes = defaultStrSQuotes;
        return this;
    }

    public DefaultsAndConstsOutput withNormalField(String normalField) {
        Utils.checkNotNull(normalField, "normalField");
        this.normalField = normalField;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DefaultsAndConstsOutput other = (DefaultsAndConstsOutput) o;
        return 
            java.util.Objects.deepEquals(this.constBigInt, other.constBigInt) &&
            java.util.Objects.deepEquals(this.constBigIntStr, other.constBigIntStr) &&
            java.util.Objects.deepEquals(this.constBool, other.constBool) &&
            java.util.Objects.deepEquals(this.constDate, other.constDate) &&
            java.util.Objects.deepEquals(this.constDateTime, other.constDateTime) &&
            java.util.Objects.deepEquals(this.constDecimal, other.constDecimal) &&
            java.util.Objects.deepEquals(this.constDecimalStr, other.constDecimalStr) &&
            java.util.Objects.deepEquals(this.constEnumInt, other.constEnumInt) &&
            java.util.Objects.deepEquals(this.constEnumStr, other.constEnumStr) &&
            java.util.Objects.deepEquals(this.constInt, other.constInt) &&
            java.util.Objects.deepEquals(this.constNum, other.constNum) &&
            java.util.Objects.deepEquals(this.constStr, other.constStr) &&
            java.util.Objects.deepEquals(this.constStrDQuotes, other.constStrDQuotes) &&
            java.util.Objects.deepEquals(this.constStrNull, other.constStrNull) &&
            java.util.Objects.deepEquals(this.constStrSQuotes, other.constStrSQuotes) &&
            java.util.Objects.deepEquals(this.defaultBigInt, other.defaultBigInt) &&
            java.util.Objects.deepEquals(this.defaultBigIntStr, other.defaultBigIntStr) &&
            java.util.Objects.deepEquals(this.defaultBool, other.defaultBool) &&
            java.util.Objects.deepEquals(this.defaultDate, other.defaultDate) &&
            java.util.Objects.deepEquals(this.defaultDateTime, other.defaultDateTime) &&
            java.util.Objects.deepEquals(this.defaultDecimal, other.defaultDecimal) &&
            java.util.Objects.deepEquals(this.defaultDecimalStr, other.defaultDecimalStr) &&
            java.util.Objects.deepEquals(this.defaultEnumInt, other.defaultEnumInt) &&
            java.util.Objects.deepEquals(this.defaultEnumStr, other.defaultEnumStr) &&
            java.util.Objects.deepEquals(this.defaultInt, other.defaultInt) &&
            java.util.Objects.deepEquals(this.defaultNum, other.defaultNum) &&
            java.util.Objects.deepEquals(this.defaultStr, other.defaultStr) &&
            java.util.Objects.deepEquals(this.defaultStrDQuotes, other.defaultStrDQuotes) &&
            java.util.Objects.deepEquals(this.defaultStrNullable, other.defaultStrNullable) &&
            java.util.Objects.deepEquals(this.defaultStrOptional, other.defaultStrOptional) &&
            java.util.Objects.deepEquals(this.defaultStrSQuotes, other.defaultStrSQuotes) &&
            java.util.Objects.deepEquals(this.normalField, other.normalField);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            constBigInt,
            constBigIntStr,
            constBool,
            constDate,
            constDateTime,
            constDecimal,
            constDecimalStr,
            constEnumInt,
            constEnumStr,
            constInt,
            constNum,
            constStr,
            constStrDQuotes,
            constStrNull,
            constStrSQuotes,
            defaultBigInt,
            defaultBigIntStr,
            defaultBool,
            defaultDate,
            defaultDateTime,
            defaultDecimal,
            defaultDecimalStr,
            defaultEnumInt,
            defaultEnumStr,
            defaultInt,
            defaultNum,
            defaultStr,
            defaultStrDQuotes,
            defaultStrNullable,
            defaultStrOptional,
            defaultStrSQuotes,
            normalField);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DefaultsAndConstsOutput.class,
                "constBigInt", constBigInt,
                "constBigIntStr", constBigIntStr,
                "constBool", constBool,
                "constDate", constDate,
                "constDateTime", constDateTime,
                "constDecimal", constDecimal,
                "constDecimalStr", constDecimalStr,
                "constEnumInt", constEnumInt,
                "constEnumStr", constEnumStr,
                "constInt", constInt,
                "constNum", constNum,
                "constStr", constStr,
                "constStrDQuotes", constStrDQuotes,
                "constStrNull", constStrNull,
                "constStrSQuotes", constStrSQuotes,
                "defaultBigInt", defaultBigInt,
                "defaultBigIntStr", defaultBigIntStr,
                "defaultBool", defaultBool,
                "defaultDate", defaultDate,
                "defaultDateTime", defaultDateTime,
                "defaultDecimal", defaultDecimal,
                "defaultDecimalStr", defaultDecimalStr,
                "defaultEnumInt", defaultEnumInt,
                "defaultEnumStr", defaultEnumStr,
                "defaultInt", defaultInt,
                "defaultNum", defaultNum,
                "defaultStr", defaultStr,
                "defaultStrDQuotes", defaultStrDQuotes,
                "defaultStrNullable", defaultStrNullable,
                "defaultStrOptional", defaultStrOptional,
                "defaultStrSQuotes", defaultStrSQuotes,
                "normalField", normalField);
    }
    
    public final static class Builder {
 
        private BigInteger constBigInt;
 
        private BigInteger constBigIntStr;
 
        private Boolean constBool;
 
        private LocalDate constDate;
 
        private OffsetDateTime constDateTime;
 
        private BigDecimal constDecimal;
 
        private BigDecimal constDecimalStr;
 
        private DefaultsAndConstsOutputConstEnumInt constEnumInt;
 
        private DefaultsAndConstsOutputConstEnumStr constEnumStr;
 
        private Long constInt;
 
        private Double constNum;
 
        private String constStr;
 
        private String constStrDQuotes;
 
        private Optional<? extends String> constStrNull = Optional.empty();
 
        private String constStrSQuotes;
 
        private BigInteger defaultBigInt;
 
        private BigInteger defaultBigIntStr;
 
        private Boolean defaultBool;
 
        private LocalDate defaultDate;
 
        private OffsetDateTime defaultDateTime;
 
        private BigDecimal defaultDecimal;
 
        private BigDecimal defaultDecimalStr;
 
        private DefaultsAndConstsOutputDefaultEnumInt defaultEnumInt;
 
        private DefaultsAndConstsOutputDefaultEnumStr defaultEnumStr;
 
        private Long defaultInt;
 
        private Double defaultNum;
 
        private String defaultStr;
 
        private String defaultStrDQuotes;
 
        private Optional<? extends String> defaultStrNullable = Optional.empty();
 
        private Optional<? extends String> defaultStrOptional = Optional.empty();
 
        private String defaultStrSQuotes;
 
        private String normalField;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder constBigInt(long constBigInt) {
            this.constBigInt = BigInteger.valueOf(constBigInt);
            return this;
        }

        public Builder constBigInt(BigInteger constBigInt) {
            Utils.checkNotNull(constBigInt, "constBigInt");
            this.constBigInt = constBigInt;
            return this;
        }

        public Builder constBigIntStr(long constBigIntStr) {
            this.constBigIntStr = BigInteger.valueOf(constBigIntStr);
            return this;
        }

        public Builder constBigIntStr(BigInteger constBigIntStr) {
            Utils.checkNotNull(constBigIntStr, "constBigIntStr");
            this.constBigIntStr = constBigIntStr;
            return this;
        }

        public Builder constBool(boolean constBool) {
            Utils.checkNotNull(constBool, "constBool");
            this.constBool = constBool;
            return this;
        }

        public Builder constDate(LocalDate constDate) {
            Utils.checkNotNull(constDate, "constDate");
            this.constDate = constDate;
            return this;
        }

        public Builder constDateTime(OffsetDateTime constDateTime) {
            Utils.checkNotNull(constDateTime, "constDateTime");
            this.constDateTime = constDateTime;
            return this;
        }

        public Builder constDecimal(double constDecimal) {
            this.constDecimal = BigDecimal.valueOf(constDecimal);
            return this;
        }

        public Builder constDecimal(BigDecimal constDecimal) {
            Utils.checkNotNull(constDecimal, "constDecimal");
            this.constDecimal = constDecimal;
            return this;
        }

        public Builder constDecimalStr(double constDecimalStr) {
            this.constDecimalStr = BigDecimal.valueOf(constDecimalStr);
            return this;
        }

        public Builder constDecimalStr(BigDecimal constDecimalStr) {
            Utils.checkNotNull(constDecimalStr, "constDecimalStr");
            this.constDecimalStr = constDecimalStr;
            return this;
        }

        public Builder constEnumInt(DefaultsAndConstsOutputConstEnumInt constEnumInt) {
            Utils.checkNotNull(constEnumInt, "constEnumInt");
            this.constEnumInt = constEnumInt;
            return this;
        }

        public Builder constEnumStr(DefaultsAndConstsOutputConstEnumStr constEnumStr) {
            Utils.checkNotNull(constEnumStr, "constEnumStr");
            this.constEnumStr = constEnumStr;
            return this;
        }

        public Builder constInt(long constInt) {
            Utils.checkNotNull(constInt, "constInt");
            this.constInt = constInt;
            return this;
        }

        public Builder constNum(double constNum) {
            Utils.checkNotNull(constNum, "constNum");
            this.constNum = constNum;
            return this;
        }

        public Builder constStr(String constStr) {
            Utils.checkNotNull(constStr, "constStr");
            this.constStr = constStr;
            return this;
        }

        public Builder constStrDQuotes(String constStrDQuotes) {
            Utils.checkNotNull(constStrDQuotes, "constStrDQuotes");
            this.constStrDQuotes = constStrDQuotes;
            return this;
        }

        public Builder constStrNull(String constStrNull) {
            Utils.checkNotNull(constStrNull, "constStrNull");
            this.constStrNull = Optional.ofNullable(constStrNull);
            return this;
        }

        public Builder constStrNull(Optional<? extends String> constStrNull) {
            Utils.checkNotNull(constStrNull, "constStrNull");
            this.constStrNull = constStrNull;
            return this;
        }

        public Builder constStrSQuotes(String constStrSQuotes) {
            Utils.checkNotNull(constStrSQuotes, "constStrSQuotes");
            this.constStrSQuotes = constStrSQuotes;
            return this;
        }

        public Builder defaultBigInt(long defaultBigInt) {
            this.defaultBigInt = BigInteger.valueOf(defaultBigInt);
            return this;
        }

        public Builder defaultBigInt(BigInteger defaultBigInt) {
            Utils.checkNotNull(defaultBigInt, "defaultBigInt");
            this.defaultBigInt = defaultBigInt;
            return this;
        }

        public Builder defaultBigIntStr(long defaultBigIntStr) {
            this.defaultBigIntStr = BigInteger.valueOf(defaultBigIntStr);
            return this;
        }

        public Builder defaultBigIntStr(BigInteger defaultBigIntStr) {
            Utils.checkNotNull(defaultBigIntStr, "defaultBigIntStr");
            this.defaultBigIntStr = defaultBigIntStr;
            return this;
        }

        public Builder defaultBool(boolean defaultBool) {
            Utils.checkNotNull(defaultBool, "defaultBool");
            this.defaultBool = defaultBool;
            return this;
        }

        public Builder defaultDate(LocalDate defaultDate) {
            Utils.checkNotNull(defaultDate, "defaultDate");
            this.defaultDate = defaultDate;
            return this;
        }

        public Builder defaultDateTime(OffsetDateTime defaultDateTime) {
            Utils.checkNotNull(defaultDateTime, "defaultDateTime");
            this.defaultDateTime = defaultDateTime;
            return this;
        }

        public Builder defaultDecimal(double defaultDecimal) {
            this.defaultDecimal = BigDecimal.valueOf(defaultDecimal);
            return this;
        }

        public Builder defaultDecimal(BigDecimal defaultDecimal) {
            Utils.checkNotNull(defaultDecimal, "defaultDecimal");
            this.defaultDecimal = defaultDecimal;
            return this;
        }

        public Builder defaultDecimalStr(double defaultDecimalStr) {
            this.defaultDecimalStr = BigDecimal.valueOf(defaultDecimalStr);
            return this;
        }

        public Builder defaultDecimalStr(BigDecimal defaultDecimalStr) {
            Utils.checkNotNull(defaultDecimalStr, "defaultDecimalStr");
            this.defaultDecimalStr = defaultDecimalStr;
            return this;
        }

        public Builder defaultEnumInt(DefaultsAndConstsOutputDefaultEnumInt defaultEnumInt) {
            Utils.checkNotNull(defaultEnumInt, "defaultEnumInt");
            this.defaultEnumInt = defaultEnumInt;
            return this;
        }

        public Builder defaultEnumStr(DefaultsAndConstsOutputDefaultEnumStr defaultEnumStr) {
            Utils.checkNotNull(defaultEnumStr, "defaultEnumStr");
            this.defaultEnumStr = defaultEnumStr;
            return this;
        }

        public Builder defaultInt(long defaultInt) {
            Utils.checkNotNull(defaultInt, "defaultInt");
            this.defaultInt = defaultInt;
            return this;
        }

        public Builder defaultNum(double defaultNum) {
            Utils.checkNotNull(defaultNum, "defaultNum");
            this.defaultNum = defaultNum;
            return this;
        }

        public Builder defaultStr(String defaultStr) {
            Utils.checkNotNull(defaultStr, "defaultStr");
            this.defaultStr = defaultStr;
            return this;
        }

        public Builder defaultStrDQuotes(String defaultStrDQuotes) {
            Utils.checkNotNull(defaultStrDQuotes, "defaultStrDQuotes");
            this.defaultStrDQuotes = defaultStrDQuotes;
            return this;
        }

        public Builder defaultStrNullable(String defaultStrNullable) {
            Utils.checkNotNull(defaultStrNullable, "defaultStrNullable");
            this.defaultStrNullable = Optional.ofNullable(defaultStrNullable);
            return this;
        }

        public Builder defaultStrNullable(Optional<? extends String> defaultStrNullable) {
            Utils.checkNotNull(defaultStrNullable, "defaultStrNullable");
            this.defaultStrNullable = defaultStrNullable;
            return this;
        }

        public Builder defaultStrOptional(String defaultStrOptional) {
            Utils.checkNotNull(defaultStrOptional, "defaultStrOptional");
            this.defaultStrOptional = Optional.ofNullable(defaultStrOptional);
            return this;
        }

        public Builder defaultStrOptional(Optional<? extends String> defaultStrOptional) {
            Utils.checkNotNull(defaultStrOptional, "defaultStrOptional");
            this.defaultStrOptional = defaultStrOptional;
            return this;
        }

        public Builder defaultStrSQuotes(String defaultStrSQuotes) {
            Utils.checkNotNull(defaultStrSQuotes, "defaultStrSQuotes");
            this.defaultStrSQuotes = defaultStrSQuotes;
            return this;
        }

        public Builder normalField(String normalField) {
            Utils.checkNotNull(normalField, "normalField");
            this.normalField = normalField;
            return this;
        }
        
        public DefaultsAndConstsOutput build() {
            return new DefaultsAndConstsOutput(
                constBigInt,
                constBigIntStr,
                constBool,
                constDate,
                constDateTime,
                constDecimal,
                constDecimalStr,
                constEnumInt,
                constEnumStr,
                constInt,
                constNum,
                constStr,
                constStrDQuotes,
                constStrNull,
                constStrSQuotes,
                defaultBigInt,
                defaultBigIntStr,
                defaultBool,
                defaultDate,
                defaultDateTime,
                defaultDecimal,
                defaultDecimalStr,
                defaultEnumInt,
                defaultEnumStr,
                defaultInt,
                defaultNum,
                defaultStr,
                defaultStrDQuotes,
                defaultStrNullable,
                defaultStrOptional,
                defaultStrSQuotes,
                normalField);
        }
    }
}

