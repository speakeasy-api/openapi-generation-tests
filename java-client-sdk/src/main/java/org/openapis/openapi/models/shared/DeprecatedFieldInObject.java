/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class DeprecatedFieldInObject {

    /**
     * @deprecated field: This enum is deprecated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deprecatedEnum")
    @Deprecated
    private Optional<? extends DeprecatedEnum> deprecatedEnum;

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible. Use newField instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deprecatedField")
    @Deprecated
    private Optional<? extends String> deprecatedField;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("newField")
    private Optional<? extends String> newField;

    public DeprecatedFieldInObject(
            @JsonProperty("deprecatedEnum") Optional<? extends DeprecatedEnum> deprecatedEnum,
            @JsonProperty("deprecatedField") Optional<? extends String> deprecatedField,
            @JsonProperty("newField") Optional<? extends String> newField) {
        Utils.checkNotNull(deprecatedEnum, "deprecatedEnum");
        Utils.checkNotNull(deprecatedField, "deprecatedField");
        Utils.checkNotNull(newField, "newField");
        this.deprecatedEnum = deprecatedEnum;
        this.deprecatedField = deprecatedField;
        this.newField = newField;
    }

    /**
     * @deprecated field: This enum is deprecated.
     */
    @Deprecated
    public Optional<? extends DeprecatedEnum> deprecatedEnum() {
        return deprecatedEnum;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible. Use newField instead.
     */
    @Deprecated
    public Optional<? extends String> deprecatedField() {
        return deprecatedField;
    }

    public Optional<? extends String> newField() {
        return newField;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * @deprecated field: This enum is deprecated.
     */
    @Deprecated
    public DeprecatedFieldInObject withDeprecatedEnum(DeprecatedEnum deprecatedEnum) {
        Utils.checkNotNull(deprecatedEnum, "deprecatedEnum");
        this.deprecatedEnum = Optional.ofNullable(deprecatedEnum);
        return this;
    }

    /**
     * @deprecated field: This enum is deprecated.
     */
    @Deprecated
    public DeprecatedFieldInObject withDeprecatedEnum(Optional<? extends DeprecatedEnum> deprecatedEnum) {
        Utils.checkNotNull(deprecatedEnum, "deprecatedEnum");
        this.deprecatedEnum = deprecatedEnum;
        return this;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible. Use newField instead.
     */
    @Deprecated
    public DeprecatedFieldInObject withDeprecatedField(String deprecatedField) {
        Utils.checkNotNull(deprecatedField, "deprecatedField");
        this.deprecatedField = Optional.ofNullable(deprecatedField);
        return this;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible. Use newField instead.
     */
    @Deprecated
    public DeprecatedFieldInObject withDeprecatedField(Optional<? extends String> deprecatedField) {
        Utils.checkNotNull(deprecatedField, "deprecatedField");
        this.deprecatedField = deprecatedField;
        return this;
    }

    public DeprecatedFieldInObject withNewField(String newField) {
        Utils.checkNotNull(newField, "newField");
        this.newField = Optional.ofNullable(newField);
        return this;
    }

    public DeprecatedFieldInObject withNewField(Optional<? extends String> newField) {
        Utils.checkNotNull(newField, "newField");
        this.newField = newField;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeprecatedFieldInObject other = (DeprecatedFieldInObject) o;
        return 
            java.util.Objects.deepEquals(this.deprecatedEnum, other.deprecatedEnum) &&
            java.util.Objects.deepEquals(this.deprecatedField, other.deprecatedField) &&
            java.util.Objects.deepEquals(this.newField, other.newField);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            deprecatedEnum,
            deprecatedField,
            newField);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DeprecatedFieldInObject.class,
                "deprecatedEnum", deprecatedEnum,
                "deprecatedField", deprecatedField,
                "newField", newField);
    }
    
    public final static class Builder {
 
        @Deprecated
        private Optional<? extends DeprecatedEnum> deprecatedEnum = Optional.empty();
 
        @Deprecated
        private Optional<? extends String> deprecatedField = Optional.empty();
 
        private Optional<? extends String> newField = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * @deprecated field: This enum is deprecated.
         */
        @Deprecated
        public Builder deprecatedEnum(DeprecatedEnum deprecatedEnum) {
            Utils.checkNotNull(deprecatedEnum, "deprecatedEnum");
            this.deprecatedEnum = Optional.ofNullable(deprecatedEnum);
            return this;
        }

        /**
         * @deprecated field: This enum is deprecated.
         */
        @Deprecated
        public Builder deprecatedEnum(Optional<? extends DeprecatedEnum> deprecatedEnum) {
            Utils.checkNotNull(deprecatedEnum, "deprecatedEnum");
            this.deprecatedEnum = deprecatedEnum;
            return this;
        }

        /**
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible. Use newField instead.
         */
        @Deprecated
        public Builder deprecatedField(String deprecatedField) {
            Utils.checkNotNull(deprecatedField, "deprecatedField");
            this.deprecatedField = Optional.ofNullable(deprecatedField);
            return this;
        }

        /**
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible. Use newField instead.
         */
        @Deprecated
        public Builder deprecatedField(Optional<? extends String> deprecatedField) {
            Utils.checkNotNull(deprecatedField, "deprecatedField");
            this.deprecatedField = deprecatedField;
            return this;
        }

        public Builder newField(String newField) {
            Utils.checkNotNull(newField, "newField");
            this.newField = Optional.ofNullable(newField);
            return this;
        }

        public Builder newField(Optional<? extends String> newField) {
            Utils.checkNotNull(newField, "newField");
            this.newField = newField;
            return this;
        }
        
        public DeprecatedFieldInObject build() {
            return new DeprecatedFieldInObject(
                deprecatedEnum,
                deprecatedField,
                newField);
        }
    }
}

