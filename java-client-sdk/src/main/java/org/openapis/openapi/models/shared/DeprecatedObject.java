/* 
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;
/**
 * DeprecatedObject
 * @deprecated class: This object is deprecated.
 */
@Deprecated
public class DeprecatedObject {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("str")
    private Optional<? extends String> str;

    @JsonCreator
    public DeprecatedObject(
            @JsonProperty("str") Optional<? extends String> str) {
        Utils.checkNotNull(str, "str");
        this.str = str;
    }
    
    public DeprecatedObject() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> str() {
        return (Optional<String>) str;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public DeprecatedObject withStr(String str) {
        Utils.checkNotNull(str, "str");
        this.str = Optional.ofNullable(str);
        return this;
    }

    public DeprecatedObject withStr(Optional<? extends String> str) {
        Utils.checkNotNull(str, "str");
        this.str = str;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeprecatedObject other = (DeprecatedObject) o;
        return 
            java.util.Objects.deepEquals(this.str, other.str);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            str);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DeprecatedObject.class,
                "str", str);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> str = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder str(String str) {
            Utils.checkNotNull(str, "str");
            this.str = Optional.ofNullable(str);
            return this;
        }

        public Builder str(Optional<? extends String> str) {
            Utils.checkNotNull(str, "str");
            this.str = str;
            return this;
        }
        
        public DeprecatedObject build() {
            return new DeprecatedObject(
                str);
        }
    }
}

