/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.Utils;
/**
 * DifferentDataSchemas - Represents an event with different schemas for the data property
 */

public class DifferentDataSchemas {

    @JsonProperty("data")
    private DifferentDataSchemasData data;

    @JsonProperty("event")
    private Event event;

    @JsonProperty("id")
    private String id;

    @JsonCreator
    public DifferentDataSchemas(
            @JsonProperty("data") DifferentDataSchemasData data,
            @JsonProperty("event") Event event,
            @JsonProperty("id") String id) {
        Utils.checkNotNull(data, "data");
        Utils.checkNotNull(event, "event");
        Utils.checkNotNull(id, "id");
        this.data = data;
        this.event = event;
        this.id = id;
    }

    @JsonIgnore
    public DifferentDataSchemasData data() {
        return data;
    }

    @JsonIgnore
    public Event event() {
        return event;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public DifferentDataSchemas withData(DifferentDataSchemasData data) {
        Utils.checkNotNull(data, "data");
        this.data = data;
        return this;
    }

    public DifferentDataSchemas withEvent(Event event) {
        Utils.checkNotNull(event, "event");
        this.event = event;
        return this;
    }

    public DifferentDataSchemas withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DifferentDataSchemas other = (DifferentDataSchemas) o;
        return 
            java.util.Objects.deepEquals(this.data, other.data) &&
            java.util.Objects.deepEquals(this.event, other.event) &&
            java.util.Objects.deepEquals(this.id, other.id);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            data,
            event,
            id);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DifferentDataSchemas.class,
                "data", data,
                "event", event,
                "id", id);
    }
    
    public final static class Builder {
 
        private DifferentDataSchemasData data;
 
        private Event event;
 
        private String id;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder data(DifferentDataSchemasData data) {
            Utils.checkNotNull(data, "data");
            this.data = data;
            return this;
        }

        public Builder event(Event event) {
            Utils.checkNotNull(event, "event");
            this.event = event;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }
        
        public DifferentDataSchemas build() {
            return new DifferentDataSchemas(
                data,
                event,
                id);
        }
    }
}

