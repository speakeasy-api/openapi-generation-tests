/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class ExampleResource {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("arrayOfNumber")
    private Optional<? extends List<Double>> arrayOfNumber;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("arrayOfString")
    private Optional<? extends List<String>> arrayOfString;

    @JsonProperty("chocolates")
    private List<Chocolates> chocolates;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Optional<OffsetDateTime> createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enumNumber")
    private Optional<? extends EnumNumber> enumNumber;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enumStr")
    private Optional<? extends EnumStr> enumStr;

    @JsonProperty("id")
    private String id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inlineObject")
    private Optional<? extends InlineObject> inlineObject;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mapOfInteger")
    private Optional<? extends Map<String, Long>> mapOfInteger;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mapOfString")
    private Optional<? extends Map<String, String>> mapOfString;

    @JsonProperty("name")
    private String name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name_prefix")
    private Optional<String> namePrefix;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedAt")
    private Optional<OffsetDateTime> updatedAt;

    @JsonProperty("vehicle")
    private ExampleVehicle vehicle;

    @JsonCreator
    public ExampleResource(
            @JsonProperty("arrayOfNumber") Optional<? extends List<Double>> arrayOfNumber,
            @JsonProperty("arrayOfString") Optional<? extends List<String>> arrayOfString,
            @JsonProperty("chocolates") List<Chocolates> chocolates,
            @JsonProperty("createdAt") Optional<OffsetDateTime> createdAt,
            @JsonProperty("enumNumber") Optional<? extends EnumNumber> enumNumber,
            @JsonProperty("enumStr") Optional<? extends EnumStr> enumStr,
            @JsonProperty("id") String id,
            @JsonProperty("inlineObject") Optional<? extends InlineObject> inlineObject,
            @JsonProperty("mapOfInteger") Optional<? extends Map<String, Long>> mapOfInteger,
            @JsonProperty("mapOfString") Optional<? extends Map<String, String>> mapOfString,
            @JsonProperty("name") String name,
            @JsonProperty("name_prefix") Optional<String> namePrefix,
            @JsonProperty("updatedAt") Optional<OffsetDateTime> updatedAt,
            @JsonProperty("vehicle") ExampleVehicle vehicle) {
        Utils.checkNotNull(arrayOfNumber, "arrayOfNumber");
        Utils.checkNotNull(arrayOfString, "arrayOfString");
        Utils.checkNotNull(chocolates, "chocolates");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(enumNumber, "enumNumber");
        Utils.checkNotNull(enumStr, "enumStr");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(inlineObject, "inlineObject");
        Utils.checkNotNull(mapOfInteger, "mapOfInteger");
        Utils.checkNotNull(mapOfString, "mapOfString");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(namePrefix, "namePrefix");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(vehicle, "vehicle");
        this.arrayOfNumber = arrayOfNumber;
        this.arrayOfString = arrayOfString;
        this.chocolates = chocolates;
        this.createdAt = createdAt;
        this.enumNumber = enumNumber;
        this.enumStr = enumStr;
        this.id = id;
        this.inlineObject = inlineObject;
        this.mapOfInteger = mapOfInteger;
        this.mapOfString = mapOfString;
        this.name = name;
        this.namePrefix = namePrefix;
        this.updatedAt = updatedAt;
        this.vehicle = vehicle;
    }
    
    public ExampleResource(
            List<Chocolates> chocolates,
            String id,
            String name,
            ExampleVehicle vehicle) {
        this(Optional.empty(), Optional.empty(), chocolates, Optional.empty(), Optional.empty(), Optional.empty(), id, Optional.empty(), Optional.empty(), Optional.empty(), name, Optional.empty(), Optional.empty(), vehicle);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Double>> arrayOfNumber() {
        return (Optional<List<Double>>) arrayOfNumber;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> arrayOfString() {
        return (Optional<List<String>>) arrayOfString;
    }

    @JsonIgnore
    public List<Chocolates> chocolates() {
        return chocolates;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EnumNumber> enumNumber() {
        return (Optional<EnumNumber>) enumNumber;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EnumStr> enumStr() {
        return (Optional<EnumStr>) enumStr;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<InlineObject> inlineObject() {
        return (Optional<InlineObject>) inlineObject;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Long>> mapOfInteger() {
        return (Optional<Map<String, Long>>) mapOfInteger;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, String>> mapOfString() {
        return (Optional<Map<String, String>>) mapOfString;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public Optional<String> namePrefix() {
        return namePrefix;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    @JsonIgnore
    public ExampleVehicle vehicle() {
        return vehicle;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ExampleResource withArrayOfNumber(List<Double> arrayOfNumber) {
        Utils.checkNotNull(arrayOfNumber, "arrayOfNumber");
        this.arrayOfNumber = Optional.ofNullable(arrayOfNumber);
        return this;
    }

    public ExampleResource withArrayOfNumber(Optional<? extends List<Double>> arrayOfNumber) {
        Utils.checkNotNull(arrayOfNumber, "arrayOfNumber");
        this.arrayOfNumber = arrayOfNumber;
        return this;
    }

    public ExampleResource withArrayOfString(List<String> arrayOfString) {
        Utils.checkNotNull(arrayOfString, "arrayOfString");
        this.arrayOfString = Optional.ofNullable(arrayOfString);
        return this;
    }

    public ExampleResource withArrayOfString(Optional<? extends List<String>> arrayOfString) {
        Utils.checkNotNull(arrayOfString, "arrayOfString");
        this.arrayOfString = arrayOfString;
        return this;
    }

    public ExampleResource withChocolates(List<Chocolates> chocolates) {
        Utils.checkNotNull(chocolates, "chocolates");
        this.chocolates = chocolates;
        return this;
    }

    public ExampleResource withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public ExampleResource withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public ExampleResource withEnumNumber(EnumNumber enumNumber) {
        Utils.checkNotNull(enumNumber, "enumNumber");
        this.enumNumber = Optional.ofNullable(enumNumber);
        return this;
    }

    public ExampleResource withEnumNumber(Optional<? extends EnumNumber> enumNumber) {
        Utils.checkNotNull(enumNumber, "enumNumber");
        this.enumNumber = enumNumber;
        return this;
    }

    public ExampleResource withEnumStr(EnumStr enumStr) {
        Utils.checkNotNull(enumStr, "enumStr");
        this.enumStr = Optional.ofNullable(enumStr);
        return this;
    }

    public ExampleResource withEnumStr(Optional<? extends EnumStr> enumStr) {
        Utils.checkNotNull(enumStr, "enumStr");
        this.enumStr = enumStr;
        return this;
    }

    public ExampleResource withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public ExampleResource withInlineObject(InlineObject inlineObject) {
        Utils.checkNotNull(inlineObject, "inlineObject");
        this.inlineObject = Optional.ofNullable(inlineObject);
        return this;
    }

    public ExampleResource withInlineObject(Optional<? extends InlineObject> inlineObject) {
        Utils.checkNotNull(inlineObject, "inlineObject");
        this.inlineObject = inlineObject;
        return this;
    }

    public ExampleResource withMapOfInteger(Map<String, Long> mapOfInteger) {
        Utils.checkNotNull(mapOfInteger, "mapOfInteger");
        this.mapOfInteger = Optional.ofNullable(mapOfInteger);
        return this;
    }

    public ExampleResource withMapOfInteger(Optional<? extends Map<String, Long>> mapOfInteger) {
        Utils.checkNotNull(mapOfInteger, "mapOfInteger");
        this.mapOfInteger = mapOfInteger;
        return this;
    }

    public ExampleResource withMapOfString(Map<String, String> mapOfString) {
        Utils.checkNotNull(mapOfString, "mapOfString");
        this.mapOfString = Optional.ofNullable(mapOfString);
        return this;
    }

    public ExampleResource withMapOfString(Optional<? extends Map<String, String>> mapOfString) {
        Utils.checkNotNull(mapOfString, "mapOfString");
        this.mapOfString = mapOfString;
        return this;
    }

    public ExampleResource withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public ExampleResource withNamePrefix(String namePrefix) {
        Utils.checkNotNull(namePrefix, "namePrefix");
        this.namePrefix = Optional.ofNullable(namePrefix);
        return this;
    }

    public ExampleResource withNamePrefix(Optional<String> namePrefix) {
        Utils.checkNotNull(namePrefix, "namePrefix");
        this.namePrefix = namePrefix;
        return this;
    }

    public ExampleResource withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public ExampleResource withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public ExampleResource withVehicle(ExampleVehicle vehicle) {
        Utils.checkNotNull(vehicle, "vehicle");
        this.vehicle = vehicle;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExampleResource other = (ExampleResource) o;
        return 
            Objects.deepEquals(this.arrayOfNumber, other.arrayOfNumber) &&
            Objects.deepEquals(this.arrayOfString, other.arrayOfString) &&
            Objects.deepEquals(this.chocolates, other.chocolates) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.enumNumber, other.enumNumber) &&
            Objects.deepEquals(this.enumStr, other.enumStr) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.inlineObject, other.inlineObject) &&
            Objects.deepEquals(this.mapOfInteger, other.mapOfInteger) &&
            Objects.deepEquals(this.mapOfString, other.mapOfString) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.namePrefix, other.namePrefix) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.vehicle, other.vehicle);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            arrayOfNumber,
            arrayOfString,
            chocolates,
            createdAt,
            enumNumber,
            enumStr,
            id,
            inlineObject,
            mapOfInteger,
            mapOfString,
            name,
            namePrefix,
            updatedAt,
            vehicle);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ExampleResource.class,
                "arrayOfNumber", arrayOfNumber,
                "arrayOfString", arrayOfString,
                "chocolates", chocolates,
                "createdAt", createdAt,
                "enumNumber", enumNumber,
                "enumStr", enumStr,
                "id", id,
                "inlineObject", inlineObject,
                "mapOfInteger", mapOfInteger,
                "mapOfString", mapOfString,
                "name", name,
                "namePrefix", namePrefix,
                "updatedAt", updatedAt,
                "vehicle", vehicle);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<Double>> arrayOfNumber = Optional.empty();
 
        private Optional<? extends List<String>> arrayOfString = Optional.empty();
 
        private List<Chocolates> chocolates;
 
        private Optional<OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<? extends EnumNumber> enumNumber = Optional.empty();
 
        private Optional<? extends EnumStr> enumStr = Optional.empty();
 
        private String id;
 
        private Optional<? extends InlineObject> inlineObject = Optional.empty();
 
        private Optional<? extends Map<String, Long>> mapOfInteger = Optional.empty();
 
        private Optional<? extends Map<String, String>> mapOfString = Optional.empty();
 
        private String name;
 
        private Optional<String> namePrefix = Optional.empty();
 
        private Optional<OffsetDateTime> updatedAt = Optional.empty();
 
        private ExampleVehicle vehicle;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder arrayOfNumber(List<Double> arrayOfNumber) {
            Utils.checkNotNull(arrayOfNumber, "arrayOfNumber");
            this.arrayOfNumber = Optional.ofNullable(arrayOfNumber);
            return this;
        }

        public Builder arrayOfNumber(Optional<? extends List<Double>> arrayOfNumber) {
            Utils.checkNotNull(arrayOfNumber, "arrayOfNumber");
            this.arrayOfNumber = arrayOfNumber;
            return this;
        }

        public Builder arrayOfString(List<String> arrayOfString) {
            Utils.checkNotNull(arrayOfString, "arrayOfString");
            this.arrayOfString = Optional.ofNullable(arrayOfString);
            return this;
        }

        public Builder arrayOfString(Optional<? extends List<String>> arrayOfString) {
            Utils.checkNotNull(arrayOfString, "arrayOfString");
            this.arrayOfString = arrayOfString;
            return this;
        }

        public Builder chocolates(List<Chocolates> chocolates) {
            Utils.checkNotNull(chocolates, "chocolates");
            this.chocolates = chocolates;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder enumNumber(EnumNumber enumNumber) {
            Utils.checkNotNull(enumNumber, "enumNumber");
            this.enumNumber = Optional.ofNullable(enumNumber);
            return this;
        }

        public Builder enumNumber(Optional<? extends EnumNumber> enumNumber) {
            Utils.checkNotNull(enumNumber, "enumNumber");
            this.enumNumber = enumNumber;
            return this;
        }

        public Builder enumStr(EnumStr enumStr) {
            Utils.checkNotNull(enumStr, "enumStr");
            this.enumStr = Optional.ofNullable(enumStr);
            return this;
        }

        public Builder enumStr(Optional<? extends EnumStr> enumStr) {
            Utils.checkNotNull(enumStr, "enumStr");
            this.enumStr = enumStr;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder inlineObject(InlineObject inlineObject) {
            Utils.checkNotNull(inlineObject, "inlineObject");
            this.inlineObject = Optional.ofNullable(inlineObject);
            return this;
        }

        public Builder inlineObject(Optional<? extends InlineObject> inlineObject) {
            Utils.checkNotNull(inlineObject, "inlineObject");
            this.inlineObject = inlineObject;
            return this;
        }

        public Builder mapOfInteger(Map<String, Long> mapOfInteger) {
            Utils.checkNotNull(mapOfInteger, "mapOfInteger");
            this.mapOfInteger = Optional.ofNullable(mapOfInteger);
            return this;
        }

        public Builder mapOfInteger(Optional<? extends Map<String, Long>> mapOfInteger) {
            Utils.checkNotNull(mapOfInteger, "mapOfInteger");
            this.mapOfInteger = mapOfInteger;
            return this;
        }

        public Builder mapOfString(Map<String, String> mapOfString) {
            Utils.checkNotNull(mapOfString, "mapOfString");
            this.mapOfString = Optional.ofNullable(mapOfString);
            return this;
        }

        public Builder mapOfString(Optional<? extends Map<String, String>> mapOfString) {
            Utils.checkNotNull(mapOfString, "mapOfString");
            this.mapOfString = mapOfString;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder namePrefix(String namePrefix) {
            Utils.checkNotNull(namePrefix, "namePrefix");
            this.namePrefix = Optional.ofNullable(namePrefix);
            return this;
        }

        public Builder namePrefix(Optional<String> namePrefix) {
            Utils.checkNotNull(namePrefix, "namePrefix");
            this.namePrefix = namePrefix;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder vehicle(ExampleVehicle vehicle) {
            Utils.checkNotNull(vehicle, "vehicle");
            this.vehicle = vehicle;
            return this;
        }
        
        public ExampleResource build() {
            return new ExampleResource(
                arrayOfNumber,
                arrayOfString,
                chocolates,
                createdAt,
                enumNumber,
                enumStr,
                id,
                inlineObject,
                mapOfInteger,
                mapOfString,
                name,
                namePrefix,
                updatedAt,
                vehicle);
        }
    }
}

