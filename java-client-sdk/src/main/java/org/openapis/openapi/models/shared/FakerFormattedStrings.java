/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Objects;
import org.openapis.openapi.utils.Utils;

/**
 * FakerFormattedStrings - A set of strings with format values that lead to relevant examples being generated for them
 */

public class FakerFormattedStrings {

    /**
     * A field that will have an address generated as example
     */
    @JsonProperty("addressFormat")
    private String addressFormat;

    /**
     * A field that will have RFC3339 formatted datestamp generated as example
     */
    @JsonProperty("dateFormat")
    private LocalDate dateFormat;

    /**
     * A field that will have RFC3339 formatted timestamp generated as example
     */
    @JsonProperty("datetimeFormat")
    private OffsetDateTime datetimeFormat;

    /**
     * A field that will have a directory path generated as example
     */
    @JsonProperty("directoryFormat")
    private String directoryFormat;

    /**
     * A field that will have a domain name generated as example
     */
    @JsonProperty("domainFormat")
    private String domainFormat;

    /**
     * A field that will have an email address generated as example
     */
    @JsonProperty("emailFormat")
    private String emailFormat;

    /**
     * A field that will have a filename generated as example
     */
    @JsonProperty("filenameFormat")
    private String filenameFormat;

    /**
     * A field that will have a file path generated as example
     */
    @JsonProperty("filepathFormat")
    private String filepathFormat;

    /**
     * A field that will have a image url generated as example
     */
    @JsonProperty("imageFormat")
    private String imageFormat;

    /**
     * A field that will have an IPv4 address generated as example
     */
    @JsonProperty("ipv4Format")
    private String ipv4Format;

    /**
     * A field that will have an IPv6 address generated as example
     */
    @JsonProperty("ipv6Format")
    private String ipv6Format;

    /**
     * A field that will have a JSON generated as example
     */
    @JsonProperty("jsonFormat")
    private String jsonFormat;

    /**
     * A field that will have a MAC address generated as example
     */
    @JsonProperty("macFormat")
    private String macFormat;

    /**
     * A field that will have a fake password generated as example
     */
    @JsonProperty("passwordFormat")
    private String passwordFormat;

    /**
     * A field that will have a phone number generated as example
     */
    @JsonProperty("phoneFormat")
    private String phoneFormat;

    /**
     * A field that will have a timezone generated as example
     */
    @JsonProperty("timezoneFormat")
    private String timezoneFormat;

    /**
     * A field that will have random words generated as example
     */
    @JsonProperty("unknownFormat")
    private String unknownFormat;

    /**
     * A field that will have a URL generated as example
     */
    @JsonProperty("urlFormat")
    private String urlFormat;

    /**
     * A field that will have a UUID generated as example
     */
    @JsonProperty("uuidFormat")
    private String uuidFormat;

    /**
     * A field that will have a postal code generated as example
     */
    @JsonProperty("zipcodeFormat")
    private String zipcodeFormat;

    @JsonCreator
    public FakerFormattedStrings(
            @JsonProperty("addressFormat") String addressFormat,
            @JsonProperty("dateFormat") LocalDate dateFormat,
            @JsonProperty("datetimeFormat") OffsetDateTime datetimeFormat,
            @JsonProperty("directoryFormat") String directoryFormat,
            @JsonProperty("domainFormat") String domainFormat,
            @JsonProperty("emailFormat") String emailFormat,
            @JsonProperty("filenameFormat") String filenameFormat,
            @JsonProperty("filepathFormat") String filepathFormat,
            @JsonProperty("imageFormat") String imageFormat,
            @JsonProperty("ipv4Format") String ipv4Format,
            @JsonProperty("ipv6Format") String ipv6Format,
            @JsonProperty("jsonFormat") String jsonFormat,
            @JsonProperty("macFormat") String macFormat,
            @JsonProperty("passwordFormat") String passwordFormat,
            @JsonProperty("phoneFormat") String phoneFormat,
            @JsonProperty("timezoneFormat") String timezoneFormat,
            @JsonProperty("unknownFormat") String unknownFormat,
            @JsonProperty("urlFormat") String urlFormat,
            @JsonProperty("uuidFormat") String uuidFormat,
            @JsonProperty("zipcodeFormat") String zipcodeFormat) {
        Utils.checkNotNull(addressFormat, "addressFormat");
        Utils.checkNotNull(dateFormat, "dateFormat");
        Utils.checkNotNull(datetimeFormat, "datetimeFormat");
        Utils.checkNotNull(directoryFormat, "directoryFormat");
        Utils.checkNotNull(domainFormat, "domainFormat");
        Utils.checkNotNull(emailFormat, "emailFormat");
        Utils.checkNotNull(filenameFormat, "filenameFormat");
        Utils.checkNotNull(filepathFormat, "filepathFormat");
        Utils.checkNotNull(imageFormat, "imageFormat");
        Utils.checkNotNull(ipv4Format, "ipv4Format");
        Utils.checkNotNull(ipv6Format, "ipv6Format");
        Utils.checkNotNull(jsonFormat, "jsonFormat");
        Utils.checkNotNull(macFormat, "macFormat");
        Utils.checkNotNull(passwordFormat, "passwordFormat");
        Utils.checkNotNull(phoneFormat, "phoneFormat");
        Utils.checkNotNull(timezoneFormat, "timezoneFormat");
        Utils.checkNotNull(unknownFormat, "unknownFormat");
        Utils.checkNotNull(urlFormat, "urlFormat");
        Utils.checkNotNull(uuidFormat, "uuidFormat");
        Utils.checkNotNull(zipcodeFormat, "zipcodeFormat");
        this.addressFormat = addressFormat;
        this.dateFormat = dateFormat;
        this.datetimeFormat = datetimeFormat;
        this.directoryFormat = directoryFormat;
        this.domainFormat = domainFormat;
        this.emailFormat = emailFormat;
        this.filenameFormat = filenameFormat;
        this.filepathFormat = filepathFormat;
        this.imageFormat = imageFormat;
        this.ipv4Format = ipv4Format;
        this.ipv6Format = ipv6Format;
        this.jsonFormat = jsonFormat;
        this.macFormat = macFormat;
        this.passwordFormat = passwordFormat;
        this.phoneFormat = phoneFormat;
        this.timezoneFormat = timezoneFormat;
        this.unknownFormat = unknownFormat;
        this.urlFormat = urlFormat;
        this.uuidFormat = uuidFormat;
        this.zipcodeFormat = zipcodeFormat;
    }

    /**
     * A field that will have an address generated as example
     */
    @JsonIgnore
    public String addressFormat() {
        return addressFormat;
    }

    /**
     * A field that will have RFC3339 formatted datestamp generated as example
     */
    @JsonIgnore
    public LocalDate dateFormat() {
        return dateFormat;
    }

    /**
     * A field that will have RFC3339 formatted timestamp generated as example
     */
    @JsonIgnore
    public OffsetDateTime datetimeFormat() {
        return datetimeFormat;
    }

    /**
     * A field that will have a directory path generated as example
     */
    @JsonIgnore
    public String directoryFormat() {
        return directoryFormat;
    }

    /**
     * A field that will have a domain name generated as example
     */
    @JsonIgnore
    public String domainFormat() {
        return domainFormat;
    }

    /**
     * A field that will have an email address generated as example
     */
    @JsonIgnore
    public String emailFormat() {
        return emailFormat;
    }

    /**
     * A field that will have a filename generated as example
     */
    @JsonIgnore
    public String filenameFormat() {
        return filenameFormat;
    }

    /**
     * A field that will have a file path generated as example
     */
    @JsonIgnore
    public String filepathFormat() {
        return filepathFormat;
    }

    /**
     * A field that will have a image url generated as example
     */
    @JsonIgnore
    public String imageFormat() {
        return imageFormat;
    }

    /**
     * A field that will have an IPv4 address generated as example
     */
    @JsonIgnore
    public String ipv4Format() {
        return ipv4Format;
    }

    /**
     * A field that will have an IPv6 address generated as example
     */
    @JsonIgnore
    public String ipv6Format() {
        return ipv6Format;
    }

    /**
     * A field that will have a JSON generated as example
     */
    @JsonIgnore
    public String jsonFormat() {
        return jsonFormat;
    }

    /**
     * A field that will have a MAC address generated as example
     */
    @JsonIgnore
    public String macFormat() {
        return macFormat;
    }

    /**
     * A field that will have a fake password generated as example
     */
    @JsonIgnore
    public String passwordFormat() {
        return passwordFormat;
    }

    /**
     * A field that will have a phone number generated as example
     */
    @JsonIgnore
    public String phoneFormat() {
        return phoneFormat;
    }

    /**
     * A field that will have a timezone generated as example
     */
    @JsonIgnore
    public String timezoneFormat() {
        return timezoneFormat;
    }

    /**
     * A field that will have random words generated as example
     */
    @JsonIgnore
    public String unknownFormat() {
        return unknownFormat;
    }

    /**
     * A field that will have a URL generated as example
     */
    @JsonIgnore
    public String urlFormat() {
        return urlFormat;
    }

    /**
     * A field that will have a UUID generated as example
     */
    @JsonIgnore
    public String uuidFormat() {
        return uuidFormat;
    }

    /**
     * A field that will have a postal code generated as example
     */
    @JsonIgnore
    public String zipcodeFormat() {
        return zipcodeFormat;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A field that will have an address generated as example
     */
    public FakerFormattedStrings withAddressFormat(String addressFormat) {
        Utils.checkNotNull(addressFormat, "addressFormat");
        this.addressFormat = addressFormat;
        return this;
    }

    /**
     * A field that will have RFC3339 formatted datestamp generated as example
     */
    public FakerFormattedStrings withDateFormat(LocalDate dateFormat) {
        Utils.checkNotNull(dateFormat, "dateFormat");
        this.dateFormat = dateFormat;
        return this;
    }

    /**
     * A field that will have RFC3339 formatted timestamp generated as example
     */
    public FakerFormattedStrings withDatetimeFormat(OffsetDateTime datetimeFormat) {
        Utils.checkNotNull(datetimeFormat, "datetimeFormat");
        this.datetimeFormat = datetimeFormat;
        return this;
    }

    /**
     * A field that will have a directory path generated as example
     */
    public FakerFormattedStrings withDirectoryFormat(String directoryFormat) {
        Utils.checkNotNull(directoryFormat, "directoryFormat");
        this.directoryFormat = directoryFormat;
        return this;
    }

    /**
     * A field that will have a domain name generated as example
     */
    public FakerFormattedStrings withDomainFormat(String domainFormat) {
        Utils.checkNotNull(domainFormat, "domainFormat");
        this.domainFormat = domainFormat;
        return this;
    }

    /**
     * A field that will have an email address generated as example
     */
    public FakerFormattedStrings withEmailFormat(String emailFormat) {
        Utils.checkNotNull(emailFormat, "emailFormat");
        this.emailFormat = emailFormat;
        return this;
    }

    /**
     * A field that will have a filename generated as example
     */
    public FakerFormattedStrings withFilenameFormat(String filenameFormat) {
        Utils.checkNotNull(filenameFormat, "filenameFormat");
        this.filenameFormat = filenameFormat;
        return this;
    }

    /**
     * A field that will have a file path generated as example
     */
    public FakerFormattedStrings withFilepathFormat(String filepathFormat) {
        Utils.checkNotNull(filepathFormat, "filepathFormat");
        this.filepathFormat = filepathFormat;
        return this;
    }

    /**
     * A field that will have a image url generated as example
     */
    public FakerFormattedStrings withImageFormat(String imageFormat) {
        Utils.checkNotNull(imageFormat, "imageFormat");
        this.imageFormat = imageFormat;
        return this;
    }

    /**
     * A field that will have an IPv4 address generated as example
     */
    public FakerFormattedStrings withIpv4Format(String ipv4Format) {
        Utils.checkNotNull(ipv4Format, "ipv4Format");
        this.ipv4Format = ipv4Format;
        return this;
    }

    /**
     * A field that will have an IPv6 address generated as example
     */
    public FakerFormattedStrings withIpv6Format(String ipv6Format) {
        Utils.checkNotNull(ipv6Format, "ipv6Format");
        this.ipv6Format = ipv6Format;
        return this;
    }

    /**
     * A field that will have a JSON generated as example
     */
    public FakerFormattedStrings withJsonFormat(String jsonFormat) {
        Utils.checkNotNull(jsonFormat, "jsonFormat");
        this.jsonFormat = jsonFormat;
        return this;
    }

    /**
     * A field that will have a MAC address generated as example
     */
    public FakerFormattedStrings withMacFormat(String macFormat) {
        Utils.checkNotNull(macFormat, "macFormat");
        this.macFormat = macFormat;
        return this;
    }

    /**
     * A field that will have a fake password generated as example
     */
    public FakerFormattedStrings withPasswordFormat(String passwordFormat) {
        Utils.checkNotNull(passwordFormat, "passwordFormat");
        this.passwordFormat = passwordFormat;
        return this;
    }

    /**
     * A field that will have a phone number generated as example
     */
    public FakerFormattedStrings withPhoneFormat(String phoneFormat) {
        Utils.checkNotNull(phoneFormat, "phoneFormat");
        this.phoneFormat = phoneFormat;
        return this;
    }

    /**
     * A field that will have a timezone generated as example
     */
    public FakerFormattedStrings withTimezoneFormat(String timezoneFormat) {
        Utils.checkNotNull(timezoneFormat, "timezoneFormat");
        this.timezoneFormat = timezoneFormat;
        return this;
    }

    /**
     * A field that will have random words generated as example
     */
    public FakerFormattedStrings withUnknownFormat(String unknownFormat) {
        Utils.checkNotNull(unknownFormat, "unknownFormat");
        this.unknownFormat = unknownFormat;
        return this;
    }

    /**
     * A field that will have a URL generated as example
     */
    public FakerFormattedStrings withUrlFormat(String urlFormat) {
        Utils.checkNotNull(urlFormat, "urlFormat");
        this.urlFormat = urlFormat;
        return this;
    }

    /**
     * A field that will have a UUID generated as example
     */
    public FakerFormattedStrings withUuidFormat(String uuidFormat) {
        Utils.checkNotNull(uuidFormat, "uuidFormat");
        this.uuidFormat = uuidFormat;
        return this;
    }

    /**
     * A field that will have a postal code generated as example
     */
    public FakerFormattedStrings withZipcodeFormat(String zipcodeFormat) {
        Utils.checkNotNull(zipcodeFormat, "zipcodeFormat");
        this.zipcodeFormat = zipcodeFormat;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FakerFormattedStrings other = (FakerFormattedStrings) o;
        return 
            Objects.deepEquals(this.addressFormat, other.addressFormat) &&
            Objects.deepEquals(this.dateFormat, other.dateFormat) &&
            Objects.deepEquals(this.datetimeFormat, other.datetimeFormat) &&
            Objects.deepEquals(this.directoryFormat, other.directoryFormat) &&
            Objects.deepEquals(this.domainFormat, other.domainFormat) &&
            Objects.deepEquals(this.emailFormat, other.emailFormat) &&
            Objects.deepEquals(this.filenameFormat, other.filenameFormat) &&
            Objects.deepEquals(this.filepathFormat, other.filepathFormat) &&
            Objects.deepEquals(this.imageFormat, other.imageFormat) &&
            Objects.deepEquals(this.ipv4Format, other.ipv4Format) &&
            Objects.deepEquals(this.ipv6Format, other.ipv6Format) &&
            Objects.deepEquals(this.jsonFormat, other.jsonFormat) &&
            Objects.deepEquals(this.macFormat, other.macFormat) &&
            Objects.deepEquals(this.passwordFormat, other.passwordFormat) &&
            Objects.deepEquals(this.phoneFormat, other.phoneFormat) &&
            Objects.deepEquals(this.timezoneFormat, other.timezoneFormat) &&
            Objects.deepEquals(this.unknownFormat, other.unknownFormat) &&
            Objects.deepEquals(this.urlFormat, other.urlFormat) &&
            Objects.deepEquals(this.uuidFormat, other.uuidFormat) &&
            Objects.deepEquals(this.zipcodeFormat, other.zipcodeFormat);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            addressFormat,
            dateFormat,
            datetimeFormat,
            directoryFormat,
            domainFormat,
            emailFormat,
            filenameFormat,
            filepathFormat,
            imageFormat,
            ipv4Format,
            ipv6Format,
            jsonFormat,
            macFormat,
            passwordFormat,
            phoneFormat,
            timezoneFormat,
            unknownFormat,
            urlFormat,
            uuidFormat,
            zipcodeFormat);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FakerFormattedStrings.class,
                "addressFormat", addressFormat,
                "dateFormat", dateFormat,
                "datetimeFormat", datetimeFormat,
                "directoryFormat", directoryFormat,
                "domainFormat", domainFormat,
                "emailFormat", emailFormat,
                "filenameFormat", filenameFormat,
                "filepathFormat", filepathFormat,
                "imageFormat", imageFormat,
                "ipv4Format", ipv4Format,
                "ipv6Format", ipv6Format,
                "jsonFormat", jsonFormat,
                "macFormat", macFormat,
                "passwordFormat", passwordFormat,
                "phoneFormat", phoneFormat,
                "timezoneFormat", timezoneFormat,
                "unknownFormat", unknownFormat,
                "urlFormat", urlFormat,
                "uuidFormat", uuidFormat,
                "zipcodeFormat", zipcodeFormat);
    }
    
    public final static class Builder {
 
        private String addressFormat;
 
        private LocalDate dateFormat;
 
        private OffsetDateTime datetimeFormat;
 
        private String directoryFormat;
 
        private String domainFormat;
 
        private String emailFormat;
 
        private String filenameFormat;
 
        private String filepathFormat;
 
        private String imageFormat;
 
        private String ipv4Format;
 
        private String ipv6Format;
 
        private String jsonFormat;
 
        private String macFormat;
 
        private String passwordFormat;
 
        private String phoneFormat;
 
        private String timezoneFormat;
 
        private String unknownFormat;
 
        private String urlFormat;
 
        private String uuidFormat;
 
        private String zipcodeFormat;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A field that will have an address generated as example
         */
        public Builder addressFormat(String addressFormat) {
            Utils.checkNotNull(addressFormat, "addressFormat");
            this.addressFormat = addressFormat;
            return this;
        }

        /**
         * A field that will have RFC3339 formatted datestamp generated as example
         */
        public Builder dateFormat(LocalDate dateFormat) {
            Utils.checkNotNull(dateFormat, "dateFormat");
            this.dateFormat = dateFormat;
            return this;
        }

        /**
         * A field that will have RFC3339 formatted timestamp generated as example
         */
        public Builder datetimeFormat(OffsetDateTime datetimeFormat) {
            Utils.checkNotNull(datetimeFormat, "datetimeFormat");
            this.datetimeFormat = datetimeFormat;
            return this;
        }

        /**
         * A field that will have a directory path generated as example
         */
        public Builder directoryFormat(String directoryFormat) {
            Utils.checkNotNull(directoryFormat, "directoryFormat");
            this.directoryFormat = directoryFormat;
            return this;
        }

        /**
         * A field that will have a domain name generated as example
         */
        public Builder domainFormat(String domainFormat) {
            Utils.checkNotNull(domainFormat, "domainFormat");
            this.domainFormat = domainFormat;
            return this;
        }

        /**
         * A field that will have an email address generated as example
         */
        public Builder emailFormat(String emailFormat) {
            Utils.checkNotNull(emailFormat, "emailFormat");
            this.emailFormat = emailFormat;
            return this;
        }

        /**
         * A field that will have a filename generated as example
         */
        public Builder filenameFormat(String filenameFormat) {
            Utils.checkNotNull(filenameFormat, "filenameFormat");
            this.filenameFormat = filenameFormat;
            return this;
        }

        /**
         * A field that will have a file path generated as example
         */
        public Builder filepathFormat(String filepathFormat) {
            Utils.checkNotNull(filepathFormat, "filepathFormat");
            this.filepathFormat = filepathFormat;
            return this;
        }

        /**
         * A field that will have a image url generated as example
         */
        public Builder imageFormat(String imageFormat) {
            Utils.checkNotNull(imageFormat, "imageFormat");
            this.imageFormat = imageFormat;
            return this;
        }

        /**
         * A field that will have an IPv4 address generated as example
         */
        public Builder ipv4Format(String ipv4Format) {
            Utils.checkNotNull(ipv4Format, "ipv4Format");
            this.ipv4Format = ipv4Format;
            return this;
        }

        /**
         * A field that will have an IPv6 address generated as example
         */
        public Builder ipv6Format(String ipv6Format) {
            Utils.checkNotNull(ipv6Format, "ipv6Format");
            this.ipv6Format = ipv6Format;
            return this;
        }

        /**
         * A field that will have a JSON generated as example
         */
        public Builder jsonFormat(String jsonFormat) {
            Utils.checkNotNull(jsonFormat, "jsonFormat");
            this.jsonFormat = jsonFormat;
            return this;
        }

        /**
         * A field that will have a MAC address generated as example
         */
        public Builder macFormat(String macFormat) {
            Utils.checkNotNull(macFormat, "macFormat");
            this.macFormat = macFormat;
            return this;
        }

        /**
         * A field that will have a fake password generated as example
         */
        public Builder passwordFormat(String passwordFormat) {
            Utils.checkNotNull(passwordFormat, "passwordFormat");
            this.passwordFormat = passwordFormat;
            return this;
        }

        /**
         * A field that will have a phone number generated as example
         */
        public Builder phoneFormat(String phoneFormat) {
            Utils.checkNotNull(phoneFormat, "phoneFormat");
            this.phoneFormat = phoneFormat;
            return this;
        }

        /**
         * A field that will have a timezone generated as example
         */
        public Builder timezoneFormat(String timezoneFormat) {
            Utils.checkNotNull(timezoneFormat, "timezoneFormat");
            this.timezoneFormat = timezoneFormat;
            return this;
        }

        /**
         * A field that will have random words generated as example
         */
        public Builder unknownFormat(String unknownFormat) {
            Utils.checkNotNull(unknownFormat, "unknownFormat");
            this.unknownFormat = unknownFormat;
            return this;
        }

        /**
         * A field that will have a URL generated as example
         */
        public Builder urlFormat(String urlFormat) {
            Utils.checkNotNull(urlFormat, "urlFormat");
            this.urlFormat = urlFormat;
            return this;
        }

        /**
         * A field that will have a UUID generated as example
         */
        public Builder uuidFormat(String uuidFormat) {
            Utils.checkNotNull(uuidFormat, "uuidFormat");
            this.uuidFormat = uuidFormat;
            return this;
        }

        /**
         * A field that will have a postal code generated as example
         */
        public Builder zipcodeFormat(String zipcodeFormat) {
            Utils.checkNotNull(zipcodeFormat, "zipcodeFormat");
            this.zipcodeFormat = zipcodeFormat;
            return this;
        }
        
        public FakerFormattedStrings build() {
            return new FakerFormattedStrings(
                addressFormat,
                dateFormat,
                datetimeFormat,
                directoryFormat,
                domainFormat,
                emailFormat,
                filenameFormat,
                filepathFormat,
                imageFormat,
                ipv4Format,
                ipv6Format,
                jsonFormat,
                macFormat,
                passwordFormat,
                phoneFormat,
                timezoneFormat,
                unknownFormat,
                urlFormat,
                uuidFormat,
                zipcodeFormat);
        }
    }
}

