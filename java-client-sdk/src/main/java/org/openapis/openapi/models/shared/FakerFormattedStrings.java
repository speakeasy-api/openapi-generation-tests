/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

/**
 * FakerFormattedStrings - A set of strings with format values that lead to relevant examples being generated for them
 */

public class FakerFormattedStrings {

    /**
     * A field that will have an address generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addressFormat")
    private Optional<String> addressFormat;

    /**
     * A field that will have a directory path generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("directoryFormat")
    private Optional<String> directoryFormat;

    /**
     * A field that will have a domain name generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domainFormat")
    private Optional<String> domainFormat;

    /**
     * A field that will have an email address generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailFormat")
    private Optional<String> emailFormat;

    /**
     * A field that will have a filename generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filenameFormat")
    private Optional<String> filenameFormat;

    /**
     * A field that will have a file path generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filepathFormat")
    private Optional<String> filepathFormat;

    /**
     * A field that will have a image url generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imageFormat")
    private Optional<String> imageFormat;

    /**
     * A field that will have an IPv4 address generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipv4Format")
    private Optional<String> ipv4Format;

    /**
     * A field that will have an IPv6 address generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipv6Format")
    private Optional<String> ipv6Format;

    /**
     * A field that will have a JSON generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jsonFormat")
    private Optional<String> jsonFormat;

    /**
     * A field that will have a MAC address generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("macFormat")
    private Optional<String> macFormat;

    /**
     * A field that will have a fake password generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("passwordFormat")
    private Optional<String> passwordFormat;

    /**
     * A field that will have a phone number generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phoneFormat")
    private Optional<String> phoneFormat;

    /**
     * A field that will have a timezone generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezoneFormat")
    private Optional<String> timezoneFormat;

    /**
     * A field that will have random words generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unknownFormat")
    private Optional<String> unknownFormat;

    /**
     * A field that will have a URL generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("urlFormat")
    private Optional<String> urlFormat;

    /**
     * A field that will have a UUID generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uuidFormat")
    private Optional<String> uuidFormat;

    /**
     * A field that will have a postal code generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zipcodeFormat")
    private Optional<String> zipcodeFormat;

    @JsonCreator
    public FakerFormattedStrings(
            @JsonProperty("addressFormat") Optional<String> addressFormat,
            @JsonProperty("directoryFormat") Optional<String> directoryFormat,
            @JsonProperty("domainFormat") Optional<String> domainFormat,
            @JsonProperty("emailFormat") Optional<String> emailFormat,
            @JsonProperty("filenameFormat") Optional<String> filenameFormat,
            @JsonProperty("filepathFormat") Optional<String> filepathFormat,
            @JsonProperty("imageFormat") Optional<String> imageFormat,
            @JsonProperty("ipv4Format") Optional<String> ipv4Format,
            @JsonProperty("ipv6Format") Optional<String> ipv6Format,
            @JsonProperty("jsonFormat") Optional<String> jsonFormat,
            @JsonProperty("macFormat") Optional<String> macFormat,
            @JsonProperty("passwordFormat") Optional<String> passwordFormat,
            @JsonProperty("phoneFormat") Optional<String> phoneFormat,
            @JsonProperty("timezoneFormat") Optional<String> timezoneFormat,
            @JsonProperty("unknownFormat") Optional<String> unknownFormat,
            @JsonProperty("urlFormat") Optional<String> urlFormat,
            @JsonProperty("uuidFormat") Optional<String> uuidFormat,
            @JsonProperty("zipcodeFormat") Optional<String> zipcodeFormat) {
        Utils.checkNotNull(addressFormat, "addressFormat");
        Utils.checkNotNull(directoryFormat, "directoryFormat");
        Utils.checkNotNull(domainFormat, "domainFormat");
        Utils.checkNotNull(emailFormat, "emailFormat");
        Utils.checkNotNull(filenameFormat, "filenameFormat");
        Utils.checkNotNull(filepathFormat, "filepathFormat");
        Utils.checkNotNull(imageFormat, "imageFormat");
        Utils.checkNotNull(ipv4Format, "ipv4Format");
        Utils.checkNotNull(ipv6Format, "ipv6Format");
        Utils.checkNotNull(jsonFormat, "jsonFormat");
        Utils.checkNotNull(macFormat, "macFormat");
        Utils.checkNotNull(passwordFormat, "passwordFormat");
        Utils.checkNotNull(phoneFormat, "phoneFormat");
        Utils.checkNotNull(timezoneFormat, "timezoneFormat");
        Utils.checkNotNull(unknownFormat, "unknownFormat");
        Utils.checkNotNull(urlFormat, "urlFormat");
        Utils.checkNotNull(uuidFormat, "uuidFormat");
        Utils.checkNotNull(zipcodeFormat, "zipcodeFormat");
        this.addressFormat = addressFormat;
        this.directoryFormat = directoryFormat;
        this.domainFormat = domainFormat;
        this.emailFormat = emailFormat;
        this.filenameFormat = filenameFormat;
        this.filepathFormat = filepathFormat;
        this.imageFormat = imageFormat;
        this.ipv4Format = ipv4Format;
        this.ipv6Format = ipv6Format;
        this.jsonFormat = jsonFormat;
        this.macFormat = macFormat;
        this.passwordFormat = passwordFormat;
        this.phoneFormat = phoneFormat;
        this.timezoneFormat = timezoneFormat;
        this.unknownFormat = unknownFormat;
        this.urlFormat = urlFormat;
        this.uuidFormat = uuidFormat;
        this.zipcodeFormat = zipcodeFormat;
    }
    
    public FakerFormattedStrings() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A field that will have an address generated as example
     */
    @JsonIgnore
    public Optional<String> addressFormat() {
        return addressFormat;
    }

    /**
     * A field that will have a directory path generated as example
     */
    @JsonIgnore
    public Optional<String> directoryFormat() {
        return directoryFormat;
    }

    /**
     * A field that will have a domain name generated as example
     */
    @JsonIgnore
    public Optional<String> domainFormat() {
        return domainFormat;
    }

    /**
     * A field that will have an email address generated as example
     */
    @JsonIgnore
    public Optional<String> emailFormat() {
        return emailFormat;
    }

    /**
     * A field that will have a filename generated as example
     */
    @JsonIgnore
    public Optional<String> filenameFormat() {
        return filenameFormat;
    }

    /**
     * A field that will have a file path generated as example
     */
    @JsonIgnore
    public Optional<String> filepathFormat() {
        return filepathFormat;
    }

    /**
     * A field that will have a image url generated as example
     */
    @JsonIgnore
    public Optional<String> imageFormat() {
        return imageFormat;
    }

    /**
     * A field that will have an IPv4 address generated as example
     */
    @JsonIgnore
    public Optional<String> ipv4Format() {
        return ipv4Format;
    }

    /**
     * A field that will have an IPv6 address generated as example
     */
    @JsonIgnore
    public Optional<String> ipv6Format() {
        return ipv6Format;
    }

    /**
     * A field that will have a JSON generated as example
     */
    @JsonIgnore
    public Optional<String> jsonFormat() {
        return jsonFormat;
    }

    /**
     * A field that will have a MAC address generated as example
     */
    @JsonIgnore
    public Optional<String> macFormat() {
        return macFormat;
    }

    /**
     * A field that will have a fake password generated as example
     */
    @JsonIgnore
    public Optional<String> passwordFormat() {
        return passwordFormat;
    }

    /**
     * A field that will have a phone number generated as example
     */
    @JsonIgnore
    public Optional<String> phoneFormat() {
        return phoneFormat;
    }

    /**
     * A field that will have a timezone generated as example
     */
    @JsonIgnore
    public Optional<String> timezoneFormat() {
        return timezoneFormat;
    }

    /**
     * A field that will have random words generated as example
     */
    @JsonIgnore
    public Optional<String> unknownFormat() {
        return unknownFormat;
    }

    /**
     * A field that will have a URL generated as example
     */
    @JsonIgnore
    public Optional<String> urlFormat() {
        return urlFormat;
    }

    /**
     * A field that will have a UUID generated as example
     */
    @JsonIgnore
    public Optional<String> uuidFormat() {
        return uuidFormat;
    }

    /**
     * A field that will have a postal code generated as example
     */
    @JsonIgnore
    public Optional<String> zipcodeFormat() {
        return zipcodeFormat;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A field that will have an address generated as example
     */
    public FakerFormattedStrings withAddressFormat(String addressFormat) {
        Utils.checkNotNull(addressFormat, "addressFormat");
        this.addressFormat = Optional.ofNullable(addressFormat);
        return this;
    }

    /**
     * A field that will have an address generated as example
     */
    public FakerFormattedStrings withAddressFormat(Optional<String> addressFormat) {
        Utils.checkNotNull(addressFormat, "addressFormat");
        this.addressFormat = addressFormat;
        return this;
    }

    /**
     * A field that will have a directory path generated as example
     */
    public FakerFormattedStrings withDirectoryFormat(String directoryFormat) {
        Utils.checkNotNull(directoryFormat, "directoryFormat");
        this.directoryFormat = Optional.ofNullable(directoryFormat);
        return this;
    }

    /**
     * A field that will have a directory path generated as example
     */
    public FakerFormattedStrings withDirectoryFormat(Optional<String> directoryFormat) {
        Utils.checkNotNull(directoryFormat, "directoryFormat");
        this.directoryFormat = directoryFormat;
        return this;
    }

    /**
     * A field that will have a domain name generated as example
     */
    public FakerFormattedStrings withDomainFormat(String domainFormat) {
        Utils.checkNotNull(domainFormat, "domainFormat");
        this.domainFormat = Optional.ofNullable(domainFormat);
        return this;
    }

    /**
     * A field that will have a domain name generated as example
     */
    public FakerFormattedStrings withDomainFormat(Optional<String> domainFormat) {
        Utils.checkNotNull(domainFormat, "domainFormat");
        this.domainFormat = domainFormat;
        return this;
    }

    /**
     * A field that will have an email address generated as example
     */
    public FakerFormattedStrings withEmailFormat(String emailFormat) {
        Utils.checkNotNull(emailFormat, "emailFormat");
        this.emailFormat = Optional.ofNullable(emailFormat);
        return this;
    }

    /**
     * A field that will have an email address generated as example
     */
    public FakerFormattedStrings withEmailFormat(Optional<String> emailFormat) {
        Utils.checkNotNull(emailFormat, "emailFormat");
        this.emailFormat = emailFormat;
        return this;
    }

    /**
     * A field that will have a filename generated as example
     */
    public FakerFormattedStrings withFilenameFormat(String filenameFormat) {
        Utils.checkNotNull(filenameFormat, "filenameFormat");
        this.filenameFormat = Optional.ofNullable(filenameFormat);
        return this;
    }

    /**
     * A field that will have a filename generated as example
     */
    public FakerFormattedStrings withFilenameFormat(Optional<String> filenameFormat) {
        Utils.checkNotNull(filenameFormat, "filenameFormat");
        this.filenameFormat = filenameFormat;
        return this;
    }

    /**
     * A field that will have a file path generated as example
     */
    public FakerFormattedStrings withFilepathFormat(String filepathFormat) {
        Utils.checkNotNull(filepathFormat, "filepathFormat");
        this.filepathFormat = Optional.ofNullable(filepathFormat);
        return this;
    }

    /**
     * A field that will have a file path generated as example
     */
    public FakerFormattedStrings withFilepathFormat(Optional<String> filepathFormat) {
        Utils.checkNotNull(filepathFormat, "filepathFormat");
        this.filepathFormat = filepathFormat;
        return this;
    }

    /**
     * A field that will have a image url generated as example
     */
    public FakerFormattedStrings withImageFormat(String imageFormat) {
        Utils.checkNotNull(imageFormat, "imageFormat");
        this.imageFormat = Optional.ofNullable(imageFormat);
        return this;
    }

    /**
     * A field that will have a image url generated as example
     */
    public FakerFormattedStrings withImageFormat(Optional<String> imageFormat) {
        Utils.checkNotNull(imageFormat, "imageFormat");
        this.imageFormat = imageFormat;
        return this;
    }

    /**
     * A field that will have an IPv4 address generated as example
     */
    public FakerFormattedStrings withIpv4Format(String ipv4Format) {
        Utils.checkNotNull(ipv4Format, "ipv4Format");
        this.ipv4Format = Optional.ofNullable(ipv4Format);
        return this;
    }

    /**
     * A field that will have an IPv4 address generated as example
     */
    public FakerFormattedStrings withIpv4Format(Optional<String> ipv4Format) {
        Utils.checkNotNull(ipv4Format, "ipv4Format");
        this.ipv4Format = ipv4Format;
        return this;
    }

    /**
     * A field that will have an IPv6 address generated as example
     */
    public FakerFormattedStrings withIpv6Format(String ipv6Format) {
        Utils.checkNotNull(ipv6Format, "ipv6Format");
        this.ipv6Format = Optional.ofNullable(ipv6Format);
        return this;
    }

    /**
     * A field that will have an IPv6 address generated as example
     */
    public FakerFormattedStrings withIpv6Format(Optional<String> ipv6Format) {
        Utils.checkNotNull(ipv6Format, "ipv6Format");
        this.ipv6Format = ipv6Format;
        return this;
    }

    /**
     * A field that will have a JSON generated as example
     */
    public FakerFormattedStrings withJsonFormat(String jsonFormat) {
        Utils.checkNotNull(jsonFormat, "jsonFormat");
        this.jsonFormat = Optional.ofNullable(jsonFormat);
        return this;
    }

    /**
     * A field that will have a JSON generated as example
     */
    public FakerFormattedStrings withJsonFormat(Optional<String> jsonFormat) {
        Utils.checkNotNull(jsonFormat, "jsonFormat");
        this.jsonFormat = jsonFormat;
        return this;
    }

    /**
     * A field that will have a MAC address generated as example
     */
    public FakerFormattedStrings withMacFormat(String macFormat) {
        Utils.checkNotNull(macFormat, "macFormat");
        this.macFormat = Optional.ofNullable(macFormat);
        return this;
    }

    /**
     * A field that will have a MAC address generated as example
     */
    public FakerFormattedStrings withMacFormat(Optional<String> macFormat) {
        Utils.checkNotNull(macFormat, "macFormat");
        this.macFormat = macFormat;
        return this;
    }

    /**
     * A field that will have a fake password generated as example
     */
    public FakerFormattedStrings withPasswordFormat(String passwordFormat) {
        Utils.checkNotNull(passwordFormat, "passwordFormat");
        this.passwordFormat = Optional.ofNullable(passwordFormat);
        return this;
    }

    /**
     * A field that will have a fake password generated as example
     */
    public FakerFormattedStrings withPasswordFormat(Optional<String> passwordFormat) {
        Utils.checkNotNull(passwordFormat, "passwordFormat");
        this.passwordFormat = passwordFormat;
        return this;
    }

    /**
     * A field that will have a phone number generated as example
     */
    public FakerFormattedStrings withPhoneFormat(String phoneFormat) {
        Utils.checkNotNull(phoneFormat, "phoneFormat");
        this.phoneFormat = Optional.ofNullable(phoneFormat);
        return this;
    }

    /**
     * A field that will have a phone number generated as example
     */
    public FakerFormattedStrings withPhoneFormat(Optional<String> phoneFormat) {
        Utils.checkNotNull(phoneFormat, "phoneFormat");
        this.phoneFormat = phoneFormat;
        return this;
    }

    /**
     * A field that will have a timezone generated as example
     */
    public FakerFormattedStrings withTimezoneFormat(String timezoneFormat) {
        Utils.checkNotNull(timezoneFormat, "timezoneFormat");
        this.timezoneFormat = Optional.ofNullable(timezoneFormat);
        return this;
    }

    /**
     * A field that will have a timezone generated as example
     */
    public FakerFormattedStrings withTimezoneFormat(Optional<String> timezoneFormat) {
        Utils.checkNotNull(timezoneFormat, "timezoneFormat");
        this.timezoneFormat = timezoneFormat;
        return this;
    }

    /**
     * A field that will have random words generated as example
     */
    public FakerFormattedStrings withUnknownFormat(String unknownFormat) {
        Utils.checkNotNull(unknownFormat, "unknownFormat");
        this.unknownFormat = Optional.ofNullable(unknownFormat);
        return this;
    }

    /**
     * A field that will have random words generated as example
     */
    public FakerFormattedStrings withUnknownFormat(Optional<String> unknownFormat) {
        Utils.checkNotNull(unknownFormat, "unknownFormat");
        this.unknownFormat = unknownFormat;
        return this;
    }

    /**
     * A field that will have a URL generated as example
     */
    public FakerFormattedStrings withUrlFormat(String urlFormat) {
        Utils.checkNotNull(urlFormat, "urlFormat");
        this.urlFormat = Optional.ofNullable(urlFormat);
        return this;
    }

    /**
     * A field that will have a URL generated as example
     */
    public FakerFormattedStrings withUrlFormat(Optional<String> urlFormat) {
        Utils.checkNotNull(urlFormat, "urlFormat");
        this.urlFormat = urlFormat;
        return this;
    }

    /**
     * A field that will have a UUID generated as example
     */
    public FakerFormattedStrings withUuidFormat(String uuidFormat) {
        Utils.checkNotNull(uuidFormat, "uuidFormat");
        this.uuidFormat = Optional.ofNullable(uuidFormat);
        return this;
    }

    /**
     * A field that will have a UUID generated as example
     */
    public FakerFormattedStrings withUuidFormat(Optional<String> uuidFormat) {
        Utils.checkNotNull(uuidFormat, "uuidFormat");
        this.uuidFormat = uuidFormat;
        return this;
    }

    /**
     * A field that will have a postal code generated as example
     */
    public FakerFormattedStrings withZipcodeFormat(String zipcodeFormat) {
        Utils.checkNotNull(zipcodeFormat, "zipcodeFormat");
        this.zipcodeFormat = Optional.ofNullable(zipcodeFormat);
        return this;
    }

    /**
     * A field that will have a postal code generated as example
     */
    public FakerFormattedStrings withZipcodeFormat(Optional<String> zipcodeFormat) {
        Utils.checkNotNull(zipcodeFormat, "zipcodeFormat");
        this.zipcodeFormat = zipcodeFormat;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FakerFormattedStrings other = (FakerFormattedStrings) o;
        return 
            Objects.deepEquals(this.addressFormat, other.addressFormat) &&
            Objects.deepEquals(this.directoryFormat, other.directoryFormat) &&
            Objects.deepEquals(this.domainFormat, other.domainFormat) &&
            Objects.deepEquals(this.emailFormat, other.emailFormat) &&
            Objects.deepEquals(this.filenameFormat, other.filenameFormat) &&
            Objects.deepEquals(this.filepathFormat, other.filepathFormat) &&
            Objects.deepEquals(this.imageFormat, other.imageFormat) &&
            Objects.deepEquals(this.ipv4Format, other.ipv4Format) &&
            Objects.deepEquals(this.ipv6Format, other.ipv6Format) &&
            Objects.deepEquals(this.jsonFormat, other.jsonFormat) &&
            Objects.deepEquals(this.macFormat, other.macFormat) &&
            Objects.deepEquals(this.passwordFormat, other.passwordFormat) &&
            Objects.deepEquals(this.phoneFormat, other.phoneFormat) &&
            Objects.deepEquals(this.timezoneFormat, other.timezoneFormat) &&
            Objects.deepEquals(this.unknownFormat, other.unknownFormat) &&
            Objects.deepEquals(this.urlFormat, other.urlFormat) &&
            Objects.deepEquals(this.uuidFormat, other.uuidFormat) &&
            Objects.deepEquals(this.zipcodeFormat, other.zipcodeFormat);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            addressFormat,
            directoryFormat,
            domainFormat,
            emailFormat,
            filenameFormat,
            filepathFormat,
            imageFormat,
            ipv4Format,
            ipv6Format,
            jsonFormat,
            macFormat,
            passwordFormat,
            phoneFormat,
            timezoneFormat,
            unknownFormat,
            urlFormat,
            uuidFormat,
            zipcodeFormat);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FakerFormattedStrings.class,
                "addressFormat", addressFormat,
                "directoryFormat", directoryFormat,
                "domainFormat", domainFormat,
                "emailFormat", emailFormat,
                "filenameFormat", filenameFormat,
                "filepathFormat", filepathFormat,
                "imageFormat", imageFormat,
                "ipv4Format", ipv4Format,
                "ipv6Format", ipv6Format,
                "jsonFormat", jsonFormat,
                "macFormat", macFormat,
                "passwordFormat", passwordFormat,
                "phoneFormat", phoneFormat,
                "timezoneFormat", timezoneFormat,
                "unknownFormat", unknownFormat,
                "urlFormat", urlFormat,
                "uuidFormat", uuidFormat,
                "zipcodeFormat", zipcodeFormat);
    }
    
    public final static class Builder {
 
        private Optional<String> addressFormat = Optional.empty();
 
        private Optional<String> directoryFormat = Optional.empty();
 
        private Optional<String> domainFormat = Optional.empty();
 
        private Optional<String> emailFormat = Optional.empty();
 
        private Optional<String> filenameFormat = Optional.empty();
 
        private Optional<String> filepathFormat = Optional.empty();
 
        private Optional<String> imageFormat = Optional.empty();
 
        private Optional<String> ipv4Format = Optional.empty();
 
        private Optional<String> ipv6Format = Optional.empty();
 
        private Optional<String> jsonFormat = Optional.empty();
 
        private Optional<String> macFormat = Optional.empty();
 
        private Optional<String> passwordFormat = Optional.empty();
 
        private Optional<String> phoneFormat = Optional.empty();
 
        private Optional<String> timezoneFormat = Optional.empty();
 
        private Optional<String> unknownFormat = Optional.empty();
 
        private Optional<String> urlFormat = Optional.empty();
 
        private Optional<String> uuidFormat = Optional.empty();
 
        private Optional<String> zipcodeFormat = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A field that will have an address generated as example
         */
        public Builder addressFormat(String addressFormat) {
            Utils.checkNotNull(addressFormat, "addressFormat");
            this.addressFormat = Optional.ofNullable(addressFormat);
            return this;
        }

        /**
         * A field that will have an address generated as example
         */
        public Builder addressFormat(Optional<String> addressFormat) {
            Utils.checkNotNull(addressFormat, "addressFormat");
            this.addressFormat = addressFormat;
            return this;
        }

        /**
         * A field that will have a directory path generated as example
         */
        public Builder directoryFormat(String directoryFormat) {
            Utils.checkNotNull(directoryFormat, "directoryFormat");
            this.directoryFormat = Optional.ofNullable(directoryFormat);
            return this;
        }

        /**
         * A field that will have a directory path generated as example
         */
        public Builder directoryFormat(Optional<String> directoryFormat) {
            Utils.checkNotNull(directoryFormat, "directoryFormat");
            this.directoryFormat = directoryFormat;
            return this;
        }

        /**
         * A field that will have a domain name generated as example
         */
        public Builder domainFormat(String domainFormat) {
            Utils.checkNotNull(domainFormat, "domainFormat");
            this.domainFormat = Optional.ofNullable(domainFormat);
            return this;
        }

        /**
         * A field that will have a domain name generated as example
         */
        public Builder domainFormat(Optional<String> domainFormat) {
            Utils.checkNotNull(domainFormat, "domainFormat");
            this.domainFormat = domainFormat;
            return this;
        }

        /**
         * A field that will have an email address generated as example
         */
        public Builder emailFormat(String emailFormat) {
            Utils.checkNotNull(emailFormat, "emailFormat");
            this.emailFormat = Optional.ofNullable(emailFormat);
            return this;
        }

        /**
         * A field that will have an email address generated as example
         */
        public Builder emailFormat(Optional<String> emailFormat) {
            Utils.checkNotNull(emailFormat, "emailFormat");
            this.emailFormat = emailFormat;
            return this;
        }

        /**
         * A field that will have a filename generated as example
         */
        public Builder filenameFormat(String filenameFormat) {
            Utils.checkNotNull(filenameFormat, "filenameFormat");
            this.filenameFormat = Optional.ofNullable(filenameFormat);
            return this;
        }

        /**
         * A field that will have a filename generated as example
         */
        public Builder filenameFormat(Optional<String> filenameFormat) {
            Utils.checkNotNull(filenameFormat, "filenameFormat");
            this.filenameFormat = filenameFormat;
            return this;
        }

        /**
         * A field that will have a file path generated as example
         */
        public Builder filepathFormat(String filepathFormat) {
            Utils.checkNotNull(filepathFormat, "filepathFormat");
            this.filepathFormat = Optional.ofNullable(filepathFormat);
            return this;
        }

        /**
         * A field that will have a file path generated as example
         */
        public Builder filepathFormat(Optional<String> filepathFormat) {
            Utils.checkNotNull(filepathFormat, "filepathFormat");
            this.filepathFormat = filepathFormat;
            return this;
        }

        /**
         * A field that will have a image url generated as example
         */
        public Builder imageFormat(String imageFormat) {
            Utils.checkNotNull(imageFormat, "imageFormat");
            this.imageFormat = Optional.ofNullable(imageFormat);
            return this;
        }

        /**
         * A field that will have a image url generated as example
         */
        public Builder imageFormat(Optional<String> imageFormat) {
            Utils.checkNotNull(imageFormat, "imageFormat");
            this.imageFormat = imageFormat;
            return this;
        }

        /**
         * A field that will have an IPv4 address generated as example
         */
        public Builder ipv4Format(String ipv4Format) {
            Utils.checkNotNull(ipv4Format, "ipv4Format");
            this.ipv4Format = Optional.ofNullable(ipv4Format);
            return this;
        }

        /**
         * A field that will have an IPv4 address generated as example
         */
        public Builder ipv4Format(Optional<String> ipv4Format) {
            Utils.checkNotNull(ipv4Format, "ipv4Format");
            this.ipv4Format = ipv4Format;
            return this;
        }

        /**
         * A field that will have an IPv6 address generated as example
         */
        public Builder ipv6Format(String ipv6Format) {
            Utils.checkNotNull(ipv6Format, "ipv6Format");
            this.ipv6Format = Optional.ofNullable(ipv6Format);
            return this;
        }

        /**
         * A field that will have an IPv6 address generated as example
         */
        public Builder ipv6Format(Optional<String> ipv6Format) {
            Utils.checkNotNull(ipv6Format, "ipv6Format");
            this.ipv6Format = ipv6Format;
            return this;
        }

        /**
         * A field that will have a JSON generated as example
         */
        public Builder jsonFormat(String jsonFormat) {
            Utils.checkNotNull(jsonFormat, "jsonFormat");
            this.jsonFormat = Optional.ofNullable(jsonFormat);
            return this;
        }

        /**
         * A field that will have a JSON generated as example
         */
        public Builder jsonFormat(Optional<String> jsonFormat) {
            Utils.checkNotNull(jsonFormat, "jsonFormat");
            this.jsonFormat = jsonFormat;
            return this;
        }

        /**
         * A field that will have a MAC address generated as example
         */
        public Builder macFormat(String macFormat) {
            Utils.checkNotNull(macFormat, "macFormat");
            this.macFormat = Optional.ofNullable(macFormat);
            return this;
        }

        /**
         * A field that will have a MAC address generated as example
         */
        public Builder macFormat(Optional<String> macFormat) {
            Utils.checkNotNull(macFormat, "macFormat");
            this.macFormat = macFormat;
            return this;
        }

        /**
         * A field that will have a fake password generated as example
         */
        public Builder passwordFormat(String passwordFormat) {
            Utils.checkNotNull(passwordFormat, "passwordFormat");
            this.passwordFormat = Optional.ofNullable(passwordFormat);
            return this;
        }

        /**
         * A field that will have a fake password generated as example
         */
        public Builder passwordFormat(Optional<String> passwordFormat) {
            Utils.checkNotNull(passwordFormat, "passwordFormat");
            this.passwordFormat = passwordFormat;
            return this;
        }

        /**
         * A field that will have a phone number generated as example
         */
        public Builder phoneFormat(String phoneFormat) {
            Utils.checkNotNull(phoneFormat, "phoneFormat");
            this.phoneFormat = Optional.ofNullable(phoneFormat);
            return this;
        }

        /**
         * A field that will have a phone number generated as example
         */
        public Builder phoneFormat(Optional<String> phoneFormat) {
            Utils.checkNotNull(phoneFormat, "phoneFormat");
            this.phoneFormat = phoneFormat;
            return this;
        }

        /**
         * A field that will have a timezone generated as example
         */
        public Builder timezoneFormat(String timezoneFormat) {
            Utils.checkNotNull(timezoneFormat, "timezoneFormat");
            this.timezoneFormat = Optional.ofNullable(timezoneFormat);
            return this;
        }

        /**
         * A field that will have a timezone generated as example
         */
        public Builder timezoneFormat(Optional<String> timezoneFormat) {
            Utils.checkNotNull(timezoneFormat, "timezoneFormat");
            this.timezoneFormat = timezoneFormat;
            return this;
        }

        /**
         * A field that will have random words generated as example
         */
        public Builder unknownFormat(String unknownFormat) {
            Utils.checkNotNull(unknownFormat, "unknownFormat");
            this.unknownFormat = Optional.ofNullable(unknownFormat);
            return this;
        }

        /**
         * A field that will have random words generated as example
         */
        public Builder unknownFormat(Optional<String> unknownFormat) {
            Utils.checkNotNull(unknownFormat, "unknownFormat");
            this.unknownFormat = unknownFormat;
            return this;
        }

        /**
         * A field that will have a URL generated as example
         */
        public Builder urlFormat(String urlFormat) {
            Utils.checkNotNull(urlFormat, "urlFormat");
            this.urlFormat = Optional.ofNullable(urlFormat);
            return this;
        }

        /**
         * A field that will have a URL generated as example
         */
        public Builder urlFormat(Optional<String> urlFormat) {
            Utils.checkNotNull(urlFormat, "urlFormat");
            this.urlFormat = urlFormat;
            return this;
        }

        /**
         * A field that will have a UUID generated as example
         */
        public Builder uuidFormat(String uuidFormat) {
            Utils.checkNotNull(uuidFormat, "uuidFormat");
            this.uuidFormat = Optional.ofNullable(uuidFormat);
            return this;
        }

        /**
         * A field that will have a UUID generated as example
         */
        public Builder uuidFormat(Optional<String> uuidFormat) {
            Utils.checkNotNull(uuidFormat, "uuidFormat");
            this.uuidFormat = uuidFormat;
            return this;
        }

        /**
         * A field that will have a postal code generated as example
         */
        public Builder zipcodeFormat(String zipcodeFormat) {
            Utils.checkNotNull(zipcodeFormat, "zipcodeFormat");
            this.zipcodeFormat = Optional.ofNullable(zipcodeFormat);
            return this;
        }

        /**
         * A field that will have a postal code generated as example
         */
        public Builder zipcodeFormat(Optional<String> zipcodeFormat) {
            Utils.checkNotNull(zipcodeFormat, "zipcodeFormat");
            this.zipcodeFormat = zipcodeFormat;
            return this;
        }
        
        public FakerFormattedStrings build() {
            return new FakerFormattedStrings(
                addressFormat,
                directoryFormat,
                domainFormat,
                emailFormat,
                filenameFormat,
                filepathFormat,
                imageFormat,
                ipv4Format,
                ipv6Format,
                jsonFormat,
                macFormat,
                passwordFormat,
                phoneFormat,
                timezoneFormat,
                unknownFormat,
                urlFormat,
                uuidFormat,
                zipcodeFormat);
        }
    }
}

