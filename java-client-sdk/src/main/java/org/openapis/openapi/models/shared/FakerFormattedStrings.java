/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

/**
 * FakerFormattedStrings - A set of strings with format values that lead to relevant examples being generated for them
 */

public class FakerFormattedStrings {

    /**
     * A field that will have an address generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addressFormat")
    private Optional<? extends String> addressFormat;

    /**
     * A field that will have a directory path generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("directoryFormat")
    private Optional<? extends String> directoryFormat;

    /**
     * A field that will have a domain name generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domainFormat")
    private Optional<? extends String> domainFormat;

    /**
     * A field that will have an email address generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailFormat")
    private Optional<? extends String> emailFormat;

    /**
     * A field that will have a filename generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filenameFormat")
    private Optional<? extends String> filenameFormat;

    /**
     * A field that will have a file path generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filepathFormat")
    private Optional<? extends String> filepathFormat;

    /**
     * A field that will have a image url generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imageFormat")
    private Optional<? extends String> imageFormat;

    /**
     * A field that will have an IPv4 address generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipv4Format")
    private Optional<? extends String> ipv4Format;

    /**
     * A field that will have an IPv6 address generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipv6Format")
    private Optional<? extends String> ipv6Format;

    /**
     * A field that will have a JSON generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jsonFormat")
    private Optional<? extends String> jsonFormat;

    /**
     * A field that will have a MAC address generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("macFormat")
    private Optional<? extends String> macFormat;

    /**
     * A field that will have a fake password generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("passwordFormat")
    private Optional<? extends String> passwordFormat;

    /**
     * A field that will have a phone number generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phoneFormat")
    private Optional<? extends String> phoneFormat;

    /**
     * A field that will have a timezone generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezoneFormat")
    private Optional<? extends String> timezoneFormat;

    /**
     * A field that will have random words generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unknownFormat")
    private Optional<? extends String> unknownFormat;

    /**
     * A field that will have a URL generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("urlFormat")
    private Optional<? extends String> urlFormat;

    /**
     * A field that will have a UUID generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uuidFormat")
    private Optional<? extends String> uuidFormat;

    /**
     * A field that will have a postal code generated as example
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zipcodeFormat")
    private Optional<? extends String> zipcodeFormat;

    @JsonCreator
    public FakerFormattedStrings(
            @JsonProperty("addressFormat") Optional<? extends String> addressFormat,
            @JsonProperty("directoryFormat") Optional<? extends String> directoryFormat,
            @JsonProperty("domainFormat") Optional<? extends String> domainFormat,
            @JsonProperty("emailFormat") Optional<? extends String> emailFormat,
            @JsonProperty("filenameFormat") Optional<? extends String> filenameFormat,
            @JsonProperty("filepathFormat") Optional<? extends String> filepathFormat,
            @JsonProperty("imageFormat") Optional<? extends String> imageFormat,
            @JsonProperty("ipv4Format") Optional<? extends String> ipv4Format,
            @JsonProperty("ipv6Format") Optional<? extends String> ipv6Format,
            @JsonProperty("jsonFormat") Optional<? extends String> jsonFormat,
            @JsonProperty("macFormat") Optional<? extends String> macFormat,
            @JsonProperty("passwordFormat") Optional<? extends String> passwordFormat,
            @JsonProperty("phoneFormat") Optional<? extends String> phoneFormat,
            @JsonProperty("timezoneFormat") Optional<? extends String> timezoneFormat,
            @JsonProperty("unknownFormat") Optional<? extends String> unknownFormat,
            @JsonProperty("urlFormat") Optional<? extends String> urlFormat,
            @JsonProperty("uuidFormat") Optional<? extends String> uuidFormat,
            @JsonProperty("zipcodeFormat") Optional<? extends String> zipcodeFormat) {
        Utils.checkNotNull(addressFormat, "addressFormat");
        Utils.checkNotNull(directoryFormat, "directoryFormat");
        Utils.checkNotNull(domainFormat, "domainFormat");
        Utils.checkNotNull(emailFormat, "emailFormat");
        Utils.checkNotNull(filenameFormat, "filenameFormat");
        Utils.checkNotNull(filepathFormat, "filepathFormat");
        Utils.checkNotNull(imageFormat, "imageFormat");
        Utils.checkNotNull(ipv4Format, "ipv4Format");
        Utils.checkNotNull(ipv6Format, "ipv6Format");
        Utils.checkNotNull(jsonFormat, "jsonFormat");
        Utils.checkNotNull(macFormat, "macFormat");
        Utils.checkNotNull(passwordFormat, "passwordFormat");
        Utils.checkNotNull(phoneFormat, "phoneFormat");
        Utils.checkNotNull(timezoneFormat, "timezoneFormat");
        Utils.checkNotNull(unknownFormat, "unknownFormat");
        Utils.checkNotNull(urlFormat, "urlFormat");
        Utils.checkNotNull(uuidFormat, "uuidFormat");
        Utils.checkNotNull(zipcodeFormat, "zipcodeFormat");
        this.addressFormat = addressFormat;
        this.directoryFormat = directoryFormat;
        this.domainFormat = domainFormat;
        this.emailFormat = emailFormat;
        this.filenameFormat = filenameFormat;
        this.filepathFormat = filepathFormat;
        this.imageFormat = imageFormat;
        this.ipv4Format = ipv4Format;
        this.ipv6Format = ipv6Format;
        this.jsonFormat = jsonFormat;
        this.macFormat = macFormat;
        this.passwordFormat = passwordFormat;
        this.phoneFormat = phoneFormat;
        this.timezoneFormat = timezoneFormat;
        this.unknownFormat = unknownFormat;
        this.urlFormat = urlFormat;
        this.uuidFormat = uuidFormat;
        this.zipcodeFormat = zipcodeFormat;
    }
    
    public FakerFormattedStrings() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A field that will have an address generated as example
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> addressFormat() {
        return (Optional<String>) addressFormat;
    }

    /**
     * A field that will have a directory path generated as example
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> directoryFormat() {
        return (Optional<String>) directoryFormat;
    }

    /**
     * A field that will have a domain name generated as example
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> domainFormat() {
        return (Optional<String>) domainFormat;
    }

    /**
     * A field that will have an email address generated as example
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> emailFormat() {
        return (Optional<String>) emailFormat;
    }

    /**
     * A field that will have a filename generated as example
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> filenameFormat() {
        return (Optional<String>) filenameFormat;
    }

    /**
     * A field that will have a file path generated as example
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> filepathFormat() {
        return (Optional<String>) filepathFormat;
    }

    /**
     * A field that will have a image url generated as example
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> imageFormat() {
        return (Optional<String>) imageFormat;
    }

    /**
     * A field that will have an IPv4 address generated as example
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> ipv4Format() {
        return (Optional<String>) ipv4Format;
    }

    /**
     * A field that will have an IPv6 address generated as example
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> ipv6Format() {
        return (Optional<String>) ipv6Format;
    }

    /**
     * A field that will have a JSON generated as example
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> jsonFormat() {
        return (Optional<String>) jsonFormat;
    }

    /**
     * A field that will have a MAC address generated as example
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> macFormat() {
        return (Optional<String>) macFormat;
    }

    /**
     * A field that will have a fake password generated as example
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> passwordFormat() {
        return (Optional<String>) passwordFormat;
    }

    /**
     * A field that will have a phone number generated as example
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> phoneFormat() {
        return (Optional<String>) phoneFormat;
    }

    /**
     * A field that will have a timezone generated as example
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> timezoneFormat() {
        return (Optional<String>) timezoneFormat;
    }

    /**
     * A field that will have random words generated as example
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> unknownFormat() {
        return (Optional<String>) unknownFormat;
    }

    /**
     * A field that will have a URL generated as example
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> urlFormat() {
        return (Optional<String>) urlFormat;
    }

    /**
     * A field that will have a UUID generated as example
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> uuidFormat() {
        return (Optional<String>) uuidFormat;
    }

    /**
     * A field that will have a postal code generated as example
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> zipcodeFormat() {
        return (Optional<String>) zipcodeFormat;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A field that will have an address generated as example
     */
    public FakerFormattedStrings withAddressFormat(String addressFormat) {
        Utils.checkNotNull(addressFormat, "addressFormat");
        this.addressFormat = Optional.ofNullable(addressFormat);
        return this;
    }

    /**
     * A field that will have an address generated as example
     */
    public FakerFormattedStrings withAddressFormat(Optional<? extends String> addressFormat) {
        Utils.checkNotNull(addressFormat, "addressFormat");
        this.addressFormat = addressFormat;
        return this;
    }

    /**
     * A field that will have a directory path generated as example
     */
    public FakerFormattedStrings withDirectoryFormat(String directoryFormat) {
        Utils.checkNotNull(directoryFormat, "directoryFormat");
        this.directoryFormat = Optional.ofNullable(directoryFormat);
        return this;
    }

    /**
     * A field that will have a directory path generated as example
     */
    public FakerFormattedStrings withDirectoryFormat(Optional<? extends String> directoryFormat) {
        Utils.checkNotNull(directoryFormat, "directoryFormat");
        this.directoryFormat = directoryFormat;
        return this;
    }

    /**
     * A field that will have a domain name generated as example
     */
    public FakerFormattedStrings withDomainFormat(String domainFormat) {
        Utils.checkNotNull(domainFormat, "domainFormat");
        this.domainFormat = Optional.ofNullable(domainFormat);
        return this;
    }

    /**
     * A field that will have a domain name generated as example
     */
    public FakerFormattedStrings withDomainFormat(Optional<? extends String> domainFormat) {
        Utils.checkNotNull(domainFormat, "domainFormat");
        this.domainFormat = domainFormat;
        return this;
    }

    /**
     * A field that will have an email address generated as example
     */
    public FakerFormattedStrings withEmailFormat(String emailFormat) {
        Utils.checkNotNull(emailFormat, "emailFormat");
        this.emailFormat = Optional.ofNullable(emailFormat);
        return this;
    }

    /**
     * A field that will have an email address generated as example
     */
    public FakerFormattedStrings withEmailFormat(Optional<? extends String> emailFormat) {
        Utils.checkNotNull(emailFormat, "emailFormat");
        this.emailFormat = emailFormat;
        return this;
    }

    /**
     * A field that will have a filename generated as example
     */
    public FakerFormattedStrings withFilenameFormat(String filenameFormat) {
        Utils.checkNotNull(filenameFormat, "filenameFormat");
        this.filenameFormat = Optional.ofNullable(filenameFormat);
        return this;
    }

    /**
     * A field that will have a filename generated as example
     */
    public FakerFormattedStrings withFilenameFormat(Optional<? extends String> filenameFormat) {
        Utils.checkNotNull(filenameFormat, "filenameFormat");
        this.filenameFormat = filenameFormat;
        return this;
    }

    /**
     * A field that will have a file path generated as example
     */
    public FakerFormattedStrings withFilepathFormat(String filepathFormat) {
        Utils.checkNotNull(filepathFormat, "filepathFormat");
        this.filepathFormat = Optional.ofNullable(filepathFormat);
        return this;
    }

    /**
     * A field that will have a file path generated as example
     */
    public FakerFormattedStrings withFilepathFormat(Optional<? extends String> filepathFormat) {
        Utils.checkNotNull(filepathFormat, "filepathFormat");
        this.filepathFormat = filepathFormat;
        return this;
    }

    /**
     * A field that will have a image url generated as example
     */
    public FakerFormattedStrings withImageFormat(String imageFormat) {
        Utils.checkNotNull(imageFormat, "imageFormat");
        this.imageFormat = Optional.ofNullable(imageFormat);
        return this;
    }

    /**
     * A field that will have a image url generated as example
     */
    public FakerFormattedStrings withImageFormat(Optional<? extends String> imageFormat) {
        Utils.checkNotNull(imageFormat, "imageFormat");
        this.imageFormat = imageFormat;
        return this;
    }

    /**
     * A field that will have an IPv4 address generated as example
     */
    public FakerFormattedStrings withIpv4Format(String ipv4Format) {
        Utils.checkNotNull(ipv4Format, "ipv4Format");
        this.ipv4Format = Optional.ofNullable(ipv4Format);
        return this;
    }

    /**
     * A field that will have an IPv4 address generated as example
     */
    public FakerFormattedStrings withIpv4Format(Optional<? extends String> ipv4Format) {
        Utils.checkNotNull(ipv4Format, "ipv4Format");
        this.ipv4Format = ipv4Format;
        return this;
    }

    /**
     * A field that will have an IPv6 address generated as example
     */
    public FakerFormattedStrings withIpv6Format(String ipv6Format) {
        Utils.checkNotNull(ipv6Format, "ipv6Format");
        this.ipv6Format = Optional.ofNullable(ipv6Format);
        return this;
    }

    /**
     * A field that will have an IPv6 address generated as example
     */
    public FakerFormattedStrings withIpv6Format(Optional<? extends String> ipv6Format) {
        Utils.checkNotNull(ipv6Format, "ipv6Format");
        this.ipv6Format = ipv6Format;
        return this;
    }

    /**
     * A field that will have a JSON generated as example
     */
    public FakerFormattedStrings withJsonFormat(String jsonFormat) {
        Utils.checkNotNull(jsonFormat, "jsonFormat");
        this.jsonFormat = Optional.ofNullable(jsonFormat);
        return this;
    }

    /**
     * A field that will have a JSON generated as example
     */
    public FakerFormattedStrings withJsonFormat(Optional<? extends String> jsonFormat) {
        Utils.checkNotNull(jsonFormat, "jsonFormat");
        this.jsonFormat = jsonFormat;
        return this;
    }

    /**
     * A field that will have a MAC address generated as example
     */
    public FakerFormattedStrings withMacFormat(String macFormat) {
        Utils.checkNotNull(macFormat, "macFormat");
        this.macFormat = Optional.ofNullable(macFormat);
        return this;
    }

    /**
     * A field that will have a MAC address generated as example
     */
    public FakerFormattedStrings withMacFormat(Optional<? extends String> macFormat) {
        Utils.checkNotNull(macFormat, "macFormat");
        this.macFormat = macFormat;
        return this;
    }

    /**
     * A field that will have a fake password generated as example
     */
    public FakerFormattedStrings withPasswordFormat(String passwordFormat) {
        Utils.checkNotNull(passwordFormat, "passwordFormat");
        this.passwordFormat = Optional.ofNullable(passwordFormat);
        return this;
    }

    /**
     * A field that will have a fake password generated as example
     */
    public FakerFormattedStrings withPasswordFormat(Optional<? extends String> passwordFormat) {
        Utils.checkNotNull(passwordFormat, "passwordFormat");
        this.passwordFormat = passwordFormat;
        return this;
    }

    /**
     * A field that will have a phone number generated as example
     */
    public FakerFormattedStrings withPhoneFormat(String phoneFormat) {
        Utils.checkNotNull(phoneFormat, "phoneFormat");
        this.phoneFormat = Optional.ofNullable(phoneFormat);
        return this;
    }

    /**
     * A field that will have a phone number generated as example
     */
    public FakerFormattedStrings withPhoneFormat(Optional<? extends String> phoneFormat) {
        Utils.checkNotNull(phoneFormat, "phoneFormat");
        this.phoneFormat = phoneFormat;
        return this;
    }

    /**
     * A field that will have a timezone generated as example
     */
    public FakerFormattedStrings withTimezoneFormat(String timezoneFormat) {
        Utils.checkNotNull(timezoneFormat, "timezoneFormat");
        this.timezoneFormat = Optional.ofNullable(timezoneFormat);
        return this;
    }

    /**
     * A field that will have a timezone generated as example
     */
    public FakerFormattedStrings withTimezoneFormat(Optional<? extends String> timezoneFormat) {
        Utils.checkNotNull(timezoneFormat, "timezoneFormat");
        this.timezoneFormat = timezoneFormat;
        return this;
    }

    /**
     * A field that will have random words generated as example
     */
    public FakerFormattedStrings withUnknownFormat(String unknownFormat) {
        Utils.checkNotNull(unknownFormat, "unknownFormat");
        this.unknownFormat = Optional.ofNullable(unknownFormat);
        return this;
    }

    /**
     * A field that will have random words generated as example
     */
    public FakerFormattedStrings withUnknownFormat(Optional<? extends String> unknownFormat) {
        Utils.checkNotNull(unknownFormat, "unknownFormat");
        this.unknownFormat = unknownFormat;
        return this;
    }

    /**
     * A field that will have a URL generated as example
     */
    public FakerFormattedStrings withUrlFormat(String urlFormat) {
        Utils.checkNotNull(urlFormat, "urlFormat");
        this.urlFormat = Optional.ofNullable(urlFormat);
        return this;
    }

    /**
     * A field that will have a URL generated as example
     */
    public FakerFormattedStrings withUrlFormat(Optional<? extends String> urlFormat) {
        Utils.checkNotNull(urlFormat, "urlFormat");
        this.urlFormat = urlFormat;
        return this;
    }

    /**
     * A field that will have a UUID generated as example
     */
    public FakerFormattedStrings withUuidFormat(String uuidFormat) {
        Utils.checkNotNull(uuidFormat, "uuidFormat");
        this.uuidFormat = Optional.ofNullable(uuidFormat);
        return this;
    }

    /**
     * A field that will have a UUID generated as example
     */
    public FakerFormattedStrings withUuidFormat(Optional<? extends String> uuidFormat) {
        Utils.checkNotNull(uuidFormat, "uuidFormat");
        this.uuidFormat = uuidFormat;
        return this;
    }

    /**
     * A field that will have a postal code generated as example
     */
    public FakerFormattedStrings withZipcodeFormat(String zipcodeFormat) {
        Utils.checkNotNull(zipcodeFormat, "zipcodeFormat");
        this.zipcodeFormat = Optional.ofNullable(zipcodeFormat);
        return this;
    }

    /**
     * A field that will have a postal code generated as example
     */
    public FakerFormattedStrings withZipcodeFormat(Optional<? extends String> zipcodeFormat) {
        Utils.checkNotNull(zipcodeFormat, "zipcodeFormat");
        this.zipcodeFormat = zipcodeFormat;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FakerFormattedStrings other = (FakerFormattedStrings) o;
        return 
            java.util.Objects.deepEquals(this.addressFormat, other.addressFormat) &&
            java.util.Objects.deepEquals(this.directoryFormat, other.directoryFormat) &&
            java.util.Objects.deepEquals(this.domainFormat, other.domainFormat) &&
            java.util.Objects.deepEquals(this.emailFormat, other.emailFormat) &&
            java.util.Objects.deepEquals(this.filenameFormat, other.filenameFormat) &&
            java.util.Objects.deepEquals(this.filepathFormat, other.filepathFormat) &&
            java.util.Objects.deepEquals(this.imageFormat, other.imageFormat) &&
            java.util.Objects.deepEquals(this.ipv4Format, other.ipv4Format) &&
            java.util.Objects.deepEquals(this.ipv6Format, other.ipv6Format) &&
            java.util.Objects.deepEquals(this.jsonFormat, other.jsonFormat) &&
            java.util.Objects.deepEquals(this.macFormat, other.macFormat) &&
            java.util.Objects.deepEquals(this.passwordFormat, other.passwordFormat) &&
            java.util.Objects.deepEquals(this.phoneFormat, other.phoneFormat) &&
            java.util.Objects.deepEquals(this.timezoneFormat, other.timezoneFormat) &&
            java.util.Objects.deepEquals(this.unknownFormat, other.unknownFormat) &&
            java.util.Objects.deepEquals(this.urlFormat, other.urlFormat) &&
            java.util.Objects.deepEquals(this.uuidFormat, other.uuidFormat) &&
            java.util.Objects.deepEquals(this.zipcodeFormat, other.zipcodeFormat);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            addressFormat,
            directoryFormat,
            domainFormat,
            emailFormat,
            filenameFormat,
            filepathFormat,
            imageFormat,
            ipv4Format,
            ipv6Format,
            jsonFormat,
            macFormat,
            passwordFormat,
            phoneFormat,
            timezoneFormat,
            unknownFormat,
            urlFormat,
            uuidFormat,
            zipcodeFormat);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FakerFormattedStrings.class,
                "addressFormat", addressFormat,
                "directoryFormat", directoryFormat,
                "domainFormat", domainFormat,
                "emailFormat", emailFormat,
                "filenameFormat", filenameFormat,
                "filepathFormat", filepathFormat,
                "imageFormat", imageFormat,
                "ipv4Format", ipv4Format,
                "ipv6Format", ipv6Format,
                "jsonFormat", jsonFormat,
                "macFormat", macFormat,
                "passwordFormat", passwordFormat,
                "phoneFormat", phoneFormat,
                "timezoneFormat", timezoneFormat,
                "unknownFormat", unknownFormat,
                "urlFormat", urlFormat,
                "uuidFormat", uuidFormat,
                "zipcodeFormat", zipcodeFormat);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> addressFormat = Optional.empty();
 
        private Optional<? extends String> directoryFormat = Optional.empty();
 
        private Optional<? extends String> domainFormat = Optional.empty();
 
        private Optional<? extends String> emailFormat = Optional.empty();
 
        private Optional<? extends String> filenameFormat = Optional.empty();
 
        private Optional<? extends String> filepathFormat = Optional.empty();
 
        private Optional<? extends String> imageFormat = Optional.empty();
 
        private Optional<? extends String> ipv4Format = Optional.empty();
 
        private Optional<? extends String> ipv6Format = Optional.empty();
 
        private Optional<? extends String> jsonFormat = Optional.empty();
 
        private Optional<? extends String> macFormat = Optional.empty();
 
        private Optional<? extends String> passwordFormat = Optional.empty();
 
        private Optional<? extends String> phoneFormat = Optional.empty();
 
        private Optional<? extends String> timezoneFormat = Optional.empty();
 
        private Optional<? extends String> unknownFormat = Optional.empty();
 
        private Optional<? extends String> urlFormat = Optional.empty();
 
        private Optional<? extends String> uuidFormat = Optional.empty();
 
        private Optional<? extends String> zipcodeFormat = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A field that will have an address generated as example
         */
        public Builder addressFormat(String addressFormat) {
            Utils.checkNotNull(addressFormat, "addressFormat");
            this.addressFormat = Optional.ofNullable(addressFormat);
            return this;
        }

        /**
         * A field that will have an address generated as example
         */
        public Builder addressFormat(Optional<? extends String> addressFormat) {
            Utils.checkNotNull(addressFormat, "addressFormat");
            this.addressFormat = addressFormat;
            return this;
        }

        /**
         * A field that will have a directory path generated as example
         */
        public Builder directoryFormat(String directoryFormat) {
            Utils.checkNotNull(directoryFormat, "directoryFormat");
            this.directoryFormat = Optional.ofNullable(directoryFormat);
            return this;
        }

        /**
         * A field that will have a directory path generated as example
         */
        public Builder directoryFormat(Optional<? extends String> directoryFormat) {
            Utils.checkNotNull(directoryFormat, "directoryFormat");
            this.directoryFormat = directoryFormat;
            return this;
        }

        /**
         * A field that will have a domain name generated as example
         */
        public Builder domainFormat(String domainFormat) {
            Utils.checkNotNull(domainFormat, "domainFormat");
            this.domainFormat = Optional.ofNullable(domainFormat);
            return this;
        }

        /**
         * A field that will have a domain name generated as example
         */
        public Builder domainFormat(Optional<? extends String> domainFormat) {
            Utils.checkNotNull(domainFormat, "domainFormat");
            this.domainFormat = domainFormat;
            return this;
        }

        /**
         * A field that will have an email address generated as example
         */
        public Builder emailFormat(String emailFormat) {
            Utils.checkNotNull(emailFormat, "emailFormat");
            this.emailFormat = Optional.ofNullable(emailFormat);
            return this;
        }

        /**
         * A field that will have an email address generated as example
         */
        public Builder emailFormat(Optional<? extends String> emailFormat) {
            Utils.checkNotNull(emailFormat, "emailFormat");
            this.emailFormat = emailFormat;
            return this;
        }

        /**
         * A field that will have a filename generated as example
         */
        public Builder filenameFormat(String filenameFormat) {
            Utils.checkNotNull(filenameFormat, "filenameFormat");
            this.filenameFormat = Optional.ofNullable(filenameFormat);
            return this;
        }

        /**
         * A field that will have a filename generated as example
         */
        public Builder filenameFormat(Optional<? extends String> filenameFormat) {
            Utils.checkNotNull(filenameFormat, "filenameFormat");
            this.filenameFormat = filenameFormat;
            return this;
        }

        /**
         * A field that will have a file path generated as example
         */
        public Builder filepathFormat(String filepathFormat) {
            Utils.checkNotNull(filepathFormat, "filepathFormat");
            this.filepathFormat = Optional.ofNullable(filepathFormat);
            return this;
        }

        /**
         * A field that will have a file path generated as example
         */
        public Builder filepathFormat(Optional<? extends String> filepathFormat) {
            Utils.checkNotNull(filepathFormat, "filepathFormat");
            this.filepathFormat = filepathFormat;
            return this;
        }

        /**
         * A field that will have a image url generated as example
         */
        public Builder imageFormat(String imageFormat) {
            Utils.checkNotNull(imageFormat, "imageFormat");
            this.imageFormat = Optional.ofNullable(imageFormat);
            return this;
        }

        /**
         * A field that will have a image url generated as example
         */
        public Builder imageFormat(Optional<? extends String> imageFormat) {
            Utils.checkNotNull(imageFormat, "imageFormat");
            this.imageFormat = imageFormat;
            return this;
        }

        /**
         * A field that will have an IPv4 address generated as example
         */
        public Builder ipv4Format(String ipv4Format) {
            Utils.checkNotNull(ipv4Format, "ipv4Format");
            this.ipv4Format = Optional.ofNullable(ipv4Format);
            return this;
        }

        /**
         * A field that will have an IPv4 address generated as example
         */
        public Builder ipv4Format(Optional<? extends String> ipv4Format) {
            Utils.checkNotNull(ipv4Format, "ipv4Format");
            this.ipv4Format = ipv4Format;
            return this;
        }

        /**
         * A field that will have an IPv6 address generated as example
         */
        public Builder ipv6Format(String ipv6Format) {
            Utils.checkNotNull(ipv6Format, "ipv6Format");
            this.ipv6Format = Optional.ofNullable(ipv6Format);
            return this;
        }

        /**
         * A field that will have an IPv6 address generated as example
         */
        public Builder ipv6Format(Optional<? extends String> ipv6Format) {
            Utils.checkNotNull(ipv6Format, "ipv6Format");
            this.ipv6Format = ipv6Format;
            return this;
        }

        /**
         * A field that will have a JSON generated as example
         */
        public Builder jsonFormat(String jsonFormat) {
            Utils.checkNotNull(jsonFormat, "jsonFormat");
            this.jsonFormat = Optional.ofNullable(jsonFormat);
            return this;
        }

        /**
         * A field that will have a JSON generated as example
         */
        public Builder jsonFormat(Optional<? extends String> jsonFormat) {
            Utils.checkNotNull(jsonFormat, "jsonFormat");
            this.jsonFormat = jsonFormat;
            return this;
        }

        /**
         * A field that will have a MAC address generated as example
         */
        public Builder macFormat(String macFormat) {
            Utils.checkNotNull(macFormat, "macFormat");
            this.macFormat = Optional.ofNullable(macFormat);
            return this;
        }

        /**
         * A field that will have a MAC address generated as example
         */
        public Builder macFormat(Optional<? extends String> macFormat) {
            Utils.checkNotNull(macFormat, "macFormat");
            this.macFormat = macFormat;
            return this;
        }

        /**
         * A field that will have a fake password generated as example
         */
        public Builder passwordFormat(String passwordFormat) {
            Utils.checkNotNull(passwordFormat, "passwordFormat");
            this.passwordFormat = Optional.ofNullable(passwordFormat);
            return this;
        }

        /**
         * A field that will have a fake password generated as example
         */
        public Builder passwordFormat(Optional<? extends String> passwordFormat) {
            Utils.checkNotNull(passwordFormat, "passwordFormat");
            this.passwordFormat = passwordFormat;
            return this;
        }

        /**
         * A field that will have a phone number generated as example
         */
        public Builder phoneFormat(String phoneFormat) {
            Utils.checkNotNull(phoneFormat, "phoneFormat");
            this.phoneFormat = Optional.ofNullable(phoneFormat);
            return this;
        }

        /**
         * A field that will have a phone number generated as example
         */
        public Builder phoneFormat(Optional<? extends String> phoneFormat) {
            Utils.checkNotNull(phoneFormat, "phoneFormat");
            this.phoneFormat = phoneFormat;
            return this;
        }

        /**
         * A field that will have a timezone generated as example
         */
        public Builder timezoneFormat(String timezoneFormat) {
            Utils.checkNotNull(timezoneFormat, "timezoneFormat");
            this.timezoneFormat = Optional.ofNullable(timezoneFormat);
            return this;
        }

        /**
         * A field that will have a timezone generated as example
         */
        public Builder timezoneFormat(Optional<? extends String> timezoneFormat) {
            Utils.checkNotNull(timezoneFormat, "timezoneFormat");
            this.timezoneFormat = timezoneFormat;
            return this;
        }

        /**
         * A field that will have random words generated as example
         */
        public Builder unknownFormat(String unknownFormat) {
            Utils.checkNotNull(unknownFormat, "unknownFormat");
            this.unknownFormat = Optional.ofNullable(unknownFormat);
            return this;
        }

        /**
         * A field that will have random words generated as example
         */
        public Builder unknownFormat(Optional<? extends String> unknownFormat) {
            Utils.checkNotNull(unknownFormat, "unknownFormat");
            this.unknownFormat = unknownFormat;
            return this;
        }

        /**
         * A field that will have a URL generated as example
         */
        public Builder urlFormat(String urlFormat) {
            Utils.checkNotNull(urlFormat, "urlFormat");
            this.urlFormat = Optional.ofNullable(urlFormat);
            return this;
        }

        /**
         * A field that will have a URL generated as example
         */
        public Builder urlFormat(Optional<? extends String> urlFormat) {
            Utils.checkNotNull(urlFormat, "urlFormat");
            this.urlFormat = urlFormat;
            return this;
        }

        /**
         * A field that will have a UUID generated as example
         */
        public Builder uuidFormat(String uuidFormat) {
            Utils.checkNotNull(uuidFormat, "uuidFormat");
            this.uuidFormat = Optional.ofNullable(uuidFormat);
            return this;
        }

        /**
         * A field that will have a UUID generated as example
         */
        public Builder uuidFormat(Optional<? extends String> uuidFormat) {
            Utils.checkNotNull(uuidFormat, "uuidFormat");
            this.uuidFormat = uuidFormat;
            return this;
        }

        /**
         * A field that will have a postal code generated as example
         */
        public Builder zipcodeFormat(String zipcodeFormat) {
            Utils.checkNotNull(zipcodeFormat, "zipcodeFormat");
            this.zipcodeFormat = Optional.ofNullable(zipcodeFormat);
            return this;
        }

        /**
         * A field that will have a postal code generated as example
         */
        public Builder zipcodeFormat(Optional<? extends String> zipcodeFormat) {
            Utils.checkNotNull(zipcodeFormat, "zipcodeFormat");
            this.zipcodeFormat = zipcodeFormat;
            return this;
        }
        
        public FakerFormattedStrings build() {
            return new FakerFormattedStrings(
                addressFormat,
                directoryFormat,
                domainFormat,
                emailFormat,
                filenameFormat,
                filepathFormat,
                imageFormat,
                ipv4Format,
                ipv6Format,
                jsonFormat,
                macFormat,
                passwordFormat,
                phoneFormat,
                timezoneFormat,
                unknownFormat,
                urlFormat,
                uuidFormat,
                zipcodeFormat);
        }
    }
}

