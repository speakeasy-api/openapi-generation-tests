/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.utils.Utils;

/**
 * FakerKebobCasePropertyNameStrings - A set of strings with kebob case fieldnames that lead to relevant examples being generated for them
 */

public class FakerKebobCasePropertyNameStrings {

    @JsonProperty("postal-code")
    private String postalCode;

    @JsonCreator
    public FakerKebobCasePropertyNameStrings(
            @JsonProperty("postal-code") String postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = postalCode;
    }

    @JsonIgnore
    public String postalCode() {
        return postalCode;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public FakerKebobCasePropertyNameStrings withPostalCode(String postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = postalCode;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FakerKebobCasePropertyNameStrings other = (FakerKebobCasePropertyNameStrings) o;
        return 
            Objects.deepEquals(this.postalCode, other.postalCode);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            postalCode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FakerKebobCasePropertyNameStrings.class,
                "postalCode", postalCode);
    }
    
    public final static class Builder {
 
        private String postalCode;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder postalCode(String postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = postalCode;
            return this;
        }
        
        public FakerKebobCasePropertyNameStrings build() {
            return new FakerKebobCasePropertyNameStrings(
                postalCode);
        }
    }
}

