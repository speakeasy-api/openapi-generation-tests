/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

/**
 * FakerPascalCasePropertyNameStrings - A set of strings with pascal case fieldnames that lead to relevant examples being generated for them
 */

public class FakerPascalCasePropertyNameStrings {

    @JsonProperty("account")
    private String account;

    @JsonProperty("address")
    private String address;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addressLine1")
    private Optional<String> addressLine1;

    @JsonProperty("amount")
    private String amount;

    @JsonProperty("avatar")
    private String avatar;

    @JsonProperty("city")
    private String city;

    @JsonProperty("color")
    private String color;

    @JsonProperty("comment")
    private String comment;

    @JsonProperty("company")
    private String company;

    @JsonProperty("continent")
    private String continent;

    @JsonProperty("country")
    private String country;

    @JsonProperty("countryCode")
    private String countryCode;

    /**
     * RFC3339 formatted timestamp
     */
    @JsonProperty("createdAt")
    private String createdAt;

    @JsonProperty("currency")
    private String currency;

    @JsonProperty("currencyCode")
    private String currencyCode;

    @JsonProperty("currencyISO")
    private String currencyISO;

    @JsonProperty("datatype")
    private String datatype;

    @JsonProperty("default")
    private String default_;

    @JsonProperty("description")
    private String description;

    @JsonProperty("directory")
    private String directory;

    @JsonProperty("domain")
    private String domain;

    @JsonProperty("domainName")
    private String domainName;

    @JsonProperty("email")
    private String email;

    @JsonProperty("emailAddr")
    private String emailAddr;

    @JsonProperty("emailAddress")
    private String emailAddress;

    @JsonProperty("expiredAt")
    private String expiredAt;

    @JsonProperty("expires")
    private String expires;

    @JsonProperty("expiresAt")
    private String expiresAt;

    @JsonProperty("extension")
    private String extension;

    @JsonProperty("filename")
    private String filename;

    @JsonProperty("filepath")
    private String filepath;

    @JsonProperty("filetype")
    private String filetype;

    @JsonProperty("firstName")
    private String firstName;

    @JsonProperty("fullName")
    private String fullName;

    @JsonProperty("gender")
    private String gender;

    @JsonProperty("host")
    private String host;

    @JsonProperty("hostName")
    private String hostName;

    @JsonProperty("httpStatus")
    private String httpStatus;

    @JsonProperty("iban")
    private String iban;

    @JsonProperty("id")
    private String id;

    @JsonProperty("ip")
    private String ip;

    @JsonProperty("ipAddr")
    private String ipAddr;

    @JsonProperty("ipAddress")
    private String ipAddress;

    @JsonProperty("ipv4")
    private String ipv4;

    @JsonProperty("ipv6")
    private String ipv6;

    @JsonProperty("job")
    private String job;

    @JsonProperty("json")
    private String json;

    @JsonProperty("key")
    private String key;

    @JsonProperty("lastName")
    private String lastName;

    @JsonProperty("latitude")
    private String latitude;

    @JsonProperty("locale")
    private String locale;

    @JsonProperty("longitude")
    private String longitude;

    @JsonProperty("mac")
    private String mac;

    @JsonProperty("manufacturer")
    private String manufacturer;

    @JsonProperty("material")
    private String material;

    @JsonProperty("middleName")
    private String middleName;

    @JsonProperty("model")
    private String model;

    @JsonProperty("password")
    private String password;

    @JsonProperty("phone")
    private String phone;

    @JsonProperty("pin")
    private String pin;

    @JsonProperty("postalCode")
    private String postalCode;

    @JsonProperty("price")
    private String price;

    @JsonProperty("product")
    private String product;

    @JsonProperty("sex")
    private String sex;

    @JsonProperty("statusCode")
    private String statusCode;

    @JsonProperty("street")
    private String street;

    @JsonProperty("timezone")
    private String timezone;

    @JsonProperty("unit")
    private String unit;

    /**
     * RFC3339 formatted timestamp
     */
    @JsonProperty("updatedAt")
    private String updatedAt;

    @JsonProperty("uri")
    private String uri;

    @JsonProperty("url")
    private String url;

    @JsonProperty("username")
    private String username;

    @JsonProperty("uuid")
    private String uuid;

    @JsonCreator
    public FakerPascalCasePropertyNameStrings(
            @JsonProperty("account") String account,
            @JsonProperty("address") String address,
            @JsonProperty("addressLine1") Optional<String> addressLine1,
            @JsonProperty("amount") String amount,
            @JsonProperty("avatar") String avatar,
            @JsonProperty("city") String city,
            @JsonProperty("color") String color,
            @JsonProperty("comment") String comment,
            @JsonProperty("company") String company,
            @JsonProperty("continent") String continent,
            @JsonProperty("country") String country,
            @JsonProperty("countryCode") String countryCode,
            @JsonProperty("createdAt") String createdAt,
            @JsonProperty("currency") String currency,
            @JsonProperty("currencyCode") String currencyCode,
            @JsonProperty("currencyISO") String currencyISO,
            @JsonProperty("datatype") String datatype,
            @JsonProperty("default") String default_,
            @JsonProperty("description") String description,
            @JsonProperty("directory") String directory,
            @JsonProperty("domain") String domain,
            @JsonProperty("domainName") String domainName,
            @JsonProperty("email") String email,
            @JsonProperty("emailAddr") String emailAddr,
            @JsonProperty("emailAddress") String emailAddress,
            @JsonProperty("expiredAt") String expiredAt,
            @JsonProperty("expires") String expires,
            @JsonProperty("expiresAt") String expiresAt,
            @JsonProperty("extension") String extension,
            @JsonProperty("filename") String filename,
            @JsonProperty("filepath") String filepath,
            @JsonProperty("filetype") String filetype,
            @JsonProperty("firstName") String firstName,
            @JsonProperty("fullName") String fullName,
            @JsonProperty("gender") String gender,
            @JsonProperty("host") String host,
            @JsonProperty("hostName") String hostName,
            @JsonProperty("httpStatus") String httpStatus,
            @JsonProperty("iban") String iban,
            @JsonProperty("id") String id,
            @JsonProperty("ip") String ip,
            @JsonProperty("ipAddr") String ipAddr,
            @JsonProperty("ipAddress") String ipAddress,
            @JsonProperty("ipv4") String ipv4,
            @JsonProperty("ipv6") String ipv6,
            @JsonProperty("job") String job,
            @JsonProperty("json") String json,
            @JsonProperty("key") String key,
            @JsonProperty("lastName") String lastName,
            @JsonProperty("latitude") String latitude,
            @JsonProperty("locale") String locale,
            @JsonProperty("longitude") String longitude,
            @JsonProperty("mac") String mac,
            @JsonProperty("manufacturer") String manufacturer,
            @JsonProperty("material") String material,
            @JsonProperty("middleName") String middleName,
            @JsonProperty("model") String model,
            @JsonProperty("password") String password,
            @JsonProperty("phone") String phone,
            @JsonProperty("pin") String pin,
            @JsonProperty("postalCode") String postalCode,
            @JsonProperty("price") String price,
            @JsonProperty("product") String product,
            @JsonProperty("sex") String sex,
            @JsonProperty("statusCode") String statusCode,
            @JsonProperty("street") String street,
            @JsonProperty("timezone") String timezone,
            @JsonProperty("unit") String unit,
            @JsonProperty("updatedAt") String updatedAt,
            @JsonProperty("uri") String uri,
            @JsonProperty("url") String url,
            @JsonProperty("username") String username,
            @JsonProperty("uuid") String uuid) {
        Utils.checkNotNull(account, "account");
        Utils.checkNotNull(address, "address");
        Utils.checkNotNull(addressLine1, "addressLine1");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(avatar, "avatar");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(color, "color");
        Utils.checkNotNull(comment, "comment");
        Utils.checkNotNull(company, "company");
        Utils.checkNotNull(continent, "continent");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(countryCode, "countryCode");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(currencyCode, "currencyCode");
        Utils.checkNotNull(currencyISO, "currencyISO");
        Utils.checkNotNull(datatype, "datatype");
        Utils.checkNotNull(default_, "default_");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(directory, "directory");
        Utils.checkNotNull(domain, "domain");
        Utils.checkNotNull(domainName, "domainName");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(emailAddr, "emailAddr");
        Utils.checkNotNull(emailAddress, "emailAddress");
        Utils.checkNotNull(expiredAt, "expiredAt");
        Utils.checkNotNull(expires, "expires");
        Utils.checkNotNull(expiresAt, "expiresAt");
        Utils.checkNotNull(extension, "extension");
        Utils.checkNotNull(filename, "filename");
        Utils.checkNotNull(filepath, "filepath");
        Utils.checkNotNull(filetype, "filetype");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(fullName, "fullName");
        Utils.checkNotNull(gender, "gender");
        Utils.checkNotNull(host, "host");
        Utils.checkNotNull(hostName, "hostName");
        Utils.checkNotNull(httpStatus, "httpStatus");
        Utils.checkNotNull(iban, "iban");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(ip, "ip");
        Utils.checkNotNull(ipAddr, "ipAddr");
        Utils.checkNotNull(ipAddress, "ipAddress");
        Utils.checkNotNull(ipv4, "ipv4");
        Utils.checkNotNull(ipv6, "ipv6");
        Utils.checkNotNull(job, "job");
        Utils.checkNotNull(json, "json");
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(latitude, "latitude");
        Utils.checkNotNull(locale, "locale");
        Utils.checkNotNull(longitude, "longitude");
        Utils.checkNotNull(mac, "mac");
        Utils.checkNotNull(manufacturer, "manufacturer");
        Utils.checkNotNull(material, "material");
        Utils.checkNotNull(middleName, "middleName");
        Utils.checkNotNull(model, "model");
        Utils.checkNotNull(password, "password");
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(pin, "pin");
        Utils.checkNotNull(postalCode, "postalCode");
        Utils.checkNotNull(price, "price");
        Utils.checkNotNull(product, "product");
        Utils.checkNotNull(sex, "sex");
        Utils.checkNotNull(statusCode, "statusCode");
        Utils.checkNotNull(street, "street");
        Utils.checkNotNull(timezone, "timezone");
        Utils.checkNotNull(unit, "unit");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(uri, "uri");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(username, "username");
        Utils.checkNotNull(uuid, "uuid");
        this.account = account;
        this.address = address;
        this.addressLine1 = addressLine1;
        this.amount = amount;
        this.avatar = avatar;
        this.city = city;
        this.color = color;
        this.comment = comment;
        this.company = company;
        this.continent = continent;
        this.country = country;
        this.countryCode = countryCode;
        this.createdAt = createdAt;
        this.currency = currency;
        this.currencyCode = currencyCode;
        this.currencyISO = currencyISO;
        this.datatype = datatype;
        this.default_ = default_;
        this.description = description;
        this.directory = directory;
        this.domain = domain;
        this.domainName = domainName;
        this.email = email;
        this.emailAddr = emailAddr;
        this.emailAddress = emailAddress;
        this.expiredAt = expiredAt;
        this.expires = expires;
        this.expiresAt = expiresAt;
        this.extension = extension;
        this.filename = filename;
        this.filepath = filepath;
        this.filetype = filetype;
        this.firstName = firstName;
        this.fullName = fullName;
        this.gender = gender;
        this.host = host;
        this.hostName = hostName;
        this.httpStatus = httpStatus;
        this.iban = iban;
        this.id = id;
        this.ip = ip;
        this.ipAddr = ipAddr;
        this.ipAddress = ipAddress;
        this.ipv4 = ipv4;
        this.ipv6 = ipv6;
        this.job = job;
        this.json = json;
        this.key = key;
        this.lastName = lastName;
        this.latitude = latitude;
        this.locale = locale;
        this.longitude = longitude;
        this.mac = mac;
        this.manufacturer = manufacturer;
        this.material = material;
        this.middleName = middleName;
        this.model = model;
        this.password = password;
        this.phone = phone;
        this.pin = pin;
        this.postalCode = postalCode;
        this.price = price;
        this.product = product;
        this.sex = sex;
        this.statusCode = statusCode;
        this.street = street;
        this.timezone = timezone;
        this.unit = unit;
        this.updatedAt = updatedAt;
        this.uri = uri;
        this.url = url;
        this.username = username;
        this.uuid = uuid;
    }
    
    public FakerPascalCasePropertyNameStrings(
            String account,
            String address,
            String amount,
            String avatar,
            String city,
            String color,
            String comment,
            String company,
            String continent,
            String country,
            String countryCode,
            String createdAt,
            String currency,
            String currencyCode,
            String currencyISO,
            String datatype,
            String default_,
            String description,
            String directory,
            String domain,
            String domainName,
            String email,
            String emailAddr,
            String emailAddress,
            String expiredAt,
            String expires,
            String expiresAt,
            String extension,
            String filename,
            String filepath,
            String filetype,
            String firstName,
            String fullName,
            String gender,
            String host,
            String hostName,
            String httpStatus,
            String iban,
            String id,
            String ip,
            String ipAddr,
            String ipAddress,
            String ipv4,
            String ipv6,
            String job,
            String json,
            String key,
            String lastName,
            String latitude,
            String locale,
            String longitude,
            String mac,
            String manufacturer,
            String material,
            String middleName,
            String model,
            String password,
            String phone,
            String pin,
            String postalCode,
            String price,
            String product,
            String sex,
            String statusCode,
            String street,
            String timezone,
            String unit,
            String updatedAt,
            String uri,
            String url,
            String username,
            String uuid) {
        this(account, address, Optional.empty(), amount, avatar, city, color, comment, company, continent, country, countryCode, createdAt, currency, currencyCode, currencyISO, datatype, default_, description, directory, domain, domainName, email, emailAddr, emailAddress, expiredAt, expires, expiresAt, extension, filename, filepath, filetype, firstName, fullName, gender, host, hostName, httpStatus, iban, id, ip, ipAddr, ipAddress, ipv4, ipv6, job, json, key, lastName, latitude, locale, longitude, mac, manufacturer, material, middleName, model, password, phone, pin, postalCode, price, product, sex, statusCode, street, timezone, unit, updatedAt, uri, url, username, uuid);
    }

    @JsonIgnore
    public String account() {
        return account;
    }

    @JsonIgnore
    public String address() {
        return address;
    }

    @JsonIgnore
    public Optional<String> addressLine1() {
        return addressLine1;
    }

    @JsonIgnore
    public String amount() {
        return amount;
    }

    @JsonIgnore
    public String avatar() {
        return avatar;
    }

    @JsonIgnore
    public String city() {
        return city;
    }

    @JsonIgnore
    public String color() {
        return color;
    }

    @JsonIgnore
    public String comment() {
        return comment;
    }

    @JsonIgnore
    public String company() {
        return company;
    }

    @JsonIgnore
    public String continent() {
        return continent;
    }

    @JsonIgnore
    public String country() {
        return country;
    }

    @JsonIgnore
    public String countryCode() {
        return countryCode;
    }

    /**
     * RFC3339 formatted timestamp
     */
    @JsonIgnore
    public String createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public String currency() {
        return currency;
    }

    @JsonIgnore
    public String currencyCode() {
        return currencyCode;
    }

    @JsonIgnore
    public String currencyISO() {
        return currencyISO;
    }

    @JsonIgnore
    public String datatype() {
        return datatype;
    }

    @JsonIgnore
    public String default_() {
        return default_;
    }

    @JsonIgnore
    public String description() {
        return description;
    }

    @JsonIgnore
    public String directory() {
        return directory;
    }

    @JsonIgnore
    public String domain() {
        return domain;
    }

    @JsonIgnore
    public String domainName() {
        return domainName;
    }

    @JsonIgnore
    public String email() {
        return email;
    }

    @JsonIgnore
    public String emailAddr() {
        return emailAddr;
    }

    @JsonIgnore
    public String emailAddress() {
        return emailAddress;
    }

    @JsonIgnore
    public String expiredAt() {
        return expiredAt;
    }

    @JsonIgnore
    public String expires() {
        return expires;
    }

    @JsonIgnore
    public String expiresAt() {
        return expiresAt;
    }

    @JsonIgnore
    public String extension() {
        return extension;
    }

    @JsonIgnore
    public String filename() {
        return filename;
    }

    @JsonIgnore
    public String filepath() {
        return filepath;
    }

    @JsonIgnore
    public String filetype() {
        return filetype;
    }

    @JsonIgnore
    public String firstName() {
        return firstName;
    }

    @JsonIgnore
    public String fullName() {
        return fullName;
    }

    @JsonIgnore
    public String gender() {
        return gender;
    }

    @JsonIgnore
    public String host() {
        return host;
    }

    @JsonIgnore
    public String hostName() {
        return hostName;
    }

    @JsonIgnore
    public String httpStatus() {
        return httpStatus;
    }

    @JsonIgnore
    public String iban() {
        return iban;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public String ip() {
        return ip;
    }

    @JsonIgnore
    public String ipAddr() {
        return ipAddr;
    }

    @JsonIgnore
    public String ipAddress() {
        return ipAddress;
    }

    @JsonIgnore
    public String ipv4() {
        return ipv4;
    }

    @JsonIgnore
    public String ipv6() {
        return ipv6;
    }

    @JsonIgnore
    public String job() {
        return job;
    }

    @JsonIgnore
    public String json() {
        return json;
    }

    @JsonIgnore
    public String key() {
        return key;
    }

    @JsonIgnore
    public String lastName() {
        return lastName;
    }

    @JsonIgnore
    public String latitude() {
        return latitude;
    }

    @JsonIgnore
    public String locale() {
        return locale;
    }

    @JsonIgnore
    public String longitude() {
        return longitude;
    }

    @JsonIgnore
    public String mac() {
        return mac;
    }

    @JsonIgnore
    public String manufacturer() {
        return manufacturer;
    }

    @JsonIgnore
    public String material() {
        return material;
    }

    @JsonIgnore
    public String middleName() {
        return middleName;
    }

    @JsonIgnore
    public String model() {
        return model;
    }

    @JsonIgnore
    public String password() {
        return password;
    }

    @JsonIgnore
    public String phone() {
        return phone;
    }

    @JsonIgnore
    public String pin() {
        return pin;
    }

    @JsonIgnore
    public String postalCode() {
        return postalCode;
    }

    @JsonIgnore
    public String price() {
        return price;
    }

    @JsonIgnore
    public String product() {
        return product;
    }

    @JsonIgnore
    public String sex() {
        return sex;
    }

    @JsonIgnore
    public String statusCode() {
        return statusCode;
    }

    @JsonIgnore
    public String street() {
        return street;
    }

    @JsonIgnore
    public String timezone() {
        return timezone;
    }

    @JsonIgnore
    public String unit() {
        return unit;
    }

    /**
     * RFC3339 formatted timestamp
     */
    @JsonIgnore
    public String updatedAt() {
        return updatedAt;
    }

    @JsonIgnore
    public String uri() {
        return uri;
    }

    @JsonIgnore
    public String url() {
        return url;
    }

    @JsonIgnore
    public String username() {
        return username;
    }

    @JsonIgnore
    public String uuid() {
        return uuid;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public FakerPascalCasePropertyNameStrings withAccount(String account) {
        Utils.checkNotNull(account, "account");
        this.account = account;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withAddress(String address) {
        Utils.checkNotNull(address, "address");
        this.address = address;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withAddressLine1(String addressLine1) {
        Utils.checkNotNull(addressLine1, "addressLine1");
        this.addressLine1 = Optional.ofNullable(addressLine1);
        return this;
    }

    public FakerPascalCasePropertyNameStrings withAddressLine1(Optional<String> addressLine1) {
        Utils.checkNotNull(addressLine1, "addressLine1");
        this.addressLine1 = addressLine1;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withAmount(String amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withAvatar(String avatar) {
        Utils.checkNotNull(avatar, "avatar");
        this.avatar = avatar;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withColor(String color) {
        Utils.checkNotNull(color, "color");
        this.color = color;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withComment(String comment) {
        Utils.checkNotNull(comment, "comment");
        this.comment = comment;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withCompany(String company) {
        Utils.checkNotNull(company, "company");
        this.company = company;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withContinent(String continent) {
        Utils.checkNotNull(continent, "continent");
        this.continent = continent;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withCountryCode(String countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = countryCode;
        return this;
    }

    /**
     * RFC3339 formatted timestamp
     */
    public FakerPascalCasePropertyNameStrings withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withCurrencyCode(String currencyCode) {
        Utils.checkNotNull(currencyCode, "currencyCode");
        this.currencyCode = currencyCode;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withCurrencyISO(String currencyISO) {
        Utils.checkNotNull(currencyISO, "currencyISO");
        this.currencyISO = currencyISO;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withDatatype(String datatype) {
        Utils.checkNotNull(datatype, "datatype");
        this.datatype = datatype;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withDefault(String default_) {
        Utils.checkNotNull(default_, "default_");
        this.default_ = default_;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withDirectory(String directory) {
        Utils.checkNotNull(directory, "directory");
        this.directory = directory;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withDomain(String domain) {
        Utils.checkNotNull(domain, "domain");
        this.domain = domain;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withDomainName(String domainName) {
        Utils.checkNotNull(domainName, "domainName");
        this.domainName = domainName;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withEmailAddr(String emailAddr) {
        Utils.checkNotNull(emailAddr, "emailAddr");
        this.emailAddr = emailAddr;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withEmailAddress(String emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = emailAddress;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withExpiredAt(String expiredAt) {
        Utils.checkNotNull(expiredAt, "expiredAt");
        this.expiredAt = expiredAt;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withExpires(String expires) {
        Utils.checkNotNull(expires, "expires");
        this.expires = expires;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withExpiresAt(String expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = expiresAt;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withExtension(String extension) {
        Utils.checkNotNull(extension, "extension");
        this.extension = extension;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withFilename(String filename) {
        Utils.checkNotNull(filename, "filename");
        this.filename = filename;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withFilepath(String filepath) {
        Utils.checkNotNull(filepath, "filepath");
        this.filepath = filepath;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withFiletype(String filetype) {
        Utils.checkNotNull(filetype, "filetype");
        this.filetype = filetype;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withFullName(String fullName) {
        Utils.checkNotNull(fullName, "fullName");
        this.fullName = fullName;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withGender(String gender) {
        Utils.checkNotNull(gender, "gender");
        this.gender = gender;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withHost(String host) {
        Utils.checkNotNull(host, "host");
        this.host = host;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withHostName(String hostName) {
        Utils.checkNotNull(hostName, "hostName");
        this.hostName = hostName;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withHttpStatus(String httpStatus) {
        Utils.checkNotNull(httpStatus, "httpStatus");
        this.httpStatus = httpStatus;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withIban(String iban) {
        Utils.checkNotNull(iban, "iban");
        this.iban = iban;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withIp(String ip) {
        Utils.checkNotNull(ip, "ip");
        this.ip = ip;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withIpAddr(String ipAddr) {
        Utils.checkNotNull(ipAddr, "ipAddr");
        this.ipAddr = ipAddr;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withIpAddress(String ipAddress) {
        Utils.checkNotNull(ipAddress, "ipAddress");
        this.ipAddress = ipAddress;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withIpv4(String ipv4) {
        Utils.checkNotNull(ipv4, "ipv4");
        this.ipv4 = ipv4;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withIpv6(String ipv6) {
        Utils.checkNotNull(ipv6, "ipv6");
        this.ipv6 = ipv6;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withJob(String job) {
        Utils.checkNotNull(job, "job");
        this.job = job;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withJson(String json) {
        Utils.checkNotNull(json, "json");
        this.json = json;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withLatitude(String latitude) {
        Utils.checkNotNull(latitude, "latitude");
        this.latitude = latitude;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withLocale(String locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = locale;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withLongitude(String longitude) {
        Utils.checkNotNull(longitude, "longitude");
        this.longitude = longitude;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withMac(String mac) {
        Utils.checkNotNull(mac, "mac");
        this.mac = mac;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withManufacturer(String manufacturer) {
        Utils.checkNotNull(manufacturer, "manufacturer");
        this.manufacturer = manufacturer;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withMaterial(String material) {
        Utils.checkNotNull(material, "material");
        this.material = material;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withMiddleName(String middleName) {
        Utils.checkNotNull(middleName, "middleName");
        this.middleName = middleName;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withModel(String model) {
        Utils.checkNotNull(model, "model");
        this.model = model;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withPassword(String password) {
        Utils.checkNotNull(password, "password");
        this.password = password;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withPin(String pin) {
        Utils.checkNotNull(pin, "pin");
        this.pin = pin;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withPostalCode(String postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = postalCode;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withPrice(String price) {
        Utils.checkNotNull(price, "price");
        this.price = price;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withProduct(String product) {
        Utils.checkNotNull(product, "product");
        this.product = product;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withSex(String sex) {
        Utils.checkNotNull(sex, "sex");
        this.sex = sex;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withStatusCode(String statusCode) {
        Utils.checkNotNull(statusCode, "statusCode");
        this.statusCode = statusCode;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withStreet(String street) {
        Utils.checkNotNull(street, "street");
        this.street = street;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withTimezone(String timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = timezone;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withUnit(String unit) {
        Utils.checkNotNull(unit, "unit");
        this.unit = unit;
        return this;
    }

    /**
     * RFC3339 formatted timestamp
     */
    public FakerPascalCasePropertyNameStrings withUpdatedAt(String updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withUri(String uri) {
        Utils.checkNotNull(uri, "uri");
        this.uri = uri;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    public FakerPascalCasePropertyNameStrings withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FakerPascalCasePropertyNameStrings other = (FakerPascalCasePropertyNameStrings) o;
        return 
            Objects.deepEquals(this.account, other.account) &&
            Objects.deepEquals(this.address, other.address) &&
            Objects.deepEquals(this.addressLine1, other.addressLine1) &&
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.avatar, other.avatar) &&
            Objects.deepEquals(this.city, other.city) &&
            Objects.deepEquals(this.color, other.color) &&
            Objects.deepEquals(this.comment, other.comment) &&
            Objects.deepEquals(this.company, other.company) &&
            Objects.deepEquals(this.continent, other.continent) &&
            Objects.deepEquals(this.country, other.country) &&
            Objects.deepEquals(this.countryCode, other.countryCode) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.currencyCode, other.currencyCode) &&
            Objects.deepEquals(this.currencyISO, other.currencyISO) &&
            Objects.deepEquals(this.datatype, other.datatype) &&
            Objects.deepEquals(this.default_, other.default_) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.directory, other.directory) &&
            Objects.deepEquals(this.domain, other.domain) &&
            Objects.deepEquals(this.domainName, other.domainName) &&
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.emailAddr, other.emailAddr) &&
            Objects.deepEquals(this.emailAddress, other.emailAddress) &&
            Objects.deepEquals(this.expiredAt, other.expiredAt) &&
            Objects.deepEquals(this.expires, other.expires) &&
            Objects.deepEquals(this.expiresAt, other.expiresAt) &&
            Objects.deepEquals(this.extension, other.extension) &&
            Objects.deepEquals(this.filename, other.filename) &&
            Objects.deepEquals(this.filepath, other.filepath) &&
            Objects.deepEquals(this.filetype, other.filetype) &&
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.fullName, other.fullName) &&
            Objects.deepEquals(this.gender, other.gender) &&
            Objects.deepEquals(this.host, other.host) &&
            Objects.deepEquals(this.hostName, other.hostName) &&
            Objects.deepEquals(this.httpStatus, other.httpStatus) &&
            Objects.deepEquals(this.iban, other.iban) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.ip, other.ip) &&
            Objects.deepEquals(this.ipAddr, other.ipAddr) &&
            Objects.deepEquals(this.ipAddress, other.ipAddress) &&
            Objects.deepEquals(this.ipv4, other.ipv4) &&
            Objects.deepEquals(this.ipv6, other.ipv6) &&
            Objects.deepEquals(this.job, other.job) &&
            Objects.deepEquals(this.json, other.json) &&
            Objects.deepEquals(this.key, other.key) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.latitude, other.latitude) &&
            Objects.deepEquals(this.locale, other.locale) &&
            Objects.deepEquals(this.longitude, other.longitude) &&
            Objects.deepEquals(this.mac, other.mac) &&
            Objects.deepEquals(this.manufacturer, other.manufacturer) &&
            Objects.deepEquals(this.material, other.material) &&
            Objects.deepEquals(this.middleName, other.middleName) &&
            Objects.deepEquals(this.model, other.model) &&
            Objects.deepEquals(this.password, other.password) &&
            Objects.deepEquals(this.phone, other.phone) &&
            Objects.deepEquals(this.pin, other.pin) &&
            Objects.deepEquals(this.postalCode, other.postalCode) &&
            Objects.deepEquals(this.price, other.price) &&
            Objects.deepEquals(this.product, other.product) &&
            Objects.deepEquals(this.sex, other.sex) &&
            Objects.deepEquals(this.statusCode, other.statusCode) &&
            Objects.deepEquals(this.street, other.street) &&
            Objects.deepEquals(this.timezone, other.timezone) &&
            Objects.deepEquals(this.unit, other.unit) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.uri, other.uri) &&
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.username, other.username) &&
            Objects.deepEquals(this.uuid, other.uuid);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            account,
            address,
            addressLine1,
            amount,
            avatar,
            city,
            color,
            comment,
            company,
            continent,
            country,
            countryCode,
            createdAt,
            currency,
            currencyCode,
            currencyISO,
            datatype,
            default_,
            description,
            directory,
            domain,
            domainName,
            email,
            emailAddr,
            emailAddress,
            expiredAt,
            expires,
            expiresAt,
            extension,
            filename,
            filepath,
            filetype,
            firstName,
            fullName,
            gender,
            host,
            hostName,
            httpStatus,
            iban,
            id,
            ip,
            ipAddr,
            ipAddress,
            ipv4,
            ipv6,
            job,
            json,
            key,
            lastName,
            latitude,
            locale,
            longitude,
            mac,
            manufacturer,
            material,
            middleName,
            model,
            password,
            phone,
            pin,
            postalCode,
            price,
            product,
            sex,
            statusCode,
            street,
            timezone,
            unit,
            updatedAt,
            uri,
            url,
            username,
            uuid);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FakerPascalCasePropertyNameStrings.class,
                "account", account,
                "address", address,
                "addressLine1", addressLine1,
                "amount", amount,
                "avatar", avatar,
                "city", city,
                "color", color,
                "comment", comment,
                "company", company,
                "continent", continent,
                "country", country,
                "countryCode", countryCode,
                "createdAt", createdAt,
                "currency", currency,
                "currencyCode", currencyCode,
                "currencyISO", currencyISO,
                "datatype", datatype,
                "default_", default_,
                "description", description,
                "directory", directory,
                "domain", domain,
                "domainName", domainName,
                "email", email,
                "emailAddr", emailAddr,
                "emailAddress", emailAddress,
                "expiredAt", expiredAt,
                "expires", expires,
                "expiresAt", expiresAt,
                "extension", extension,
                "filename", filename,
                "filepath", filepath,
                "filetype", filetype,
                "firstName", firstName,
                "fullName", fullName,
                "gender", gender,
                "host", host,
                "hostName", hostName,
                "httpStatus", httpStatus,
                "iban", iban,
                "id", id,
                "ip", ip,
                "ipAddr", ipAddr,
                "ipAddress", ipAddress,
                "ipv4", ipv4,
                "ipv6", ipv6,
                "job", job,
                "json", json,
                "key", key,
                "lastName", lastName,
                "latitude", latitude,
                "locale", locale,
                "longitude", longitude,
                "mac", mac,
                "manufacturer", manufacturer,
                "material", material,
                "middleName", middleName,
                "model", model,
                "password", password,
                "phone", phone,
                "pin", pin,
                "postalCode", postalCode,
                "price", price,
                "product", product,
                "sex", sex,
                "statusCode", statusCode,
                "street", street,
                "timezone", timezone,
                "unit", unit,
                "updatedAt", updatedAt,
                "uri", uri,
                "url", url,
                "username", username,
                "uuid", uuid);
    }
    
    public final static class Builder {
 
        private String account;
 
        private String address;
 
        private Optional<String> addressLine1 = Optional.empty();
 
        private String amount;
 
        private String avatar;
 
        private String city;
 
        private String color;
 
        private String comment;
 
        private String company;
 
        private String continent;
 
        private String country;
 
        private String countryCode;
 
        private String createdAt;
 
        private String currency;
 
        private String currencyCode;
 
        private String currencyISO;
 
        private String datatype;
 
        private String default_;
 
        private String description;
 
        private String directory;
 
        private String domain;
 
        private String domainName;
 
        private String email;
 
        private String emailAddr;
 
        private String emailAddress;
 
        private String expiredAt;
 
        private String expires;
 
        private String expiresAt;
 
        private String extension;
 
        private String filename;
 
        private String filepath;
 
        private String filetype;
 
        private String firstName;
 
        private String fullName;
 
        private String gender;
 
        private String host;
 
        private String hostName;
 
        private String httpStatus;
 
        private String iban;
 
        private String id;
 
        private String ip;
 
        private String ipAddr;
 
        private String ipAddress;
 
        private String ipv4;
 
        private String ipv6;
 
        private String job;
 
        private String json;
 
        private String key;
 
        private String lastName;
 
        private String latitude;
 
        private String locale;
 
        private String longitude;
 
        private String mac;
 
        private String manufacturer;
 
        private String material;
 
        private String middleName;
 
        private String model;
 
        private String password;
 
        private String phone;
 
        private String pin;
 
        private String postalCode;
 
        private String price;
 
        private String product;
 
        private String sex;
 
        private String statusCode;
 
        private String street;
 
        private String timezone;
 
        private String unit;
 
        private String updatedAt;
 
        private String uri;
 
        private String url;
 
        private String username;
 
        private String uuid;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder account(String account) {
            Utils.checkNotNull(account, "account");
            this.account = account;
            return this;
        }

        public Builder address(String address) {
            Utils.checkNotNull(address, "address");
            this.address = address;
            return this;
        }

        public Builder addressLine1(String addressLine1) {
            Utils.checkNotNull(addressLine1, "addressLine1");
            this.addressLine1 = Optional.ofNullable(addressLine1);
            return this;
        }

        public Builder addressLine1(Optional<String> addressLine1) {
            Utils.checkNotNull(addressLine1, "addressLine1");
            this.addressLine1 = addressLine1;
            return this;
        }

        public Builder amount(String amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        public Builder avatar(String avatar) {
            Utils.checkNotNull(avatar, "avatar");
            this.avatar = avatar;
            return this;
        }

        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }

        public Builder color(String color) {
            Utils.checkNotNull(color, "color");
            this.color = color;
            return this;
        }

        public Builder comment(String comment) {
            Utils.checkNotNull(comment, "comment");
            this.comment = comment;
            return this;
        }

        public Builder company(String company) {
            Utils.checkNotNull(company, "company");
            this.company = company;
            return this;
        }

        public Builder continent(String continent) {
            Utils.checkNotNull(continent, "continent");
            this.continent = continent;
            return this;
        }

        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        public Builder countryCode(String countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = countryCode;
            return this;
        }

        /**
         * RFC3339 formatted timestamp
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        public Builder currencyCode(String currencyCode) {
            Utils.checkNotNull(currencyCode, "currencyCode");
            this.currencyCode = currencyCode;
            return this;
        }

        public Builder currencyISO(String currencyISO) {
            Utils.checkNotNull(currencyISO, "currencyISO");
            this.currencyISO = currencyISO;
            return this;
        }

        public Builder datatype(String datatype) {
            Utils.checkNotNull(datatype, "datatype");
            this.datatype = datatype;
            return this;
        }

        public Builder default_(String default_) {
            Utils.checkNotNull(default_, "default_");
            this.default_ = default_;
            return this;
        }

        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder directory(String directory) {
            Utils.checkNotNull(directory, "directory");
            this.directory = directory;
            return this;
        }

        public Builder domain(String domain) {
            Utils.checkNotNull(domain, "domain");
            this.domain = domain;
            return this;
        }

        public Builder domainName(String domainName) {
            Utils.checkNotNull(domainName, "domainName");
            this.domainName = domainName;
            return this;
        }

        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        public Builder emailAddr(String emailAddr) {
            Utils.checkNotNull(emailAddr, "emailAddr");
            this.emailAddr = emailAddr;
            return this;
        }

        public Builder emailAddress(String emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = emailAddress;
            return this;
        }

        public Builder expiredAt(String expiredAt) {
            Utils.checkNotNull(expiredAt, "expiredAt");
            this.expiredAt = expiredAt;
            return this;
        }

        public Builder expires(String expires) {
            Utils.checkNotNull(expires, "expires");
            this.expires = expires;
            return this;
        }

        public Builder expiresAt(String expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = expiresAt;
            return this;
        }

        public Builder extension(String extension) {
            Utils.checkNotNull(extension, "extension");
            this.extension = extension;
            return this;
        }

        public Builder filename(String filename) {
            Utils.checkNotNull(filename, "filename");
            this.filename = filename;
            return this;
        }

        public Builder filepath(String filepath) {
            Utils.checkNotNull(filepath, "filepath");
            this.filepath = filepath;
            return this;
        }

        public Builder filetype(String filetype) {
            Utils.checkNotNull(filetype, "filetype");
            this.filetype = filetype;
            return this;
        }

        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        public Builder fullName(String fullName) {
            Utils.checkNotNull(fullName, "fullName");
            this.fullName = fullName;
            return this;
        }

        public Builder gender(String gender) {
            Utils.checkNotNull(gender, "gender");
            this.gender = gender;
            return this;
        }

        public Builder host(String host) {
            Utils.checkNotNull(host, "host");
            this.host = host;
            return this;
        }

        public Builder hostName(String hostName) {
            Utils.checkNotNull(hostName, "hostName");
            this.hostName = hostName;
            return this;
        }

        public Builder httpStatus(String httpStatus) {
            Utils.checkNotNull(httpStatus, "httpStatus");
            this.httpStatus = httpStatus;
            return this;
        }

        public Builder iban(String iban) {
            Utils.checkNotNull(iban, "iban");
            this.iban = iban;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder ip(String ip) {
            Utils.checkNotNull(ip, "ip");
            this.ip = ip;
            return this;
        }

        public Builder ipAddr(String ipAddr) {
            Utils.checkNotNull(ipAddr, "ipAddr");
            this.ipAddr = ipAddr;
            return this;
        }

        public Builder ipAddress(String ipAddress) {
            Utils.checkNotNull(ipAddress, "ipAddress");
            this.ipAddress = ipAddress;
            return this;
        }

        public Builder ipv4(String ipv4) {
            Utils.checkNotNull(ipv4, "ipv4");
            this.ipv4 = ipv4;
            return this;
        }

        public Builder ipv6(String ipv6) {
            Utils.checkNotNull(ipv6, "ipv6");
            this.ipv6 = ipv6;
            return this;
        }

        public Builder job(String job) {
            Utils.checkNotNull(job, "job");
            this.job = job;
            return this;
        }

        public Builder json(String json) {
            Utils.checkNotNull(json, "json");
            this.json = json;
            return this;
        }

        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        public Builder latitude(String latitude) {
            Utils.checkNotNull(latitude, "latitude");
            this.latitude = latitude;
            return this;
        }

        public Builder locale(String locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = locale;
            return this;
        }

        public Builder longitude(String longitude) {
            Utils.checkNotNull(longitude, "longitude");
            this.longitude = longitude;
            return this;
        }

        public Builder mac(String mac) {
            Utils.checkNotNull(mac, "mac");
            this.mac = mac;
            return this;
        }

        public Builder manufacturer(String manufacturer) {
            Utils.checkNotNull(manufacturer, "manufacturer");
            this.manufacturer = manufacturer;
            return this;
        }

        public Builder material(String material) {
            Utils.checkNotNull(material, "material");
            this.material = material;
            return this;
        }

        public Builder middleName(String middleName) {
            Utils.checkNotNull(middleName, "middleName");
            this.middleName = middleName;
            return this;
        }

        public Builder model(String model) {
            Utils.checkNotNull(model, "model");
            this.model = model;
            return this;
        }

        public Builder password(String password) {
            Utils.checkNotNull(password, "password");
            this.password = password;
            return this;
        }

        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }

        public Builder pin(String pin) {
            Utils.checkNotNull(pin, "pin");
            this.pin = pin;
            return this;
        }

        public Builder postalCode(String postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = postalCode;
            return this;
        }

        public Builder price(String price) {
            Utils.checkNotNull(price, "price");
            this.price = price;
            return this;
        }

        public Builder product(String product) {
            Utils.checkNotNull(product, "product");
            this.product = product;
            return this;
        }

        public Builder sex(String sex) {
            Utils.checkNotNull(sex, "sex");
            this.sex = sex;
            return this;
        }

        public Builder statusCode(String statusCode) {
            Utils.checkNotNull(statusCode, "statusCode");
            this.statusCode = statusCode;
            return this;
        }

        public Builder street(String street) {
            Utils.checkNotNull(street, "street");
            this.street = street;
            return this;
        }

        public Builder timezone(String timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = timezone;
            return this;
        }

        public Builder unit(String unit) {
            Utils.checkNotNull(unit, "unit");
            this.unit = unit;
            return this;
        }

        /**
         * RFC3339 formatted timestamp
         */
        public Builder updatedAt(String updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder uri(String uri) {
            Utils.checkNotNull(uri, "uri");
            this.uri = uri;
            return this;
        }

        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }

        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }
        
        public FakerPascalCasePropertyNameStrings build() {
            return new FakerPascalCasePropertyNameStrings(
                account,
                address,
                addressLine1,
                amount,
                avatar,
                city,
                color,
                comment,
                company,
                continent,
                country,
                countryCode,
                createdAt,
                currency,
                currencyCode,
                currencyISO,
                datatype,
                default_,
                description,
                directory,
                domain,
                domainName,
                email,
                emailAddr,
                emailAddress,
                expiredAt,
                expires,
                expiresAt,
                extension,
                filename,
                filepath,
                filetype,
                firstName,
                fullName,
                gender,
                host,
                hostName,
                httpStatus,
                iban,
                id,
                ip,
                ipAddr,
                ipAddress,
                ipv4,
                ipv6,
                job,
                json,
                key,
                lastName,
                latitude,
                locale,
                longitude,
                mac,
                manufacturer,
                material,
                middleName,
                model,
                password,
                phone,
                pin,
                postalCode,
                price,
                product,
                sex,
                statusCode,
                street,
                timezone,
                unit,
                updatedAt,
                uri,
                url,
                username,
                uuid);
        }
    }
}

