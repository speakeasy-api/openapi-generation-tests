/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.utils.Utils;

/**
 * FakerSnakeCasePropertyNameStrings - A set of strings with snake case fieldnames that lead to relevant examples being generated for them
 */

public class FakerSnakeCasePropertyNameStrings {

    @JsonProperty("country_code")
    private String countryCode;

    /**
     * RFC3339 formatted timestamp
     */
    @JsonProperty("created_at")
    private String createdAt;

    /**
     * RFC3339 formatted timestamp
     */
    @JsonProperty("expired_at")
    private String expiredAt;

    /**
     * RFC3339 formatted timestamp
     */
    @JsonProperty("updated_at")
    private String updatedAt;

    @JsonCreator
    public FakerSnakeCasePropertyNameStrings(
            @JsonProperty("country_code") String countryCode,
            @JsonProperty("created_at") String createdAt,
            @JsonProperty("expired_at") String expiredAt,
            @JsonProperty("updated_at") String updatedAt) {
        Utils.checkNotNull(countryCode, "countryCode");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(expiredAt, "expiredAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.countryCode = countryCode;
        this.createdAt = createdAt;
        this.expiredAt = expiredAt;
        this.updatedAt = updatedAt;
    }

    @JsonIgnore
    public String countryCode() {
        return countryCode;
    }

    /**
     * RFC3339 formatted timestamp
     */
    @JsonIgnore
    public String createdAt() {
        return createdAt;
    }

    /**
     * RFC3339 formatted timestamp
     */
    @JsonIgnore
    public String expiredAt() {
        return expiredAt;
    }

    /**
     * RFC3339 formatted timestamp
     */
    @JsonIgnore
    public String updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public FakerSnakeCasePropertyNameStrings withCountryCode(String countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = countryCode;
        return this;
    }

    /**
     * RFC3339 formatted timestamp
     */
    public FakerSnakeCasePropertyNameStrings withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * RFC3339 formatted timestamp
     */
    public FakerSnakeCasePropertyNameStrings withExpiredAt(String expiredAt) {
        Utils.checkNotNull(expiredAt, "expiredAt");
        this.expiredAt = expiredAt;
        return this;
    }

    /**
     * RFC3339 formatted timestamp
     */
    public FakerSnakeCasePropertyNameStrings withUpdatedAt(String updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FakerSnakeCasePropertyNameStrings other = (FakerSnakeCasePropertyNameStrings) o;
        return 
            Objects.deepEquals(this.countryCode, other.countryCode) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.expiredAt, other.expiredAt) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            countryCode,
            createdAt,
            expiredAt,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FakerSnakeCasePropertyNameStrings.class,
                "countryCode", countryCode,
                "createdAt", createdAt,
                "expiredAt", expiredAt,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private String countryCode;
 
        private String createdAt;
 
        private String expiredAt;
 
        private String updatedAt;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder countryCode(String countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = countryCode;
            return this;
        }

        /**
         * RFC3339 formatted timestamp
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * RFC3339 formatted timestamp
         */
        public Builder expiredAt(String expiredAt) {
            Utils.checkNotNull(expiredAt, "expiredAt");
            this.expiredAt = expiredAt;
            return this;
        }

        /**
         * RFC3339 formatted timestamp
         */
        public Builder updatedAt(String updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public FakerSnakeCasePropertyNameStrings build() {
            return new FakerSnakeCasePropertyNameStrings(
                countryCode,
                createdAt,
                expiredAt,
                updatedAt);
        }
    }
}

