/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;
/**
 * FakerStrings - A set of strings with fieldnames that lead to relevant examples being generated for them
 */

public class FakerStrings {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("City")
    private Optional<? extends String> city;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IBAN")
    private Optional<? extends String> iban;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ID")
    private Optional<? extends String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IPv4")
    private Optional<? extends String> iPv4;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IPv6")
    private Optional<? extends String> iPv6;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account")
    private Optional<? extends String> account;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    private Optional<? extends String> address;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends String> amount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("avatar")
    private Optional<? extends String> avatar;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("color")
    private Optional<? extends String> color;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comment")
    private Optional<? extends String> comment;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company")
    private Optional<? extends String> company;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private Optional<? extends String> country;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country_code")
    private Optional<? extends String> countryCode;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<? extends String> currency;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datatype")
    private Optional<? extends String> datatype;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default")
    private Optional<? extends String> default_;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("directory")
    private Optional<? extends String> directory;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domainName")
    private Optional<? extends String> domainName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailAddr")
    private Optional<? extends String> emailAddr;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extension")
    private Optional<? extends String> extension;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filename")
    private Optional<? extends String> filename;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filepath")
    private Optional<? extends String> filepath;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filetype")
    private Optional<? extends String> filetype;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firstName")
    private Optional<? extends String> firstName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fullName")
    private Optional<? extends String> fullName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gender")
    private Optional<? extends String> gender;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job")
    private Optional<? extends String> job;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("json")
    private Optional<? extends String> json;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    private Optional<? extends String> key;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastName")
    private Optional<? extends String> lastName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latitude")
    private Optional<? extends String> latitude;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locale")
    private Optional<? extends String> locale;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("longitude")
    private Optional<? extends String> longitude;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mac")
    private Optional<? extends String> mac;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manufacturer")
    private Optional<? extends String> manufacturer;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("material")
    private Optional<? extends String> material;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("middleName")
    private Optional<? extends String> middleName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("model")
    private Optional<? extends String> model;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    private Optional<? extends String> password;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    private Optional<? extends String> phone;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pin")
    private Optional<? extends String> pin;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postal-code")
    private Optional<? extends String> postalCode;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price")
    private Optional<? extends String> price;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product")
    private Optional<? extends String> product;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sex")
    private Optional<? extends String> sex;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street")
    private Optional<? extends String> street;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    private Optional<? extends String> timezone;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unit")
    private Optional<? extends String> unit;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<? extends String> url;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    private Optional<? extends String> username;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uuid")
    private Optional<? extends String> uuid;

    @JsonCreator
    public FakerStrings(
            @JsonProperty("City") Optional<? extends String> city,
            @JsonProperty("IBAN") Optional<? extends String> iban,
            @JsonProperty("ID") Optional<? extends String> id,
            @JsonProperty("IPv4") Optional<? extends String> iPv4,
            @JsonProperty("IPv6") Optional<? extends String> iPv6,
            @JsonProperty("account") Optional<? extends String> account,
            @JsonProperty("address") Optional<? extends String> address,
            @JsonProperty("amount") Optional<? extends String> amount,
            @JsonProperty("avatar") Optional<? extends String> avatar,
            @JsonProperty("color") Optional<? extends String> color,
            @JsonProperty("comment") Optional<? extends String> comment,
            @JsonProperty("company") Optional<? extends String> company,
            @JsonProperty("country") Optional<? extends String> country,
            @JsonProperty("country_code") Optional<? extends String> countryCode,
            @JsonProperty("currency") Optional<? extends String> currency,
            @JsonProperty("datatype") Optional<? extends String> datatype,
            @JsonProperty("default") Optional<? extends String> default_,
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("directory") Optional<? extends String> directory,
            @JsonProperty("domainName") Optional<? extends String> domainName,
            @JsonProperty("emailAddr") Optional<? extends String> emailAddr,
            @JsonProperty("extension") Optional<? extends String> extension,
            @JsonProperty("filename") Optional<? extends String> filename,
            @JsonProperty("filepath") Optional<? extends String> filepath,
            @JsonProperty("filetype") Optional<? extends String> filetype,
            @JsonProperty("firstName") Optional<? extends String> firstName,
            @JsonProperty("fullName") Optional<? extends String> fullName,
            @JsonProperty("gender") Optional<? extends String> gender,
            @JsonProperty("job") Optional<? extends String> job,
            @JsonProperty("json") Optional<? extends String> json,
            @JsonProperty("key") Optional<? extends String> key,
            @JsonProperty("lastName") Optional<? extends String> lastName,
            @JsonProperty("latitude") Optional<? extends String> latitude,
            @JsonProperty("locale") Optional<? extends String> locale,
            @JsonProperty("longitude") Optional<? extends String> longitude,
            @JsonProperty("mac") Optional<? extends String> mac,
            @JsonProperty("manufacturer") Optional<? extends String> manufacturer,
            @JsonProperty("material") Optional<? extends String> material,
            @JsonProperty("middleName") Optional<? extends String> middleName,
            @JsonProperty("model") Optional<? extends String> model,
            @JsonProperty("password") Optional<? extends String> password,
            @JsonProperty("phone") Optional<? extends String> phone,
            @JsonProperty("pin") Optional<? extends String> pin,
            @JsonProperty("postal-code") Optional<? extends String> postalCode,
            @JsonProperty("price") Optional<? extends String> price,
            @JsonProperty("product") Optional<? extends String> product,
            @JsonProperty("sex") Optional<? extends String> sex,
            @JsonProperty("street") Optional<? extends String> street,
            @JsonProperty("timezone") Optional<? extends String> timezone,
            @JsonProperty("unit") Optional<? extends String> unit,
            @JsonProperty("url") Optional<? extends String> url,
            @JsonProperty("username") Optional<? extends String> username,
            @JsonProperty("uuid") Optional<? extends String> uuid) {
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(iban, "iban");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(iPv4, "iPv4");
        Utils.checkNotNull(iPv6, "iPv6");
        Utils.checkNotNull(account, "account");
        Utils.checkNotNull(address, "address");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(avatar, "avatar");
        Utils.checkNotNull(color, "color");
        Utils.checkNotNull(comment, "comment");
        Utils.checkNotNull(company, "company");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(countryCode, "countryCode");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(datatype, "datatype");
        Utils.checkNotNull(default_, "default_");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(directory, "directory");
        Utils.checkNotNull(domainName, "domainName");
        Utils.checkNotNull(emailAddr, "emailAddr");
        Utils.checkNotNull(extension, "extension");
        Utils.checkNotNull(filename, "filename");
        Utils.checkNotNull(filepath, "filepath");
        Utils.checkNotNull(filetype, "filetype");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(fullName, "fullName");
        Utils.checkNotNull(gender, "gender");
        Utils.checkNotNull(job, "job");
        Utils.checkNotNull(json, "json");
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(latitude, "latitude");
        Utils.checkNotNull(locale, "locale");
        Utils.checkNotNull(longitude, "longitude");
        Utils.checkNotNull(mac, "mac");
        Utils.checkNotNull(manufacturer, "manufacturer");
        Utils.checkNotNull(material, "material");
        Utils.checkNotNull(middleName, "middleName");
        Utils.checkNotNull(model, "model");
        Utils.checkNotNull(password, "password");
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(pin, "pin");
        Utils.checkNotNull(postalCode, "postalCode");
        Utils.checkNotNull(price, "price");
        Utils.checkNotNull(product, "product");
        Utils.checkNotNull(sex, "sex");
        Utils.checkNotNull(street, "street");
        Utils.checkNotNull(timezone, "timezone");
        Utils.checkNotNull(unit, "unit");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(username, "username");
        Utils.checkNotNull(uuid, "uuid");
        this.city = city;
        this.iban = iban;
        this.id = id;
        this.iPv4 = iPv4;
        this.iPv6 = iPv6;
        this.account = account;
        this.address = address;
        this.amount = amount;
        this.avatar = avatar;
        this.color = color;
        this.comment = comment;
        this.company = company;
        this.country = country;
        this.countryCode = countryCode;
        this.currency = currency;
        this.datatype = datatype;
        this.default_ = default_;
        this.description = description;
        this.directory = directory;
        this.domainName = domainName;
        this.emailAddr = emailAddr;
        this.extension = extension;
        this.filename = filename;
        this.filepath = filepath;
        this.filetype = filetype;
        this.firstName = firstName;
        this.fullName = fullName;
        this.gender = gender;
        this.job = job;
        this.json = json;
        this.key = key;
        this.lastName = lastName;
        this.latitude = latitude;
        this.locale = locale;
        this.longitude = longitude;
        this.mac = mac;
        this.manufacturer = manufacturer;
        this.material = material;
        this.middleName = middleName;
        this.model = model;
        this.password = password;
        this.phone = phone;
        this.pin = pin;
        this.postalCode = postalCode;
        this.price = price;
        this.product = product;
        this.sex = sex;
        this.street = street;
        this.timezone = timezone;
        this.unit = unit;
        this.url = url;
        this.username = username;
        this.uuid = uuid;
    }
    
    public FakerStrings() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> city() {
        return (Optional<String>) city;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> iban() {
        return (Optional<String>) iban;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> id() {
        return (Optional<String>) id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> iPv4() {
        return (Optional<String>) iPv4;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> iPv6() {
        return (Optional<String>) iPv6;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> account() {
        return (Optional<String>) account;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> address() {
        return (Optional<String>) address;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> amount() {
        return (Optional<String>) amount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> avatar() {
        return (Optional<String>) avatar;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> color() {
        return (Optional<String>) color;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> comment() {
        return (Optional<String>) comment;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> company() {
        return (Optional<String>) company;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> country() {
        return (Optional<String>) country;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> countryCode() {
        return (Optional<String>) countryCode;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> currency() {
        return (Optional<String>) currency;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> datatype() {
        return (Optional<String>) datatype;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> default_() {
        return (Optional<String>) default_;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> description() {
        return (Optional<String>) description;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> directory() {
        return (Optional<String>) directory;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> domainName() {
        return (Optional<String>) domainName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> emailAddr() {
        return (Optional<String>) emailAddr;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> extension() {
        return (Optional<String>) extension;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> filename() {
        return (Optional<String>) filename;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> filepath() {
        return (Optional<String>) filepath;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> filetype() {
        return (Optional<String>) filetype;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> firstName() {
        return (Optional<String>) firstName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> fullName() {
        return (Optional<String>) fullName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> gender() {
        return (Optional<String>) gender;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> job() {
        return (Optional<String>) job;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> json() {
        return (Optional<String>) json;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> key() {
        return (Optional<String>) key;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> lastName() {
        return (Optional<String>) lastName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> latitude() {
        return (Optional<String>) latitude;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> locale() {
        return (Optional<String>) locale;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> longitude() {
        return (Optional<String>) longitude;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> mac() {
        return (Optional<String>) mac;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> manufacturer() {
        return (Optional<String>) manufacturer;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> material() {
        return (Optional<String>) material;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> middleName() {
        return (Optional<String>) middleName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> model() {
        return (Optional<String>) model;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> password() {
        return (Optional<String>) password;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> phone() {
        return (Optional<String>) phone;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> pin() {
        return (Optional<String>) pin;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> postalCode() {
        return (Optional<String>) postalCode;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> price() {
        return (Optional<String>) price;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> product() {
        return (Optional<String>) product;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> sex() {
        return (Optional<String>) sex;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> street() {
        return (Optional<String>) street;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> timezone() {
        return (Optional<String>) timezone;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> unit() {
        return (Optional<String>) unit;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> url() {
        return (Optional<String>) url;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> username() {
        return (Optional<String>) username;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> uuid() {
        return (Optional<String>) uuid;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public FakerStrings withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = Optional.ofNullable(city);
        return this;
    }

    public FakerStrings withCity(Optional<? extends String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    public FakerStrings withIban(String iban) {
        Utils.checkNotNull(iban, "iban");
        this.iban = Optional.ofNullable(iban);
        return this;
    }

    public FakerStrings withIban(Optional<? extends String> iban) {
        Utils.checkNotNull(iban, "iban");
        this.iban = iban;
        return this;
    }

    public FakerStrings withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public FakerStrings withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public FakerStrings withIPv4(String iPv4) {
        Utils.checkNotNull(iPv4, "iPv4");
        this.iPv4 = Optional.ofNullable(iPv4);
        return this;
    }

    public FakerStrings withIPv4(Optional<? extends String> iPv4) {
        Utils.checkNotNull(iPv4, "iPv4");
        this.iPv4 = iPv4;
        return this;
    }

    public FakerStrings withIPv6(String iPv6) {
        Utils.checkNotNull(iPv6, "iPv6");
        this.iPv6 = Optional.ofNullable(iPv6);
        return this;
    }

    public FakerStrings withIPv6(Optional<? extends String> iPv6) {
        Utils.checkNotNull(iPv6, "iPv6");
        this.iPv6 = iPv6;
        return this;
    }

    public FakerStrings withAccount(String account) {
        Utils.checkNotNull(account, "account");
        this.account = Optional.ofNullable(account);
        return this;
    }

    public FakerStrings withAccount(Optional<? extends String> account) {
        Utils.checkNotNull(account, "account");
        this.account = account;
        return this;
    }

    public FakerStrings withAddress(String address) {
        Utils.checkNotNull(address, "address");
        this.address = Optional.ofNullable(address);
        return this;
    }

    public FakerStrings withAddress(Optional<? extends String> address) {
        Utils.checkNotNull(address, "address");
        this.address = address;
        return this;
    }

    public FakerStrings withAmount(String amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    public FakerStrings withAmount(Optional<? extends String> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    public FakerStrings withAvatar(String avatar) {
        Utils.checkNotNull(avatar, "avatar");
        this.avatar = Optional.ofNullable(avatar);
        return this;
    }

    public FakerStrings withAvatar(Optional<? extends String> avatar) {
        Utils.checkNotNull(avatar, "avatar");
        this.avatar = avatar;
        return this;
    }

    public FakerStrings withColor(String color) {
        Utils.checkNotNull(color, "color");
        this.color = Optional.ofNullable(color);
        return this;
    }

    public FakerStrings withColor(Optional<? extends String> color) {
        Utils.checkNotNull(color, "color");
        this.color = color;
        return this;
    }

    public FakerStrings withComment(String comment) {
        Utils.checkNotNull(comment, "comment");
        this.comment = Optional.ofNullable(comment);
        return this;
    }

    public FakerStrings withComment(Optional<? extends String> comment) {
        Utils.checkNotNull(comment, "comment");
        this.comment = comment;
        return this;
    }

    public FakerStrings withCompany(String company) {
        Utils.checkNotNull(company, "company");
        this.company = Optional.ofNullable(company);
        return this;
    }

    public FakerStrings withCompany(Optional<? extends String> company) {
        Utils.checkNotNull(company, "company");
        this.company = company;
        return this;
    }

    public FakerStrings withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = Optional.ofNullable(country);
        return this;
    }

    public FakerStrings withCountry(Optional<? extends String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    public FakerStrings withCountryCode(String countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = Optional.ofNullable(countryCode);
        return this;
    }

    public FakerStrings withCountryCode(Optional<? extends String> countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = countryCode;
        return this;
    }

    public FakerStrings withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }

    public FakerStrings withCurrency(Optional<? extends String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public FakerStrings withDatatype(String datatype) {
        Utils.checkNotNull(datatype, "datatype");
        this.datatype = Optional.ofNullable(datatype);
        return this;
    }

    public FakerStrings withDatatype(Optional<? extends String> datatype) {
        Utils.checkNotNull(datatype, "datatype");
        this.datatype = datatype;
        return this;
    }

    public FakerStrings withDefault(String default_) {
        Utils.checkNotNull(default_, "default_");
        this.default_ = Optional.ofNullable(default_);
        return this;
    }

    public FakerStrings withDefault(Optional<? extends String> default_) {
        Utils.checkNotNull(default_, "default_");
        this.default_ = default_;
        return this;
    }

    public FakerStrings withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    public FakerStrings withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public FakerStrings withDirectory(String directory) {
        Utils.checkNotNull(directory, "directory");
        this.directory = Optional.ofNullable(directory);
        return this;
    }

    public FakerStrings withDirectory(Optional<? extends String> directory) {
        Utils.checkNotNull(directory, "directory");
        this.directory = directory;
        return this;
    }

    public FakerStrings withDomainName(String domainName) {
        Utils.checkNotNull(domainName, "domainName");
        this.domainName = Optional.ofNullable(domainName);
        return this;
    }

    public FakerStrings withDomainName(Optional<? extends String> domainName) {
        Utils.checkNotNull(domainName, "domainName");
        this.domainName = domainName;
        return this;
    }

    public FakerStrings withEmailAddr(String emailAddr) {
        Utils.checkNotNull(emailAddr, "emailAddr");
        this.emailAddr = Optional.ofNullable(emailAddr);
        return this;
    }

    public FakerStrings withEmailAddr(Optional<? extends String> emailAddr) {
        Utils.checkNotNull(emailAddr, "emailAddr");
        this.emailAddr = emailAddr;
        return this;
    }

    public FakerStrings withExtension(String extension) {
        Utils.checkNotNull(extension, "extension");
        this.extension = Optional.ofNullable(extension);
        return this;
    }

    public FakerStrings withExtension(Optional<? extends String> extension) {
        Utils.checkNotNull(extension, "extension");
        this.extension = extension;
        return this;
    }

    public FakerStrings withFilename(String filename) {
        Utils.checkNotNull(filename, "filename");
        this.filename = Optional.ofNullable(filename);
        return this;
    }

    public FakerStrings withFilename(Optional<? extends String> filename) {
        Utils.checkNotNull(filename, "filename");
        this.filename = filename;
        return this;
    }

    public FakerStrings withFilepath(String filepath) {
        Utils.checkNotNull(filepath, "filepath");
        this.filepath = Optional.ofNullable(filepath);
        return this;
    }

    public FakerStrings withFilepath(Optional<? extends String> filepath) {
        Utils.checkNotNull(filepath, "filepath");
        this.filepath = filepath;
        return this;
    }

    public FakerStrings withFiletype(String filetype) {
        Utils.checkNotNull(filetype, "filetype");
        this.filetype = Optional.ofNullable(filetype);
        return this;
    }

    public FakerStrings withFiletype(Optional<? extends String> filetype) {
        Utils.checkNotNull(filetype, "filetype");
        this.filetype = filetype;
        return this;
    }

    public FakerStrings withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = Optional.ofNullable(firstName);
        return this;
    }

    public FakerStrings withFirstName(Optional<? extends String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    public FakerStrings withFullName(String fullName) {
        Utils.checkNotNull(fullName, "fullName");
        this.fullName = Optional.ofNullable(fullName);
        return this;
    }

    public FakerStrings withFullName(Optional<? extends String> fullName) {
        Utils.checkNotNull(fullName, "fullName");
        this.fullName = fullName;
        return this;
    }

    public FakerStrings withGender(String gender) {
        Utils.checkNotNull(gender, "gender");
        this.gender = Optional.ofNullable(gender);
        return this;
    }

    public FakerStrings withGender(Optional<? extends String> gender) {
        Utils.checkNotNull(gender, "gender");
        this.gender = gender;
        return this;
    }

    public FakerStrings withJob(String job) {
        Utils.checkNotNull(job, "job");
        this.job = Optional.ofNullable(job);
        return this;
    }

    public FakerStrings withJob(Optional<? extends String> job) {
        Utils.checkNotNull(job, "job");
        this.job = job;
        return this;
    }

    public FakerStrings withJson(String json) {
        Utils.checkNotNull(json, "json");
        this.json = Optional.ofNullable(json);
        return this;
    }

    public FakerStrings withJson(Optional<? extends String> json) {
        Utils.checkNotNull(json, "json");
        this.json = json;
        return this;
    }

    public FakerStrings withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = Optional.ofNullable(key);
        return this;
    }

    public FakerStrings withKey(Optional<? extends String> key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    public FakerStrings withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = Optional.ofNullable(lastName);
        return this;
    }

    public FakerStrings withLastName(Optional<? extends String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    public FakerStrings withLatitude(String latitude) {
        Utils.checkNotNull(latitude, "latitude");
        this.latitude = Optional.ofNullable(latitude);
        return this;
    }

    public FakerStrings withLatitude(Optional<? extends String> latitude) {
        Utils.checkNotNull(latitude, "latitude");
        this.latitude = latitude;
        return this;
    }

    public FakerStrings withLocale(String locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = Optional.ofNullable(locale);
        return this;
    }

    public FakerStrings withLocale(Optional<? extends String> locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = locale;
        return this;
    }

    public FakerStrings withLongitude(String longitude) {
        Utils.checkNotNull(longitude, "longitude");
        this.longitude = Optional.ofNullable(longitude);
        return this;
    }

    public FakerStrings withLongitude(Optional<? extends String> longitude) {
        Utils.checkNotNull(longitude, "longitude");
        this.longitude = longitude;
        return this;
    }

    public FakerStrings withMac(String mac) {
        Utils.checkNotNull(mac, "mac");
        this.mac = Optional.ofNullable(mac);
        return this;
    }

    public FakerStrings withMac(Optional<? extends String> mac) {
        Utils.checkNotNull(mac, "mac");
        this.mac = mac;
        return this;
    }

    public FakerStrings withManufacturer(String manufacturer) {
        Utils.checkNotNull(manufacturer, "manufacturer");
        this.manufacturer = Optional.ofNullable(manufacturer);
        return this;
    }

    public FakerStrings withManufacturer(Optional<? extends String> manufacturer) {
        Utils.checkNotNull(manufacturer, "manufacturer");
        this.manufacturer = manufacturer;
        return this;
    }

    public FakerStrings withMaterial(String material) {
        Utils.checkNotNull(material, "material");
        this.material = Optional.ofNullable(material);
        return this;
    }

    public FakerStrings withMaterial(Optional<? extends String> material) {
        Utils.checkNotNull(material, "material");
        this.material = material;
        return this;
    }

    public FakerStrings withMiddleName(String middleName) {
        Utils.checkNotNull(middleName, "middleName");
        this.middleName = Optional.ofNullable(middleName);
        return this;
    }

    public FakerStrings withMiddleName(Optional<? extends String> middleName) {
        Utils.checkNotNull(middleName, "middleName");
        this.middleName = middleName;
        return this;
    }

    public FakerStrings withModel(String model) {
        Utils.checkNotNull(model, "model");
        this.model = Optional.ofNullable(model);
        return this;
    }

    public FakerStrings withModel(Optional<? extends String> model) {
        Utils.checkNotNull(model, "model");
        this.model = model;
        return this;
    }

    public FakerStrings withPassword(String password) {
        Utils.checkNotNull(password, "password");
        this.password = Optional.ofNullable(password);
        return this;
    }

    public FakerStrings withPassword(Optional<? extends String> password) {
        Utils.checkNotNull(password, "password");
        this.password = password;
        return this;
    }

    public FakerStrings withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = Optional.ofNullable(phone);
        return this;
    }

    public FakerStrings withPhone(Optional<? extends String> phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    public FakerStrings withPin(String pin) {
        Utils.checkNotNull(pin, "pin");
        this.pin = Optional.ofNullable(pin);
        return this;
    }

    public FakerStrings withPin(Optional<? extends String> pin) {
        Utils.checkNotNull(pin, "pin");
        this.pin = pin;
        return this;
    }

    public FakerStrings withPostalCode(String postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = Optional.ofNullable(postalCode);
        return this;
    }

    public FakerStrings withPostalCode(Optional<? extends String> postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = postalCode;
        return this;
    }

    public FakerStrings withPrice(String price) {
        Utils.checkNotNull(price, "price");
        this.price = Optional.ofNullable(price);
        return this;
    }

    public FakerStrings withPrice(Optional<? extends String> price) {
        Utils.checkNotNull(price, "price");
        this.price = price;
        return this;
    }

    public FakerStrings withProduct(String product) {
        Utils.checkNotNull(product, "product");
        this.product = Optional.ofNullable(product);
        return this;
    }

    public FakerStrings withProduct(Optional<? extends String> product) {
        Utils.checkNotNull(product, "product");
        this.product = product;
        return this;
    }

    public FakerStrings withSex(String sex) {
        Utils.checkNotNull(sex, "sex");
        this.sex = Optional.ofNullable(sex);
        return this;
    }

    public FakerStrings withSex(Optional<? extends String> sex) {
        Utils.checkNotNull(sex, "sex");
        this.sex = sex;
        return this;
    }

    public FakerStrings withStreet(String street) {
        Utils.checkNotNull(street, "street");
        this.street = Optional.ofNullable(street);
        return this;
    }

    public FakerStrings withStreet(Optional<? extends String> street) {
        Utils.checkNotNull(street, "street");
        this.street = street;
        return this;
    }

    public FakerStrings withTimezone(String timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = Optional.ofNullable(timezone);
        return this;
    }

    public FakerStrings withTimezone(Optional<? extends String> timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = timezone;
        return this;
    }

    public FakerStrings withUnit(String unit) {
        Utils.checkNotNull(unit, "unit");
        this.unit = Optional.ofNullable(unit);
        return this;
    }

    public FakerStrings withUnit(Optional<? extends String> unit) {
        Utils.checkNotNull(unit, "unit");
        this.unit = unit;
        return this;
    }

    public FakerStrings withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    public FakerStrings withUrl(Optional<? extends String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    public FakerStrings withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = Optional.ofNullable(username);
        return this;
    }

    public FakerStrings withUsername(Optional<? extends String> username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    public FakerStrings withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = Optional.ofNullable(uuid);
        return this;
    }

    public FakerStrings withUuid(Optional<? extends String> uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FakerStrings other = (FakerStrings) o;
        return 
            java.util.Objects.deepEquals(this.city, other.city) &&
            java.util.Objects.deepEquals(this.iban, other.iban) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.iPv4, other.iPv4) &&
            java.util.Objects.deepEquals(this.iPv6, other.iPv6) &&
            java.util.Objects.deepEquals(this.account, other.account) &&
            java.util.Objects.deepEquals(this.address, other.address) &&
            java.util.Objects.deepEquals(this.amount, other.amount) &&
            java.util.Objects.deepEquals(this.avatar, other.avatar) &&
            java.util.Objects.deepEquals(this.color, other.color) &&
            java.util.Objects.deepEquals(this.comment, other.comment) &&
            java.util.Objects.deepEquals(this.company, other.company) &&
            java.util.Objects.deepEquals(this.country, other.country) &&
            java.util.Objects.deepEquals(this.countryCode, other.countryCode) &&
            java.util.Objects.deepEquals(this.currency, other.currency) &&
            java.util.Objects.deepEquals(this.datatype, other.datatype) &&
            java.util.Objects.deepEquals(this.default_, other.default_) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.directory, other.directory) &&
            java.util.Objects.deepEquals(this.domainName, other.domainName) &&
            java.util.Objects.deepEquals(this.emailAddr, other.emailAddr) &&
            java.util.Objects.deepEquals(this.extension, other.extension) &&
            java.util.Objects.deepEquals(this.filename, other.filename) &&
            java.util.Objects.deepEquals(this.filepath, other.filepath) &&
            java.util.Objects.deepEquals(this.filetype, other.filetype) &&
            java.util.Objects.deepEquals(this.firstName, other.firstName) &&
            java.util.Objects.deepEquals(this.fullName, other.fullName) &&
            java.util.Objects.deepEquals(this.gender, other.gender) &&
            java.util.Objects.deepEquals(this.job, other.job) &&
            java.util.Objects.deepEquals(this.json, other.json) &&
            java.util.Objects.deepEquals(this.key, other.key) &&
            java.util.Objects.deepEquals(this.lastName, other.lastName) &&
            java.util.Objects.deepEquals(this.latitude, other.latitude) &&
            java.util.Objects.deepEquals(this.locale, other.locale) &&
            java.util.Objects.deepEquals(this.longitude, other.longitude) &&
            java.util.Objects.deepEquals(this.mac, other.mac) &&
            java.util.Objects.deepEquals(this.manufacturer, other.manufacturer) &&
            java.util.Objects.deepEquals(this.material, other.material) &&
            java.util.Objects.deepEquals(this.middleName, other.middleName) &&
            java.util.Objects.deepEquals(this.model, other.model) &&
            java.util.Objects.deepEquals(this.password, other.password) &&
            java.util.Objects.deepEquals(this.phone, other.phone) &&
            java.util.Objects.deepEquals(this.pin, other.pin) &&
            java.util.Objects.deepEquals(this.postalCode, other.postalCode) &&
            java.util.Objects.deepEquals(this.price, other.price) &&
            java.util.Objects.deepEquals(this.product, other.product) &&
            java.util.Objects.deepEquals(this.sex, other.sex) &&
            java.util.Objects.deepEquals(this.street, other.street) &&
            java.util.Objects.deepEquals(this.timezone, other.timezone) &&
            java.util.Objects.deepEquals(this.unit, other.unit) &&
            java.util.Objects.deepEquals(this.url, other.url) &&
            java.util.Objects.deepEquals(this.username, other.username) &&
            java.util.Objects.deepEquals(this.uuid, other.uuid);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            city,
            iban,
            id,
            iPv4,
            iPv6,
            account,
            address,
            amount,
            avatar,
            color,
            comment,
            company,
            country,
            countryCode,
            currency,
            datatype,
            default_,
            description,
            directory,
            domainName,
            emailAddr,
            extension,
            filename,
            filepath,
            filetype,
            firstName,
            fullName,
            gender,
            job,
            json,
            key,
            lastName,
            latitude,
            locale,
            longitude,
            mac,
            manufacturer,
            material,
            middleName,
            model,
            password,
            phone,
            pin,
            postalCode,
            price,
            product,
            sex,
            street,
            timezone,
            unit,
            url,
            username,
            uuid);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FakerStrings.class,
                "city", city,
                "iban", iban,
                "id", id,
                "iPv4", iPv4,
                "iPv6", iPv6,
                "account", account,
                "address", address,
                "amount", amount,
                "avatar", avatar,
                "color", color,
                "comment", comment,
                "company", company,
                "country", country,
                "countryCode", countryCode,
                "currency", currency,
                "datatype", datatype,
                "default_", default_,
                "description", description,
                "directory", directory,
                "domainName", domainName,
                "emailAddr", emailAddr,
                "extension", extension,
                "filename", filename,
                "filepath", filepath,
                "filetype", filetype,
                "firstName", firstName,
                "fullName", fullName,
                "gender", gender,
                "job", job,
                "json", json,
                "key", key,
                "lastName", lastName,
                "latitude", latitude,
                "locale", locale,
                "longitude", longitude,
                "mac", mac,
                "manufacturer", manufacturer,
                "material", material,
                "middleName", middleName,
                "model", model,
                "password", password,
                "phone", phone,
                "pin", pin,
                "postalCode", postalCode,
                "price", price,
                "product", product,
                "sex", sex,
                "street", street,
                "timezone", timezone,
                "unit", unit,
                "url", url,
                "username", username,
                "uuid", uuid);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> city = Optional.empty();
 
        private Optional<? extends String> iban = Optional.empty();
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends String> iPv4 = Optional.empty();
 
        private Optional<? extends String> iPv6 = Optional.empty();
 
        private Optional<? extends String> account = Optional.empty();
 
        private Optional<? extends String> address = Optional.empty();
 
        private Optional<? extends String> amount = Optional.empty();
 
        private Optional<? extends String> avatar = Optional.empty();
 
        private Optional<? extends String> color = Optional.empty();
 
        private Optional<? extends String> comment = Optional.empty();
 
        private Optional<? extends String> company = Optional.empty();
 
        private Optional<? extends String> country = Optional.empty();
 
        private Optional<? extends String> countryCode = Optional.empty();
 
        private Optional<? extends String> currency = Optional.empty();
 
        private Optional<? extends String> datatype = Optional.empty();
 
        private Optional<? extends String> default_ = Optional.empty();
 
        private Optional<? extends String> description = Optional.empty();
 
        private Optional<? extends String> directory = Optional.empty();
 
        private Optional<? extends String> domainName = Optional.empty();
 
        private Optional<? extends String> emailAddr = Optional.empty();
 
        private Optional<? extends String> extension = Optional.empty();
 
        private Optional<? extends String> filename = Optional.empty();
 
        private Optional<? extends String> filepath = Optional.empty();
 
        private Optional<? extends String> filetype = Optional.empty();
 
        private Optional<? extends String> firstName = Optional.empty();
 
        private Optional<? extends String> fullName = Optional.empty();
 
        private Optional<? extends String> gender = Optional.empty();
 
        private Optional<? extends String> job = Optional.empty();
 
        private Optional<? extends String> json = Optional.empty();
 
        private Optional<? extends String> key = Optional.empty();
 
        private Optional<? extends String> lastName = Optional.empty();
 
        private Optional<? extends String> latitude = Optional.empty();
 
        private Optional<? extends String> locale = Optional.empty();
 
        private Optional<? extends String> longitude = Optional.empty();
 
        private Optional<? extends String> mac = Optional.empty();
 
        private Optional<? extends String> manufacturer = Optional.empty();
 
        private Optional<? extends String> material = Optional.empty();
 
        private Optional<? extends String> middleName = Optional.empty();
 
        private Optional<? extends String> model = Optional.empty();
 
        private Optional<? extends String> password = Optional.empty();
 
        private Optional<? extends String> phone = Optional.empty();
 
        private Optional<? extends String> pin = Optional.empty();
 
        private Optional<? extends String> postalCode = Optional.empty();
 
        private Optional<? extends String> price = Optional.empty();
 
        private Optional<? extends String> product = Optional.empty();
 
        private Optional<? extends String> sex = Optional.empty();
 
        private Optional<? extends String> street = Optional.empty();
 
        private Optional<? extends String> timezone = Optional.empty();
 
        private Optional<? extends String> unit = Optional.empty();
 
        private Optional<? extends String> url = Optional.empty();
 
        private Optional<? extends String> username = Optional.empty();
 
        private Optional<? extends String> uuid = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = Optional.ofNullable(city);
            return this;
        }

        public Builder city(Optional<? extends String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }

        public Builder iban(String iban) {
            Utils.checkNotNull(iban, "iban");
            this.iban = Optional.ofNullable(iban);
            return this;
        }

        public Builder iban(Optional<? extends String> iban) {
            Utils.checkNotNull(iban, "iban");
            this.iban = iban;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder iPv4(String iPv4) {
            Utils.checkNotNull(iPv4, "iPv4");
            this.iPv4 = Optional.ofNullable(iPv4);
            return this;
        }

        public Builder iPv4(Optional<? extends String> iPv4) {
            Utils.checkNotNull(iPv4, "iPv4");
            this.iPv4 = iPv4;
            return this;
        }

        public Builder iPv6(String iPv6) {
            Utils.checkNotNull(iPv6, "iPv6");
            this.iPv6 = Optional.ofNullable(iPv6);
            return this;
        }

        public Builder iPv6(Optional<? extends String> iPv6) {
            Utils.checkNotNull(iPv6, "iPv6");
            this.iPv6 = iPv6;
            return this;
        }

        public Builder account(String account) {
            Utils.checkNotNull(account, "account");
            this.account = Optional.ofNullable(account);
            return this;
        }

        public Builder account(Optional<? extends String> account) {
            Utils.checkNotNull(account, "account");
            this.account = account;
            return this;
        }

        public Builder address(String address) {
            Utils.checkNotNull(address, "address");
            this.address = Optional.ofNullable(address);
            return this;
        }

        public Builder address(Optional<? extends String> address) {
            Utils.checkNotNull(address, "address");
            this.address = address;
            return this;
        }

        public Builder amount(String amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        public Builder amount(Optional<? extends String> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        public Builder avatar(String avatar) {
            Utils.checkNotNull(avatar, "avatar");
            this.avatar = Optional.ofNullable(avatar);
            return this;
        }

        public Builder avatar(Optional<? extends String> avatar) {
            Utils.checkNotNull(avatar, "avatar");
            this.avatar = avatar;
            return this;
        }

        public Builder color(String color) {
            Utils.checkNotNull(color, "color");
            this.color = Optional.ofNullable(color);
            return this;
        }

        public Builder color(Optional<? extends String> color) {
            Utils.checkNotNull(color, "color");
            this.color = color;
            return this;
        }

        public Builder comment(String comment) {
            Utils.checkNotNull(comment, "comment");
            this.comment = Optional.ofNullable(comment);
            return this;
        }

        public Builder comment(Optional<? extends String> comment) {
            Utils.checkNotNull(comment, "comment");
            this.comment = comment;
            return this;
        }

        public Builder company(String company) {
            Utils.checkNotNull(company, "company");
            this.company = Optional.ofNullable(company);
            return this;
        }

        public Builder company(Optional<? extends String> company) {
            Utils.checkNotNull(company, "company");
            this.company = company;
            return this;
        }

        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = Optional.ofNullable(country);
            return this;
        }

        public Builder country(Optional<? extends String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        public Builder countryCode(String countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = Optional.ofNullable(countryCode);
            return this;
        }

        public Builder countryCode(Optional<? extends String> countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = countryCode;
            return this;
        }

        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        public Builder currency(Optional<? extends String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        public Builder datatype(String datatype) {
            Utils.checkNotNull(datatype, "datatype");
            this.datatype = Optional.ofNullable(datatype);
            return this;
        }

        public Builder datatype(Optional<? extends String> datatype) {
            Utils.checkNotNull(datatype, "datatype");
            this.datatype = datatype;
            return this;
        }

        public Builder default_(String default_) {
            Utils.checkNotNull(default_, "default_");
            this.default_ = Optional.ofNullable(default_);
            return this;
        }

        public Builder default_(Optional<? extends String> default_) {
            Utils.checkNotNull(default_, "default_");
            this.default_ = default_;
            return this;
        }

        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder directory(String directory) {
            Utils.checkNotNull(directory, "directory");
            this.directory = Optional.ofNullable(directory);
            return this;
        }

        public Builder directory(Optional<? extends String> directory) {
            Utils.checkNotNull(directory, "directory");
            this.directory = directory;
            return this;
        }

        public Builder domainName(String domainName) {
            Utils.checkNotNull(domainName, "domainName");
            this.domainName = Optional.ofNullable(domainName);
            return this;
        }

        public Builder domainName(Optional<? extends String> domainName) {
            Utils.checkNotNull(domainName, "domainName");
            this.domainName = domainName;
            return this;
        }

        public Builder emailAddr(String emailAddr) {
            Utils.checkNotNull(emailAddr, "emailAddr");
            this.emailAddr = Optional.ofNullable(emailAddr);
            return this;
        }

        public Builder emailAddr(Optional<? extends String> emailAddr) {
            Utils.checkNotNull(emailAddr, "emailAddr");
            this.emailAddr = emailAddr;
            return this;
        }

        public Builder extension(String extension) {
            Utils.checkNotNull(extension, "extension");
            this.extension = Optional.ofNullable(extension);
            return this;
        }

        public Builder extension(Optional<? extends String> extension) {
            Utils.checkNotNull(extension, "extension");
            this.extension = extension;
            return this;
        }

        public Builder filename(String filename) {
            Utils.checkNotNull(filename, "filename");
            this.filename = Optional.ofNullable(filename);
            return this;
        }

        public Builder filename(Optional<? extends String> filename) {
            Utils.checkNotNull(filename, "filename");
            this.filename = filename;
            return this;
        }

        public Builder filepath(String filepath) {
            Utils.checkNotNull(filepath, "filepath");
            this.filepath = Optional.ofNullable(filepath);
            return this;
        }

        public Builder filepath(Optional<? extends String> filepath) {
            Utils.checkNotNull(filepath, "filepath");
            this.filepath = filepath;
            return this;
        }

        public Builder filetype(String filetype) {
            Utils.checkNotNull(filetype, "filetype");
            this.filetype = Optional.ofNullable(filetype);
            return this;
        }

        public Builder filetype(Optional<? extends String> filetype) {
            Utils.checkNotNull(filetype, "filetype");
            this.filetype = filetype;
            return this;
        }

        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = Optional.ofNullable(firstName);
            return this;
        }

        public Builder firstName(Optional<? extends String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        public Builder fullName(String fullName) {
            Utils.checkNotNull(fullName, "fullName");
            this.fullName = Optional.ofNullable(fullName);
            return this;
        }

        public Builder fullName(Optional<? extends String> fullName) {
            Utils.checkNotNull(fullName, "fullName");
            this.fullName = fullName;
            return this;
        }

        public Builder gender(String gender) {
            Utils.checkNotNull(gender, "gender");
            this.gender = Optional.ofNullable(gender);
            return this;
        }

        public Builder gender(Optional<? extends String> gender) {
            Utils.checkNotNull(gender, "gender");
            this.gender = gender;
            return this;
        }

        public Builder job(String job) {
            Utils.checkNotNull(job, "job");
            this.job = Optional.ofNullable(job);
            return this;
        }

        public Builder job(Optional<? extends String> job) {
            Utils.checkNotNull(job, "job");
            this.job = job;
            return this;
        }

        public Builder json(String json) {
            Utils.checkNotNull(json, "json");
            this.json = Optional.ofNullable(json);
            return this;
        }

        public Builder json(Optional<? extends String> json) {
            Utils.checkNotNull(json, "json");
            this.json = json;
            return this;
        }

        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = Optional.ofNullable(key);
            return this;
        }

        public Builder key(Optional<? extends String> key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = Optional.ofNullable(lastName);
            return this;
        }

        public Builder lastName(Optional<? extends String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        public Builder latitude(String latitude) {
            Utils.checkNotNull(latitude, "latitude");
            this.latitude = Optional.ofNullable(latitude);
            return this;
        }

        public Builder latitude(Optional<? extends String> latitude) {
            Utils.checkNotNull(latitude, "latitude");
            this.latitude = latitude;
            return this;
        }

        public Builder locale(String locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = Optional.ofNullable(locale);
            return this;
        }

        public Builder locale(Optional<? extends String> locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = locale;
            return this;
        }

        public Builder longitude(String longitude) {
            Utils.checkNotNull(longitude, "longitude");
            this.longitude = Optional.ofNullable(longitude);
            return this;
        }

        public Builder longitude(Optional<? extends String> longitude) {
            Utils.checkNotNull(longitude, "longitude");
            this.longitude = longitude;
            return this;
        }

        public Builder mac(String mac) {
            Utils.checkNotNull(mac, "mac");
            this.mac = Optional.ofNullable(mac);
            return this;
        }

        public Builder mac(Optional<? extends String> mac) {
            Utils.checkNotNull(mac, "mac");
            this.mac = mac;
            return this;
        }

        public Builder manufacturer(String manufacturer) {
            Utils.checkNotNull(manufacturer, "manufacturer");
            this.manufacturer = Optional.ofNullable(manufacturer);
            return this;
        }

        public Builder manufacturer(Optional<? extends String> manufacturer) {
            Utils.checkNotNull(manufacturer, "manufacturer");
            this.manufacturer = manufacturer;
            return this;
        }

        public Builder material(String material) {
            Utils.checkNotNull(material, "material");
            this.material = Optional.ofNullable(material);
            return this;
        }

        public Builder material(Optional<? extends String> material) {
            Utils.checkNotNull(material, "material");
            this.material = material;
            return this;
        }

        public Builder middleName(String middleName) {
            Utils.checkNotNull(middleName, "middleName");
            this.middleName = Optional.ofNullable(middleName);
            return this;
        }

        public Builder middleName(Optional<? extends String> middleName) {
            Utils.checkNotNull(middleName, "middleName");
            this.middleName = middleName;
            return this;
        }

        public Builder model(String model) {
            Utils.checkNotNull(model, "model");
            this.model = Optional.ofNullable(model);
            return this;
        }

        public Builder model(Optional<? extends String> model) {
            Utils.checkNotNull(model, "model");
            this.model = model;
            return this;
        }

        public Builder password(String password) {
            Utils.checkNotNull(password, "password");
            this.password = Optional.ofNullable(password);
            return this;
        }

        public Builder password(Optional<? extends String> password) {
            Utils.checkNotNull(password, "password");
            this.password = password;
            return this;
        }

        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        public Builder phone(Optional<? extends String> phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }

        public Builder pin(String pin) {
            Utils.checkNotNull(pin, "pin");
            this.pin = Optional.ofNullable(pin);
            return this;
        }

        public Builder pin(Optional<? extends String> pin) {
            Utils.checkNotNull(pin, "pin");
            this.pin = pin;
            return this;
        }

        public Builder postalCode(String postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = Optional.ofNullable(postalCode);
            return this;
        }

        public Builder postalCode(Optional<? extends String> postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = postalCode;
            return this;
        }

        public Builder price(String price) {
            Utils.checkNotNull(price, "price");
            this.price = Optional.ofNullable(price);
            return this;
        }

        public Builder price(Optional<? extends String> price) {
            Utils.checkNotNull(price, "price");
            this.price = price;
            return this;
        }

        public Builder product(String product) {
            Utils.checkNotNull(product, "product");
            this.product = Optional.ofNullable(product);
            return this;
        }

        public Builder product(Optional<? extends String> product) {
            Utils.checkNotNull(product, "product");
            this.product = product;
            return this;
        }

        public Builder sex(String sex) {
            Utils.checkNotNull(sex, "sex");
            this.sex = Optional.ofNullable(sex);
            return this;
        }

        public Builder sex(Optional<? extends String> sex) {
            Utils.checkNotNull(sex, "sex");
            this.sex = sex;
            return this;
        }

        public Builder street(String street) {
            Utils.checkNotNull(street, "street");
            this.street = Optional.ofNullable(street);
            return this;
        }

        public Builder street(Optional<? extends String> street) {
            Utils.checkNotNull(street, "street");
            this.street = street;
            return this;
        }

        public Builder timezone(String timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = Optional.ofNullable(timezone);
            return this;
        }

        public Builder timezone(Optional<? extends String> timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = timezone;
            return this;
        }

        public Builder unit(String unit) {
            Utils.checkNotNull(unit, "unit");
            this.unit = Optional.ofNullable(unit);
            return this;
        }

        public Builder unit(Optional<? extends String> unit) {
            Utils.checkNotNull(unit, "unit");
            this.unit = unit;
            return this;
        }

        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        public Builder url(Optional<? extends String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = Optional.ofNullable(username);
            return this;
        }

        public Builder username(Optional<? extends String> username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }

        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = Optional.ofNullable(uuid);
            return this;
        }

        public Builder uuid(Optional<? extends String> uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }
        
        public FakerStrings build() {
            return new FakerStrings(
                city,
                iban,
                id,
                iPv4,
                iPv6,
                account,
                address,
                amount,
                avatar,
                color,
                comment,
                company,
                country,
                countryCode,
                currency,
                datatype,
                default_,
                description,
                directory,
                domainName,
                emailAddr,
                extension,
                filename,
                filepath,
                filetype,
                firstName,
                fullName,
                gender,
                job,
                json,
                key,
                lastName,
                latitude,
                locale,
                longitude,
                mac,
                manufacturer,
                material,
                middleName,
                model,
                password,
                phone,
                pin,
                postalCode,
                price,
                product,
                sex,
                street,
                timezone,
                unit,
                url,
                username,
                uuid);
        }
    }
}

