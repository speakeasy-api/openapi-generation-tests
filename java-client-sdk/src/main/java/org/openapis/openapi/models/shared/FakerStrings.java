/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

/**
 * FakerStrings - A set of strings with fieldnames that lead to relevant examples being generated for them
 */

public class FakerStrings {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("City")
    private Optional<String> city;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IBAN")
    private Optional<String> iban;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ID")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IPv4")
    private Optional<String> iPv4;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IPv6")
    private Optional<String> iPv6;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account")
    private Optional<String> account;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    private Optional<String> address;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<String> amount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("avatar")
    private Optional<String> avatar;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("color")
    private Optional<String> color;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comment")
    private Optional<String> comment;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company")
    private Optional<String> company;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private Optional<String> country;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country_code")
    private Optional<String> countryCode;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<String> currency;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datatype")
    private Optional<String> datatype;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default")
    private Optional<String> default_;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("directory")
    private Optional<String> directory;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domainName")
    private Optional<String> domainName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailAddr")
    private Optional<String> emailAddr;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extension")
    private Optional<String> extension;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filename")
    private Optional<String> filename;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filepath")
    private Optional<String> filepath;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filetype")
    private Optional<String> filetype;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firstName")
    private Optional<String> firstName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fullName")
    private Optional<String> fullName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gender")
    private Optional<String> gender;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job")
    private Optional<String> job;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("json")
    private Optional<String> json;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    private Optional<String> key;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastName")
    private Optional<String> lastName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latitude")
    private Optional<String> latitude;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locale")
    private Optional<String> locale;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("longitude")
    private Optional<String> longitude;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mac")
    private Optional<String> mac;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manufacturer")
    private Optional<String> manufacturer;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("material")
    private Optional<String> material;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("middleName")
    private Optional<String> middleName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("model")
    private Optional<String> model;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    private Optional<String> password;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    private Optional<String> phone;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pin")
    private Optional<String> pin;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postal-code")
    private Optional<String> postalCode;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price")
    private Optional<String> price;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product")
    private Optional<String> product;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sex")
    private Optional<String> sex;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street")
    private Optional<String> street;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    private Optional<String> timezone;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unit")
    private Optional<String> unit;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    private Optional<String> username;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uuid")
    private Optional<String> uuid;

    @JsonCreator
    public FakerStrings(
            @JsonProperty("City") Optional<String> city,
            @JsonProperty("IBAN") Optional<String> iban,
            @JsonProperty("ID") Optional<String> id,
            @JsonProperty("IPv4") Optional<String> iPv4,
            @JsonProperty("IPv6") Optional<String> iPv6,
            @JsonProperty("account") Optional<String> account,
            @JsonProperty("address") Optional<String> address,
            @JsonProperty("amount") Optional<String> amount,
            @JsonProperty("avatar") Optional<String> avatar,
            @JsonProperty("color") Optional<String> color,
            @JsonProperty("comment") Optional<String> comment,
            @JsonProperty("company") Optional<String> company,
            @JsonProperty("country") Optional<String> country,
            @JsonProperty("country_code") Optional<String> countryCode,
            @JsonProperty("currency") Optional<String> currency,
            @JsonProperty("datatype") Optional<String> datatype,
            @JsonProperty("default") Optional<String> default_,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("directory") Optional<String> directory,
            @JsonProperty("domainName") Optional<String> domainName,
            @JsonProperty("emailAddr") Optional<String> emailAddr,
            @JsonProperty("extension") Optional<String> extension,
            @JsonProperty("filename") Optional<String> filename,
            @JsonProperty("filepath") Optional<String> filepath,
            @JsonProperty("filetype") Optional<String> filetype,
            @JsonProperty("firstName") Optional<String> firstName,
            @JsonProperty("fullName") Optional<String> fullName,
            @JsonProperty("gender") Optional<String> gender,
            @JsonProperty("job") Optional<String> job,
            @JsonProperty("json") Optional<String> json,
            @JsonProperty("key") Optional<String> key,
            @JsonProperty("lastName") Optional<String> lastName,
            @JsonProperty("latitude") Optional<String> latitude,
            @JsonProperty("locale") Optional<String> locale,
            @JsonProperty("longitude") Optional<String> longitude,
            @JsonProperty("mac") Optional<String> mac,
            @JsonProperty("manufacturer") Optional<String> manufacturer,
            @JsonProperty("material") Optional<String> material,
            @JsonProperty("middleName") Optional<String> middleName,
            @JsonProperty("model") Optional<String> model,
            @JsonProperty("password") Optional<String> password,
            @JsonProperty("phone") Optional<String> phone,
            @JsonProperty("pin") Optional<String> pin,
            @JsonProperty("postal-code") Optional<String> postalCode,
            @JsonProperty("price") Optional<String> price,
            @JsonProperty("product") Optional<String> product,
            @JsonProperty("sex") Optional<String> sex,
            @JsonProperty("street") Optional<String> street,
            @JsonProperty("timezone") Optional<String> timezone,
            @JsonProperty("unit") Optional<String> unit,
            @JsonProperty("url") Optional<String> url,
            @JsonProperty("username") Optional<String> username,
            @JsonProperty("uuid") Optional<String> uuid) {
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(iban, "iban");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(iPv4, "iPv4");
        Utils.checkNotNull(iPv6, "iPv6");
        Utils.checkNotNull(account, "account");
        Utils.checkNotNull(address, "address");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(avatar, "avatar");
        Utils.checkNotNull(color, "color");
        Utils.checkNotNull(comment, "comment");
        Utils.checkNotNull(company, "company");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(countryCode, "countryCode");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(datatype, "datatype");
        Utils.checkNotNull(default_, "default_");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(directory, "directory");
        Utils.checkNotNull(domainName, "domainName");
        Utils.checkNotNull(emailAddr, "emailAddr");
        Utils.checkNotNull(extension, "extension");
        Utils.checkNotNull(filename, "filename");
        Utils.checkNotNull(filepath, "filepath");
        Utils.checkNotNull(filetype, "filetype");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(fullName, "fullName");
        Utils.checkNotNull(gender, "gender");
        Utils.checkNotNull(job, "job");
        Utils.checkNotNull(json, "json");
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(latitude, "latitude");
        Utils.checkNotNull(locale, "locale");
        Utils.checkNotNull(longitude, "longitude");
        Utils.checkNotNull(mac, "mac");
        Utils.checkNotNull(manufacturer, "manufacturer");
        Utils.checkNotNull(material, "material");
        Utils.checkNotNull(middleName, "middleName");
        Utils.checkNotNull(model, "model");
        Utils.checkNotNull(password, "password");
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(pin, "pin");
        Utils.checkNotNull(postalCode, "postalCode");
        Utils.checkNotNull(price, "price");
        Utils.checkNotNull(product, "product");
        Utils.checkNotNull(sex, "sex");
        Utils.checkNotNull(street, "street");
        Utils.checkNotNull(timezone, "timezone");
        Utils.checkNotNull(unit, "unit");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(username, "username");
        Utils.checkNotNull(uuid, "uuid");
        this.city = city;
        this.iban = iban;
        this.id = id;
        this.iPv4 = iPv4;
        this.iPv6 = iPv6;
        this.account = account;
        this.address = address;
        this.amount = amount;
        this.avatar = avatar;
        this.color = color;
        this.comment = comment;
        this.company = company;
        this.country = country;
        this.countryCode = countryCode;
        this.currency = currency;
        this.datatype = datatype;
        this.default_ = default_;
        this.description = description;
        this.directory = directory;
        this.domainName = domainName;
        this.emailAddr = emailAddr;
        this.extension = extension;
        this.filename = filename;
        this.filepath = filepath;
        this.filetype = filetype;
        this.firstName = firstName;
        this.fullName = fullName;
        this.gender = gender;
        this.job = job;
        this.json = json;
        this.key = key;
        this.lastName = lastName;
        this.latitude = latitude;
        this.locale = locale;
        this.longitude = longitude;
        this.mac = mac;
        this.manufacturer = manufacturer;
        this.material = material;
        this.middleName = middleName;
        this.model = model;
        this.password = password;
        this.phone = phone;
        this.pin = pin;
        this.postalCode = postalCode;
        this.price = price;
        this.product = product;
        this.sex = sex;
        this.street = street;
        this.timezone = timezone;
        this.unit = unit;
        this.url = url;
        this.username = username;
        this.uuid = uuid;
    }
    
    public FakerStrings() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> city() {
        return city;
    }

    @JsonIgnore
    public Optional<String> iban() {
        return iban;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> iPv4() {
        return iPv4;
    }

    @JsonIgnore
    public Optional<String> iPv6() {
        return iPv6;
    }

    @JsonIgnore
    public Optional<String> account() {
        return account;
    }

    @JsonIgnore
    public Optional<String> address() {
        return address;
    }

    @JsonIgnore
    public Optional<String> amount() {
        return amount;
    }

    @JsonIgnore
    public Optional<String> avatar() {
        return avatar;
    }

    @JsonIgnore
    public Optional<String> color() {
        return color;
    }

    @JsonIgnore
    public Optional<String> comment() {
        return comment;
    }

    @JsonIgnore
    public Optional<String> company() {
        return company;
    }

    @JsonIgnore
    public Optional<String> country() {
        return country;
    }

    @JsonIgnore
    public Optional<String> countryCode() {
        return countryCode;
    }

    @JsonIgnore
    public Optional<String> currency() {
        return currency;
    }

    @JsonIgnore
    public Optional<String> datatype() {
        return datatype;
    }

    @JsonIgnore
    public Optional<String> default_() {
        return default_;
    }

    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    @JsonIgnore
    public Optional<String> directory() {
        return directory;
    }

    @JsonIgnore
    public Optional<String> domainName() {
        return domainName;
    }

    @JsonIgnore
    public Optional<String> emailAddr() {
        return emailAddr;
    }

    @JsonIgnore
    public Optional<String> extension() {
        return extension;
    }

    @JsonIgnore
    public Optional<String> filename() {
        return filename;
    }

    @JsonIgnore
    public Optional<String> filepath() {
        return filepath;
    }

    @JsonIgnore
    public Optional<String> filetype() {
        return filetype;
    }

    @JsonIgnore
    public Optional<String> firstName() {
        return firstName;
    }

    @JsonIgnore
    public Optional<String> fullName() {
        return fullName;
    }

    @JsonIgnore
    public Optional<String> gender() {
        return gender;
    }

    @JsonIgnore
    public Optional<String> job() {
        return job;
    }

    @JsonIgnore
    public Optional<String> json() {
        return json;
    }

    @JsonIgnore
    public Optional<String> key() {
        return key;
    }

    @JsonIgnore
    public Optional<String> lastName() {
        return lastName;
    }

    @JsonIgnore
    public Optional<String> latitude() {
        return latitude;
    }

    @JsonIgnore
    public Optional<String> locale() {
        return locale;
    }

    @JsonIgnore
    public Optional<String> longitude() {
        return longitude;
    }

    @JsonIgnore
    public Optional<String> mac() {
        return mac;
    }

    @JsonIgnore
    public Optional<String> manufacturer() {
        return manufacturer;
    }

    @JsonIgnore
    public Optional<String> material() {
        return material;
    }

    @JsonIgnore
    public Optional<String> middleName() {
        return middleName;
    }

    @JsonIgnore
    public Optional<String> model() {
        return model;
    }

    @JsonIgnore
    public Optional<String> password() {
        return password;
    }

    @JsonIgnore
    public Optional<String> phone() {
        return phone;
    }

    @JsonIgnore
    public Optional<String> pin() {
        return pin;
    }

    @JsonIgnore
    public Optional<String> postalCode() {
        return postalCode;
    }

    @JsonIgnore
    public Optional<String> price() {
        return price;
    }

    @JsonIgnore
    public Optional<String> product() {
        return product;
    }

    @JsonIgnore
    public Optional<String> sex() {
        return sex;
    }

    @JsonIgnore
    public Optional<String> street() {
        return street;
    }

    @JsonIgnore
    public Optional<String> timezone() {
        return timezone;
    }

    @JsonIgnore
    public Optional<String> unit() {
        return unit;
    }

    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    @JsonIgnore
    public Optional<String> username() {
        return username;
    }

    @JsonIgnore
    public Optional<String> uuid() {
        return uuid;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public FakerStrings withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = Optional.ofNullable(city);
        return this;
    }

    public FakerStrings withCity(Optional<String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    public FakerStrings withIban(String iban) {
        Utils.checkNotNull(iban, "iban");
        this.iban = Optional.ofNullable(iban);
        return this;
    }

    public FakerStrings withIban(Optional<String> iban) {
        Utils.checkNotNull(iban, "iban");
        this.iban = iban;
        return this;
    }

    public FakerStrings withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public FakerStrings withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public FakerStrings withIPv4(String iPv4) {
        Utils.checkNotNull(iPv4, "iPv4");
        this.iPv4 = Optional.ofNullable(iPv4);
        return this;
    }

    public FakerStrings withIPv4(Optional<String> iPv4) {
        Utils.checkNotNull(iPv4, "iPv4");
        this.iPv4 = iPv4;
        return this;
    }

    public FakerStrings withIPv6(String iPv6) {
        Utils.checkNotNull(iPv6, "iPv6");
        this.iPv6 = Optional.ofNullable(iPv6);
        return this;
    }

    public FakerStrings withIPv6(Optional<String> iPv6) {
        Utils.checkNotNull(iPv6, "iPv6");
        this.iPv6 = iPv6;
        return this;
    }

    public FakerStrings withAccount(String account) {
        Utils.checkNotNull(account, "account");
        this.account = Optional.ofNullable(account);
        return this;
    }

    public FakerStrings withAccount(Optional<String> account) {
        Utils.checkNotNull(account, "account");
        this.account = account;
        return this;
    }

    public FakerStrings withAddress(String address) {
        Utils.checkNotNull(address, "address");
        this.address = Optional.ofNullable(address);
        return this;
    }

    public FakerStrings withAddress(Optional<String> address) {
        Utils.checkNotNull(address, "address");
        this.address = address;
        return this;
    }

    public FakerStrings withAmount(String amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    public FakerStrings withAmount(Optional<String> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    public FakerStrings withAvatar(String avatar) {
        Utils.checkNotNull(avatar, "avatar");
        this.avatar = Optional.ofNullable(avatar);
        return this;
    }

    public FakerStrings withAvatar(Optional<String> avatar) {
        Utils.checkNotNull(avatar, "avatar");
        this.avatar = avatar;
        return this;
    }

    public FakerStrings withColor(String color) {
        Utils.checkNotNull(color, "color");
        this.color = Optional.ofNullable(color);
        return this;
    }

    public FakerStrings withColor(Optional<String> color) {
        Utils.checkNotNull(color, "color");
        this.color = color;
        return this;
    }

    public FakerStrings withComment(String comment) {
        Utils.checkNotNull(comment, "comment");
        this.comment = Optional.ofNullable(comment);
        return this;
    }

    public FakerStrings withComment(Optional<String> comment) {
        Utils.checkNotNull(comment, "comment");
        this.comment = comment;
        return this;
    }

    public FakerStrings withCompany(String company) {
        Utils.checkNotNull(company, "company");
        this.company = Optional.ofNullable(company);
        return this;
    }

    public FakerStrings withCompany(Optional<String> company) {
        Utils.checkNotNull(company, "company");
        this.company = company;
        return this;
    }

    public FakerStrings withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = Optional.ofNullable(country);
        return this;
    }

    public FakerStrings withCountry(Optional<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    public FakerStrings withCountryCode(String countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = Optional.ofNullable(countryCode);
        return this;
    }

    public FakerStrings withCountryCode(Optional<String> countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = countryCode;
        return this;
    }

    public FakerStrings withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }

    public FakerStrings withCurrency(Optional<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public FakerStrings withDatatype(String datatype) {
        Utils.checkNotNull(datatype, "datatype");
        this.datatype = Optional.ofNullable(datatype);
        return this;
    }

    public FakerStrings withDatatype(Optional<String> datatype) {
        Utils.checkNotNull(datatype, "datatype");
        this.datatype = datatype;
        return this;
    }

    public FakerStrings withDefault(String default_) {
        Utils.checkNotNull(default_, "default_");
        this.default_ = Optional.ofNullable(default_);
        return this;
    }

    public FakerStrings withDefault(Optional<String> default_) {
        Utils.checkNotNull(default_, "default_");
        this.default_ = default_;
        return this;
    }

    public FakerStrings withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    public FakerStrings withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public FakerStrings withDirectory(String directory) {
        Utils.checkNotNull(directory, "directory");
        this.directory = Optional.ofNullable(directory);
        return this;
    }

    public FakerStrings withDirectory(Optional<String> directory) {
        Utils.checkNotNull(directory, "directory");
        this.directory = directory;
        return this;
    }

    public FakerStrings withDomainName(String domainName) {
        Utils.checkNotNull(domainName, "domainName");
        this.domainName = Optional.ofNullable(domainName);
        return this;
    }

    public FakerStrings withDomainName(Optional<String> domainName) {
        Utils.checkNotNull(domainName, "domainName");
        this.domainName = domainName;
        return this;
    }

    public FakerStrings withEmailAddr(String emailAddr) {
        Utils.checkNotNull(emailAddr, "emailAddr");
        this.emailAddr = Optional.ofNullable(emailAddr);
        return this;
    }

    public FakerStrings withEmailAddr(Optional<String> emailAddr) {
        Utils.checkNotNull(emailAddr, "emailAddr");
        this.emailAddr = emailAddr;
        return this;
    }

    public FakerStrings withExtension(String extension) {
        Utils.checkNotNull(extension, "extension");
        this.extension = Optional.ofNullable(extension);
        return this;
    }

    public FakerStrings withExtension(Optional<String> extension) {
        Utils.checkNotNull(extension, "extension");
        this.extension = extension;
        return this;
    }

    public FakerStrings withFilename(String filename) {
        Utils.checkNotNull(filename, "filename");
        this.filename = Optional.ofNullable(filename);
        return this;
    }

    public FakerStrings withFilename(Optional<String> filename) {
        Utils.checkNotNull(filename, "filename");
        this.filename = filename;
        return this;
    }

    public FakerStrings withFilepath(String filepath) {
        Utils.checkNotNull(filepath, "filepath");
        this.filepath = Optional.ofNullable(filepath);
        return this;
    }

    public FakerStrings withFilepath(Optional<String> filepath) {
        Utils.checkNotNull(filepath, "filepath");
        this.filepath = filepath;
        return this;
    }

    public FakerStrings withFiletype(String filetype) {
        Utils.checkNotNull(filetype, "filetype");
        this.filetype = Optional.ofNullable(filetype);
        return this;
    }

    public FakerStrings withFiletype(Optional<String> filetype) {
        Utils.checkNotNull(filetype, "filetype");
        this.filetype = filetype;
        return this;
    }

    public FakerStrings withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = Optional.ofNullable(firstName);
        return this;
    }

    public FakerStrings withFirstName(Optional<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    public FakerStrings withFullName(String fullName) {
        Utils.checkNotNull(fullName, "fullName");
        this.fullName = Optional.ofNullable(fullName);
        return this;
    }

    public FakerStrings withFullName(Optional<String> fullName) {
        Utils.checkNotNull(fullName, "fullName");
        this.fullName = fullName;
        return this;
    }

    public FakerStrings withGender(String gender) {
        Utils.checkNotNull(gender, "gender");
        this.gender = Optional.ofNullable(gender);
        return this;
    }

    public FakerStrings withGender(Optional<String> gender) {
        Utils.checkNotNull(gender, "gender");
        this.gender = gender;
        return this;
    }

    public FakerStrings withJob(String job) {
        Utils.checkNotNull(job, "job");
        this.job = Optional.ofNullable(job);
        return this;
    }

    public FakerStrings withJob(Optional<String> job) {
        Utils.checkNotNull(job, "job");
        this.job = job;
        return this;
    }

    public FakerStrings withJson(String json) {
        Utils.checkNotNull(json, "json");
        this.json = Optional.ofNullable(json);
        return this;
    }

    public FakerStrings withJson(Optional<String> json) {
        Utils.checkNotNull(json, "json");
        this.json = json;
        return this;
    }

    public FakerStrings withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = Optional.ofNullable(key);
        return this;
    }

    public FakerStrings withKey(Optional<String> key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    public FakerStrings withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = Optional.ofNullable(lastName);
        return this;
    }

    public FakerStrings withLastName(Optional<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    public FakerStrings withLatitude(String latitude) {
        Utils.checkNotNull(latitude, "latitude");
        this.latitude = Optional.ofNullable(latitude);
        return this;
    }

    public FakerStrings withLatitude(Optional<String> latitude) {
        Utils.checkNotNull(latitude, "latitude");
        this.latitude = latitude;
        return this;
    }

    public FakerStrings withLocale(String locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = Optional.ofNullable(locale);
        return this;
    }

    public FakerStrings withLocale(Optional<String> locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = locale;
        return this;
    }

    public FakerStrings withLongitude(String longitude) {
        Utils.checkNotNull(longitude, "longitude");
        this.longitude = Optional.ofNullable(longitude);
        return this;
    }

    public FakerStrings withLongitude(Optional<String> longitude) {
        Utils.checkNotNull(longitude, "longitude");
        this.longitude = longitude;
        return this;
    }

    public FakerStrings withMac(String mac) {
        Utils.checkNotNull(mac, "mac");
        this.mac = Optional.ofNullable(mac);
        return this;
    }

    public FakerStrings withMac(Optional<String> mac) {
        Utils.checkNotNull(mac, "mac");
        this.mac = mac;
        return this;
    }

    public FakerStrings withManufacturer(String manufacturer) {
        Utils.checkNotNull(manufacturer, "manufacturer");
        this.manufacturer = Optional.ofNullable(manufacturer);
        return this;
    }

    public FakerStrings withManufacturer(Optional<String> manufacturer) {
        Utils.checkNotNull(manufacturer, "manufacturer");
        this.manufacturer = manufacturer;
        return this;
    }

    public FakerStrings withMaterial(String material) {
        Utils.checkNotNull(material, "material");
        this.material = Optional.ofNullable(material);
        return this;
    }

    public FakerStrings withMaterial(Optional<String> material) {
        Utils.checkNotNull(material, "material");
        this.material = material;
        return this;
    }

    public FakerStrings withMiddleName(String middleName) {
        Utils.checkNotNull(middleName, "middleName");
        this.middleName = Optional.ofNullable(middleName);
        return this;
    }

    public FakerStrings withMiddleName(Optional<String> middleName) {
        Utils.checkNotNull(middleName, "middleName");
        this.middleName = middleName;
        return this;
    }

    public FakerStrings withModel(String model) {
        Utils.checkNotNull(model, "model");
        this.model = Optional.ofNullable(model);
        return this;
    }

    public FakerStrings withModel(Optional<String> model) {
        Utils.checkNotNull(model, "model");
        this.model = model;
        return this;
    }

    public FakerStrings withPassword(String password) {
        Utils.checkNotNull(password, "password");
        this.password = Optional.ofNullable(password);
        return this;
    }

    public FakerStrings withPassword(Optional<String> password) {
        Utils.checkNotNull(password, "password");
        this.password = password;
        return this;
    }

    public FakerStrings withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = Optional.ofNullable(phone);
        return this;
    }

    public FakerStrings withPhone(Optional<String> phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    public FakerStrings withPin(String pin) {
        Utils.checkNotNull(pin, "pin");
        this.pin = Optional.ofNullable(pin);
        return this;
    }

    public FakerStrings withPin(Optional<String> pin) {
        Utils.checkNotNull(pin, "pin");
        this.pin = pin;
        return this;
    }

    public FakerStrings withPostalCode(String postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = Optional.ofNullable(postalCode);
        return this;
    }

    public FakerStrings withPostalCode(Optional<String> postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = postalCode;
        return this;
    }

    public FakerStrings withPrice(String price) {
        Utils.checkNotNull(price, "price");
        this.price = Optional.ofNullable(price);
        return this;
    }

    public FakerStrings withPrice(Optional<String> price) {
        Utils.checkNotNull(price, "price");
        this.price = price;
        return this;
    }

    public FakerStrings withProduct(String product) {
        Utils.checkNotNull(product, "product");
        this.product = Optional.ofNullable(product);
        return this;
    }

    public FakerStrings withProduct(Optional<String> product) {
        Utils.checkNotNull(product, "product");
        this.product = product;
        return this;
    }

    public FakerStrings withSex(String sex) {
        Utils.checkNotNull(sex, "sex");
        this.sex = Optional.ofNullable(sex);
        return this;
    }

    public FakerStrings withSex(Optional<String> sex) {
        Utils.checkNotNull(sex, "sex");
        this.sex = sex;
        return this;
    }

    public FakerStrings withStreet(String street) {
        Utils.checkNotNull(street, "street");
        this.street = Optional.ofNullable(street);
        return this;
    }

    public FakerStrings withStreet(Optional<String> street) {
        Utils.checkNotNull(street, "street");
        this.street = street;
        return this;
    }

    public FakerStrings withTimezone(String timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = Optional.ofNullable(timezone);
        return this;
    }

    public FakerStrings withTimezone(Optional<String> timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = timezone;
        return this;
    }

    public FakerStrings withUnit(String unit) {
        Utils.checkNotNull(unit, "unit");
        this.unit = Optional.ofNullable(unit);
        return this;
    }

    public FakerStrings withUnit(Optional<String> unit) {
        Utils.checkNotNull(unit, "unit");
        this.unit = unit;
        return this;
    }

    public FakerStrings withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    public FakerStrings withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    public FakerStrings withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = Optional.ofNullable(username);
        return this;
    }

    public FakerStrings withUsername(Optional<String> username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    public FakerStrings withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = Optional.ofNullable(uuid);
        return this;
    }

    public FakerStrings withUuid(Optional<String> uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FakerStrings other = (FakerStrings) o;
        return 
            Objects.deepEquals(this.city, other.city) &&
            Objects.deepEquals(this.iban, other.iban) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.iPv4, other.iPv4) &&
            Objects.deepEquals(this.iPv6, other.iPv6) &&
            Objects.deepEquals(this.account, other.account) &&
            Objects.deepEquals(this.address, other.address) &&
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.avatar, other.avatar) &&
            Objects.deepEquals(this.color, other.color) &&
            Objects.deepEquals(this.comment, other.comment) &&
            Objects.deepEquals(this.company, other.company) &&
            Objects.deepEquals(this.country, other.country) &&
            Objects.deepEquals(this.countryCode, other.countryCode) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.datatype, other.datatype) &&
            Objects.deepEquals(this.default_, other.default_) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.directory, other.directory) &&
            Objects.deepEquals(this.domainName, other.domainName) &&
            Objects.deepEquals(this.emailAddr, other.emailAddr) &&
            Objects.deepEquals(this.extension, other.extension) &&
            Objects.deepEquals(this.filename, other.filename) &&
            Objects.deepEquals(this.filepath, other.filepath) &&
            Objects.deepEquals(this.filetype, other.filetype) &&
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.fullName, other.fullName) &&
            Objects.deepEquals(this.gender, other.gender) &&
            Objects.deepEquals(this.job, other.job) &&
            Objects.deepEquals(this.json, other.json) &&
            Objects.deepEquals(this.key, other.key) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.latitude, other.latitude) &&
            Objects.deepEquals(this.locale, other.locale) &&
            Objects.deepEquals(this.longitude, other.longitude) &&
            Objects.deepEquals(this.mac, other.mac) &&
            Objects.deepEquals(this.manufacturer, other.manufacturer) &&
            Objects.deepEquals(this.material, other.material) &&
            Objects.deepEquals(this.middleName, other.middleName) &&
            Objects.deepEquals(this.model, other.model) &&
            Objects.deepEquals(this.password, other.password) &&
            Objects.deepEquals(this.phone, other.phone) &&
            Objects.deepEquals(this.pin, other.pin) &&
            Objects.deepEquals(this.postalCode, other.postalCode) &&
            Objects.deepEquals(this.price, other.price) &&
            Objects.deepEquals(this.product, other.product) &&
            Objects.deepEquals(this.sex, other.sex) &&
            Objects.deepEquals(this.street, other.street) &&
            Objects.deepEquals(this.timezone, other.timezone) &&
            Objects.deepEquals(this.unit, other.unit) &&
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.username, other.username) &&
            Objects.deepEquals(this.uuid, other.uuid);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            city,
            iban,
            id,
            iPv4,
            iPv6,
            account,
            address,
            amount,
            avatar,
            color,
            comment,
            company,
            country,
            countryCode,
            currency,
            datatype,
            default_,
            description,
            directory,
            domainName,
            emailAddr,
            extension,
            filename,
            filepath,
            filetype,
            firstName,
            fullName,
            gender,
            job,
            json,
            key,
            lastName,
            latitude,
            locale,
            longitude,
            mac,
            manufacturer,
            material,
            middleName,
            model,
            password,
            phone,
            pin,
            postalCode,
            price,
            product,
            sex,
            street,
            timezone,
            unit,
            url,
            username,
            uuid);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FakerStrings.class,
                "city", city,
                "iban", iban,
                "id", id,
                "iPv4", iPv4,
                "iPv6", iPv6,
                "account", account,
                "address", address,
                "amount", amount,
                "avatar", avatar,
                "color", color,
                "comment", comment,
                "company", company,
                "country", country,
                "countryCode", countryCode,
                "currency", currency,
                "datatype", datatype,
                "default_", default_,
                "description", description,
                "directory", directory,
                "domainName", domainName,
                "emailAddr", emailAddr,
                "extension", extension,
                "filename", filename,
                "filepath", filepath,
                "filetype", filetype,
                "firstName", firstName,
                "fullName", fullName,
                "gender", gender,
                "job", job,
                "json", json,
                "key", key,
                "lastName", lastName,
                "latitude", latitude,
                "locale", locale,
                "longitude", longitude,
                "mac", mac,
                "manufacturer", manufacturer,
                "material", material,
                "middleName", middleName,
                "model", model,
                "password", password,
                "phone", phone,
                "pin", pin,
                "postalCode", postalCode,
                "price", price,
                "product", product,
                "sex", sex,
                "street", street,
                "timezone", timezone,
                "unit", unit,
                "url", url,
                "username", username,
                "uuid", uuid);
    }
    
    public final static class Builder {
 
        private Optional<String> city = Optional.empty();
 
        private Optional<String> iban = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> iPv4 = Optional.empty();
 
        private Optional<String> iPv6 = Optional.empty();
 
        private Optional<String> account = Optional.empty();
 
        private Optional<String> address = Optional.empty();
 
        private Optional<String> amount = Optional.empty();
 
        private Optional<String> avatar = Optional.empty();
 
        private Optional<String> color = Optional.empty();
 
        private Optional<String> comment = Optional.empty();
 
        private Optional<String> company = Optional.empty();
 
        private Optional<String> country = Optional.empty();
 
        private Optional<String> countryCode = Optional.empty();
 
        private Optional<String> currency = Optional.empty();
 
        private Optional<String> datatype = Optional.empty();
 
        private Optional<String> default_ = Optional.empty();
 
        private Optional<String> description = Optional.empty();
 
        private Optional<String> directory = Optional.empty();
 
        private Optional<String> domainName = Optional.empty();
 
        private Optional<String> emailAddr = Optional.empty();
 
        private Optional<String> extension = Optional.empty();
 
        private Optional<String> filename = Optional.empty();
 
        private Optional<String> filepath = Optional.empty();
 
        private Optional<String> filetype = Optional.empty();
 
        private Optional<String> firstName = Optional.empty();
 
        private Optional<String> fullName = Optional.empty();
 
        private Optional<String> gender = Optional.empty();
 
        private Optional<String> job = Optional.empty();
 
        private Optional<String> json = Optional.empty();
 
        private Optional<String> key = Optional.empty();
 
        private Optional<String> lastName = Optional.empty();
 
        private Optional<String> latitude = Optional.empty();
 
        private Optional<String> locale = Optional.empty();
 
        private Optional<String> longitude = Optional.empty();
 
        private Optional<String> mac = Optional.empty();
 
        private Optional<String> manufacturer = Optional.empty();
 
        private Optional<String> material = Optional.empty();
 
        private Optional<String> middleName = Optional.empty();
 
        private Optional<String> model = Optional.empty();
 
        private Optional<String> password = Optional.empty();
 
        private Optional<String> phone = Optional.empty();
 
        private Optional<String> pin = Optional.empty();
 
        private Optional<String> postalCode = Optional.empty();
 
        private Optional<String> price = Optional.empty();
 
        private Optional<String> product = Optional.empty();
 
        private Optional<String> sex = Optional.empty();
 
        private Optional<String> street = Optional.empty();
 
        private Optional<String> timezone = Optional.empty();
 
        private Optional<String> unit = Optional.empty();
 
        private Optional<String> url = Optional.empty();
 
        private Optional<String> username = Optional.empty();
 
        private Optional<String> uuid = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = Optional.ofNullable(city);
            return this;
        }

        public Builder city(Optional<String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }

        public Builder iban(String iban) {
            Utils.checkNotNull(iban, "iban");
            this.iban = Optional.ofNullable(iban);
            return this;
        }

        public Builder iban(Optional<String> iban) {
            Utils.checkNotNull(iban, "iban");
            this.iban = iban;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder iPv4(String iPv4) {
            Utils.checkNotNull(iPv4, "iPv4");
            this.iPv4 = Optional.ofNullable(iPv4);
            return this;
        }

        public Builder iPv4(Optional<String> iPv4) {
            Utils.checkNotNull(iPv4, "iPv4");
            this.iPv4 = iPv4;
            return this;
        }

        public Builder iPv6(String iPv6) {
            Utils.checkNotNull(iPv6, "iPv6");
            this.iPv6 = Optional.ofNullable(iPv6);
            return this;
        }

        public Builder iPv6(Optional<String> iPv6) {
            Utils.checkNotNull(iPv6, "iPv6");
            this.iPv6 = iPv6;
            return this;
        }

        public Builder account(String account) {
            Utils.checkNotNull(account, "account");
            this.account = Optional.ofNullable(account);
            return this;
        }

        public Builder account(Optional<String> account) {
            Utils.checkNotNull(account, "account");
            this.account = account;
            return this;
        }

        public Builder address(String address) {
            Utils.checkNotNull(address, "address");
            this.address = Optional.ofNullable(address);
            return this;
        }

        public Builder address(Optional<String> address) {
            Utils.checkNotNull(address, "address");
            this.address = address;
            return this;
        }

        public Builder amount(String amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        public Builder amount(Optional<String> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        public Builder avatar(String avatar) {
            Utils.checkNotNull(avatar, "avatar");
            this.avatar = Optional.ofNullable(avatar);
            return this;
        }

        public Builder avatar(Optional<String> avatar) {
            Utils.checkNotNull(avatar, "avatar");
            this.avatar = avatar;
            return this;
        }

        public Builder color(String color) {
            Utils.checkNotNull(color, "color");
            this.color = Optional.ofNullable(color);
            return this;
        }

        public Builder color(Optional<String> color) {
            Utils.checkNotNull(color, "color");
            this.color = color;
            return this;
        }

        public Builder comment(String comment) {
            Utils.checkNotNull(comment, "comment");
            this.comment = Optional.ofNullable(comment);
            return this;
        }

        public Builder comment(Optional<String> comment) {
            Utils.checkNotNull(comment, "comment");
            this.comment = comment;
            return this;
        }

        public Builder company(String company) {
            Utils.checkNotNull(company, "company");
            this.company = Optional.ofNullable(company);
            return this;
        }

        public Builder company(Optional<String> company) {
            Utils.checkNotNull(company, "company");
            this.company = company;
            return this;
        }

        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = Optional.ofNullable(country);
            return this;
        }

        public Builder country(Optional<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        public Builder countryCode(String countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = Optional.ofNullable(countryCode);
            return this;
        }

        public Builder countryCode(Optional<String> countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = countryCode;
            return this;
        }

        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        public Builder currency(Optional<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        public Builder datatype(String datatype) {
            Utils.checkNotNull(datatype, "datatype");
            this.datatype = Optional.ofNullable(datatype);
            return this;
        }

        public Builder datatype(Optional<String> datatype) {
            Utils.checkNotNull(datatype, "datatype");
            this.datatype = datatype;
            return this;
        }

        public Builder default_(String default_) {
            Utils.checkNotNull(default_, "default_");
            this.default_ = Optional.ofNullable(default_);
            return this;
        }

        public Builder default_(Optional<String> default_) {
            Utils.checkNotNull(default_, "default_");
            this.default_ = default_;
            return this;
        }

        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder directory(String directory) {
            Utils.checkNotNull(directory, "directory");
            this.directory = Optional.ofNullable(directory);
            return this;
        }

        public Builder directory(Optional<String> directory) {
            Utils.checkNotNull(directory, "directory");
            this.directory = directory;
            return this;
        }

        public Builder domainName(String domainName) {
            Utils.checkNotNull(domainName, "domainName");
            this.domainName = Optional.ofNullable(domainName);
            return this;
        }

        public Builder domainName(Optional<String> domainName) {
            Utils.checkNotNull(domainName, "domainName");
            this.domainName = domainName;
            return this;
        }

        public Builder emailAddr(String emailAddr) {
            Utils.checkNotNull(emailAddr, "emailAddr");
            this.emailAddr = Optional.ofNullable(emailAddr);
            return this;
        }

        public Builder emailAddr(Optional<String> emailAddr) {
            Utils.checkNotNull(emailAddr, "emailAddr");
            this.emailAddr = emailAddr;
            return this;
        }

        public Builder extension(String extension) {
            Utils.checkNotNull(extension, "extension");
            this.extension = Optional.ofNullable(extension);
            return this;
        }

        public Builder extension(Optional<String> extension) {
            Utils.checkNotNull(extension, "extension");
            this.extension = extension;
            return this;
        }

        public Builder filename(String filename) {
            Utils.checkNotNull(filename, "filename");
            this.filename = Optional.ofNullable(filename);
            return this;
        }

        public Builder filename(Optional<String> filename) {
            Utils.checkNotNull(filename, "filename");
            this.filename = filename;
            return this;
        }

        public Builder filepath(String filepath) {
            Utils.checkNotNull(filepath, "filepath");
            this.filepath = Optional.ofNullable(filepath);
            return this;
        }

        public Builder filepath(Optional<String> filepath) {
            Utils.checkNotNull(filepath, "filepath");
            this.filepath = filepath;
            return this;
        }

        public Builder filetype(String filetype) {
            Utils.checkNotNull(filetype, "filetype");
            this.filetype = Optional.ofNullable(filetype);
            return this;
        }

        public Builder filetype(Optional<String> filetype) {
            Utils.checkNotNull(filetype, "filetype");
            this.filetype = filetype;
            return this;
        }

        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = Optional.ofNullable(firstName);
            return this;
        }

        public Builder firstName(Optional<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        public Builder fullName(String fullName) {
            Utils.checkNotNull(fullName, "fullName");
            this.fullName = Optional.ofNullable(fullName);
            return this;
        }

        public Builder fullName(Optional<String> fullName) {
            Utils.checkNotNull(fullName, "fullName");
            this.fullName = fullName;
            return this;
        }

        public Builder gender(String gender) {
            Utils.checkNotNull(gender, "gender");
            this.gender = Optional.ofNullable(gender);
            return this;
        }

        public Builder gender(Optional<String> gender) {
            Utils.checkNotNull(gender, "gender");
            this.gender = gender;
            return this;
        }

        public Builder job(String job) {
            Utils.checkNotNull(job, "job");
            this.job = Optional.ofNullable(job);
            return this;
        }

        public Builder job(Optional<String> job) {
            Utils.checkNotNull(job, "job");
            this.job = job;
            return this;
        }

        public Builder json(String json) {
            Utils.checkNotNull(json, "json");
            this.json = Optional.ofNullable(json);
            return this;
        }

        public Builder json(Optional<String> json) {
            Utils.checkNotNull(json, "json");
            this.json = json;
            return this;
        }

        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = Optional.ofNullable(key);
            return this;
        }

        public Builder key(Optional<String> key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = Optional.ofNullable(lastName);
            return this;
        }

        public Builder lastName(Optional<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        public Builder latitude(String latitude) {
            Utils.checkNotNull(latitude, "latitude");
            this.latitude = Optional.ofNullable(latitude);
            return this;
        }

        public Builder latitude(Optional<String> latitude) {
            Utils.checkNotNull(latitude, "latitude");
            this.latitude = latitude;
            return this;
        }

        public Builder locale(String locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = Optional.ofNullable(locale);
            return this;
        }

        public Builder locale(Optional<String> locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = locale;
            return this;
        }

        public Builder longitude(String longitude) {
            Utils.checkNotNull(longitude, "longitude");
            this.longitude = Optional.ofNullable(longitude);
            return this;
        }

        public Builder longitude(Optional<String> longitude) {
            Utils.checkNotNull(longitude, "longitude");
            this.longitude = longitude;
            return this;
        }

        public Builder mac(String mac) {
            Utils.checkNotNull(mac, "mac");
            this.mac = Optional.ofNullable(mac);
            return this;
        }

        public Builder mac(Optional<String> mac) {
            Utils.checkNotNull(mac, "mac");
            this.mac = mac;
            return this;
        }

        public Builder manufacturer(String manufacturer) {
            Utils.checkNotNull(manufacturer, "manufacturer");
            this.manufacturer = Optional.ofNullable(manufacturer);
            return this;
        }

        public Builder manufacturer(Optional<String> manufacturer) {
            Utils.checkNotNull(manufacturer, "manufacturer");
            this.manufacturer = manufacturer;
            return this;
        }

        public Builder material(String material) {
            Utils.checkNotNull(material, "material");
            this.material = Optional.ofNullable(material);
            return this;
        }

        public Builder material(Optional<String> material) {
            Utils.checkNotNull(material, "material");
            this.material = material;
            return this;
        }

        public Builder middleName(String middleName) {
            Utils.checkNotNull(middleName, "middleName");
            this.middleName = Optional.ofNullable(middleName);
            return this;
        }

        public Builder middleName(Optional<String> middleName) {
            Utils.checkNotNull(middleName, "middleName");
            this.middleName = middleName;
            return this;
        }

        public Builder model(String model) {
            Utils.checkNotNull(model, "model");
            this.model = Optional.ofNullable(model);
            return this;
        }

        public Builder model(Optional<String> model) {
            Utils.checkNotNull(model, "model");
            this.model = model;
            return this;
        }

        public Builder password(String password) {
            Utils.checkNotNull(password, "password");
            this.password = Optional.ofNullable(password);
            return this;
        }

        public Builder password(Optional<String> password) {
            Utils.checkNotNull(password, "password");
            this.password = password;
            return this;
        }

        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        public Builder phone(Optional<String> phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }

        public Builder pin(String pin) {
            Utils.checkNotNull(pin, "pin");
            this.pin = Optional.ofNullable(pin);
            return this;
        }

        public Builder pin(Optional<String> pin) {
            Utils.checkNotNull(pin, "pin");
            this.pin = pin;
            return this;
        }

        public Builder postalCode(String postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = Optional.ofNullable(postalCode);
            return this;
        }

        public Builder postalCode(Optional<String> postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = postalCode;
            return this;
        }

        public Builder price(String price) {
            Utils.checkNotNull(price, "price");
            this.price = Optional.ofNullable(price);
            return this;
        }

        public Builder price(Optional<String> price) {
            Utils.checkNotNull(price, "price");
            this.price = price;
            return this;
        }

        public Builder product(String product) {
            Utils.checkNotNull(product, "product");
            this.product = Optional.ofNullable(product);
            return this;
        }

        public Builder product(Optional<String> product) {
            Utils.checkNotNull(product, "product");
            this.product = product;
            return this;
        }

        public Builder sex(String sex) {
            Utils.checkNotNull(sex, "sex");
            this.sex = Optional.ofNullable(sex);
            return this;
        }

        public Builder sex(Optional<String> sex) {
            Utils.checkNotNull(sex, "sex");
            this.sex = sex;
            return this;
        }

        public Builder street(String street) {
            Utils.checkNotNull(street, "street");
            this.street = Optional.ofNullable(street);
            return this;
        }

        public Builder street(Optional<String> street) {
            Utils.checkNotNull(street, "street");
            this.street = street;
            return this;
        }

        public Builder timezone(String timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = Optional.ofNullable(timezone);
            return this;
        }

        public Builder timezone(Optional<String> timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = timezone;
            return this;
        }

        public Builder unit(String unit) {
            Utils.checkNotNull(unit, "unit");
            this.unit = Optional.ofNullable(unit);
            return this;
        }

        public Builder unit(Optional<String> unit) {
            Utils.checkNotNull(unit, "unit");
            this.unit = unit;
            return this;
        }

        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = Optional.ofNullable(username);
            return this;
        }

        public Builder username(Optional<String> username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }

        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = Optional.ofNullable(uuid);
            return this;
        }

        public Builder uuid(Optional<String> uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }
        
        public FakerStrings build() {
            return new FakerStrings(
                city,
                iban,
                id,
                iPv4,
                iPv6,
                account,
                address,
                amount,
                avatar,
                color,
                comment,
                company,
                country,
                countryCode,
                currency,
                datatype,
                default_,
                description,
                directory,
                domainName,
                emailAddr,
                extension,
                filename,
                filepath,
                filetype,
                firstName,
                fullName,
                gender,
                job,
                json,
                key,
                lastName,
                latitude,
                locale,
                longitude,
                mac,
                manufacturer,
                material,
                middleName,
                model,
                password,
                phone,
                pin,
                postalCode,
                price,
                product,
                sex,
                street,
                timezone,
                unit,
                url,
                username,
                uuid);
        }
    }
}

