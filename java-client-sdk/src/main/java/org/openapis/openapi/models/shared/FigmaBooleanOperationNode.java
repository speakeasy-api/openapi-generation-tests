/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class FigmaBooleanOperationNode {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("booleanOperation")
    private Optional<String> booleanOperation;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("children")
    private Optional<? extends List<FigmaSubcanvasNode>> children;

    @JsonCreator
    public FigmaBooleanOperationNode(
            @JsonProperty("booleanOperation") Optional<String> booleanOperation,
            @JsonProperty("children") Optional<? extends List<FigmaSubcanvasNode>> children) {
        Utils.checkNotNull(booleanOperation, "booleanOperation");
        Utils.checkNotNull(children, "children");
        this.booleanOperation = booleanOperation;
        this.children = children;
    }
    
    public FigmaBooleanOperationNode() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> booleanOperation() {
        return booleanOperation;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<FigmaSubcanvasNode>> children() {
        return (Optional<List<FigmaSubcanvasNode>>) children;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public FigmaBooleanOperationNode withBooleanOperation(String booleanOperation) {
        Utils.checkNotNull(booleanOperation, "booleanOperation");
        this.booleanOperation = Optional.ofNullable(booleanOperation);
        return this;
    }

    public FigmaBooleanOperationNode withBooleanOperation(Optional<String> booleanOperation) {
        Utils.checkNotNull(booleanOperation, "booleanOperation");
        this.booleanOperation = booleanOperation;
        return this;
    }

    public FigmaBooleanOperationNode withChildren(List<FigmaSubcanvasNode> children) {
        Utils.checkNotNull(children, "children");
        this.children = Optional.ofNullable(children);
        return this;
    }

    public FigmaBooleanOperationNode withChildren(Optional<? extends List<FigmaSubcanvasNode>> children) {
        Utils.checkNotNull(children, "children");
        this.children = children;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FigmaBooleanOperationNode other = (FigmaBooleanOperationNode) o;
        return 
            Objects.deepEquals(this.booleanOperation, other.booleanOperation) &&
            Objects.deepEquals(this.children, other.children);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            booleanOperation,
            children);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FigmaBooleanOperationNode.class,
                "booleanOperation", booleanOperation,
                "children", children);
    }
    
    public final static class Builder {
 
        private Optional<String> booleanOperation = Optional.empty();
 
        private Optional<? extends List<FigmaSubcanvasNode>> children = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder booleanOperation(String booleanOperation) {
            Utils.checkNotNull(booleanOperation, "booleanOperation");
            this.booleanOperation = Optional.ofNullable(booleanOperation);
            return this;
        }

        public Builder booleanOperation(Optional<String> booleanOperation) {
            Utils.checkNotNull(booleanOperation, "booleanOperation");
            this.booleanOperation = booleanOperation;
            return this;
        }

        public Builder children(List<FigmaSubcanvasNode> children) {
            Utils.checkNotNull(children, "children");
            this.children = Optional.ofNullable(children);
            return this;
        }

        public Builder children(Optional<? extends List<FigmaSubcanvasNode>> children) {
            Utils.checkNotNull(children, "children");
            this.children = children;
            return this;
        }
        
        public FigmaBooleanOperationNode build() {
            return new FigmaBooleanOperationNode(
                booleanOperation,
                children);
        }
    }
}

