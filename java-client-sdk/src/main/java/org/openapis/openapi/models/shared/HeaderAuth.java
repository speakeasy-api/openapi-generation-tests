/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.Utils;

public class HeaderAuth {

    @JsonProperty("expectedValue")
    private String expectedValue;

    @JsonProperty("headerName")
    private String headerName;

    @JsonCreator
    public HeaderAuth(
            @JsonProperty("expectedValue") String expectedValue,
            @JsonProperty("headerName") String headerName) {
        Utils.checkNotNull(expectedValue, "expectedValue");
        Utils.checkNotNull(headerName, "headerName");
        this.expectedValue = expectedValue;
        this.headerName = headerName;
    }

    @JsonIgnore
    public String expectedValue() {
        return expectedValue;
    }

    @JsonIgnore
    public String headerName() {
        return headerName;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public HeaderAuth withExpectedValue(String expectedValue) {
        Utils.checkNotNull(expectedValue, "expectedValue");
        this.expectedValue = expectedValue;
        return this;
    }

    public HeaderAuth withHeaderName(String headerName) {
        Utils.checkNotNull(headerName, "headerName");
        this.headerName = headerName;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HeaderAuth other = (HeaderAuth) o;
        return 
            java.util.Objects.deepEquals(this.expectedValue, other.expectedValue) &&
            java.util.Objects.deepEquals(this.headerName, other.headerName);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            expectedValue,
            headerName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HeaderAuth.class,
                "expectedValue", expectedValue,
                "headerName", headerName);
    }
    
    public final static class Builder {
 
        private String expectedValue;
 
        private String headerName;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder expectedValue(String expectedValue) {
            Utils.checkNotNull(expectedValue, "expectedValue");
            this.expectedValue = expectedValue;
            return this;
        }

        public Builder headerName(String headerName) {
            Utils.checkNotNull(headerName, "headerName");
            this.headerName = headerName;
            return this;
        }
        
        public HeaderAuth build() {
            return new HeaderAuth(
                expectedValue,
                headerName);
        }
    }
}

