/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.Utils;
/**
 * HeartbeatEvent - Represents a single heartbeat event
 */

public class HeartbeatEvent implements RichStream {

    @JsonProperty("data")
    private String data;

    @JsonProperty("event")
    private String event;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("retry")
    private Optional<? extends Long> retry;

    @JsonCreator
    public HeartbeatEvent(
            @JsonProperty("data") String data,
            @JsonProperty("retry") Optional<? extends Long> retry) {
        Utils.checkNotNull(data, "data");
        Utils.checkNotNull(retry, "retry");
        this.data = data;
        this.event = Builder._SINGLETON_VALUE_Event.value();
        this.retry = retry;
    }
    
    public HeartbeatEvent(
            String data) {
        this(data, Optional.empty());
    }

    @JsonIgnore
    public String data() {
        return data;
    }

    @JsonIgnore
    @Override
    public java.lang.String event() {
        return Utils.discriminatorToString(event);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> retry() {
        return (Optional<Long>) retry;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public HeartbeatEvent withData(String data) {
        Utils.checkNotNull(data, "data");
        this.data = data;
        return this;
    }

    public HeartbeatEvent withRetry(long retry) {
        Utils.checkNotNull(retry, "retry");
        this.retry = Optional.ofNullable(retry);
        return this;
    }

    public HeartbeatEvent withRetry(Optional<? extends Long> retry) {
        Utils.checkNotNull(retry, "retry");
        this.retry = retry;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HeartbeatEvent other = (HeartbeatEvent) o;
        return 
            java.util.Objects.deepEquals(this.data, other.data) &&
            java.util.Objects.deepEquals(this.event, other.event) &&
            java.util.Objects.deepEquals(this.retry, other.retry);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            data,
            event,
            retry);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HeartbeatEvent.class,
                "data", data,
                "event", event,
                "retry", retry);
    }
    
    public final static class Builder {
 
        private String data;
 
        private Optional<? extends Long> retry = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder data(String data) {
            Utils.checkNotNull(data, "data");
            this.data = data;
            return this;
        }

        public Builder retry(long retry) {
            Utils.checkNotNull(retry, "retry");
            this.retry = Optional.ofNullable(retry);
            return this;
        }

        public Builder retry(Optional<? extends Long> retry) {
            Utils.checkNotNull(retry, "retry");
            this.retry = retry;
            return this;
        }
        
        public HeartbeatEvent build() {
            return new HeartbeatEvent(
                data,
                retry);
        }

        private static final LazySingletonValue<String> _SINGLETON_VALUE_Event =
                new LazySingletonValue<>(
                        "event",
                        "\"heartbeat\"",
                        new TypeReference<String>() {});
    }
}

