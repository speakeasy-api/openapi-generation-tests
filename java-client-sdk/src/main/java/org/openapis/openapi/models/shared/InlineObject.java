/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class InlineObject {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inline_name")
    private Optional<? extends String> inlineName;

    public InlineObject(
            @JsonProperty("inline_name") Optional<? extends String> inlineName) {
        Utils.checkNotNull(inlineName, "inlineName");
        this.inlineName = inlineName;
    }

    public Optional<? extends String> inlineName() {
        return inlineName;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public InlineObject withInlineName(String inlineName) {
        Utils.checkNotNull(inlineName, "inlineName");
        this.inlineName = Optional.ofNullable(inlineName);
        return this;
    }

    public InlineObject withInlineName(Optional<? extends String> inlineName) {
        Utils.checkNotNull(inlineName, "inlineName");
        this.inlineName = inlineName;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InlineObject other = (InlineObject) o;
        return 
            java.util.Objects.deepEquals(this.inlineName, other.inlineName);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            inlineName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InlineObject.class,
                "inlineName", inlineName);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> inlineName = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder inlineName(String inlineName) {
            Utils.checkNotNull(inlineName, "inlineName");
            this.inlineName = Optional.ofNullable(inlineName);
            return this;
        }

        public Builder inlineName(Optional<? extends String> inlineName) {
            Utils.checkNotNull(inlineName, "inlineName");
            this.inlineName = inlineName;
            return this;
        }
        
        public InlineObject build() {
            return new InlineObject(
                inlineName);
        }
    }
}

