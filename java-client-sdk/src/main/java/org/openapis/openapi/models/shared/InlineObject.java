/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class InlineObject {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inline_name")
    private Optional<String> inlineName;

    @JsonCreator
    public InlineObject(
            @JsonProperty("inline_name") Optional<String> inlineName) {
        Utils.checkNotNull(inlineName, "inlineName");
        this.inlineName = inlineName;
    }
    
    public InlineObject() {
        this(Optional.empty());
    }

    @JsonIgnore
    public Optional<String> inlineName() {
        return inlineName;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public InlineObject withInlineName(String inlineName) {
        Utils.checkNotNull(inlineName, "inlineName");
        this.inlineName = Optional.ofNullable(inlineName);
        return this;
    }

    public InlineObject withInlineName(Optional<String> inlineName) {
        Utils.checkNotNull(inlineName, "inlineName");
        this.inlineName = inlineName;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InlineObject other = (InlineObject) o;
        return 
            Objects.deepEquals(this.inlineName, other.inlineName);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            inlineName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InlineObject.class,
                "inlineName", inlineName);
    }
    
    public final static class Builder {
 
        private Optional<String> inlineName = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder inlineName(String inlineName) {
            Utils.checkNotNull(inlineName, "inlineName");
            this.inlineName = Optional.ofNullable(inlineName);
            return this;
        }

        public Builder inlineName(Optional<String> inlineName) {
            Utils.checkNotNull(inlineName, "inlineName");
            this.inlineName = inlineName;
            return this;
        }
        
        public InlineObject build() {
            return new InlineObject(
                inlineName);
        }
    }
}

