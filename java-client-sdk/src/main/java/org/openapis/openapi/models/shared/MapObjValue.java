/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class MapObjValue {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("json")
    private Optional<? extends Map<String, SimpleObject>> json;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("required")
    private Optional<? extends Object> required;

    @JsonCreator
    public MapObjValue(
            @JsonProperty("json") Optional<? extends Map<String, SimpleObject>> json,
            @JsonProperty("required") Optional<? extends Object> required) {
        Utils.checkNotNull(json, "json");
        Utils.checkNotNull(required, "required");
        this.json = json;
        this.required = required;
    }
    
    public MapObjValue() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, SimpleObject>> json() {
        return (Optional<Map<String, SimpleObject>>) json;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Object> required() {
        return (Optional<Object>) required;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public MapObjValue withJson(Map<String, SimpleObject> json) {
        Utils.checkNotNull(json, "json");
        this.json = Optional.ofNullable(json);
        return this;
    }

    public MapObjValue withJson(Optional<? extends Map<String, SimpleObject>> json) {
        Utils.checkNotNull(json, "json");
        this.json = json;
        return this;
    }

    public MapObjValue withRequired(Object required) {
        Utils.checkNotNull(required, "required");
        this.required = Optional.ofNullable(required);
        return this;
    }

    public MapObjValue withRequired(Optional<? extends Object> required) {
        Utils.checkNotNull(required, "required");
        this.required = required;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MapObjValue other = (MapObjValue) o;
        return 
            Objects.deepEquals(this.json, other.json) &&
            Objects.deepEquals(this.required, other.required);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            json,
            required);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MapObjValue.class,
                "json", json,
                "required", required);
    }
    
    public final static class Builder {
 
        private Optional<? extends Map<String, SimpleObject>> json = Optional.empty();
 
        private Optional<? extends Object> required = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder json(Map<String, SimpleObject> json) {
            Utils.checkNotNull(json, "json");
            this.json = Optional.ofNullable(json);
            return this;
        }

        public Builder json(Optional<? extends Map<String, SimpleObject>> json) {
            Utils.checkNotNull(json, "json");
            this.json = json;
            return this;
        }

        public Builder required(Object required) {
            Utils.checkNotNull(required, "required");
            this.required = Optional.ofNullable(required);
            return this;
        }

        public Builder required(Optional<? extends Object> required) {
            Utils.checkNotNull(required, "required");
            this.required = required;
            return this;
        }
        
        public MapObjValue build() {
            return new MapObjValue(
                json,
                required);
        }
    }
}

