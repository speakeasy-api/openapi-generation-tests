/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import org.openapis.openapi.utils.Utils;


public class NestedArrayOfDiscriminatedUnions {

    @JsonProperty("nestedArray")
    private List<List<StronglyTypedOneOfObject>> nestedArray;

    @JsonCreator
    public NestedArrayOfDiscriminatedUnions(
            @JsonProperty("nestedArray") List<List<StronglyTypedOneOfObject>> nestedArray) {
        Utils.checkNotNull(nestedArray, "nestedArray");
        this.nestedArray = nestedArray;
    }

    @JsonIgnore
    public List<List<StronglyTypedOneOfObject>> nestedArray() {
        return nestedArray;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public NestedArrayOfDiscriminatedUnions withNestedArray(List<List<StronglyTypedOneOfObject>> nestedArray) {
        Utils.checkNotNull(nestedArray, "nestedArray");
        this.nestedArray = nestedArray;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NestedArrayOfDiscriminatedUnions other = (NestedArrayOfDiscriminatedUnions) o;
        return 
            Objects.deepEquals(this.nestedArray, other.nestedArray);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            nestedArray);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NestedArrayOfDiscriminatedUnions.class,
                "nestedArray", nestedArray);
    }
    
    public final static class Builder {
 
        private List<List<StronglyTypedOneOfObject>> nestedArray;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder nestedArray(List<List<StronglyTypedOneOfObject>> nestedArray) {
            Utils.checkNotNull(nestedArray, "nestedArray");
            this.nestedArray = nestedArray;
            return this;
        }
        
        public NestedArrayOfDiscriminatedUnions build() {
            return new NestedArrayOfDiscriminatedUnions(
                nestedArray);
        }
    }
}

