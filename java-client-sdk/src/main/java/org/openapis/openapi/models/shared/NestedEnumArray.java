/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class NestedEnumArray {

    @SpeakeasyMetadata("form:name=enums")
    private List<Enum> enums;

    @SpeakeasyMetadata("form:name=tags")
    private String tags;

    @JsonCreator
    public NestedEnumArray(
            List<Enum> enums,
            String tags) {
        Utils.checkNotNull(enums, "enums");
        Utils.checkNotNull(tags, "tags");
        this.enums = enums;
        this.tags = tags;
    }

    @JsonIgnore
    public List<Enum> enums() {
        return enums;
    }

    @JsonIgnore
    public String tags() {
        return tags;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public NestedEnumArray withEnums(List<Enum> enums) {
        Utils.checkNotNull(enums, "enums");
        this.enums = enums;
        return this;
    }

    public NestedEnumArray withTags(String tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NestedEnumArray other = (NestedEnumArray) o;
        return 
            Objects.deepEquals(this.enums, other.enums) &&
            Objects.deepEquals(this.tags, other.tags);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            enums,
            tags);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NestedEnumArray.class,
                "enums", enums,
                "tags", tags);
    }
    
    public final static class Builder {
 
        private List<Enum> enums;
 
        private String tags;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder enums(List<Enum> enums) {
            Utils.checkNotNull(enums, "enums");
            this.enums = enums;
            return this;
        }

        public Builder tags(String tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }
        
        public NestedEnumArray build() {
            return new NestedEnumArray(
                enums,
                tags);
        }
    }
}

