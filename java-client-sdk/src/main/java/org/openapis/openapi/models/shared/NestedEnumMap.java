/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class NestedEnumMap {

    @SpeakeasyMetadata("form:name=enums,json")
    private Map<String, Enum> enums;

    @JsonCreator
    public NestedEnumMap(
            Map<String, Enum> enums) {
        enums = Utils.emptyMapIfNull(enums);
        this.enums = enums;
    }

    @JsonIgnore
    public Map<String, Enum> enums() {
        return enums;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public NestedEnumMap withEnums(Map<String, Enum> enums) {
        Utils.checkNotNull(enums, "enums");
        this.enums = enums;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NestedEnumMap other = (NestedEnumMap) o;
        return 
            Objects.deepEquals(this.enums, other.enums);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            enums);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NestedEnumMap.class,
                "enums", enums);
    }
    
    public final static class Builder {
 
        private Map<String, Enum> enums;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder enums(Map<String, Enum> enums) {
            Utils.checkNotNull(enums, "enums");
            this.enums = enums;
            return this;
        }
        
        public NestedEnumMap build() {
            return new NestedEnumMap(
                enums);
        }
    }
}

