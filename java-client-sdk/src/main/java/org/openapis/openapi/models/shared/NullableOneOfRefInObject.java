/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

public class NullableOneOfRefInObject {

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("NullableOneOfOne")
    private Optional<? extends TypedObject1> nullableOneOfOne;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("NullableOneOfTwo")
    private Optional<? extends NullableOneOfTwo> nullableOneOfTwo;

    @JsonProperty("OneOfOne")
    private OneOfOne oneOfOne;

    @JsonCreator
    public NullableOneOfRefInObject(
            @JsonProperty("NullableOneOfOne") Optional<? extends TypedObject1> nullableOneOfOne,
            @JsonProperty("NullableOneOfTwo") Optional<? extends NullableOneOfTwo> nullableOneOfTwo,
            @JsonProperty("OneOfOne") OneOfOne oneOfOne) {
        Utils.checkNotNull(nullableOneOfOne, "nullableOneOfOne");
        Utils.checkNotNull(nullableOneOfTwo, "nullableOneOfTwo");
        Utils.checkNotNull(oneOfOne, "oneOfOne");
        this.nullableOneOfOne = nullableOneOfOne;
        this.nullableOneOfTwo = nullableOneOfTwo;
        this.oneOfOne = oneOfOne;
    }
    
    public NullableOneOfRefInObject(
            OneOfOne oneOfOne) {
        this(Optional.empty(), Optional.empty(), oneOfOne);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TypedObject1> nullableOneOfOne() {
        return (Optional<TypedObject1>) nullableOneOfOne;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<NullableOneOfTwo> nullableOneOfTwo() {
        return (Optional<NullableOneOfTwo>) nullableOneOfTwo;
    }

    @JsonIgnore
    public OneOfOne oneOfOne() {
        return oneOfOne;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public NullableOneOfRefInObject withNullableOneOfOne(TypedObject1 nullableOneOfOne) {
        Utils.checkNotNull(nullableOneOfOne, "nullableOneOfOne");
        this.nullableOneOfOne = Optional.ofNullable(nullableOneOfOne);
        return this;
    }

    public NullableOneOfRefInObject withNullableOneOfOne(Optional<? extends TypedObject1> nullableOneOfOne) {
        Utils.checkNotNull(nullableOneOfOne, "nullableOneOfOne");
        this.nullableOneOfOne = nullableOneOfOne;
        return this;
    }

    public NullableOneOfRefInObject withNullableOneOfTwo(NullableOneOfTwo nullableOneOfTwo) {
        Utils.checkNotNull(nullableOneOfTwo, "nullableOneOfTwo");
        this.nullableOneOfTwo = Optional.ofNullable(nullableOneOfTwo);
        return this;
    }

    public NullableOneOfRefInObject withNullableOneOfTwo(Optional<? extends NullableOneOfTwo> nullableOneOfTwo) {
        Utils.checkNotNull(nullableOneOfTwo, "nullableOneOfTwo");
        this.nullableOneOfTwo = nullableOneOfTwo;
        return this;
    }

    public NullableOneOfRefInObject withOneOfOne(OneOfOne oneOfOne) {
        Utils.checkNotNull(oneOfOne, "oneOfOne");
        this.oneOfOne = oneOfOne;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NullableOneOfRefInObject other = (NullableOneOfRefInObject) o;
        return 
            java.util.Objects.deepEquals(this.nullableOneOfOne, other.nullableOneOfOne) &&
            java.util.Objects.deepEquals(this.nullableOneOfTwo, other.nullableOneOfTwo) &&
            java.util.Objects.deepEquals(this.oneOfOne, other.oneOfOne);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            nullableOneOfOne,
            nullableOneOfTwo,
            oneOfOne);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NullableOneOfRefInObject.class,
                "nullableOneOfOne", nullableOneOfOne,
                "nullableOneOfTwo", nullableOneOfTwo,
                "oneOfOne", oneOfOne);
    }
    
    public final static class Builder {
 
        private Optional<? extends TypedObject1> nullableOneOfOne = Optional.empty();
 
        private Optional<? extends NullableOneOfTwo> nullableOneOfTwo = Optional.empty();
 
        private OneOfOne oneOfOne;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder nullableOneOfOne(TypedObject1 nullableOneOfOne) {
            Utils.checkNotNull(nullableOneOfOne, "nullableOneOfOne");
            this.nullableOneOfOne = Optional.ofNullable(nullableOneOfOne);
            return this;
        }

        public Builder nullableOneOfOne(Optional<? extends TypedObject1> nullableOneOfOne) {
            Utils.checkNotNull(nullableOneOfOne, "nullableOneOfOne");
            this.nullableOneOfOne = nullableOneOfOne;
            return this;
        }

        public Builder nullableOneOfTwo(NullableOneOfTwo nullableOneOfTwo) {
            Utils.checkNotNull(nullableOneOfTwo, "nullableOneOfTwo");
            this.nullableOneOfTwo = Optional.ofNullable(nullableOneOfTwo);
            return this;
        }

        public Builder nullableOneOfTwo(Optional<? extends NullableOneOfTwo> nullableOneOfTwo) {
            Utils.checkNotNull(nullableOneOfTwo, "nullableOneOfTwo");
            this.nullableOneOfTwo = nullableOneOfTwo;
            return this;
        }

        public Builder oneOfOne(OneOfOne oneOfOne) {
            Utils.checkNotNull(oneOfOne, "oneOfOne");
            this.oneOfOne = oneOfOne;
            return this;
        }
        
        public NullableOneOfRefInObject build() {
            return new NullableOneOfRefInObject(
                nullableOneOfOne,
                nullableOneOfTwo,
                oneOfOne);
        }
    }
}

