/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class NullableOneOfTypeInObject {

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("NullableOneOfOne")
    private Optional<Boolean> nullableOneOfOne;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("NullableOneOfTwo")
    private Optional<? extends NullableOneOfTypeInObjectNullableOneOfTwo> nullableOneOfTwo;

    @JsonProperty("OneOfOne")
    private boolean oneOfOne;

    @JsonCreator
    public NullableOneOfTypeInObject(
            @JsonProperty("NullableOneOfOne") Optional<Boolean> nullableOneOfOne,
            @JsonProperty("NullableOneOfTwo") Optional<? extends NullableOneOfTypeInObjectNullableOneOfTwo> nullableOneOfTwo,
            @JsonProperty("OneOfOne") boolean oneOfOne) {
        Utils.checkNotNull(nullableOneOfOne, "nullableOneOfOne");
        Utils.checkNotNull(nullableOneOfTwo, "nullableOneOfTwo");
        Utils.checkNotNull(oneOfOne, "oneOfOne");
        this.nullableOneOfOne = nullableOneOfOne;
        this.nullableOneOfTwo = nullableOneOfTwo;
        this.oneOfOne = oneOfOne;
    }
    
    public NullableOneOfTypeInObject(
            boolean oneOfOne) {
        this(Optional.empty(), Optional.empty(), oneOfOne);
    }

    @JsonIgnore
    public Optional<Boolean> nullableOneOfOne() {
        return nullableOneOfOne;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<NullableOneOfTypeInObjectNullableOneOfTwo> nullableOneOfTwo() {
        return (Optional<NullableOneOfTypeInObjectNullableOneOfTwo>) nullableOneOfTwo;
    }

    @JsonIgnore
    public boolean oneOfOne() {
        return oneOfOne;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public NullableOneOfTypeInObject withNullableOneOfOne(boolean nullableOneOfOne) {
        Utils.checkNotNull(nullableOneOfOne, "nullableOneOfOne");
        this.nullableOneOfOne = Optional.ofNullable(nullableOneOfOne);
        return this;
    }

    public NullableOneOfTypeInObject withNullableOneOfOne(Optional<Boolean> nullableOneOfOne) {
        Utils.checkNotNull(nullableOneOfOne, "nullableOneOfOne");
        this.nullableOneOfOne = nullableOneOfOne;
        return this;
    }

    public NullableOneOfTypeInObject withNullableOneOfTwo(NullableOneOfTypeInObjectNullableOneOfTwo nullableOneOfTwo) {
        Utils.checkNotNull(nullableOneOfTwo, "nullableOneOfTwo");
        this.nullableOneOfTwo = Optional.ofNullable(nullableOneOfTwo);
        return this;
    }

    public NullableOneOfTypeInObject withNullableOneOfTwo(Optional<? extends NullableOneOfTypeInObjectNullableOneOfTwo> nullableOneOfTwo) {
        Utils.checkNotNull(nullableOneOfTwo, "nullableOneOfTwo");
        this.nullableOneOfTwo = nullableOneOfTwo;
        return this;
    }

    public NullableOneOfTypeInObject withOneOfOne(boolean oneOfOne) {
        Utils.checkNotNull(oneOfOne, "oneOfOne");
        this.oneOfOne = oneOfOne;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NullableOneOfTypeInObject other = (NullableOneOfTypeInObject) o;
        return 
            Objects.deepEquals(this.nullableOneOfOne, other.nullableOneOfOne) &&
            Objects.deepEquals(this.nullableOneOfTwo, other.nullableOneOfTwo) &&
            Objects.deepEquals(this.oneOfOne, other.oneOfOne);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            nullableOneOfOne,
            nullableOneOfTwo,
            oneOfOne);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NullableOneOfTypeInObject.class,
                "nullableOneOfOne", nullableOneOfOne,
                "nullableOneOfTwo", nullableOneOfTwo,
                "oneOfOne", oneOfOne);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> nullableOneOfOne = Optional.empty();
 
        private Optional<? extends NullableOneOfTypeInObjectNullableOneOfTwo> nullableOneOfTwo = Optional.empty();
 
        private Boolean oneOfOne;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder nullableOneOfOne(boolean nullableOneOfOne) {
            Utils.checkNotNull(nullableOneOfOne, "nullableOneOfOne");
            this.nullableOneOfOne = Optional.ofNullable(nullableOneOfOne);
            return this;
        }

        public Builder nullableOneOfOne(Optional<Boolean> nullableOneOfOne) {
            Utils.checkNotNull(nullableOneOfOne, "nullableOneOfOne");
            this.nullableOneOfOne = nullableOneOfOne;
            return this;
        }

        public Builder nullableOneOfTwo(NullableOneOfTypeInObjectNullableOneOfTwo nullableOneOfTwo) {
            Utils.checkNotNull(nullableOneOfTwo, "nullableOneOfTwo");
            this.nullableOneOfTwo = Optional.ofNullable(nullableOneOfTwo);
            return this;
        }

        public Builder nullableOneOfTwo(Optional<? extends NullableOneOfTypeInObjectNullableOneOfTwo> nullableOneOfTwo) {
            Utils.checkNotNull(nullableOneOfTwo, "nullableOneOfTwo");
            this.nullableOneOfTwo = nullableOneOfTwo;
            return this;
        }

        public Builder oneOfOne(boolean oneOfOne) {
            Utils.checkNotNull(oneOfOne, "oneOfOne");
            this.oneOfOne = oneOfOne;
            return this;
        }
        
        public NullableOneOfTypeInObject build() {
            return new NullableOneOfTypeInObject(
                nullableOneOfOne,
                nullableOneOfTwo,
                oneOfOne);
        }
    }
}

