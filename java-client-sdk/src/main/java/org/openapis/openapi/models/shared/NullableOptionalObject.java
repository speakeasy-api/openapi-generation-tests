/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

public class NullableOptionalObject {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("optional")
    private Optional<? extends String> optional;

    @JsonProperty("required")
    private long required;

    @JsonCreator
    public NullableOptionalObject(
            @JsonProperty("optional") Optional<? extends String> optional,
            @JsonProperty("required") long required) {
        Utils.checkNotNull(optional, "optional");
        Utils.checkNotNull(required, "required");
        this.optional = optional;
        this.required = required;
    }
    
    public NullableOptionalObject(
            long required) {
        this(Optional.empty(), required);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> optional() {
        return (Optional<String>) optional;
    }

    @JsonIgnore
    public long required() {
        return required;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public NullableOptionalObject withOptional(String optional) {
        Utils.checkNotNull(optional, "optional");
        this.optional = Optional.ofNullable(optional);
        return this;
    }

    public NullableOptionalObject withOptional(Optional<? extends String> optional) {
        Utils.checkNotNull(optional, "optional");
        this.optional = optional;
        return this;
    }

    public NullableOptionalObject withRequired(long required) {
        Utils.checkNotNull(required, "required");
        this.required = required;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NullableOptionalObject other = (NullableOptionalObject) o;
        return 
            java.util.Objects.deepEquals(this.optional, other.optional) &&
            java.util.Objects.deepEquals(this.required, other.required);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            optional,
            required);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NullableOptionalObject.class,
                "optional", optional,
                "required", required);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> optional = Optional.empty();
 
        private Long required;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder optional(String optional) {
            Utils.checkNotNull(optional, "optional");
            this.optional = Optional.ofNullable(optional);
            return this;
        }

        public Builder optional(Optional<? extends String> optional) {
            Utils.checkNotNull(optional, "optional");
            this.optional = optional;
            return this;
        }

        public Builder required(long required) {
            Utils.checkNotNull(required, "required");
            this.required = required;
            return this;
        }
        
        public NullableOptionalObject build() {
            return new NullableOptionalObject(
                optional,
                required);
        }
    }
}

