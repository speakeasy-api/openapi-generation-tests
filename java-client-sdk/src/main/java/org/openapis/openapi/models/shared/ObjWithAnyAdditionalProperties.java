/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class ObjWithAnyAdditionalProperties {

    @JsonIgnore
    private Map<String, Object> additionalProperties;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("normalField")
    private Optional<String> normalField;

    @JsonCreator
    public ObjWithAnyAdditionalProperties(
            @JsonProperty("normalField") Optional<String> normalField) {
        Utils.checkNotNull(normalField, "normalField");
        this.additionalProperties = new HashMap<>();
        this.normalField = normalField;
    }
    
    public ObjWithAnyAdditionalProperties() {
        this(Optional.empty());
    }

    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return additionalProperties;
    }

    @JsonIgnore
    public Optional<String> normalField() {
        return normalField;
    }

    public final static Builder builder() {
        return new Builder();
    }

    @JsonAnySetter
    public ObjWithAnyAdditionalProperties withAdditionalProperty(String key, Object value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalProperties.put(key, value); 
        return this;
    }
    
    public ObjWithAnyAdditionalProperties withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }

    public ObjWithAnyAdditionalProperties withNormalField(String normalField) {
        Utils.checkNotNull(normalField, "normalField");
        this.normalField = Optional.ofNullable(normalField);
        return this;
    }

    public ObjWithAnyAdditionalProperties withNormalField(Optional<String> normalField) {
        Utils.checkNotNull(normalField, "normalField");
        this.normalField = normalField;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ObjWithAnyAdditionalProperties other = (ObjWithAnyAdditionalProperties) o;
        return 
            Objects.deepEquals(this.additionalProperties, other.additionalProperties) &&
            Objects.deepEquals(this.normalField, other.normalField);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            additionalProperties,
            normalField);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ObjWithAnyAdditionalProperties.class,
                "additionalProperties", additionalProperties,
                "normalField", normalField);
    }
    
    public final static class Builder {
 
        private Map<String, Object> additionalProperties = new HashMap<>();
 
        private Optional<String> normalField = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder additionalProperty(String key, Object value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalProperties.put(key, value);
            return this;
        }

        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }

        public Builder normalField(String normalField) {
            Utils.checkNotNull(normalField, "normalField");
            this.normalField = Optional.ofNullable(normalField);
            return this;
        }

        public Builder normalField(Optional<String> normalField) {
            Utils.checkNotNull(normalField, "normalField");
            this.normalField = normalField;
            return this;
        }
        
        public ObjWithAnyAdditionalProperties build() {
            return new ObjWithAnyAdditionalProperties(
                normalField)
                .withAdditionalProperties(additionalProperties);
        }
    }
}

