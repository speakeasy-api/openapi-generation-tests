/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.openapis.openapi.utils.Utils;


public class ObjWithObjAdditionalProperties {

    @JsonProperty("AdditionalProperties")
    private List<Long> additionalProperties;

    @JsonIgnore
    private Map<String, SimpleObject> additionalPropertiesT;

    @JsonProperty("datetime")
    private OffsetDateTime datetime;

    @JsonCreator
    public ObjWithObjAdditionalProperties(
            @JsonProperty("AdditionalProperties") List<Long> additionalProperties,
            @JsonProperty("datetime") OffsetDateTime datetime) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        Utils.checkNotNull(datetime, "datetime");
        this.additionalProperties = additionalProperties;
        this.additionalPropertiesT = new HashMap<>();
        this.datetime = datetime;
    }

    @JsonIgnore
    public List<Long> additionalProperties() {
        return additionalProperties;
    }

    @JsonAnyGetter
    public Map<String, SimpleObject> additionalPropertiesT() {
        return additionalPropertiesT;
    }

    @JsonIgnore
    public OffsetDateTime datetime() {
        return datetime;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ObjWithObjAdditionalProperties withAdditionalProperties(List<Long> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }

    @JsonAnySetter
    public ObjWithObjAdditionalProperties withAdditionalProperty(String key, SimpleObject value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalPropertiesT.put(key, value); 
        return this;
    }
    
    public ObjWithObjAdditionalProperties withAdditionalPropertiesT(Map<String, SimpleObject> additionalPropertiesT) {
        Utils.checkNotNull(additionalPropertiesT, "additionalPropertiesT");
        this.additionalPropertiesT = additionalPropertiesT;
        return this;
    }

    public ObjWithObjAdditionalProperties withDatetime(OffsetDateTime datetime) {
        Utils.checkNotNull(datetime, "datetime");
        this.datetime = datetime;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ObjWithObjAdditionalProperties other = (ObjWithObjAdditionalProperties) o;
        return 
            Objects.deepEquals(this.additionalProperties, other.additionalProperties) &&
            Objects.deepEquals(this.additionalPropertiesT, other.additionalPropertiesT) &&
            Objects.deepEquals(this.datetime, other.datetime);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            additionalProperties,
            additionalPropertiesT,
            datetime);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ObjWithObjAdditionalProperties.class,
                "additionalProperties", additionalProperties,
                "additionalPropertiesT", additionalPropertiesT,
                "datetime", datetime);
    }
    
    public final static class Builder {
 
        private List<Long> additionalProperties;
 
        private Map<String, SimpleObject> additionalPropertiesT = new HashMap<>();
 
        private OffsetDateTime datetime;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder additionalProperties(List<Long> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }

        public Builder additionalProperty(String key, SimpleObject value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalPropertiesT.put(key, value);
            return this;
        }

        public Builder additionalPropertiesT(Map<String, SimpleObject> additionalPropertiesT) {
            Utils.checkNotNull(additionalPropertiesT, "additionalPropertiesT");
            this.additionalPropertiesT = additionalPropertiesT;
            return this;
        }

        public Builder datetime(OffsetDateTime datetime) {
            Utils.checkNotNull(datetime, "datetime");
            this.datetime = datetime;
            return this;
        }
        
        public ObjWithObjAdditionalProperties build() {
            return new ObjWithObjAdditionalProperties(
                additionalProperties,
                datetime)
                .withAdditionalPropertiesT(additionalPropertiesT);
        }
    }
}

