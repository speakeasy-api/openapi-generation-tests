/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class ObjWithOptionalProperties {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("optInt")
    private Optional<Long> optInt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("optStr")
    private Optional<String> optStr;

    @JsonCreator
    public ObjWithOptionalProperties(
            @JsonProperty("optInt") Optional<Long> optInt,
            @JsonProperty("optStr") Optional<String> optStr) {
        Utils.checkNotNull(optInt, "optInt");
        Utils.checkNotNull(optStr, "optStr");
        this.optInt = optInt;
        this.optStr = optStr;
    }
    
    public ObjWithOptionalProperties() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Long> optInt() {
        return optInt;
    }

    @JsonIgnore
    public Optional<String> optStr() {
        return optStr;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ObjWithOptionalProperties withOptInt(long optInt) {
        Utils.checkNotNull(optInt, "optInt");
        this.optInt = Optional.ofNullable(optInt);
        return this;
    }

    public ObjWithOptionalProperties withOptInt(Optional<Long> optInt) {
        Utils.checkNotNull(optInt, "optInt");
        this.optInt = optInt;
        return this;
    }

    public ObjWithOptionalProperties withOptStr(String optStr) {
        Utils.checkNotNull(optStr, "optStr");
        this.optStr = Optional.ofNullable(optStr);
        return this;
    }

    public ObjWithOptionalProperties withOptStr(Optional<String> optStr) {
        Utils.checkNotNull(optStr, "optStr");
        this.optStr = optStr;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ObjWithOptionalProperties other = (ObjWithOptionalProperties) o;
        return 
            Objects.deepEquals(this.optInt, other.optInt) &&
            Objects.deepEquals(this.optStr, other.optStr);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            optInt,
            optStr);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ObjWithOptionalProperties.class,
                "optInt", optInt,
                "optStr", optStr);
    }
    
    public final static class Builder {
 
        private Optional<Long> optInt = Optional.empty();
 
        private Optional<String> optStr = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder optInt(long optInt) {
            Utils.checkNotNull(optInt, "optInt");
            this.optInt = Optional.ofNullable(optInt);
            return this;
        }

        public Builder optInt(Optional<Long> optInt) {
            Utils.checkNotNull(optInt, "optInt");
            this.optInt = optInt;
            return this;
        }

        public Builder optStr(String optStr) {
            Utils.checkNotNull(optStr, "optStr");
            this.optStr = Optional.ofNullable(optStr);
            return this;
        }

        public Builder optStr(Optional<String> optStr) {
            Utils.checkNotNull(optStr, "optStr");
            this.optStr = optStr;
            return this;
        }
        
        public ObjWithOptionalProperties build() {
            return new ObjWithOptionalProperties(
                optInt,
                optStr);
        }
    }
}

