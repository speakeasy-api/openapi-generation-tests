/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class ObjWithZeroValueComplexTypePtrs {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bigint")
    private Optional<? extends BigInteger> bigint;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bigintStr")
    @JsonFormat(shape = JsonFormat.Shape.STRING)
    private Optional<? extends BigInteger> bigintStr;

    /**
     * A date property.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date")
    private Optional<? extends LocalDate> date;

    /**
     * A date-time property.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dateTime")
    private Optional<? extends OffsetDateTime> dateTime;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("decimal")
    private Optional<? extends BigDecimal> decimal;

    public ObjWithZeroValueComplexTypePtrs(
            @JsonProperty("bigint") Optional<? extends BigInteger> bigint,
            @JsonProperty("bigintStr") Optional<? extends BigInteger> bigintStr,
            @JsonProperty("date") Optional<? extends LocalDate> date,
            @JsonProperty("dateTime") Optional<? extends OffsetDateTime> dateTime,
            @JsonProperty("decimal") Optional<? extends BigDecimal> decimal) {
        Utils.checkNotNull(bigint, "bigint");
        Utils.checkNotNull(bigintStr, "bigintStr");
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(dateTime, "dateTime");
        Utils.checkNotNull(decimal, "decimal");
        this.bigint = bigint;
        this.bigintStr = bigintStr;
        this.date = date;
        this.dateTime = dateTime;
        this.decimal = decimal;
    }

    public Optional<? extends BigInteger> bigint() {
        return bigint;
    }

    public Optional<? extends BigInteger> bigintStr() {
        return bigintStr;
    }

    /**
     * A date property.
     */
    public Optional<? extends LocalDate> date() {
        return date;
    }

    /**
     * A date-time property.
     */
    public Optional<? extends OffsetDateTime> dateTime() {
        return dateTime;
    }

    public Optional<? extends BigDecimal> decimal() {
        return decimal;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ObjWithZeroValueComplexTypePtrs withBigint(BigInteger bigint) {
        Utils.checkNotNull(bigint, "bigint");
        this.bigint = Optional.ofNullable(bigint);
        return this;
    }

    public ObjWithZeroValueComplexTypePtrs withBigint(long bigint) {
        this.bigint = Optional.of(BigInteger.valueOf(bigint));
        return this;
    }

    public ObjWithZeroValueComplexTypePtrs withBigint(Optional<? extends BigInteger> bigint) {
        Utils.checkNotNull(bigint, "bigint");
        this.bigint = bigint;
        return this;
    }

    public ObjWithZeroValueComplexTypePtrs withBigintStr(BigInteger bigintStr) {
        Utils.checkNotNull(bigintStr, "bigintStr");
        this.bigintStr = Optional.ofNullable(bigintStr);
        return this;
    }

    public ObjWithZeroValueComplexTypePtrs withBigintStr(long bigintStr) {
        this.bigintStr = Optional.of(BigInteger.valueOf(bigintStr));
        return this;
    }

    public ObjWithZeroValueComplexTypePtrs withBigintStr(Optional<? extends BigInteger> bigintStr) {
        Utils.checkNotNull(bigintStr, "bigintStr");
        this.bigintStr = bigintStr;
        return this;
    }

    /**
     * A date property.
     */
    public ObjWithZeroValueComplexTypePtrs withDate(LocalDate date) {
        Utils.checkNotNull(date, "date");
        this.date = Optional.ofNullable(date);
        return this;
    }

    /**
     * A date property.
     */
    public ObjWithZeroValueComplexTypePtrs withDate(Optional<? extends LocalDate> date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    /**
     * A date-time property.
     */
    public ObjWithZeroValueComplexTypePtrs withDateTime(OffsetDateTime dateTime) {
        Utils.checkNotNull(dateTime, "dateTime");
        this.dateTime = Optional.ofNullable(dateTime);
        return this;
    }

    /**
     * A date-time property.
     */
    public ObjWithZeroValueComplexTypePtrs withDateTime(Optional<? extends OffsetDateTime> dateTime) {
        Utils.checkNotNull(dateTime, "dateTime");
        this.dateTime = dateTime;
        return this;
    }

    public ObjWithZeroValueComplexTypePtrs withDecimal(BigDecimal decimal) {
        Utils.checkNotNull(decimal, "decimal");
        this.decimal = Optional.ofNullable(decimal);
        return this;
    }

    public ObjWithZeroValueComplexTypePtrs withDecimal(double decimal) {
        this.decimal = Optional.of(BigDecimal.valueOf(decimal));
        return this;
    }

    public ObjWithZeroValueComplexTypePtrs withDecimal(Optional<? extends BigDecimal> decimal) {
        Utils.checkNotNull(decimal, "decimal");
        this.decimal = decimal;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ObjWithZeroValueComplexTypePtrs other = (ObjWithZeroValueComplexTypePtrs) o;
        return 
            java.util.Objects.deepEquals(this.bigint, other.bigint) &&
            java.util.Objects.deepEquals(this.bigintStr, other.bigintStr) &&
            java.util.Objects.deepEquals(this.date, other.date) &&
            java.util.Objects.deepEquals(this.dateTime, other.dateTime) &&
            java.util.Objects.deepEquals(this.decimal, other.decimal);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            bigint,
            bigintStr,
            date,
            dateTime,
            decimal);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ObjWithZeroValueComplexTypePtrs.class,
                "bigint", bigint,
                "bigintStr", bigintStr,
                "date", date,
                "dateTime", dateTime,
                "decimal", decimal);
    }
    
    public final static class Builder {
 
        private Optional<? extends BigInteger> bigint = Optional.empty();
 
        private Optional<? extends BigInteger> bigintStr = Optional.empty();
 
        private Optional<? extends LocalDate> date = Optional.empty();
 
        private Optional<? extends OffsetDateTime> dateTime = Optional.empty();
 
        private Optional<? extends BigDecimal> decimal = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder bigint(BigInteger bigint) {
            Utils.checkNotNull(bigint, "bigint");
            this.bigint = Optional.ofNullable(bigint);
            return this;
        }

        public Builder bigint(long bigint) {
            this.bigint = Optional.of(BigInteger.valueOf(bigint));
            return this;
        }

        public Builder bigint(Optional<? extends BigInteger> bigint) {
            Utils.checkNotNull(bigint, "bigint");
            this.bigint = bigint;
            return this;
        }

        public Builder bigintStr(BigInteger bigintStr) {
            Utils.checkNotNull(bigintStr, "bigintStr");
            this.bigintStr = Optional.ofNullable(bigintStr);
            return this;
        }

        public Builder bigintStr(long bigintStr) {
            this.bigintStr = Optional.of(BigInteger.valueOf(bigintStr));
            return this;
        }

        public Builder bigintStr(Optional<? extends BigInteger> bigintStr) {
            Utils.checkNotNull(bigintStr, "bigintStr");
            this.bigintStr = bigintStr;
            return this;
        }

        /**
         * A date property.
         */
        public Builder date(LocalDate date) {
            Utils.checkNotNull(date, "date");
            this.date = Optional.ofNullable(date);
            return this;
        }

        /**
         * A date property.
         */
        public Builder date(Optional<? extends LocalDate> date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }

        /**
         * A date-time property.
         */
        public Builder dateTime(OffsetDateTime dateTime) {
            Utils.checkNotNull(dateTime, "dateTime");
            this.dateTime = Optional.ofNullable(dateTime);
            return this;
        }

        /**
         * A date-time property.
         */
        public Builder dateTime(Optional<? extends OffsetDateTime> dateTime) {
            Utils.checkNotNull(dateTime, "dateTime");
            this.dateTime = dateTime;
            return this;
        }

        public Builder decimal(BigDecimal decimal) {
            Utils.checkNotNull(decimal, "decimal");
            this.decimal = Optional.ofNullable(decimal);
            return this;
        }

        public Builder decimal(double decimal) {
            this.decimal = Optional.of(BigDecimal.valueOf(decimal));
            return this;
        }

        public Builder decimal(Optional<? extends BigDecimal> decimal) {
            Utils.checkNotNull(decimal, "decimal");
            this.decimal = decimal;
            return this;
        }
        
        public ObjWithZeroValueComplexTypePtrs build() {
            return new ObjWithZeroValueComplexTypePtrs(
                bigint,
                bigintStr,
                date,
                dateTime,
                decimal);
        }
    }
}

