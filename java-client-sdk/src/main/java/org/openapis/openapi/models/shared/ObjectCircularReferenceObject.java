/* 
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

public class ObjectCircularReferenceObject {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("circular")
    private Optional<? extends ObjectCircularReferenceObject> circular;

    @JsonCreator
    public ObjectCircularReferenceObject(
            @JsonProperty("circular") Optional<? extends ObjectCircularReferenceObject> circular) {
        Utils.checkNotNull(circular, "circular");
        this.circular = circular;
    }
    
    public ObjectCircularReferenceObject() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ObjectCircularReferenceObject> circular() {
        return (Optional<ObjectCircularReferenceObject>) circular;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ObjectCircularReferenceObject withCircular(ObjectCircularReferenceObject circular) {
        Utils.checkNotNull(circular, "circular");
        this.circular = Optional.ofNullable(circular);
        return this;
    }

    public ObjectCircularReferenceObject withCircular(Optional<? extends ObjectCircularReferenceObject> circular) {
        Utils.checkNotNull(circular, "circular");
        this.circular = circular;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ObjectCircularReferenceObject other = (ObjectCircularReferenceObject) o;
        return 
            java.util.Objects.deepEquals(this.circular, other.circular);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            circular);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ObjectCircularReferenceObject.class,
                "circular", circular);
    }
    
    public final static class Builder {
 
        private Optional<? extends ObjectCircularReferenceObject> circular = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder circular(ObjectCircularReferenceObject circular) {
            Utils.checkNotNull(circular, "circular");
            this.circular = Optional.ofNullable(circular);
            return this;
        }

        public Builder circular(Optional<? extends ObjectCircularReferenceObject> circular) {
            Utils.checkNotNull(circular, "circular");
            this.circular = circular;
            return this;
        }
        
        public ObjectCircularReferenceObject build() {
            return new ObjectCircularReferenceObject(
                circular);
        }
    }
}

