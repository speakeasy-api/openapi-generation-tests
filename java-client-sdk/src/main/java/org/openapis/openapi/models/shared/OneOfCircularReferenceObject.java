/* 
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.Utils;

public class OneOfCircularReferenceObject {

    @JsonProperty("child")
    private Child child;

    @JsonCreator
    public OneOfCircularReferenceObject(
            @JsonProperty("child") Child child) {
        Utils.checkNotNull(child, "child");
        this.child = child;
    }

    @JsonIgnore
    public Child child() {
        return child;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public OneOfCircularReferenceObject withChild(Child child) {
        Utils.checkNotNull(child, "child");
        this.child = child;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OneOfCircularReferenceObject other = (OneOfCircularReferenceObject) o;
        return 
            java.util.Objects.deepEquals(this.child, other.child);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            child);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OneOfCircularReferenceObject.class,
                "child", child);
    }
    
    public final static class Builder {
 
        private Child child;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder child(Child child) {
            Utils.checkNotNull(child, "child");
            this.child = child;
            return this;
        }
        
        public OneOfCircularReferenceObject build() {
            return new OneOfCircularReferenceObject(
                child);
        }
    }
}

