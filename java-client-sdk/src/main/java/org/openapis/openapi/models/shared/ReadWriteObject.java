/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.Utils;


public class ReadWriteObject {

    @JsonProperty("num1")
    private long num1;

    @JsonProperty("num2")
    private long num2;

    @JsonProperty("num3")
    private long num3;

    @JsonCreator
    public ReadWriteObject(
            @JsonProperty("num1") long num1,
            @JsonProperty("num2") long num2,
            @JsonProperty("num3") long num3) {
        Utils.checkNotNull(num1, "num1");
        Utils.checkNotNull(num2, "num2");
        Utils.checkNotNull(num3, "num3");
        this.num1 = num1;
        this.num2 = num2;
        this.num3 = num3;
    }

    @JsonIgnore
    public long num1() {
        return num1;
    }

    @JsonIgnore
    public long num2() {
        return num2;
    }

    @JsonIgnore
    public long num3() {
        return num3;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ReadWriteObject withNum1(long num1) {
        Utils.checkNotNull(num1, "num1");
        this.num1 = num1;
        return this;
    }

    public ReadWriteObject withNum2(long num2) {
        Utils.checkNotNull(num2, "num2");
        this.num2 = num2;
        return this;
    }

    public ReadWriteObject withNum3(long num3) {
        Utils.checkNotNull(num3, "num3");
        this.num3 = num3;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReadWriteObject other = (ReadWriteObject) o;
        return 
            java.util.Objects.deepEquals(this.num1, other.num1) &&
            java.util.Objects.deepEquals(this.num2, other.num2) &&
            java.util.Objects.deepEquals(this.num3, other.num3);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            num1,
            num2,
            num3);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ReadWriteObject.class,
                "num1", num1,
                "num2", num2,
                "num3", num3);
    }
    
    public final static class Builder {
 
        private Long num1;
 
        private Long num2;
 
        private Long num3;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder num1(long num1) {
            Utils.checkNotNull(num1, "num1");
            this.num1 = num1;
            return this;
        }

        public Builder num2(long num2) {
            Utils.checkNotNull(num2, "num2");
            this.num2 = num2;
            return this;
        }

        public Builder num3(long num3) {
            Utils.checkNotNull(num3, "num3");
            this.num3 = num3;
            return this;
        }
        
        public ReadWriteObject build() {
            return new ReadWriteObject(
                num1,
                num2,
                num3);
        }
    }
}

