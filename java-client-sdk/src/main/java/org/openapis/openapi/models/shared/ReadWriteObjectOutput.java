/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.utils.Utils;


public class ReadWriteObjectOutput {

    @JsonProperty("num3")
    private long num3;

    @JsonProperty("sum")
    private long sum;

    @JsonCreator
    public ReadWriteObjectOutput(
            @JsonProperty("num3") long num3,
            @JsonProperty("sum") long sum) {
        Utils.checkNotNull(num3, "num3");
        Utils.checkNotNull(sum, "sum");
        this.num3 = num3;
        this.sum = sum;
    }

    @JsonIgnore
    public long num3() {
        return num3;
    }

    @JsonIgnore
    public long sum() {
        return sum;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ReadWriteObjectOutput withNum3(long num3) {
        Utils.checkNotNull(num3, "num3");
        this.num3 = num3;
        return this;
    }

    public ReadWriteObjectOutput withSum(long sum) {
        Utils.checkNotNull(sum, "sum");
        this.sum = sum;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReadWriteObjectOutput other = (ReadWriteObjectOutput) o;
        return 
            Objects.deepEquals(this.num3, other.num3) &&
            Objects.deepEquals(this.sum, other.sum);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            num3,
            sum);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ReadWriteObjectOutput.class,
                "num3", num3,
                "sum", sum);
    }
    
    public final static class Builder {
 
        private Long num3;
 
        private Long sum;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder num3(long num3) {
            Utils.checkNotNull(num3, "num3");
            this.num3 = num3;
            return this;
        }

        public Builder sum(long sum) {
            Utils.checkNotNull(sum, "sum");
            this.sum = sum;
            return this;
        }
        
        public ReadWriteObjectOutput build() {
            return new ReadWriteObjectOutput(
                num3,
                sum);
        }
    }
}

