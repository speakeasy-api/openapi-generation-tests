/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class RefQueryParamObj {

    @SpeakeasyMetadata("queryParam:name=bool")
    private boolean bool;

    @SpeakeasyMetadata("queryParam:name=int")
    private long int_;

    @SpeakeasyMetadata("queryParam:name=num")
    private double num;

    @SpeakeasyMetadata("queryParam:name=str")
    private String str;

    public RefQueryParamObj(
            boolean bool,
            long int_,
            double num,
            String str) {
        Utils.checkNotNull(bool, "bool");
        Utils.checkNotNull(int_, "int_");
        Utils.checkNotNull(num, "num");
        Utils.checkNotNull(str, "str");
        this.bool = bool;
        this.int_ = int_;
        this.num = num;
        this.str = str;
    }

    public boolean bool() {
        return bool;
    }

    public long int_() {
        return int_;
    }

    public double num() {
        return num;
    }

    public String str() {
        return str;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RefQueryParamObj withBool(boolean bool) {
        Utils.checkNotNull(bool, "bool");
        this.bool = bool;
        return this;
    }

    public RefQueryParamObj withInt(long int_) {
        Utils.checkNotNull(int_, "int_");
        this.int_ = int_;
        return this;
    }

    public RefQueryParamObj withNum(double num) {
        Utils.checkNotNull(num, "num");
        this.num = num;
        return this;
    }

    public RefQueryParamObj withStr(String str) {
        Utils.checkNotNull(str, "str");
        this.str = str;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RefQueryParamObj other = (RefQueryParamObj) o;
        return 
            java.util.Objects.deepEquals(this.bool, other.bool) &&
            java.util.Objects.deepEquals(this.int_, other.int_) &&
            java.util.Objects.deepEquals(this.num, other.num) &&
            java.util.Objects.deepEquals(this.str, other.str);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            bool,
            int_,
            num,
            str);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RefQueryParamObj.class,
                "bool", bool,
                "int_", int_,
                "num", num,
                "str", str);
    }
    
    public final static class Builder {
 
        private Boolean bool;
 
        private Long int_;
 
        private Double num;
 
        private String str;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder bool(boolean bool) {
            Utils.checkNotNull(bool, "bool");
            this.bool = bool;
            return this;
        }

        public Builder int_(long int_) {
            Utils.checkNotNull(int_, "int_");
            this.int_ = int_;
            return this;
        }

        public Builder num(double num) {
            Utils.checkNotNull(num, "num");
            this.num = num;
            return this;
        }

        public Builder str(String str) {
            Utils.checkNotNull(str, "str");
            this.str = str;
            return this;
        }
        
        public RefQueryParamObj build() {
            return new RefQueryParamObj(
                bool,
                int_,
                num,
                str);
        }
    }
}

