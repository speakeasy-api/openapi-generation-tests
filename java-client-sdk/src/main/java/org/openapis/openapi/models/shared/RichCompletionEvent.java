/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.Utils;

/**
 * RichCompletionEvent - Represents a single event in a completion stream
 */

public class RichCompletionEvent implements RichStream {

    @JsonProperty("data")
    private RichCompletionEventData data;

    @JsonProperty("event")
    private String event;

    @JsonProperty("id")
    private String id;

    @JsonCreator
    public RichCompletionEvent(
            @JsonProperty("data") RichCompletionEventData data,
            @JsonProperty("id") String id) {
        Utils.checkNotNull(data, "data");
        Utils.checkNotNull(id, "id");
        this.data = data;
        this.event = Builder._SINGLETON_VALUE_Event.value();
        this.id = id;
    }

    @JsonIgnore
    public RichCompletionEventData data() {
        return data;
    }

    @JsonIgnore
    @Override
    public String event() {
        return Utils.discriminatorToString(event);
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RichCompletionEvent withData(RichCompletionEventData data) {
        Utils.checkNotNull(data, "data");
        this.data = data;
        return this;
    }

    public RichCompletionEvent withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RichCompletionEvent other = (RichCompletionEvent) o;
        return 
            Objects.deepEquals(this.data, other.data) &&
            Objects.deepEquals(this.event, other.event) &&
            Objects.deepEquals(this.id, other.id);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            data,
            event,
            id);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RichCompletionEvent.class,
                "data", data,
                "event", event,
                "id", id);
    }
    
    public final static class Builder {
 
        private RichCompletionEventData data;
 
        private String id;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder data(RichCompletionEventData data) {
            Utils.checkNotNull(data, "data");
            this.data = data;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }
        
        public RichCompletionEvent build() {
            return new RichCompletionEvent(
                data,
                id);
        }

        private static final LazySingletonValue<String> _SINGLETON_VALUE_Event =
                new LazySingletonValue<>(
                        "event",
                        "\"completion\"",
                        new TypeReference<String>() {});
    }
}

