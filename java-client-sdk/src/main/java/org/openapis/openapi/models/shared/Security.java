/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class Security {

    @SpeakeasyMetadata("security:scheme=true,type=apiKey,subtype=header,name=Authorization")
    private Optional<String> apiKeyAuth;

    @SpeakeasyMetadata("security:scheme=true,type=oauth2,name=Authorization")
    private Optional<String> oauth2;

    @JsonCreator
    public Security(
            Optional<String> apiKeyAuth,
            Optional<String> oauth2) {
        Utils.checkNotNull(apiKeyAuth, "apiKeyAuth");
        Utils.checkNotNull(oauth2, "oauth2");
        this.apiKeyAuth = apiKeyAuth;
        this.oauth2 = oauth2;
    }
    
    public Security() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> apiKeyAuth() {
        return apiKeyAuth;
    }

    @JsonIgnore
    public Optional<String> oauth2() {
        return oauth2;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Security withApiKeyAuth(String apiKeyAuth) {
        Utils.checkNotNull(apiKeyAuth, "apiKeyAuth");
        this.apiKeyAuth = Optional.ofNullable(apiKeyAuth);
        return this;
    }

    public Security withApiKeyAuth(Optional<String> apiKeyAuth) {
        Utils.checkNotNull(apiKeyAuth, "apiKeyAuth");
        this.apiKeyAuth = apiKeyAuth;
        return this;
    }

    public Security withOauth2(String oauth2) {
        Utils.checkNotNull(oauth2, "oauth2");
        this.oauth2 = Optional.ofNullable(oauth2);
        return this;
    }

    public Security withOauth2(Optional<String> oauth2) {
        Utils.checkNotNull(oauth2, "oauth2");
        this.oauth2 = oauth2;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Security other = (Security) o;
        return 
            Objects.deepEquals(this.apiKeyAuth, other.apiKeyAuth) &&
            Objects.deepEquals(this.oauth2, other.oauth2);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiKeyAuth,
            oauth2);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Security.class,
                "apiKeyAuth", apiKeyAuth,
                "oauth2", oauth2);
    }
    
    public final static class Builder {
 
        private Optional<String> apiKeyAuth = Optional.empty();
 
        private Optional<String> oauth2 = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder apiKeyAuth(String apiKeyAuth) {
            Utils.checkNotNull(apiKeyAuth, "apiKeyAuth");
            this.apiKeyAuth = Optional.ofNullable(apiKeyAuth);
            return this;
        }

        public Builder apiKeyAuth(Optional<String> apiKeyAuth) {
            Utils.checkNotNull(apiKeyAuth, "apiKeyAuth");
            this.apiKeyAuth = apiKeyAuth;
            return this;
        }

        public Builder oauth2(String oauth2) {
            Utils.checkNotNull(oauth2, "oauth2");
            this.oauth2 = Optional.ofNullable(oauth2);
            return this;
        }

        public Builder oauth2(Optional<String> oauth2) {
            Utils.checkNotNull(oauth2, "oauth2");
            this.oauth2 = oauth2;
            return this;
        }
        
        public Security build() {
            return new Security(
                apiKeyAuth,
                oauth2);
        }
    }
}

