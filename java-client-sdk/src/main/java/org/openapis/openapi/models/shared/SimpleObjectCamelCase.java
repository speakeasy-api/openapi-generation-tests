/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

/**
 * SimpleObjectCamelCase - A simple object that uses all our supported primitive types and enums and has optional properties.
 * https://docs.speakeasyapi.dev - A link to the external docs.
 */

public class SimpleObjectCamelCase {

    /**
     * An any property.
     */
    @JsonProperty("any_val")
    private java.lang.Object anyVal;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bigint_str_val")
    @JsonFormat(shape = JsonFormat.Shape.STRING)
    private Optional<? extends BigInteger> bigintStrVal;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bigint_val")
    private Optional<? extends BigInteger> bigintVal;

    /**
     * An optional boolean property.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bool_opt_val")
    private Optional<? extends Boolean> boolOptVal;

    /**
     * A boolean property.
     */
    @JsonProperty("bool_val")
    private boolean boolVal;

    /**
     * A date-time property.
     */
    @JsonProperty("date_time_val")
    private OffsetDateTime dateTimeVal;

    /**
     * A date property.
     */
    @JsonProperty("date_val")
    private LocalDate dateVal;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("decimal_val")
    private Optional<? extends BigDecimal> decimalVal;

    /**
     * A string based enum
     */
    @JsonProperty("enum_val")
    private Enum enumVal;

    /**
     * A float32 property.
     */
    @JsonProperty("float32_val")
    private float float32Val;

    /**
     * An int32 enum property.
     */
    @JsonProperty("int32_enum_val")
    private Int32EnumVal int32EnumVal;

    /**
     * An int32 property.
     */
    @JsonProperty("int32_val")
    private int int32Val;

    /**
     * An integer enum property.
     */
    @JsonProperty("int_enum_val")
    private IntEnumVal intEnumVal;

    /**
     * An optional integer property will be null for tests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("int_opt_null_val")
    private Optional<? extends Long> intOptNullVal;

    /**
     * An integer property.
     */
    @JsonProperty("int_val")
    private long intVal;

    /**
     * An optional number property will be null for tests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("num_opt_null_val")
    private Optional<? extends Double> numOptNullVal;

    /**
     * A number property.
     */
    @JsonProperty("num_val")
    private double numVal;

    /**
     * An optional string property.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("str_opt_val")
    private Optional<? extends String> strOptVal;

    /**
     * A string property.
     */
    @JsonProperty("str_val")
    private String strVal;

    public SimpleObjectCamelCase(
            @JsonProperty("any_val") java.lang.Object anyVal,
            @JsonProperty("bigint_str_val") Optional<? extends BigInteger> bigintStrVal,
            @JsonProperty("bigint_val") Optional<? extends BigInteger> bigintVal,
            @JsonProperty("bool_opt_val") Optional<? extends Boolean> boolOptVal,
            @JsonProperty("bool_val") boolean boolVal,
            @JsonProperty("date_time_val") OffsetDateTime dateTimeVal,
            @JsonProperty("date_val") LocalDate dateVal,
            @JsonProperty("decimal_val") Optional<? extends BigDecimal> decimalVal,
            @JsonProperty("enum_val") Enum enumVal,
            @JsonProperty("float32_val") float float32Val,
            @JsonProperty("int32_enum_val") Int32EnumVal int32EnumVal,
            @JsonProperty("int32_val") int int32Val,
            @JsonProperty("int_enum_val") IntEnumVal intEnumVal,
            @JsonProperty("int_opt_null_val") Optional<? extends Long> intOptNullVal,
            @JsonProperty("int_val") long intVal,
            @JsonProperty("num_opt_null_val") Optional<? extends Double> numOptNullVal,
            @JsonProperty("num_val") double numVal,
            @JsonProperty("str_opt_val") Optional<? extends String> strOptVal,
            @JsonProperty("str_val") String strVal) {
        Utils.checkNotNull(anyVal, "anyVal");
        Utils.checkNotNull(bigintStrVal, "bigintStrVal");
        Utils.checkNotNull(bigintVal, "bigintVal");
        Utils.checkNotNull(boolOptVal, "boolOptVal");
        Utils.checkNotNull(boolVal, "boolVal");
        Utils.checkNotNull(dateTimeVal, "dateTimeVal");
        Utils.checkNotNull(dateVal, "dateVal");
        Utils.checkNotNull(decimalVal, "decimalVal");
        Utils.checkNotNull(enumVal, "enumVal");
        Utils.checkNotNull(float32Val, "float32Val");
        Utils.checkNotNull(int32EnumVal, "int32EnumVal");
        Utils.checkNotNull(int32Val, "int32Val");
        Utils.checkNotNull(intEnumVal, "intEnumVal");
        Utils.checkNotNull(intOptNullVal, "intOptNullVal");
        Utils.checkNotNull(intVal, "intVal");
        Utils.checkNotNull(numOptNullVal, "numOptNullVal");
        Utils.checkNotNull(numVal, "numVal");
        Utils.checkNotNull(strOptVal, "strOptVal");
        Utils.checkNotNull(strVal, "strVal");
        this.anyVal = anyVal;
        this.bigintStrVal = bigintStrVal;
        this.bigintVal = bigintVal;
        this.boolOptVal = boolOptVal;
        this.boolVal = boolVal;
        this.dateTimeVal = dateTimeVal;
        this.dateVal = dateVal;
        this.decimalVal = decimalVal;
        this.enumVal = enumVal;
        this.float32Val = float32Val;
        this.int32EnumVal = int32EnumVal;
        this.int32Val = int32Val;
        this.intEnumVal = intEnumVal;
        this.intOptNullVal = intOptNullVal;
        this.intVal = intVal;
        this.numOptNullVal = numOptNullVal;
        this.numVal = numVal;
        this.strOptVal = strOptVal;
        this.strVal = strVal;
    }

    /**
     * An any property.
     */
    public java.lang.Object anyVal() {
        return anyVal;
    }

    public Optional<? extends BigInteger> bigintStrVal() {
        return bigintStrVal;
    }

    public Optional<? extends BigInteger> bigintVal() {
        return bigintVal;
    }

    /**
     * An optional boolean property.
     */
    public Optional<? extends Boolean> boolOptVal() {
        return boolOptVal;
    }

    /**
     * A boolean property.
     */
    public boolean boolVal() {
        return boolVal;
    }

    /**
     * A date-time property.
     */
    public OffsetDateTime dateTimeVal() {
        return dateTimeVal;
    }

    /**
     * A date property.
     */
    public LocalDate dateVal() {
        return dateVal;
    }

    public Optional<? extends BigDecimal> decimalVal() {
        return decimalVal;
    }

    /**
     * A string based enum
     */
    public Enum enumVal() {
        return enumVal;
    }

    /**
     * A float32 property.
     */
    public float float32Val() {
        return float32Val;
    }

    /**
     * An int32 enum property.
     */
    public Int32EnumVal int32EnumVal() {
        return int32EnumVal;
    }

    /**
     * An int32 property.
     */
    public int int32Val() {
        return int32Val;
    }

    /**
     * An integer enum property.
     */
    public IntEnumVal intEnumVal() {
        return intEnumVal;
    }

    /**
     * An optional integer property will be null for tests.
     */
    public Optional<? extends Long> intOptNullVal() {
        return intOptNullVal;
    }

    /**
     * An integer property.
     */
    public long intVal() {
        return intVal;
    }

    /**
     * An optional number property will be null for tests.
     */
    public Optional<? extends Double> numOptNullVal() {
        return numOptNullVal;
    }

    /**
     * A number property.
     */
    public double numVal() {
        return numVal;
    }

    /**
     * An optional string property.
     */
    public Optional<? extends String> strOptVal() {
        return strOptVal;
    }

    /**
     * A string property.
     */
    public String strVal() {
        return strVal;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * An any property.
     */
    public SimpleObjectCamelCase withAnyVal(java.lang.Object anyVal) {
        Utils.checkNotNull(anyVal, "anyVal");
        this.anyVal = anyVal;
        return this;
    }

    public SimpleObjectCamelCase withBigintStrVal(BigInteger bigintStrVal) {
        Utils.checkNotNull(bigintStrVal, "bigintStrVal");
        this.bigintStrVal = Optional.ofNullable(bigintStrVal);
        return this;
    }

    public SimpleObjectCamelCase withBigintStrVal(long bigintStrVal) {
        this.bigintStrVal = Optional.of(BigInteger.valueOf(bigintStrVal));
        return this;
    }

    public SimpleObjectCamelCase withBigintStrVal(Optional<? extends BigInteger> bigintStrVal) {
        Utils.checkNotNull(bigintStrVal, "bigintStrVal");
        this.bigintStrVal = bigintStrVal;
        return this;
    }

    public SimpleObjectCamelCase withBigintVal(BigInteger bigintVal) {
        Utils.checkNotNull(bigintVal, "bigintVal");
        this.bigintVal = Optional.ofNullable(bigintVal);
        return this;
    }

    public SimpleObjectCamelCase withBigintVal(long bigintVal) {
        this.bigintVal = Optional.of(BigInteger.valueOf(bigintVal));
        return this;
    }

    public SimpleObjectCamelCase withBigintVal(Optional<? extends BigInteger> bigintVal) {
        Utils.checkNotNull(bigintVal, "bigintVal");
        this.bigintVal = bigintVal;
        return this;
    }

    /**
     * An optional boolean property.
     */
    public SimpleObjectCamelCase withBoolOptVal(boolean boolOptVal) {
        Utils.checkNotNull(boolOptVal, "boolOptVal");
        this.boolOptVal = Optional.ofNullable(boolOptVal);
        return this;
    }

    /**
     * An optional boolean property.
     */
    public SimpleObjectCamelCase withBoolOptVal(Optional<? extends Boolean> boolOptVal) {
        Utils.checkNotNull(boolOptVal, "boolOptVal");
        this.boolOptVal = boolOptVal;
        return this;
    }

    /**
     * A boolean property.
     */
    public SimpleObjectCamelCase withBoolVal(boolean boolVal) {
        Utils.checkNotNull(boolVal, "boolVal");
        this.boolVal = boolVal;
        return this;
    }

    /**
     * A date-time property.
     */
    public SimpleObjectCamelCase withDateTimeVal(OffsetDateTime dateTimeVal) {
        Utils.checkNotNull(dateTimeVal, "dateTimeVal");
        this.dateTimeVal = dateTimeVal;
        return this;
    }

    /**
     * A date property.
     */
    public SimpleObjectCamelCase withDateVal(LocalDate dateVal) {
        Utils.checkNotNull(dateVal, "dateVal");
        this.dateVal = dateVal;
        return this;
    }

    public SimpleObjectCamelCase withDecimalVal(BigDecimal decimalVal) {
        Utils.checkNotNull(decimalVal, "decimalVal");
        this.decimalVal = Optional.ofNullable(decimalVal);
        return this;
    }

    public SimpleObjectCamelCase withDecimalVal(double decimalVal) {
        this.decimalVal = Optional.of(BigDecimal.valueOf(decimalVal));
        return this;
    }

    public SimpleObjectCamelCase withDecimalVal(Optional<? extends BigDecimal> decimalVal) {
        Utils.checkNotNull(decimalVal, "decimalVal");
        this.decimalVal = decimalVal;
        return this;
    }

    /**
     * A string based enum
     */
    public SimpleObjectCamelCase withEnumVal(Enum enumVal) {
        Utils.checkNotNull(enumVal, "enumVal");
        this.enumVal = enumVal;
        return this;
    }

    /**
     * A float32 property.
     */
    public SimpleObjectCamelCase withFloat32Val(float float32Val) {
        Utils.checkNotNull(float32Val, "float32Val");
        this.float32Val = float32Val;
        return this;
    }

    /**
     * An int32 enum property.
     */
    public SimpleObjectCamelCase withInt32EnumVal(Int32EnumVal int32EnumVal) {
        Utils.checkNotNull(int32EnumVal, "int32EnumVal");
        this.int32EnumVal = int32EnumVal;
        return this;
    }

    /**
     * An int32 property.
     */
    public SimpleObjectCamelCase withInt32Val(int int32Val) {
        Utils.checkNotNull(int32Val, "int32Val");
        this.int32Val = int32Val;
        return this;
    }

    /**
     * An integer enum property.
     */
    public SimpleObjectCamelCase withIntEnumVal(IntEnumVal intEnumVal) {
        Utils.checkNotNull(intEnumVal, "intEnumVal");
        this.intEnumVal = intEnumVal;
        return this;
    }

    /**
     * An optional integer property will be null for tests.
     */
    public SimpleObjectCamelCase withIntOptNullVal(long intOptNullVal) {
        Utils.checkNotNull(intOptNullVal, "intOptNullVal");
        this.intOptNullVal = Optional.ofNullable(intOptNullVal);
        return this;
    }

    /**
     * An optional integer property will be null for tests.
     */
    public SimpleObjectCamelCase withIntOptNullVal(Optional<? extends Long> intOptNullVal) {
        Utils.checkNotNull(intOptNullVal, "intOptNullVal");
        this.intOptNullVal = intOptNullVal;
        return this;
    }

    /**
     * An integer property.
     */
    public SimpleObjectCamelCase withIntVal(long intVal) {
        Utils.checkNotNull(intVal, "intVal");
        this.intVal = intVal;
        return this;
    }

    /**
     * An optional number property will be null for tests.
     */
    public SimpleObjectCamelCase withNumOptNullVal(double numOptNullVal) {
        Utils.checkNotNull(numOptNullVal, "numOptNullVal");
        this.numOptNullVal = Optional.ofNullable(numOptNullVal);
        return this;
    }

    /**
     * An optional number property will be null for tests.
     */
    public SimpleObjectCamelCase withNumOptNullVal(Optional<? extends Double> numOptNullVal) {
        Utils.checkNotNull(numOptNullVal, "numOptNullVal");
        this.numOptNullVal = numOptNullVal;
        return this;
    }

    /**
     * A number property.
     */
    public SimpleObjectCamelCase withNumVal(double numVal) {
        Utils.checkNotNull(numVal, "numVal");
        this.numVal = numVal;
        return this;
    }

    /**
     * An optional string property.
     */
    public SimpleObjectCamelCase withStrOptVal(String strOptVal) {
        Utils.checkNotNull(strOptVal, "strOptVal");
        this.strOptVal = Optional.ofNullable(strOptVal);
        return this;
    }

    /**
     * An optional string property.
     */
    public SimpleObjectCamelCase withStrOptVal(Optional<? extends String> strOptVal) {
        Utils.checkNotNull(strOptVal, "strOptVal");
        this.strOptVal = strOptVal;
        return this;
    }

    /**
     * A string property.
     */
    public SimpleObjectCamelCase withStrVal(String strVal) {
        Utils.checkNotNull(strVal, "strVal");
        this.strVal = strVal;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SimpleObjectCamelCase other = (SimpleObjectCamelCase) o;
        return 
            java.util.Objects.deepEquals(this.anyVal, other.anyVal) &&
            java.util.Objects.deepEquals(this.bigintStrVal, other.bigintStrVal) &&
            java.util.Objects.deepEquals(this.bigintVal, other.bigintVal) &&
            java.util.Objects.deepEquals(this.boolOptVal, other.boolOptVal) &&
            java.util.Objects.deepEquals(this.boolVal, other.boolVal) &&
            java.util.Objects.deepEquals(this.dateTimeVal, other.dateTimeVal) &&
            java.util.Objects.deepEquals(this.dateVal, other.dateVal) &&
            java.util.Objects.deepEquals(this.decimalVal, other.decimalVal) &&
            java.util.Objects.deepEquals(this.enumVal, other.enumVal) &&
            java.util.Objects.deepEquals(this.float32Val, other.float32Val) &&
            java.util.Objects.deepEquals(this.int32EnumVal, other.int32EnumVal) &&
            java.util.Objects.deepEquals(this.int32Val, other.int32Val) &&
            java.util.Objects.deepEquals(this.intEnumVal, other.intEnumVal) &&
            java.util.Objects.deepEquals(this.intOptNullVal, other.intOptNullVal) &&
            java.util.Objects.deepEquals(this.intVal, other.intVal) &&
            java.util.Objects.deepEquals(this.numOptNullVal, other.numOptNullVal) &&
            java.util.Objects.deepEquals(this.numVal, other.numVal) &&
            java.util.Objects.deepEquals(this.strOptVal, other.strOptVal) &&
            java.util.Objects.deepEquals(this.strVal, other.strVal);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            anyVal,
            bigintStrVal,
            bigintVal,
            boolOptVal,
            boolVal,
            dateTimeVal,
            dateVal,
            decimalVal,
            enumVal,
            float32Val,
            int32EnumVal,
            int32Val,
            intEnumVal,
            intOptNullVal,
            intVal,
            numOptNullVal,
            numVal,
            strOptVal,
            strVal);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SimpleObjectCamelCase.class,
                "anyVal", anyVal,
                "bigintStrVal", bigintStrVal,
                "bigintVal", bigintVal,
                "boolOptVal", boolOptVal,
                "boolVal", boolVal,
                "dateTimeVal", dateTimeVal,
                "dateVal", dateVal,
                "decimalVal", decimalVal,
                "enumVal", enumVal,
                "float32Val", float32Val,
                "int32EnumVal", int32EnumVal,
                "int32Val", int32Val,
                "intEnumVal", intEnumVal,
                "intOptNullVal", intOptNullVal,
                "intVal", intVal,
                "numOptNullVal", numOptNullVal,
                "numVal", numVal,
                "strOptVal", strOptVal,
                "strVal", strVal);
    }
    
    public final static class Builder {
 
        private java.lang.Object anyVal;
 
        private Optional<? extends BigInteger> bigintStrVal = Optional.empty();
 
        private Optional<? extends BigInteger> bigintVal = Optional.empty();
 
        private Optional<? extends Boolean> boolOptVal = Optional.empty();
 
        private Boolean boolVal;
 
        private OffsetDateTime dateTimeVal;
 
        private LocalDate dateVal;
 
        private Optional<? extends BigDecimal> decimalVal = Optional.empty();
 
        private Enum enumVal;
 
        private Float float32Val;
 
        private Int32EnumVal int32EnumVal;
 
        private Integer int32Val;
 
        private IntEnumVal intEnumVal;
 
        private Optional<? extends Long> intOptNullVal = Optional.empty();
 
        private Long intVal;
 
        private Optional<? extends Double> numOptNullVal = Optional.empty();
 
        private Double numVal;
 
        private Optional<? extends String> strOptVal = Optional.empty();
 
        private String strVal;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * An any property.
         */
        public Builder anyVal(java.lang.Object anyVal) {
            Utils.checkNotNull(anyVal, "anyVal");
            this.anyVal = anyVal;
            return this;
        }

        public Builder bigintStrVal(BigInteger bigintStrVal) {
            Utils.checkNotNull(bigintStrVal, "bigintStrVal");
            this.bigintStrVal = Optional.ofNullable(bigintStrVal);
            return this;
        }

        public Builder bigintStrVal(long bigintStrVal) {
            this.bigintStrVal = Optional.of(BigInteger.valueOf(bigintStrVal));
            return this;
        }

        public Builder bigintStrVal(Optional<? extends BigInteger> bigintStrVal) {
            Utils.checkNotNull(bigintStrVal, "bigintStrVal");
            this.bigintStrVal = bigintStrVal;
            return this;
        }

        public Builder bigintVal(BigInteger bigintVal) {
            Utils.checkNotNull(bigintVal, "bigintVal");
            this.bigintVal = Optional.ofNullable(bigintVal);
            return this;
        }

        public Builder bigintVal(long bigintVal) {
            this.bigintVal = Optional.of(BigInteger.valueOf(bigintVal));
            return this;
        }

        public Builder bigintVal(Optional<? extends BigInteger> bigintVal) {
            Utils.checkNotNull(bigintVal, "bigintVal");
            this.bigintVal = bigintVal;
            return this;
        }

        /**
         * An optional boolean property.
         */
        public Builder boolOptVal(boolean boolOptVal) {
            Utils.checkNotNull(boolOptVal, "boolOptVal");
            this.boolOptVal = Optional.ofNullable(boolOptVal);
            return this;
        }

        /**
         * An optional boolean property.
         */
        public Builder boolOptVal(Optional<? extends Boolean> boolOptVal) {
            Utils.checkNotNull(boolOptVal, "boolOptVal");
            this.boolOptVal = boolOptVal;
            return this;
        }

        /**
         * A boolean property.
         */
        public Builder boolVal(boolean boolVal) {
            Utils.checkNotNull(boolVal, "boolVal");
            this.boolVal = boolVal;
            return this;
        }

        /**
         * A date-time property.
         */
        public Builder dateTimeVal(OffsetDateTime dateTimeVal) {
            Utils.checkNotNull(dateTimeVal, "dateTimeVal");
            this.dateTimeVal = dateTimeVal;
            return this;
        }

        /**
         * A date property.
         */
        public Builder dateVal(LocalDate dateVal) {
            Utils.checkNotNull(dateVal, "dateVal");
            this.dateVal = dateVal;
            return this;
        }

        public Builder decimalVal(BigDecimal decimalVal) {
            Utils.checkNotNull(decimalVal, "decimalVal");
            this.decimalVal = Optional.ofNullable(decimalVal);
            return this;
        }

        public Builder decimalVal(double decimalVal) {
            this.decimalVal = Optional.of(BigDecimal.valueOf(decimalVal));
            return this;
        }

        public Builder decimalVal(Optional<? extends BigDecimal> decimalVal) {
            Utils.checkNotNull(decimalVal, "decimalVal");
            this.decimalVal = decimalVal;
            return this;
        }

        /**
         * A string based enum
         */
        public Builder enumVal(Enum enumVal) {
            Utils.checkNotNull(enumVal, "enumVal");
            this.enumVal = enumVal;
            return this;
        }

        /**
         * A float32 property.
         */
        public Builder float32Val(float float32Val) {
            Utils.checkNotNull(float32Val, "float32Val");
            this.float32Val = float32Val;
            return this;
        }

        /**
         * An int32 enum property.
         */
        public Builder int32EnumVal(Int32EnumVal int32EnumVal) {
            Utils.checkNotNull(int32EnumVal, "int32EnumVal");
            this.int32EnumVal = int32EnumVal;
            return this;
        }

        /**
         * An int32 property.
         */
        public Builder int32Val(int int32Val) {
            Utils.checkNotNull(int32Val, "int32Val");
            this.int32Val = int32Val;
            return this;
        }

        /**
         * An integer enum property.
         */
        public Builder intEnumVal(IntEnumVal intEnumVal) {
            Utils.checkNotNull(intEnumVal, "intEnumVal");
            this.intEnumVal = intEnumVal;
            return this;
        }

        /**
         * An optional integer property will be null for tests.
         */
        public Builder intOptNullVal(long intOptNullVal) {
            Utils.checkNotNull(intOptNullVal, "intOptNullVal");
            this.intOptNullVal = Optional.ofNullable(intOptNullVal);
            return this;
        }

        /**
         * An optional integer property will be null for tests.
         */
        public Builder intOptNullVal(Optional<? extends Long> intOptNullVal) {
            Utils.checkNotNull(intOptNullVal, "intOptNullVal");
            this.intOptNullVal = intOptNullVal;
            return this;
        }

        /**
         * An integer property.
         */
        public Builder intVal(long intVal) {
            Utils.checkNotNull(intVal, "intVal");
            this.intVal = intVal;
            return this;
        }

        /**
         * An optional number property will be null for tests.
         */
        public Builder numOptNullVal(double numOptNullVal) {
            Utils.checkNotNull(numOptNullVal, "numOptNullVal");
            this.numOptNullVal = Optional.ofNullable(numOptNullVal);
            return this;
        }

        /**
         * An optional number property will be null for tests.
         */
        public Builder numOptNullVal(Optional<? extends Double> numOptNullVal) {
            Utils.checkNotNull(numOptNullVal, "numOptNullVal");
            this.numOptNullVal = numOptNullVal;
            return this;
        }

        /**
         * A number property.
         */
        public Builder numVal(double numVal) {
            Utils.checkNotNull(numVal, "numVal");
            this.numVal = numVal;
            return this;
        }

        /**
         * An optional string property.
         */
        public Builder strOptVal(String strOptVal) {
            Utils.checkNotNull(strOptVal, "strOptVal");
            this.strOptVal = Optional.ofNullable(strOptVal);
            return this;
        }

        /**
         * An optional string property.
         */
        public Builder strOptVal(Optional<? extends String> strOptVal) {
            Utils.checkNotNull(strOptVal, "strOptVal");
            this.strOptVal = strOptVal;
            return this;
        }

        /**
         * A string property.
         */
        public Builder strVal(String strVal) {
            Utils.checkNotNull(strVal, "strVal");
            this.strVal = strVal;
            return this;
        }
        
        public SimpleObjectCamelCase build() {
            return new SimpleObjectCamelCase(
                anyVal,
                bigintStrVal,
                bigintVal,
                boolOptVal,
                boolVal,
                dateTimeVal,
                dateVal,
                decimalVal,
                enumVal,
                float32Val,
                int32EnumVal,
                int32Val,
                intEnumVal,
                intOptNullVal,
                intVal,
                numOptNullVal,
                numVal,
                strOptVal,
                strVal);
        }
    }
}

