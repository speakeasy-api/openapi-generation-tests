/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class Slides {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("items")
    private Optional<? extends java.util.List<String>> items;

    @JsonProperty("title")
    private String title;

    @JsonProperty("type")
    private String type;

    @JsonCreator
    public Slides(
            @JsonProperty("items") Optional<? extends java.util.List<String>> items,
            @JsonProperty("title") String title,
            @JsonProperty("type") String type) {
        Utils.checkNotNull(items, "items");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(type, "type");
        this.items = items;
        this.title = title;
        this.type = type;
    }
    
    public Slides(
            String title,
            String type) {
        this(Optional.empty(), title, type);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<String>> items() {
        return (Optional<java.util.List<String>>) items;
    }

    @JsonIgnore
    public String title() {
        return title;
    }

    @JsonIgnore
    public String type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Slides withItems(java.util.List<String> items) {
        Utils.checkNotNull(items, "items");
        this.items = Optional.ofNullable(items);
        return this;
    }

    public Slides withItems(Optional<? extends java.util.List<String>> items) {
        Utils.checkNotNull(items, "items");
        this.items = items;
        return this;
    }

    public Slides withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public Slides withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Slides other = (Slides) o;
        return 
            java.util.Objects.deepEquals(this.items, other.items) &&
            java.util.Objects.deepEquals(this.title, other.title) &&
            java.util.Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            items,
            title,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Slides.class,
                "items", items,
                "title", title,
                "type", type);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<String>> items = Optional.empty();
 
        private String title;
 
        private String type;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder items(java.util.List<String> items) {
            Utils.checkNotNull(items, "items");
            this.items = Optional.ofNullable(items);
            return this;
        }

        public Builder items(Optional<? extends java.util.List<String>> items) {
            Utils.checkNotNull(items, "items");
            this.items = items;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public Slides build() {
            return new Slides(
                items,
                title,
                type);
        }
    }
}

