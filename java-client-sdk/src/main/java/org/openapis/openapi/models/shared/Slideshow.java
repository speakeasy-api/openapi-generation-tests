/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.Utils;


public class Slideshow {

    @JsonProperty("author")
    private String author;

    @JsonProperty("date")
    private String date;

    @JsonProperty("slides")
    private java.util.List<Slides> slides;

    @JsonProperty("title")
    private String title;

    @JsonCreator
    public Slideshow(
            @JsonProperty("author") String author,
            @JsonProperty("date") String date,
            @JsonProperty("slides") java.util.List<Slides> slides,
            @JsonProperty("title") String title) {
        Utils.checkNotNull(author, "author");
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(slides, "slides");
        Utils.checkNotNull(title, "title");
        this.author = author;
        this.date = date;
        this.slides = slides;
        this.title = title;
    }

    @JsonIgnore
    public String author() {
        return author;
    }

    @JsonIgnore
    public String date() {
        return date;
    }

    @JsonIgnore
    public java.util.List<Slides> slides() {
        return slides;
    }

    @JsonIgnore
    public String title() {
        return title;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Slideshow withAuthor(String author) {
        Utils.checkNotNull(author, "author");
        this.author = author;
        return this;
    }

    public Slideshow withDate(String date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    public Slideshow withSlides(java.util.List<Slides> slides) {
        Utils.checkNotNull(slides, "slides");
        this.slides = slides;
        return this;
    }

    public Slideshow withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Slideshow other = (Slideshow) o;
        return 
            java.util.Objects.deepEquals(this.author, other.author) &&
            java.util.Objects.deepEquals(this.date, other.date) &&
            java.util.Objects.deepEquals(this.slides, other.slides) &&
            java.util.Objects.deepEquals(this.title, other.title);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            author,
            date,
            slides,
            title);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Slideshow.class,
                "author", author,
                "date", date,
                "slides", slides,
                "title", title);
    }
    
    public final static class Builder {
 
        private String author;
 
        private String date;
 
        private java.util.List<Slides> slides;
 
        private String title;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder author(String author) {
            Utils.checkNotNull(author, "author");
            this.author = author;
            return this;
        }

        public Builder date(String date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }

        public Builder slides(java.util.List<Slides> slides) {
            Utils.checkNotNull(slides, "slides");
            this.slides = slides;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }
        
        public Slideshow build() {
            return new Slideshow(
                author,
                date,
                slides,
                title);
        }
    }
}

