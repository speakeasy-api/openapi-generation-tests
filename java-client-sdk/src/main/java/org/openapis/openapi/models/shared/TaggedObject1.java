/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.Utils;


public class TaggedObject1 {

    @JsonProperty("imageURL")
    private String imageURL;

    @JsonProperty("tag")
    private Tag tag;

    @JsonCreator
    public TaggedObject1(
            @JsonProperty("imageURL") String imageURL,
            @JsonProperty("tag") Tag tag) {
        Utils.checkNotNull(imageURL, "imageURL");
        Utils.checkNotNull(tag, "tag");
        this.imageURL = imageURL;
        this.tag = tag;
    }

    @JsonIgnore
    public String imageURL() {
        return imageURL;
    }

    @JsonIgnore
    public Tag tag() {
        return tag;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public TaggedObject1 withImageURL(String imageURL) {
        Utils.checkNotNull(imageURL, "imageURL");
        this.imageURL = imageURL;
        return this;
    }

    public TaggedObject1 withTag(Tag tag) {
        Utils.checkNotNull(tag, "tag");
        this.tag = tag;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TaggedObject1 other = (TaggedObject1) o;
        return 
            java.util.Objects.deepEquals(this.imageURL, other.imageURL) &&
            java.util.Objects.deepEquals(this.tag, other.tag);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            imageURL,
            tag);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TaggedObject1.class,
                "imageURL", imageURL,
                "tag", tag);
    }
    
    public final static class Builder {
 
        private String imageURL;
 
        private Tag tag;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder imageURL(String imageURL) {
            Utils.checkNotNull(imageURL, "imageURL");
            this.imageURL = imageURL;
            return this;
        }

        public Builder tag(Tag tag) {
            Utils.checkNotNull(tag, "tag");
            this.tag = tag;
            return this;
        }
        
        public TaggedObject1 build() {
            return new TaggedObject1(
                imageURL,
                tag);
        }
    }
}

