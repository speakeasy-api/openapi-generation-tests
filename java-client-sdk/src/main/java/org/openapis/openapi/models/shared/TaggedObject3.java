/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.Utils;

public class TaggedObject3 {

    @JsonProperty("phone")
    private String phone;

    @JsonProperty("tag")
    private String tag;

    @JsonCreator
    public TaggedObject3(
            @JsonProperty("phone") String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        this.tag = Builder._SINGLETON_VALUE_Tag.value();
    }

    @JsonIgnore
    public String phone() {
        return phone;
    }

    @JsonIgnore
    public String tag() {
        return tag;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public TaggedObject3 withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TaggedObject3 other = (TaggedObject3) o;
        return 
            java.util.Objects.deepEquals(this.phone, other.phone) &&
            java.util.Objects.deepEquals(this.tag, other.tag);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            phone,
            tag);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TaggedObject3.class,
                "phone", phone,
                "tag", tag);
    }
    
    public final static class Builder {
 
        private String phone;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }
        
        public TaggedObject3 build() {
            return new TaggedObject3(
                phone);
        }

        private static final LazySingletonValue<String> _SINGLETON_VALUE_Tag =
                new LazySingletonValue<>(
                        "tag",
                        "\"tag3\"",
                        new TypeReference<String>() {});
    }
}

