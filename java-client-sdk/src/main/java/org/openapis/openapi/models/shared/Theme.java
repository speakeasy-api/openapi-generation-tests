/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.Utils;

public class Theme {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("color")
    private Optional<? extends Color> color;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("heroWidth")
    private Optional<? extends HeroWidth> heroWidth;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icon")
    private Optional<? extends Icon> icon;

    @JsonCreator
    public Theme(
            @JsonProperty("color") Optional<? extends Color> color,
            @JsonProperty("heroWidth") Optional<? extends HeroWidth> heroWidth,
            @JsonProperty("icon") Optional<? extends Icon> icon) {
        Utils.checkNotNull(color, "color");
        Utils.checkNotNull(heroWidth, "heroWidth");
        Utils.checkNotNull(icon, "icon");
        this.color = color;
        this.heroWidth = heroWidth;
        this.icon = icon;
    }
    
    public Theme() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Color> color() {
        return (Optional<Color>) color;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<HeroWidth> heroWidth() {
        return (Optional<HeroWidth>) heroWidth;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Icon> icon() {
        return (Optional<Icon>) icon;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Theme withColor(Color color) {
        Utils.checkNotNull(color, "color");
        this.color = Optional.ofNullable(color);
        return this;
    }

    public Theme withColor(Optional<? extends Color> color) {
        Utils.checkNotNull(color, "color");
        this.color = color;
        return this;
    }

    public Theme withHeroWidth(HeroWidth heroWidth) {
        Utils.checkNotNull(heroWidth, "heroWidth");
        this.heroWidth = Optional.ofNullable(heroWidth);
        return this;
    }

    public Theme withHeroWidth(Optional<? extends HeroWidth> heroWidth) {
        Utils.checkNotNull(heroWidth, "heroWidth");
        this.heroWidth = heroWidth;
        return this;
    }

    public Theme withIcon(Icon icon) {
        Utils.checkNotNull(icon, "icon");
        this.icon = Optional.ofNullable(icon);
        return this;
    }

    public Theme withIcon(Optional<? extends Icon> icon) {
        Utils.checkNotNull(icon, "icon");
        this.icon = icon;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Theme other = (Theme) o;
        return 
            java.util.Objects.deepEquals(this.color, other.color) &&
            java.util.Objects.deepEquals(this.heroWidth, other.heroWidth) &&
            java.util.Objects.deepEquals(this.icon, other.icon);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            color,
            heroWidth,
            icon);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Theme.class,
                "color", color,
                "heroWidth", heroWidth,
                "icon", icon);
    }
    
    public final static class Builder {
 
        private Optional<? extends Color> color;
 
        private Optional<? extends HeroWidth> heroWidth = Optional.empty();
 
        private Optional<? extends Icon> icon = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder color(Color color) {
            Utils.checkNotNull(color, "color");
            this.color = Optional.ofNullable(color);
            return this;
        }

        public Builder color(Optional<? extends Color> color) {
            Utils.checkNotNull(color, "color");
            this.color = color;
            return this;
        }

        public Builder heroWidth(HeroWidth heroWidth) {
            Utils.checkNotNull(heroWidth, "heroWidth");
            this.heroWidth = Optional.ofNullable(heroWidth);
            return this;
        }

        public Builder heroWidth(Optional<? extends HeroWidth> heroWidth) {
            Utils.checkNotNull(heroWidth, "heroWidth");
            this.heroWidth = heroWidth;
            return this;
        }

        public Builder icon(Icon icon) {
            Utils.checkNotNull(icon, "icon");
            this.icon = Optional.ofNullable(icon);
            return this;
        }

        public Builder icon(Optional<? extends Icon> icon) {
            Utils.checkNotNull(icon, "icon");
            this.icon = icon;
            return this;
        }
        
        public Theme build() {
            if (color == null) {
                color = _SINGLETON_VALUE_Color.value();
            }
            return new Theme(
                color,
                heroWidth,
                icon);
        }

        private static final LazySingletonValue<Optional<? extends Color>> _SINGLETON_VALUE_Color =
                new LazySingletonValue<>(
                        "color",
                        "\"blue\"",
                        new TypeReference<Optional<? extends Color>>() {});
    }
}

