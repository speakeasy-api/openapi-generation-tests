/* 
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.Utils;

public class TypedObject3 {

    @JsonProperty("type")
    private TypedObject3Type type;

    @JsonProperty("value")
    private String value;

    @JsonCreator
    public TypedObject3(
            @JsonProperty("type") TypedObject3Type type,
            @JsonProperty("value") String value) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(value, "value");
        this.type = type;
        this.value = value;
    }

    @JsonIgnore
    public TypedObject3Type type() {
        return type;
    }

    @JsonIgnore
    public String value() {
        return value;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public TypedObject3 withType(TypedObject3Type type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public TypedObject3 withValue(String value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TypedObject3 other = (TypedObject3) o;
        return 
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.value, other.value);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            type,
            value);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TypedObject3.class,
                "type", type,
                "value", value);
    }
    
    public final static class Builder {
 
        private TypedObject3Type type;
 
        private String value;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder type(TypedObject3Type type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder value(String value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }
        
        public TypedObject3 build() {
            return new TypedObject3(
                type,
                value);
        }
    }
}

