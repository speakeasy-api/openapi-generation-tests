/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.utils.Utils;


public class UnsupportedEnums {

    @JsonProperty("booleanEnum")
    private boolean booleanEnum;

    @JsonProperty("numberEnum")
    private double numberEnum;

    @JsonCreator
    public UnsupportedEnums(
            @JsonProperty("booleanEnum") boolean booleanEnum,
            @JsonProperty("numberEnum") double numberEnum) {
        Utils.checkNotNull(booleanEnum, "booleanEnum");
        Utils.checkNotNull(numberEnum, "numberEnum");
        this.booleanEnum = booleanEnum;
        this.numberEnum = numberEnum;
    }

    @JsonIgnore
    public boolean booleanEnum() {
        return booleanEnum;
    }

    @JsonIgnore
    public double numberEnum() {
        return numberEnum;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public UnsupportedEnums withBooleanEnum(boolean booleanEnum) {
        Utils.checkNotNull(booleanEnum, "booleanEnum");
        this.booleanEnum = booleanEnum;
        return this;
    }

    public UnsupportedEnums withNumberEnum(double numberEnum) {
        Utils.checkNotNull(numberEnum, "numberEnum");
        this.numberEnum = numberEnum;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UnsupportedEnums other = (UnsupportedEnums) o;
        return 
            Objects.deepEquals(this.booleanEnum, other.booleanEnum) &&
            Objects.deepEquals(this.numberEnum, other.numberEnum);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            booleanEnum,
            numberEnum);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UnsupportedEnums.class,
                "booleanEnum", booleanEnum,
                "numberEnum", numberEnum);
    }
    
    public final static class Builder {
 
        private Boolean booleanEnum;
 
        private Double numberEnum;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder booleanEnum(boolean booleanEnum) {
            Utils.checkNotNull(booleanEnum, "booleanEnum");
            this.booleanEnum = booleanEnum;
            return this;
        }

        public Builder numberEnum(double numberEnum) {
            Utils.checkNotNull(numberEnum, "numberEnum");
            this.numberEnum = numberEnum;
            return this;
        }
        
        public UnsupportedEnums build() {
            return new UnsupportedEnums(
                booleanEnum,
                numberEnum);
        }
    }
}

