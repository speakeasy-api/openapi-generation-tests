/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.utils.Utils;


public class WebhookRequestCreated {

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     * https://speakeasy.com/docs - A link to the external docs.
     */
    @JsonProperty("data")
    private SimpleObject data;

    @JsonProperty("type")
    private WebhookRequestCreatedType type;

    @JsonCreator
    public WebhookRequestCreated(
            @JsonProperty("data") SimpleObject data,
            @JsonProperty("type") WebhookRequestCreatedType type) {
        Utils.checkNotNull(data, "data");
        Utils.checkNotNull(type, "type");
        this.data = data;
        this.type = type;
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     * https://speakeasy.com/docs - A link to the external docs.
     */
    @JsonIgnore
    public SimpleObject data() {
        return data;
    }

    @JsonIgnore
    public WebhookRequestCreatedType type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     * https://speakeasy.com/docs - A link to the external docs.
     */
    public WebhookRequestCreated withData(SimpleObject data) {
        Utils.checkNotNull(data, "data");
        this.data = data;
        return this;
    }

    public WebhookRequestCreated withType(WebhookRequestCreatedType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WebhookRequestCreated other = (WebhookRequestCreated) o;
        return 
            Objects.deepEquals(this.data, other.data) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            data,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WebhookRequestCreated.class,
                "data", data,
                "type", type);
    }
    
    public final static class Builder {
 
        private SimpleObject data;
 
        private WebhookRequestCreatedType type;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A simple object that uses all our supported primitive types and enums and has optional properties.
         * https://speakeasy.com/docs - A link to the external docs.
         */
        public Builder data(SimpleObject data) {
            Utils.checkNotNull(data, "data");
            this.data = data;
            return this;
        }

        public Builder type(WebhookRequestCreatedType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public WebhookRequestCreated build() {
            return new WebhookRequestCreated(
                data,
                type);
        }
    }
}

