/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapis.openapi.utils.Utils;

public class WriteOnlyObject {

    @JsonProperty("bool")
    private boolean bool;

    @JsonProperty("num")
    private double num;

    @JsonProperty("string")
    private String string;

    @JsonCreator
    public WriteOnlyObject(
            @JsonProperty("bool") boolean bool,
            @JsonProperty("num") double num,
            @JsonProperty("string") String string) {
        Utils.checkNotNull(bool, "bool");
        Utils.checkNotNull(num, "num");
        Utils.checkNotNull(string, "string");
        this.bool = bool;
        this.num = num;
        this.string = string;
    }

    @JsonIgnore
    public boolean bool() {
        return bool;
    }

    @JsonIgnore
    public double num() {
        return num;
    }

    @JsonIgnore
    public String string() {
        return string;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public WriteOnlyObject withBool(boolean bool) {
        Utils.checkNotNull(bool, "bool");
        this.bool = bool;
        return this;
    }

    public WriteOnlyObject withNum(double num) {
        Utils.checkNotNull(num, "num");
        this.num = num;
        return this;
    }

    public WriteOnlyObject withString(String string) {
        Utils.checkNotNull(string, "string");
        this.string = string;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WriteOnlyObject other = (WriteOnlyObject) o;
        return 
            java.util.Objects.deepEquals(this.bool, other.bool) &&
            java.util.Objects.deepEquals(this.num, other.num) &&
            java.util.Objects.deepEquals(this.string, other.string);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            bool,
            num,
            string);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WriteOnlyObject.class,
                "bool", bool,
                "num", num,
                "string", string);
    }
    
    public final static class Builder {
 
        private Boolean bool;
 
        private Double num;
 
        private String string;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder bool(boolean bool) {
            Utils.checkNotNull(bool, "bool");
            this.bool = bool;
            return this;
        }

        public Builder num(double num) {
            Utils.checkNotNull(num, "num");
            this.num = num;
            return this;
        }

        public Builder string(String string) {
            Utils.checkNotNull(string, "string");
            this.string = string;
            return this;
        }
        
        public WriteOnlyObject build() {
            return new WriteOnlyObject(
                bool,
                num,
                string);
        }
    }
}

