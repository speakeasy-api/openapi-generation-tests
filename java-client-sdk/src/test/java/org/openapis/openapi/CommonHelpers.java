/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.UncheckedIOException;
import java.net.URI;
import java.net.http.HttpClient.Version;
import java.net.http.HttpHeaders;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.Collections;
import java.util.Optional;

import javax.net.ssl.SSLSession;

import com.fasterxml.jackson.databind.ObjectMapper;


public class CommonHelpers {
    public static void recordTest(String id) {
        try {
            new File("build").mkdir();
            Files.writeString(Paths.get("build/test-javav2-record.txt"), id + "\n", StandardOpenOption.CREATE,
                    StandardOpenOption.APPEND);
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }
    
    public static HttpResponse<InputStream> createOkEmptyResponse(HttpRequest r) {
        return new HttpResponse<InputStream>() {

            @Override
            public int statusCode() {
                return 200;
            }

            @Override
            public HttpRequest request() {
                return r;
            }

            @Override
            public Optional<HttpResponse<InputStream>> previousResponse() {
                return Optional.empty();
            }

            @Override
            public HttpHeaders headers() {
                return HttpHeaders.of(Collections.emptyMap(), (k, v) -> true);
            }

            @Override
            public InputStream body() {
                return createEmptyStream();
            }

            @Override
            public Optional<SSLSession> sslSession() {
                return Optional.empty();
            }

            @Override
            public URI uri() {
                return r.uri();
            }

            @Override
            public Version version() {
                return Version.HTTP_1_1;
            }
        };
    }
    
    private static InputStream createEmptyStream() {
        return new InputStream() {

            @Override
            public int read() throws IOException {
                return -1;
            }
            
        };
    }
}