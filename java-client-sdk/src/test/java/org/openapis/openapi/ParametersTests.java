/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;

import java.lang.Exception;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.openapis.openapi.models.operations.DeepObjectQueryParamsMapArgs;
import org.openapis.openapi.models.operations.DeepObjectQueryParamsMapResponse;
import org.openapis.openapi.models.operations.DeepObjectQueryParamsObjectArgs;
import org.openapis.openapi.models.operations.DeepObjectQueryParamsObjectResponse;
import org.openapis.openapi.models.operations.FormQueryParamsArrayArgs;
import org.openapis.openapi.models.operations.FormQueryParamsArrayResponse;
import org.openapis.openapi.models.operations.FormQueryParamsCamelObjectArgs;
import org.openapis.openapi.models.operations.FormQueryParamsCamelObjectResponse;
import org.openapis.openapi.models.operations.FormQueryParamsMapResponse;
import org.openapis.openapi.models.operations.FormQueryParamsObjectResponse;
import org.openapis.openapi.models.operations.FormQueryParamsPrimitiveArgs;
import org.openapis.openapi.models.operations.FormQueryParamsPrimitiveResponse;
import org.openapis.openapi.models.operations.FormQueryParamsRefParamObjectArgs;
import org.openapis.openapi.models.operations.FormQueryParamsRefParamObjectResponse;
import org.openapis.openapi.models.operations.HeaderParamsArrayHeaders;
import org.openapis.openapi.models.operations.HeaderParamsArrayRes;
import org.openapis.openapi.models.operations.HeaderParamsArrayResponse;
import org.openapis.openapi.models.operations.HeaderParamsMapResponse;
import org.openapis.openapi.models.operations.HeaderParamsObjectResponse;
import org.openapis.openapi.models.operations.HeaderParamsPrimitiveHeaders;
import org.openapis.openapi.models.operations.HeaderParamsPrimitiveRes;
import org.openapis.openapi.models.operations.HeaderParamsPrimitiveResponse;
import org.openapis.openapi.models.operations.MixedParametersCamelCaseArgs;
import org.openapis.openapi.models.operations.MixedParametersCamelCaseHeaders;
import org.openapis.openapi.models.operations.MixedParametersCamelCaseRes;
import org.openapis.openapi.models.operations.MixedParametersCamelCaseResponse;
import org.openapis.openapi.models.operations.MixedParametersPrimitivesArgs;
import org.openapis.openapi.models.operations.MixedParametersPrimitivesHeaders;
import org.openapis.openapi.models.operations.MixedParametersPrimitivesRes;
import org.openapis.openapi.models.operations.MixedParametersPrimitivesResponse;
import org.openapis.openapi.models.operations.ObjArrParam;
import org.openapis.openapi.models.operations.ObjParam;
import org.openapis.openapi.models.operations.ObjParamExploded;
import org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayArgs;
import org.openapis.openapi.models.operations.PipeDelimitedQueryParamsArrayResponse;
import org.openapis.openapi.models.operations.SimplePathParameterArraysRes;
import org.openapis.openapi.models.operations.SimplePathParameterArraysResponse;
import org.openapis.openapi.models.operations.SimplePathParameterMapsResponse;
import org.openapis.openapi.models.operations.SimplePathParameterObjectsResponse;
import org.openapis.openapi.models.operations.SimplePathParameterPrimitivesRes;
import org.openapis.openapi.models.operations.SimplePathParameterPrimitivesResponse;
import org.openapis.openapi.models.shared.Enum;
import org.openapis.openapi.models.shared.Int32Enum;
import org.openapis.openapi.models.shared.IntEnum;
import org.openapis.openapi.models.shared.RefQueryParamObj;
import org.openapis.openapi.models.shared.RefQueryParamObjExploded;
import org.openapis.openapi.models.shared.Security;
import org.openapis.openapi.models.shared.SimpleObject;
import org.openapis.openapi.utils.Utils;

public class ParametersTests { 
    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testParameters_DeepObjectQueryParamsMap() throws Exception {
        Utils.recordTest("parameters-deep-object-query-params-map");

        SDK sdk = SDK.builder()
                .security(Security.builder()
                    .apiKeyAuth("Token YOUR_API_KEY")
                    .build())
                .globalHeaderParam(true)
                .globalHiddenQueryParam("hello")
                .globalPathParam(100L)
                .globalQueryParam("some example global query param")
            .build();

        DeepObjectQueryParamsMapResponse res = sdk.parameters().deepObjectQueryParamsMap()
                .mapArrParam(Map.ofEntries(
                    Map.entry("test", List.of(
                        "test",
                        "test2")),
                    Map.entry("test2", List.of(
                        "test3",
                        "test4"))))
                .mapParam(Map.ofEntries(
                    Map.entry("test", "value"),
                    Map.entry("test2", "value2")))
                .call();
assertEquals(200, res.statusCode());
    assertEquals(
        Map.ofEntries(
    Map.entry("mapArrParam[test]", DeepObjectQueryParamsMapArgs.of(List.of(
        "test",
        "test2"))),
    Map.entry("mapArrParam[test2]", DeepObjectQueryParamsMapArgs.of(List.of(
        "test3",
        "test4"))),
    Map.entry("mapParam[test]", DeepObjectQueryParamsMapArgs.of("value")),
    Map.entry("mapParam[test2]", DeepObjectQueryParamsMapArgs.of("value2"))),
        res.res().get().args());
    assertEquals(
        "http://localhost:35123/anything/queryParams/deepObject/map?mapArrParam[test2]=test3&mapArrParam[test2]=test4&mapArrParam[test]=test&mapArrParam[test]=test2&mapParam[test2]=value2&mapParam[test]=value",
        Utils.sortQueryParameters(res.res().get().url()));
    }
    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testParameters_DeepObjectQueryParamsObject() throws Exception {
        Utils.recordTest("parameters-deep-object-query-params-object");

        SDK sdk = SDK.builder()
                .security(Security.builder()
                    .apiKeyAuth("Token YOUR_API_KEY")
                    .build())
                .globalHeaderParam(true)
                .globalHiddenQueryParam("hello")
                .globalPathParam(100L)
                .globalQueryParam("some example global query param")
            .build();

        DeepObjectQueryParamsObjectResponse res = sdk.parameters().deepObjectQueryParamsObject()
                .objArrParam(ObjArrParam.builder()
                    .arr(List.of(
                        "test",
                        "test2"))
                    .build())
                .objParam(SimpleObject.builder()
                    .any("any")
                    .bool(true)
                    .date(LocalDate.parse("2020-01-01"))
                    .dateTime(OffsetDateTime.parse("2020-01-01T00:00:00.001Z"))
                    .enum_(Enum.ONE)
                    .float32(1.1f)
                    .int_(1L)
                    .int32(1)
                    .int32Enum(Int32Enum.FIFTY_FIVE)
                    .intEnum(IntEnum.Second)
                    .num(1.1d)
                    .str("test")
                    .bigint(new BigInteger("8821239038968084"))
                    .bigintStr(new BigInteger("9223372036854775808"))
                    .boolOpt(true)
                    .decimal(new BigDecimal("3.141592653589793"))
                    .decimalStr(new BigDecimal("3.14159265358979344719667586"))
                    .float64Str("1.1")
                    .int64Str("100")
                    .strOpt("testOptional")
                    .build())
                .call();
assertEquals(200, res.statusCode());
    assertEquals(
        DeepObjectQueryParamsObjectArgs.builder()
    .objArrParamArr(List.of(
        "test",
        "test2"))
    .objParamAny("any")
    .objParamBoolOpt("true")
    .objParamBool("true")
    .objParamDateTime("2020-01-01T00:00:00.001Z")
    .objParamDate("2020-01-01")
    .objParamEnum("one")
    .objParamFloat32("1.1")
    .objParamInt32Enum("55")
    .objParamInt32("1")
    .objParamIntEnum("2")
    .objParamInt("1")
    .objParamNum("1.1")
    .objParamStrOpt("testOptional")
    .objParamStr("test")
    .objParamBigintStr("9223372036854775808")
    .objParamBigint("8821239038968084")
    .objParamDecimalStr("3.14159265358979344719667586")
    .objParamDecimal("3.141592653589793")
    .objParamFloat64Str("1.1")
    .objParamInt64Str("100")
    .build(),
        res.res().get().args());
    assertEquals(
        "http://localhost:35123/anything/queryParams/deepObject/obj?objArrParam[arr]=test&objArrParam[arr]=test2&objParam[any]=any&objParam[bigintStr]=9223372036854775808&objParam[bigint]=8821239038968084&objParam[boolOpt]=true&objParam[bool]=true&objParam[dateTime]=2020-01-01T00%3A00%3A00.001Z&objParam[date]=2020-01-01&objParam[decimalStr]=3.14159265358979344719667586&objParam[decimal]=3.141592653589793&objParam[enum]=one&objParam[float32]=1.1&objParam[float64Str]=1.1&objParam[int32Enum]=55&objParam[int32]=1&objParam[int64Str]=100&objParam[intEnum]=2&objParam[int]=1&objParam[num]=1.1&objParam[strOpt]=testOptional&objParam[str]=test",
        Utils.sortQueryParameters(res.res().get().url()));
    }
    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testParameters_FormQueryParamsArray() throws Exception {
        Utils.recordTest("parameters-form-query-params-array");

        SDK sdk = SDK.builder()
                .security(Security.builder()
                    .apiKeyAuth("Token YOUR_API_KEY")
                    .build())
                .globalHeaderParam(true)
                .globalHiddenQueryParam("hello")
                .globalPathParam(100L)
                .globalQueryParam("some example global query param")
            .build();

        FormQueryParamsArrayResponse res = sdk.parameters().formQueryParamsArray()
                .arrParam(List.of(
                    "test",
                    "test2"))
                .arrParamExploded(List.of(
                    1L,
                    2L))
                .call();
assertEquals(200, res.statusCode());
    assertEquals(
        FormQueryParamsArrayArgs.builder()
    .arrParam("test,test2")
    .arrParamExploded(List.of(
        "1",
        "2"))
    .build(),
        res.res().get().args());
    assertEquals(
        "http://localhost:35123/anything/queryParams/form/array?arrParam=test%2Ctest2&arrParamExploded=1&arrParamExploded=2",
        Utils.sortQueryParameters(res.res().get().url()));
    }
    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testParameters_FormQueryParamsCamelObject() throws Exception {
        Utils.recordTest("parameters-form-query-params-camel-object");

        SDK sdk = SDK.builder()
                .security(Security.builder()
                    .apiKeyAuth("Token YOUR_API_KEY")
                    .build())
                .globalHeaderParam(true)
                .globalHiddenQueryParam("hello")
                .globalPathParam(100L)
                .globalQueryParam("some example global query param")
            .build();

        FormQueryParamsCamelObjectResponse res = sdk.parameters().formQueryParamsCamelObject()
                .objParam(ObjParam.builder()
                    .encodedCount("11")
                    .encodedTerm("bar")
                    .build())
                .objParamExploded(ObjParamExploded.builder()
                    .itemCount("10")
                    .searchTerm("foo")
                    .build())
                .call();
assertEquals(200, res.statusCode());
    assertEquals(
        FormQueryParamsCamelObjectArgs.builder()
    .itemCount("10")
    .searchTerm("foo")
    .build(),
        res.res().get().args());
    assertEquals(
        "http://localhost:35123/anything/queryParams/form/camelObj?item_count=10&obj_param=encoded_count%2C11%2Cencoded_term%2Cbar&search_term=foo",
        Utils.sortQueryParameters(res.res().get().url()));
    }
    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testParameters_FormQueryParamsMap() throws Exception {
        Utils.recordTest("parameters-form-query-params-map");

        SDK sdk = SDK.builder()
                .security(Security.builder()
                    .apiKeyAuth("Token YOUR_API_KEY")
                    .build())
                .globalHeaderParam(true)
                .globalHiddenQueryParam("hello")
                .globalPathParam(100L)
                .globalQueryParam("some example global query param")
            .build();

        FormQueryParamsMapResponse res = sdk.parameters().formQueryParamsMap()
                .mapParam(Map.ofEntries(
                    Map.entry("test", "value"),
                    Map.entry("test2", "value2")))
                .mapParamExploded(Map.ofEntries(
                    Map.entry("test", 1L),
                    Map.entry("test2", 2L)))
                .call();
assertEquals(200, res.statusCode());
    assertEquals(
        Map.ofEntries(
    Map.entry("mapParam", "test,value,test2,value2"),
    Map.entry("test", "1"),
    Map.entry("test2", "2")),
        Utils.sortSerializedMaps(res.res().get().args(), "(.*)", ","));
    assertEquals(
        "http://localhost:35123/anything/queryParams/form/map?mapParam=test%2Cvalue%2Ctest2%2Cvalue2&test=1&test2=2",
        Utils.sortSerializedMaps(Utils.sortQueryParameters(res.res().get().url()), ".*?\\?mapParam=(.*?)&(.*)", "%2C"));
    }
    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testParameters_FormQueryParamsObject() throws Exception {
        Utils.recordTest("parameters-form-query-params-object");

        SDK sdk = SDK.builder()
                .security(Security.builder()
                    .apiKeyAuth("Token YOUR_API_KEY")
                    .build())
                .globalHeaderParam(true)
                .globalHiddenQueryParam("hello")
                .globalPathParam(100L)
                .globalQueryParam("some example global query param")
            .build();

        FormQueryParamsObjectResponse res = sdk.parameters().formQueryParamsObject()
                .objParam(SimpleObject.builder()
                    .any("any")
                    .bool(true)
                    .date(LocalDate.parse("2020-01-01"))
                    .dateTime(OffsetDateTime.parse("2020-01-01T00:00:00.001Z"))
                    .enum_(Enum.ONE)
                    .float32(1.1f)
                    .int_(1L)
                    .int32(1)
                    .int32Enum(Int32Enum.FIFTY_FIVE)
                    .intEnum(IntEnum.Second)
                    .num(1.1d)
                    .str("test")
                    .bigint(new BigInteger("8821239038968084"))
                    .bigintStr(new BigInteger("9223372036854775808"))
                    .boolOpt(true)
                    .decimal(new BigDecimal("3.141592653589793"))
                    .decimalStr(new BigDecimal("3.14159265358979344719667586"))
                    .float64Str("1.1")
                    .int64Str("100")
                    .strOpt("testOptional")
                    .build())
                .objParamExploded(SimpleObject.builder()
                    .any("any")
                    .bool(true)
                    .date(LocalDate.parse("2020-01-01"))
                    .dateTime(OffsetDateTime.parse("2020-01-01T00:00:00.001Z"))
                    .enum_(Enum.ONE)
                    .float32(1.1f)
                    .int_(1L)
                    .int32(1)
                    .int32Enum(Int32Enum.FIFTY_FIVE)
                    .intEnum(IntEnum.Second)
                    .num(1.1d)
                    .str("test")
                    .bigint(new BigInteger("8821239038968084"))
                    .bigintStr(new BigInteger("9223372036854775808"))
                    .boolOpt(true)
                    .decimal(new BigDecimal("3.141592653589793"))
                    .decimalStr(new BigDecimal("3.14159265358979344719667586"))
                    .float64Str("1.1")
                    .int64Str("100")
                    .strOpt("testOptional")
                    .build())
                .call();
assertEquals(200, res.statusCode());
    assertEquals(
        "any",
        res.res().get().args().any());
    assertEquals(
        "8821239038968084",
        res.res().get().args().bigint().get());
    assertEquals(
        "9223372036854775808",
        res.res().get().args().bigintStr().get());
    assertEquals(
        "true",
        res.res().get().args().bool());
    assertEquals(
        "true",
        res.res().get().args().boolOpt().get());
    assertEquals(
        "2020-01-01",
        res.res().get().args().date());
    assertEquals(
        "2020-01-01T00:00:00.001Z",
        res.res().get().args().dateTime());
    assertEquals(
        "3.141592653589793",
        res.res().get().args().decimal().get());
    assertEquals(
        "3.14159265358979344719667586",
        res.res().get().args().decimalStr().get());
    assertEquals(
        "one",
        res.res().get().args().enum_());
    assertEquals(
        "1.1",
        res.res().get().args().float32());
    assertEquals(
        "1.1",
        res.res().get().args().float64Str().get());
    assertEquals(
        "1",
        res.res().get().args().int_());
    assertEquals(
        "1",
        res.res().get().args().int32());
    assertEquals(
        "55",
        res.res().get().args().int32Enum());
    assertEquals(
        "100",
        res.res().get().args().int64Str().get());
    assertEquals(
        "2",
        res.res().get().args().intEnum());
assertFalse(res.res().get().args().intOptNull().isPresent());
    assertEquals(
        "1.1",
        res.res().get().args().num());
assertFalse(res.res().get().args().numOptNull().isPresent());
    assertEquals(
        "any,any,bigint,8821239038968084,bigintStr,9223372036854775808,bool,true,boolOpt,true,date,2020-01-01,dateTime,2020-01-01T00:00:00.001Z,decimal,3.141592653589793,decimalStr,3.14159265358979344719667586,enum,one,float32,1.1,float64Str,1.1,int,1,int32,1,int32Enum,55,int64Str,100,intEnum,2,num,1.1,str,test,strOpt,testOptional",
        Utils.sortSerializedMaps(res.res().get().args().objParam(), "(.*)", ","));
    assertEquals(
        "test",
        res.res().get().args().str());
    assertEquals(
        "testOptional",
        res.res().get().args().strOpt().get());
    assertEquals(
        "http://localhost:35123/anything/queryParams/form/obj?any=any&bigint=8821239038968084&bigintStr=9223372036854775808&bool=true&boolOpt=true&date=2020-01-01&dateTime=2020-01-01T00%3A00%3A00.001Z&decimal=3.141592653589793&decimalStr=3.14159265358979344719667586&enum=one&float32=1.1&float64Str=1.1&int=1&int32=1&int32Enum=55&int64Str=100&intEnum=2&num=1.1&objParam=any%2Cany%2Cbigint%2C8821239038968084%2CbigintStr%2C9223372036854775808%2Cbool%2Ctrue%2CboolOpt%2Ctrue%2Cdate%2C2020-01-01%2CdateTime%2C2020-01-01T00%3A00%3A00.001Z%2Cdecimal%2C3.141592653589793%2CdecimalStr%2C3.14159265358979344719667586%2Cenum%2Cone%2Cfloat32%2C1.1%2Cfloat64Str%2C1.1%2Cint%2C1%2Cint32%2C1%2Cint32Enum%2C55%2Cint64Str%2C100%2CintEnum%2C2%2Cnum%2C1.1%2Cstr%2Ctest%2CstrOpt%2CtestOptional&str=test&strOpt=testOptional",
        Utils.sortSerializedMaps(Utils.sortQueryParameters(res.res().get().url()), "objParam=(.*?)&", "%2C"));
    }
    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testParameters_FormQueryParamsPrimitive() throws Exception {
        Utils.recordTest("parameters-form-query-params-primitive");

        SDK sdk = SDK.builder()
                .security(Security.builder()
                    .apiKeyAuth("Token YOUR_API_KEY")
                    .build())
                .globalHeaderParam(true)
                .globalHiddenQueryParam("hello")
                .globalPathParam(100L)
                .globalQueryParam("some example global query param")
            .build();

        FormQueryParamsPrimitiveResponse res = sdk.parameters().formQueryParamsPrimitive()
                .boolParam(true)
                .intParam(1L)
                .numParam(1.1d)
                .strParam("test")
                .call();
assertEquals(200, res.statusCode());
    assertEquals(
        FormQueryParamsPrimitiveArgs.builder()
    .boolParam("true")
    .intParam("1")
    .numParam("1.1")
    .strParam("test")
    .build(),
        res.res().get().args());
    assertEquals(
        "http://localhost:35123/anything/queryParams/form/primitive?boolParam=true&intParam=1&numParam=1.1&strParam=test",
        Utils.sortQueryParameters(res.res().get().url()));
    }
    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testParameters_FormQueryParamsRefParamObject() throws Exception {
        Utils.recordTest("parameters-form-query-params-ref-param-object");

        SDK sdk = SDK.builder()
                .security(Security.builder()
                    .apiKeyAuth("Token YOUR_API_KEY")
                    .build())
                .globalHeaderParam(true)
                .globalHiddenQueryParam("hello")
                .globalPathParam(100L)
                .globalQueryParam("some example global query param")
            .build();

        FormQueryParamsRefParamObjectResponse res = sdk.parameters().formQueryParamsRefParamObject()
                .refObjParam(RefQueryParamObj.builder()
                    .bool(true)
                    .int_(1L)
                    .num(1.1d)
                    .str("test")
                    .build())
                .refObjParamExploded(RefQueryParamObjExploded.builder()
                    .bool(true)
                    .int_(1L)
                    .num(1.1d)
                    .str("test")
                    .build())
                .call();
assertEquals(200, res.statusCode());
    assertEquals(
        FormQueryParamsRefParamObjectArgs.builder()
    .bool("true")
    .int_("1")
    .num("1.1")
    .refObjParam("bool,true,int,1,num,1.1,str,test")
    .str("test")
    .build(),
        res.res().get().args());
    assertEquals(
        "http://localhost:35123/anything/queryParams/form/refParamObject?bool=true&int=1&num=1.1&refObjParam=bool%2Ctrue%2Cint%2C1%2Cnum%2C1.1%2Cstr%2Ctest&str=test",
        Utils.sortQueryParameters(res.res().get().url()));
    }
    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testParameters_HeaderParamsArray() throws Exception {
        Utils.recordTest("parameters-header-params-array");

        SDK sdk = SDK.builder()
                .security(Security.builder()
                    .apiKeyAuth("Token YOUR_API_KEY")
                    .build())
                .globalHeaderParam(true)
                .globalHiddenQueryParam("hello")
                .globalPathParam(100L)
                .globalQueryParam("some example global query param")
            .build();

        HeaderParamsArrayResponse res = sdk.parameters().headerParamsArray()
                .xHeaderArray(List.of(
                    "test1",
                    "test2"))
                .call();
assertEquals(200, res.statusCode());
    assertEquals(
        HeaderParamsArrayRes.builder()
    .headers(HeaderParamsArrayHeaders.builder()
        .xHeaderArray("test1,test2")
        .build())
    .build(),
        res.res().get());
    }
    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testParameters_HeaderParamsMap() throws Exception {
        Utils.recordTest("parameters-header-params-map");

        SDK sdk = SDK.builder()
                .security(Security.builder()
                    .apiKeyAuth("Token YOUR_API_KEY")
                    .build())
                .globalHeaderParam(true)
                .globalHiddenQueryParam("hello")
                .globalPathParam(100L)
                .globalQueryParam("some example global query param")
            .build();

        HeaderParamsMapResponse res = sdk.parameters().headerParamsMap()
                .xHeaderMap(Map.ofEntries(
                    Map.entry("key1", "value1"),
                    Map.entry("key2", "value2")))
                .xHeaderMapExplode(Map.ofEntries(
                    Map.entry("test1", "val1"),
                    Map.entry("test2", "val2")))
                .call();
assertEquals(200, res.statusCode());
    assertEquals(
        "key1,value1,key2,value2",
        Utils.sortSerializedMaps(res.res().get().headers().xHeaderMap(), "(.*)", ","));
    assertEquals(
        "test1=val1,test2=val2",
        Utils.sortSerializedMaps(res.res().get().headers().xHeaderMapExplode(), "(.*)", ","));
    }
    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testParameters_HeaderParamsObject() throws Exception {
        Utils.recordTest("parameters-header-params-object");

        SDK sdk = SDK.builder()
                .security(Security.builder()
                    .apiKeyAuth("Token YOUR_API_KEY")
                    .build())
                .globalHeaderParam(true)
                .globalHiddenQueryParam("hello")
                .globalPathParam(100L)
                .globalQueryParam("some example global query param")
            .build();

        HeaderParamsObjectResponse res = sdk.parameters().headerParamsObject()
                .xHeaderObj(SimpleObject.builder()
                    .any("any")
                    .bool(true)
                    .date(LocalDate.parse("2020-01-01"))
                    .dateTime(OffsetDateTime.parse("2020-01-01T00:00:00.001Z"))
                    .enum_(Enum.ONE)
                    .float32(1.1f)
                    .int_(1L)
                    .int32(1)
                    .int32Enum(Int32Enum.FIFTY_FIVE)
                    .intEnum(IntEnum.Second)
                    .num(1.1d)
                    .str("test")
                    .bigint(new BigInteger("8821239038968084"))
                    .bigintStr(new BigInteger("9223372036854775808"))
                    .boolOpt(true)
                    .decimal(new BigDecimal("3.141592653589793"))
                    .decimalStr(new BigDecimal("3.14159265358979344719667586"))
                    .float64Str("1.1")
                    .int64Str("100")
                    .strOpt("testOptional")
                    .build())
                .xHeaderObjExplode(SimpleObject.builder()
                    .any("any")
                    .bool(true)
                    .date(LocalDate.parse("2020-01-01"))
                    .dateTime(OffsetDateTime.parse("2020-01-01T00:00:00.001Z"))
                    .enum_(Enum.ONE)
                    .float32(1.1f)
                    .int_(1L)
                    .int32(1)
                    .int32Enum(Int32Enum.FIFTY_FIVE)
                    .intEnum(IntEnum.Second)
                    .num(1.1d)
                    .str("test")
                    .bigint(new BigInteger("8821239038968084"))
                    .bigintStr(new BigInteger("9223372036854775808"))
                    .boolOpt(true)
                    .decimal(new BigDecimal("3.141592653589793"))
                    .decimalStr(new BigDecimal("3.14159265358979344719667586"))
                    .float64Str("1.1")
                    .int64Str("100")
                    .strOpt("testOptional")
                    .build())
                .call();
assertEquals(200, res.statusCode());
    assertEquals(
        "any,any,bigint,8821239038968084,bigintStr,9223372036854775808,bool,true,boolOpt,true,date,2020-01-01,dateTime,2020-01-01T00:00:00.001Z,decimal,3.141592653589793,decimalStr,3.14159265358979344719667586,enum,one,float32,1.1,float64Str,1.1,int,1,int32,1,int32Enum,55,int64Str,100,intEnum,2,num,1.1,str,test,strOpt,testOptional",
        Utils.sortSerializedMaps(res.res().get().headers().xHeaderObj(), "(.*)", ","));
    assertEquals(
        "any=any,bigint=8821239038968084,bigintStr=9223372036854775808,bool=true,boolOpt=true,date=2020-01-01,dateTime=2020-01-01T00:00:00.001Z,decimal=3.141592653589793,decimalStr=3.14159265358979344719667586,enum=one,float32=1.1,float64Str=1.1,int=1,int32=1,int32Enum=55,int64Str=100,intEnum=2,num=1.1,str=test,strOpt=testOptional",
        Utils.sortSerializedMaps(res.res().get().headers().xHeaderObjExplode(), "(.*)", ","));
    }
    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testParameters_HeaderParamsPrimitive() throws Exception {
        Utils.recordTest("parameters-header-params-primitive");

        SDK sdk = SDK.builder()
                .security(Security.builder()
                    .apiKeyAuth("Token YOUR_API_KEY")
                    .build())
                .globalHeaderParam(true)
                .globalHiddenQueryParam("hello")
                .globalPathParam(100L)
                .globalQueryParam("some example global query param")
            .build();

        HeaderParamsPrimitiveResponse res = sdk.parameters().headerParamsPrimitive()
                .xHeaderBoolean(true)
                .xHeaderInteger(1L)
                .xHeaderNumber(1.1d)
                .xHeaderString("test")
                .call();
assertEquals(200, res.statusCode());
    assertEquals(
        HeaderParamsPrimitiveRes.builder()
    .headers(HeaderParamsPrimitiveHeaders.builder()
        .xHeaderBoolean("true")
        .xHeaderInteger("1")
        .xHeaderNumber("1.1")
        .xHeaderString("test")
        .build())
    .build(),
        res.res().get());
    }
    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testParameters_MixedParametersCamelCase() throws Exception {
        Utils.recordTest("parameters-camel-case");

        SDK sdk = SDK.builder()
                .security(Security.builder()
                    .apiKeyAuth("Token YOUR_API_KEY")
                    .build())
                .globalHeaderParam(true)
                .globalHiddenQueryParam("hello")
                .globalPathParam(100L)
                .globalQueryParam("some example global query param")
            .build();

        MixedParametersCamelCaseResponse res = sdk.parameters().mixedParametersCamelCase()
                .headerParam("headerValue")
                .pathParam("pathValue")
                .queryStringParam("queryValue")
                .call();
assertEquals(200, res.statusCode());
    assertEquals(
        MixedParametersCamelCaseRes.builder()
    .args(MixedParametersCamelCaseArgs.builder()
        .queryStringParam("queryValue")
        .build())
    .headers(MixedParametersCamelCaseHeaders.builder()
        .headerParam("headerValue")
        .build())
    .url("http://localhost:35123/anything/mixedParams/path/pathValue/camelcase?query_string_param=queryValue")
    .build(),
        res.res().get());
    }
    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testParameters_MixedParametersPrimitives() throws Exception {
        Utils.recordTest("parameters-mixed-primitives");

        SDK sdk = SDK.builder()
                .security(Security.builder()
                    .apiKeyAuth("Token YOUR_API_KEY")
                    .build())
                .globalHeaderParam(true)
                .globalHiddenQueryParam("hello")
                .globalPathParam(100L)
                .globalQueryParam("some example global query param")
            .build();

        MixedParametersPrimitivesResponse res = sdk.parameters().mixedParametersPrimitives()
                .headerParam("headerValue")
                .pathParam("pathValue")
                .queryStringParam("queryValue")
                .call();
assertEquals(200, res.statusCode());
    assertEquals(
        MixedParametersPrimitivesRes.builder()
    .args(MixedParametersPrimitivesArgs.builder()
        .queryStringParam("queryValue")
        .build())
    .headers(MixedParametersPrimitivesHeaders.builder()
        .headerparam("headerValue")
        .build())
    .url("http://localhost:35123/anything/mixedParams/path/pathValue?queryStringParam=queryValue")
    .build(),
        res.res().get());
    }
    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testParameters_PipeDelimitedQueryParamsArray() throws Exception {
        Utils.recordTest("parameters-pipe-query-params-array");

        SDK sdk = SDK.builder()
                .security(Security.builder()
                    .apiKeyAuth("Token YOUR_API_KEY")
                    .build())
                .globalHeaderParam(true)
                .globalHiddenQueryParam("hello")
                .globalPathParam(100L)
                .globalQueryParam("some example global query param")
            .build();

        PipeDelimitedQueryParamsArrayResponse res = sdk.parameters().pipeDelimitedQueryParamsArray()
                .arrParam(List.of(
                    "test",
                    "test2"))
                .arrParamExploded(List.of(
                    1L,
                    2L))
                .mapParam(Map.ofEntries(
                    Map.entry("key1", "val1"),
                    Map.entry("key2", "val2")))
                .objParam(SimpleObject.builder()
                    .any("any")
                    .bool(true)
                    .date(LocalDate.parse("2020-01-01"))
                    .dateTime(OffsetDateTime.parse("2020-01-01T00:00:00.001Z"))
                    .enum_(Enum.ONE)
                    .float32(1.1f)
                    .int_(1L)
                    .int32(1)
                    .int32Enum(Int32Enum.FIFTY_FIVE)
                    .intEnum(IntEnum.Second)
                    .num(1.1d)
                    .str("test")
                    .bigint(new BigInteger("8821239038968084"))
                    .bigintStr(new BigInteger("9223372036854775808"))
                    .boolOpt(true)
                    .decimal(new BigDecimal("3.141592653589793"))
                    .decimalStr(new BigDecimal("3.14159265358979344719667586"))
                    .float64Str("1.1")
                    .int64Str("100")
                    .strOpt("testOptional")
                    .build())
                .call();
assertEquals(200, res.statusCode());
    assertEquals(
        PipeDelimitedQueryParamsArrayArgs.builder()
    .arrParam("test|test2")
    .arrParamExploded(List.of(
        "1",
        "2"))
    .build(),
        res.res().get().args());
    assertEquals(
        "http://localhost:35123/anything/queryParams/pipe/array?arrParam=test|test2&arrParamExploded=1&arrParamExploded=2&mapParam=key1|val1|key2|val2&objParam=any|any|bigint|8821239038968084|bigintStr|9223372036854775808|bool|true|boolOpt|true|date|2020-01-01|dateTime|2020-01-01T00%3A00%3A00.001Z|decimal|3.141592653589793|decimalStr|3.14159265358979344719667586|enum|one|float32|1.1|float64Str|1.1|int|1|int32|1|int32Enum|55|int64Str|100|intEnum|2|num|1.1|str|test|strOpt|testOptional",
        Utils.sortSerializedMaps(Utils.sortQueryParameters(res.res().get().url()), "(?:map|obj)Param=(.*?)(?:&|$)", "|"));
    }
    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testParameters_SimplePathParameterArrays() throws Exception {
        Utils.recordTest("parameters-simple-path-parameter-arrays");

        SDK sdk = SDK.builder()
                .security(Security.builder()
                    .apiKeyAuth("Token YOUR_API_KEY")
                    .build())
                .globalHeaderParam(true)
                .globalHiddenQueryParam("hello")
                .globalPathParam(100L)
                .globalQueryParam("some example global query param")
            .build();

        SimplePathParameterArraysResponse res = sdk.parameters().simplePathParameterArrays()
                .arrParam(List.of(
                    "test",
                    "test2"))
                .call();
assertEquals(200, res.statusCode());
    assertEquals(
        SimplePathParameterArraysRes.builder()
    .url("http://localhost:35123/anything/pathParams/arr/test,test2")
    .build(),
        res.res().get());
    }
    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testParameters_SimplePathParameterMaps() throws Exception {
        Utils.recordTest("parameters-simple-path-parameter-maps");

        SDK sdk = SDK.builder()
                .security(Security.builder()
                    .apiKeyAuth("Token YOUR_API_KEY")
                    .build())
                .globalHeaderParam(true)
                .globalHiddenQueryParam("hello")
                .globalPathParam(100L)
                .globalQueryParam("some example global query param")
            .build();

        SimplePathParameterMapsResponse res = sdk.parameters().simplePathParameterMaps()
                .mapParam(Map.ofEntries(
                    Map.entry("test", "value"),
                    Map.entry("test2", "value2")))
                .mapParamExploded(Map.ofEntries(
                    Map.entry("test", 1L),
                    Map.entry("test2", 2L)))
                .call();
assertEquals(200, res.statusCode());
    assertEquals(
        "http://localhost:35123/anything/pathParams/map/test,value,test2,value2/mapExploded/test=1,test2=2",
        Utils.sortSerializedMaps(res.res().get().url(), ".*?\\/map\\/(.*?)\\/mapExploded\\/(.*)", ","));
    }
    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testParameters_SimplePathParameterObjects() throws Exception {
        Utils.recordTest("parameters-simple-path-parameter-objects");

        SDK sdk = SDK.builder()
                .security(Security.builder()
                    .apiKeyAuth("Token YOUR_API_KEY")
                    .build())
                .globalHeaderParam(true)
                .globalHiddenQueryParam("hello")
                .globalPathParam(100L)
                .globalQueryParam("some example global query param")
            .build();

        SimplePathParameterObjectsResponse res = sdk.parameters().simplePathParameterObjects()
                .objParam(SimpleObject.builder()
                    .any("any")
                    .bool(true)
                    .date(LocalDate.parse("2020-01-01"))
                    .dateTime(OffsetDateTime.parse("2020-01-01T00:00:00.001Z"))
                    .enum_(Enum.ONE)
                    .float32(1.1f)
                    .int_(1L)
                    .int32(1)
                    .int32Enum(Int32Enum.FIFTY_FIVE)
                    .intEnum(IntEnum.Second)
                    .num(1.1d)
                    .str("test")
                    .bigint(new BigInteger("8821239038968084"))
                    .bigintStr(new BigInteger("9223372036854775808"))
                    .boolOpt(true)
                    .decimal(new BigDecimal("3.141592653589793"))
                    .decimalStr(new BigDecimal("3.14159265358979344719667586"))
                    .float64Str("1.1")
                    .int64Str("100")
                    .strOpt("testOptional")
                    .build())
                .objParamExploded(SimpleObject.builder()
                    .any("any")
                    .bool(true)
                    .date(LocalDate.parse("2020-01-01"))
                    .dateTime(OffsetDateTime.parse("2020-01-01T00:00:00.001Z"))
                    .enum_(Enum.ONE)
                    .float32(1.1f)
                    .int_(1L)
                    .int32(1)
                    .int32Enum(Int32Enum.FIFTY_FIVE)
                    .intEnum(IntEnum.Second)
                    .num(1.1d)
                    .str("test")
                    .bigint(new BigInteger("8821239038968084"))
                    .bigintStr(new BigInteger("9223372036854775808"))
                    .boolOpt(true)
                    .decimal(new BigDecimal("3.141592653589793"))
                    .decimalStr(new BigDecimal("3.14159265358979344719667586"))
                    .float64Str("1.1")
                    .int64Str("100")
                    .strOpt("testOptional")
                    .build())
                .call();
assertEquals(200, res.statusCode());
    assertEquals(
        "http://localhost:35123/anything/pathParams/obj/any,any,bigint,8821239038968084,bigintStr,9223372036854775808,bool,true,boolOpt,true,date,2020-01-01,dateTime,2020-01-01T00:00:00.001Z,decimal,3.141592653589793,decimalStr,3.14159265358979344719667586,enum,one,float32,1.1,float64Str,1.1,int,1,int32,1,int32Enum,55,int64Str,100,intEnum,2,num,1.1,str,test,strOpt,testOptional/objExploded/any=any,bigint=8821239038968084,bigintStr=9223372036854775808,bool=true,boolOpt=true,date=2020-01-01,dateTime=2020-01-01T00:00:00.001Z,decimal=3.141592653589793,decimalStr=3.14159265358979344719667586,enum=one,float32=1.1,float64Str=1.1,int=1,int32=1,int32Enum=55,int64Str=100,intEnum=2,num=1.1,str=test,strOpt=testOptional",
        Utils.sortSerializedMaps(res.res().get().url(), "(?:obj|objExploded)\\/(.*?)(?:\\/|$)", ","));
    }
    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testParameters_SimplePathParameterPrimitives() throws Exception {
        Utils.recordTest("parameters-simple-path-parameter-primitives");

        SDK sdk = SDK.builder()
                .security(Security.builder()
                    .apiKeyAuth("Token YOUR_API_KEY")
                    .build())
                .globalHeaderParam(true)
                .globalHiddenQueryParam("hello")
                .globalPathParam(100L)
                .globalQueryParam("some example global query param")
            .build();

        SimplePathParameterPrimitivesResponse res = sdk.parameters().simplePathParameterPrimitives()
                .boolParam(true)
                .intParam(1L)
                .numParam(1.1d)
                .strParam("test")
                .call();
assertEquals(200, res.statusCode());
    assertEquals(
        SimplePathParameterPrimitivesRes.builder()
    .url("http://localhost:35123/anything/pathParams/str/test/bool/true/int/1/num/1.1")
    .build(),
        res.res().get());
    }

}