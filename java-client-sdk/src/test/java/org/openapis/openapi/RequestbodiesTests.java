/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.lang.Exception;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.openapis.openapi.models.operations.RequestBodyDeprecatedRequestBodyRefPostResponse;
import org.openapis.openapi.models.operations.RequestBodyDeprecatedRequestBodyRefPostResponseBody;
import org.openapis.openapi.models.operations.RequestBodyPostMultipleContentTypesComponentFilteredDefaultTestRes;
import org.openapis.openapi.models.operations.RequestBodyPostMultipleContentTypesComponentFilteredDefaultTestResponse;
import org.openapis.openapi.models.operations.RequestBodyPostMultipleContentTypesComponentFilteredRes;
import org.openapis.openapi.models.operations.RequestBodyPostMultipleContentTypesComponentFilteredResponse;
import org.openapis.openapi.models.operations.RequestBodyPostNotNullableNotRequiredStringBodyResponse;
import org.openapis.openapi.models.operations.RequestBodyPostNotNullableNotRequiredStringBodyResponseBody;
import org.openapis.openapi.models.shared.DeprecatedObjectWithExample;
import org.openapis.openapi.models.shared.Enum;
import org.openapis.openapi.models.shared.Int32Enum;
import org.openapis.openapi.models.shared.IntEnum;
import org.openapis.openapi.models.shared.Security;
import org.openapis.openapi.models.shared.SimpleObject;
import org.openapis.openapi.utils.Utils;

public class RequestbodiesTests { 
    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testRequestbodies_RequestBodyDeprecatedRequestBodyRefPost() throws Exception {
        Utils.recordTest("request-bodies-deprecated-request-body-ref");

        SDK sdk = SDK.builder()
                .security(Security.builder()
                    .apiKeyAuth("Token YOUR_API_KEY")
                    .build())
                .globalHeaderParam(true)
                .globalHiddenQueryParam("hello")
                .globalPathParam(100L)
                .globalQueryParam("some example global query param")
            .build();

        DeprecatedObjectWithExample req = DeprecatedObjectWithExample.builder()
                .str("testvalue")
                .build();

        RequestBodyDeprecatedRequestBodyRefPostResponse res = sdk.requestBodies().requestBodyDeprecatedRequestBodyRefPost()
                .request(req)
                .call();

    assertEquals(200, res.statusCode());
        assertEquals(
            RequestBodyDeprecatedRequestBodyRefPostResponseBody.builder()
        .json(DeprecatedObjectWithExample.builder()
            .str("testvalue")
            .build())
        .build(),
            res.object().get());
    }
    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testRequestbodies_RequestBodyPostMultipleContentTypesComponentFilteredMultipartFormData() throws Exception {
        Utils.recordTest("request-bodies-post-multiple-content-types-component-filtered-multipart-form-data");

        SDK sdk = SDK.builder()
                .security(Security.builder()
                    .apiKeyAuth("Token YOUR_API_KEY")
                    .build())
                .globalHeaderParam(true)
                .globalHiddenQueryParam("hello")
                .globalPathParam(100L)
                .globalQueryParam("some example global query param")
            .build();

        SimpleObject req = SimpleObject.builder()
                .any("any")
                .bool(true)
                .date(LocalDate.parse("2020-01-01"))
                .dateTime(OffsetDateTime.parse("2020-01-01T00:00:00.001Z"))
                .enum_(Enum.ONE)
                .float32(1.1f)
                .int_(1L)
                .int32(1)
                .int32Enum(Int32Enum.FIFTY_FIVE)
                .intEnum(IntEnum.Second)
                .num(1.1d)
                .str("test")
                .bigint(new BigInteger("8821239038968084"))
                .bigintStr(new BigInteger("9223372036854775808"))
                .boolOpt(true)
                .decimal(new BigDecimal("3.141592653589793"))
                .decimalStr(new BigDecimal("3.14159265358979344719667586"))
                .float64Str("1.1")
                .int64Str("100")
                .strOpt("testOptional")
                .build();

        RequestBodyPostMultipleContentTypesComponentFilteredResponse res = sdk.requestBodies().requestBodyPostMultipleContentTypesComponentFiltered()
                .request(req)
                .call();

    assertEquals(200, res.statusCode());
        assertEquals(
            RequestBodyPostMultipleContentTypesComponentFilteredRes.builder()
        .json(SimpleObject.builder()
            .any("any")
            .bool(true)
            .date(LocalDate.parse("2020-01-01"))
            .dateTime(OffsetDateTime.parse("2020-01-01T00:00:00.001Z"))
            .enum_(Enum.ONE)
            .float32(1.1f)
            .int_(1L)
            .int32(1)
            .int32Enum(Int32Enum.FIFTY_FIVE)
            .intEnum(IntEnum.Second)
            .num(1.1d)
            .str("test")
            .bigint(new BigInteger("8821239038968084"))
            .bigintStr(new BigInteger("9223372036854775808"))
            .boolOpt(true)
            .decimal(new BigDecimal("3.141592653589793"))
            .decimalStr(new BigDecimal("3.14159265358979344719667586"))
            .float64Str("1.1")
            .int64Str("100")
            .strOpt("testOptional")
            .build())
        .build(),
            res.res().get());
    }
    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testRequestbodies_RequestBodyPostMultipleContentTypesComponentFilteredApplicationJson() throws Exception {
        Utils.recordTest("request-bodies-post-multiple-content-types-component-filtered-application-json");

        SDK sdk = SDK.builder()
                .security(Security.builder()
                    .apiKeyAuth("Token YOUR_API_KEY")
                    .build())
                .globalHeaderParam(true)
                .globalHiddenQueryParam("hello")
                .globalPathParam(100L)
                .globalQueryParam("some example global query param")
            .build();

        SimpleObject req = SimpleObject.builder()
                .any("any")
                .bool(true)
                .date(LocalDate.parse("2020-01-01"))
                .dateTime(OffsetDateTime.parse("2020-01-01T00:00:00.001Z"))
                .enum_(Enum.ONE)
                .float32(1.1f)
                .int_(1L)
                .int32(1)
                .int32Enum(Int32Enum.FIFTY_FIVE)
                .intEnum(IntEnum.Second)
                .num(1.1d)
                .str("test")
                .bigint(new BigInteger("8821239038968084"))
                .bigintStr(new BigInteger("9223372036854775808"))
                .boolOpt(true)
                .decimal(new BigDecimal("3.141592653589793"))
                .decimalStr(new BigDecimal("3.14159265358979344719667586"))
                .float64Str("1.1")
                .int64Str("100")
                .strOpt("testOptional")
                .build();

        RequestBodyPostMultipleContentTypesComponentFilteredResponse res = sdk.requestBodies().requestBodyPostMultipleContentTypesComponentFiltered()
                .request(req)
                .call();

    assertEquals(200, res.statusCode());
        assertEquals(
            RequestBodyPostMultipleContentTypesComponentFilteredRes.builder()
        .json(SimpleObject.builder()
            .any("any")
            .bool(true)
            .date(LocalDate.parse("2020-01-01"))
            .dateTime(OffsetDateTime.parse("2020-01-01T00:00:00.001Z"))
            .enum_(Enum.ONE)
            .float32(1.1f)
            .int_(1L)
            .int32(1)
            .int32Enum(Int32Enum.FIFTY_FIVE)
            .intEnum(IntEnum.Second)
            .num(1.1d)
            .str("test")
            .bigint(new BigInteger("8821239038968084"))
            .bigintStr(new BigInteger("9223372036854775808"))
            .boolOpt(true)
            .decimal(new BigDecimal("3.141592653589793"))
            .decimalStr(new BigDecimal("3.14159265358979344719667586"))
            .float64Str("1.1")
            .int64Str("100")
            .strOpt("testOptional")
            .build())
        .build(),
            res.res().get());
    }
    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testRequestbodies_RequestBodyPostMultipleContentTypesComponentFilteredDefaultTest() throws Exception {


        SDK sdk = SDK.builder()
                .security(Security.builder()
                    .apiKeyAuth("Token YOUR_API_KEY")
                    .build())
                .globalHeaderParam(true)
                .globalHiddenQueryParam("hello")
                .globalPathParam(100L)
                .globalQueryParam("some example global query param")
            .build();

        SimpleObject req = SimpleObject.builder()
                .any("any")
                .bool(true)
                .date(LocalDate.parse("2020-01-01"))
                .dateTime(OffsetDateTime.parse("2020-01-01T00:00:00.001Z"))
                .enum_(Enum.ONE)
                .float32(1.1f)
                .int_(1L)
                .int32(1)
                .int32Enum(Int32Enum.FIFTY_FIVE)
                .intEnum(IntEnum.Second)
                .num(1.1d)
                .str("test")
                .bigint(new BigInteger("8821239038968084"))
                .bigintStr(new BigInteger("9223372036854775808"))
                .boolOpt(true)
                .decimal(new BigDecimal("3.141592653589793"))
                .decimalStr(new BigDecimal("3.14159265358979344719667586"))
                .float64Str("1.1")
                .int64Str("100")
                .strOpt("testOptional")
                .build();

        RequestBodyPostMultipleContentTypesComponentFilteredDefaultTestResponse res = sdk.requestBodies().requestBodyPostMultipleContentTypesComponentFilteredDefaultTest()
                .request(req)
                .call();

    assertEquals(200, res.statusCode());
        assertEquals(
            RequestBodyPostMultipleContentTypesComponentFilteredDefaultTestRes.builder()
        .json(SimpleObject.builder()
            .any("any")
            .bool(true)
            .date(LocalDate.parse("2020-01-01"))
            .dateTime(OffsetDateTime.parse("2020-01-01T00:00:00.001Z"))
            .enum_(Enum.ONE)
            .float32(1.1f)
            .int_(1L)
            .int32(1)
            .int32Enum(Int32Enum.FIFTY_FIVE)
            .intEnum(IntEnum.Second)
            .num(1.1d)
            .str("test")
            .bigint(new BigInteger("8821239038968084"))
            .bigintStr(new BigInteger("9223372036854775808"))
            .boolOpt(true)
            .decimal(new BigDecimal("3.141592653589793"))
            .decimalStr(new BigDecimal("3.14159265358979344719667586"))
            .float64Str("1.1")
            .int64Str("100")
            .strOpt("testOptional")
            .build())
        .build(),
            res.res().get());
    }
    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testRequestbodies_RequestBodyPostNotNullableNotRequiredStringBody() throws Exception {
        Utils.recordTest("request-bodies-post-not-nullable-not-required-string-body");

        SDK sdk = SDK.builder()
                .security(Security.builder()
                    .apiKeyAuth("Token YOUR_API_KEY")
                    .build())
                .globalHeaderParam(true)
                .globalHiddenQueryParam("hello")
                .globalPathParam(100L)
                .globalQueryParam("some example global query param")
            .build();

        RequestBodyPostNotNullableNotRequiredStringBodyResponse res = sdk.requestBodies().requestBodyPostNotNullableNotRequiredStringBody()
                .call();

    assertEquals(200, res.statusCode());
        assertEquals(
            RequestBodyPostNotNullableNotRequiredStringBodyResponseBody.builder()
        .data("")
        .build(),
            res.object().get());
    }

}