/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.clientcredentials.openapi;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.net.HttpURLConnection;
import java.net.http.HttpRequest;
import java.util.Arrays;
import java.util.Optional;
import java.util.Random;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.openapis.clientcredentials.openapi.hooks.ClientCredentialsHook;
import org.openapis.clientcredentials.openapi.models.errors.AuthException;
import org.openapis.clientcredentials.openapi.models.operations.AuthenticatedRequestResponse;
import org.openapis.clientcredentials.openapi.models.shared.Security;
import org.openapis.clientcredentials.openapi.utils.HTTPClient;
import org.openapis.clientcredentials.openapi.utils.Hook.BeforeRequestContext;
import org.openapis.clientcredentials.openapi.utils.Hook.BeforeRequestContextImpl;
import org.openapis.clientcredentials.openapi.utils.Hook.SdkInitData;
import org.openapis.openapi.CommonHelpers;

public final class ClientCredentialsAdditionalTest {

    private static final Random RANDOM = new Random();

    @Test
    public void testClientCredentialsHookSuccessfullyAuthenticates() throws Exception {
        CommonHelpers.recordTest("hooks-client-credentials-success");

        SDK sdk = SDK.builder() //
                .security(Security.builder() //
                        .clientID("speakeasy-sdks") //
                        .clientSecret("supersecret-" + nextId()) //
                        .build()) //
                .build();
        {
            AuthenticatedRequestResponse res = sdk.authenticatedRequest().call();
            assertEquals(HttpURLConnection.HTTP_OK, res.statusCode());
        }
        {
            AuthenticatedRequestResponse res = sdk.authenticatedRequest().call();
            assertEquals(HttpURLConnection.HTTP_OK, res.statusCode());
        }
    }

    @Test
    public void testClientCredentialsHookSuccessfullyAuthenticatesWithAltTokenURL()
            throws Exception {
        CommonHelpers.recordTest("hooks-client-credentials-success-alt-token-url");

        SDK sdk = SDK.builder() //
                .security(Security.builder() //
                        .clientID("speakeasy-sdks") //
                        .clientSecret("supersecret-" + nextId()) //
                        .tokenURL("/clientcredentials/alt/token") //
                        .build()) //
                .build();
        {
            AuthenticatedRequestResponse res = sdk.authenticatedRequest().call();
            assertEquals(HttpURLConnection.HTTP_OK, res.statusCode());
        }
        {
            AuthenticatedRequestResponse res = sdk.authenticatedRequest().call();
            assertEquals(HttpURLConnection.HTTP_OK, res.statusCode());
        }
    }

    @Test
    public void testClientCredentialsHookAuthenticationFails() throws Exception {
        SDK sdk = SDK.builder() //
                .security(Security.builder() //
                        .clientID("speakeasy-sdks") //
                        .clientSecret("badsecret") //
                        .build()) //
                .build();
        assertThrows(AuthException.class, () -> sdk.authenticatedRequest().call());
    }

    private static String nextId() {
        String s = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
        int idLength = 10;
        return IntStream //
                .range(0, idLength) //
                .mapToObj(i -> String.valueOf(s.charAt(RANDOM.nextInt(s.length())))) //
                .collect(Collectors.joining());
    }

    @Test
    public void testRequestUntouchedIfOauthScopesNotPresent() throws Exception {
        ClientCredentialsHook hook = new ClientCredentialsHook();
        HTTPClient client = Mockito.mock(HTTPClient.class);
        hook.sdkInit(new SdkInitData("http://localhost", client));
        HttpRequest request = Mockito.mock(HttpRequest.class);

        BeforeRequestContext c =
                new BeforeRequestContextImpl("operationId", Optional.empty(), Optional.empty());
        assertEquals(request, hook.beforeRequest(c, request));
    }

    @Test
    public void testRequestUntouchedIfSecuritySourceNotPresent() throws Exception {
        ClientCredentialsHook hook = new ClientCredentialsHook();
        HTTPClient client = Mockito.mock(HTTPClient.class);
        hook.sdkInit(new SdkInitData("http://localhost", client));
        HttpRequest request = Mockito.mock(HttpRequest.class);

        BeforeRequestContext c = new BeforeRequestContextImpl("operationId",
                Optional.of(Arrays.asList("read")), Optional.empty());
        assertEquals(request, hook.beforeRequest(c, request));
    }

}
