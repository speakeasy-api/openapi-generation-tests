/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.clientcredentials.openapi.hooks;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.time.OffsetDateTime;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.openapis.clientcredentials.openapi.hooks.ClientCredentialsHook.Credentials;
import org.openapis.clientcredentials.openapi.hooks.ClientCredentialsHook.Session;

public class ClientCredentialsHookTest {

    @Test
    public void testIsExpiredWhenNoTokenExpiryKnown() {
        assertTrue(ClientCredentialsHook.hasTokenExpired(Optional.empty(), OffsetDateTime.now()));
    }

    @Test
    public void testNotExpiredWhenTokenExpiryMoreThanThresholdSecondsInFuture() {
        OffsetDateTime now = OffsetDateTime.now();
        OffsetDateTime expiry = now.plus(ClientCredentialsHook.REFRESH_BEFORE_EXPIRY_SECONDS + 1, ChronoUnit.SECONDS);
        assertFalse(ClientCredentialsHook.hasTokenExpired(Optional.of(expiry), now));
    }

    @Test
    public void testIsExpiredWhenTokenExpiryLessThanThresholdSecondsInFuture() {
        OffsetDateTime now = OffsetDateTime.now();
        OffsetDateTime expiry = now.plus(ClientCredentialsHook.REFRESH_BEFORE_EXPIRY_SECONDS / 2, ChronoUnit.SECONDS);
        assertTrue(ClientCredentialsHook.hasTokenExpired(Optional.of(expiry), now));
    }

    @Test
    public void testShouldCreateNewSessionIfNoSessionPresent() {
        assertTrue(ClientCredentialsHook.shouldCreateNewSession(Optional.empty(), Optional.of(List.of("read"))));
    }

    @Test
    public void testShouldCreateNewSessionIfSessionPresentAndScopesNotMatched() {
        Session session = new Session(new Credentials( //
                "id", "secret", "http://localhost:8080/authenticate"), //
                Optional.of("token"), //
                List.of("read", "write"), //s
                Optional.of(OffsetDateTime.now().plus(1, ChronoUnit.DAYS)));
        assertTrue(ClientCredentialsHook.shouldCreateNewSession(Optional.of(session), Optional.of(List.of("read", "explode"))));
        assertFalse(ClientCredentialsHook.shouldCreateNewSession(Optional.of(session), Optional.of(List.of("read"))));
    }
    
    @Test
    public void testShouldCreateNewSessionIfSessionPresentAndAllScopesFoundInSession() {
        Session session = new Session(new Credentials( //
                "id", "secret", "http://localhost:8080/authenticate"), //
                Optional.of("token"), //
                List.of("read", "write"), //
                Optional.of(OffsetDateTime.now().plus(1, ChronoUnit.DAYS)));
        assertFalse(ClientCredentialsHook.shouldCreateNewSession(Optional.of(session), Optional.of(List.of("read"))));
    }
    
    @Test
    public void testShouldCreateNewSessionIfSessionPresentButExpired() {
        Session session = new Session(new Credentials( //
                "id", "secret", "http://localhost:8080/authenticate"), //
                Optional.of("token"), //
                List.of("read", "write"), //
                Optional.of(OffsetDateTime.now().plus(-1, ChronoUnit.DAYS)));
        assertTrue(ClientCredentialsHook.shouldCreateNewSession(Optional.of(session), Optional.of(List.of("read"))));
    }

}
