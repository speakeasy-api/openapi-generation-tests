/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.openapis.openapi.CommonHelpers.recordTest;

import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.openapis.openapi.models.operations.ApiKeyAuthGlobalResponse;
import org.openapis.openapi.models.operations.BasicAuthNewResponse;
import org.openapis.openapi.models.operations.BasicAuthNewSecurity;
import org.openapis.openapi.models.operations.BearerAuthResponse;
import org.openapis.openapi.models.operations.BearerAuthSecurity;
import org.openapis.openapi.models.operations.GlobalBearerAuthResponse;
import org.openapis.openapi.models.operations.MultipleMixedOptionsAuthResponse;
import org.openapis.openapi.models.operations.MultipleMixedOptionsAuthSecurity;
import org.openapis.openapi.models.operations.MultipleMixedSchemeAuthResponse;
import org.openapis.openapi.models.operations.MultipleMixedSchemeAuthSecurity;
import org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthResponse;
import org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthSecurity;
import org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthSecurityOption1;
import org.openapis.openapi.models.operations.MultipleOptionsWithMixedSchemesAuthSecurityOption2;
import org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthResponse;
import org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthSecurity;
import org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthSecurityOption1;
import org.openapis.openapi.models.operations.MultipleOptionsWithSimpleSchemesAuthSecurityOption2;
import org.openapis.openapi.models.operations.MultipleSimpleOptionsAuthResponse;
import org.openapis.openapi.models.operations.MultipleSimpleOptionsAuthSecurity;
import org.openapis.openapi.models.operations.MultipleSimpleSchemeAuthResponse;
import org.openapis.openapi.models.operations.MultipleSimpleSchemeAuthSecurity;
import org.openapis.openapi.models.operations.Oauth2AuthNewResponse;
import org.openapis.openapi.models.operations.OpenIdConnectAuthNewResponse;
import org.openapis.openapi.models.operations.OpenIdConnectAuthNewSecurity;
import org.openapis.openapi.models.shared.AuthServiceRequestBody;
import org.openapis.openapi.models.shared.BasicAuth;
import org.openapis.openapi.models.shared.HeaderAuth;
import org.openapis.openapi.models.shared.SchemeBasicAuth;
import org.openapis.openapi.models.shared.Security;

public class AuthAdditionalTest {
    @Test
    void testBasicAuth() throws Exception {
        recordTest("auth-basic-auth");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        BasicAuthNewResponse res = s.authNew().basicAuthNew()
                .request(AuthServiceRequestBody.builder()
                        .basicAuth(BasicAuth.builder().username("testUser").password("testPass")
                                .build())
                        .build())
                .security(BasicAuthNewSecurity.builder().username("testUser").password("testPass")
                        .build())
                .call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
    }

    @Test
    void testBasicAuthEmpty() throws Exception {
        recordTest("auth-basic-auth-empty");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        BasicAuthNewResponse res = s.authNew()
            .basicAuthNew()
            .request(AuthServiceRequestBody.builder()
                        .basicAuth(BasicAuth.builder()
                                .username("")
                                .password("")
                                .build())
                        .build())
            .security(BasicAuthNewSecurity.builder()
                    .username("")
                    .password("")
                    .build())
            .call();
        
        assertNotNull(res);
        assertEquals(200, res.statusCode());
    }

    @Test
    void testBasicAuthUsernameOnly() throws Exception {
        recordTest("auth-basic-auth-username-only");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        BasicAuthNewResponse res = s.authNew()
            .basicAuthNew()
            .request(AuthServiceRequestBody.builder()
                        .basicAuth(BasicAuth.builder()
                                .username("testUser")
                                .password("")
                                .build())
                        .build())
            .security(BasicAuthNewSecurity.builder()
                    .username("testUser")
                    .password("")
                    .build())
            .call();
        
        assertNotNull(res);
        assertEquals(200, res.statusCode());
    }

    @Test
    void testBasicAuthPasswordOnly() throws Exception {
        recordTest("auth-basic-auth-password-only");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        BasicAuthNewResponse res = s.authNew()
            .basicAuthNew()
            .request(AuthServiceRequestBody.builder()
                        .basicAuth(BasicAuth.builder()
                                .username("")
                                .password("testPass")
                                .build())
                        .build())
            .security(BasicAuthNewSecurity.builder()
                    .username("")
                    .password("testPass")
                    .build())
            .call();
        
        assertNotNull(res);
        assertEquals(200, res.statusCode());
    }

    @Test
    void testBasicAuthUsingConstructor() throws Exception {
        recordTest("auth-basic-auth");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        BasicAuthNewResponse res = s.authNew().basicAuthNew(
                AuthServiceRequestBody.builder()
                        .basicAuth(BasicAuth.builder().username("testUser").password("testPass")
                                .build())
                        .build(),
                BasicAuthNewSecurity.builder().username("testUser").password("testPass").build(),
                Optional.empty());

        assertNotNull(res);
        assertEquals(200, res.statusCode());
    }

    @Test
    void testApiKeyAuthGlobal() throws Exception {
        recordTest("auth-api-key-auth-global");

        SDK s = SDK.builder().security(Security.builder().apiKeyAuth("Bearer test_api_key").build())
                .build();
        assertNotNull(s);

        ApiKeyAuthGlobalResponse res = s.auth().apiKeyAuthGlobal().call();
        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertEquals("test_api_key", res.token().get().token());
    }

    @Test
    void testBearerAuthOperationWithPrefix() throws Exception {
        recordTest("auth-bearer-auth-operation-with-prefix");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        BearerAuthResponse res = s.auth().bearerAuth(new BearerAuthSecurity("Bearer testToken"));

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertTrue(res.token().get().authenticated());
        assertEquals("testToken", res.token().get().token());
    }

    @Test
    void testBearerAuthOperationWithoutPrefix() throws Exception {
        recordTest("auth-bearer-auth-operation-without-prefix");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        BearerAuthResponse res = s.auth().bearerAuth(new BearerAuthSecurity("testToken"));

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertTrue(res.token().get().authenticated());
        assertEquals("testToken", res.token().get().token());
    }

    @Test
    void testOauth2Auth() throws Exception {
        recordTest("auth-oauth2-auth");

        SDK s = SDK.builder().security(Security.builder().oauth2("Bearer testToken").build())
                .build();
        assertNotNull(s);

        Oauth2AuthNewResponse res =
                s.authNew().oauth2AuthNew()
                        .request(AuthServiceRequestBody.builder()
                                .headerAuth(List.of(HeaderAuth.builder().headerName("Authorization")
                                        .expectedValue("Bearer testToken").build()))
                                .build())
                        .call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
    }

    @Test
    void testOpenIdConnectAuth() throws Exception {
        recordTest("auth-open-id-connect-auth");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        OpenIdConnectAuthNewResponse res = s.authNew().openIdConnectAuthNew()
                .request(AuthServiceRequestBody.builder()
                        .headerAuth(List.of(HeaderAuth.builder().headerName("Authorization")
                                .expectedValue("Bearer testToken").build()))
                        .build())
                .security(OpenIdConnectAuthNewSecurity.builder().openIdConnect("Bearer testToken")
                        .build())
                .call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
    }

    @Test
    void testMultipleSimpleSchemeAuth() throws Exception {
        recordTest("auth-multiple-simple-scheme-auth");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        MultipleSimpleSchemeAuthResponse res = s.authNew().multipleSimpleSchemeAuth()
                .request(AuthServiceRequestBody.builder()
                        .headerAuth(List.of(HeaderAuth.builder().headerName("x-api-key")
                                .expectedValue("test_api_key").build()))
                        .build())
                .security(MultipleSimpleSchemeAuthSecurity.builder().oauth2("Bearer testToken")
                        .apiKeyAuthNew("test_api_key").build())
                .call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
    }

    @Test
    void testMultipleMixedSchemeAuth() throws Exception {
        recordTest("auth-multiple-mixed-scheme-auth");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        MultipleMixedSchemeAuthResponse res = s.authNew().multipleMixedSchemeAuth()
                .request(AuthServiceRequestBody.builder()
                        .headerAuth(List.of(HeaderAuth.builder().headerName("x-api-key")
                                .expectedValue("test_api_key").build()))
                        .basicAuth(BasicAuth.builder().username("testUser").password("testPass")
                                .build())
                        .build())
                .security(MultipleMixedSchemeAuthSecurity.builder()
                        .basicAuth(SchemeBasicAuth.builder().username("testUser")
                                .password("testPass").build())
                        .apiKeyAuthNew("test_api_key").build())
                .call();
        assertNotNull(res);
        assertEquals(200, res.statusCode());
    }

    @Test
    void testMultipleSimpleOptionsAuthFirstOption() throws Exception {
        recordTest("auth-multiple-simple-options-auth-first-option");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        MultipleSimpleOptionsAuthResponse res = s.authNew().multipleSimpleOptionsAuth()
                .request(AuthServiceRequestBody.builder()
                        .headerAuth(List.of(HeaderAuth.builder().headerName("x-api-key")
                                .expectedValue("test_api_key").build()))
                        .build())
                .security(MultipleSimpleOptionsAuthSecurity.builder().apiKeyAuthNew("test_api_key")
                        .build())
                .call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
    }

    @Test
    void testMultipleSimpleOptionsAuthSecondOption() throws Exception {
        recordTest("auth-multiple-simple-options-auth-second-option");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        MultipleSimpleOptionsAuthResponse res = s.authNew().multipleSimpleOptionsAuth()
                .request(AuthServiceRequestBody.builder()
                        .headerAuth(List.of(HeaderAuth.builder().headerName("Authorization")
                                .expectedValue("Bearer testToken").build()))
                        .build())
                .security(MultipleSimpleOptionsAuthSecurity.builder().oauth2("Bearer testToken")
                        .build())
                .call();
        assertNotNull(res);
        assertEquals(200, res.statusCode());
    }

    @Test
    void testMultipleMixedOptionsAuthFirstOption() throws Exception {
        recordTest("auth-multiple-mixed-options-auth-first-option");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        MultipleMixedOptionsAuthResponse res = s.authNew().multipleMixedOptionsAuth()
                .request(AuthServiceRequestBody.builder()
                        .headerAuth(List.of(HeaderAuth.builder().headerName("x-api-key")
                                .expectedValue("test_api_key").build()))
                        .build())
                .security(MultipleMixedOptionsAuthSecurity.builder().apiKeyAuthNew("test_api_key")
                        .build())
                .call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
    }

    @Test
    void testMultipleMixedOptionsAuthSecondOption() throws Exception {
        recordTest("auth-multiple-mixed-options-auth-second-option");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        MultipleMixedOptionsAuthResponse res =
                s.authNew().multipleMixedOptionsAuth()
                        .request(AuthServiceRequestBody.builder()
                                .basicAuth(BasicAuth.builder().username("testUser")
                                        .password("testPass").build())
                                .build())
                        .security(
                                MultipleMixedOptionsAuthSecurity
                                        .builder().basicAuth(SchemeBasicAuth.builder()
                                                .username("testUser").password("testPass").build())
                                        .build())
                        .call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
    }

    @Test
    void testMultipleOptionsWithSimpleSchemesAuthFirstOption() throws Exception {
        recordTest("auth-multiple-options-with-simple-schemes-auth-first-option");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        MultipleOptionsWithSimpleSchemesAuthResponse res = s.authNew()
                .multipleOptionsWithSimpleSchemesAuth()
                .request(AuthServiceRequestBody.builder()
                        .headerAuth(List.of(
                                HeaderAuth.builder().headerName("x-api-key")
                                        .expectedValue("test_api_key").build(),
                                HeaderAuth.builder().headerName("Authorization")
                                        .expectedValue("Bearer testToken").build()))
                        .build())
                .security(MultipleOptionsWithSimpleSchemesAuthSecurity.builder()
                        .option1(MultipleOptionsWithSimpleSchemesAuthSecurityOption1.builder()
                                .oauth2("Bearer testToken").apiKeyAuthNew("test_api_key").build())
                        .build())
                .call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
    }

    @Test
    void testMultipleOptionsWithSimpleSchemesAuthSecondOption() throws Exception {
        recordTest("auth-multiple-options-with-simple-schemes-auth-second-option");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        MultipleOptionsWithSimpleSchemesAuthResponse res = s.authNew()
                .multipleOptionsWithSimpleSchemesAuth()
                .request(AuthServiceRequestBody.builder()
                        .headerAuth(List.of(
                                HeaderAuth.builder().headerName("x-api-key")
                                        .expectedValue("test_api_key").build(),
                                HeaderAuth.builder().headerName("Authorization")
                                        .expectedValue("Bearer testToken").build()))
                        .build())
                .security(MultipleOptionsWithSimpleSchemesAuthSecurity.builder()
                        .option2(MultipleOptionsWithSimpleSchemesAuthSecurityOption2.builder()
                                .apiKeyAuthNew("test_api_key").openIdConnect("Bearer testToken")
                                .build())
                        .build())
                .call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
    }

    @Test
    void testMultipleOptionsWithMixedSchemesAuthFirstOption() throws Exception {
        recordTest("auth-multiple-options-with-mixed-schemes-auth-first-option");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        MultipleOptionsWithMixedSchemesAuthResponse res = s.authNew()
                .multipleOptionsWithMixedSchemesAuth()
                .request(AuthServiceRequestBody.builder()
                        .headerAuth(List.of(
                                HeaderAuth.builder().headerName("x-api-key")
                                        .expectedValue("test_api_key").build(),
                                HeaderAuth.builder().headerName("Authorization")
                                        .expectedValue("Bearer testToken").build()))
                        .build())
                .security(MultipleOptionsWithMixedSchemesAuthSecurity.builder()
                        .option1(MultipleOptionsWithMixedSchemesAuthSecurityOption1.builder()
                                .apiKeyAuthNew("test_api_key").oauth2("Bearer testToken").build())
                        .build())
                .call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
    }

    @Test
    void testMultipleOptionsWithMixedSchemesAuthSecondOption() throws Exception {
        recordTest("auth-multiple-options-with-mixed-schemes-auth-second-option");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        MultipleOptionsWithMixedSchemesAuthResponse res =
                s.authNew().multipleOptionsWithMixedSchemesAuth()
                        .request(AuthServiceRequestBody.builder()
                                .headerAuth(List.of(HeaderAuth.builder().headerName("x-api-key")
                                        .expectedValue("test_api_key").build()))
                                .basicAuth(BasicAuth.builder().username("testUser")
                                        .password("testPass").build())
                                .build())
                        .security(MultipleOptionsWithMixedSchemesAuthSecurity.builder()
                                .option2(MultipleOptionsWithMixedSchemesAuthSecurityOption2
                                        .builder().apiKeyAuthNew("test_api_key")
                                        .basicAuth(SchemeBasicAuth.builder().username("testUser")
                                                .password("testPass").build())
                                        .build())
                                .build())
                        .call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
    }

    @Test
    void testFunctionCallbacksForOAuthSupportGlobalSecurity() throws Exception {
        recordTest("auth-function-callbacks-oauth-global-security");

        SDK s = SDK.builder()
                .securitySource(
                        SecuritySource.of(Security.builder().oauth2("Bearer global").build()))
                .build();
        assertNotNull(s);

        GlobalBearerAuthResponse res = s.auth().globalBearerAuth().call();

        assertNotNull(res);
        assertEquals("global", res.token().get().token());
    }

}
