/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.openapis.openapi.models.errors.APIException;
import org.openapis.openapi.models.operations.StatusGetErrorResponse;
import org.openapis.openapi.models.operations.StatusGetXSpeakeasyErrorsResponse;

public class ErrorAdditionalTest {
    @Test
    void testStatusGetErrorDefaultErrorCodes() throws Exception {
        CommonHelpers.recordTest("errors-status-get-error-default-error-codes");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        APIException thrown = assertThrows(APIException.class, () -> {
            StatusGetErrorResponse res = s.errors().statusGetError(400l);
        });
        assertEquals(400, thrown.code());
        assertEquals(400, thrown.rawResponse().statusCode());

    }

    @Test
    void testStatusGetError300NonError() throws Exception {
        CommonHelpers.recordTest("errors-status-get-error300-non-error");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        StatusGetErrorResponse res = s.errors().statusGetError(300l);
        assertEquals(300, res.statusCode());
    }

    @Test
    void testStatusGetXSpeakeasyErrors() throws Exception {
        CommonHelpers.recordTest("errors-status-get-error-x-speakeasy-errors");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        APIException thrown = assertThrows(APIException.class, () -> {
            StatusGetXSpeakeasyErrorsResponse res =
                    s.errors().statusGetXSpeakeasyErrors(400l, Optional.empty());
        });
        assertTrue(thrown.message().contains("API error occurred"));
        assertEquals(400, thrown.code());
        assertEquals(400, thrown.rawResponse().statusCode());

        thrown = assertThrows(APIException.class, () -> {
            StatusGetXSpeakeasyErrorsResponse res =
                    s.errors().statusGetXSpeakeasyErrors(401l, Optional.empty());
        });
        assertTrue(thrown.message().contains("API error occurred"));
        assertEquals(401, thrown.code());
        assertEquals(401, thrown.rawResponse().statusCode());

        thrown = assertThrows(APIException.class, () -> {
            StatusGetXSpeakeasyErrorsResponse res =
                    s.errors().statusGetXSpeakeasyErrors(402l, Optional.empty());
        });
        assertTrue(thrown.message().contains("API error occurred"));
        assertEquals(402, thrown.code());
        assertEquals(402, thrown.rawResponse().statusCode());

        org.openapis.openapi.models.errors.Error eThrown =
                assertThrows(org.openapis.openapi.models.errors.Error.class, () -> {
                    StatusGetXSpeakeasyErrorsResponse res =
                            s.errors().statusGetXSpeakeasyErrors(500l, Optional.empty());
                });
        assertTrue(eThrown.message().get().contains("an error occurred"));
        assertEquals("500", eThrown.code().get());

        org.openapis.openapi.models.errors.StatusGetXSpeakeasyErrorsResponseBody oThrown =
                assertThrows(
                        org.openapis.openapi.models.errors.StatusGetXSpeakeasyErrorsResponseBody.class,
                        () -> {
                            StatusGetXSpeakeasyErrorsResponse res =
                                    s.errors().statusGetXSpeakeasyErrors(501l, Optional.empty());
                        });
        assertTrue(oThrown.message().get().contains("an error occurred"));
        assertEquals("501", oThrown.code().get());
        assertEquals(501, oThrown.rawResponse().get().statusCode());
    }

    @Test
    void testConnectionErrorGet() throws Exception {
        CommonHelpers.recordTest("errors-connection-error");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        java.net.ConnectException thrown = assertThrows(java.net.ConnectException.class, () -> {
            s.errors().connectionErrorGet().call();
        });
        assertNotNull(thrown);
    }
}
