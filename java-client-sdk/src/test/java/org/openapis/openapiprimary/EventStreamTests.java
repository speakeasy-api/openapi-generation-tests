/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.openapis.openapi.CommonHelpers.recordTest;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.junit.jupiter.api.Test;
import org.openapis.openapi.models.operations.ChatRequestBody;
import org.openapis.openapi.models.operations.ChatResponse;
import org.openapis.openapi.models.operations.DifferentDataSchemasResponse;
import org.openapis.openapi.models.operations.JsonResponse;
import org.openapis.openapi.models.operations.MultilineResponse;
import org.openapis.openapi.models.operations.RichResponse;
import org.openapis.openapi.models.operations.TextResponse;
import org.openapis.openapi.models.shared.ChatCompletionEvent;
import org.openapis.openapi.models.shared.ChatCompletionStream;
import org.openapis.openapi.models.shared.Data;
import org.openapis.openapi.models.shared.DifferentDataSchemas;
import org.openapis.openapi.models.shared.DifferentDataSchemasData;
import org.openapis.openapi.models.shared.Event;
import org.openapis.openapi.models.shared.HeartbeatEvent;
import org.openapis.openapi.models.shared.JsonEvent;
import org.openapis.openapi.models.shared.MessageEvent;
import org.openapis.openapi.models.shared.RichCompletionEvent;
import org.openapis.openapi.models.shared.RichCompletionEventData;
import org.openapis.openapi.models.shared.RichStream;
import org.openapis.openapi.models.shared.SentinelEvent;
import org.openapis.openapi.models.shared.StopReason;
import org.openapis.openapi.models.shared.TextEvent;
import org.openapis.openapi.models.shared.UrlEvent;
import org.openapis.openapi.utils.EventStream;
import org.openapis.openapi.utils.EventStreamMessage;
import org.openapis.openapi.utils.Utils;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;


public class EventStreamTests {
    
    @Test
    public void testJsonFromFullEventMessage() throws JsonProcessingException {
        String json = Utils.json(
                new EventStreamMessage(Optional.of("event1"), Optional.of("id1"), Optional.of(123), "some data"),
                new ObjectMapper(), true);
        assertEquals("{\"event\":\"event1\",\"id\":\"id1\",\"retry\":123,\"data\":\"some data\"}", json);
    }
    
    @Test
    public void testJsonFromEmptyEventMessage() throws JsonProcessingException {
        String json = Utils.json(
                new EventStreamMessage(Optional.empty(), Optional.empty(), Optional.empty(), ""),
                new ObjectMapper(), true);
        assertEquals("{\"data\":\"\"}", json);
    }

    @Test
    public void testEventStreamJSONData() throws Exception {
        recordTest("event-stream-json-data");
        SDK s = SDK.builder().build();
        JsonResponse res = s.eventstreams().json().call();
        assertEquals("text/event-stream", res.contentType());
        assertEquals(HttpURLConnection.HTTP_OK, res.statusCode());
        try (EventStream<JsonEvent> events = res.events()) {
            List<JsonEvent> list = events.stream().collect(Collectors.toList());
            assertEquals(4, list.size());
            String content = list //
                    .stream() //
                    .map(x -> x.data().content()) //
                    .collect(Collectors.joining());
            assertEquals("Hello world!", content);
            // before closure will be empty once stream traversed once
            assertFalse(events.next().isPresent());
        }
        // after closure will throw
        assertThrows(IOException.class, () -> res.events().next());
    }

    @Test
    public void testEventStreamJSONDataWithoutJavaUtilStream() throws Exception {
        SDK s = SDK.builder().build();
        JsonResponse res = s.eventstreams().json().call();
        assertEquals("text/event-stream", res.contentType());
        assertEquals(HttpURLConnection.HTTP_OK, res.statusCode());
        try (EventStream<JsonEvent> events = res.events()) {
            List<JsonEvent> list = new ArrayList<>();
            Optional<JsonEvent> event;
            String content = "";
            while ((event = events.next()).isPresent()) {
                list.add(event.get());
                content += event.get().data().content();
            }
            assertEquals(4, list.size());
            assertEquals("Hello world!", content);
        }
    }

    @Test
    public void testEventStreamTextData() throws Exception {
        recordTest("event-stream-text-data");
        SDK s = SDK.builder().build();
        TextResponse res = s.eventstreams().text().call();
        assertEquals("text/event-stream", res.contentType());
        assertEquals(HttpURLConnection.HTTP_OK, res.statusCode());
        List<TextEvent> list = res.events().toList();
        assertEquals(4, list.size());
        String content = list //
                .stream() //
                .map(x -> x.data()) //
                .collect(Collectors.joining());
        assertEquals("Hello world!", content);
    }

    @Test
    public void testEventStreamMultilineData() throws Exception {
        recordTest("event-stream-multiline-data");
        SDK s = SDK.builder().build();
        MultilineResponse res = s.eventstreams().multiline().call();
        assertEquals("text/event-stream", res.contentType());
        assertEquals(HttpURLConnection.HTTP_OK, res.statusCode());
        List<TextEvent> list = res.events().toList();
        assertEquals(1, list.size());
        String content = list //
                .stream() //
                .map(x -> x.data()) //
                .collect(Collectors.joining());
        assertEquals("YHOO\n+2\n10", content);
    }

    @Test
    public void testEventStreamRichEvents() throws Exception {
        recordTest("event-stream-rich-events");
        SDK s = SDK.builder().build();
        RichResponse res = s.eventstreams().rich().call();
        assertEquals("text/event-stream", res.contentType());
        assertEquals(HttpURLConnection.HTTP_OK, res.statusCode());
        List<RichStream> list = res.events().toList();
        assertEquals(3, list.size());
        assertEquals(RichCompletionEvent.builder() //
                .id("job-1") //
                .data(RichCompletionEventData.builder() //
                        .completion("Hello") //
                        .model("jeeves-1") //
                        .build()) //
                .build(), list.get(0));
        assertEquals(HeartbeatEvent.builder() //
                .data("ping") //
                .retry(3000) //
                .build(), //
                list.get(1));
        assertEquals(RichCompletionEvent.builder() //
                .id("job-1") //
                .data(RichCompletionEventData.builder() //
                        .completion("world!") //
                        .model("jeeves-1") //
                        .stopReason(StopReason.STOP_SEQUENCE) //
                        .build()) //
                .build(), //
                list.get(2));
    }

    @Test
    public void testEventStreamWithSentinelEvents() throws Exception {
        recordTest("event-stream-chat-sentinel-event");
        SDK s = SDK.builder().build();
        ChatResponse res = s.eventstreams().chat() //
                .request(ChatRequestBody.builder() //
                        .prompt("Print test content") //
                        .build()) //
                .call();
        assertEquals("text/event-stream", res.contentType());
        assertEquals(HttpURLConnection.HTTP_OK, res.statusCode());
        List<ChatCompletionStream> list = res.events().toList();
        assertEquals(5, list.size());
        assertEquals(ChatCompletionEvent.builder() //
                .data(Data.builder() //
                        .content("Hello") //
                        .build()) //
                .build(), //
                list.get(0).value());
        assertEquals(ChatCompletionEvent.builder() //
                .data(Data.builder() //
                        .content(" ") //
                        .build()) //
                .build(), //
                list.get(1).value());
        assertEquals(ChatCompletionEvent.builder() //
                .data(Data.builder() //
                        .content("world") //
                        .build()) //
                .build(), //
                list.get(2).value());
        assertEquals(ChatCompletionEvent.builder() //
                .data(Data.builder() //
                        .content("!") //
                        .build()) //
                .build(), //
                list.get(3).value());
        assertEquals(SentinelEvent.builder().build(), list.get(4).value());
    }

    @Test
    public void testEventStreamWithDifferentDataSchemas() throws Exception {
        recordTest("event-stream-different-data-schemas");
        SDK s = SDK.builder().build();
        DifferentDataSchemasResponse res = s.eventstreams().differentDataSchemas().call();
        List<DifferentDataSchemas> list = res.events().toList();
        assertEquals(3, list.size());
        assertEquals(DifferentDataSchemas.builder() //
                .id("event-1") //
                .data(DifferentDataSchemasData.of( //
                        MessageEvent.builder() //
                                .content("Here is your url") //
                                .build())) //
                .event(Event.MESSAGE) //
                .build(), //
                list.get(0));
        assertEquals(DifferentDataSchemas.builder() //
                .id("event-2") //
                .data(DifferentDataSchemasData.of( //
                        UrlEvent.builder() //
                                .url("https://example.com") //
                                .build())) //
                .event(Event.URL) //
                .build(), //
                list.get(1));
        assertEquals(DifferentDataSchemas.builder() //
                .id("event-3") //
                .data(DifferentDataSchemasData.of( //
                        MessageEvent.builder() //
                                .content("Have a great day!") //
                                .build())) //
                .event(Event.MESSAGE) //
                .build(), //
                list.get(2));
    }
}
