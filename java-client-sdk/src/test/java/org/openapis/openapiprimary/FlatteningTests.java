/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.Test;
import org.openapis.openapi.models.operations.*;
import org.openapis.openapi.models.shared.SimpleObject;

public class FlatteningTests {
    @Test
    void testComponentBodyAndParamNoConflict() throws Exception {
        CommonHelpers.recordTest("flattening-component-body-and-param-no-conflict");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        SimpleObject obj = Helpers.createSimpleObject();

        ComponentBodyAndParamNoConflictResponse res = s.flattening()
                .componentBodyAndParamNoConflict("param test", obj);

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertEquals("param test", res.res().get().args().get("paramStr"));
        Helpers.assertSimpleObject(res.res().get().json());
    }

    @Test
    void testComponentBodyAndParamConflict() throws Exception {
        CommonHelpers.recordTest("flattening-component-body-and-param-conflict");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        SimpleObject obj = Helpers.createSimpleObject();

        ComponentBodyAndParamConflictResponse res = s.flattening()
                .componentBodyAndParamConflict(obj, "param test");

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertEquals("param test", res.res().get().args().get("str"));
        Helpers.assertSimpleObject(res.res().get().json());
    }

    @Test
    void testInlineBodyAndParamConflict() throws Exception {
        CommonHelpers.recordTest("flattening-inline-body-and-param-conflict");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        InlineBodyAndParamConflictResponse res = s.flattening()
                .inlineBodyAndParamConflict(new InlineBodyAndParamConflictRequestBody("body test"), "param test");

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertEquals("param test", res.res().get().args().get("str"));
        assertEquals("body test", res.res().get().json().str());
    }

    @Test
    void testInlineBodyAndParamNoConflict() throws Exception {
        CommonHelpers.recordTest("flattening-inline-body-and-param-no-conflict");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        InlineBodyAndParamNoConflictResponse res = s.flattening()
                .inlineBodyAndParamNoConflict(new InlineBodyAndParamNoConflictRequestBody("body test"), "param test");

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertEquals("param test", res.res().get().args().get("paramStr"));
        assertEquals("body test", res.res().get().json().bodyStr());
    }

    @Test
    void testConflictingParams() throws Exception {
        CommonHelpers.recordTest("flattening-conflicting-params");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        ConflictingParamsResponse res = s.flattening()
                .conflictingParams("pathParam", "queryParam");

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertTrue(res.res().get().url().contains("/pathParam?"));
        assertEquals("queryParam", res.res().get().args().get("str"));
    }
}
