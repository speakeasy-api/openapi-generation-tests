/* 
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

package org.openapis.openapi;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;

import org.openapis.openapi.models.shared.Any;
import org.openapis.openapi.models.shared.AnyVal;
import org.openapis.openapi.models.shared.DeepObject;
import org.openapis.openapi.models.shared.DeepObjectCamelCase;
import org.openapis.openapi.models.shared.Enum;
import org.openapis.openapi.models.shared.Int32Enum;
import org.openapis.openapi.models.shared.Int32EnumVal;
import org.openapis.openapi.models.shared.IntEnum;
import org.openapis.openapi.models.shared.IntEnumVal;
import org.openapis.openapi.models.shared.SimpleObject;
import org.openapis.openapi.models.shared.SimpleObjectCamelCase;
import org.openapis.openapi.utils.JSON;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;

public class Helpers {
    public static SimpleObject createSimpleObject() {
        return SimpleObject.builder()
                .any("any") 
                .bool(true)
                .date(LocalDate.parse("2020-01-01"))
                .dateTime(OffsetDateTime.parse("2020-01-01T00:00:00.000000001Z"))
                .enum_(Enum.ONE)
                .float32(1.1f)
                .int_(1L)
                .int32(1)
                .int32Enum(Int32Enum.FIFTY_FIVE)
                .intEnum(IntEnum.Second)
                .num(1.1)
                .str("test")
                .strOpt("testOptional")
                .boolOpt(true)
                .build();
    }

    public static SimpleObjectCamelCase createSimpleObjectCamelCase() {
            return SimpleObjectCamelCase.builder()
                    .anyVal("any") 
                    .boolVal(true)
                    .dateVal(LocalDate.parse("2020-01-01"))
                    .dateTimeVal(OffsetDateTime.parse("2020-01-01T00:00:00.000000001Z"))
                    .enumVal(Enum.ONE)
                    .float32Val(1.1f)
                    .bigintVal(BigInteger.ONE)
                    .intVal(1L)
                    .int32Val(1)
                    .int32EnumVal(Int32EnumVal.FIFTY_FIVE)
                    .intEnumVal(IntEnumVal.Second)
                    .decimalVal(BigDecimal.valueOf(1.1))
                    .numVal(1.1)
                    .strVal("test")
                    .strOptVal("testOptional")
                    .boolOptVal(true)
                    .build();
    }

    @SuppressWarnings("serial")
    public static DeepObject createDeepObject() {
        return DeepObject.builder()
                .any(Any.of(Helpers.createSimpleObject()))
                .arr(List.of(Helpers.createSimpleObject(), Helpers.createSimpleObject()))
                .bool(true)
                .int_(1L)
                .map(new HashMap<String, SimpleObject>() {{
                    put("key", Helpers.createSimpleObject());
                }})
                .num(1.1)
                .obj(Helpers.createSimpleObject())
                .str("test")
                .build();
    }

    @SuppressWarnings("serial")
    public static DeepObjectCamelCase createDeepObjectCamelCase() {
        return DeepObjectCamelCase.builder()
                .anyVal(AnyVal.of(Helpers.createSimpleObjectCamelCase()))
                .arrVal(List.of(Helpers.createSimpleObjectCamelCase(), Helpers.createSimpleObjectCamelCase()))
                .boolVal(true)
                .intVal(1L)
                .mapVal(new HashMap<String, SimpleObjectCamelCase>() {{
                    put("key", Helpers.createSimpleObjectCamelCase());
                }})
                .numVal(1.1)
                .objVal(Helpers.createSimpleObjectCamelCase())
                .strVal("test")
                .build();
    }

    public static byte[] getData() {
        return "{\r  \"some\": \"json\",\r  \"to\": \"be\",\r  \"uploaded\": \"in\",\r  \"a\": \"file\"\r}\r"
                .getBytes();
    }

    public static void assertSimpleObject(SimpleObject r) {
        SimpleObject l = createSimpleObject();
        assertEquals(l.any(), r.any());
        assertEquals(l.bool(), r.bool());
        assertEquals(l.boolOpt(), r.boolOpt());
        assertEquals(l.date(), r.date());
        assertEquals(l.dateTime(), r.dateTime());
        assertEquals(l.enum_(), r.enum_());
        assertEquals(l.float32(), r.float32());
        assertEquals(l.int32(), r.int32());
        assertFalse(r.intOptNull().isPresent());
        assertEquals(l.int_(), r.int_());
        assertEquals(l.num(), r.num());
        assertFalse(r.numOptNull().isPresent());
        assertEquals(l.str(), r.str());
        assertEquals(l.strOpt(), r.strOpt());
    }

    public static void assertSimpleObjectCamelCase(SimpleObjectCamelCase r) {
        SimpleObjectCamelCase l = createSimpleObjectCamelCase();
        assertEquals(l.anyVal(), r.anyVal());
        assertEquals(l.boolVal(), r.boolVal());
        assertEquals(l.boolOptVal(), r.boolOptVal());
        assertEquals(l.dateVal(), r.dateVal());
        assertEquals(l.dateTimeVal(), r.dateTimeVal());
        assertEquals(l.enumVal(), r.enumVal());
        assertEquals(l.float32Val(), r.float32Val());
        assertEquals(l.int32Val(), r.int32Val());
        assertFalse(r.intOptNullVal().isPresent());
        assertEquals(l.intVal(), r.intVal());
        assertEquals(l.numVal(), r.numVal());
        assertFalse(r.numOptNullVal().isPresent());
        assertEquals(l.strVal(), r.strVal());
        assertEquals(l.strOptVal(), r.strOptVal());
    }
    
    public static String json(Object o) {
        try {
            return JSON.getMapper().writerWithDefaultPrettyPrinter().writeValueAsString(o);
        } catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        }
    }

    public static void checkRoundTrip(Object o) {
        try {
            Object x = JSON.getMapper().readValue(json(o), o.getClass());
            if (o.getClass().isArray()) {
                assertArrayEquals((Object[]) o, (Object[]) x);
            } else {
                assertEquals(o, x);
            }
        } catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        }
    }
    
    public static JsonNode jsonTree(Object o) {
        try {
            return JSON.getMapper().readTree(json(o));
        } catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        }
    }
}
