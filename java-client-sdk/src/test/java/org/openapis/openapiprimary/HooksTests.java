/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.openapis.openapi.CommonHelpers.recordTest;

import org.junit.jupiter.api.Test;
import org.openapis.openapi.models.operations.AuthorizationHeaderModificationResponse;
import org.openapis.openapi.models.operations.TestHooksRes;
import org.openapis.openapi.models.operations.TestHooksResponse;
import org.openapis.openapi.models.shared.Security;

public class HooksTests {
    
    @Test
    void testHooks() throws Exception {
        recordTest("test-hooks");
        SDK s = SDK.builder() //
                .security(Security.builder() //
                        .apiKeyAuth("Token YOUR_API_KEY")
                        .build()) //
                .build();
        
        TestHooksResponse res = s.hooks().testHooks() //
                .someParam("someInitialValue") //
                .call();
        assertTrue(res.res().isPresent());
        TestHooksRes r = res.res().get();
        assertEquals("overridenParam", r.args().someParam());
        assertEquals("added by client", r.headers().clientLevelHeader().get());
        assertEquals("some-key", r.headers().idempotencyKey().get());
    }
    
    @Test
    void testHooksAfterResponse() throws Exception {
        recordTest("test-hooks-after-response");
        
        SDK s = SDK.builder() //
                .security(Security.builder() //
                        .apiKeyAuth("Token YOUR_API_KEY")
                        .build()) //
                .build();
        
        RuntimeException e = assertThrows(RuntimeException.class, () -> s.hooks().testHooksAfterResponse().call());
        assertEquals("validation failed", e.getMessage());
    }
    
    @Test
    void testHooksError() throws Exception {
        recordTest("test-hooks-error");
        SDK s = SDK.builder() //
                .security(Security.builder() //
                        .apiKeyAuth("Token YOUR_API_KEY")
                        .build()) //
                .build();
        Exception e = assertThrows(IllegalStateException.class, () -> s.hooks().testHooksError().call());
        assertEquals("special test error case", e.getMessage());
    }

    @Test
    public void testHooksAuthorizationHeaderModification() throws Exception {
        recordTest("hooks-authorization-header-modification");
        SDK s = SDK.builder() //
                .security(Security.builder() //
                        .apiKeyAuth("Bearer testToken")
                        .build()) //
                .build();
        AuthorizationHeaderModificationResponse res = s.hooks().authorizationHeaderModification().call();
        assertEquals(200, res.rawResponse().statusCode());
        assertTrue(res.token().get().authenticated());
        assertEquals("testToken modified", res.token().get().token());
    }
    
}
