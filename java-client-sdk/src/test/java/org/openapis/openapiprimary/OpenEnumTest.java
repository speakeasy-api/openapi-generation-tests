/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.openapis.openapi.CommonHelpers.recordTest;
import static org.openapis.openapi.utils.Utils.mapper;

import java.util.Arrays;
import java.util.Objects;

import org.junit.jupiter.api.Test;
import org.openapis.openapi.models.operations.OpenEnumsPostUnrecognizedResponse;
import org.openapis.openapi.models.shared.Color;
import org.openapis.openapi.models.shared.Color.ColorEnum;
import org.openapis.openapi.models.shared.HeroWidth;
import org.openapis.openapi.models.shared.HeroWidth.HeroWidthEnum;
import org.openapis.openapi.models.shared.Icon;
import org.openapis.openapi.models.shared.Theme;
import org.openapis.openapi.models.shared.ThemeRequestOpaque;

import com.fasterxml.jackson.core.JsonProcessingException;

public class OpenEnumTest {

    @Test
    public void testOpenEnumResponse() throws Exception {
        recordTest("open-enums-round-trip");

        assertEquals("tick", Icon.TICK.value());
        // make sure the that purple and 2160 are unknown values in the enums
        assertFalse(Arrays.stream(ColorEnum.values()).anyMatch(c -> "purple".equals(c.value())));
        assertFalse(Arrays.stream(HeroWidthEnum.values()).anyMatch(c -> c.value() == 2160));

        SDK sdk = SDK.builder().build();
        {
            // check open enum with unknown values

            OpenEnumsPostUnrecognizedResponse res = sdk.openEnums().openEnumsPostUnrecognized() //
                    .request(ThemeRequestOpaque.builder() //
                            .color("purple") //
                            .icon("tick") //
                            .heroWidth(2160) //
                            .build()) //
                    .call();

            Theme theme = res.themeResponse().get().json();
            Color color = theme.color().get();
            Icon icon = theme.icon().get();
            HeroWidth heroWidth = theme.heroWidth().get();
            assertFalse(color.isKnown());
            assertEquals("purple", color.value());
            assertEquals(Icon.TICK, icon);
            assertFalse(heroWidth.isKnown());
            assertEquals(2160, heroWidth.value());

            // check serialization of unknown values
            String json = mapper().writeValueAsString(theme);
            assertEquals(theme, mapper().readValue(json, Theme.class));
        }
        {
            // check open enum with known values

            OpenEnumsPostUnrecognizedResponse res = sdk.openEnums().openEnumsPostUnrecognized() //
                    .request(ThemeRequestOpaque.builder() //
                            .color("red") //
                            .icon("tick") //
                            .heroWidth(480) //
                            .build()) //
                    .call();

            Theme theme = res.themeResponse().get().json();
            Color color = theme.color().get();
            Icon icon = theme.icon().get();
            HeroWidth heroWidth = theme.heroWidth().get();
            assertTrue(color.isKnown());
            assertEquals(Color.RED, color);
            assertEquals(Icon.TICK, icon);
            assertTrue(heroWidth.isKnown());
            assertEquals(HeroWidth.FOUR_HUNDRED_AND_EIGHTY, heroWidth);

            // check serialization of known values
            String json = mapper().writeValueAsString(theme);
            assertEquals(theme, mapper().readValue(json, Theme.class));
        }
    }

    @Test
    public void testOpenEnumReferenceEquality() {
        // test with known enum
        assertTrue(Color.RED == Color.of("red"));
        // test with unknown enum
        assertTrue(Color.of("brown") == Color.of("brown"));
    }

    @Test
    public void testSerializationRoundTripKnownValue() throws JsonProcessingException {
        String json = mapper().writeValueAsString(Color.RED);
        assertEquals("\"red\"", json);
        assertEquals(Color.RED, mapper().readValue(json, Color.class));
    }

    @Test
    public void testSerializationRoundTripUnknownValue() throws JsonProcessingException {
        String json = mapper().writeValueAsString(Color.of("brown"));
        assertEquals("\"brown\"", json);
        assertEquals(Color.of("brown"), mapper().readValue(json, Color.class));
    }

    @Test
    public void testOpenEnumToString() {
        assertEquals("Color [value=red]", Color.RED.toString());
    }

    @Test
    public void testOpenEnumEquals() {
        // test with known enum
        assertEquals(Color.RED, Color.of("red"));
        // test with unknown enum
        assertEquals(Color.of("brown"), Color.of("brown"));
    }
    
    @Test
    public void testHashCode() {
        assertEquals(Objects.hash("red"), Color.RED.hashCode());
    }
}
