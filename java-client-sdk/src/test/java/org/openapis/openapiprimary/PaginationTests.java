/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.IOException;
import java.io.InputStream;
import java.net.URISyntaxException;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.junit.jupiter.api.Test;
import org.openapis.openapi.models.operations.PaginationCursorBodyRequestBody;
import org.openapis.openapi.models.operations.PaginationCursorBodyResponse;
import org.openapis.openapi.models.operations.PaginationCursorNonNumericResponse;
import org.openapis.openapi.models.operations.PaginationCursorParamsResponse;
import org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetBodyResponse;
import org.openapis.openapi.models.operations.PaginationLimitOffsetOffsetParamsResponse;
import org.openapis.openapi.models.operations.PaginationLimitOffsetPageBodyResponse;
import org.openapis.openapi.models.operations.PaginationLimitOffsetPageParamsResponse;
import org.openapis.openapi.models.operations.PaginationWithRetriesResponse;
import org.openapis.openapi.models.shared.LimitOffsetConfig;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

public class PaginationTests {

    @Test
    void paginationLimitOffsetPageParams() throws Exception {
        CommonHelpers.recordTest("pagination-limit-offset-page-params");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        long serverLimit = 20l;

        PaginationLimitOffsetPageParamsResponse res =
                s.pagination().paginationLimitOffsetPageParams().page(1).call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertEquals(serverLimit, res.res().get().resultArray().size());

        Optional<PaginationLimitOffsetPageParamsResponse> nextRes = res.next();
        assertTrue(nextRes.isPresent());
        res = nextRes.get();
        assertEquals(200, res.statusCode());
        assertEquals(0, res.res().get().resultArray().size());

        Optional<PaginationLimitOffsetPageParamsResponse> nullRes = res.next();
        assertFalse(nullRes.isPresent());
    }


    @Test
    void paginationLimitOffsetPageBody() throws Exception {
        CommonHelpers.recordTest("pagination-limit-offset-page-body");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        Long page = 1l;
        Long limit = 15l;


        LimitOffsetConfig request =
                new LimitOffsetConfig(Optional.of(limit), Optional.empty(), Optional.of(page));
        PaginationLimitOffsetPageBodyResponse res =
                s.pagination().paginationLimitOffsetPageBody(request, Optional.empty());

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertEquals(limit, res.res().get().resultArray().size());

        Optional<PaginationLimitOffsetPageBodyResponse> nextRes = res.next();
        assertTrue(nextRes.isPresent());
        res = nextRes.get();
        assertEquals(200, res.statusCode());
        assertTrue(limit > res.res().get().resultArray().size());

        Optional<PaginationLimitOffsetPageBodyResponse> nullRes = res.next();
        assertFalse(nullRes.isPresent());

    }

    @Test
    void paginationLimitOffsetOffsetParams() throws Exception {
        CommonHelpers.recordTest("pagination-limit-offset-offset-params");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        Long limit = 15l;
        Long offset = 0l;


        PaginationLimitOffsetOffsetParamsResponse res =
                s.pagination().paginationLimitOffsetOffsetParams(Optional.of(limit),
                        Optional.of(offset), Optional.empty());

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertEquals(limit, res.res().get().resultArray().size());

        Optional<PaginationLimitOffsetOffsetParamsResponse> nextRes = res.next();
        assertTrue(nextRes.isPresent());
        res = nextRes.get();
        assertEquals(200, res.statusCode());
        assertEquals(20l - limit, res.res().get().resultArray().size());

        Optional<PaginationLimitOffsetOffsetParamsResponse> nullRes = res.next();
        assertFalse(nullRes.isPresent());
    }

    @Test
    void paginationLimitOffsetOffsetBody() throws Exception {
        CommonHelpers.recordTest("pagination-limit-offset-offset-body");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        Long limit = 15l;
        Long offset = 0l;

        LimitOffsetConfig request =
                new LimitOffsetConfig(Optional.of(limit), Optional.of(offset), Optional.empty());
        PaginationLimitOffsetOffsetBodyResponse res =
                s.pagination().paginationLimitOffsetOffsetBody(request, Optional.empty());

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertEquals(limit, res.res().get().resultArray().size());

        Optional<PaginationLimitOffsetOffsetBodyResponse> nextRes = res.next();
        assertTrue(nextRes.isPresent());
        res = nextRes.get();
        assertEquals(200, res.statusCode());
        assertTrue(limit > res.res().get().resultArray().size());

        Optional<PaginationLimitOffsetOffsetBodyResponse> nullRes = res.next();
        assertFalse(nullRes.isPresent());
    }

    @Test
    void paginationCursorParams() throws Exception {
        CommonHelpers.recordTest("pagination-cursor-params");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        Long cursor = -1l;

        PaginationCursorParamsResponse res =
                s.pagination().paginationCursorParams(cursor, Optional.empty());

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertEquals(15, res.res().get().resultArray().size());

        Optional<PaginationCursorParamsResponse> nextRes = res.next();
        assertTrue(nextRes.isPresent());
        res = nextRes.get();
        assertEquals(200, res.statusCode());
        assertEquals(5, res.res().get().resultArray().size());

        Optional<PaginationCursorParamsResponse> penultimateRes = res.next();
        assertTrue(penultimateRes.isPresent());
        res = penultimateRes.get();
        assertEquals(200, res.statusCode());
        assertEquals(0, res.res().get().resultArray().size());

        Optional<PaginationCursorParamsResponse> nullRes = res.next();
        assertFalse(nullRes.isPresent());
    }

    @Test
    void paginationCursorBody() throws Exception {
        CommonHelpers.recordTest("pagination-cursor-body");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        Long cursor = -1l;

        PaginationCursorBodyRequestBody request = new PaginationCursorBodyRequestBody(cursor);

        PaginationCursorBodyResponse res =
                s.pagination().paginationCursorBody(request, Optional.empty());

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertEquals(15, res.res().get().resultArray().size());

        Optional<PaginationCursorBodyResponse> nextRes = res.next();
        assertTrue(nextRes.isPresent());
        res = nextRes.get();
        assertEquals(200, res.statusCode());
        assertEquals(5, res.res().get().resultArray().size());

        Optional<PaginationCursorBodyResponse> penultimateRes = res.next();
        assertTrue(penultimateRes.isPresent());
        res = penultimateRes.get();
        assertEquals(200, res.statusCode());
        assertEquals(0, res.res().get().resultArray().size());

        Optional<PaginationCursorBodyResponse> nullRes = res.next();
        assertFalse(nullRes.isPresent());
    }

    @Test
    void paginationCursorNonNumeric() throws Exception {
        CommonHelpers.recordTest("pagination-cursor-non-numeric");
        SDK s = SDK.builder().build();

        PaginationCursorNonNumericResponse res = s.pagination().paginationCursorNonNumeric().call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertEquals(15, res.res().get().resultArray().size());

        Optional<PaginationCursorNonNumericResponse> nextRes = res.next();
        assertTrue(nextRes.isPresent());
        res = nextRes.get();
        assertEquals(200, res.statusCode());
        assertEquals(5, res.res().get().resultArray().size());

        Optional<PaginationCursorNonNumericResponse> penultimateRes = res.next();
        assertTrue(penultimateRes.isPresent());
        res = penultimateRes.get();
        assertEquals(200, res.statusCode());
        assertEquals(0, res.res().get().resultArray().size());

        assertFalse(res.next().isPresent());
    }

    @Test
    void paginationCursorBodyAsStream() throws Exception {
        CommonHelpers.recordTest("pagination-cursor-body");

        SDK s = SDK.builder().build();

        long cursor = -1l;

        PaginationCursorBodyRequestBody request = new PaginationCursorBodyRequestBody(cursor);

        long pagesCount = s.pagination().paginationCursorBody().request(request).callAsStream()
                .flatMap(x -> x.res().stream()).count();
        assertEquals(3, pagesCount);

        long itemsCount = s.pagination().paginationCursorBody().request(request).callAsStream()
                .flatMap(x -> x.res().stream().flatMap(y -> y.resultArray().stream())).count();
        assertEquals(20, itemsCount);
    }
    
    @Test
    void paginationWithRetries() throws Exception {
        CommonHelpers.recordTest("pagination-with-retries");
        SpeakeasyHTTPClient client = new SpeakeasyHTTPClient();
        PaginationRecordingClient recordingClient = new PaginationRecordingClient(client);

        SDK s = SDK.builder().client(recordingClient).build();

        PaginationWithRetriesResponse res = s.pagination().paginationWithRetries() 
                .requestId(UUID.randomUUID().toString())
                .call();

        int count = 0;

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertEquals(15, res.res().get().resultArray().size());
        count += res.res().get().resultArray().size();

        Optional<PaginationWithRetriesResponse> nextRes = res.next();
        assertTrue(nextRes.isPresent());
        res = nextRes.get();
        assertEquals(200, res.statusCode());
        assertEquals(5, res.res().get().resultArray().size());
        count += res.res().get().resultArray().size();

        Optional<PaginationWithRetriesResponse> penultimateRes = res.next();
        assertTrue(penultimateRes.isPresent());
        res = penultimateRes.get();
        assertEquals(200, res.statusCode());
        assertEquals(0, res.res().get().resultArray().size());

        assertFalse(res.next().isPresent());

        assertEquals(20, count);

        var expected = List.of(
          "503:GET:/pagination/cursor_non_numeric",
          "503:GET:/pagination/cursor_non_numeric",
          "503:GET:/pagination/cursor_non_numeric",
          "200:GET:/pagination/cursor_non_numeric",
          "200:GET:/pagination/cursor_non_numeric",
          "200:GET:/pagination/cursor_non_numeric"
        );

        assertEquals(expected, recordingClient.log());
    }

    private static final class PaginationRecordingClient implements HTTPClient {
        private final HTTPClient client;
        private final List<String> log = new ArrayList<>();

        PaginationRecordingClient(HTTPClient client) {
            this.client = client;
        }

        @Override
        public HttpResponse<InputStream> send(HttpRequest request)
                throws IOException, InterruptedException, URISyntaxException {
            HttpResponse<InputStream> response = client.send(request);
            this.log.add(response.statusCode() + ":" + request.method() + ":" + request.uri().getPath());
            return response;
        }

        List<String> log() {
            return log;
        }
    }
    
}
