/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.apache.http.HttpStatus;
import org.junit.jupiter.api.Test;
import java.util.Arrays;
import java.io.InputStream;
import org.apache.commons.io.IOUtils;
import org.openapis.openapi.models.operations.File;
import org.openapis.openapi.models.operations.RequestBodyPutMultipartDifferentFileNameRequestBody;
import org.openapis.openapi.models.operations.OverriddenFieldNamesPostRequestBody;
import org.openapis.openapi.models.operations.OverriddenFieldNamesPostResponse;
import org.openapis.openapi.models.operations.DifferentFileName;
import org.openapis.openapi.models.operations.NullableRequiredEmptyObjectPostRequestBody;
import org.openapis.openapi.models.operations.NullableRequiredEmptyObjectPostResponse;
import org.openapis.openapi.models.operations.NullableRequiredEnum;
import org.openapis.openapi.models.operations.NullableRequiredPropertyPostRequestBody;
import org.openapis.openapi.models.operations.NullableRequiredPropertyPostResponse;
import org.openapis.openapi.models.operations.NullableRequiredSharedObjectPostRequestBody;
import org.openapis.openapi.models.operations.NullableRequiredSharedObjectPostResponse;
import org.openapis.openapi.models.operations.OverriddenFieldNamesPostJson;
import org.openapis.openapi.models.operations.RequestBodyPutMultipartDifferentFileNameResponse;
import org.openapis.openapi.models.operations.RequestBodyPostApplicationJsonArrayObjResponse;
import org.openapis.openapi.models.operations.RequestBodyPostApplicationJsonArrayCamelCaseResponse;
import org.openapis.openapi.models.operations.RequestBodyPostApplicationJsonDeepCamelCaseResponse;
import org.openapis.openapi.models.operations.RequestBodyPostApplicationJsonArrayOfArrayOfPrimitiveResponse;
import org.openapis.openapi.models.operations.RequestBodyPostApplicationJsonArrayOfArrayResponse;
import org.openapis.openapi.models.operations.RequestBodyPostApplicationJsonArrayOfArrayCamelCaseResponse;
import org.openapis.openapi.models.operations.RequestBodyPostApplicationJsonArrayOfMapResponse;
import org.openapis.openapi.models.operations.RequestBodyPostApplicationJsonMapCamelCaseResponse;
import org.openapis.openapi.models.operations.RequestBodyPostApplicationJsonMapOfMapCamelCaseResponse;
import org.openapis.openapi.models.operations.RequestBodyPostApplicationJsonMapOfArrayCamelCaseResponse;
import org.openapis.openapi.models.operations.RequestBodyPostApplicationJsonArrayOfPrimitiveResponse;
import org.openapis.openapi.models.operations.RequestBodyPostApplicationJsonArrayResponse;
import org.openapis.openapi.models.operations.RequestBodyPostApplicationJsonDeepResponse;
import org.openapis.openapi.models.operations.RequestBodyPostApplicationJsonMapObjResponse;
import org.openapis.openapi.models.operations.RequestBodyPostApplicationJsonMapOfArrayResponse;
import org.openapis.openapi.models.operations.RequestBodyPostApplicationJsonMapOfMapOfPrimitiveResponse;
import org.openapis.openapi.models.operations.RequestBodyPostApplicationJsonMapOfMapResponse;
import org.openapis.openapi.models.operations.RequestBodyPostApplicationJsonMapOfPrimitiveResponse;
import org.openapis.openapi.models.operations.RequestBodyPostApplicationJsonArrayObjCamelCaseResponse;
import org.openapis.openapi.models.operations.RequestBodyPostApplicationJsonMapResponse;
import org.openapis.openapi.models.operations.RequestBodyPostApplicationJsonMultipleJsonFilteredResponse;
import org.openapis.openapi.models.operations.RequestBodyPostApplicationJsonSimpleCamelCaseResponse;
import org.openapis.openapi.models.operations.RequestBodyPostApplicationJsonSimpleResponse;
import org.openapis.openapi.models.operations.RequestBodyPostApplicationJsonMapObjCamelCaseResponse;
import org.openapis.openapi.models.operations.RequestBodyPostApplicationJsonArrayOfMapCamelCaseResponse;
import org.openapis.openapi.models.operations.RequestBodyPostComplexNumberTypesRequest;
import org.openapis.openapi.models.operations.RequestBodyPostComplexNumberTypesResponse;
import org.openapis.openapi.models.operations.RequestBodyPostDefaultsAndConstsResponse;
import org.openapis.openapi.models.operations.RequestBodyPostEmptyObjectRequestBody;
import org.openapis.openapi.models.operations.RequestBodyPostEmptyObjectResponse;
import org.openapis.openapi.models.operations.RequestBodyPostFormDeepResponse;
import org.openapis.openapi.models.operations.RequestBodyPostFormMapPrimitiveResponse;
import org.openapis.openapi.models.operations.RequestBodyPostFormSimpleResponse;
import org.openapis.openapi.models.operations.RequestBodyPostJsonDataTypesArrayBigIntResponse;
import org.openapis.openapi.models.operations.RequestBodyPostJsonDataTypesArrayDecimalStrResponse;
import org.openapis.openapi.models.operations.RequestBodyPostJsonDataTypesBigIntResponse;
import org.openapis.openapi.models.operations.RequestBodyPostJsonDataTypesBigIntStrResponse;
import org.openapis.openapi.models.operations.RequestBodyPostJsonDataTypesDecimalResponse;
import org.openapis.openapi.models.operations.RequestBodyPostJsonDataTypesDecimalStrResponse;
import org.openapis.openapi.models.operations.RequestBodyPostJsonDataTypesMapBigIntStrResponse;
import org.openapis.openapi.models.operations.RequestBodyPostJsonDataTypesMapDecimalResponse;
import org.openapis.openapi.models.operations.RequestBodyPostMultipleContentTypesComponentFilteredResponse;
import org.openapis.openapi.models.operations.RequestBodyPostMultipleContentTypesInlineFilteredRequestBody;
import org.openapis.openapi.models.operations.RequestBodyPostMultipleContentTypesInlineFilteredResponse;
import org.openapis.openapi.models.operations.RequestBodyPostMultipleContentTypesSplitFormRequestBody;
import org.openapis.openapi.models.operations.RequestBodyPostMultipleContentTypesSplitFormResponse;
import org.openapis.openapi.models.operations.RequestBodyPostMultipleContentTypesSplitJsonRequestBody;
import org.openapis.openapi.models.operations.RequestBodyPostMultipleContentTypesSplitJsonResponse;
import org.openapis.openapi.models.operations.RequestBodyPostMultipleContentTypesSplitMultipartRequestBody;
import org.openapis.openapi.models.operations.RequestBodyPostMultipleContentTypesSplitMultipartResponse;
import org.openapis.openapi.models.operations.RequestBodyPostMultipleContentTypesSplitParamFormRequestBody;
import org.openapis.openapi.models.operations.RequestBodyPostMultipleContentTypesSplitParamFormResponse;
import org.openapis.openapi.models.operations.RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody;
import org.openapis.openapi.models.operations.RequestBodyPostMultipleContentTypesSplitParamJsonResponse;
import org.openapis.openapi.models.operations.RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody;
import org.openapis.openapi.models.operations.RequestBodyPostMultipleContentTypesSplitParamMultipartResponse;
import org.openapis.openapi.models.operations.RequestBodyPostNotNullableNotRequiredStringBodyResponse;
import org.openapis.openapi.models.operations.RequestBodyPostNullableNotRequiredStringBodyResponse;
import org.openapis.openapi.models.operations.RequestBodyPostNullableRequiredStringBodyResponse;
import org.openapis.openapi.models.operations.RequestBodyPutBytesResponse;
import org.openapis.openapi.models.operations.RequestBodyPutBytesWithParamsResponse;
import org.openapis.openapi.models.operations.RequestBodyPutMultipartDeepResponse;
import org.openapis.openapi.models.operations.RequestBodyPutMultipartFileRefRequestBody;
import org.openapis.openapi.models.operations.RequestBodyPutMultipartFileRefResponse;
import org.openapis.openapi.models.operations.RequestBodyPutMultipartFileRequestBody;
import org.openapis.openapi.models.operations.RequestBodyPutMultipartFileResponse;
import org.openapis.openapi.models.operations.RequestBodyPutMultipartSimpleResponse;
import org.openapis.openapi.models.operations.RequestBodyPutStringResponse;
import org.openapis.openapi.models.operations.RequestBodyPutStringWithParamsResponse;
import org.openapis.openapi.models.operations.RequestBodyReadAndWriteResponse;
import org.openapis.openapi.models.operations.RequestBodyReadOnlyInputResponse;
import org.openapis.openapi.models.operations.RequestBodyReadOnlyUnionResponse;
import org.openapis.openapi.models.operations.RequestBodyReadWriteOnlyUnionResponse;
import org.openapis.openapi.models.operations.RequestBodyWriteOnlyOutputResponse;
import org.openapis.openapi.models.operations.RequestBodyWriteOnlyResponse;
import org.openapis.openapi.models.operations.RequestBodyWriteOnlyUnionResponse;
import org.openapis.openapi.models.operations.RequiredObj;
import org.openapis.openapi.models.shared.*;
import org.openapis.openapi.models.shared.ComplexNumberTypes;
import org.openapis.openapi.models.shared.DeepObject;
import org.openapis.openapi.models.shared.DeepObjectCamelCase;
import org.openapis.openapi.models.shared.DefaultsAndConsts;
import org.openapis.openapi.models.shared.ConstEnumInt;
import org.openapis.openapi.utils.JSON;
import org.openapitools.jackson.nullable.JsonNullable;

import com.fasterxml.jackson.databind.ObjectMapper;

public class RequestBodiesAdditionalTest {
    @Test
    void testRequestBodyPostApplicationJsonSimple() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-application-json-simple");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        SimpleObject obj = Helpers.createSimpleObject();

        RequestBodyPostApplicationJsonSimpleResponse res =
                s.requestBodies().requestBodyPostApplicationJsonSimple(obj);

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res().get());
        Helpers.assertSimpleObject(res.res().get().json());
    }

    @Test
    void testRequestBodyPostApplicationJsonArray() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-application-json-array");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        SimpleObject obj = Helpers.createSimpleObject();

        RequestBodyPostApplicationJsonArrayResponse res = s.requestBodies()
                .requestBodyPostApplicationJsonArray().request(List.of(obj, obj)).call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertTrue(res.res().isPresent());
        assertEquals(res.res().get().size(), 2);
        Helpers.assertSimpleObject(res.res().get().get(0));
        Helpers.assertSimpleObject(res.res().get().get(1));
    }

    @Test
    void testRequestBodyPostApplicationJsonArrayCamelCase() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-application-json-array-camel-case");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        SimpleObjectCamelCase obj = Helpers.createSimpleObjectCamelCase();

        RequestBodyPostApplicationJsonArrayCamelCaseResponse res = s.requestBodies()
                .requestBodyPostApplicationJsonArrayCamelCase().request(List.of(obj, obj)).call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertTrue(res.res().isPresent());
        assertEquals(res.res().get().size(), 2);
        assertEquals(obj, res.res().get().get(0));
        assertEquals(obj, res.res().get().get(1));
    }


    @Test
    void testRequestBodyPostApplicationJsonArrayOfArray() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-application-json-array-of-array");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        SimpleObject obj = Helpers.createSimpleObject();

        RequestBodyPostApplicationJsonArrayOfArrayResponse res =
                s.requestBodies().requestBodyPostApplicationJsonArrayOfArray()
                        .request(List.of(List.of(obj, obj), List.of(obj, obj))).call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertTrue(res.res().isPresent());
        assertEquals(res.res().get().size(), 2);
        assertEquals(res.res().get().get(0).size(), 2);
        assertEquals(res.res().get().get(1).size(), 2);
        Helpers.assertSimpleObject(res.res().get().get(0).get(0));
        Helpers.assertSimpleObject(res.res().get().get(0).get(1));
        Helpers.assertSimpleObject(res.res().get().get(1).get(0));
        Helpers.assertSimpleObject(res.res().get().get(1).get(1));
    }

    @Test
    void testRequestBodyPostApplicationJsonArrayOfArrayCamelCase() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-application-json-array-of-array-camel-case");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        SimpleObjectCamelCase obj = Helpers.createSimpleObjectCamelCase();

        RequestBodyPostApplicationJsonArrayOfArrayCamelCaseResponse res =
                s.requestBodies().requestBodyPostApplicationJsonArrayOfArrayCamelCase()
                        .request(List.of(List.of(obj, obj), List.of(obj, obj))).call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertTrue(res.res().isPresent());
        assertEquals(res.res().get().size(), 2);
        assertEquals(res.res().get().get(0).size(), 2);
        assertEquals(res.res().get().get(1).size(), 2);
        assertEquals(obj, res.res().get().get(0).get(0));
        assertEquals(obj, res.res().get().get(0).get(1));
        assertEquals(obj, res.res().get().get(1).get(0));
        assertEquals(obj, res.res().get().get(1).get(1));
    }

    @Test
    void testRequestBodyPostApplicationJsonMap() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-application-json-map");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        SimpleObject obj = Helpers.createSimpleObject();

        RequestBodyPostApplicationJsonMapResponse res = s.requestBodies()
                .requestBodyPostApplicationJsonMap().request(new HashMap<String, SimpleObject>() {
                    {
                        put("mapElem1", obj);
                        put("mapElem2", obj);
                    }
                }).call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res());
        assertEquals(res.res().get().size(), 2);
        Helpers.assertSimpleObject(res.res().get().get("mapElem1"));
        Helpers.assertSimpleObject(res.res().get().get("mapElem2"));
    }

    @Test
    void testRequestBodyPostApplicationJsonMapCamelCase() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-application-json-map-camel-case");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        SimpleObjectCamelCase obj = Helpers.createSimpleObjectCamelCase();

        RequestBodyPostApplicationJsonMapCamelCaseResponse res =
                s.requestBodies().requestBodyPostApplicationJsonMapCamelCase()
                        .request(new HashMap<String, SimpleObjectCamelCase>() {
                            {
                                put("mapElem1", obj);
                                put("mapElem2", obj);
                            }
                        }).call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res());
        assertEquals(res.res().get().size(), 2);
        assertEquals(obj, res.res().get().get("mapElem1"));
        assertEquals(obj, res.res().get().get("mapElem2"));
    }

    @Test
    void testRequestBodyPostApplicationJsonMapOfMap() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-application-json-map-of-map");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        SimpleObject obj = Helpers.createSimpleObject();

        RequestBodyPostApplicationJsonMapOfMapResponse res =
                s.requestBodies().requestBodyPostApplicationJsonMapOfMap()
                        .request(new HashMap<String, Map<String, SimpleObject>>() {
                            {
                                put("mapElem1", new HashMap<String, SimpleObject>() {
                                    {
                                        put("subMapElem1", obj);
                                        put("subMapElem2", obj);
                                    }
                                });
                                put("mapElem2", new HashMap<String, SimpleObject>() {
                                    {
                                        put("subMapElem1", obj);
                                        put("subMapElem2", obj);
                                    }
                                });
                            }
                        }).call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res());
        assertEquals(res.res().get().size(), 2);
        assertEquals(res.res().get().get("mapElem1").size(), 2);
        assertEquals(res.res().get().get("mapElem2").size(), 2);
        Helpers.assertSimpleObject(res.res().get().get("mapElem1").get("subMapElem1"));
        Helpers.assertSimpleObject(res.res().get().get("mapElem1").get("subMapElem2"));
        Helpers.assertSimpleObject(res.res().get().get("mapElem2").get("subMapElem1"));
        Helpers.assertSimpleObject(res.res().get().get("mapElem2").get("subMapElem2"));
    }

    @Test
    void testRequestBodyPostApplicationJsonMapOfMapCamelCase() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-application-json-map-of-map-camel-case");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        SimpleObjectCamelCase obj = Helpers.createSimpleObjectCamelCase();

        RequestBodyPostApplicationJsonMapOfMapCamelCaseResponse res =
                s.requestBodies().requestBodyPostApplicationJsonMapOfMapCamelCase()
                        .request(new HashMap<String, Map<String, SimpleObjectCamelCase>>() {
                            {
                                put("mapElem1", new HashMap<String, SimpleObjectCamelCase>() {
                                    {
                                        put("subMapElem1", obj);
                                        put("subMapElem2", obj);
                                    }
                                });
                                put("mapElem2", new HashMap<String, SimpleObjectCamelCase>() {
                                    {
                                        put("subMapElem1", obj);
                                        put("subMapElem2", obj);
                                    }
                                });
                            }
                        }).call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res());
        assertEquals(res.res().get().size(), 2);
        assertEquals(res.res().get().get("mapElem1").size(), 2);
        assertEquals(res.res().get().get("mapElem2").size(), 2);
        assertEquals(obj, res.res().get().get("mapElem1").get("subMapElem1"));
        assertEquals(obj, res.res().get().get("mapElem1").get("subMapElem2"));
        assertEquals(obj, res.res().get().get("mapElem2").get("subMapElem1"));
        assertEquals(obj, res.res().get().get("mapElem2").get("subMapElem2"));
    }

    @Test
    void testRequestBodyPostApplicationJsonMapOfArray() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-application-json-map-of-array");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        SimpleObject obj = Helpers.createSimpleObject();

        RequestBodyPostApplicationJsonMapOfArrayResponse res =
                s.requestBodies().requestBodyPostApplicationJsonMapOfArray()
                        .request(new HashMap<String, List<SimpleObject>>() {
                            {
                                put("mapElem1", List.of(obj, obj));
                                put("mapElem2", List.of(obj, obj));
                            }
                        }).call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res());
        assertEquals(res.res().get().size(), 2);
        assertEquals(res.res().get().get("mapElem1").size(), 2);
        assertEquals(res.res().get().get("mapElem2").size(), 2);
        Helpers.assertSimpleObject(res.res().get().get("mapElem1").get(0));
        Helpers.assertSimpleObject(res.res().get().get("mapElem1").get(1));
        Helpers.assertSimpleObject(res.res().get().get("mapElem2").get(0));
        Helpers.assertSimpleObject(res.res().get().get("mapElem2").get(1));
    }

    @Test
    void testRequestBodyPostApplicationJsonMapOfArrayCamelCase() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-application-json-map-of-array-camel-case");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        SimpleObjectCamelCase obj = Helpers.createSimpleObjectCamelCase();

        RequestBodyPostApplicationJsonMapOfArrayCamelCaseResponse res =
                s.requestBodies().requestBodyPostApplicationJsonMapOfArrayCamelCase()
                        .request(new HashMap<String, List<SimpleObjectCamelCase>>() {
                            {
                                put("mapElem1", List.of(obj, obj));
                                put("mapElem2", List.of(obj, obj));
                            }
                        }).call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res());
        assertEquals(res.res().get().size(), 2);
        assertEquals(res.res().get().get("mapElem1").size(), 2);
        assertEquals(res.res().get().get("mapElem2").size(), 2);
        assertEquals(obj, res.res().get().get("mapElem1").get(0));
        assertEquals(obj, res.res().get().get("mapElem1").get(1));
        assertEquals(obj, res.res().get().get("mapElem2").get(0));
        assertEquals(obj, res.res().get().get("mapElem2").get(1));
    }

    @Test
    void testRequestBodyPostApplicationJsonArrayOfMap() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-application-json-array-of-map");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        SimpleObject obj = Helpers.createSimpleObject();

        List<Map<String, SimpleObject>> arrOfMaps = new ArrayList<>();
        for (int i = 0; i < 2; i++) {
            arrOfMaps.add(new HashMap<String, SimpleObject>());
            arrOfMaps.get(i).put("mapElem1", obj);
            arrOfMaps.get(i).put("mapElem2", obj);
        }

        RequestBodyPostApplicationJsonArrayOfMapResponse res = s.requestBodies()
                .requestBodyPostApplicationJsonArrayOfMap().request(arrOfMaps).call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertTrue(res.res().isPresent());
        assertEquals(res.res().get().size(), 2);
        assertEquals(res.res().get().get(0).size(), 2);
        assertEquals(res.res().get().get(1).size(), 2);
        Helpers.assertSimpleObject(res.res().get().get(0).get("mapElem1"));
        Helpers.assertSimpleObject(res.res().get().get(0).get("mapElem2"));
        Helpers.assertSimpleObject(res.res().get().get(1).get("mapElem1"));
        Helpers.assertSimpleObject(res.res().get().get(1).get("mapElem2"));
    }

    @Test
    void testRequestBodyPostApplicationJsonArrayOfMapCamelCase() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-application-json-array-of-map-camel-case");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        SimpleObjectCamelCase obj = Helpers.createSimpleObjectCamelCase();

        List<Map<String, SimpleObjectCamelCase>> arrOfMaps = new ArrayList<>();
        for (int i = 0; i < 2; i++) {
            arrOfMaps.add(new HashMap<String, SimpleObjectCamelCase>());
            arrOfMaps.get(i).put("mapElem1", obj);
            arrOfMaps.get(i).put("mapElem2", obj);
        }

        RequestBodyPostApplicationJsonArrayOfMapCamelCaseResponse res = s.requestBodies()
                .requestBodyPostApplicationJsonArrayOfMapCamelCase().request(arrOfMaps).call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertTrue(res.res().isPresent());
        assertEquals(res.res().get().size(), 2);
        assertEquals(res.res().get().get(0).size(), 2);
        assertEquals(res.res().get().get(1).size(), 2);
        assertEquals(obj, res.res().get().get(0).get("mapElem1"));
        assertEquals(obj, res.res().get().get(0).get("mapElem2"));
        assertEquals(obj, res.res().get().get(1).get("mapElem1"));
        assertEquals(obj, res.res().get().get(1).get("mapElem2"));
    }

    @Test
    void testRequestBodyPostApplicationJsonMapOfPrimitive() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-application-json-map-of-primitive");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        RequestBodyPostApplicationJsonMapOfPrimitiveResponse res =
                s.requestBodies().requestBodyPostApplicationJsonMapOfPrimitive()
                        .request(new HashMap<String, String>() {
                            {
                                put("mapElem1", "hello");
                                put("mapElem2", "world");
                            }
                        }).call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res());
        assertEquals(res.res().get().size(), 2);
        assertEquals(res.res().get().get("mapElem1"), "hello");
        assertEquals(res.res().get().get("mapElem2"), "world");
    }

    @Test
    void testRequestBodyPostApplicationJsonArrayOfPrimitive() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-application-json-array-of-primitive");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        RequestBodyPostApplicationJsonArrayOfPrimitiveResponse res =
                s.requestBodies().requestBodyPostApplicationJsonArrayOfPrimitive()
                        .request(List.of("hello", "world")).call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertTrue(res.res().isPresent());
        assertEquals(res.res().get().size(), 2);
        assertEquals(res.res().get().get(0), "hello");
        assertEquals(res.res().get().get(1), "world");
    }

    @Test
    void testRequestBodyPostApplicationJsonMapOfMapOfPrimitive() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-application-json-map-of-map-of-primitive");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        RequestBodyPostApplicationJsonMapOfMapOfPrimitiveResponse res =
                s.requestBodies().requestBodyPostApplicationJsonMapOfMapOfPrimitive()
                        .request(new HashMap<String, Map<String, String>>() {
                            {
                                put("mapElem1", new HashMap<String, String>() {
                                    {
                                        put("subMapElem1", "foo");
                                        put("subMapElem2", "bar");
                                    }
                                });
                                put("mapElem2", new HashMap<String, String>() {
                                    {
                                        put("subMapElem1", "buzz");
                                        put("subMapElem2", "bazz");
                                    }
                                });
                            }
                        }).call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res());
        assertEquals(res.res().get().size(), 2);
        assertEquals(res.res().get().get("mapElem1").size(), 2);
        assertEquals(res.res().get().get("mapElem2").size(), 2);
        assertEquals(res.res().get().get("mapElem1").get("subMapElem1"), "foo");
        assertEquals(res.res().get().get("mapElem1").get("subMapElem2"), "bar");
        assertEquals(res.res().get().get("mapElem2").get("subMapElem1"), "buzz");
        assertEquals(res.res().get().get("mapElem2").get("subMapElem2"), "bazz");
    }

    @Test
    void testRequestBodyPostApplicationJsonArrayOfArrayOfPrimitive() throws Exception {
        CommonHelpers
                .recordTest("request-bodies-post-application-json-array-of-array-of-primitive");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        RequestBodyPostApplicationJsonArrayOfArrayOfPrimitiveResponse res =
                s.requestBodies().requestBodyPostApplicationJsonArrayOfArrayOfPrimitive()
                        .request(List.of(List.of("foo", "bar"), List.of("buzz", "bazz"))).call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertTrue(res.res().isPresent());
        assertEquals(res.res().get().size(), 2);
        assertEquals(res.res().get().get(0).size(), 2);
        assertEquals(res.res().get().get(1).size(), 2);
        assertEquals(res.res().get().get(0).get(0), "foo");
        assertEquals(res.res().get().get(0).get(1), "bar");
        assertEquals(res.res().get().get(1).get(0), "buzz");
        assertEquals(res.res().get().get(1).get(1), "bazz");
    }

    @Test
    void testRequestBodyPostApplicationJsonArrayObject() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-application-json-array-object");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        SimpleObject obj = Helpers.createSimpleObject();

        RequestBodyPostApplicationJsonArrayObjResponse res =
                s.requestBodies().requestBodyPostApplicationJsonArrayObj(List.of(obj, obj));

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.arrObjValue());
        assertNotNull(res.arrObjValue().get().json().get());
        assertEquals(res.arrObjValue().get().json().get().size(), 2);
        Helpers.assertSimpleObject(res.arrObjValue().get().json().get().get(0));
        Helpers.assertSimpleObject(res.arrObjValue().get().json().get().get(1));
    }

    @Test
    void testRequestBodyPostApplicationJsonArrayObjectCamelCase() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-application-json-array-object-camel-case");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        SimpleObjectCamelCase obj = Helpers.createSimpleObjectCamelCase();

        RequestBodyPostApplicationJsonArrayObjCamelCaseResponse res = s.requestBodies()
                .requestBodyPostApplicationJsonArrayObjCamelCase(List.of(obj, obj));

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertTrue(res.arrObjValueCamelCase().isPresent());
        assertTrue(res.arrObjValueCamelCase().get().json().isPresent());
        assertEquals(res.arrObjValueCamelCase().get().json().get().size(), 2);
        assertEquals(obj, res.arrObjValueCamelCase().get().json().get().get(0));
        assertEquals(obj, res.arrObjValueCamelCase().get().json().get().get(1));
    }

    @Test
    void testRequestBodyPostApplicationJsonMapObject() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-application-json-map-object");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        SimpleObject obj = Helpers.createSimpleObject();

        RequestBodyPostApplicationJsonMapObjResponse res = s.requestBodies()
                .requestBodyPostApplicationJsonMapObj(new HashMap<String, SimpleObject>() {
                    {
                        put("mapElem1", obj);
                        put("mapElem2", obj);
                    }
                });

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.mapObjValue());
        assertNotNull(res.mapObjValue().get().json());
        assertEquals(res.mapObjValue().get().json().get().size(), 2);
        Helpers.assertSimpleObject(res.mapObjValue().get().json().get().get("mapElem1"));
        Helpers.assertSimpleObject(res.mapObjValue().get().json().get().get("mapElem2"));
    }

    @Test
    void testRequestBodyPostApplicationJsonMapObjectCamelCase() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-application-json-map-object-camel-case");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        SimpleObjectCamelCase obj = Helpers.createSimpleObjectCamelCase();

        RequestBodyPostApplicationJsonMapObjCamelCaseResponse res =
                s.requestBodies().requestBodyPostApplicationJsonMapObjCamelCase(
                        new HashMap<String, SimpleObjectCamelCase>() {
                            {
                                put("mapElem1", obj);
                                put("mapElem2", obj);
                            }
                        });

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.mapObjValueCamelCase());
        assertTrue(res.mapObjValueCamelCase().get().json().isPresent());
        assertEquals(res.mapObjValueCamelCase().get().json().get().size(), 2);
        assertEquals(obj, res.mapObjValueCamelCase().get().json().get().get("mapElem1"));
        assertEquals(obj, res.mapObjValueCamelCase().get().json().get().get("mapElem2"));
    }

    @Test
    void testRequestBodyPostApplicationJsonDeep() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-application-json-deep");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        DeepObject obj = Helpers.createDeepObject();

        RequestBodyPostApplicationJsonDeepResponse res =
                s.requestBodies().requestBodyPostApplicationJsonDeep(obj);

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res().get());
        assertEquals(obj, res.res().get().json().get());
    }

    @Test
    void testRequestBodyPostApplicationJsonDeepCamelCase() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-application-json-deep-camel-case");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        DeepObjectCamelCase obj = Helpers.createDeepObjectCamelCase();

        RequestBodyPostApplicationJsonDeepCamelCaseResponse res =
                s.requestBodies().requestBodyPostApplicationJsonDeepCamelCase(obj);

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res().get());
        assertEquals(obj, res.res().get().json().get());
    }


    @Test
    void testRequestBodyPostApplicationJsonMultipleJsonFiltered() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-application-json-multiple-json-filtered");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        SimpleObject obj = Helpers.createSimpleObject();

        RequestBodyPostApplicationJsonMultipleJsonFilteredResponse res =
                s.requestBodies().requestBodyPostApplicationJsonMultipleJsonFiltered(obj);

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res().get());
        Helpers.assertSimpleObject(res.res().get().json());
    }

    @Test
    void testRequestBodyPostMultipleContentTypesComponentFiltered() throws Exception {
        CommonHelpers.recordTest(
                "request-bodies-post-multiple-content-types-component-filtered-application-json");
        CommonHelpers.recordTest(
                "request-bodies-post-multiple-content-types-component-filtered-multipart-form-data");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        SimpleObject obj = Helpers.createSimpleObject();

        RequestBodyPostMultipleContentTypesComponentFilteredResponse res =
                s.requestBodies().requestBodyPostMultipleContentTypesComponentFiltered(obj);

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res().get());
        Helpers.assertSimpleObject(res.res().get().json());
    }

    @Test
    void testRequestBodyPostMultipleContentTypesInlineFiltered() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-multiple-content-types-inline-filtered");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        RequestBodyPostMultipleContentTypesInlineFilteredResponse res =
                s.requestBodies().requestBodyPostMultipleContentTypesInlineFiltered(
                        new RequestBodyPostMultipleContentTypesInlineFilteredRequestBody(true, 1.1,
                                "test"));

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res().get());
        assertEquals(new HashMap<>() {
            {
                put("bool", true);
                put("num", 1.1);
                put("str", "test");
            }
        }, res.res().get().json().get());
    }

    @Test
    void testRequestBodyPostMultipleContentTypesSplitJson() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-multiple-content-types-split-json");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        RequestBodyPostMultipleContentTypesSplitJsonResponse res =
                s.requestBodies().requestBodyPostMultipleContentTypesSplitJson(
                        new RequestBodyPostMultipleContentTypesSplitJsonRequestBody(true, 1.1,
                                "test"));

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res().get());
        assertEquals(new HashMap<>() {
            {
                put("bool", true);
                put("num", 1.1);
                put("str", "test");
            }
        }, res.res().get().json().get());
    }

    @Test
    void testRequestBodyPostMultipleContentTypesSplitMultipart() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-multiple-content-types-split-multipart");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        RequestBodyPostMultipleContentTypesSplitMultipartResponse res =
                s.requestBodies().requestBodyPostMultipleContentTypesSplitMultipart(
                        new RequestBodyPostMultipleContentTypesSplitMultipartRequestBody(true, 1.1,
                                "test"));

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res().get());
        assertEquals(new HashMap<>() {
            {
                put("bool2", "true");
                put("num2", "1.1");
                put("str2", "test");
            }
        }, res.res().get().form().get());
    }

    @Test
    void testRequestBodyPostMultipleContentTypesSplitForm() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-multiple-content-types-split-form");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        RequestBodyPostMultipleContentTypesSplitFormResponse res =
                s.requestBodies().requestBodyPostMultipleContentTypesSplitForm(
                        new RequestBodyPostMultipleContentTypesSplitFormRequestBody(true, 1.1,
                                "test"));

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res().get());
        assertEquals(new HashMap<>() {
            {
                put("bool3", "true");
                put("num3", "1.1");
                put("str3", "test");
            }
        }, res.res().get().form().get());
    }

    @Test
    void testRequestBodyPostMultipleContentTypesSplitJsonWithParam() throws Exception {
        CommonHelpers
                .recordTest("request-bodies-post-multiple-content-types-split-json-with-param");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody requestBody =
                new RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody(true, 1.1,
                        "test body");

        RequestBodyPostMultipleContentTypesSplitParamJsonResponse res = s.requestBodies()
                .requestBodyPostMultipleContentTypesSplitParamJson(requestBody, "test param");

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res().get());
        assertEquals(new HashMap<>() {
            {
                put("bool", true);
                put("num", 1.1);
                put("str", "test body");
            }
        }, res.res().get().json().get());
        assertEquals(new HashMap<>() {
            {
                put("paramStr", "test param");
            }
        }, res.res().get().args().get());
    }

    @Test
    void testRequestBodyPostMultipleContentTypesSplitMultipartWithParam() throws Exception {
        CommonHelpers.recordTest(
                "request-bodies-post-multiple-content-types-split-multipart-with-param");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody formData =
                new RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody(true, 1.1,
                        "test body");
        RequestBodyPostMultipleContentTypesSplitParamMultipartResponse res = s.requestBodies()
                .requestBodyPostMultipleContentTypesSplitParamMultipart(formData, "test param");

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res().get());
        assertEquals(new HashMap<>() {
            {
                put("bool2", "true");
                put("num2", "1.1");
                put("str2", "test body");
            }
        }, res.res().get().form().get());
        assertEquals(new HashMap<>() {
            {
                put("paramStr", "test param");
            }
        }, res.res().get().args().get());
    }

    @Test
    void testRequestBodyPostMultipleContentTypesSplitFormWithParam() throws Exception {
        CommonHelpers
                .recordTest("request-bodies-post-multiple-content-types-split-form-with-param");

        SDK s = SDK.builder().build();
        assertNotNull(s);
        RequestBodyPostMultipleContentTypesSplitParamFormRequestBody requestBody =
                new RequestBodyPostMultipleContentTypesSplitParamFormRequestBody(true, 1.1,
                        "test body");
        RequestBodyPostMultipleContentTypesSplitParamFormResponse res = s.requestBodies()
                .requestBodyPostMultipleContentTypesSplitParamForm(requestBody, "test param");

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res().get());
        assertEquals(new HashMap<>() {
            {
                put("bool3", "true");
                put("num3", "1.1");
                put("str3", "test body");
            }
        }, res.res().get().form().get());
        assertEquals(new HashMap<>() {
            {
                put("paramStr", "test param");
            }
        }, res.res().get().args().get());
    }

    @Test
    void testRequestBodyPutMultipartSimple() throws Exception {
        CommonHelpers.recordTest("request-bodies-put-multipart-simple");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        SimpleObject obj = Helpers.createSimpleObject();

        RequestBodyPutMultipartSimpleResponse res =
                s.requestBodies().requestBodyPutMultipartSimple(obj);

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res().get());
        assertEquals("any", res.res().get().form().any());
        assertEquals("true", res.res().get().form().bool());
        assertEquals("true", res.res().get().form().boolOpt().get());
        assertEquals("2020-01-01", res.res().get().form().date());
        assertEquals("2020-01-01T00:00:00.000000001Z", res.res().get().form().dateTime());
        assertEquals("one", res.res().get().form().enum_());
        assertEquals("1.1", res.res().get().form().float32());
        assertEquals("1", res.res().get().form().int_());
        assertEquals("1", res.res().get().form().int32());
        assertEquals("1.1", res.res().get().form().num());
        assertEquals("test", res.res().get().form().str());
        assertEquals("testOptional", res.res().get().form().strOpt().get());
    }

    @Test
    void testRequestBodyPutMultipartDeep() throws Exception {
        CommonHelpers.recordTest("request-bodies-put-multipart-deep");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        DeepObject obj = Helpers.createDeepObject();

        RequestBodyPutMultipartDeepResponse res =
                s.requestBodies().requestBodyPutMultipartDeep(obj);

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res().get());
        assertEquals(JSON.getMapper().writeValueAsString(obj.arr()), res.res().get().form().arr());
        assertEquals("true", res.res().get().form().bool());
        assertEquals("1", res.res().get().form().int_());
        assertEquals(JSON.getMapper().writeValueAsString(obj.map()), res.res().get().form().map());
        assertEquals("1.1", res.res().get().form().num());
        assertEquals(JSON.getMapper().writeValueAsString(obj.obj()), res.res().get().form().obj());
        assertEquals("test", res.res().get().form().str());
    }

    @Test
    void testRequestBodyPutMultipartDifferentFilename() throws Exception {
        CommonHelpers.recordTest("request-bodies-put-different-file-name");
        try (InputStream stream = getClass().getResourceAsStream("/testUpload.json")) {
            byte[] data = IOUtils.toByteArray(stream);

            SDK s = SDK.builder().build();
            DifferentFileName differentFileName = DifferentFileName.builder() //
                    .content(data) //
                    .fileName("testUpload.json") //
                    .build();
            RequestBodyPutMultipartDifferentFileNameResponse res =
                    s.requestBodies().requestBodyPutMultipartDifferentFileName(
                            RequestBodyPutMultipartDifferentFileNameRequestBody.builder() //
                                    .differentFileName(differentFileName) //
                                    .build());

            assertNotNull(res);
            assertEquals(200, res.statusCode());
            assertNotNull(res.res().get());
            assertTrue(Arrays.equals(data,
                    res.res().get().files().get("differentFileName").getBytes(StandardCharsets.UTF_8)));
        }
    }

    @Test
    void testRequestBodyPutMultipartFile() throws Exception {
        CommonHelpers.recordTest("request-bodies-put-multipart-file");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        byte[] data = Helpers.getData();

        RequestBodyPutMultipartFileResponse res = s.requestBodies()
                .requestBodyPutMultipartFile(RequestBodyPutMultipartFileRequestBody.builder()
                        .file(File.builder().content(data).fileName("testUpload.json").build())
                        .build());

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res().get());
        assertEquals(new HashMap<String, String>() {
            {
                put("file", new String(data, StandardCharsets.UTF_8));
            }
        }, res.res().get().files());
    }

    @Test
    void testRequestBodyPutMultipartFileRef() throws Exception {
        CommonHelpers.recordTest("request-bodies-put-multipart-file-ref");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        byte[] data = Helpers.getData();

        RequestBodyPutMultipartFileRefResponse res = s.requestBodies()
                .requestBodyPutMultipartFileRef(RequestBodyPutMultipartFileRefRequestBody.builder()
                        .file(BinaryString.builder().content(data).fileName("testUpload.json").build())
                        .build());

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res().get());
        assertEquals(new HashMap<String, String>() {
            {
                put("file", new String(data, StandardCharsets.UTF_8));
            }
        }, res.res().get().files());
    }

    @Test
    void testRequestBodyPostFormSimple() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-form-simple");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        SimpleObject obj = Helpers.createSimpleObject();

        RequestBodyPostFormSimpleResponse res = s.requestBodies().requestBodyPostFormSimple(obj);

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res().get());
        assertEquals("any", res.res().get().form().any());
        assertEquals("true", res.res().get().form().bool());
        assertEquals("true", res.res().get().form().boolOpt().get());
        assertEquals("2020-01-01", res.res().get().form().date());
        assertEquals("2020-01-01T00:00:00.000000001Z", res.res().get().form().dateTime());
        assertEquals("one", res.res().get().form().enum_());
        assertEquals("1.1", res.res().get().form().float32());
        assertEquals("1", res.res().get().form().int_());
        assertEquals("1", res.res().get().form().int32());
        assertEquals("1.1", res.res().get().form().num());
        assertEquals("test", res.res().get().form().str());
        assertEquals("testOptional", res.res().get().form().strOpt().get());
    }

    @Test
    void testRequestBodyPostFormDeep() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-form-deep");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        DeepObject obj = Helpers.createDeepObject();

        RequestBodyPostFormDeepResponse res = s.requestBodies().requestBodyPostFormDeep(obj);

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res().get());
        assertEquals(JSON.getMapper().writeValueAsString(obj.arr()), res.res().get().form().arr());
        assertEquals("true", res.res().get().form().bool());
        assertEquals("1", res.res().get().form().int_());
        assertEquals(JSON.getMapper().writeValueAsString(obj.map()), res.res().get().form().map());
        assertEquals("1.1", res.res().get().form().num());
        assertEquals(JSON.getMapper().writeValueAsString(obj.obj()), res.res().get().form().obj());
        assertEquals("test", res.res().get().form().str());
    }

    @Test
    void testRequestBodyPostFormMapPrimitive() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-form-map-primitive");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        Map<String, String> map = new HashMap<String, String>() {
            {
                put("key1", "value1");
                put("key2", "value2");
                put("key3", "value3");
            }
        };

        RequestBodyPostFormMapPrimitiveResponse res =
                s.requestBodies().requestBodyPostFormMapPrimitive(map);

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res().get());
        assertEquals(map, res.res().get().form());
    }

    @Test
    void testRequestBodyPutString() throws Exception {
        CommonHelpers.recordTest("request-bodies-put-string");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        String str = "Hello world";
        RequestBodyPutStringResponse res = s.requestBodies().requestBodyPutString(str);

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res().get());
        assertEquals(str, res.res().get().data());
    }

    @Test
    void testRequestBodyPutBytes() throws Exception {
        CommonHelpers.recordTest("request-bodies-put-bytes");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        byte[] data = Helpers.getData();
        RequestBodyPutBytesResponse res = s.requestBodies().requestBodyPutBytes(data);

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res().get());
        assertEquals(new String(data, StandardCharsets.UTF_8), res.res().get().data());
    }

    @Test
    void testRequestBodyPutStringWithParams() throws Exception {
        CommonHelpers.recordTest("request-bodies-put-string-with-params");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        String str = "Hello world";
        RequestBodyPutStringWithParamsResponse res =
                s.requestBodies().requestBodyPutStringWithParams(str, "test param");

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res().get());
        assertEquals(str, res.res().get().data());
        assertEquals("test param", res.res().get().args().queryStringParam());
    }

    @Test
    void testRequestBodyPutBytesWithParams() throws Exception {
        CommonHelpers.recordTest("request-bodies-put-bytes-with-params");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        byte[] data = Helpers.getData();
        RequestBodyPutBytesWithParamsResponse res =
                s.requestBodies().requestBodyPutBytesWithParams(data, "test param");

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res().get());
        assertEquals(new String(data, StandardCharsets.UTF_8), res.res().get().data());
        assertEquals("test param", res.res().get().args().queryStringParam());
    }

    @Test
    void testRequestBodyEmptyObject() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-empty-object");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        RequestBodyPostEmptyObjectResponse res = s.requestBodies().requestBodyPostEmptyObject(
                RequestBodyPostEmptyObjectRequestBody.builder().build());

        assertNotNull(res);
        assertEquals(200, res.statusCode());
    }

    @Test
    void testRequestBodyCamelCase() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-application-json-simple-camel-case");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        SimpleObjectCamelCase obj = Helpers.createSimpleObjectCamelCase();

        RequestBodyPostApplicationJsonSimpleCamelCaseResponse res =
                s.requestBodies().requestBodyPostApplicationJsonSimpleCamelCase(obj);

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.res().get());
        assertEquals(obj, res.res().get().json());
    }

    @Test
    void testRequestBodyReadOnlyInput() throws Exception {
        CommonHelpers.recordTest("request-bodies-read-only-input");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        RequestBodyReadOnlyInputResponse res = s.requestBodies().requestBodyReadOnlyInput()
                .request(new ReadOnlyObjectInput()).call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.readOnlyObject());
        assertEquals(true, res.readOnlyObject().get().bool());
        assertEquals(1.0, res.readOnlyObject().get().num());
        assertEquals("hello", res.readOnlyObject().get().string());
    }

    @Test
    void testRequestBodyWriteOnlyOutput() throws Exception {
        CommonHelpers.recordTest("request-bodies-write-only-output");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        RequestBodyWriteOnlyOutputResponse res = s.requestBodies().requestBodyWriteOnlyOutput()
                .request(new WriteOnlyObject(true, 1.0, "hello")).call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.writeOnlyObject());
    }

    @Test
    void testRequestBodyWriteOnly() throws Exception {
        CommonHelpers.recordTest("request-bodies-write-only");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        RequestBodyWriteOnlyResponse res = s.requestBodies().requestBodyWriteOnly()
                .request(new WriteOnlyObject(true, 1.0, "hello")).call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.readOnlyObject());
        assertEquals(true, res.readOnlyObject().get().bool());
        assertEquals(1.0, res.readOnlyObject().get().num());
        assertEquals("hello", res.readOnlyObject().get().string());
    }

    @Test
    void testRequestBodyReadAndWrite() throws Exception {
        CommonHelpers.recordTest("request-bodies-read-and-write");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        RequestBodyReadAndWriteResponse res = s.requestBodies().requestBodyReadAndWrite()
                .request(new ReadWriteObject(1l, 2l, 4l)).call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertNotNull(res.readWriteObject());
        assertEquals(4l, res.readWriteObject().get().num3());
        assertEquals(7l, res.readWriteObject().get().sum());
    }

    @Test
    void testRequestBodyPostNullableRequiredProperty_AllNull() throws Exception {
        // Note this test is spread across three tests:
        // testRequestBodyPostNullableRequiredProperty_AllNull
        // testRequestBodyPostNullableRequiredProperty_NotRequiredAbsent
        // testRequestBodyPostNullableRequiredProperty_AllPresent
        CommonHelpers.recordTest("request-bodies-post-nullable-required-property-all-null");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        NullableRequiredPropertyPostRequestBody req = NullableRequiredPropertyPostRequestBody
                .builder().nullableOptionalInt(JsonNullable.of(null))
                .nullableRequiredArray(Optional.empty()).nullableRequiredEnum(Optional.empty())
                .nullableRequiredInt(Optional.empty()).nullableRequiredDateTime(Optional.empty())
                .nullableRequiredBigIntStr(Optional.empty())
                .nullableRequiredDecimalStr(Optional.empty()).build();
        NullableRequiredPropertyPostResponse res =
                s.requestBodies().nullableRequiredPropertyPost().request(req).call();
        assertEquals(200, res.statusCode());

        assertEquals(
                "{\"NullableOptionalInt\":null,\"NullableRequiredArray\":null,\"NullableRequiredBigIntStr\":null,\"NullableRequiredDateTime\":null,\"NullableRequiredDecimalStr\":null,\"NullableRequiredEnum\":null,\"NullableRequiredInt\":null}",
                res.object().get().data().get());
    }

    @Test
    void testRequestBodyPostNullableRequiredProperty_NotRequiredAbsent() throws Exception {
        SDK s = SDK.builder().build();
        assertNotNull(s);

        NullableRequiredPropertyPostRequestBody req = NullableRequiredPropertyPostRequestBody
                .builder().nullableOptionalInt(JsonNullable.undefined())
                .nullableRequiredArray(Optional.empty()).nullableRequiredEnum(Optional.empty())
                .nullableRequiredInt(Optional.empty()).nullableRequiredDateTime(Optional.empty())
                .nullableRequiredBigIntStr(Optional.empty())
                .nullableRequiredDecimalStr(Optional.empty()).build();
        NullableRequiredPropertyPostResponse res =
                s.requestBodies().nullableRequiredPropertyPost().request(req).call();
        assertEquals(200, res.statusCode());

        assertEquals(
                "{\"NullableRequiredArray\":null,\"NullableRequiredBigIntStr\":null,\"NullableRequiredDateTime\":null,\"NullableRequiredDecimalStr\":null,\"NullableRequiredEnum\":null,\"NullableRequiredInt\":null}",
                res.object().get().data().get());
    }

    @Test
    void testRequestBodyPostNullableRequiredProperty_AllPresent() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-nullable-required-property-all-set");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        NullableRequiredPropertyPostRequestBody req = NullableRequiredPropertyPostRequestBody
                .builder().nullableOptionalInt(123L).nullableRequiredArray(List.of(0.1, 0.2))
                .nullableRequiredEnum(NullableRequiredEnum.SECOND).nullableRequiredInt(456L)
                .nullableRequiredDateTime(OffsetDateTime.parse("2020-01-01T00:00:00Z"))
                .nullableRequiredBigIntStr(new BigInteger("9223372036854775807")) // TODO
                .nullableRequiredDecimalStr(new BigDecimal("3.141592653589793238462643383279")) // TODO
                .build();
        NullableRequiredPropertyPostResponse res =
                s.requestBodies().nullableRequiredPropertyPost().request(req).call();
        assertEquals(200, res.statusCode());

        assertEquals(
                "{\"NullableOptionalInt\":123,\"NullableRequiredArray\":[0.1,0.2],\"NullableRequiredBigIntStr\":\"9223372036854775807\",\"NullableRequiredDateTime\":\"2020-01-01T00:00:00Z\",\"NullableRequiredDecimalStr\":\"3.141592653589793238462643383279\",\"NullableRequiredEnum\":\"second\",\"NullableRequiredInt\":456}",
                res.object().get().data().get());
    }

    @Test
    void testRequestBodyPostNullableRequiredSharedObject_AllNull() throws Exception {
        // Note: this test is spread across three tests:
        // testRequestBodyPostNullableRequiredSharedObject_AllNull
        // testRequestBodyPostNullableRequiredSharedObject_NotRequiredAbsent
        // testRequestBodyPostNullableRequiredSharedObject_AllPresent
        CommonHelpers.recordTest("request-bodies-post-nullable-required-shared-object-all-null");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        NullableRequiredSharedObjectPostRequestBody req =
                NullableRequiredSharedObjectPostRequestBody.builder()
                        .nullableOptionalObj(JsonNullable.of(null))
                        .nullableRequiredObj(Optional.empty()).build();
        NullableRequiredSharedObjectPostResponse res =
                s.requestBodies().nullableRequiredSharedObjectPost().request(req).call();
        assertEquals(200, res.statusCode());
        ObjectMapper m = JSON.getMapper();

        assertEquals("{\"NullableOptionalObj\":null,\"NullableRequiredObj\":null}",
                res.object().get().data().get());
    }

    @Test
    void testRequestBodyPostNullableRequiredSharedObject_NotRequiredAbsent() throws Exception {
        CommonHelpers
                .recordTest("request-bodies-post-nullable-required-shared-object-required-null");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        NullableRequiredSharedObjectPostRequestBody req =
                NullableRequiredSharedObjectPostRequestBody.builder()
                        .nullableRequiredObj(Optional.empty()).build();
        NullableRequiredSharedObjectPostResponse res =
                s.requestBodies().nullableRequiredSharedObjectPost().request(req).call();
        assertEquals(200, res.statusCode());
        ObjectMapper m = JSON.getMapper();

        assertEquals("{\"NullableRequiredObj\":null}", res.object().get().data().get());
    }

    @Test
    void testRequestBodyPostNullableRequiredSharedObject_AllPresent() throws Exception {
        // CommonHelpers.recordTest("request-bodies-post-nullable-required-shared-object");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        NullableRequiredSharedObjectPostRequestBody req =
                NullableRequiredSharedObjectPostRequestBody.builder()
                        .nullableRequiredObj(
                                NullableObject.builder().optional("hello").required(123L).build())
                        .build();
        NullableRequiredSharedObjectPostResponse res =
                s.requestBodies().nullableRequiredSharedObjectPost().request(req).call();
        assertEquals(200, res.statusCode());

        assertEquals("{\"NullableRequiredObj\":{\"optional\":\"hello\",\"required\":123}}",
                res.object().get().data().get());
    }

    @Test
    void testRequestBodyPostNullableRequiredEmptyObject_AllNull() throws Exception {
        // TODO: this tests is incomplete
        CommonHelpers.recordTest("request-bodies-post-nullable-required-empty-object-nullable-set");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        NullableRequiredEmptyObjectPostRequestBody req = NullableRequiredEmptyObjectPostRequestBody
                .builder().requiredObj(RequiredObj.builder().build())
                .nullableOptionalObj(JsonNullable.of(null)).nullableRequiredObj(Optional.empty())
                .build();
        NullableRequiredEmptyObjectPostResponse res =
                s.requestBodies().nullableRequiredEmptyObjectPost().request(req).call();
        assertEquals(200, res.statusCode());
        ObjectMapper m = JSON.getMapper();

        assertEquals(
                "{\"NullableOptionalObj\":null,\"NullableRequiredObj\":null,\"RequiredObj\":{}}",
                res.object().get().data().get());
    }

    @Test
    void testRequestBodyReadOnlyUnion() throws Exception {
        CommonHelpers.recordTest("request-bodies-read-only-union");

        SDK s = SDK.builder().build();
        RequestBodyReadOnlyUnionResponse res = s.requestBodies().requestBodyReadOnlyUnion().request(
                WeaklyTypedOneOfReadOnlyObjectInput.of(ReadOnlyObjectInput.builder().build()))
                .call();
        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertTrue(res.weaklyTypedOneOfReadOnlyObject().get().value() instanceof ReadOnlyObject);
        ReadOnlyObject o = (ReadOnlyObject) res.weaklyTypedOneOfReadOnlyObject().get().value();
        assertEquals(1.0, o.num(), 0.00001);
        assertEquals("hello", o.string());
        assertTrue(o.bool());
    }

    @Test
    void testRequestBodyWriteOnlyUnion() throws Exception {
        CommonHelpers.recordTest("request-bodies-write-only-union");

        SDK s = SDK.builder().build();

        RequestBodyWriteOnlyUnionResponse res = s.requestBodies().requestBodyWriteOnlyUnion()
                .request(WeaklyTypedOneOfWriteOnlyObject
                        .of(WriteOnlyObject.builder().bool(true).num(1.0).string("hello").build()))
                .call();

        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertTrue(res.weaklyTypedOneOfWriteOnlyObject().get()
                .value() instanceof WriteOnlyObjectOutput);
    }

    @Test
    void testRequestBodyReadWriteOnlyUnion() throws Exception {
        CommonHelpers.recordTest("request-bodies-read-write-only-union");

        SDK s = SDK.builder().build();
        RequestBodyReadWriteOnlyUnionResponse res =
                s.requestBodies().requestBodyReadWriteOnlyUnion()
                        .request(WeaklyTypedOneOfReadWriteObject
                                .of(ReadWriteObject.builder().num1(1L).num2(2L).num3(4L).build()))
                        .call();
        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        ReadWriteObjectOutput o =
                (ReadWriteObjectOutput) res.weaklyTypedOneOfReadWriteObject().get().value();
        assertEquals(4, o.num3());
        assertEquals(7, o.sum());
    }

    @Test
    void testRequestBodyPostNullableRequiredStringBody() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-nullable-required-string-body");

        SDK s = SDK.builder().build();
        RequestBodyPostNullableRequiredStringBodyResponse res = s.requestBodies()
                .requestBodyPostNullableRequiredStringBody().request(Optional.empty()).call();

        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertEquals("null", res.object().get().data());
    }

    @Test
    void testRequestBodyPostNullableNotRequiredStringBody() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-nullable-not-required-string-body");

        SDK s = SDK.builder().build();
        {
            RequestBodyPostNullableNotRequiredStringBodyResponse res =
                    s.requestBodies().requestBodyPostNullableNotRequiredStringBody()
                            .request(JsonNullable.of(null)).call();

            assertNotNull(res);
            assertEquals(HttpStatus.SC_OK, res.statusCode());
            assertEquals("null", res.object().get().data());
        }
        // TODO this case should be tested in go and other languages (?) to ensure coverage of
        // absent rather than null
        {
            RequestBodyPostNullableNotRequiredStringBodyResponse res =
                    s.requestBodies().requestBodyPostNullableNotRequiredStringBody()
                            .request(JsonNullable.undefined()).call();

            assertNotNull(res);
            assertEquals(HttpStatus.SC_OK, res.statusCode());
            assertEquals("", res.object().get().data());
        }
    }

    @Test
    void testRequestBodyPostNotNullableNotRequiredStringBody() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-not-nullable-not-required-string-body");

        SDK s = SDK.builder().build();
        RequestBodyPostNotNullableNotRequiredStringBodyResponse res = s.requestBodies()
                .requestBodyPostNotNullableNotRequiredStringBody().request(Optional.empty()).call();

        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertEquals("", res.object().get().data());
    }

    @Test
    public void testRequestBodyDefaultsAndConsts() throws Exception {
        CommonHelpers.recordTest("request-bodies-defaults-and-consts");

        SDK s = SDK.builder().build();
        DefaultsAndConsts req = DefaultsAndConsts.builder() //
                .normalField("normal") //
                .defaultStr("not default") //
                .build();
        RequestBodyPostDefaultsAndConstsResponse res =
                s.requestBodies().requestBodyPostDefaultsAndConsts() //
                        .request(req) //
                        .call();

        assertEquals(HttpStatus.SC_OK, res.statusCode());

        DefaultsAndConsts a = res.object().get().json();
        assertEquals("normal", a.normalField());
        assertEquals(9007199254740991L, a.constBigInt().longValue());
        assertEquals("9223372036854775807", a.constBigIntStr().toString());
        assertTrue(a.constBool());
        assertEquals(LocalDate.parse("2020-01-01"), a.constDate());
        assertEquals(OffsetDateTime.parse("2020-01-01T00:00:00Z"), a.constDateTime());
        assertEquals(BigDecimal.valueOf(3.141592653589793), a.constDecimal());
        assertEquals(new BigDecimal("3.141592653589793238462643383279"), a.constDecimalStr());
        assertEquals(ConstEnumInt.TWO, a.constEnumInt());
        assertEquals(ConstEnumStr.TWO, a.constEnumStr());
        assertEquals(123L, a.constInt());
        assertEquals(123.456, a.constNum(), 0.0000000000000001);
        assertFalse(a.constStrNull().isPresent());
        assertEquals(9007199254740991L, a.defaultBigInt().get().longValue());
        assertEquals("9223372036854775807", a.defaultBigIntStr().get().toString());
        assertTrue(a.defaultBool().get());
        assertEquals(LocalDate.parse("2020-01-01"), a.defaultDate().get());
        assertEquals(OffsetDateTime.parse("2020-01-01T00:00:00Z"), a.defaultDateTime().get());
        assertEquals(BigDecimal.valueOf(3.141592653589793), a.defaultDecimal().get());
        assertEquals(new BigDecimal("3.141592653589793238462643383279"),
                a.defaultDecimalStr().get());
        assertEquals(DefaultEnumInt.TWO, a.defaultEnumInt().get());
        assertEquals(DefaultEnumStr.TWO, a.defaultEnumStr().get());
        assertEquals(123L, a.defaultInt().get());
        assertEquals(123.456, a.defaultNum().get(), 0.0000000001);
        assertEquals("not default", a.defaultStr().get());
        assertEquals(null, a.defaultStrNullable().get());
        assertEquals("default", a.defaultStrOptional().get());
    }

    @Test
    public void testRequestBodyPostComplexNumberTypes() throws Exception {
        CommonHelpers.recordTest("request-bodies-complex-number-types");
        SDK s = SDK.builder().build();

        RequestBodyPostComplexNumberTypesRequest req = RequestBodyPostComplexNumberTypesRequest
                .builder()
                .complexNumberTypes(ComplexNumberTypes.builder()
                        .bigint(new BigInteger("9007199254740991"))
                        .bigintStr(new BigInteger("9223372036854775807"))
                        .decimal(new BigDecimal("3.141592653589793"))
                        .decimalStr(new BigDecimal("3.141592653589793238462643383279")).build())
                .pathBigInt(new BigInteger("9007199254740991"))
                .pathBigIntStr(new BigInteger("9223372036854775807"))
                .pathDecimal(new BigDecimal("3.141592653589793"))
                .pathDecimalStr(new BigDecimal("3.141592653589793238462643383279"))
                .queryBigInt(new BigInteger("9007199254740991"))
                .queryBigIntStr(new BigInteger("9223372036854775807"))
                .queryDecimal(new BigDecimal("3.141592653589793"))
                .queryDecimalStr(new BigDecimal("3.141592653589793238462643383279")).build();
        RequestBodyPostComplexNumberTypesResponse res = s //
                .requestBodies() //
                .requestBodyPostComplexNumberTypes() //
                .request(req).call();

        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertEquals(req.complexNumberTypes().bigint(), res.object().get().json().bigint());
        assertEquals(req.complexNumberTypes().bigintStr(), res.object().get().json().bigintStr());
        assertEquals(req.complexNumberTypes().decimal(), res.object().get().json().decimal());
        assertEquals(req.complexNumberTypes().decimalStr(), res.object().get().json().decimalStr());

        // Note that full precision is retained (unlike other langs like c-sharp which uses a
        // limited precision `decimal` type)
        assertEquals(
                "http://localhost:35123/anything/requestBodies/post/9007199254740991/9223372036854775807/3.141592653589793/3.141592653589793238462643383279/complex-number-types?queryBigInt=9007199254740991&queryBigIntStr=9223372036854775807&queryDecimal=3.141592653589793&queryDecimalStr=3.141592653589793238462643383279",
                res.object().get().url());
    }

    @Test
    public void testRequestBodiesPostJsonDataTypesBigintStr() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-json-data-types-bigint-str");
        SDK s = SDK.builder().build();

        RequestBodyPostJsonDataTypesBigIntStrResponse res = s.requestBodies()
                .requestBodyPostJsonDataTypesBigIntStr().request(BigInteger.ONE).call();
        assertEquals(200, res.statusCode());
        assertEquals(BigInteger.ONE, res.object().get().json());
        assertEquals("\"1\"", res.object().get().data());
    }

    @Test
    public void testRequestBodiesPostJsonDataTypesDecimalStr() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-json-data-types-decimal-str");
        SDK s = SDK.builder().build();

        RequestBodyPostJsonDataTypesDecimalStrResponse res = s.requestBodies()
                .requestBodyPostJsonDataTypesDecimalStr().request(BigDecimal.ONE).call();
        assertEquals(200, res.statusCode());
        assertEquals(BigDecimal.ONE, res.object().get().json());
        assertEquals("\"1\"", res.object().get().data());
    }

    @Test
    public void testRequestBodiesPostJsonDataTypesArrayBigint() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-json-data-types-array-bigint");
        SDK s = SDK.builder().build();

        RequestBodyPostJsonDataTypesArrayBigIntResponse res = s.requestBodies()
                .requestBodyPostJsonDataTypesArrayBigInt().request(List.of(BigInteger.ONE)).call();
        assertEquals(200, res.statusCode());
        assertEquals(List.of(BigInteger.ONE), res.object().get().json());
        assertEquals("[1]", res.object().get().data());
    }

    @Test
    public void testRequestBodiesPostJsonDataTypesArrayDecimalStr() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-json-data-types-array-decimal-str");
        SDK s = SDK.builder().build();

        RequestBodyPostJsonDataTypesArrayDecimalStrResponse res =
                s.requestBodies().requestBodyPostJsonDataTypesArrayDecimalStr()
                        .request(List.of(BigDecimal.ONE)).call();
        assertEquals(200, res.statusCode());
        assertEquals(List.of(BigDecimal.ONE), res.object().get().json());
        assertEquals("[\"1\"]", res.object().get().data());
    }

    @Test
    public void testRequestBodiesPostJsonDataTypesDecimal() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-json-data-types-decimal");
        SDK s = SDK.builder().build();

        RequestBodyPostJsonDataTypesDecimalResponse res = s.requestBodies()
                .requestBodyPostJsonDataTypesDecimal().request(BigDecimal.ONE).call();
        assertEquals(200, res.statusCode());
        assertEquals(BigDecimal.ONE, res.object().get().json());
        assertEquals("1", res.object().get().data());
    }

    @Test
    public void testRequestBodiesPostJsonDataTypesMapDecimal() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-json-data-types-map-decimal");
        SDK s = SDK.builder().build();

        RequestBodyPostJsonDataTypesMapDecimalResponse res =
                s.requestBodies().requestBodyPostJsonDataTypesMapDecimal()
                        .request(Map.of("hello", BigDecimal.ONE)).call();
        assertEquals(200, res.statusCode());
        assertEquals(BigDecimal.ONE, res.object().get().json().get("hello"));
        assertEquals("{\"hello\":1}", res.object().get().data());
    }

    @Test
    public void testRequestBodiesPostJsonDataTypesBigint() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-json-data-types-bigint");
        SDK s = SDK.builder().build();

        RequestBodyPostJsonDataTypesBigIntResponse res = s.requestBodies()
                .requestBodyPostJsonDataTypesBigInt().request(BigInteger.ONE).call();
        assertEquals(200, res.statusCode());
        assertEquals(BigInteger.ONE, res.object().get().json());
        assertEquals("1", res.object().get().data());
    }

    @Test
    public void testRequestBodiesPostJsonDataTypesMapBigintStr() throws Exception {
        CommonHelpers.recordTest("request-bodies-post-json-data-types-map-bigint-str");
        SDK s = SDK.builder().build();

        RequestBodyPostJsonDataTypesMapBigIntStrResponse res =
                s.requestBodies().requestBodyPostJsonDataTypesMapBigIntStr()
                        .request(Map.of("hello", BigInteger.ONE)).call();
        assertEquals(200, res.statusCode());
        assertEquals(BigInteger.ONE, res.object().get().json().get("hello"));
        assertEquals("{\"hello\":\"1\"}", res.object().get().data());
    }
    
    @Test
    public void testResponseBodiesOverridenFieldNamesPost() throws Exception {
        CommonHelpers.recordTest("response-bodies-overridden-field-names");
        SDK s = SDK.builder().build();
        
        OverriddenFieldNamesPostRequestBody req = OverriddenFieldNamesPostRequestBody.builder() //
                .inInt(1) //
                .inStr("test") //
                .build();
        OverriddenFieldNamesPostResponse res = s.responseBodies().overriddenFieldNamesPost() //
                .request(req)
                .call();
        assertEquals(200, res.statusCode());
        OverriddenFieldNamesPostJson expected = OverriddenFieldNamesPostJson.builder() //
                .outInt(1) //
                .outStr("test") //
                .build();
        assertEquals(expected, res.object().get().json());
    }
    
}
