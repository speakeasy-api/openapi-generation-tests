/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.openapis.openapi.Helpers.checkRoundTrip;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.Optional;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.openapis.openapi.models.operations.HeaderParamsObjectHeaders;
import org.openapis.openapi.models.shared.Color;
import org.openapis.openapi.models.shared.ConstEnumInt;
import org.openapis.openapi.models.shared.ConstEnumStr;
import org.openapis.openapi.models.shared.DefaultEnumInt;
import org.openapis.openapi.models.shared.DefaultEnumStr;
import org.openapis.openapi.models.shared.DefaultsAndConsts;
import org.openapis.openapi.utils.JSON;
import org.openapitools.jackson.nullable.JsonNullable;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * Tests serialization and deserialization locally only (no interaction with
 * external http servers)
 */
public class SerializationTests {
    
    private static final ObjectMapper m = JSON.getMapper();

    @Test
    public void testSimpleObjectRoundTrip() {
        checkRoundTrip(Helpers.createSimpleObject());
    }
    
    @Test
    public void testDeepObjectRoundTrip() {
        checkRoundTrip(Helpers.createDeepObject());
    }
    
    @Test
    public void testDateSerializesInDesiredFormat() throws JsonProcessingException {
        String json = Helpers.json(Helpers.createSimpleObject());
        assertEquals("2020-01-01", m.readTree(json).get("date").asText());
    }
    
    @Test
    public void testDefaultOptionalSerialization() throws JsonProcessingException {
        assertEquals("null", JSON.getMapper().writeValueAsString(Optional.empty()));
    }
    
    @Test
    public void testDefaultsUsedWhenFieldsNotSet() {
        DefaultsAndConsts a = DefaultsAndConsts.builder() //
                .normalField("normal") //
                .build();
        assertEquals(9007199254740991L, a.defaultBigInt().get().longValue());
        assertEquals("9223372036854775807", a.defaultBigIntStr().get().toString());
        assertTrue(a.defaultBool().get());
        assertEquals("2020-01-01", a.defaultDate().get().toString());
        assertEquals("2020-01-01T00:00Z", a.defaultDateTime().get().toString());
        assertEquals(3.141592653589793, a.defaultDecimal().get().doubleValue(), 0.00000000001);
        assertEquals(new BigDecimal("3.141592653589793238462643383279"), a.defaultDecimalStr().get());
        assertEquals(DefaultEnumInt.TWO, a.defaultEnumInt().get());
        assertEquals(DefaultEnumStr.TWO, a.defaultEnumStr().get());
        assertEquals(123, a.defaultInt().get());
        assertEquals(123.456, a.defaultNum().get(), 0.0000001);
        assertEquals("default", a.defaultStr().get());
        assertEquals(JsonNullable.of(null), a.defaultStrNullable());

        // assert with mutator methods present for defaults
        a.withDefaultBigInt(BigInteger.valueOf(1234L));
        assertEquals(1234L, a.defaultBigInt().get().longValue());

        // assert with mutator methods not present for consts

        try {
            DefaultsAndConsts.class.getMethod("withConstBigIntStr", String.class);
            Assertions.fail();
        } catch (NoSuchMethodException e) {
            // ok
        }

        // assert constant values
        assertEquals(9007199254740991L, a.constBigInt().longValue());
        assertEquals("9223372036854775807", a.constBigIntStr().toString());
        assertTrue(a.constBool());
        assertEquals(LocalDate.of(2020, 1, 1), a.constDate());
        assertEquals(OffsetDateTime.of(2020, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC), a.constDateTime());
        assertEquals(3.141592653589793, a.constDecimal().doubleValue(), 0.000000000001);
        assertEquals(new BigDecimal("3.141592653589793238462643383279"), a.constDecimalStr());
        assertEquals(ConstEnumInt.TWO, a.constEnumInt());
        assertEquals(ConstEnumStr.TWO, a.constEnumStr());
        assertEquals(123L, a.constInt());
        assertEquals(123.456, a.constNum(), 0.000001);
        assertEquals("const", a.constStr());
    }
    
    @Test
    public void testHeadersRoundTrip() {
        HeaderParamsObjectHeaders a = HeaderParamsObjectHeaders.builder()
                .xHeaderObj("hello")
                .xHeaderObjExplode("there")
                .build();
        checkRoundTrip(a);
    }
    
    @Test
    public void testLocalDateSerialization() throws JsonProcessingException {
        assertEquals("\"2024-12-23\"", JSON.getMapper().writeValueAsString(Optional.of(LocalDate.of(2024, 12, 23))));
    }
    
    @Test
    public void testEnumReservedWords() {
        // really more of a compilation test (to ensure that enum member RETURN does not
        // get escaped to RETURN_)
        assertEquals("return", Color.RETURN.value());
        assertEquals("class", Color.CLASS.value());
    }
    
}
