/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.openapis.openapi.Helpers.checkRoundTrip;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.apache.http.HttpStatus;
import org.junit.jupiter.api.Test;
import org.openapis.openapi.models.operations.CollectionOneOfPostResponse;
import org.openapis.openapi.models.operations.ConstDiscriminatedOneOfResponse;
import org.openapis.openapi.models.operations.DiscriminatedOneMultipleMembershipsResponse;
import org.openapis.openapi.models.operations.FlattenedTypedObjectPostResponse;
import org.openapis.openapi.models.operations.MixedTypeOneOfPostRequestBody;
import org.openapis.openapi.models.operations.MixedTypeOneOfPostResponse;
import org.openapis.openapi.models.operations.NullableOneOfSchemaPostRequestBody;
import org.openapis.openapi.models.operations.NullableOneOfSchemaPostResponse;
import org.openapis.openapi.models.operations.NullableTypedObjectPostResponse;
import org.openapis.openapi.models.operations.OneOfOverlappingObjectsRequestBody;
import org.openapis.openapi.models.operations.OneOfOverlappingObjectsResponse;
import org.openapis.openapi.models.operations.PrimitiveTypeOneOfPostRequestBody;
import org.openapis.openapi.models.operations.PrimitiveTypeOneOfPostResponse;
import org.openapis.openapi.models.operations.StronglyTypedOneOfPostResponse;
import org.openapis.openapi.models.operations.StronglyTypedOneOfPostWithNonStandardDiscriminatorNameResponse;
import org.openapis.openapi.models.operations.TypedObjectNullableOneOfPostResponse;
import org.openapis.openapi.models.operations.TypedObjectOneOfPostResponse;
import org.openapis.openapi.models.operations.UnionBigIntStrDecimalRequestBody;
import org.openapis.openapi.models.operations.UnionBigIntStrDecimalResponse;
import org.openapis.openapi.models.operations.UnionDateNullResponse;
import org.openapis.openapi.models.operations.UnionDateTimeBigIntRequestBody;
import org.openapis.openapi.models.operations.UnionDateTimeBigIntResponse;
import org.openapis.openapi.models.operations.UnionDateTimeNullResponse;
import org.openapis.openapi.models.operations.UnionMapRequestBody;
import org.openapis.openapi.models.operations.UnionMapResponse;
import org.openapis.openapi.models.operations.WeaklyTypedOneOfPostResponse;
import org.openapis.openapi.models.shared.AnyOfMultiMatch;
import org.openapis.openapi.models.shared.AnyOfMultiMatchMember1;
import org.openapis.openapi.models.shared.AnyOfMultiMatchMember2;
import org.openapis.openapi.models.shared.Car;
import org.openapis.openapi.models.shared.CollectionOneOfObject;
import org.openapis.openapi.models.shared.ConstObject1;
import org.openapis.openapi.models.shared.DeepObject;
import org.openapis.openapi.models.shared.DeepObjectWithType;
import org.openapis.openapi.models.shared.DeepObjectWithTypeAny;
import org.openapis.openapi.models.shared.Enum;
import org.openapis.openapi.models.shared.FlattenedTypedObject1;
import org.openapis.openapi.models.shared.HasWheels;
import org.openapis.openapi.models.shared.NullableOneOfRefInObject;
import org.openapis.openapi.models.shared.NullableOneOfTwo;
import org.openapis.openapi.models.shared.NullableOneOfTypeInObject;
import org.openapis.openapi.models.shared.NullableOneOfTypeInObjectNullableOneOfTwo;
import org.openapis.openapi.models.shared.Obj1;
import org.openapis.openapi.models.shared.Obj2;
import org.openapis.openapi.models.shared.OneOfOne;
import org.openapis.openapi.models.shared.OneOfPrimitives;
import org.openapis.openapi.models.shared.SimpleObject;
import org.openapis.openapi.models.shared.SimpleObjectWithNonStandardTypeName;
import org.openapis.openapi.models.shared.SimpleObjectWithNonStandardTypeNameInt32Enum;
import org.openapis.openapi.models.shared.SimpleObjectWithNonStandardTypeNameIntEnum;
import org.openapis.openapi.models.shared.SimpleObjectWithType;
import org.openapis.openapi.models.shared.SimpleObjectWithTypeInt32Enum;
import org.openapis.openapi.models.shared.SimpleObjectWithTypeIntEnum;
import org.openapis.openapi.models.shared.TypedObject1;
import org.openapis.openapi.models.shared.TypedObject1Type;
import org.openapis.openapi.models.shared.TypedObject2;
import org.openapis.openapi.models.shared.TypedObject2Type;
import org.openapis.openapi.models.shared.TypedObject3;
import org.openapis.openapi.models.shared.TypedObject3Type;
import org.openapis.openapi.models.shared.TypedObjectNullableOneOf;
import org.openapis.openapi.models.shared.TypedObjectOneOf;
import org.openapis.openapi.models.shared.Vehicle;
import org.openapis.openapi.models.shared.WeaklyTypedOneOfObject;
import org.openapis.openapi.utils.JSON;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.MismatchedInputException;
import com.fasterxml.jackson.databind.node.JsonNodeType;

public class UnionsTests {
    
    // @Test
    // test disable because we are overriding standard Jackson deserializers with custom strict ones
    public void demonstrateObjectMapperReadValueLaxity() throws JsonMappingException, JsonProcessingException {
        ObjectMapper m = JSON.getMapper();
        assertEquals(111L, m.readValue("111", Long.class));
        assertEquals(111L, m.readValue("\"111\"", Long.class));
        assertEquals(111.0, m.readValue("111", Double.class), 0.00001);
        assertEquals("111", m.readValue("111", String.class));
        assertTrue(m.readValue("111", Boolean.class));
        assertThrows(MismatchedInputException.class, () -> m.readValue("111.0", Boolean.class));
        assertEquals(111L, m.readValue("111.1", Long.class));
        assertEquals(111.1, m.readValue("111.1", Double.class), 0.00001);
        assertEquals("111.1", m.readValue("111.1", String.class));
        m.readValue("9007199254740991", OffsetDateTime.class);
        m.readValue("1234567", LocalDate.class);
        assertEquals(1000L, m.readValue("1.0e3", Long.class));
    }

    @Test
    void testStronglyTypedOneOfPostBasic() throws Exception {
        CommonHelpers.recordTest("unions-strongly-typed-one-of-post-basic");

        SDK s = SDK.builder().build();

        SimpleObjectWithType obj = SimpleObjectWithType.builder() //
                .str("test") //
                .bool(true) //
                .int_(1L) //
                .int32(1) //
                .intEnum(SimpleObjectWithTypeIntEnum.Second) //
                .int32Enum(SimpleObjectWithTypeInt32Enum.FIFTY_FIVE) //
                .num(1.1) //
                .float32(1.1f) //
                .enum_(Enum.ONE) //
                .any("any") //
                .date(LocalDate.of(2020, 1, 1)) //
                .dateTime(OffsetDateTime.of(2020, 1, 1, 0, 0, 0, 1, ZoneOffset.UTC)) //
                .boolOpt(true) //
                .strOpt("testOptional") //
                .intOptNull(Optional.empty()) //
                .numOptNull(Optional.empty()) //
                .type("simpleObjectWithType") //
                .build();

        StronglyTypedOneOfPostResponse res = s.unions().stronglyTypedOneOfPost() //
                .request(obj) //
                .call();

        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertTrue(res.res().get().json() instanceof SimpleObjectWithType);
    }

    @Test
    void testCollectionOneOfPost() throws Exception {
        CommonHelpers.recordTest("unions-collections-one-of-post");

        SDK s = SDK.builder().build();

        List<Object> req = List.of("one", "two");

        CollectionOneOfPostResponse res = s.unions().collectionOneOfPost()
                .request(CollectionOneOfObject.of(req))
                .call();

        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertEquals(req, res.res().get().json().value());

        Map<String, Object> req2 = Map.of("1", "one", "2", "two");


        CollectionOneOfPostResponse res2 = s.unions().collectionOneOfPost()
                .request(CollectionOneOfObject.of(req2))
                .call();
        assertNotNull(res2);
        assertEquals(HttpStatus.SC_OK, res2.statusCode());
        assertEquals(req2, res2.res().get().json().value());
    }

    @Test
    void testStronglyTypedOneOfPostDeep() throws Exception {
        CommonHelpers.recordTest("unions-strongly-typed-one-of-post-deep");

        SDK s = SDK.builder().build();

        DeepObjectWithType obj = DeepObjectWithType.builder() //
                .any(DeepObjectWithTypeAny.of(Helpers.createSimpleObject())) //
                .arr(List.of(Helpers.createSimpleObject(), Helpers.createSimpleObject())) //
                .bool(true) //
                .int_(1L) //
                .map(Map.ofEntries(Map.entry("key", Helpers.createSimpleObject()))) //
                .num(1.1) //
                .obj(Helpers.createSimpleObject()) //
                .str("test") //
                .type("deepObjectWithType") //
                .build();

        StronglyTypedOneOfPostResponse res = s.unions().stronglyTypedOneOfPost() //
                .request(obj) //
                .call();

        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertTrue(res.res().get().json() instanceof DeepObjectWithType);
    }

    @Test
    void testWeakly6TypedOneOfPostBasic() throws Exception {
        CommonHelpers.recordTest("unions-weakly-typed-one-of-post-basic");

        SDK s = SDK.builder().build();

        WeaklyTypedOneOfPostResponse res = s.unions().weaklyTypedOneOfPost() //
                .request(WeaklyTypedOneOfObject.of(Helpers.createSimpleObject())) //
                .call();

        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertTrue(res.res().get().json().value() instanceof SimpleObject);
    }

    @Test
    void testWeaklyTypedOneOfPostDeep() throws Exception {
        CommonHelpers.recordTest("unions-weakly-typed-one-of-post-deep");

        SDK s = SDK.builder().build();

        WeaklyTypedOneOfPostResponse res = s.unions().weaklyTypedOneOfPost() //
                .request(WeaklyTypedOneOfObject.of(Helpers.createDeepObject())) //
                .call();

        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertTrue(res.res().get().json().value() instanceof DeepObject);
    }

    @Test
    void testTypedObjectOneOfPostObj1() throws Exception {
        CommonHelpers.recordTest("unions-typed-object-one-of-post-obj1");

        SDK s = SDK.builder().build();
        TypedObject1 obj = TypedObject1.builder() //
                .type(TypedObject1Type.OBJ1).value("typedObject1").build();
        TypedObjectOneOfPostResponse res = s.unions().typedObjectOneOfPost() //
                .request(TypedObjectOneOf.of(obj)) //
                .call();
        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertEquals(obj, res.res().get().json().value());
    }

    @Test
    void testTypedObjectOneOfPostObj2() throws Exception {
        CommonHelpers.recordTest("unions-typed-object-one-of-post-obj2");
        SDK s = SDK.builder().build();
        TypedObject2 obj = TypedObject2.builder() //
                .type(TypedObject2Type.OBJ2).value("typedObject2").build();
        TypedObjectOneOfPostResponse res = s.unions().typedObjectOneOfPost() //
                .request(TypedObjectOneOf.of(obj)) //
                .call();
        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertEquals(obj, res.res().get().json().value());
    }

    @Test
    void testTypedObjectOneOfPostObj3() throws Exception {
        CommonHelpers.recordTest("unions-typed-object-one-of-post-obj3");

        SDK s = SDK.builder().build();

        TypedObject3 obj = TypedObject3.builder() //
                .type(TypedObject3Type.OBJ3).value("typedObject3").build();
        TypedObjectOneOfPostResponse res = s.unions().typedObjectOneOfPost() //
                .request(TypedObjectOneOf.of(obj)) //
                .call();
        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertEquals(obj, res.res().get().json().value());
    }

    @Test
    void testTypedObjectOneOfPostNull() throws Exception {
        CommonHelpers.recordTest("unions-typed-object-one-of-post-null");

        // cannot build request argument with null field
        assertThrows(IllegalArgumentException.class, () -> TypedObjectOneOf.of((TypedObject1) null));
    }
    
    @Test
    void testTestTypedObjectNullableOneOfPostNull() throws Exception {
        CommonHelpers.recordTest("unions-typed-object-nullable-one-of-post-null");

        SDK s = SDK.builder().build();
        
        TypedObjectNullableOneOfPostResponse res = s.unions().typedObjectNullableOneOfPost() //
                .request(Optional.empty())
                .call();
        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertFalse(res.res().get().json().isPresent());
    }

    @Test
    void testTestTypedObjectNullableOneOfPostObj1() throws Exception {
        CommonHelpers.recordTest("unions-typed-object-nullable-one-of-post-obj1");

        SDK s = SDK.builder().build();
        TypedObject1 obj = TypedObject1.builder() //
                .type(TypedObject1Type.OBJ1).value("typedObject1").build();
        TypedObjectNullableOneOfPostResponse res = s.unions().typedObjectNullableOneOfPost() //
                .request(TypedObjectNullableOneOf.of(obj)).call();
        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertEquals(obj, res.res().get().json().get().value());
    }

    @Test
    void testTestTypedObjectNullableOneOfPostObj2() throws Exception {
        CommonHelpers.recordTest("unions-typed-object-nullable-one-of-post-obj2");

        SDK s = SDK.builder().build();
        TypedObject2 obj = TypedObject2.builder() //
                .type(TypedObject2Type.OBJ2).value("typedObject2").build();
        TypedObjectNullableOneOfPostResponse res = s.unions().typedObjectNullableOneOfPost() //
                .request(TypedObjectNullableOneOf.of(obj)).call();
        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertEquals(obj, res.res().get().json().get().value());
    }

    @Test
    void testFlattenedTypedObject_Obj1() throws Exception {
        CommonHelpers.recordTest("unions-flattened-typed-object-post-obj1");

        SDK s = SDK.builder().build();
        TypedObject1 obj = TypedObject1.builder() //
                .value("one") //
                .type(TypedObject1Type.OBJ1) //
                .build();

        FlattenedTypedObjectPostResponse res = s.unions().flattenedTypedObjectPost() //
                .request(FlattenedTypedObject1.of(obj)) //
                .call();

        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertEquals(obj, res.res().get().json().value());
    }
    
    @Test
    void testNullableTypedObjectPostNull() throws Exception {
        CommonHelpers.recordTest("unions-nullable-typed-object-post-null");

        SDK s = SDK.builder().build();

        NullableTypedObjectPostResponse res = s.unions().nullableTypedObjectPost() //
                .request(Optional.empty()) //
                .call();

        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertFalse(res.res().get().json().isPresent());
    }
    
    @Test
    void testNullableTypedObjectPostObj1() throws Exception {
        CommonHelpers.recordTest("unions-nullable-typed-object-post-obj1");

        SDK s = SDK.builder().build();
        TypedObject1 obj = TypedObject1.builder() //
                .value("one") //
                .type(TypedObject1Type.OBJ1) //
                .build();

        NullableTypedObjectPostResponse res = s.unions().nullableTypedObjectPost() //
                .request(obj) //
                .call();

        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertEquals(obj, res.res().get().json().get());
    }

    @Test
    void testNullableOneOfSchemaPostNull() throws Exception {
        CommonHelpers.recordTest("unions-nullable-oneof-schema-post-null");

        SDK s = SDK.builder().build();

        NullableOneOfSchemaPostResponse res = s.unions().nullableOneOfSchemaPost() //
                .request(Optional.empty()) //
                .call();

        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertFalse(res.res().get().json().isPresent());
    }
    
    @Test
    void testNullableOneOfSchemaPostObj1() throws Exception {
        CommonHelpers.recordTest("unions-nullable-oneof-schema-post-obj1");

        SDK s = SDK.builder().build();
        TypedObject1 obj = TypedObject1.builder() //
                .value("one") //
                .type(TypedObject1Type.OBJ1) //
                .build();

        NullableOneOfSchemaPostResponse res = s.unions().nullableOneOfSchemaPost() //
                .request(NullableOneOfSchemaPostRequestBody.of(obj)) //
                .call();

        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertEquals(obj, res.res().get().json().get().value());
    }

    @Test
    void testNullableOneOfSchemaPostObj2() throws Exception {
        CommonHelpers.recordTest("unions-nullable-oneof-schema-post-obj2");

        SDK s = SDK.builder().build();
        TypedObject2 obj = TypedObject2.builder() //
                .value("two") //
                .type(TypedObject2Type.OBJ2) //
                .build();

        NullableOneOfSchemaPostResponse res = s.unions().nullableOneOfSchemaPost() //
                .request(NullableOneOfSchemaPostRequestBody.of(obj)) //
                .call();

        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertEquals(obj, res.res().get().json().get().value());
    }

    @Test
    void testPrimitiveTypeOneOfPostString() throws Exception {
        CommonHelpers.recordTest("unions-primitive-type-one-of-post-string");

        SDK s = SDK.builder().build();

        PrimitiveTypeOneOfPostRequestBody req = PrimitiveTypeOneOfPostRequestBody.of("test");

        PrimitiveTypeOneOfPostResponse res = s.unions().primitiveTypeOneOfPost() //
                .request(req) //
                .call();

        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertEquals(req.value(), res.res().get().json().value());
    }

    @Test
    void testPrimitiveTypeOneOfPostInteger() throws Exception {
        CommonHelpers.recordTest("unions-primitive-type-one-of-post-integer");

        SDK s = SDK.builder().build();

        PrimitiveTypeOneOfPostRequestBody req = PrimitiveTypeOneOfPostRequestBody.of(111L);

        PrimitiveTypeOneOfPostResponse res = s.unions().primitiveTypeOneOfPost() //
                .request(req) //
                .call();

        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertEquals(req.value(), res.res().get().json().value());
    }

    @Test
    void testPrimitiveTypeOneOfPostNumber() throws Exception {
        CommonHelpers.recordTest("unions-primitive-type-one-of-post-number");

        SDK s = SDK.builder().build();

        PrimitiveTypeOneOfPostRequestBody req = PrimitiveTypeOneOfPostRequestBody.of(22.2);

        PrimitiveTypeOneOfPostResponse res = s.unions().primitiveTypeOneOfPost() //
                .request(req) //
                .call();

        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertEquals(req.value(), res.res().get().json().value());
    }

    @Test
    void testPrimitiveTypeOneOfPostBoolean() throws Exception {
        CommonHelpers.recordTest("unions-primitive-type-one-of-post-boolean");

        SDK s = SDK.builder().build();

        PrimitiveTypeOneOfPostRequestBody req = PrimitiveTypeOneOfPostRequestBody.of(true);

        PrimitiveTypeOneOfPostResponse res = s.unions().primitiveTypeOneOfPost() //
                .request(req) //
                .call();

        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertEquals(req.value(), res.res().get().json().value());
    }

    @Test
    void testMixedTypeOneOfPostString() throws Exception {
        CommonHelpers.recordTest("unions-mixed-type-one-of-post-string");

        SDK s = SDK.builder().build();

        MixedTypeOneOfPostRequestBody req = MixedTypeOneOfPostRequestBody.of("test");

        MixedTypeOneOfPostResponse res = s.unions().mixedTypeOneOfPost() //
                .request(req) //
                .call();

        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertEquals(req.value(), res.res().get().json().value());
    }

    @Test
    void testMixedTypeOneOfPostInteger() throws Exception {
        CommonHelpers.recordTest("unions-mixed-type-one-of-post-integer");

        SDK s = SDK.builder().build();

        MixedTypeOneOfPostRequestBody req = MixedTypeOneOfPostRequestBody.of(111L);

        MixedTypeOneOfPostResponse res = s.unions().mixedTypeOneOfPost() //
                .request(req) //
                .call();

        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertEquals(req.value(), res.res().get().json().value());
    }

    @Test
    void testMixedTypeOneOfPostObject() throws Exception {
        CommonHelpers.recordTest("unions-mixed-type-one-of-post-object");

        SDK s = SDK.builder().build();

        MixedTypeOneOfPostRequestBody req = MixedTypeOneOfPostRequestBody.of(Helpers.createSimpleObject());

        MixedTypeOneOfPostResponse res = s.unions().mixedTypeOneOfPost() //
                .request(req) //
                .call();

        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertEquals(req.value(), res.res().get().json().value());
    }

    @Test
    void testDateNullUnion() throws Exception {
        CommonHelpers.recordTest("unions-date-null");

        SDK s = SDK.builder().build();

        LocalDate date = LocalDate.of(2020, 01, 01);
        UnionDateNullResponse res = s.unions().unionDateNull() //
                .request(date) //
                .call();
        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertEquals(date, res.res().get().json().get());
    }

    @Test
    void testDateTimeNullUnion() throws Exception {
        CommonHelpers.recordTest("unions-datetime-null");

        SDK s = SDK.builder().build();

        OffsetDateTime time = OffsetDateTime.of(2020, 01, 01, 0, 0, 0, 0, ZoneOffset.UTC);
        UnionDateTimeNullResponse res = s.unions().unionDateTimeNull() //
                .request(time) //
                .call();
        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertEquals(time, res.res().get().json().get());
    }

    @Test
    void testDateTimeBigIntNullUnion() throws Exception {
        CommonHelpers.recordTest("unions-datetime-bigint");

        SDK s = SDK.builder().build();
        {
            OffsetDateTime time = OffsetDateTime.of(2020, 01, 01, 0, 0, 0, 0, ZoneOffset.UTC);
            UnionDateTimeBigIntResponse res = s.unions().unionDateTimeBigInt() //
                    .request(UnionDateTimeBigIntRequestBody.of(time)) //
                    .call();
            assertNotNull(res);
            assertEquals(HttpStatus.SC_OK, res.statusCode());
            assertEquals(time, res.res().get().json().value());
        }
        {
            BigInteger n = BigInteger.valueOf(9007199254740991L);
            UnionDateTimeBigIntResponse res = s.unions().unionDateTimeBigInt() //
                    .request(UnionDateTimeBigIntRequestBody.of(n)) //
                    .call();
            assertNotNull(res);
            assertEquals(HttpStatus.SC_OK, res.statusCode());
            assertEquals(n, res.res().get().json().value());
        }
    }
    
    @Test
    void testDateTimeBigIntStrDecimalUnion() throws Exception {
        CommonHelpers.recordTest("unions-bigint-str-decimal");

        SDK s = SDK.builder().build();
        {
            BigDecimal pi = BigDecimal.valueOf(3.141592653589793);
            UnionBigIntStrDecimalResponse res = s.unions().unionBigIntStrDecimal() //
                    .request(UnionBigIntStrDecimalRequestBody.of(pi)) //
                    .call();
            assertNotNull(res);
            assertEquals(HttpStatus.SC_OK, res.statusCode());
            assertEquals(pi, res.res().get().json().value());
        }
        {
            BigInteger n = new BigInteger("9223372036854775807");
            UnionBigIntStrDecimalResponse res = s.unions().unionBigIntStrDecimal() //
                    .request(UnionBigIntStrDecimalRequestBody.of(n)) //
                    .call();
            assertNotNull(res);
            assertEquals(HttpStatus.SC_OK, res.statusCode());
            assertEquals(n, res.res().get().json().value());
        }
    }
    
    @Test
    void testNullableOneOfTypeInObject() {
        CommonHelpers.recordTest("unions-nullable-oneof-type-in-object-post");
        {
            NullableOneOfTypeInObject o = NullableOneOfTypeInObject.builder() //
                    .oneOfOne(true) //
                    .build();
            checkRoundTrip(o);
            assertFalse(o.nullableOneOfOne().isPresent());
            assertFalse(o.nullableOneOfTwo().isPresent());
            // ensure required nullable fields are present with value null
            JsonNode node = Helpers.jsonTree(o);
            assertTrue(node.get("NullableOneOfOne").getNodeType() == JsonNodeType.NULL);
            assertTrue(node.get("NullableOneOfTwo").getNodeType() == JsonNodeType.NULL);
        }
        {
            NullableOneOfTypeInObject o = NullableOneOfTypeInObject.builder() //
                    .nullableOneOfOne(Optional.empty()) //
                    .nullableOneOfTwo(Optional.empty()) //
                    .oneOfOne(true) //
                    .build();
            checkRoundTrip(o);
            // ensure required nullable fields are present with value null
            JsonNode node = Helpers.jsonTree(o);
            assertTrue(node.get("NullableOneOfOne").getNodeType() == JsonNodeType.NULL);
            assertTrue(node.get("NullableOneOfTwo").getNodeType() == JsonNodeType.NULL);
        }
        {
            NullableOneOfTypeInObject o = NullableOneOfTypeInObject.builder() //
                    .nullableOneOfOne(true) //
                    .nullableOneOfTwo(NullableOneOfTypeInObjectNullableOneOfTwo.of(2L)) //
                    .oneOfOne(true) //
                    .build();
            checkRoundTrip(o);
        }
    }    
    
    @Test
    void testNullableOneOfRefInObject() {
        CommonHelpers.recordTest("unions-nullable-oneof-ref-in-object-post");
        {
            NullableOneOfRefInObject o = NullableOneOfRefInObject.builder() //
                    .oneOfOne(OneOfOne.of( //
                        TypedObject1.builder() //
                                .value("one") //
                                .type(TypedObject1Type.OBJ1) //
                                .build())) //
                    .build();
            checkRoundTrip(o);
            assertFalse(o.nullableOneOfOne().isPresent());
            assertFalse(o.nullableOneOfTwo().isPresent());
            // ensure required nullable fields are present with value null
            JsonNode node = Helpers.jsonTree(o);
            assertTrue(node.get("NullableOneOfOne").getNodeType() == JsonNodeType.NULL);
            assertTrue(node.get("NullableOneOfTwo").getNodeType() == JsonNodeType.NULL);
        }
        {
            NullableOneOfRefInObject o = NullableOneOfRefInObject.builder() //
                    .nullableOneOfOne(Optional.empty()) //
                    .nullableOneOfTwo(Optional.empty()) //
                    .oneOfOne(OneOfOne.of( //
                        TypedObject1.builder() //
                                .value("one") //
                                .type(TypedObject1Type.OBJ1) //
                                .build())) //
                    .build();
            checkRoundTrip(o);
            // ensure required nullable fields are present with value null
            JsonNode node = Helpers.jsonTree(o);
            assertTrue(node.get("NullableOneOfOne").getNodeType() == JsonNodeType.NULL);
            assertTrue(node.get("NullableOneOfTwo").getNodeType() == JsonNodeType.NULL);
        }
        {
            NullableOneOfRefInObject o = NullableOneOfRefInObject.builder() //
                    .nullableOneOfOne(TypedObject1.builder()
                            .value("one") //
                            .type(TypedObject1Type.OBJ1) //
                            .build()) //
                    .nullableOneOfTwo(NullableOneOfTwo.of( //
                        TypedObject2.builder() //
                            .value("two") //
                            .type(TypedObject2Type.OBJ2) //
                            .build())) //
                    .oneOfOne(OneOfOne.of( //
                        TypedObject1.builder() //
                                .value("one") //
                                .type(TypedObject1Type.OBJ1) //
                                .build())) //
                    .build();
            checkRoundTrip(o);
        }
    } 
    
    @Test
    void testStronglyTypedOneOfPostWithNonStandardDiscriminatorName() throws Exception {
        CommonHelpers.recordTest("unions-strongly-typed-one-of-post-with-non-standard-discriminator-name");

        SDK s = SDK.builder().build();

        SimpleObjectWithNonStandardTypeName obj = SimpleObjectWithNonStandardTypeName.builder() //
                .str("test") //
                .bool(true) //
                .int_(1L) //
                .int32(1) //
                .intEnum(SimpleObjectWithNonStandardTypeNameIntEnum.Second) //
                .int32Enum(SimpleObjectWithNonStandardTypeNameInt32Enum.FIFTY_FIVE) //
                .num(1.1) //
                .float32(1.1f) //
                .enum_(Enum.ONE) //
                .any("any") //
                .date(LocalDate.of(2020, 1, 1)) //
                .dateTime(OffsetDateTime.of(2020, 1, 1, 0, 0, 0, 1, ZoneOffset.UTC)) //
                .boolOpt(true) //
                .strOpt("testOptional") //
                .intOptNull(Optional.empty()) //
                .numOptNull(Optional.empty()) //
                .objType("simpleObjectWithNonStandardTypeName") //
                .build();

        StronglyTypedOneOfPostWithNonStandardDiscriminatorNameResponse res = s.unions()
                .stronglyTypedOneOfPostWithNonStandardDiscriminatorName() //
                .request(obj) //
                .call();

        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertTrue(res.res().get().json() instanceof SimpleObjectWithNonStandardTypeName);
    }
    
    @Test
    void testDiscriminatorIsConst() throws Exception {
        // TODO is this worth adding to all langs tests?
        // CommonHelpers.recordTest("unions-const-discriminator");
        SDK s = SDK.builder().build();
        ConstObject1 request = ConstObject1.builder().imageURL("http://boo").build();
        ConstDiscriminatedOneOfResponse res = s.unions() //
                .constDiscriminatedOneOf() //
                .request(request) //
                .call();
        assertEquals(200, res.statusCode());
        assertEquals(request, res.res().get().json());
    }

    @Test
    void testObjectParticipatesInMultipleOneOfs() throws Exception {
        // TODO add to all langs?
        // CommonHelpers.recordTest("unions-discriminated-multiple-memberships");
        SDK s = SDK.builder().build();
        
        // note that Car has only const fields
        Car request = Car.builder().build();
        assertTrue(request instanceof Vehicle);
        assertTrue(request instanceof HasWheels);
        assertEquals("car", request.vehicleType());
        assertEquals("four", request.wheelsType());
        DiscriminatedOneMultipleMembershipsResponse res = s.unions() //
                .discriminatedOneMultipleMemberships() //
                .request(request) //
                .call();
        assertEquals(200, res.statusCode());
        Vehicle answer = res.res().get().json();
        assertEquals(request, answer);
        assertEquals("four", ((HasWheels) answer).wheelsType());
    }
    
    @Test
    void testUnionMap() throws Exception {
        CommonHelpers.recordTest("unions-union-map");

        SDK s = SDK.builder().build();

        UnionMapResponse res = s.unions()
            .unionMap()
            .request(UnionMapRequestBody.builder()
                     .input(Map.of("str", OneOfPrimitives.of("test"), "bool", OneOfPrimitives.of(true)))
                     .build())
            .call();

        assertNotNull(res);
        assertEquals(HttpStatus.SC_OK, res.statusCode());
        assertEquals("test", res.res().get().json().input().get("str").value());
        assertEquals(true, res.res().get().json().input().get("bool").value());
    }
    
    // @Test
    // TODO This test has been added but fails because response matches both Obj1 and Obj2. 
    // The matching is actually correct because the default for additionalProperties is 
    // true in openapi (but is probably not what we are aiming for in speakeasy where I 
    // believe the default for additionalProperties is assumed to be false). Having said
    // that it still fails if additionalProperties on Obj1 is set to false.
    public void testUnionExtraJsonProperties() throws Exception {
        CommonHelpers.recordTest("unions-extra-json-properties");

        SDK s = SDK.builder().build();
        {
            OneOfOverlappingObjectsResponse res = s.unions() //
                    .oneOfOverlappingObjects() //
                    .request(OneOfOverlappingObjectsRequestBody.builder() //
                            .field1("test1") //
                            .field3(1) //
                            .build()) //
                    .call();
            assertNotNull(res);
            assertEquals(HttpStatus.SC_OK, res.statusCode());
            Obj1 o = (Obj1) res.res().get().json().value();
            assertEquals("test1", o.field1());
        }
        {
            OneOfOverlappingObjectsResponse res = s.unions() //
                    .oneOfOverlappingObjects() //
                    .request(OneOfOverlappingObjectsRequestBody.builder() //
                            .field1("test2") //
                            .field2(true) //
                            .field3(1) //
                            .build()) //
                    .call();
            Obj2 o = (Obj2) res.res().get().json().value();
            assertEquals("test2", o.field1());
            assertTrue(o.field2());
        }
    }
    
    @Test
    public void testWeakUnionMultiMatchHeuristicIsApplied() throws JsonMappingException, JsonProcessingException {
        AnyOfMultiMatchMember2 a = AnyOfMultiMatchMember2.builder() //
                .name("bingo") //
                .description("over the moon") //
                .build();
        String json = JSON.getMapper().writeValueAsString(a);
        // assert that json matches AnyOfMultiMatchMember1 as well
        JSON.getMapper().readValue(json, AnyOfMultiMatchMember1.class);
        // assert that deserialization to oneOf parent class results as AnyOfMultiMatchMember2
        Object o = JSON.getMapper().readValue(json, AnyOfMultiMatch.class).value();
        assertTrue(o instanceof AnyOfMultiMatchMember2);
    }
    
}