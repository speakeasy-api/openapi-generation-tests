/* 
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

package org.openapis.secondary.openapi;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.Test;
import org.openapis.openapi.CommonHelpers;
import org.openapis.secondary.openapi.models.components.AuthServiceRequestBody;
import org.openapis.secondary.openapi.models.components.BasicAuth;
import org.openapis.secondary.openapi.models.components.SchemeBasicAuth;
import org.openapis.secondary.openapi.models.components.Security;
import org.openapis.secondary.openapi.models.operations.*;

public class AuthTests {
    @Test
    void testNoAuth() throws Exception {
        CommonHelpers.recordTest("auth-hoisted-no-auth-retained");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        NoAuthResponse res = s.auth().noAuthDirect();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
    }

    @Test
    void testBasicAuth() throws Exception {
        CommonHelpers.recordTest("auth-hoisted-basic-auth");

        SDK s = SDK.builder()
                .security(Security.builder().username("testUser").password("testPass").build())
                .build();
        assertNotNull(s);

        BasicAuthResponse res = s.auth().basicAuth().user("testUser").passwd("testPass").call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
        assertTrue(res.user().get().authenticated());
    }

    @Test
    void testApiKeyAuthGlobal() throws Exception {
        CommonHelpers.recordTest("auth-hoisted-operation-auth-retained");

        SDK s = SDK.builder().build();
        assertNotNull(s);

        MultipleMixedOptionsAuthResponse res = s.authNew().multipleMixedOptionsAuth()
                .security(MultipleMixedOptionsAuthSecurity.builder()
                        .basicAuth(SchemeBasicAuth.builder().username("testUser")
                                .password("testPass").build())
                        .build())
                .request(AuthServiceRequestBody.builder().basicAuth(
                        BasicAuth.builder().username("testUser").password("testPass").build())
                        .build())
                .call();

        assertNotNull(res);
        assertEquals(200, res.statusCode());
    }
}
