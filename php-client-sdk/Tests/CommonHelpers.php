<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Tests;

//fwrite(STDERR, print_r($metadata, TRUE));

class CommonHelpers
{
    public static function recordTest(string $id): void
    {
        file_put_contents('test-php-record.txt', $id."\n", FILE_APPEND | LOCK_EX);
    }

    public static function sanitizeQueryParameters(string $url): string
    {
        return CommonHelpers::sanitizeTimestamp(CommonHelpers::sortQueryParameters($url));
    }

    public static function sortQueryParameters(string $url): string
    {
        $parts = explode('?', $url);

        if (count($parts) == 1) {
            return $url;
        }

        $query = $parts[1];
        $params = explode('&', $query);

        usort($params, function ($a, $b) {
            $one = explode('=', $a)[0];
            $two = explode('=', $b)[0];

            if ($one == $two) {
                return explode('=', $a)[1] < explode('=', $b)[1] ? -1 : 1;
            }

            return ($one < $two) ? -1 : 1;
        });

        return $parts[0].'?'.implode('&', $params);
    }

    public static function sanitizeTimestamp(string $timestamp): string
    {
        return preg_replace_callback(
            '/(\d{4}-\d{2}-\d{2}T\d{2}.*?\d{2}.*?\d{2}\.*\d*\+\d*:\d*)/',
            function ($matches) {
                return CommonHelpers::truncateTimestamp($matches[1]);
            },
            $timestamp,
        );
    }

    public static function truncateTimestamp(string $timestamp): string
    {
        return preg_replace_callback(
            '/(.*?)\.\d*\+\d*:\d*/',
            function ($matches) {
                return $matches[1];
            },
            $timestamp,
        );
    }
}
