<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Speakeasy\Client\Credentials\Tests;

use Speakeasy\Client\Credentials\Tests\CommonHelpers;
use Speakeasy\Client\Credentials\Models\Components\Security;
use PHPUnit\Framework\TestCase;

final class ClientCredentialsHookTest extends TestCase
{
    public function testClientCredentialsHook(): void
    {
        CommonHelpers::recordTest('hooks-client-credentials-success');
        
        $sdk = \Speakeasy\Client\Credentials\SDK::builder()->setSecurity(new Security(clientID: 'speakeasy-sdks', clientSecret: 'supersecret-'.randSequence(10)))->build();
        
        $response = $sdk->authenticatedRequest(null);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());

        $response = $sdk->authenticatedRequest(null);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertFalse($response->httpMeta->response->hasHeader("clientId"));
        $this->assertFalse($response->httpMeta->response->hasHeader("clientSecret"));

    }

    public function testClientCredentialsHookSuccessfullyAuthenticatesWithAltTokenUrl(): void
    {
        CommonHelpers::recordTest('hooks-client-credentials-success-alt-token-url');
        
        $sdk = \Speakeasy\Client\Credentials\SDK::builder()->setSecurity(new Security(
            clientID: 'speakeasy-sdks',
            clientSecret: 'supersecret-'.randSequence(10),
            tokenURL: '/clientcredentials/alt/token'))->build();
        
        $response = $sdk->authenticatedRequest(null);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());

        $response = $sdk->authenticatedRequest(null);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());

    }
}

function randSequence(int $length): string
{
    $chars = str_split("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
    $randKeys = array_rand($chars, $length);
    return implode('', array_intersect_key($chars, $randKeys));
}
