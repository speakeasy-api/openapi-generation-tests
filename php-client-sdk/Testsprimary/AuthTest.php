<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Tests;

use OpenAPI\OpenAPI\Tests\CommonHelpers;
use PHPUnit\Framework\TestCase;

final class AuthTest extends TestCase
{
    public function testNoAuth(): void
    {
        CommonHelpers::recordTest('auth-no-auth');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $response = $sdk->auth->noAuth();

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
    }

    public function testBasicAuth(): void
    {
        CommonHelpers::recordTest('auth-basic-auth');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $request = new \OpenAPI\OpenAPI\Models\Shared\AuthServiceRequestBody(
            basicAuth: new \OpenAPI\OpenAPI\Models\Shared\BasicAuth(
                username: 'testUser',
                password: 'testPass'
            )
        );

        $security = new \OpenAPI\OpenAPI\Models\Operations\BasicAuthNewSecurity(
            username: 'testUser',
            password: 'testPass'
        );

        $response = $sdk->authNew->basicAuthNew($request, $security);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
    }

    public function testBasicAuthEmpty(): void
    {
        CommonHelpers::recordTest('auth-basic-auth-empty');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $request = new \OpenAPI\OpenAPI\Models\Shared\AuthServiceRequestBody(
            basicAuth: new \OpenAPI\OpenAPI\Models\Shared\BasicAuth(
                username: '',
                password: '',
            )
        );

        $security = new \OpenAPI\OpenAPI\Models\Operations\BasicAuthNewSecurity(
            username: '',
            password: '',
        );

        $response = $sdk->authNew->basicAuthNew($request, $security);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
    }

    public function testBasicAuthUsernameOnly(): void
    {
        CommonHelpers::recordTest('auth-basic-auth-username-only');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $request = new \OpenAPI\OpenAPI\Models\Shared\AuthServiceRequestBody(
            basicAuth: new \OpenAPI\OpenAPI\Models\Shared\BasicAuth(
                username: 'testUser',
                password: '',
            )
        );


        $security = new \OpenAPI\OpenAPI\Models\Operations\BasicAuthNewSecurity(
            username: 'testUser',
            password: '',
        );

        $response = $sdk->authNew->basicAuthNew($request, $security);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
    }

    public function testBasicAuthPasswordOnly(): void
    {
        CommonHelpers::recordTest('auth-basic-auth-password-only');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $request = new \OpenAPI\OpenAPI\Models\Shared\AuthServiceRequestBody(
            basicAuth: new \OpenAPI\OpenAPI\Models\Shared\BasicAuth(
                username: '',
                password: 'testPass',
            )
        );

        $security = new \OpenAPI\OpenAPI\Models\Operations\BasicAuthNewSecurity(
            username: '',
            password: 'testPass',
        );

        $response = $sdk->authNew->basicAuthNew($request, $security);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
    }

    public function testApiKeyAuthGlobal(): void
    {
        CommonHelpers::recordTest('auth-api-key-auth-global');

        $security = new \OpenAPI\OpenAPI\Models\Shared\Security(apiKeyAuth: 'Bearer test_api_key');
        $sdk = \OpenAPI\OpenAPI\SDK::builder()->setSecurity($security)->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $response = $sdk->auth->apiKeyAuthGlobal();

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertEquals('test_api_key', $response->token->token);
    }

    public function testBearerAuthOperationWithPrefix(): void
    {
        CommonHelpers::recordTest('auth-bearer-auth-operation-with-prefix');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();
        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $security = new \OpenAPI\OpenAPI\Models\Operations\BearerAuthSecurity(bearerAuth: 'Bearer testToken');

        $response = $sdk->auth->bearerAuth($security);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertTrue($response->token->authenticated);
        $this->assertEquals('testToken', $response->token->token);
    }

    public function testBearerAuthOperationWithoutPrefix(): void
    {
        CommonHelpers::recordTest('auth-bearer-auth-operation-without-prefix');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();
        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $security = new \OpenAPI\OpenAPI\Models\Operations\BearerAuthSecurity(bearerAuth: 'testToken');

        $response = $sdk->auth->bearerAuth($security);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertTrue($response->token->authenticated);
        $this->assertEquals('testToken', $response->token->token);
    }

    public function testOauth2Auth(): void
    {
        CommonHelpers::recordTest('auth-oauth2-auth');

        $security = new \OpenAPI\OpenAPI\Models\Shared\Security(oauth2: 'Bearer testToken');
        $sdk = \OpenAPI\OpenAPI\SDK::builder()->setSecurity($security)->build();
        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $request = new \OpenAPI\OpenAPI\Models\Shared\AuthServiceRequestBody();

        $header = new \OpenAPI\OpenAPI\Models\Shared\HeaderAuth(
            headerName: 'Authorization',
            expectedValue: 'Bearer testToken',
        );

        $request->headerAuth = [
            $header,
        ];

        $response = $sdk->authNew->oauth2AuthNew($request);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
    }

    public function testOpenIdConnectAuth(): void
    {
        CommonHelpers::recordTest('auth-open-id-connect-auth');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();
        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $request = new \OpenAPI\OpenAPI\Models\Shared\AuthServiceRequestBody();

        $header = new \OpenAPI\OpenAPI\Models\Shared\HeaderAuth(
            headerName: 'Authorization',
            expectedValue: 'Bearer testToken',
        );
        $request->headerAuth = [
            $header,
        ];

        $security = new \OpenAPI\OpenAPI\Models\Operations\OpenIdConnectAuthNewSecurity(openIdConnect: 'Bearer testToken');

        $response = $sdk->authNew->openIdConnectAuthNew($request, $security);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
    }

    public function testMultipleSimpleSchemeAuth(): void
    {
        CommonHelpers::recordTest('auth-multiple-simple-scheme-auth');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $request = new \OpenAPI\OpenAPI\Models\Shared\AuthServiceRequestBody();

        $header1 = new \OpenAPI\OpenAPI\Models\Shared\HeaderAuth(
            headerName: 'x-api-key',
            expectedValue: 'test_api_key'
        );

        $header2 = new \OpenAPI\OpenAPI\Models\Shared\HeaderAuth(
            headerName: 'Authorization',
            expectedValue: 'Bearer testToken',
        );

        $request->headerAuth = [
            $header1,
            $header2,
        ];

        $security = new \OpenAPI\OpenAPI\Models\Operations\MultipleSimpleSchemeAuthSecurity(
            apiKeyAuthNew: 'test_api_key',
            oauth2: 'Bearer testToken',
        );

        $response = $sdk->authNew->multipleSimpleSchemeAuth($request, $security);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
    }

    public function testMultipleMixedSchemeAuth(): void
    {
        CommonHelpers::recordTest('auth-multiple-mixed-scheme-auth');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $request = new \OpenAPI\OpenAPI\Models\Shared\AuthServiceRequestBody(
            basicAuth: new \OpenAPI\OpenAPI\Models\Shared\BasicAuth(
                username: 'testUser',
                password: 'testPass'
            )
        );

        $header1 = new \OpenAPI\OpenAPI\Models\Shared\HeaderAuth(
            headerName: 'x-api-key',
            expectedValue: 'test_api_key'
        );

        $request->headerAuth = [
            $header1,
        ];

        $security = new \OpenAPI\OpenAPI\Models\Operations\MultipleMixedSchemeAuthSecurity(
            apiKeyAuthNew: 'test_api_key',
            basicAuth: new \OpenAPI\OpenAPI\Models\Shared\SchemeBasicAuth(
                username: 'testUser',
                password: 'testPass',
            )
        );

        $response = $sdk->authNew->multipleMixedSchemeAuth($request, $security);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
    }

    public function testMultipleSimpleOptionsAuthFirstOption(): void
    {
        CommonHelpers::recordTest('auth-multiple-simple-options-auth-first-option');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $request = new \OpenAPI\OpenAPI\Models\Shared\AuthServiceRequestBody();

        $header1 = new \OpenAPI\OpenAPI\Models\Shared\HeaderAuth(
            headerName: 'x-api-key',
            expectedValue: 'test_api_key',
        );

        $request->headerAuth = [
            $header1,
        ];

        $security = new \OpenAPI\OpenAPI\Models\Operations\MultipleSimpleOptionsAuthSecurity();
        $security->apiKeyAuthNew = 'test_api_key';

        $response = $sdk->authNew->multipleSimpleOptionsAuth($request, $security);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
    }

    public function testMultipleSimpleOptionsAuthSecondOption(): void
    {
        CommonHelpers::recordTest('auth-multiple-simple-options-auth-second-option');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $request = new \OpenAPI\OpenAPI\Models\Shared\AuthServiceRequestBody();

        $header1 = new \OpenAPI\OpenAPI\Models\Shared\HeaderAuth(
            headerName: 'Authorization',
            expectedValue: 'Bearer testToken'
        );

        $request->headerAuth = [
            $header1,
        ];

        $security = new \OpenAPI\OpenAPI\Models\Operations\MultipleSimpleOptionsAuthSecurity(oauth2: 'Bearer testToken');

        $response = $sdk->authNew->multipleSimpleOptionsAuth($request, $security);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
    }

    public function testMultipleMixedOptionsAuthFirstOption(): void
    {
        CommonHelpers::recordTest('auth-multiple-mixed-options-auth-first-option');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $request = new \OpenAPI\OpenAPI\Models\Shared\AuthServiceRequestBody();

        $header1 = new \OpenAPI\OpenAPI\Models\Shared\HeaderAuth(
            headerName: 'x-api-key',
            expectedValue: 'test_api_key',
        );

        $request->headerAuth = [
            $header1,
        ];

        $security = new \OpenAPI\OpenAPI\Models\Operations\MultipleMixedOptionsAuthSecurity(apiKeyAuthNew: 'test_api_key');

        $response = $sdk->authNew->multipleMixedOptionsAuth($request, $security);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
    }

    public function testMultipleMixedOptionsAuthSecondOption(): void
    {
        CommonHelpers::recordTest('auth-multiple-mixed-options-auth-second-option');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $request = new \OpenAPI\OpenAPI\Models\Shared\AuthServiceRequestBody(
            basicAuth: new \OpenAPI\OpenAPI\Models\Shared\BasicAuth(
                username: 'testUser',
                password: 'testPass',
            )
        );

        $security = new \OpenAPI\OpenAPI\Models\Operations\MultipleMixedOptionsAuthSecurity(
            basicAuth: new \OpenAPI\OpenAPI\Models\Shared\SchemeBasicAuth(
                username: 'testUser',
                password: 'testPass',
            )
        );

        $response = $sdk->authNew->multipleMixedOptionsAuth($request, $security);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
    }

    public function testMultipleOptionsWithSimpleSchemesAuthFirstOption(): void
    {
        CommonHelpers::recordTest('auth-multiple-options-with-simple-schemes-auth-first-option');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $request = new \OpenAPI\OpenAPI\Models\Shared\AuthServiceRequestBody();

        $header1 = new \OpenAPI\OpenAPI\Models\Shared\HeaderAuth(
            headerName: 'x-api-key',
            expectedValue: 'test_api_key'
        );

        $header2 = new \OpenAPI\OpenAPI\Models\Shared\HeaderAuth(
            headerName: 'Authorization',
            expectedValue: 'Bearer testToken'
        );

        $request->headerAuth = [
            $header1,
            $header2,
        ];

        $security = new \OpenAPI\OpenAPI\Models\Operations\MultipleOptionsWithSimpleSchemesAuthSecurity(
            option1: new \OpenAPI\OpenAPI\Models\Operations\MultipleOptionsWithSimpleSchemesAuthSecurityOption1(
                apiKeyAuthNew: 'test_api_key',
                oauth2: 'Bearer testToken',
            )
        );

        $response = $sdk->authNew->multipleOptionsWithSimpleSchemesAuth($request, $security);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
    }

    public function testMultipleOptionsWithSimpleSchemesAuthSecondOption(): void
    {
        CommonHelpers::recordTest('auth-multiple-options-with-simple-schemes-auth-second-option');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $request = new \OpenAPI\OpenAPI\Models\Shared\AuthServiceRequestBody();

        $header1 = new \OpenAPI\OpenAPI\Models\Shared\HeaderAuth(
            headerName: 'x-api-key',
            expectedValue: 'test_api_key'
        );

        $header2 = new \OpenAPI\OpenAPI\Models\Shared\HeaderAuth(
            headerName: 'Authorization',
            expectedValue: 'Bearer testToken'
        );

        $request->headerAuth = [
            $header1,
            $header2,
        ];

        $security = new \OpenAPI\OpenAPI\Models\Operations\MultipleOptionsWithSimpleSchemesAuthSecurity(
            option2: new \OpenAPI\OpenAPI\Models\Operations\MultipleOptionsWithSimpleSchemesAuthSecurityOption2(
                apiKeyAuthNew: 'test_api_key',
                openIdConnect: 'Bearer testToken'
            )
        );

        $response = $sdk->authNew->multipleOptionsWithSimpleSchemesAuth($request, $security);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
    }

    public function testMultipleOptionsWithMixedSchemesAuthFirstOption(): void
    {
        CommonHelpers::recordTest('auth-multiple-options-with-mixed-schemes-auth-first-option');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $request = new \OpenAPI\OpenAPI\Models\Shared\AuthServiceRequestBody();

        $header1 = new \OpenAPI\OpenAPI\Models\Shared\HeaderAuth(
            headerName: 'x-api-key',
            expectedValue: 'test_api_key'
        );

        $header2 = new \OpenAPI\OpenAPI\Models\Shared\HeaderAuth(
            headerName: 'Authorization',
            expectedValue: 'Bearer testToken'
        );

        $request->headerAuth = [
            $header1,
            $header2,
        ];

        $security = new \OpenAPI\OpenAPI\Models\Operations\MultipleOptionsWithMixedSchemesAuthSecurity(
            option1: new \OpenAPI\OpenAPI\Models\Operations\MultipleOptionsWithMixedSchemesAuthSecurityOption1(
                apiKeyAuthNew: 'test_api_key',
                oauth2: 'Bearer testToken',
            )
        );

        $response = $sdk->authNew->multipleOptionsWithMixedSchemesAuth($request, $security);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
    }

    public function testMultipleOptionsWithMixedSchemesAuthSecondOption(): void
    {
        CommonHelpers::recordTest('auth-multiple-options-with-mixed-schemes-auth-second-option');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $request = new \OpenAPI\OpenAPI\Models\Shared\AuthServiceRequestBody(
            basicAuth: new \OpenAPI\OpenAPI\Models\Shared\BasicAuth(
                username: 'testUser',
                password: 'testPass',
            )
        );

        $header1 = new \OpenAPI\OpenAPI\Models\Shared\HeaderAuth(
            headerName: 'x-api-key',
            expectedValue: 'test_api_key',
        );

        $request->headerAuth = [
            $header1,
        ];

        $security = new \OpenAPI\OpenAPI\Models\Operations\MultipleOptionsWithMixedSchemesAuthSecurity();
        $security->option2 = new \OpenAPI\OpenAPI\Models\Operations\MultipleOptionsWithMixedSchemesAuthSecurityOption2(
            apiKeyAuthNew: 'test_api_key',
            basicAuth: new \OpenAPI\OpenAPI\Models\Shared\SchemeBasicAuth(
                username: 'testUser',
                password: 'testPass',
            )
        );

        $response = $sdk->authNew->multipleOptionsWithMixedSchemesAuth($request, $security);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
    }

    public function testFunctionCallbacksForOAuthSupportGlobalSecurity(): void
    {
        CommonHelpers::recordTest('auth-function-callbacks-oauth-global-security');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->setSecuritySource(function () {
            $security = new \OpenAPI\OpenAPI\Models\Shared\Security(oauth2: 'Bearer global');

            return $security;
        })->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $response = $sdk->auth->globalBearerAuth();

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertEquals('global', $response->token->token);
    }
}
