<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Tests;

use GuzzleHttp\Exception\ConnectException;
use OpenAPI\OpenAPI\Models\Errors\APIException;
use OpenAPI\OpenAPI\Models\Errors\StatusGetXSpeakeasyErrorsResponseBodyThrowable;
use OpenAPI\OpenAPI\Models\Errors\ErrorThrowable;

use OpenAPI\OpenAPI\Tests\CommonHelpers;
use PHPUnit\Framework\TestCase;

final class ErrorsTest extends TestCase
{
    public function testStatusGetError_DefaultErrorCodes(): void
    {
        CommonHelpers::recordTest('errors-status-get-error-default-error-codes');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()
            ->build();

        $this->expectException(APIException::class);
        $this->expectExceptionCode(400);
        $response = $sdk->errors->statusGetError(400);
        $this->assertNull($response);

        $this->expectException(APIException::class);
        $this->expectExceptionCode(500);
        $response = $sdk->errors->statusGetError(500);
        $this->assertNull($response);
    }

    public function testStatusGetError_300_NonError(): void
    {
        CommonHelpers::recordTest('errors-status-get-error300-non-error');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()
            ->build();

        $response = $sdk->errors->statusGetError(300);
        $this->assertNotNull($response);
        $this->assertEquals(300, $response->httpMeta->response->getStatusCode());
    }

    public function testStatusgetErrorXSpeakeasyErrors(): void
    {
        CommonHelpers::recordTest('errors-status-get-error-x-speakeasy-errors');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()
            ->build();

        $this->expectException(APIException::class);
        $this->expectExceptionCode(400);
        $this->expectExceptionMessage('API error occurred');
        $response = $sdk->errors->statusGetXSpeakeasyErrors(400);
        $this->assertNull($response);
    }

    public function testStatusgetErrorXSpeakeasyErrors401(): void
    {
        $sdk = \OpenAPI\OpenAPI\SDK::builder()
            ->build();

        $this->expectException(APIException::class);
        $this->expectExceptionCode(401);
        $this->expectExceptionMessage('API error occurred');
        $response = $sdk->errors->statusGetXSpeakeasyErrors(401);
        $this->assertNull($response);
    }

    public function testStatusgetErrorXSpeakeasyErrors402(): void
    {
        $sdk = \OpenAPI\OpenAPI\SDK::builder()
            ->build();

        $this->expectException(APIException::class);
        $this->expectExceptionCode(402);
        $this->expectExceptionMessage('API error occurred');
        $response = $sdk->errors->statusGetXSpeakeasyErrors(402);
        $this->assertNull($response);
    }

    public function testStatusgetErrorXSpeakeasyErrors500(): void
    {
        $sdk = \OpenAPI\OpenAPI\SDK::builder()
            ->build();

            $this->expectException(ErrorThrowable::class);
        $this->expectExceptionCode(500);
        $this->expectExceptionMessage('an error occurred');
        $response = $sdk->errors->statusGetXSpeakeasyErrors(500);
        $this->assertNull($response);
    }

    public function testStatusgetErrorXSpeakeasyErrors501(): void
    {
        $sdk = \OpenAPI\OpenAPI\SDK::builder()
            ->build();

        $this->expectException(StatusGetXSpeakeasyErrorsResponseBodyThrowable::class);
        $this->expectExceptionCode(501);
        $this->expectExceptionMessage('an error occurred');
        $response = $sdk->errors->statusGetXSpeakeasyErrors(501);
        $this->assertNull($response);
    }

    public function testConnectionErrorGet(): void
    {
        CommonHelpers::recordTest('errors-connection-error');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()
            ->build();

        $this->expectException(ConnectException::class);
        $this->expectExceptionMessage('cURL error 6: Could not resolve host: somebrokenapi.broken (see https://curl.haxx.se/libcurl/c/libcurl-errors.html) for http://somebrokenapi.broken/anything/connectionError');
        $response = $sdk->errors->connectionErrorGet();
        $this->assertNull($response);
    }
}
