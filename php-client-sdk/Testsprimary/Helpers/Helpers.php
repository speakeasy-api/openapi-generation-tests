<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Tests\Helpers;

use Brick\DateTime\LocalDate;
use OpenAPI\OpenAPI\Models\Shared;
use Brick\Math\BigInteger;

//fwrite(STDERR, print_r($metadata, TRUE));

class Helpers
{
    public static function createSimpleObject(): Shared\SimpleObject
    {
        $object = new Shared\SimpleObject(
            str: 'test',
            bool: true,
            bigint: BigInteger::of(8821239038968084),
            bigintStr: BigInteger::of('9223372036854775808'),
            int: 1,
            int32: 1,
            int32Enum: Shared\Int32Enum::FiftyFive,
            intEnum: Shared\IntEnum::Second,
            num: 1.1,
            float32: 1.1,
            enum: Shared\Enum::One,
            any: 'any',
            date: LocalDate::parse('2020-01-01'),
            dateTime: \DateTime::createFromFormat('Y-m-d\TH:i:s.up', '2020-01-01T00:00:00.000001Z'),
            boolOpt: true,
            strOpt: 'testOptional'
        );

        return $object;
    }

    public static function createSimpleObjectWithType(): Shared\SimpleObjectWithType
    {
        $object = new Shared\SimpleObjectWithType(
            str: 'test',
            bool: true,
            int: 1,
            int32: 1,
            int32Enum: Shared\SimpleObjectWithTypeInt32Enum::FiftyFive,
            intEnum: Shared\SimpleObjectWithTypeIntEnum::Second,
            num: 1.1,
            float32: 1.1,
            enum: Shared\Enum::One,
            any: 'any',
            date: LocalDate::parse('2020-01-01'),
            dateTime: \DateTime::createFromFormat('Y-m-d\TH:i:s.up', '2020-01-01T00:00:00.000001Z'),
            boolOpt: true,
            strOpt: 'testOptional',
            type: 'SimpleObjectWithType',
        );

        return $object;
    }

    public static function createDeepObject(): Shared\DeepObject
    {
        $simpleObj = Helpers::createSimpleObject();

        $deep = new Shared\DeepObject(
            any: $simpleObj,
            str: 'test',
            bool: true,
            int: 1,
            num: 1.1,
            obj: $simpleObj,
            arr: [$simpleObj, $simpleObj],
            map: ['key' => $simpleObj]
        );

        return $deep;
    }

    public static function createDeepObjectWithType(): Shared\DeepObjectWithType
    {
        $simpleObj = Helpers::createSimpleObject();

        $deep = new Shared\DeepObjectWithType(
            any: $simpleObj,
            str: 'test',
            bool: true,
            int: 1,
            num: 1.1,
            obj: $simpleObj,
            arr: [$simpleObj, $simpleObj],
            map: ['key' => $simpleObj],
            type: 'DeepObjectWithType',
        );

        return $deep;
    }

    public static function createSimpleObjectWithNonStandardTypeName(): Shared\SimpleObjectWithNonStandardTypeName
    {
        $object = new Shared\SimpleObjectWithNonStandardTypeName(
            any: 'any',
            bool: true,
            boolOpt: true,
            date: LocalDate::parse('2020-01-01'),
            dateTime: \DateTime::createFromFormat('Y-m-d\TH:i:s.up', '2020-01-01T00:00:00.000001Z'),
            enum: Shared\Enum::One,
            float32: 1.1,
            int: 1,
            int32: 1,
            int32Enum: Shared\SimpleObjectWithNonStandardTypeNameInt32Enum::FiftyFive,
            intEnum: Shared\SimpleObjectWithNonStandardTypeNameIntEnum::Second,
            intOptNull: null,
            num: 1.1,
            numOptNull: null,
            str: 'test',
            strOpt: 'testOptional',
            objType: 'SimpleObjectWithNonStandardTypeName'
        );
        return $object;
    }

    public static function assertEquivalent($test, $obj, $other)
    {
        if (is_array($obj) && is_array($other)) {
            $ret = true;
            foreach ($obj as $key => $value) {
                if (!array_key_exists($key, $other)) {
                    $ret = $ret && false;
                }
                $ret = $ret && Helpers::assertEquivalent($test, $value, $other[$key]);
            }
        } elseif ($obj !== $other) {
            return false;
        }
        return true;
    }
}
