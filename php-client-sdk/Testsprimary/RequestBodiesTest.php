<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Tests;

use OpenAPI\OpenAPI\Tests\CommonHelpers;
use OpenAPI\OpenAPI\Tests\Helpers\Helpers;
use OpenAPI\OpenAPI\Models\Operations;
use OpenAPI\OpenAPI\Models\Shared;
use OpenAPI\OpenAPI\Utils;
use OpenAPI\OpenAPI\Utils\JSON;
use PHPUnit\Framework\TestCase;

final class RequestBodiesTest extends TestCase
{
    public function testRequestBodyPostApplicationJsonSimple(): void
    {
        CommonHelpers::recordTest('request-bodies-post-application-json-simple');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = Helpers::createSimpleObject();

        $response = $sdk->requestBodies->requestBodyPostApplicationJsonSimple($obj);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        Helpers::assertEquivalent($this, $obj, $response->res->json);
    }

    public function testRequestBodyPostApplicationJsonArray(): void
    {
        CommonHelpers::recordTest('request-bodies-post-application-json-array');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = Helpers::createSimpleObject();

        $arr = [$obj, $obj];

        $response = $sdk->requestBodies->requestBodyPostApplicationJsonArray($arr);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        Helpers::assertEquivalent($this, $arr, $response->res);
    }

    public function testRequestBodyPostApplicationJsonArrayOfArray(): void
    {
        CommonHelpers::recordTest('request-bodies-post-application-json-array-of-array');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = Helpers::createSimpleObject();

        $arrArr = [[$obj], [$obj]];

        $response = $sdk->requestBodies->requestBodyPostApplicationJsonArrayOfArray($arrArr);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        Helpers::assertEquivalent($this, $arrArr, $response->res);
    }

    public function testRequestBodyPostApplicationJsonMap(): void
    {
        CommonHelpers::recordTest('request-bodies-post-application-json-map');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = Helpers::createSimpleObject();

        $m = [
            'mapElem1' => $obj,
            'mapElem2' => $obj,
        ];

        $response = $sdk->requestBodies->requestBodyPostApplicationJsonMap($m);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        Helpers::assertEquivalent($this, $m, $response->res);
    }

    public function testRequestBodyPostApplicationJsonMapOfMap(): void
    {
        CommonHelpers::recordTest('request-bodies-post-application-json-map-of-map');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = Helpers::createSimpleObject();

        $mm = [
            'mapElem1' => [
                'subMapElem1' => $obj,
                'subMapElem2' => $obj,
            ],
            'mapElem2' => [
                'subMapElem1' => $obj,
                'subMapElem2' => $obj,
            ],
        ];

        $response = $sdk->requestBodies->requestBodyPostApplicationJsonMapOfMap($mm);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        Helpers::assertEquivalent($this, $mm, $response->res);
    }

    public function testRequestBodyPostApplicationJsonMapOfArray(): void
    {
        CommonHelpers::recordTest('request-bodies-post-application-json-map-of-array');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = Helpers::createSimpleObject();

        $mArr = [
            'mapElem1' => [$obj, $obj],
            'mapElem2' => [$obj, $obj],
        ];

        $response = $sdk->requestBodies->requestBodyPostApplicationJsonMapOfArray($mArr);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        Helpers::assertEquivalent($this, $mArr, $response->res);
    }

    public function testRequestBodyPostApplicationJsonArrayOfMap(): void
    {
        CommonHelpers::recordTest('request-bodies-post-application-json-array-of-map');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = Helpers::createSimpleObject();

        $arrM = [
            [
                'mapElem1' => $obj,
                'mapElem2' => $obj,
            ],
            [
                'mapElem1' => $obj,
                'mapElem2' => $obj,
            ],
        ];

        $response = $sdk->requestBodies->requestBodyPostApplicationJsonArrayOfMap($arrM);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        Helpers::assertEquivalent($this, $arrM, $response->res);
    }

    public function testRequestBodyPostApplicationJsonMapOfPrimitive(): void
    {
        CommonHelpers::recordTest('request-bodies-post-application-json-map-of-primitive');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $m = [
            'mapElem1' => 'hello',
            'mapElem2' => 'world',
        ];

        $response = $sdk->requestBodies->requestBodyPostApplicationJsonMapOfPrimitive($m);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        $this->assertEquals($m, $response->res);
    }

    public function testRequestBodyPostApplicationJsonArrayOfPrimitive(): void
    {
        CommonHelpers::recordTest('request-bodies-post-application-json-array-of-primitive');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $arr = ['hello', 'world'];

        $response = $sdk->requestBodies->requestBodyPostApplicationJsonArrayOfPrimitive($arr);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        $this->assertEquals($arr, $response->res);
    }

    public function testRequestBodyPostApplicationJsonMapOfMapOfPrimitive(): void
    {
        CommonHelpers::recordTest('request-bodies-post-application-json-map-of-map-of-primitive');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $mm = [
            'mapElem1' => [
                'subMapElem1' => 'foo',
                'subMapElem2' => 'bar',
            ],
            'mapElem2' => [
                'subMapElem1' => 'buzz',
                'subMapElem2' => 'bazz',
            ],
        ];

        $response = $sdk->requestBodies->requestBodyPostApplicationJsonMapOfMapOfPrimitive($mm);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        $this->assertEquals($mm, $response->res);
    }

    public function testRequestBodyPostApplicationJsonArrayOfArrayOfPrimitive(): void
    {
        CommonHelpers::recordTest('request-bodies-post-application-json-array-of-array-of-primitive');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $arrArr = [
            ['foo', 'bar'],
            ['buzz', 'bazz'],
        ];

        $response = $sdk->requestBodies->requestBodyPostApplicationJsonArrayOfArrayOfPrimitive($arrArr);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        $this->assertEquals($arrArr, $response->res);
    }

    public function testRequestBodyPostApplicationJsonArrayObject(): void
    {
        CommonHelpers::recordTest('request-bodies-post-application-json-array-object');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = Helpers::createSimpleObject();

        $arr = [$obj, $obj];

        $response = $sdk->requestBodies->requestBodyPostApplicationJsonArrayObj($arr);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->arrObjValue);
        Helpers::assertEquivalent($this, $arr, $response->arrObjValue->json);
    }

    public function testRequestBodyPostApplicationJsonMapObject(): void
    {
        CommonHelpers::recordTest('request-bodies-post-application-json-map-object');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = Helpers::createSimpleObject();

        $m = [
            'mapElem1' => $obj,
            'mapElem2' => $obj,
        ];

        $response = $sdk->requestBodies->requestBodyPostApplicationJsonMapObj($m);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->mapObjValue);
        Helpers::assertEquivalent($this, $m, $response->mapObjValue->json);
    }

    public function testRequestBodyPostApplicationJsonDeep(): void
    {
        CommonHelpers::recordTest('request-bodies-post-application-json-deep');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $deepObject = Helpers::createDeepObject();

        $response = $sdk->requestBodies->requestBodyPostApplicationJsonDeep($deepObject);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);

        $resAny = (object) $response->res->json->any;

        unset($response->res->json->any);
        unset($deepObject->any);

        Helpers::assertEquivalent($this, $deepObject, $response->res->json);
        $this->assertEquals('test', $resAny->str);
        $this->assertEquals('true', $resAny->bool);
        $this->assertEquals('1', $resAny->int);
        $this->assertEquals('1', $resAny->int32);
        $this->assertEquals('1.1', $resAny->num);
        $this->assertEquals('1.1', $resAny->float32);
        $this->assertEquals(\OpenAPI\OpenAPI\Models\Shared\Enum::One, $resAny->enum);
        $this->assertEquals('any', $resAny->any);
        $this->assertEquals(\Brick\DateTime\LocalDate::parse('2020-01-01'), $resAny->date);
        $this->assertEquals(\DateTime::createFromFormat('Y-m-d\TH:i:s.up', '2020-01-01T00:00:00.000001Z'), $resAny->dateTime);
        $this->assertEquals('true', $resAny->boolOpt);
        $this->assertEquals('testOptional', $resAny->strOpt);
    }

    public function testRequestBodyPostApplicationJsonMultipleJsonFiltered(): void
    {
        CommonHelpers::recordTest('request-bodies-post-application-json-multiple-json-filtered');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = Helpers::createSimpleObject();

        $response = $sdk->requestBodies->requestBodyPostApplicationJsonMultipleJsonFiltered($obj);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        Helpers::assertEquivalent($this, $obj, $response->res->json);
    }

    public function testRequestBodyPostMultipleContentTypesComponentFiltered(): void
    {
        CommonHelpers::recordTest('request-bodies-post-multiple-content-types-component-filtered-application-json');
        CommonHelpers::recordTest('request-bodies-post-multiple-content-types-component-filtered-multipart-form-data');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = Helpers::createSimpleObject();

        $response = $sdk->requestBodies->requestBodyPostMultipleContentTypesComponentFiltered($obj);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        Helpers::assertEquivalent($this, $obj, $response->res->json);
    }

    public function testRequestBodyPostMultipleContentTypesInlineFiltered(): void
    {
        CommonHelpers::recordTest('request-bodies-post-multiple-content-types-inline-filtered');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $request = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesInlineFilteredRequestBody(
            bool: true,
            num: 1.1,
            str: 'test'
        );

        $response = $sdk->requestBodies->requestBodyPostMultipleContentTypesInlineFiltered($request);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        $this->assertEquals(true, $response->res->json['bool']);
        $this->assertEquals(1.1, $response->res->json['num']);
        $this->assertEquals('test', $response->res->json['str']);
    }

    public function testRequestBodyPostMultipleContentTypesSplitJson(): void
    {
        CommonHelpers::recordTest('request-bodies-post-multiple-content-types-split-json');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $request = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitJsonRequestBody(
            bool: true,
            num: 1.1,
            str: 'test',
        );

        $response = $sdk->requestBodies->requestBodyPostMultipleContentTypesSplitJson($request);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        $this->assertEquals(true, $response->res->json['bool']);
        $this->assertEquals(1.1, $response->res->json['num']);
        $this->assertEquals('test', $response->res->json['str']);
    }

    public function testRequestBodyPostMultipleContentTypesSplitMultipart(): void
    {
        CommonHelpers::recordTest('request-bodies-post-multiple-content-types-split-multipart');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $request = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitMultipartRequestBody(
            bool2: true,
            num2: 1.1,
            str2: 'test'
        );

        $response = $sdk->requestBodies->requestBodyPostMultipleContentTypesSplitMultipart($request);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        $this->assertEquals('true', $response->res->form['bool2']);
        $this->assertEquals('1.1', $response->res->form['num2']);
        $this->assertEquals('test', $response->res->form['str2']);
    }

    public function testRequestBodyPostMultipleContentTypesSplitForm(): void
    {
        CommonHelpers::recordTest('request-bodies-post-multiple-content-types-split-form');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $request = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitFormRequestBody(
            bool3: true,
            num3: 1.1,
            str3: 'test'
        );

        $response = $sdk->requestBodies->requestBodyPostMultipleContentTypesSplitForm($request);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        $this->assertEquals('true', $response->res->form['bool3']);
        $this->assertEquals('1.1', $response->res->form['num3']);
        $this->assertEquals('test', $response->res->form['str3']);
    }

    public function testRequestBodyPostMultipleContentTypesSplitJsonWithParam(): void
    {
        CommonHelpers::recordTest('request-bodies-post-multiple-content-types-split-json-with-param');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $requestBody = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody(
            bool: true,
            num: 1.1,
            str: 'test body'
        );

        $response = $sdk->requestBodies->requestBodyPostMultipleContentTypesSplitParamJson($requestBody, 'test param');

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        $this->assertEquals(true, $response->res->json['bool']);
        $this->assertEquals(1.1, $response->res->json['num']);
        $this->assertEquals('test body', $response->res->json['str']);
        $this->assertEquals('test param', $response->res->args['paramStr']);
    }

    public function testRequestBodyPostMultipleContentTypesSplitMultipartWithParam(): void
    {
        CommonHelpers::recordTest('request-bodies-post-multiple-content-types-split-multipart-with-param');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $requestBody = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody(
            bool2: true,
            num2: 1.1,
            str2: 'test body',
        );

        $response = $sdk->requestBodies->requestBodyPostMultipleContentTypesSplitParamMultipart($requestBody, 'test param');

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        $this->assertEquals('true', $response->res->form['bool2']);
        $this->assertEquals('1.1', $response->res->form['num2']);
        $this->assertEquals('test body', $response->res->form['str2']);
        $this->assertEquals('test param', $response->res->args['paramStr']);
    }

    public function testRequestBodyPostMultipleContentTypesSplitFormWithParam(): void
    {
        CommonHelpers::recordTest('request-bodies-post-multiple-content-types-split-form-with-param');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $requestBody = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitParamFormRequestBody(
            bool3: true,
            num3: 1.1,
            str3: 'test body',
        );
        $response = $sdk->requestBodies->requestBodyPostMultipleContentTypesSplitParamForm($requestBody, 'test param');

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        $this->assertEquals('true', $response->res->form['bool3']);
        $this->assertEquals('1.1', $response->res->form['num3']);
        $this->assertEquals('test body', $response->res->form['str3']);
        $this->assertEquals('test param', $response->res->args['paramStr']);
    }

    public function testRequestBodyPutMultipartSimple(): void
    {
        CommonHelpers::recordTest('request-bodies-put-multipart-simple');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = Helpers::createSimpleObject();

        $response = $sdk->requestBodies->requestBodyPutMultipartSimple($obj);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        $this->assertEquals('any', $response->res->form->any);
        $this->assertEquals('true', $response->res->form->bool);
        $this->assertEquals('true', $response->res->form->boolOpt);
        $this->assertEquals('2020-01-01', $response->res->form->date);
        $this->assertEquals('2020-01-01T00:00:00.000001Z', $response->res->form->dateTime);
        $this->assertEquals('one', $response->res->form->enum);
        $this->assertEquals('1.1', $response->res->form->float32);
        $this->assertEquals('1', $response->res->form->int);
        $this->assertEquals('1', $response->res->form->int32);
        $this->assertFalse(isset($response->res->form->intOptNull));
        $this->assertEquals('1.1', $response->res->form->num);
        $this->assertFalse(isset($response->res->form->numOptNull));
        $this->assertEquals('test', $response->res->form->str);
        $this->assertEquals('testOptional', $response->res->form->strOpt);
    }

    public function testRequestBodyPutMultipartDeep(): void
    {
        CommonHelpers::recordTest('request-bodies-put-multipart-deep');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = Helpers::createDeepObject();

        $response = $sdk->requestBodies->requestBodyPutMultipartDeep($obj);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        $this->assertEquals($obj->str, $response->res->form->str);
        $this->assertEquals($obj->int, $response->res->form->int);
        $this->assertEquals($obj->num, $response->res->form->num);
        $this->assertEquals($obj->bool, $response->res->form->bool);

        $s = JSON::createSerializer();
        $this->assertEquals($s->serialize($obj->arr, 'json'), $response->res->form->arr);
        $this->assertEquals($s->serialize($obj->obj, 'json'), $response->res->form->obj);
        $this->assertEquals($s->serialize($obj->map, 'json'), $response->res->form->map);
    }

    public function testRequestBodyPutMultipartFile(): void
    {
        CommonHelpers::recordTest('request-bodies-put-multipart-file');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $path = './Tests/testUpload.json';
        $file = fopen($path, 'r');
        $content = fread($file, filesize($path));

        $request = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutMultipartFileRequestBody(
            file: new \OpenAPI\OpenAPI\Models\Operations\File(
                fileName: 'testUpload.json',
                content: $content
            )
        );

        $response = $sdk->requestBodies->requestBodyPutMultipartFile($request);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        $this->assertArrayHasKey('file', $response->res->files);
        $this->assertEquals($content, $response->res->files['file']);
    }

    public function testRequestBodyPutMultipartFileRef(): void
    {
        CommonHelpers::recordTest('request-bodies-put-multipart-file-ref');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $path = './Tests/testUpload.json';
        $file = fopen($path, 'r');
        $content = fread($file, filesize($path));

        $request = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutMultipartFileRefRequestBody(
            file: new \OpenAPI\OpenAPI\Models\Shared\BinaryString(
                fileName: 'testUpload.json',
                content: $content
            )
        );

        $response = $sdk->requestBodies->requestBodyPutMultipartFileRef($request);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        $this->assertArrayHasKey('file', $response->res->files);
        $this->assertEquals($content, $response->res->files['file']);
    }

    public function testRequestBodyPostFormSimple(): void
    {
        CommonHelpers::recordTest('request-bodies-post-form-simple');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = Helpers::createSimpleObject();

        $response = $sdk->requestBodies->requestBodyPostFormSimple($obj);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        $this->assertEquals('any', $response->res->form->any);
        $this->assertEquals('true', $response->res->form->bool);
        $this->assertEquals('true', $response->res->form->boolOpt);
        $this->assertEquals('2020-01-01', $response->res->form->date);
        $this->assertEquals('2020-01-01T00:00:00.000001Z', $response->res->form->dateTime);
        $this->assertEquals('one', $response->res->form->enum);
        $this->assertEquals('1.1', $response->res->form->float32);
        $this->assertEquals('1', $response->res->form->int);
        $this->assertEquals('1', $response->res->form->int32);
        $this->assertFalse(isset($response->res->form->intOptNull));
        $this->assertEquals('1.1', $response->res->form->num);
        $this->assertFalse(isset($response->res->form->numOptNull));
        $this->assertEquals('test', $response->res->form->str);
        $this->assertEquals('testOptional', $response->res->form->strOpt);
    }

    public function testRequestBodyPostFormDeep(): void
    {
        CommonHelpers::recordTest('request-bodies-post-form-deep');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = Helpers::createDeepObject();

        $response = $sdk->requestBodies->requestBodyPostFormDeep($obj);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertEquals($obj->str, $response->res->form->str);
        $this->assertEquals($obj->int, $response->res->form->int);
        $this->assertEquals($obj->num, $response->res->form->num);
        $this->assertEquals($obj->bool, $response->res->form->bool);

        $s = JSON::createSerializer();
        $this->assertEquals($s->serialize($obj->arr, 'json'), $response->res->form->arr);
        $this->assertEquals($s->serialize($obj->obj, 'json'), $response->res->form->obj);
        $this->assertEquals($s->serialize($obj->map, 'json'), $response->res->form->map);
    }

    public function testRequestBodyPostFormMapPrimitive(): void
    {
        CommonHelpers::recordTest('request-bodies-post-form-map-primitive');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $m = [
            'key1' => 'value1',
            'key2' => 'value2',
            'key3' => 'value3',
        ];

        $response = $sdk->requestBodies->requestBodyPostFormMapPrimitive($m);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        $this->assertEquals($m, $response->res->form);
    }

    public function testRequestBodyPutString(): void
    {
        CommonHelpers::recordTest('request-bodies-put-string');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $str = 'Hello World';

        $response = $sdk->requestBodies->requestBodyPutString($str);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        $this->assertEquals($str, $response->res->data);
    }

    public function testRequestBodyPutBytes(): void
    {
        CommonHelpers::recordTest('request-bodies-put-bytes');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $path = './Tests/testUpload.json';
        $file = fopen($path, 'r');
        $content = fread($file, filesize($path));

        $response = $sdk->requestBodies->requestBodyPutBytes($content);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        $this->assertEquals($content, $response->res->data);
    }

    public function testRequestBodyPutStringWithParams(): void
    {
        CommonHelpers::recordTest('request-bodies-put-string-with-params');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $str = 'Hello World';

        $response = $sdk->requestBodies->requestBodyPutStringWithParams($str, 'test param');

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        $this->assertEquals($str, $response->res->data);
        $this->assertEquals('test param', $response->res->args->queryStringParam);
    }

    public function testRequestBodyPutBytesWithParams(): void
    {
        CommonHelpers::recordTest('request-bodies-put-bytes-with-params');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $path = './Tests/testUpload.json';
        $file = fopen($path, 'r');
        $content = fread($file, filesize($path));

        $response = $sdk->requestBodies->requestBodyPutBytesWithParams($content, 'test param');

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->res);
        $this->assertEquals($content, $response->res->data);
        $this->assertEquals('test param', $response->res->args->queryStringParam);
    }

    public function testRequestBodyReadOnlyInput(): void
    {
        CommonHelpers::recordTest('request-bodies-read-only-input');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $response = $sdk->requestBodies->requestBodyReadOnlyInput(new \OpenAPI\OpenAPI\Models\Shared\ReadOnlyObjectInput());

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->readOnlyObject);
        $this->assertEquals(true, $response->readOnlyObject->bool);
        $this->assertEquals(1.0, $response->readOnlyObject->num);
        $this->assertEquals('hello', $response->readOnlyObject->string);
    }

    public function testRequestBodyWriteOnlyOutput(): void
    {
        CommonHelpers::recordTest('request-bodies-write-only-output');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $r = new \OpenAPI\OpenAPI\Models\Shared\WriteOnlyObject(
            bool: true,
            num: 1.0,
            string: 'hello',
        );

        $response = $sdk->requestBodies->requestBodyWriteOnlyOutput($r);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->writeOnlyObject);
    }

    public function testRequestBodyWriteOnly(): void
    {
        CommonHelpers::recordTest('request-bodies-write-only');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $r = new \OpenAPI\OpenAPI\Models\Shared\WriteOnlyObject(
            bool: true,
            num: 1.0,
            string: 'hello',
        );

        $response = $sdk->requestBodies->requestBodyWriteOnly($r);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->readOnlyObject);
        $this->assertEquals(true, $response->readOnlyObject->bool);
        $this->assertEquals(1.0, $response->readOnlyObject->num);
        $this->assertEquals('hello', $response->readOnlyObject->string);
    }

    public function testRequestBodyReadAndWrite(): void
    {
        CommonHelpers::recordTest('request-bodies-read-and-write');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $r = new \OpenAPI\OpenAPI\Models\Shared\ReadWriteObject(
            num1: 1,
            num2: 2,
            num3: 4,
        );

        $response = $sdk->requestBodies->requestBodyReadAndWrite($r);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->readWriteObject);
        $this->assertEquals(4, $response->readWriteObject->num3);
        $this->assertEquals(7, $response->readWriteObject->sum);
    }

    
    public function testRequestBodyPostNotNullableNotRequiredStringBody(): void
    {
        CommonHelpers::recordTest("request-bodies-post-not-nullable-not-required-string-body");

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);


        $response = $sdk->requestBodies->requestBodyPostNotNullableNotRequiredStringBody(null);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertEquals("", $response->object->data);
    }

    public function testRequestbodyPostNullableNotRequiredStringBody(): void
    {
	    CommonHelpers::recordTest("request-bodies-post-nullable-not-required-string-body");

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);


        $response = $sdk->requestBodies->requestBodyPostNullableNotRequiredStringBody(null);

        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertEquals("", $response->object->data);
    }

    public function testRequestBodyPostNullableRequiredEmptyObject(): void
    {
        $tests = [
            [
                "name" => "Required field initialized only",
                "arg" => new Operations\NullableRequiredEmptyObjectPostRequestBody(
                    requiredObj: new Operations\RequiredObj()
                ),
                "want" => '{"RequiredObj":{},"NullableRequiredObj":null}',
                "testId" => "request-bodies-post-nullable-required-empty-object-nullable-set"
            ],
            [
                "name" => "Optional field initialized only",
                "arg" => new Operations\NullableRequiredEmptyObjectPostRequestBody
                (
                    requiredObj: new Operations\RequiredObj(),
                    nullableOptionalObj: new Operations\NullableOptionalObj()
                ),
                "want" => '{"RequiredObj":{},"NullableRequiredObj":null,"NullableOptionalObj":{}}',
                "testId" => "request-bodies-post-nullable-required-empty-object-optional-set"
            ],
            [
                "name" => "All fields initialized",
                "arg" => new Operations\NullableRequiredEmptyObjectPostRequestBody(
                    requiredObj: new Operations\RequiredObj(),
                    nullableOptionalObj: new Operations\NullableOptionalObj(),
                    nullableRequiredObj: new Operations\NullableRequiredObj()
                ),
                "want" => '{"RequiredObj":{},"NullableRequiredObj":{},"NullableOptionalObj":{}}',
                "testId" => "request-bodies-post-nullable-required-empty-object-all-set"
            ]
        ];

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();
        foreach ($tests as $test) {

            if (!(!array_key_exists('testId', $test) && empty($test['testId']))) {
                CommonHelpers::recordTest($test['testId']);
            }

            $req = $test['arg'];

            $response = $sdk->requestBodies->nullableRequiredEmptyObjectPost($req);


            $this->assertNotNull($response);
            $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
            $body = Utils\Utils::serializeRequestBody($req, 'request', 'json');
            $this->assertEquals($test['want'], $body['body']);
        }
    }

    public function testRequestBodyPostNullableRequiredProperty()
    {
        $tests = [
            [
                "name" => "Empty initializer",
                "arg" => new Operations\NullableRequiredPropertyPostRequestBody(),
                "want" => '{"NullableRequiredArray":null,"NullableRequiredBigIntStr":null,"NullableRequiredDateTime":null,"NullableRequiredDecimalStr":null,"NullableRequiredEnum":null,"NullableRequiredInt":null}'
            ],
            [
                "name" => "All fields set to null",
                "arg" => new Operations\NullableRequiredPropertyPostRequestBody
                (
                    nullableOptionalInt: null,
                    nullableRequiredArray: null,
                    nullableRequiredEnum: null,
                    nullableRequiredInt: null,
                    nullableRequiredDateTime: null,
                    nullableRequiredBigIntStr: null,
                    nullableRequiredDecimalStr: null
                ),
                "want" => "{\"NullableRequiredArray\":null,\"NullableRequiredBigIntStr\":null,\"NullableRequiredDateTime\":null,\"NullableRequiredDecimalStr\":null,\"NullableRequiredEnum\":null,\"NullableRequiredInt\":null}",
                "testId" => "request-bodies-post-nullable-required-property-all-null"
            ],
            [
                "name" => "Optional field initialized",
                "arg" => new Operations\NullableRequiredPropertyPostRequestBody(nullableOptionalInt: 0),
                "want" => '{"NullableRequiredArray":null,"NullableRequiredBigIntStr":null,"NullableRequiredDateTime":null,"NullableRequiredDecimalStr":null,"NullableRequiredEnum":null,"NullableRequiredInt":null,"NullableOptionalInt":0}'
            ],
            [
                "name" => "All fields set to non-null value",
                "arg" => new Operations\NullableRequiredPropertyPostRequestBody
                (
                    nullableOptionalInt: 0,
                    nullableRequiredArray: [1.1, 2.2, 3.3],
                    nullableRequiredEnum: Operations\NullableRequiredEnum::Second,
                    nullableRequiredInt: 1,
                    nullableRequiredDateTime: \DateTime::createFromFormat('Y-m-d\TH:i:s.up', '2020-01-01T00:00:00.000001Z'),
                    nullableRequiredBigIntStr: \Brick\Math\BigInteger::of("9223372036854775807"),
                    nullableRequiredDecimalStr: \Brick\Math\BigDecimal::of("3.1415926535897932384626433833")
                ),
                "want" => '{"NullableRequiredArray":[1.1,2.2,3.3],"NullableRequiredBigIntStr":"9223372036854775807","NullableRequiredDateTime":"2020-01-01T00:00:00.000001Z","NullableRequiredDecimalStr":"3.1415926535897932384626433833","NullableRequiredEnum":"second","NullableRequiredInt":1,"NullableOptionalInt":0}',
                "testId" => "request-bodies-post-nullable-required-property-all-set"
            ]
        ];

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();
        foreach ($tests as $test) {
            if (!(!array_key_exists('testId', $test) && empty($test['testId']))) {
                CommonHelpers::recordTest($test['testId']);
            }

            $req = $test['arg'];

            $body = Utils\Utils::serializeRequestBody($req, 'request', 'json');
            $this->assertEquals($test['want'], $body['body']);

            $response = $sdk->requestBodies->nullableRequiredPropertyPost($req);
            $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        }
    }

    public function testRequestBodyPostNullableRequiredSharedObject()
    {
        $tests = [
            [
                "name" => "Required field set to null",
                "arg" => new Operations\NullableRequiredSharedObjectPostRequestBody(),
                "want" => '{"NullableRequiredObj":null}',
                "testId" => "request-bodies-post-nullable-required-shared-object-required-null"
            ],
            [
                "name" => "Both fields set to null",
                "arg" => new Operations\NullableRequiredSharedObjectPostRequestBody
                (
                    nullableOptionalObj: null,
                    nullableRequiredObj: null
                ),
                "want" => '{"NullableRequiredObj":null}',
                "testId" => "request-bodies-post-nullable-required-shared-object-all-null"
            ],
            [
                "name" => "Optional field set to non-null value",
                "arg" => new Operations\NullableRequiredSharedObjectPostRequestBody
                (
                    nullableOptionalObj: new Shared\NullableOptionalObject(required: 1)
                ),
                "want" => '{"NullableRequiredObj":null,"NullableOptionalObj":{"required":1}}',
                "testId" => "request-bodies-post-nullable-required-shared-object-optional-non-null"
            ],
            [
                "name" => "Both fields set to non-null value",
                "arg" => new Operations\NullableRequiredSharedObjectPostRequestBody
                (
                    nullableOptionalObj: new Shared\NullableOptionalObject
                    (
                        required: 1,
                        optional: "test"
                    ),
                    nullableRequiredObj: new Shared\NullableObject(required: 2)
                ),
                "want" => '{"NullableRequiredObj":{"required":2},"NullableOptionalObj":{"required":1,"optional":"test"}}',
                "testId" => 'request-bodies-post-nullable-required-shared-object-all-set'
            ]
        ];

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();
        foreach ($tests as $test) {
            if (!(!array_key_exists('testId', $test) && empty($test['testId']))) {
                CommonHelpers::recordTest($test['testId']);
            }

            $req = $test['arg'];

            $body = Utils\Utils::serializeRequestBody($req, 'request', 'json');
            $this->assertEquals($test['want'], $body['body']);

            $response = $sdk->requestBodies->nullableRequiredSharedObjectPost($req);
            $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        }
    }

    public function testRequestBodyNoBodyNoContentType(): void
    {
        CommonHelpers::recordTest('request-bodies-no-body-no-content-type');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $response = $sdk->methods->methodGet('http://localhost:35456');

        $this->assertEquals(0, $response->httpMeta->request->getBody()->getSize());
        $this->assertEmpty($response->httpMeta->request->getHeader("Content-Type"));


        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNotNull($response->object);
        $this->assertEquals("OK", $response->object->status);
    }

    public function testPostApplicationJsonArrayCamelCase(): void
    {
        CommonHelpers::recordTest('request-bodies-post-application-json-array-camel-case');

        $obj = Helpers::createSimpleObjectCamelCase();

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $res = $sdk->requestBodies->requestBodyPostApplicationJsonArrayCamelCase(
            [
                $obj, $obj
            ]
        );

        $this->assertEquals(200, $res->httpMeta->response->getStatusCode());
        $this->assertCount(2, $res->res);
        foreach ($res->res as $obj) {
            Helpers::assertEquivalent($this, $obj, $obj);
        }
    }

    public function testPostApplicationJsonArrayOfArrayCamelCase(): void
    {
        CommonHelpers::recordTest('request-bodies-post-application-json-array-of-array-camel-case');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = Helpers::createSimpleObjectCamelCase();

        $res = $sdk->requestBodies->requestBodyPostApplicationJsonArrayOfArrayCamelCase(
            [
                [$obj, $obj],
                [$obj, $obj]
            ]
        );

        $this->assertEquals(200, $res->httpMeta->response->getStatusCode());
        $this->assertCount(2, $res->res);

        for ($i = 0; $i < 2; $i++) {
            $this->assertCount(2, $res->res[$i]);
            for ($j = 0; $j < 2; $j++) {
                Helpers::assertEquivalent($this, $res->res[$i][$j], $obj);
            }
        }
    }

    public function testPostApplicationJsonMapCamelCase(): void
    {
        CommonHelpers::recordTest('request-bodies-post-application-json-map-camel-case');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = Helpers::createSimpleObjectCamelCase();

        $res = $sdk->requestBodies->requestBodyPostApplicationJsonMapCamelCase(
            [
                'mapElem1' => $obj,
                'mapElem2' => $obj
            ]
        );

        $this->assertEquals(200, $res->httpMeta->response->getStatusCode());
        $this->assertCount(2, $res->res);
        Helpers::assertEquivalent($this, $res->res['mapElem1'], $obj);
        Helpers::assertEquivalent($this, $res->res['mapElem2'], $obj);
    }

    public function testPostApplicationJsonMapofMapCamelCase(): void
    {
        CommonHelpers::recordTest('request-bodies-post-application-json-map-of-map-camel-case');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = Helpers::createSimpleObjectCamelCase();

        $res = $sdk->requestBodies->requestBodyPostApplicationJsonMapOfMapCamelCase(
            [
                'mapElem1' => [
                    'subMapElem1' => $obj,
                    'subMapElem2' => $obj
                ],
                'mapElem2' => [
                    'subMapElem1' => $obj,
                    'subMapElem2' => $obj
                ]
            ]
        );

        $this->assertEquals(200, $res->httpMeta->response->getStatusCode());
        $this->assertCount(2, $res->res);
        $this->assertCount(2, $res->res['mapElem1']);
        $this->assertCount(2, $res->res['mapElem2']);
        Helpers::assertEquivalent($this, $res->res['mapElem1']['subMapElem1'], $obj);
        Helpers::assertEquivalent($this, $res->res['mapElem1']['subMapElem2'], $obj);
        Helpers::assertEquivalent($this, $res->res['mapElem2']['subMapElem1'], $obj);
        Helpers::assertEquivalent($this, $res->res['mapElem2']['subMapElem2'], $obj);
    }

    public function testPostApplicationJsonMapOfArrayCamelCase(): void
    {
        CommonHelpers::recordTest('request-bodies-post-application-json-map-of-array-camel-case');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = Helpers::createSimpleObjectCamelCase();

        $res = $sdk->requestBodies->requestBodyPostApplicationJsonMapOfArrayCamelCase(
            [
                'mapElem1' => [$obj, $obj],
                'mapElem2' => [$obj, $obj]
            ]
        );

        $this->assertEquals(200, $res->httpMeta->response->getStatusCode());
        $this->assertCount(2, $res->res);
        $this->assertCount(2, $res->res['mapElem1']);
        $this->assertCount(2, $res->res['mapElem2']);
        Helpers::assertEquivalent($this, $res->res['mapElem1'][0], $obj);
        Helpers::assertEquivalent($this, $res->res['mapElem1'][1], $obj);
        Helpers::assertEquivalent($this, $res->res['mapElem2'][0], $obj);
        Helpers::assertEquivalent($this, $res->res['mapElem2'][1], $obj);
    }

    public function testPostApplicationJsonArrayOfMapCamelCase(): void
    {
        CommonHelpers::recordTest('request-bodies-post-application-json-array-of-map-camel-case');

        $obj = Helpers::createSimpleObjectCamelCase();

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $maps = [
            [
                'mapElem1' => Helpers::createSimpleObjectCamelCase(),
                'mapElem2' => Helpers::createSimpleObjectCamelCase()
            ],
            [
                'mapElem1' => Helpers::createSimpleObjectCamelCase(),
                'mapElem2' => Helpers::createSimpleObjectCamelCase()
            ]
        ];

        $res = $sdk->requestBodies->requestBodyPostApplicationJsonArrayOfMapCamelCase($maps);

        $this->assertEquals(200, $res->httpMeta->response->getStatusCode());
        $this->assertCount(2, $res->res);
        $this->assertCount(2, $res->res[0]);
        $this->assertCount(2, $res->res[1]);
        Helpers::assertEquivalent($this, $res->res[0]['mapElem1'], $obj);
        Helpers::assertEquivalent($this, $res->res[0]['mapElem2'], $obj);
        Helpers::assertEquivalent($this, $res->res[1]['mapElem1'], $obj);
        Helpers::assertEquivalent($this, $res->res[1]['mapElem2'], $obj);
    }

    public function testPostApplicationJsonArrayObjectCamelCase(): void
    {
        CommonHelpers::recordTest('request-bodies-post-application-json-array-object-camel-case');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $obj = Helpers::createSimpleObjectCamelCase();

        $res = $sdk->requestBodies->requestBodyPostApplicationJsonArrayObjCamelCase(
            [
                $obj,
                $obj
            ]
        );

        $this->assertEquals(200, $res->httpMeta->response->getStatusCode());
        $this->assertCount(2, $res->arrObjValueCamelCase->json);
        Helpers::assertEquivalent($this, $res->arrObjValueCamelCase->json[0], $obj);
        Helpers::assertEquivalent($this, $res->arrObjValueCamelCase->json[1], $obj);
    }

    public function testPostApplicationJsomSimpleCamelCase(): void
    {
        CommonHelpers::recordTest('request-bodies-post-application-json-simple-camel-case');

        $obj = Helpers::createSimpleObjectCamelCase();

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $res = $sdk->requestBodies->requestBodyPostApplicationJsonSimpleCamelCase(
            $obj
        );
        $this->assertEquals(200, $res->httpMeta->response->getStatusCode());
        Helpers::assertEquivalent($this, $res->res->json, $obj);
        $res->httpMeta->response->getBody()->rewind();
        $rawResponseString = $res->httpMeta->response->getBody()->getContents();

        $this->assertEquals(28, substr_count($rawResponseString, '_val'));
    }

    public function testPostApplicationJsonDeepCamelCase(): void
    {
        CommonHelpers::recordTest('request-bodies-post-application-json-deep-camel-case');

        $obj = Helpers::createDeepObjectCamelCase();

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $res = $sdk->requestBodies->requestBodyPostApplicationJsonDeepCamelCase(
            $obj
        );

        $this->assertEquals(200, $res->httpMeta->response->getStatusCode());
        Helpers::assertEquivalent($this, $res->res->json, $obj);
    }

    public function testPostApplicationJsonMapObjectCamelCase(): void
    {
        CommonHelpers::recordTest('request-bodies-post-application-json-map-object-camel-case');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $obj = Helpers::createSimpleObjectCamelCase();

        $res = $sdk->requestBodies->requestBodyPostApplicationJsonMapObjCamelCase(
            [
                'mapElem1' => $obj,
                'mapElem2' => $obj
            ]
        );

        $this->assertEquals(200, $res->httpMeta->response->getStatusCode());
        $this->assertCount(2, $res->mapObjValueCamelCase->json);
        Helpers::assertEquivalent($this, $res->mapObjValueCamelCase->json['mapElem1'], $obj);
        Helpers::assertEquivalent($this, $res->mapObjValueCamelCase->json['mapElem2'], $obj);
    }

    public function testEmptyObject(): void
    {
        CommonHelpers::recordTest('request-bodies-post-empty-object');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $res = $sdk->requestBodies->requestBodyPostEmptyObject(new Operations\RequestBodyPostEmptyObjectRequestBody());

        $this->assertEquals(200, $res->httpMeta->response->getStatusCode());
    }

    public function testRequestBodyPostComplexNumberTypes(): void
    {
        CommonHelpers::recordTest('request-bodies-complex-number-types');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $req = new Operations\RequestBodyPostComplexNumberTypesRequest(
            complexNumberTypes: new Shared\ComplexNumberTypes(
                bigint: \Brick\Math\BigInteger::of("9007199254740991"),
                bigintStr: \Brick\Math\BigInteger::of("9223372036854775807"),
                decimal: \Brick\Math\BigDecimal::of("3.1415926535898"),
                decimalStr: \Brick\Math\BigDecimal::of("3.141592653589793238462643383279")
            ),
            pathBigInt: \Brick\Math\BigInteger::of("9007199254740991"),
            pathBigIntStr: \Brick\Math\BigInteger::of("9223372036854775807"),
            pathDecimal: \Brick\Math\BigDecimal::of("3.1415926535898"),
            pathDecimalStr: \Brick\Math\BigDecimal::of("3.141592653589793238462643383279"),
            queryBigInt: \Brick\Math\BigInteger::of("9007199254740991"),
            queryBigIntStr: \Brick\Math\BigInteger::of("9223372036854775807"),
            queryDecimal: \Brick\Math\BigDecimal::of("3.1415926535898"),
            queryDecimalStr: \Brick\Math\BigDecimal::of("3.141592653589793238462643383279")
        );

        $res = $sdk->requestBodies->requestBodyPostComplexNumberTypes($req);

        $this->assertEquals(200, $res->httpMeta->response->getStatusCode());
        $this->assertEquals($req->complexNumberTypes->bigint, $res->object->json->bigint);
        $this->assertEquals($req->complexNumberTypes->bigintStr, $res->object->json->bigintStr);
        $this->assertEquals($req->complexNumberTypes->decimal, $res->object->json->decimal);
        $this->assertEquals($req->complexNumberTypes->decimalStr, $res->object->json->decimalStr);
        $this->assertEquals(
            "http://localhost:35123/anything/requestBodies/post/9007199254740991/9223372036854775807/3.1415926535898/3.141592653589793238462643383279/complex-number-types?queryBigInt=9007199254740991&queryBigIntStr=9223372036854775807&queryDecimal=3.1415926535898&queryDecimalStr=3.141592653589793238462643383279", $res->object->url);
    }

}
