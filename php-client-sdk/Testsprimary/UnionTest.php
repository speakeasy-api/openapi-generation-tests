<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Tests;

use Brick\DateTime\LocalDate;
use OpenAPI\OpenAPI\Tests\CommonHelpers;
use OpenAPI\OpenAPI\Tests\Helpers\Helpers;
use OpenAPI\OpenAPI\Models\Shared\Bike;
use OpenAPI\OpenAPI\Models\Shared\NullableOneOfRefInObject;
use OpenAPI\OpenAPI\Models\Shared\NullableOneOfTypeInObject;
use OpenAPI\OpenAPI\Models\Shared\TypedObject1;
use OpenAPI\OpenAPI\Models\Shared\TypedObject1Type;
use OpenAPI\OpenAPI\Models\Shared\TypedObject2;
use OpenAPI\OpenAPI\Models\Shared\TypedObject2Type;
use OpenAPI\OpenAPI\Models\Shared\TypedObject3;
use OpenAPI\OpenAPI\Models\Shared\TypedObject3Type;
use OpenAPI\OpenAPI\Models\Shared\Obj1;
use OpenAPI\OpenAPI\Models\Shared\Obj2;
use OpenAPI\OpenAPI\Models\Operations\UnionMapRequestBody;
use OpenAPI\OpenAPI\Models\Operations\UnionMapOptionalRequestBody;
use OpenAPI\OpenAPI\Models\Operations\OneOfOverlappingObjectsRequestBody;
use OpenAPI\OpenAPI\Utils;
use PHPUnit\Framework\TestCase;

final class UnionTest extends TestCase
{
    public function testStronglyTypedOneOfPostBasic(): void
    {
        CommonHelpers::recordTest('unions-strongly-typed-one-of-post-basic');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = Helpers::createSimpleObjectWithType();
        $response = $sdk->unions->stronglyTypedOneOfPost(request: $obj);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertEquals($obj, $response->res->json);
    }

    public function testStronglyTypedOneOfPostDeep(): void
    {
        CommonHelpers::recordTest('unions-strongly-typed-one-of-post-deep');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);
        $obj = Helpers::createDeepObjectWithType();
        $response = $sdk->unions->stronglyTypedOneOfPost(request: $obj);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertEquals($obj, $response->res->json);
    }

    public function testCollectionOneOfPost(): void
    {
        CommonHelpers::recordTest('unions-collections-one-of-post');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $response = $sdk->unions->collectionOneOfPost(request: ['one', 'two']);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertEquals(['one', 'two'], $response->res->json);

        $response = $sdk->unions->collectionOneOfPost(request: ['1' => 'one', '2' => 'two']);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertEquals(['1' => 'one', '2' => 'two'], $response->res->json);
    }

    public function testStronglyTypedOneOfPostWithNonStandardDiscriminatorName(): void
    {
        CommonHelpers::recordTest('unions-strongly-typed-one-of-post-with-non-standard-discriminator-name');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = Helpers::createSimpleObjectWithNonStandardTypeName();

        $response = $sdk->unions->stronglyTypedOneOfPostWithNonStandardDiscriminatorName(request: $obj);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertEquals($obj, $response->res->json);
    }


    public function testWeaklyTypedOneOfPostBasic(): void
    {
        CommonHelpers::recordTest('unions-weakly-typed-one-of-post-basic');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = Helpers::createSimpleObject();

        $response = $sdk->unions->weaklyTypedOneOfPost(request: $obj);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertInstanceOf(\OpenAPI\OpenAPI\Models\Shared\SimpleObject::class, $response->res->json);
    }

    public function testWeaklyTypedOneOfPostDeep(): void
    {
        CommonHelpers::recordTest('unions-weakly-typed-one-of-post-deep');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = Helpers::createDeepObject();

        $response = $sdk->unions->weaklyTypedOneOfPost(request: $obj);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertInstanceOf(\OpenAPI\OpenAPI\Models\Shared\DeepObject::class, $response->res->json);
    }

    public function testTypedObjectOneOfPostObj1(): void
    {
        CommonHelpers::recordTest('unions-typed-object-one-of-post-obj1');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = new TypedObject1(value: 'obj1', type: TypedObject1Type::Obj1);

        $response = $sdk->unions->typedObjectOneOfPost(request: $obj);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertInstanceOf(\OpenAPI\OpenAPI\Models\Shared\TypedObject1::class, $response->res->json);
        $this->assertEquals($obj, $response->res->json);
    }

    public function testTypedObjectOneOfPostObj2(): void
    {
        CommonHelpers::recordTest('unions-typed-object-one-of-post-obj2');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = new TypedObject2(value: 'obj2', type: TypedObject2Type::Obj2);

        $response = $sdk->unions->typedObjectOneOfPost(request: $obj);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertInstanceOf(\OpenAPI\OpenAPI\Models\Shared\TypedObject2::class, $response->res->json);
        $this->assertEquals($obj, $response->res->json);
    }

    public function testTypedObjectOneOfPostObj3(): void
    {
        CommonHelpers::recordTest('unions-typed-object-one-of-post-obj3');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = new TypedObject3(value: 'obj3', type: TypedObject3Type::Obj3);

        $response = $sdk->unions->typedObjectOneOfPost(request: $obj);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertInstanceOf(\OpenAPI\OpenAPI\Models\Shared\TypedObject3::class, $response->res->json);
        $this->assertEquals($obj, $response->res->json);
    }

    public function testTypedObjectOneOfPostNull(): void
    {
        CommonHelpers::recordTest('unions-typed-object-one-of-post-null');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $this->expectException(\TypeError::class);
        $response = $sdk->unions->typedObjectOneOfPost(request: null);

    }

    public function testTypedObjectNullableOneOfPostObj1(): void
    {
        CommonHelpers::recordTest('unions-typed-object-nullable-one-of-post-obj1');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = new TypedObject1(value: 'one', type: TypedObject1Type::Obj1);

        $response = $sdk->unions->typedObjectNullableOneOfPost(request: $obj);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertInstanceOf(\OpenAPI\OpenAPI\Models\Shared\TypedObject1::class, $response->res->json);
        $this->assertEquals('one', $response->res->json->value);
    }

    public function testTypedObjectNullableOneOfPostObj2(): void
    {
        CommonHelpers::recordTest('unions-typed-object-nullable-one-of-post-obj2');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = new TypedObject2(value: 'two', type: TypedObject2Type::Obj2);

        $response = $sdk->unions->typedObjectNullableOneOfPost(request: $obj);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertInstanceOf(\OpenAPI\OpenAPI\Models\Shared\TypedObject2::class, $response->res->json);
        $this->assertEquals('two', $response->res->json->value);
    }

    public function testTypedObjectNullableOneOfPostNull(): void
    {
        CommonHelpers::recordTest('unions-typed-object-nullable-one-of-post-null');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $response = $sdk->unions->typedObjectNullableOneOfPost(request: null);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertEquals(null, $response->res->json);
    }

    public function testFlattenedTypedObjectPostObj1(): void
    {
        CommonHelpers::recordTest('unions-flattened-typed-object-post-obj1');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = new TypedObject1(value: 'one', type: TypedObject1Type::Obj1);

        $response = $sdk->unions->flattenedTypedObjectPost(request: $obj);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertEquals($obj, $response->res->json);
    }

    public function testUnionsNullableTypedObjectPostObj1(): void
    {
        CommonHelpers::recordTest('unions-nullable-typed-object-post-obj1');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = new TypedObject1(value: 'one', type: TypedObject1Type::Obj1);

        $response = $sdk->unions->nullableTypedObjectPost(request: $obj);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertEquals($obj, $response->res->json);
    }

    public function testUnionsNullableTypedObjectPostNull(): void
    {
        CommonHelpers::recordTest('unions-nullable-typed-object-post-null');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $response = $sdk->unions->nullableTypedObjectPost(request: null);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNull($response->res->json);
    }

    public function testNullableOneOfSchemaPostObj1(): void
    {
        CommonHelpers::recordTest('unions-nullable-oneof-schema-post-obj1');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = new TypedObject1(value: 'one', type: TypedObject1Type::Obj1);

        $response = $sdk->unions->nullableOneOfSchemaPost(request: $obj);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertEquals($obj, $response->res->json);
    }

    public function testNullableOneOfSchemaPostObj2(): void
    {
        CommonHelpers::recordTest('unions-nullable-oneof-schema-post-obj2');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = new TypedObject2(value: 'two', type: TypedObject2Type::Obj2);

        $response = $sdk->unions->nullableOneOfSchemaPost(request: $obj);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertEquals($obj, $response->res->json);
    }

    public function testNullableOneOfShemaPostNull(): void
    {
        CommonHelpers::recordTest("unions-nullable-oneof-schema-post-null");

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();
        $response = $sdk->unions->nullableOneOfSchemaPost(request: null);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNull($response->res->json);
    }

    public function testNullableOneOfTypeInObjectPost(): void
    {
        CommonHelpers::recordTest("unions-nullable-oneof-type-in-object-post");
        $tests = [
            [
                'name' => 'Nullable fields set to null',
                'obj' => new NullableOneOfTypeInObject(
                    nullableOneOfOne: null,
                    nullableOneOfTwo: null,
                    oneOfOne: true
                ),
                'want' => '{"NullableOneOfOne":null,"NullableOneOfTwo":null,"OneOfOne":true}'
            ],
            [
                'name' => 'All fields set to non-null values',
                'obj' => new NullableOneOfTypeInObject(
                    nullableOneOfOne: true,
                    nullableOneOfTwo: 2,
                    oneOfOne: true
                ),
                'want' => '{"NullableOneOfOne":true,"NullableOneOfTwo":2,"OneOfOne":true}'
            ]
        ];
        
        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();
        foreach($tests as $test)
        {
            $req = Utils\Utils::serializeRequestBody($test['obj'], 'Request', 'json');
            $this->assertNotNull($req);
            $this->assertEquals($req['body'], $test['want']);
            $res = $sdk->unions->nullableOneOfTypeInObjectPost($test['obj']);
            $this->assertNotNull($res);
            $this->assertEquals(200, $res->httpMeta->response->getStatusCode());
            $this->assertEquals($test['obj'], $res->res->json);
        }
    }

    public function testNullableOneOfRefInObject(): void
    {
        CommonHelpers::recordTest("unions-nullable-oneof-ref-in-object-post");

        $tests = [
            [
                'name' => 'Non-nullable field set only',
                'obj' => new NullableOneOfRefInObject(
                    oneOfOne: new TypedObject1(value: 'one', type: TypedObject1Type::Obj1)
                ),
                'want' => '{"NullableOneOfOne":null,"NullableOneOfTwo":null,"OneOfOne":{"type":"obj1","value":"one"}}'
            ],
            [
                'name' => 'Nullable fields set to null',
                'obj' => new NullableOneOfRefInObject(
                    nullableOneOfOne: null,
                    nullableOneOfTwo: null,
                    oneOfOne: new TypedObject1(value: 'one', type: TypedObject1Type::Obj1)
                ),
                'want' => '{"NullableOneOfOne":null,"NullableOneOfTwo":null,"OneOfOne":{"type":"obj1","value":"one"}}'
            ],
            [
                'name' => 'All fields set to non-null values',
                'obj' => new NullableOneOfRefInObject(
                    nullableOneOfOne: new TypedObject1(value: 'one', type: TypedObject1Type::Obj1),
                    nullableOneOfTwo: new TypedObject2(value: 'two', type: TypedObject2Type::Obj2),
                    oneOfOne: new TypedObject1(value: '', type: TypedObject1Type::Obj1)
                ),
                'want' => '{"NullableOneOfOne":{"type":"obj1","value":"one"},"NullableOneOfTwo":{"type":"obj2","value":"two"},"OneOfOne":{"type":"obj1","value":""}}'
            ]
        ];

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();
        foreach($tests as $test)
        {
            $req = Utils\Utils::serializeRequestBody($test['obj'], 'Request', 'json');
            $this->assertNotNull($req);
            $this->assertEquals($req['body'], $test['want']);
            $res = $sdk->unions->nullableOneOfRefInObjectPost($test['obj']);
            $this->assertNotNull($res);
            $this->assertEquals(200, $res->httpMeta->response->getStatusCode());
            $this->assertEquals($test['obj'], $res->res->json);
        }
    }
    


    public function testPrimitiveTypeOneOfPostString() {
        CommonHelpers::recordTest('unions-primitive-type-one-of-post-string');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $response = $sdk->unions->primitiveTypeOneOfPost(request: 'str');
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertEquals('str', $response->res->json);
    }

    public function testPrimitiveTypeOneOfPostInteger() {
        CommonHelpers::recordTest('unions-primitive-type-one-of-post-integer');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $response = $sdk->unions->primitiveTypeOneOfPost(request: 1);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertEquals(1, $response->res->json);
    }
    
    public function testPrimitiveTypeOneOfPostNumber() {
        CommonHelpers::recordTest('unions-primitive-type-one-of-post-number');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $response = $sdk->unions->primitiveTypeOneOfPost(request: 1.1);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertEquals(1.1, $response->res->json);
    }

    public function testPrimitiveTypeOneOfPostBoolean() {
        CommonHelpers::recordTest('unions-primitive-type-one-of-post-boolean');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $response = $sdk->unions->primitiveTypeOneOfPost(request: true);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertEquals(true, $response->res->json);
    }

    public function testMixedTypeOneOfPostString() {
        CommonHelpers::recordTest('unions-mixed-type-one-of-post-string');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $response = $sdk->unions->mixedTypeOneOfPost(request: 'str');
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertEquals('str', $response->res->json);
    }

    public function testMixedTypeOneOfPostInteger() {
        CommonHelpers::recordTest('unions-mixed-type-one-of-post-integer');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $response = $sdk->unions->mixedTypeOneOfPost(request: 1);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertEquals(1, $response->res->json);
    }

    public function testMixedTypeOneOfPostObject() {
        CommonHelpers::recordTest('unions-mixed-type-one-of-post-object');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $obj = Helpers::createSimpleObject();
        
        $response = $sdk->unions->mixedTypeOneOfPost(request: $obj);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertEquals($obj, $response->res->json);
    }

    public function testDateNullUnion() {
        CommonHelpers::recordTest('unions-date-null');
        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $response = $sdk->unions->unionDateNull(request: LocalDate::parse('2020-01-01'));
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertInstanceOf(LocalDate::class, $response->res->json);
    }

    public function testDateTimeNullUnion() {
        CommonHelpers::recordTest('unions-datetime-null');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $response = $sdk->unions->unionDateTimeNull(request: \DateTime::createFromFormat('Y-m-d\TH:i:s.up', '2020-01-01T00:00:00.000001Z'));
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertInstanceOf(\DateTime::class, $response->res->json);
    }

    public function testDateTimeBigintUnion() {
        CommonHelpers::recordTest('unions-datetime-bigint');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $response = $sdk->unions->unionDateTimeBigInt(request: \DateTime::createFromFormat('Y-m-d\TH:i:s.up', '2020-01-01T00:00:00.000001Z'));
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertInstanceOf(\DateTime::class, $response->res->json);

        $response = $sdk->unions->unionDateTimeBigInt(request: 9007199254740991);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertEquals(9007199254740991, $response->res->json);
    }

    public function testUnionMap() {
        CommonHelpers::recordTest('unions-union-map');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $response = $sdk->unions->unionMap(request: new UnionMapRequestBody(input: ['str' => 'test', 'bool' => true]));
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertEquals(['str' => 'test', 'bool' => true], $response->res->json->input);
    }

    public function testOptionalUnionMap() {
        //CommonHelpers::recordTest('unions-optional-union-map');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $response = $sdk->unions->UnionMapOptional(request: new UnionMapOptionalRequestBody(input: ['str' => 'test', 'bool' => true]));
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertEquals(['str' => 'test', 'bool' => true], $response->res->json->input);

        $response = $sdk->unions->UnionMapOptional(request: new UnionMapOptionalRequestBody(input: null));
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertNull($response->res->json->input);
    }

    public function testMixedUnionTypes() {
        //CommonHelpers::recordTest('unions-mixed-union-types');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $bike1 = new Bike('white', 'ford', 'round');
        $bike2 = new Bike('brown', 'toyota', 'round');
        $response = $sdk->unions->mixedUnionTypes(request: [$bike1, $bike2]);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertEquals([$bike1, $bike2], $response->res->json);

        $response = $sdk->unions->mixedUnionTypes(request: $bike1);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertEquals($bike1, $response->res->json);
    }

    public function testUnionsExtraJsonProperties() {
        CommonHelpers::recordTest('unions-extra-json-properties');

        $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

        $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

        $req = new OneOfOverlappingObjectsRequestBody(field1: 'test1', field3: 1);

        $response = $sdk->unions->oneOfOverlappingObjects(request: $req);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertInstanceOf(Obj1::class, $response->res->json);
        $this->assertEquals('test1', $response->res->json->field1);

        $req2 = new OneOfOverlappingObjectsRequestBody(field1: 'test2', field2: true, field3: 1);
        $response = $sdk->unions->oneOfOverlappingObjects(request: $req2);
        $this->assertNotNull($response);
        $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
        $this->assertInstanceOf(Obj2::class, $response->res->json);
        $this->assertEquals('test2', $response->res->json->field1);
        $this->assertEquals(true, $response->res->json->field2);
    }

    // TODO - bigint and decimal support
    // public function testBigIntStrDecimalUnion() {
    //     CommonHelpers::recordTest('unions-bigint-str-decimal');

    //     $sdk = \OpenAPI\OpenAPI\SDK::builder()->build();

    //     $this->assertInstanceOf(\OpenAPI\OpenAPI\SDK::class, $sdk);

    //     $response = $sdk->unions->unionBigIntStrDecimal(request: '3.141592653589793');
    //     $this->assertNotNull($response);
    //     $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
    //     $this->assertEquals('3.141592653589793', $response->res->json);

    //     $response = $sdk->unions->unionBigIntStrDecimal(request: 9223372036854775807);
    //     $this->assertNotNull($response);
    //     $this->assertEquals(200, $response->httpMeta->response->getStatusCode());
    //     $this->assertEquals(9223372036854775807, $response->res->json);
    // }
}
