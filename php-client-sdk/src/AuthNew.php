<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

use OpenAPI\OpenAPI\Models\Operations;
use OpenAPI\OpenAPI\Models\Shared;

class AuthNew
{
    public const AUTH_GLOBAL_SERVERS = [

        'http://localhost:35456',
    ];
    public const BASIC_AUTH_NEW_SERVERS = [

        'http://localhost:35456',
    ];
    public const CUSTOM_SCHEME_APP_ID_SERVERS = [

        'http://localhost:35456',
    ];
    public const MULTIPLE_MIXED_OPTIONS_AUTH_SERVERS = [

        'http://localhost:35456',
    ];
    public const MULTIPLE_MIXED_SCHEME_AUTH_SERVERS = [

        'http://localhost:35456',
    ];
    public const MULTIPLE_OPTIONS_WITH_MIXED_SCHEMES_AUTH_SERVERS = [

        'http://localhost:35456',
    ];
    public const MULTIPLE_OPTIONS_WITH_SIMPLE_SCHEMES_AUTH_SERVERS = [

        'http://localhost:35456',
    ];
    public const MULTIPLE_SIMPLE_OPTIONS_AUTH_SERVERS = [

        'http://localhost:35456',
    ];
    public const MULTIPLE_SIMPLE_SCHEME_AUTH_SERVERS = [

        'http://localhost:35456',
    ];
    public const OAUTH2_AUTH_NEW_SERVERS = [

        'http://localhost:35456',
    ];
    public const OPEN_ID_CONNECT_AUTH_NEW_SERVERS = [

        'http://localhost:35456',
    ];
    private SDKConfiguration $sdkConfiguration;
    /**
     * @param  SDKConfiguration  $sdkConfig
     */
    public function __construct(SDKConfiguration $sdkConfig)
    {
        $this->sdkConfiguration = $sdkConfig;
    }

    /**
     * authGlobal
     *
     * @param  ?Shared\AuthServiceRequestBody  $request
     * @param  string  $serverURL
     * @return Operations\AuthGlobalResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function authGlobal(?Shared\AuthServiceRequestBody $request = null, ?string $serverURL = null): Operations\AuthGlobalResponse
    {
        $baseUrl = Utils\Utils::templateUrl(AuthNew::AUTH_GLOBAL_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/auth#authGlobal');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = '*/*';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('POST', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            return new Operations\AuthGlobalResponse(
                statusCode: $statusCode,
                contentType: $contentType,
                rawResponse: $httpResponse
            );
        } elseif ($statusCode == 401 || $statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * basicAuthNew
     *
     * @param  Operations\BasicAuthNewSecurity  $security
     * @param  ?Shared\AuthServiceRequestBody  $request
     * @param  string  $serverURL
     * @return Operations\BasicAuthNewResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function basicAuthNew(Operations\BasicAuthNewSecurity $security, ?Shared\AuthServiceRequestBody $request = null, ?string $serverURL = null): Operations\BasicAuthNewResponse
    {
        $baseUrl = Utils\Utils::templateUrl(AuthNew::BASIC_AUTH_NEW_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/auth#basicAuth');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = '*/*';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('POST', $url);
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);

        $httpResponse = $client->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            return new Operations\BasicAuthNewResponse(
                statusCode: $statusCode,
                contentType: $contentType,
                rawResponse: $httpResponse
            );
        } elseif ($statusCode == 401 || $statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * customSchemeAppId
     *
     * @param  Operations\CustomSchemeAppIdSecurity  $security
     * @param  string  $serverURL
     * @return Operations\CustomSchemeAppIdResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function customSchemeAppId(Operations\CustomSchemeAppIdSecurity $security, ?string $serverURL = null): Operations\CustomSchemeAppIdResponse
    {
        $baseUrl = Utils\Utils::templateUrl(AuthNew::CUSTOM_SCHEME_APP_ID_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/auth/customsecurity/customSchemeAppId');
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = '*/*';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);

        $httpResponse = $client->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            return new Operations\CustomSchemeAppIdResponse(
                statusCode: $statusCode,
                contentType: $contentType,
                rawResponse: $httpResponse
            );
        } elseif ($statusCode == 401 || $statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * multipleMixedOptionsAuth
     *
     * @param  Operations\MultipleMixedOptionsAuthSecurity  $security
     * @param  ?Shared\AuthServiceRequestBody  $request
     * @param  string  $serverURL
     * @return Operations\MultipleMixedOptionsAuthResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function multipleMixedOptionsAuth(Operations\MultipleMixedOptionsAuthSecurity $security, ?Shared\AuthServiceRequestBody $request = null, ?string $serverURL = null): Operations\MultipleMixedOptionsAuthResponse
    {
        $baseUrl = Utils\Utils::templateUrl(AuthNew::MULTIPLE_MIXED_OPTIONS_AUTH_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/auth#multipleMixedOptionsAuth');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = '*/*';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('POST', $url);
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);

        $httpResponse = $client->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            return new Operations\MultipleMixedOptionsAuthResponse(
                statusCode: $statusCode,
                contentType: $contentType,
                rawResponse: $httpResponse
            );
        } elseif ($statusCode == 401 || $statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * multipleMixedSchemeAuth
     *
     * @param  Operations\MultipleMixedSchemeAuthSecurity  $security
     * @param  ?Shared\AuthServiceRequestBody  $request
     * @param  string  $serverURL
     * @return Operations\MultipleMixedSchemeAuthResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function multipleMixedSchemeAuth(Operations\MultipleMixedSchemeAuthSecurity $security, ?Shared\AuthServiceRequestBody $request = null, ?string $serverURL = null): Operations\MultipleMixedSchemeAuthResponse
    {
        $baseUrl = Utils\Utils::templateUrl(AuthNew::MULTIPLE_MIXED_SCHEME_AUTH_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/auth#multipleMixedSchemeAuth');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = '*/*';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('POST', $url);
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);

        $httpResponse = $client->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            return new Operations\MultipleMixedSchemeAuthResponse(
                statusCode: $statusCode,
                contentType: $contentType,
                rawResponse: $httpResponse
            );
        } elseif ($statusCode == 401 || $statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * multipleOptionsWithMixedSchemesAuth
     *
     * @param  Operations\MultipleOptionsWithMixedSchemesAuthSecurity  $security
     * @param  ?Shared\AuthServiceRequestBody  $request
     * @param  string  $serverURL
     * @return Operations\MultipleOptionsWithMixedSchemesAuthResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function multipleOptionsWithMixedSchemesAuth(Operations\MultipleOptionsWithMixedSchemesAuthSecurity $security, ?Shared\AuthServiceRequestBody $request = null, ?string $serverURL = null): Operations\MultipleOptionsWithMixedSchemesAuthResponse
    {
        $baseUrl = Utils\Utils::templateUrl(AuthNew::MULTIPLE_OPTIONS_WITH_MIXED_SCHEMES_AUTH_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/auth#multipleOptionsWithMixedSchemesAuth');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = '*/*';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('POST', $url);
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);

        $httpResponse = $client->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            return new Operations\MultipleOptionsWithMixedSchemesAuthResponse(
                statusCode: $statusCode,
                contentType: $contentType,
                rawResponse: $httpResponse
            );
        } elseif ($statusCode == 401 || $statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * multipleOptionsWithSimpleSchemesAuth
     *
     * @param  Operations\MultipleOptionsWithSimpleSchemesAuthSecurity  $security
     * @param  ?Shared\AuthServiceRequestBody  $request
     * @param  string  $serverURL
     * @return Operations\MultipleOptionsWithSimpleSchemesAuthResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function multipleOptionsWithSimpleSchemesAuth(Operations\MultipleOptionsWithSimpleSchemesAuthSecurity $security, ?Shared\AuthServiceRequestBody $request = null, ?string $serverURL = null): Operations\MultipleOptionsWithSimpleSchemesAuthResponse
    {
        $baseUrl = Utils\Utils::templateUrl(AuthNew::MULTIPLE_OPTIONS_WITH_SIMPLE_SCHEMES_AUTH_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/auth#multipleOptionsWithSimpleSchemesAuth');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = '*/*';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('POST', $url);
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);

        $httpResponse = $client->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            return new Operations\MultipleOptionsWithSimpleSchemesAuthResponse(
                statusCode: $statusCode,
                contentType: $contentType,
                rawResponse: $httpResponse
            );
        } elseif ($statusCode == 401 || $statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * multipleSimpleOptionsAuth
     *
     * @param  Operations\MultipleSimpleOptionsAuthSecurity  $security
     * @param  ?Shared\AuthServiceRequestBody  $request
     * @param  string  $serverURL
     * @return Operations\MultipleSimpleOptionsAuthResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function multipleSimpleOptionsAuth(Operations\MultipleSimpleOptionsAuthSecurity $security, ?Shared\AuthServiceRequestBody $request = null, ?string $serverURL = null): Operations\MultipleSimpleOptionsAuthResponse
    {
        $baseUrl = Utils\Utils::templateUrl(AuthNew::MULTIPLE_SIMPLE_OPTIONS_AUTH_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/auth#multipleSimpleOptionsAuth');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = '*/*';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('POST', $url);
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);

        $httpResponse = $client->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            return new Operations\MultipleSimpleOptionsAuthResponse(
                statusCode: $statusCode,
                contentType: $contentType,
                rawResponse: $httpResponse
            );
        } elseif ($statusCode == 401 || $statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * multipleSimpleSchemeAuth
     *
     * @param  Operations\MultipleSimpleSchemeAuthSecurity  $security
     * @param  ?Shared\AuthServiceRequestBody  $request
     * @param  string  $serverURL
     * @return Operations\MultipleSimpleSchemeAuthResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function multipleSimpleSchemeAuth(Operations\MultipleSimpleSchemeAuthSecurity $security, ?Shared\AuthServiceRequestBody $request = null, ?string $serverURL = null): Operations\MultipleSimpleSchemeAuthResponse
    {
        $baseUrl = Utils\Utils::templateUrl(AuthNew::MULTIPLE_SIMPLE_SCHEME_AUTH_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/auth#multipleSimpleSchemeAuth');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = '*/*';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('POST', $url);
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);

        $httpResponse = $client->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            return new Operations\MultipleSimpleSchemeAuthResponse(
                statusCode: $statusCode,
                contentType: $contentType,
                rawResponse: $httpResponse
            );
        } elseif ($statusCode == 401 || $statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * oauth2AuthNew
     *
     * @param  ?Shared\AuthServiceRequestBody  $request
     * @param  string  $serverURL
     * @return Operations\Oauth2AuthNewResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function oauth2AuthNew(?Shared\AuthServiceRequestBody $request = null, ?string $serverURL = null): Operations\Oauth2AuthNewResponse
    {
        $baseUrl = Utils\Utils::templateUrl(AuthNew::OAUTH2_AUTH_NEW_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/auth#oauth2Auth');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = '*/*';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('POST', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            return new Operations\Oauth2AuthNewResponse(
                statusCode: $statusCode,
                contentType: $contentType,
                rawResponse: $httpResponse
            );
        } elseif ($statusCode == 401 || $statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * openIdConnectAuthNew
     *
     * @param  Operations\OpenIdConnectAuthNewSecurity  $security
     * @param  ?Shared\AuthServiceRequestBody  $request
     * @param  string  $serverURL
     * @return Operations\OpenIdConnectAuthNewResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function openIdConnectAuthNew(Operations\OpenIdConnectAuthNewSecurity $security, ?Shared\AuthServiceRequestBody $request = null, ?string $serverURL = null): Operations\OpenIdConnectAuthNewResponse
    {
        $baseUrl = Utils\Utils::templateUrl(AuthNew::OPEN_ID_CONNECT_AUTH_NEW_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/auth#openIdConnectAuth');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = '*/*';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('POST', $url);
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);

        $httpResponse = $client->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            return new Operations\OpenIdConnectAuthNewResponse(
                statusCode: $statusCode,
                contentType: $contentType,
                rawResponse: $httpResponse
            );
        } elseif ($statusCode == 401 || $statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

}