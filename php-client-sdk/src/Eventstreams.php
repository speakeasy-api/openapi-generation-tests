<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Eventstreams 
{
	
	public const CHAT_SERVERS = [
		'http://localhost:35456',
	];
	
	public const JSON_SERVERS = [
		'http://localhost:35456',
	];
	
	public const MULTILINE_SERVERS = [
		'http://localhost:35456',
	];
	
	public const RICH_SERVERS = [
		'http://localhost:35456',
	];
	
	public const TEXT_SERVERS = [
		'http://localhost:35456',
	];

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * chat
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChatRequestBody $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ChatResponse
     */
	public function chat(
        \OpenAPI\OpenAPI\Models\Operations\ChatRequestBody $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ChatResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Eventstreams::CHAT_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/eventstreams/chat');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json;q=1, text/event-stream;q=0';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChatResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatCompletionResult = $serializer->deserialize((string)$httpResponse->getBody(), 'array<mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/event-stream')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * json
     * 
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\JsonResponse
     */
	public function json(
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\JsonResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Eventstreams::JSON_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/eventstreams/json');
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'text/event-stream';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\JsonResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/event-stream')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * multiline
     * 
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\MultilineResponse
     */
	public function multiline(
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\MultilineResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Eventstreams::MULTILINE_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/eventstreams/multiline');
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'text/event-stream';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\MultilineResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/event-stream')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * rich
     * 
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\RichResponse
     */
	public function rich(
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\RichResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Eventstreams::RICH_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/eventstreams/rich');
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'text/event-stream';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RichResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/event-stream')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * text
     * 
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\TextResponse
     */
	public function text(
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\TextResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Eventstreams::TEXT_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/eventstreams/text');
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'text/event-stream';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\TextResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/event-stream')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}