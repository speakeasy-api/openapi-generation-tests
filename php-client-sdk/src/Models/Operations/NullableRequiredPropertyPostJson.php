<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class NullableRequiredPropertyPostJson
{
    /**
     *
     * @var ?int $nullableOptionalInt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('NullableOptionalInt')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?int $nullableOptionalInt = null;

    /**
     * $nullableRequiredArray
     *
     * @var ?array<float> $nullableRequiredArray
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('NullableRequiredArray')]
    #[\Speakeasy\Serializer\Annotation\Type('array<float>|null')]
    public ?array $nullableRequiredArray;

    /**
     *
     * @var ?\Brick\Math\BigInteger $nullableRequiredBigIntStr
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('NullableRequiredBigIntStr')]
    #[\Speakeasy\Serializer\Annotation\Accessor(getter: 'nullableRequiredBigIntStrAccessor')]
    public ?\Brick\Math\BigInteger $nullableRequiredBigIntStr;

    /**
     *
     * @var ?\DateTime $nullableRequiredDateTime
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('NullableRequiredDateTime')]
    public ?\DateTime $nullableRequiredDateTime;

    /**
     *
     * @var ?\Brick\Math\BigDecimal $nullableRequiredDecimalStr
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('NullableRequiredDecimalStr')]
    #[\Speakeasy\Serializer\Annotation\Accessor(getter: 'nullableRequiredDecimalStrAccessor')]
    public ?\Brick\Math\BigDecimal $nullableRequiredDecimalStr;

    /**
     *
     * @var ?NullableRequiredPropertyPostNullableRequiredEnum $nullableRequiredEnum
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('NullableRequiredEnum')]
    #[\Speakeasy\Serializer\Annotation\Type('\OpenAPI\OpenAPI\Models\Operations\NullableRequiredPropertyPostNullableRequiredEnum|null')]
    public ?NullableRequiredPropertyPostNullableRequiredEnum $nullableRequiredEnum;

    /**
     *
     * @var ?int $nullableRequiredInt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('NullableRequiredInt')]
    public ?int $nullableRequiredInt;

    /**
     *
     * @var mixed $xSpeakeasyTestInternalDirectives
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('x-speakeasy-test-internal-directives')]
    #[\Speakeasy\Serializer\Annotation\Type('mixed')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public mixed $xSpeakeasyTestInternalDirectives = null;

    /**
     * @param  ?array<float>  $nullableRequiredArray
     * @param  ?\Brick\Math\BigInteger  $nullableRequiredBigIntStr
     * @param  ?\DateTime  $nullableRequiredDateTime
     * @param  ?\Brick\Math\BigDecimal  $nullableRequiredDecimalStr
     * @param  ?NullableRequiredPropertyPostNullableRequiredEnum  $nullableRequiredEnum
     * @param  ?int  $nullableRequiredInt
     * @param  mixed  $xSpeakeasyTestInternalDirectives
     * @param  ?int  $nullableOptionalInt
     */
    public function __construct(?array $nullableRequiredArray = null, ?\Brick\Math\BigInteger $nullableRequiredBigIntStr = null, ?\DateTime $nullableRequiredDateTime = null, ?\Brick\Math\BigDecimal $nullableRequiredDecimalStr = null, ?NullableRequiredPropertyPostNullableRequiredEnum $nullableRequiredEnum = null, ?int $nullableRequiredInt = null, mixed $xSpeakeasyTestInternalDirectives = null, ?int $nullableOptionalInt = null)
    {
        $this->nullableRequiredArray = $nullableRequiredArray;
        $this->nullableRequiredBigIntStr = $nullableRequiredBigIntStr;
        $this->nullableRequiredDateTime = $nullableRequiredDateTime;
        $this->nullableRequiredDecimalStr = $nullableRequiredDecimalStr;
        $this->nullableRequiredEnum = $nullableRequiredEnum;
        $this->nullableRequiredInt = $nullableRequiredInt;
        $this->xSpeakeasyTestInternalDirectives = $xSpeakeasyTestInternalDirectives;
        $this->nullableOptionalInt = $nullableOptionalInt;
    }
    public function nullableRequiredBigIntStrAccessor(): ?string
    {
        if ($this->nullableRequiredBigIntStr != null) {
            return $this->nullableRequiredBigIntStr->toBase(10);
        }

        return null;
    }
    public function nullableRequiredDecimalStrAccessor(): ?string
    {
        if ($this->nullableRequiredDecimalStr != null) {
            return $this->nullableRequiredDecimalStr->__toString();
        }

        return null;
    }
}