<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use OpenAPI\OpenAPI\Models\Shared;
use OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class RequestBodyPostComplexNumberTypesRequest
{
    /**
     *
     * @var Shared\ComplexNumberTypes $complexNumberTypes
     */
    #[SpeakeasyMetadata('request:mediaType=application/json')]
    public Shared\ComplexNumberTypes $complexNumberTypes;

    /**
     *
     * @var \Brick\Math\BigInteger $pathBigInt
     */
    #[SpeakeasyMetadata('pathParam:style=simple,explode=false,name=pathBigInt')]
    public \Brick\Math\BigInteger $pathBigInt;

    /**
     *
     * @var \Brick\Math\BigInteger $pathBigIntStr
     */
    #[SpeakeasyMetadata('pathParam:style=simple,explode=false,name=pathBigIntStr,serializeToString=true')]
    public \Brick\Math\BigInteger $pathBigIntStr;

    /**
     *
     * @var \Brick\Math\BigDecimal $pathDecimal
     */
    #[SpeakeasyMetadata('pathParam:style=simple,explode=false,name=pathDecimal')]
    public \Brick\Math\BigDecimal $pathDecimal;

    /**
     *
     * @var \Brick\Math\BigDecimal $pathDecimalStr
     */
    #[SpeakeasyMetadata('pathParam:style=simple,explode=false,name=pathDecimalStr')]
    public \Brick\Math\BigDecimal $pathDecimalStr;

    /**
     *
     * @var \Brick\Math\BigInteger $queryBigInt
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=queryBigInt')]
    public \Brick\Math\BigInteger $queryBigInt;

    /**
     *
     * @var \Brick\Math\BigInteger $queryBigIntStr
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=queryBigIntStr,serializeToString=true')]
    public \Brick\Math\BigInteger $queryBigIntStr;

    /**
     *
     * @var \Brick\Math\BigDecimal $queryDecimal
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=queryDecimal')]
    public \Brick\Math\BigDecimal $queryDecimal;

    /**
     *
     * @var \Brick\Math\BigDecimal $queryDecimalStr
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=queryDecimalStr')]
    public \Brick\Math\BigDecimal $queryDecimalStr;

    /**
     * @param  Shared\ComplexNumberTypes  $complexNumberTypes
     * @param  \Brick\Math\BigInteger  $pathBigInt
     * @param  \Brick\Math\BigInteger  $pathBigIntStr
     * @param  \Brick\Math\BigDecimal  $pathDecimal
     * @param  \Brick\Math\BigDecimal  $pathDecimalStr
     * @param  \Brick\Math\BigInteger  $queryBigInt
     * @param  \Brick\Math\BigInteger  $queryBigIntStr
     * @param  \Brick\Math\BigDecimal  $queryDecimal
     * @param  \Brick\Math\BigDecimal  $queryDecimalStr
     */
    public function __construct(Shared\ComplexNumberTypes $complexNumberTypes, \Brick\Math\BigInteger $pathBigInt, \Brick\Math\BigInteger $pathBigIntStr, \Brick\Math\BigDecimal $pathDecimal, \Brick\Math\BigDecimal $pathDecimalStr, \Brick\Math\BigInteger $queryBigInt, \Brick\Math\BigInteger $queryBigIntStr, \Brick\Math\BigDecimal $queryDecimal, \Brick\Math\BigDecimal $queryDecimalStr)
    {
        $this->complexNumberTypes = $complexNumberTypes;
        $this->pathBigInt = $pathBigInt;
        $this->pathBigIntStr = $pathBigIntStr;
        $this->pathDecimal = $pathDecimal;
        $this->pathDecimalStr = $pathDecimalStr;
        $this->queryBigInt = $queryBigInt;
        $this->queryBigIntStr = $queryBigIntStr;
        $this->queryDecimal = $queryDecimal;
        $this->queryDecimalStr = $queryDecimalStr;
    }
    public function pathBigIntStrAccessor(): ?string
    {
        if ($this->pathBigIntStr != null) {
            return $this->pathBigIntStr->toBase(10);
        }

        return null;
    }
    public function pathDecimalStrAccessor(): ?string
    {
        if ($this->pathDecimalStr != null) {
            return $this->pathDecimalStr->__toString();
        }

        return null;
    }
    public function queryBigIntStrAccessor(): ?string
    {
        if ($this->queryBigIntStr != null) {
            return $this->queryBigIntStr->toBase(10);
        }

        return null;
    }
    public function queryDecimalStrAccessor(): ?string
    {
        if ($this->queryDecimalStr != null) {
            return $this->queryDecimalStr->__toString();
        }

        return null;
    }
}