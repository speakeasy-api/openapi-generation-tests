<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use Brick\DateTime\LocalDate;
use OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class UsageExamplePostRequest
{
    /**
     * A request body that contains fields with different formats for testing example generation
     *
     * @var ?UsageExamplePostRequestBody $requestBody
     */
    #[SpeakeasyMetadata('request:mediaType=application/json')]
    public ?UsageExamplePostRequestBody $requestBody = null;

    /**
     * An bigint parameter
     *
     * @var \Brick\Math\BigInteger $bigintParameter
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=bigintParameter')]
    public \Brick\Math\BigInteger $bigintParameter;

    /**
     * An bigint parameter
     *
     * @var ?\Brick\Math\BigInteger $bigintParameterOptional
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=bigintParameterOptional')]
    public ?\Brick\Math\BigInteger $bigintParameterOptional = null;

    /**
     * An bigint parameter
     *
     * @var \Brick\Math\BigInteger $bigintStrParameter
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=bigintStrParameter,serializeToString=true')]
    public \Brick\Math\BigInteger $bigintStrParameter;

    /**
     * An bigint parameter
     *
     * @var ?\Brick\Math\BigInteger $bigintStrParameterOptional
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=bigintStrParameterOptional,serializeToString=true')]
    public ?\Brick\Math\BigInteger $bigintStrParameterOptional = null;

    /**
     * A boolean parameter
     *
     * @var bool $boolParameter
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=boolParameter')]
    public bool $boolParameter;

    /**
     * A date parameter
     *
     * @var LocalDate $dateParameter
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=dateParameter,dateTimeFormat=Y-m-d')]
    public LocalDate $dateParameter;

    /**
     * A date time parameter with a default value
     *
     * @var \DateTime $dateTimeDefaultParameter
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=dateTimeDefaultParameter,dateTimeFormat=Y-m-d\TH:i:s.up')]
    public \DateTime $dateTimeDefaultParameter;

    /**
     * A date time parameter
     *
     * @var \DateTime $dateTimeParameter
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=dateTimeParameter,dateTimeFormat=Y-m-d\TH:i:s.up')]
    public \DateTime $dateTimeParameter;

    /**
     * A decimal parameter
     *
     * @var \Brick\Math\BigDecimal $decimalParameter
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=decimalParameter')]
    public \Brick\Math\BigDecimal $decimalParameter;

    /**
     * A decimal parameter
     *
     * @var ?\Brick\Math\BigDecimal $decimalParameterOptional
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=decimalParameterOptional')]
    public ?\Brick\Math\BigDecimal $decimalParameterOptional = null;

    /**
     * A decimal parameter
     *
     * @var \Brick\Math\BigDecimal $decimalStrParameter
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=decimalStrParameter')]
    public \Brick\Math\BigDecimal $decimalStrParameter;

    /**
     * A decimal parameter
     *
     * @var ?\Brick\Math\BigDecimal $decimalStrParameterOptional
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=decimalStrParameterOptional')]
    public ?\Brick\Math\BigDecimal $decimalStrParameterOptional = null;

    /**
     * A double parameter
     *
     * @var float $doubleParameter
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=doubleParameter')]
    public float $doubleParameter;

    /**
     * An enum parameter
     *
     * @var EnumParameter $enumParameter
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=enumParameter')]
    public EnumParameter $enumParameter;

    /**
     * A number parameter that contains a falsey example value
     *
     * @var float $falseyNumberParameter
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=falseyNumberParameter')]
    public float $falseyNumberParameter;

    /**
     * A float32 parameter
     *
     * @var float $float32Parameter
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=float32Parameter')]
    public float $float32Parameter;

    /**
     * A float64 parameter
     *
     * @var string $float64StringParameter
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=float64StringParameter')]
    public string $float64StringParameter;

    /**
     * A float parameter
     *
     * @var float $floatParameter
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=floatParameter')]
    public float $floatParameter;

    /**
     * An int64 parameter
     *
     * @var int $int64Parameter
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=int64Parameter')]
    public int $int64Parameter;

    /**
     * An int64 parameter
     *
     * @var string $int64StringParameter
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=int64StringParameter')]
    public string $int64StringParameter;

    /**
     * An integer parameter
     *
     * @var int $intParameter
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=intParameter')]
    public int $intParameter;

    /**
     * An enum parameter
     *
     * @var ?OptEnumParameter $optEnumParameter
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=optEnumParameter')]
    public ?OptEnumParameter $optEnumParameter = null;

    /**
     * A string parameter
     *
     * @var string $strParameter
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=strParameter')]
    public string $strParameter;

    /**
     * @param  \Brick\Math\BigInteger  $bigintParameter
     * @param  \Brick\Math\BigInteger  $bigintStrParameter
     * @param  bool  $boolParameter
     * @param  LocalDate  $dateParameter
     * @param  \DateTime  $dateTimeDefaultParameter
     * @param  \DateTime  $dateTimeParameter
     * @param  \Brick\Math\BigDecimal  $decimalParameter
     * @param  \Brick\Math\BigDecimal  $decimalStrParameter
     * @param  float  $doubleParameter
     * @param  EnumParameter  $enumParameter
     * @param  float  $falseyNumberParameter
     * @param  float  $float32Parameter
     * @param  string  $float64StringParameter
     * @param  float  $floatParameter
     * @param  int  $int64Parameter
     * @param  string  $int64StringParameter
     * @param  int  $intParameter
     * @param  string  $strParameter
     * @param  ?UsageExamplePostRequestBody  $requestBody
     * @param  ?\Brick\Math\BigInteger  $bigintParameterOptional
     * @param  ?\Brick\Math\BigInteger  $bigintStrParameterOptional
     * @param  ?\Brick\Math\BigDecimal  $decimalParameterOptional
     * @param  ?\Brick\Math\BigDecimal  $decimalStrParameterOptional
     * @param  ?OptEnumParameter  $optEnumParameter
     */
    public function __construct(\Brick\Math\BigInteger $bigintParameter, \Brick\Math\BigInteger $bigintStrParameter, bool $boolParameter, LocalDate $dateParameter, \DateTime $dateTimeDefaultParameter, \DateTime $dateTimeParameter, \Brick\Math\BigDecimal $decimalParameter, \Brick\Math\BigDecimal $decimalStrParameter, float $doubleParameter, EnumParameter $enumParameter, float $falseyNumberParameter, float $float32Parameter, string $float64StringParameter, float $floatParameter, int $int64Parameter, string $int64StringParameter, int $intParameter, string $strParameter, ?UsageExamplePostRequestBody $requestBody = null, ?\Brick\Math\BigInteger $bigintParameterOptional = null, ?\Brick\Math\BigInteger $bigintStrParameterOptional = null, ?\Brick\Math\BigDecimal $decimalParameterOptional = null, ?\Brick\Math\BigDecimal $decimalStrParameterOptional = null, ?OptEnumParameter $optEnumParameter = null)
    {
        $this->bigintParameter = $bigintParameter;
        $this->bigintStrParameter = $bigintStrParameter;
        $this->boolParameter = $boolParameter;
        $this->dateParameter = $dateParameter;
        $this->dateTimeDefaultParameter = $dateTimeDefaultParameter;
        $this->dateTimeParameter = $dateTimeParameter;
        $this->decimalParameter = $decimalParameter;
        $this->decimalStrParameter = $decimalStrParameter;
        $this->doubleParameter = $doubleParameter;
        $this->enumParameter = $enumParameter;
        $this->falseyNumberParameter = $falseyNumberParameter;
        $this->float32Parameter = $float32Parameter;
        $this->float64StringParameter = $float64StringParameter;
        $this->floatParameter = $floatParameter;
        $this->int64Parameter = $int64Parameter;
        $this->int64StringParameter = $int64StringParameter;
        $this->intParameter = $intParameter;
        $this->strParameter = $strParameter;
        $this->requestBody = $requestBody;
        $this->bigintParameterOptional = $bigintParameterOptional;
        $this->bigintStrParameterOptional = $bigintStrParameterOptional;
        $this->decimalParameterOptional = $decimalParameterOptional;
        $this->decimalStrParameterOptional = $decimalStrParameterOptional;
        $this->optEnumParameter = $optEnumParameter;
    }
    public function bigintStrParameterAccessor(): ?string
    {
        if ($this->bigintStrParameter != null) {
            return $this->bigintStrParameter->toBase(10);
        }

        return null;
    }
    public function decimalStrParameterAccessor(): ?string
    {
        if ($this->decimalStrParameter != null) {
            return $this->decimalStrParameter->__toString();
        }

        return null;
    }
    public function bigintStrParameterOptionalAccessor(): ?string
    {
        if ($this->bigintStrParameterOptional != null) {
            return $this->bigintStrParameterOptional->toBase(10);
        }

        return null;
    }
    public function decimalStrParameterOptionalAccessor(): ?string
    {
        if ($this->decimalStrParameterOptional != null) {
            return $this->decimalStrParameterOptional->__toString();
        }

        return null;
    }
}