<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class DeepObjectCamelCase
{
    /**
     *
     * @var SimpleObjectCamelCase|string $anyVal
     */
    #[\JMS\Serializer\Annotation\SerializedName('any_val')]
    #[\JMS\Serializer\Annotation\Type('\OpenAPI\OpenAPI\Models\Shared\SimpleObjectCamelCase|string')]
    public SimpleObjectCamelCase|string $anyVal;

    /**
     * $arrVal
     *
     * @var array<SimpleObjectCamelCase> $arrVal
     */
    #[\JMS\Serializer\Annotation\SerializedName('arr_val')]
    #[\JMS\Serializer\Annotation\Type('array<\OpenAPI\OpenAPI\Models\Shared\SimpleObjectCamelCase>')]
    public array $arrVal;

    /**
     *
     * @var bool $boolVal
     */
    #[\JMS\Serializer\Annotation\SerializedName('bool_val')]
    public bool $boolVal;

    /**
     *
     * @var int $intVal
     */
    #[\JMS\Serializer\Annotation\SerializedName('int_val')]
    public int $intVal;

    /**
     * $mapVal
     *
     * @var array<string, SimpleObjectCamelCase> $mapVal
     */
    #[\JMS\Serializer\Annotation\SerializedName('map_val')]
    #[\JMS\Serializer\Annotation\Type('array<string, \OpenAPI\OpenAPI\Models\Shared\SimpleObjectCamelCase>')]
    public array $mapVal;

    /**
     *
     * @var float $numVal
     */
    #[\JMS\Serializer\Annotation\SerializedName('num_val')]
    public float $numVal;

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     *
     * @var SimpleObjectCamelCase $objVal
     */
    #[\JMS\Serializer\Annotation\SerializedName('obj_val')]
    #[\JMS\Serializer\Annotation\Type('\OpenAPI\OpenAPI\Models\Shared\SimpleObjectCamelCase')]
    public SimpleObjectCamelCase $objVal;

    /**
     *
     * @var string $strVal
     */
    #[\JMS\Serializer\Annotation\SerializedName('str_val')]
    public string $strVal;

    /**
     *
     * @var ?string $type
     */
    #[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\SkipWhenNull]
    public ?string $type = null;

    /**
     * @param  SimpleObjectCamelCase|string  $anyVal
     * @param  array<SimpleObjectCamelCase>  $arrVal
     * @param  bool  $boolVal
     * @param  int  $intVal
     * @param  array<string, SimpleObjectCamelCase>  $mapVal
     * @param  float  $numVal
     * @param  SimpleObjectCamelCase  $objVal
     * @param  string  $strVal
     * @param  ?string  $type
     */
    public function __construct(SimpleObjectCamelCase|string $anyVal, array $arrVal, bool $boolVal, int $intVal, array $mapVal, float $numVal, SimpleObjectCamelCase $objVal, string $strVal, ?string $type = null)
    {
        $this->anyVal = $anyVal;
        $this->arrVal = $arrVal;
        $this->boolVal = $boolVal;
        $this->intVal = $intVal;
        $this->mapVal = $mapVal;
        $this->numVal = $numVal;
        $this->objVal = $objVal;
        $this->strVal = $strVal;
        $this->type = $type;
    }
}