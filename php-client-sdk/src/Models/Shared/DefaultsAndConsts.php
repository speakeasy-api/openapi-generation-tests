<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;

use Brick\DateTime\LocalDate;
use Brick\Math\BigDecimal;
use Brick\Math\BigInteger;
use OpenAPI\OpenAPI\Utils;
class DefaultsAndConsts
{
    /**
     *
     * @var string $normalField
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('normalField')]
    public string $normalField;

    /**
     *
     * @var \Brick\Math\BigInteger $constBigInt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('constBigInt')]
    public \Brick\Math\BigInteger $constBigInt;

    /**
     *
     * @var \Brick\Math\BigInteger $constBigIntStr
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('constBigIntStr')]
    #[\Speakeasy\Serializer\Annotation\Accessor(getter: 'constBigIntStrAccessor')]
    public \Brick\Math\BigInteger $constBigIntStr;

    /**
     *
     * @var bool $constBool
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('constBool')]
    public bool $constBool;

    /**
     *
     * @var LocalDate $constDate
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('constDate')]
    public LocalDate $constDate;

    /**
     *
     * @var \DateTime $constDateTime
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('constDateTime')]
    public \DateTime $constDateTime;

    /**
     *
     * @var \Brick\Math\BigDecimal $constDecimal
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('constDecimal')]
    public \Brick\Math\BigDecimal $constDecimal;

    /**
     *
     * @var \Brick\Math\BigDecimal $constDecimalStr
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('constDecimalStr')]
    #[\Speakeasy\Serializer\Annotation\Accessor(getter: 'constDecimalStrAccessor')]
    public \Brick\Math\BigDecimal $constDecimalStr;

    /**
     *
     * @var ConstEnumInt $constEnumInt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('constEnumInt')]
    #[\Speakeasy\Serializer\Annotation\Type('\OpenAPI\OpenAPI\Models\Shared\ConstEnumInt')]
    public ConstEnumInt $constEnumInt;

    /**
     *
     * @var ConstEnumStr $constEnumStr
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('constEnumStr')]
    #[\Speakeasy\Serializer\Annotation\Type('\OpenAPI\OpenAPI\Models\Shared\ConstEnumStr')]
    public ConstEnumStr $constEnumStr;

    /**
     *
     * @var int $constInt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('constInt')]
    public int $constInt;

    /**
     *
     * @var float $constNum
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('constNum')]
    public float $constNum;

    /**
     *
     * @var string $constStr
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('constStr')]
    public string $constStr;

    /**
     *
     * @var string $constStrDQuotes
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('constStrDQuotes')]
    public string $constStrDQuotes;

    /**
     *
     * @var string $constStrSQuotes
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('constStrSQuotes')]
    public string $constStrSQuotes;

    /**
     *
     * @var ?string $constStrNull
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('constStrNull')]
    public ?string $constStrNull;

    /**
     *
     * @var ?\Brick\Math\BigInteger $defaultBigInt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('defaultBigInt')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?\Brick\Math\BigInteger $defaultBigInt = null;

    /**
     *
     * @var ?\Brick\Math\BigInteger $defaultBigIntStr
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('defaultBigIntStr')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    #[\Speakeasy\Serializer\Annotation\Accessor(getter: 'defaultBigIntStrAccessor')]
    public ?\Brick\Math\BigInteger $defaultBigIntStr = null;

    /**
     *
     * @var ?bool $defaultBool
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('defaultBool')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $defaultBool = null;

    /**
     *
     * @var ?LocalDate $defaultDate
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('defaultDate')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?LocalDate $defaultDate = null;

    /**
     *
     * @var ?\DateTime $defaultDateTime
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('defaultDateTime')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?\DateTime $defaultDateTime = null;

    /**
     *
     * @var ?\Brick\Math\BigDecimal $defaultDecimal
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('defaultDecimal')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?\Brick\Math\BigDecimal $defaultDecimal = null;

    /**
     *
     * @var ?\Brick\Math\BigDecimal $defaultDecimalStr
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('defaultDecimalStr')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    #[\Speakeasy\Serializer\Annotation\Accessor(getter: 'defaultDecimalStrAccessor')]
    public ?\Brick\Math\BigDecimal $defaultDecimalStr = null;

    /**
     *
     * @var ?DefaultEnumInt $defaultEnumInt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('defaultEnumInt')]
    #[\Speakeasy\Serializer\Annotation\Type('\OpenAPI\OpenAPI\Models\Shared\DefaultEnumInt|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?DefaultEnumInt $defaultEnumInt = null;

    /**
     *
     * @var ?DefaultEnumStr $defaultEnumStr
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('defaultEnumStr')]
    #[\Speakeasy\Serializer\Annotation\Type('\OpenAPI\OpenAPI\Models\Shared\DefaultEnumStr|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?DefaultEnumStr $defaultEnumStr = null;

    /**
     *
     * @var ?int $defaultInt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('defaultInt')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?int $defaultInt = null;

    /**
     *
     * @var ?float $defaultNum
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('defaultNum')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $defaultNum = null;

    /**
     *
     * @var ?string $defaultStr
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('defaultStr')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $defaultStr = null;

    /**
     *
     * @var ?string $defaultStrDQuotes
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('defaultStrDQuotes')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $defaultStrDQuotes = null;

    /**
     *
     * @var ?string $defaultStrOptional
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('defaultStrOptional')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $defaultStrOptional = null;

    /**
     *
     * @var ?string $defaultStrSQuotes
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('defaultStrSQuotes')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $defaultStrSQuotes = null;

    /**
     *
     * @var ?string $defaultStrNullable
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('defaultStrNullable')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $defaultStrNullable = null;

    /**
     * @param  \Brick\Math\BigInteger  $constBigInt
     * @param  \Brick\Math\BigInteger  $constBigIntStr
     * @param  bool  $constBool
     * @param  LocalDate  $constDate
     * @param  \DateTime  $constDateTime
     * @param  \Brick\Math\BigDecimal  $constDecimal
     * @param  \Brick\Math\BigDecimal  $constDecimalStr
     * @param  ConstEnumInt  $constEnumInt
     * @param  ConstEnumStr  $constEnumStr
     * @param  int  $constInt
     * @param  float  $constNum
     * @param  string  $constStr
     * @param  string  $constStrDQuotes
     * @param  string  $constStrSQuotes
     * @param  string  $normalField
     * @param  ?string  $constStrNull
     * @param  ?\Brick\Math\BigInteger  $defaultBigInt
     * @param  ?\Brick\Math\BigInteger  $defaultBigIntStr
     * @param  ?bool  $defaultBool
     * @param  ?LocalDate  $defaultDate
     * @param  ?\DateTime  $defaultDateTime
     * @param  ?\Brick\Math\BigDecimal  $defaultDecimal
     * @param  ?\Brick\Math\BigDecimal  $defaultDecimalStr
     * @param  ?DefaultEnumInt  $defaultEnumInt
     * @param  ?DefaultEnumStr  $defaultEnumStr
     * @param  ?int  $defaultInt
     * @param  ?float  $defaultNum
     * @param  ?string  $defaultStr
     * @param  ?string  $defaultStrDQuotes
     * @param  ?string  $defaultStrOptional
     * @param  ?string  $defaultStrSQuotes
     * @param  ?string  $defaultStrNullable
     */
    public function __construct(string $normalField, \Brick\Math\BigInteger $constBigInt = BigInteger::of('9007199254740991'), \Brick\Math\BigInteger $constBigIntStr = BigInteger::of('9223372036854775807'), bool $constBool = true, LocalDate $constDate = LocalDate::parse('2020-01-01'), \DateTime $constDateTime = Utils\Utils::parseDateTime('2020-01-01T00:00:00Z'), \Brick\Math\BigDecimal $constDecimal = BigDecimal::of('3.141592653589793'), \Brick\Math\BigDecimal $constDecimalStr = BigDecimal::of('3.141592653589793238462643383279'), ConstEnumInt $constEnumInt = ConstEnumInt::Two, ConstEnumStr $constEnumStr = ConstEnumStr::Two, int $constInt = 123, float $constNum = 123.456, string $constStr = 'const', string $constStrDQuotes = 'const with "double quotes"', string $constStrSQuotes = 'const with \'single quotes\'', ?string $constStrNull = null, ?\Brick\Math\BigInteger $defaultBigInt = BigInteger::of('9007199254740991'), ?\Brick\Math\BigInteger $defaultBigIntStr = BigInteger::of('9223372036854775807'), ?bool $defaultBool = true, ?LocalDate $defaultDate = LocalDate::parse('2020-01-01'), ?\DateTime $defaultDateTime = Utils\Utils::parseDateTime('2020-01-01T00:00:00Z'), ?\Brick\Math\BigDecimal $defaultDecimal = BigDecimal::of('3.141592653589793'), ?\Brick\Math\BigDecimal $defaultDecimalStr = BigDecimal::of('3.141592653589793238462643383279'), ?DefaultEnumInt $defaultEnumInt = DefaultEnumInt::Two, ?DefaultEnumStr $defaultEnumStr = DefaultEnumStr::Two, ?int $defaultInt = 123, ?float $defaultNum = 123.456, ?string $defaultStr = 'default', ?string $defaultStrDQuotes = 'default with "double quotes"', ?string $defaultStrOptional = 'default', ?string $defaultStrSQuotes = 'default with \'single quotes\'', ?string $defaultStrNullable = null)
    {
        $this->normalField = $normalField;
        $this->constBigInt = $constBigInt;
        $this->constBigIntStr = $constBigIntStr;
        $this->constBool = $constBool;
        $this->constDate = $constDate;
        $this->constDateTime = $constDateTime;
        $this->constDecimal = $constDecimal;
        $this->constDecimalStr = $constDecimalStr;
        $this->constEnumInt = $constEnumInt;
        $this->constEnumStr = $constEnumStr;
        $this->constInt = $constInt;
        $this->constNum = $constNum;
        $this->constStr = $constStr;
        $this->constStrDQuotes = $constStrDQuotes;
        $this->constStrSQuotes = $constStrSQuotes;
        $this->constStrNull = $constStrNull;
        $this->defaultBigInt = $defaultBigInt;
        $this->defaultBigIntStr = $defaultBigIntStr;
        $this->defaultBool = $defaultBool;
        $this->defaultDate = $defaultDate;
        $this->defaultDateTime = $defaultDateTime;
        $this->defaultDecimal = $defaultDecimal;
        $this->defaultDecimalStr = $defaultDecimalStr;
        $this->defaultEnumInt = $defaultEnumInt;
        $this->defaultEnumStr = $defaultEnumStr;
        $this->defaultInt = $defaultInt;
        $this->defaultNum = $defaultNum;
        $this->defaultStr = $defaultStr;
        $this->defaultStrDQuotes = $defaultStrDQuotes;
        $this->defaultStrOptional = $defaultStrOptional;
        $this->defaultStrSQuotes = $defaultStrSQuotes;
        $this->defaultStrNullable = $defaultStrNullable;
    }
    public function constBigIntStrAccessor(): ?string
    {
        if ($this->constBigIntStr != null) {
            return $this->constBigIntStr->toBase(10);
        }

        return null;
    }
    public function constDecimalStrAccessor(): ?string
    {
        if ($this->constDecimalStr != null) {
            return $this->constDecimalStr->__toString();
        }

        return null;
    }
    public function defaultBigIntStrAccessor(): ?string
    {
        if ($this->defaultBigIntStr != null) {
            return $this->defaultBigIntStr->toBase(10);
        }

        return null;
    }
    public function defaultDecimalStrAccessor(): ?string
    {
        if ($this->defaultDecimalStr != null) {
            return $this->defaultDecimalStr->__toString();
        }

        return null;
    }
}