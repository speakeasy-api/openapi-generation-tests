<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;

use Brick\DateTime\LocalDate;
use OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
/**
 * SimpleObject - A simple object that uses all our supported primitive types and enums and has optional properties.
 *
 * https://speakeasy.com/docs - A link to the external docs.
 *
 * @see https://speakeasy.com/docs
 */
class SimpleObject
{
    /**
     * An any property.
     *
     * @var mixed $any
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('any')]
    #[\Speakeasy\Serializer\Annotation\Type('mixed')]
    #[SpeakeasyMetadata('header:name=any')]
    #[SpeakeasyMetadata('pathParam:name=any')]
    #[SpeakeasyMetadata('queryParam:name=any')]
    #[SpeakeasyMetadata('form:name=any')]
    #[SpeakeasyMetadata('multipartForm:name=any')]
    public mixed $any;

    /**
     *
     * @var ?\Brick\Math\BigInteger $bigint
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('bigint')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    #[SpeakeasyMetadata('header:name=bigint')]
    #[SpeakeasyMetadata('pathParam:name=bigint')]
    #[SpeakeasyMetadata('queryParam:name=bigint')]
    #[SpeakeasyMetadata('form:name=bigint')]
    #[SpeakeasyMetadata('multipartForm:name=bigint')]
    public ?\Brick\Math\BigInteger $bigint = null;

    /**
     *
     * @var ?\Brick\Math\BigInteger $bigintStr
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('bigintStr')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    #[\Speakeasy\Serializer\Annotation\Accessor(getter: 'bigintStrAccessor')]
    #[SpeakeasyMetadata('header:name=bigintStr,serializeToString=true')]
    #[SpeakeasyMetadata('pathParam:name=bigintStr,serializeToString=true')]
    #[SpeakeasyMetadata('queryParam:name=bigintStr,serializeToString=true')]
    #[SpeakeasyMetadata('form:name=bigintStr')]
    #[SpeakeasyMetadata('multipartForm:name=bigintStr,serializeToString=true')]
    public ?\Brick\Math\BigInteger $bigintStr = null;

    /**
     * A boolean property.
     *
     * @var bool $bool
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('bool')]
    #[SpeakeasyMetadata('header:name=bool')]
    #[SpeakeasyMetadata('pathParam:name=bool')]
    #[SpeakeasyMetadata('queryParam:name=bool')]
    #[SpeakeasyMetadata('form:name=bool')]
    #[SpeakeasyMetadata('multipartForm:name=bool')]
    public bool $bool;

    /**
     * An optional boolean property.
     *
     * @var ?bool $boolOpt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('boolOpt')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    #[SpeakeasyMetadata('header:name=boolOpt')]
    #[SpeakeasyMetadata('pathParam:name=boolOpt')]
    #[SpeakeasyMetadata('queryParam:name=boolOpt')]
    #[SpeakeasyMetadata('form:name=boolOpt')]
    #[SpeakeasyMetadata('multipartForm:name=boolOpt')]
    public ?bool $boolOpt = null;

    /**
     * A date property.
     *
     * @var LocalDate $date
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('date')]
    #[SpeakeasyMetadata('header:name=date,dateTimeFormat=Y-m-d')]
    #[SpeakeasyMetadata('pathParam:name=date,dateTimeFormat=Y-m-d')]
    #[SpeakeasyMetadata('queryParam:name=date,dateTimeFormat=Y-m-d')]
    #[SpeakeasyMetadata('form:name=date,dateTimeFormat=Y-m-d')]
    #[SpeakeasyMetadata('multipartForm:name=date,dateTimeFormat=Y-m-d')]
    public LocalDate $date;

    /**
     * A date-time property.
     *
     * @var \DateTime $dateTime
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('dateTime')]
    #[SpeakeasyMetadata('header:name=dateTime,dateTimeFormat=Y-m-d\TH:i:s.up')]
    #[SpeakeasyMetadata('pathParam:name=dateTime,dateTimeFormat=Y-m-d\TH:i:s.up')]
    #[SpeakeasyMetadata('queryParam:name=dateTime,dateTimeFormat=Y-m-d\TH:i:s.up')]
    #[SpeakeasyMetadata('form:name=dateTime,dateTimeFormat=Y-m-d\TH:i:s.up')]
    #[SpeakeasyMetadata('multipartForm:name=dateTime,dateTimeFormat=Y-m-d\TH:i:s.up')]
    public \DateTime $dateTime;

    /**
     *
     * @var ?\Brick\Math\BigDecimal $decimal
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('decimal')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    #[SpeakeasyMetadata('header:name=decimal')]
    #[SpeakeasyMetadata('pathParam:name=decimal')]
    #[SpeakeasyMetadata('queryParam:name=decimal')]
    #[SpeakeasyMetadata('form:name=decimal')]
    #[SpeakeasyMetadata('multipartForm:name=decimal')]
    public ?\Brick\Math\BigDecimal $decimal = null;

    /**
     *
     * @var ?\Brick\Math\BigDecimal $decimalNullableOpt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('decimalNullableOpt')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    #[SpeakeasyMetadata('header:name=decimalNullableOpt')]
    #[SpeakeasyMetadata('pathParam:name=decimalNullableOpt')]
    #[SpeakeasyMetadata('queryParam:name=decimalNullableOpt')]
    #[SpeakeasyMetadata('form:name=decimalNullableOpt')]
    #[SpeakeasyMetadata('multipartForm:name=decimalNullableOpt')]
    public ?\Brick\Math\BigDecimal $decimalNullableOpt = null;

    /**
     *
     * @var ?\Brick\Math\BigDecimal $decimalStr
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('decimalStr')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    #[\Speakeasy\Serializer\Annotation\Accessor(getter: 'decimalStrAccessor')]
    #[SpeakeasyMetadata('header:name=decimalStr')]
    #[SpeakeasyMetadata('pathParam:name=decimalStr')]
    #[SpeakeasyMetadata('queryParam:name=decimalStr')]
    #[SpeakeasyMetadata('form:name=decimalStr')]
    #[SpeakeasyMetadata('multipartForm:name=decimalStr')]
    public ?\Brick\Math\BigDecimal $decimalStr = null;

    /**
     * A string based enum
     *
     * @var Enum $enum
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('enum')]
    #[\Speakeasy\Serializer\Annotation\Type('\OpenAPI\OpenAPI\Models\Shared\Enum')]
    #[SpeakeasyMetadata('header:name=enum')]
    #[SpeakeasyMetadata('pathParam:name=enum')]
    #[SpeakeasyMetadata('queryParam:name=enum')]
    #[SpeakeasyMetadata('form:name=enum')]
    #[SpeakeasyMetadata('multipartForm:name=enum')]
    public Enum $enum;

    /**
     * A float32 property.
     *
     * @var float $float32
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('float32')]
    #[SpeakeasyMetadata('header:name=float32')]
    #[SpeakeasyMetadata('pathParam:name=float32')]
    #[SpeakeasyMetadata('queryParam:name=float32')]
    #[SpeakeasyMetadata('form:name=float32')]
    #[SpeakeasyMetadata('multipartForm:name=float32')]
    public float $float32;

    /**
     * A float64 string
     *
     * @var ?string $float64Str
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('float64Str')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    #[SpeakeasyMetadata('header:name=float64Str')]
    #[SpeakeasyMetadata('pathParam:name=float64Str')]
    #[SpeakeasyMetadata('queryParam:name=float64Str')]
    #[SpeakeasyMetadata('form:name=float64Str')]
    #[SpeakeasyMetadata('multipartForm:name=float64Str')]
    public ?string $float64Str = null;

    /**
     * An integer property.
     *
     * @var int $int
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('int')]
    #[SpeakeasyMetadata('header:name=int')]
    #[SpeakeasyMetadata('pathParam:name=int')]
    #[SpeakeasyMetadata('queryParam:name=int')]
    #[SpeakeasyMetadata('form:name=int')]
    #[SpeakeasyMetadata('multipartForm:name=int')]
    public int $int;

    /**
     * An int32 property.
     *
     * @var int $int32
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('int32')]
    #[SpeakeasyMetadata('header:name=int32')]
    #[SpeakeasyMetadata('pathParam:name=int32')]
    #[SpeakeasyMetadata('queryParam:name=int32')]
    #[SpeakeasyMetadata('form:name=int32')]
    #[SpeakeasyMetadata('multipartForm:name=int32')]
    public int $int32;

    /**
     * An int32 enum property.
     *
     * @var Int32Enum $int32Enum
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('int32Enum')]
    #[\Speakeasy\Serializer\Annotation\Type('\OpenAPI\OpenAPI\Models\Shared\Int32Enum')]
    #[SpeakeasyMetadata('header:name=int32Enum')]
    #[SpeakeasyMetadata('pathParam:name=int32Enum')]
    #[SpeakeasyMetadata('queryParam:name=int32Enum')]
    #[SpeakeasyMetadata('form:name=int32Enum')]
    #[SpeakeasyMetadata('multipartForm:name=int32Enum')]
    public Int32Enum $int32Enum;

    /**
     * An int64 string
     *
     * @var ?string $int64Str
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('int64Str')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    #[SpeakeasyMetadata('header:name=int64Str')]
    #[SpeakeasyMetadata('pathParam:name=int64Str')]
    #[SpeakeasyMetadata('queryParam:name=int64Str')]
    #[SpeakeasyMetadata('form:name=int64Str')]
    #[SpeakeasyMetadata('multipartForm:name=int64Str')]
    public ?string $int64Str = null;

    /**
     * An integer enum property.
     *
     * @var IntEnum $intEnum
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('intEnum')]
    #[\Speakeasy\Serializer\Annotation\Type('\OpenAPI\OpenAPI\Models\Shared\IntEnum')]
    #[SpeakeasyMetadata('header:name=intEnum')]
    #[SpeakeasyMetadata('pathParam:name=intEnum')]
    #[SpeakeasyMetadata('queryParam:name=intEnum')]
    #[SpeakeasyMetadata('form:name=intEnum')]
    #[SpeakeasyMetadata('multipartForm:name=intEnum')]
    public IntEnum $intEnum;

    /**
     * An optional integer property will be null for tests.
     *
     * @var ?int $intOptNull
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('intOptNull')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    #[SpeakeasyMetadata('header:name=intOptNull')]
    #[SpeakeasyMetadata('pathParam:name=intOptNull')]
    #[SpeakeasyMetadata('queryParam:name=intOptNull')]
    #[SpeakeasyMetadata('form:name=intOptNull')]
    #[SpeakeasyMetadata('multipartForm:name=intOptNull')]
    public ?int $intOptNull = null;

    /**
     * A number property.
     *
     * @var float $num
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('num')]
    #[SpeakeasyMetadata('header:name=num')]
    #[SpeakeasyMetadata('pathParam:name=num')]
    #[SpeakeasyMetadata('queryParam:name=num')]
    #[SpeakeasyMetadata('form:name=num')]
    #[SpeakeasyMetadata('multipartForm:name=num')]
    public float $num;

    /**
     * An optional number property will be null for tests.
     *
     * @var ?float $numOptNull
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('numOptNull')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    #[SpeakeasyMetadata('header:name=numOptNull')]
    #[SpeakeasyMetadata('pathParam:name=numOptNull')]
    #[SpeakeasyMetadata('queryParam:name=numOptNull')]
    #[SpeakeasyMetadata('form:name=numOptNull')]
    #[SpeakeasyMetadata('multipartForm:name=numOptNull')]
    public ?float $numOptNull = null;

    /**
     * A string property.
     *
     * @var string $str
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('str')]
    #[SpeakeasyMetadata('header:name=str')]
    #[SpeakeasyMetadata('pathParam:name=str')]
    #[SpeakeasyMetadata('queryParam:name=str')]
    #[SpeakeasyMetadata('form:name=str')]
    #[SpeakeasyMetadata('multipartForm:name=str')]
    public string $str;

    /**
     * An optional string property.
     *
     * @var ?string $strOpt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('strOpt')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    #[SpeakeasyMetadata('header:name=strOpt')]
    #[SpeakeasyMetadata('pathParam:name=strOpt')]
    #[SpeakeasyMetadata('queryParam:name=strOpt')]
    #[SpeakeasyMetadata('form:name=strOpt')]
    #[SpeakeasyMetadata('multipartForm:name=strOpt')]
    public ?string $strOpt = null;

    /**
     * @param  mixed  $any
     * @param  bool  $bool
     * @param  LocalDate  $date
     * @param  \DateTime  $dateTime
     * @param  Enum  $enum
     * @param  float  $float32
     * @param  int  $int
     * @param  int  $int32
     * @param  Int32Enum  $int32Enum
     * @param  IntEnum  $intEnum
     * @param  float  $num
     * @param  string  $str
     * @param  ?\Brick\Math\BigInteger  $bigint
     * @param  ?\Brick\Math\BigInteger  $bigintStr
     * @param  ?bool  $boolOpt
     * @param  ?\Brick\Math\BigDecimal  $decimal
     * @param  ?\Brick\Math\BigDecimal  $decimalStr
     * @param  ?string  $float64Str
     * @param  ?string  $int64Str
     * @param  ?int  $intOptNull
     * @param  ?float  $numOptNull
     * @param  ?string  $strOpt
     * @param  ?\Brick\Math\BigDecimal  $decimalNullableOpt
     */
    public function __construct(mixed $any, bool $bool, LocalDate $date, \DateTime $dateTime, Enum $enum, float $float32, int $int, int $int32, Int32Enum $int32Enum, IntEnum $intEnum, float $num, string $str, ?\Brick\Math\BigInteger $bigint = null, ?\Brick\Math\BigInteger $bigintStr = null, ?bool $boolOpt = null, ?\Brick\Math\BigDecimal $decimal = null, ?\Brick\Math\BigDecimal $decimalStr = null, ?string $float64Str = null, ?string $int64Str = null, ?int $intOptNull = null, ?float $numOptNull = null, ?string $strOpt = null, ?\Brick\Math\BigDecimal $decimalNullableOpt = null)
    {
        $this->any = $any;
        $this->bool = $bool;
        $this->date = $date;
        $this->dateTime = $dateTime;
        $this->enum = $enum;
        $this->float32 = $float32;
        $this->int = $int;
        $this->int32 = $int32;
        $this->int32Enum = $int32Enum;
        $this->intEnum = $intEnum;
        $this->num = $num;
        $this->str = $str;
        $this->bigint = $bigint;
        $this->bigintStr = $bigintStr;
        $this->boolOpt = $boolOpt;
        $this->decimal = $decimal;
        $this->decimalStr = $decimalStr;
        $this->float64Str = $float64Str;
        $this->int64Str = $int64Str;
        $this->intOptNull = $intOptNull;
        $this->numOptNull = $numOptNull;
        $this->strOpt = $strOpt;
        $this->decimalNullableOpt = $decimalNullableOpt;
    }
    public function bigintStrAccessor(): ?string
    {
        if ($this->bigintStr != null) {
            return $this->bigintStr->toBase(10);
        }

        return null;
    }
    public function decimalStrAccessor(): ?string
    {
        if ($this->decimalStr != null) {
            return $this->decimalStr->__toString();
        }

        return null;
    }
}