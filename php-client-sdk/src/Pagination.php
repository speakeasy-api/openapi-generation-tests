<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

use JMS\Serializer\DeserializationContext;
use OpenAPI\OpenAPI\Models\Operations;
use OpenAPI\OpenAPI\Models\Shared;

class Pagination
{
    public const PAGINATION_CURSOR_BODY_SERVERS = [

        'http://localhost:35456',
    ];
    public const PAGINATION_CURSOR_NON_NUMERIC_SERVERS = [

        'http://localhost:35456',
    ];
    public const PAGINATION_CURSOR_PARAMS_SERVERS = [

        'http://localhost:35456',
    ];
    public const PAGINATION_LIMIT_OFFSET_DEEP_OUTPUTS_PAGE_BODY_SERVERS = [

        'http://localhost:35456',
    ];
    public const PAGINATION_LIMIT_OFFSET_OFFSET_BODY_SERVERS = [

        'http://localhost:35456',
    ];
    public const PAGINATION_LIMIT_OFFSET_OFFSET_PARAMS_SERVERS = [

        'http://localhost:35456',
    ];
    public const PAGINATION_LIMIT_OFFSET_PAGE_BODY_SERVERS = [

        'http://localhost:35456',
    ];
    public const PAGINATION_LIMIT_OFFSET_PAGE_PARAMS_SERVERS = [

        'http://localhost:35456',
    ];
    public const PAGINATION_URL_PARAMS_SERVERS = [

        'http://localhost:35456',
    ];
    public const PAGINATION_WITH_RETRIES_SERVERS = [

        'http://localhost:35456',
    ];
    private SDKConfiguration $sdkConfiguration;

    /**
     * @param  SDKConfiguration  $sdkConfig
     */
    public function __construct(SDKConfiguration $sdkConfig)
    {
        $this->sdkConfiguration = $sdkConfig;
    }

    /**
     * paginationCursorBody
     *
     * @param  Operations\PaginationCursorBodyRequestBody  $request
     * @param  string  $serverURL
     * @return Operations\PaginationCursorBodyResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function paginationCursorBody(
        Operations\PaginationCursorBodyRequestBody $request,
        ?string $serverURL = null,
    ): Operations\PaginationCursorBodyResponse {
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_CURSOR_BODY_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/cursor');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('PUT', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\PaginationCursorBodyRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\PaginationCursorBodyResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * paginationCursorNonNumeric
     *
     * @param  ?string  $cursor
     * @param  string  $serverURL
     * @return Operations\PaginationCursorNonNumericResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function paginationCursorNonNumeric(
        ?string $cursor = null,
        ?string $serverURL = null,
    ): Operations\PaginationCursorNonNumericResponse {
        $request = new Operations\PaginationCursorNonNumericRequest(
            cursor: $cursor,
        );
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_CURSOR_NON_NUMERIC_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/cursor_non_numeric');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(Operations\PaginationCursorNonNumericRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\PaginationCursorNonNumericRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\PaginationCursorNonNumericResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * paginationCursorParams
     *
     * @param  int  $cursor
     * @param  string  $serverURL
     * @return Operations\PaginationCursorParamsResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function paginationCursorParams(
        int $cursor,
        ?string $serverURL = null,
    ): Operations\PaginationCursorParamsResponse {
        $request = new Operations\PaginationCursorParamsRequest(
            cursor: $cursor,
        );
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_CURSOR_PARAMS_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/cursor');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(Operations\PaginationCursorParamsRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\PaginationCursorParamsRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\PaginationCursorParamsResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * paginationLimitOffsetDeepOutputsPageBody
     *
     * @param  Shared\LimitOffsetConfig  $request
     * @param  string  $serverURL
     * @return Operations\PaginationLimitOffsetDeepOutputsPageBodyResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function paginationLimitOffsetDeepOutputsPageBody(
        Shared\LimitOffsetConfig $request,
        ?string $serverURL = null,
    ): Operations\PaginationLimitOffsetDeepOutputsPageBodyResponse {
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_LIMIT_OFFSET_DEEP_OUTPUTS_PAGE_BODY_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/limitoffset/deep_outputs/page');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('PUT', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetDeepOutputsPageBodyRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\PaginationLimitOffsetDeepOutputsPageBodyResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * paginationLimitOffsetOffsetBody
     *
     * @param  Shared\LimitOffsetConfig  $request
     * @param  string  $serverURL
     * @return Operations\PaginationLimitOffsetOffsetBodyResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function paginationLimitOffsetOffsetBody(
        Shared\LimitOffsetConfig $request,
        ?string $serverURL = null,
    ): Operations\PaginationLimitOffsetOffsetBodyResponse {
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_LIMIT_OFFSET_OFFSET_BODY_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/limitoffset/offset');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('PUT', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetOffsetBodyRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\PaginationLimitOffsetOffsetBodyResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * paginationLimitOffsetOffsetParams
     *
     * @param  ?int  $limit
     * @param  ?int  $offset
     * @param  string  $serverURL
     * @return Operations\PaginationLimitOffsetOffsetParamsResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function paginationLimitOffsetOffsetParams(
        ?int $limit = null,
        ?int $offset = null,
        ?string $serverURL = null,
    ): Operations\PaginationLimitOffsetOffsetParamsResponse {
        $request = new Operations\PaginationLimitOffsetOffsetParamsRequest(
            limit: $limit,
            offset: $offset,
        );
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_LIMIT_OFFSET_OFFSET_PARAMS_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/limitoffset/offset');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(Operations\PaginationLimitOffsetOffsetParamsRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetOffsetParamsRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\PaginationLimitOffsetOffsetParamsResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * paginationLimitOffsetPageBody
     *
     * @param  Shared\LimitOffsetConfig  $request
     * @param  string  $serverURL
     * @return Operations\PaginationLimitOffsetPageBodyResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function paginationLimitOffsetPageBody(
        Shared\LimitOffsetConfig $request,
        ?string $serverURL = null,
    ): Operations\PaginationLimitOffsetPageBodyResponse {
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_LIMIT_OFFSET_PAGE_BODY_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/limitoffset/page');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('PUT', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetPageBodyRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\PaginationLimitOffsetPageBodyResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * paginationLimitOffsetPageParams
     *
     * @param  int  $page
     * @param  string  $serverURL
     * @return Operations\PaginationLimitOffsetPageParamsResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function paginationLimitOffsetPageParams(
        int $page,
        ?string $serverURL = null,
    ): Operations\PaginationLimitOffsetPageParamsResponse {
        $request = new Operations\PaginationLimitOffsetPageParamsRequest(
            page: $page,
        );
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_LIMIT_OFFSET_PAGE_PARAMS_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/limitoffset/page');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(Operations\PaginationLimitOffsetPageParamsRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetPageParamsRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\PaginationLimitOffsetPageParamsResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * paginationURLParams
     *
     * @param  int  $attempts
     * @param  ?string  $isReferencePath
     * @param  string  $serverURL
     * @return Operations\PaginationURLParamsResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function paginationURLParams(
        int $attempts,
        ?string $isReferencePath = null,
        ?string $serverURL = null,
    ): Operations\PaginationURLParamsResponse {
        $request = new Operations\PaginationURLParamsRequest(
            attempts: $attempts,
            isReferencePath: $isReferencePath,
        );
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_URL_PARAMS_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/url');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(Operations\PaginationURLParamsRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\PaginationURLParamsRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\PaginationURLParamsResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * paginationWithRetries
     *
     * @param  ?string  $cursor
     * @param  ?string  $faultSettings
     * @param  ?string  $requestId
     * @param  string  $serverURL
     * @return Operations\PaginationWithRetriesResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function paginationWithRetries(
        ?string $cursor = null,
        ?string $faultSettings = null,
        ?string $requestId = null,
        ?string $serverURL = null,
    ): Operations\PaginationWithRetriesResponse {
        $request = new Operations\PaginationWithRetriesRequest(
            cursor: $cursor,
            faultSettings: $faultSettings,
            requestId: $requestId,
        );
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_WITH_RETRIES_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/cursor_non_numeric#withRetries');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(Operations\PaginationWithRetriesRequest::class, $request, $this->sdkConfiguration->globals));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\PaginationWithRetriesRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\PaginationWithRetriesResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }
}