<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Pagination 
{
	
	public const PAGINATION_CURSOR_BODY_SERVERS = [
		'http://localhost:35456',
	];
	
	public const PAGINATION_CURSOR_PARAMS_SERVERS = [
		'http://localhost:35456',
	];
	
	public const PAGINATION_LIMIT_OFFSET_OFFSET_BODY_SERVERS = [
		'http://localhost:35456',
	];
	
	public const PAGINATION_LIMIT_OFFSET_OFFSET_PARAMS_SERVERS = [
		'http://localhost:35456',
	];
	
	public const PAGINATION_LIMIT_OFFSET_PAGE_BODY_SERVERS = [
		'http://localhost:35456',
	];
	
	public const PAGINATION_LIMIT_OFFSET_PAGE_PARAMS_SERVERS = [
		'http://localhost:35456',
	];

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * paginationCursorBody
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PaginationCursorBodyRequestBody $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\PaginationCursorBodyResponse
     */
	public function paginationCursorBody(
        \OpenAPI\OpenAPI\Models\Operations\PaginationCursorBodyRequestBody $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\PaginationCursorBodyResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_CURSOR_BODY_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/cursor');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PaginationCursorBodyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PaginationCursorBodyRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * paginationCursorParams
     * 
     * @param int $cursor
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\PaginationCursorParamsResponse
     */
	public function paginationCursorParams(
        int $cursor,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\PaginationCursorParamsResponse
    {
        $request = new \OpenAPI\OpenAPI\Models\Operations\PaginationCursorParamsRequest();
        $request->cursor = $cursor;
        
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_CURSOR_PARAMS_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/cursor');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PaginationCursorParamsRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PaginationCursorParamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PaginationCursorParamsRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * paginationLimitOffsetOffsetBody
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\LimitOffsetConfig $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetOffsetBodyResponse
     */
	public function paginationLimitOffsetOffsetBody(
        \OpenAPI\OpenAPI\Models\Shared\LimitOffsetConfig $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetOffsetBodyResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_LIMIT_OFFSET_OFFSET_BODY_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/limitoffset/offset');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetOffsetBodyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetOffsetBodyRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * paginationLimitOffsetOffsetParams
     * 
     * @param ?int $limit
     * @param ?int $offset
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetOffsetParamsResponse
     */
	public function paginationLimitOffsetOffsetParams(
        ?int $limit = null,
        ?int $offset = null,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetOffsetParamsResponse
    {
        $request = new \OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetOffsetParamsRequest();
        $request->limit = $limit;
        $request->offset = $offset;
        
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_LIMIT_OFFSET_OFFSET_PARAMS_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/limitoffset/offset');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetOffsetParamsRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetOffsetParamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetOffsetParamsRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * paginationLimitOffsetPageBody
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\LimitOffsetConfig $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetPageBodyResponse
     */
	public function paginationLimitOffsetPageBody(
        \OpenAPI\OpenAPI\Models\Shared\LimitOffsetConfig $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetPageBodyResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_LIMIT_OFFSET_PAGE_BODY_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/limitoffset/page');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetPageBodyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetPageBodyRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * paginationLimitOffsetPageParams
     * 
     * @param int $page
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetPageParamsResponse
     */
	public function paginationLimitOffsetPageParams(
        int $page,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetPageParamsResponse
    {
        $request = new \OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetPageParamsRequest();
        $request->page = $page;
        
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_LIMIT_OFFSET_PAGE_PARAMS_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/limitoffset/page');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetPageParamsRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetPageParamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetPageParamsRes', 'json');
            }
        }

        return $response;
    }
}