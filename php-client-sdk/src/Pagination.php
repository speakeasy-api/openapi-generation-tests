<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

use OpenAPI\OpenAPI\Models\Operations;
use OpenAPI\OpenAPI\Models\Shared;
use Speakeasy\Serializer\DeserializationContext;

class Pagination
{
    public const PAGINATION_AMBIGUOUS_INPUT_SERVERS = [

        'http://localhost:35456',
    ];
    public const PAGINATION_BODY_FLATTENED_OPTIONAL_SECURITY_SERVERS = [

        'http://localhost:35456',
    ];
    public const PAGINATION_BODY_FLATTENED_WITH_SECURITY_SERVERS = [

        'http://localhost:35456',
    ];
    public const PAGINATION_BODY_WRAPPED_REQUEST_SERVERS = [

        'http://localhost:35456',
    ];
    public const PAGINATION_CURSOR_BODY_SERVERS = [

        'http://localhost:35456',
    ];
    public const PAGINATION_CURSOR_NON_NUMERIC_SERVERS = [

        'http://localhost:35456',
    ];
    public const PAGINATION_CURSOR_PARAMS_SERVERS = [

        'http://localhost:35456',
    ];
    public const PAGINATION_LIMIT_OFFSET_DEEP_OUTPUTS_PAGE_BODY_SERVERS = [

        'http://localhost:35456',
    ];
    public const PAGINATION_LIMIT_OFFSET_OFFSET_BODY_SERVERS = [

        'http://localhost:35456',
    ];
    public const PAGINATION_LIMIT_OFFSET_OFFSET_PARAMS_SERVERS = [

        'http://localhost:35456',
    ];
    public const PAGINATION_LIMIT_OFFSET_PAGE_BODY_SERVERS = [

        'http://localhost:35456',
    ];
    public const PAGINATION_LIMIT_OFFSET_PAGE_PARAMS_SERVERS = [

        'http://localhost:35456',
    ];
    public const PAGINATION_URL_PARAMS_SERVERS = [

        'http://localhost:35456',
    ];
    public const PAGINATION_WITH_RETRIES_SERVERS = [

        'http://localhost:35456',
    ];
    public const PAGINATION_WRAPPED_OPTIONAL_BODY_SERVERS = [

        'http://localhost:35456',
    ];
    private SDKConfiguration $sdkConfiguration;
    /**
     * @param  SDKConfiguration  $sdkConfig
     */
    public function __construct(public SDKConfiguration $sdkConfig)
    {
        $this->sdkConfiguration = $sdkConfig;
    }
    /**
     * @param  string  $baseUrl
     * @param  array<string, string>  $urlVariables
     *
     * @return string
     */
    public function getUrl(string $baseUrl, array $urlVariables): string
    {
        $serverDetails = $this->sdkConfiguration->getServerDetails();

        if ($baseUrl == null) {
            $baseUrl = $serverDetails->baseUrl;
        }

        if ($urlVariables == null) {
            $urlVariables = $serverDetails->options;
        }

        return Utils\Utils::templateUrl($baseUrl, $urlVariables);
    }

    /**
     * This is a paginated operation where there is both a query parameter and
     * request body field called "cursor". This ambiguity is used to test that
     * the generator only updates the appropriate field in the pagination code
     * "next()" function.
     *
     *
     * @param  Operations\PaginationAmbiguousInputRequestBody  $requestBody
     * @param  ?int  $cursor
     * @param  ?string  $serverURL
     * @return Operations\PaginationAmbiguousInputResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    private function paginationAmbiguousInputIndividual(Operations\PaginationAmbiguousInputRequestBody $requestBody, ?int $cursor = null, ?string $serverURL = null): Operations\PaginationAmbiguousInputResponse
    {
        $request = new Operations\PaginationAmbiguousInputRequest(
            requestBody: $requestBody,
            cursor: $cursor,
        );
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_AMBIGUOUS_INPUT_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/cursor#ambiguousInput');
        $urlOverride = null;
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);

        $qp = Utils\Utils::getQueryParams(Operations\PaginationAmbiguousInputRequest::class, $request, $urlOverride, $this->sdkConfiguration->globals);

        $options = array_merge_recursive($options, $qp);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('PUT', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $responseData = (string) $httpResponse->getBody();
                $obj = $serializer->deserialize($responseData, '\OpenAPI\OpenAPI\Models\Operations\PaginationAmbiguousInputRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\PaginationAmbiguousInputResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);
                $sdk = $this;

                $response->next = function () use ($sdk, $responseData, $cursor, $serverURL): ?Operations\PaginationAmbiguousInputResponse {
                    $jsonObject = new \JsonPath\JsonObject($responseData);
                    $nextCursor = $jsonObject->get('$.resultArray[-1:]');
                    if ($nextCursor == null) {
                        return null;
                    } else {
                        $nextCursor = $nextCursor[0];
                    }

                    return $sdk->paginationAmbiguousInputIndividual(
                        cursor: $cursor,
                        requestBody: new Operations\PaginationAmbiguousInputRequestBody(
                            cursor: $nextCursor,
                        ),
                        serverURL: $serverURL,
                    );
                };


                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }
    /**
     * This is a paginated operation where there is both a query parameter and
     * request body field called "cursor". This ambiguity is used to test that
     * the generator only updates the appropriate field in the pagination code
     * "next()" function.
     *
     *
     * @param  Operations\PaginationAmbiguousInputRequestBody  $requestBody
     * @param  ?int  $cursor
     * @param  ?string  $serverURL
     * @return \Generator<Operations\PaginationAmbiguousInputResponse>
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function paginationAmbiguousInput(Operations\PaginationAmbiguousInputRequestBody $requestBody, ?int $cursor = null, ?string $serverURL = null): \Generator
    {
        $res = $this->paginationAmbiguousInputIndividual($requestBody, $cursor, $serverURL);
        while ($res !== null) {
            yield $res;
            $res = $res->next($res);
        }
    }

    /**
     * paginationBodyFlattenedOptionalSecurity
     *
     * @param  int  $limit
     * @param  int  $offset
     * @param  ?Operations\PaginationBodyFlattenedOptionalSecuritySecurity  $security
     * @param  ?string  $serverURL
     * @return Operations\PaginationBodyFlattenedOptionalSecurityResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    private function paginationBodyFlattenedOptionalSecurityIndividual(int $limit, int $offset, ?Operations\PaginationBodyFlattenedOptionalSecuritySecurity $security = null, ?string $serverURL = null): Operations\PaginationBodyFlattenedOptionalSecurityResponse
    {
        $request = new Operations\PaginationBodyFlattenedOptionalSecurityRequest(
            limit: $limit,
            offset: $offset,
        );
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_BODY_FLATTENED_OPTIONAL_SECURITY_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/limitoffset/offset#paginationBodyFlattenedOptionalSecurity');
        $urlOverride = null;
        $options = ['http_errors' => false];

        $qp = Utils\Utils::getQueryParams(Operations\PaginationBodyFlattenedOptionalSecurityRequest::class, $request, $urlOverride, $this->sdkConfiguration->globals);

        $options = array_merge_recursive($options, $qp);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);
        if ($security != null) {
            $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        } else {
            $client = $this->sdkConfiguration->defaultClient;
        }

        $httpResponse = $client->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $responseData = (string) $httpResponse->getBody();
                $obj = $serializer->deserialize($responseData, '\OpenAPI\OpenAPI\Models\Operations\PaginationBodyFlattenedOptionalSecurityRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\PaginationBodyFlattenedOptionalSecurityResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);
                $sdk = $this;

                $response->next = function () use ($sdk, $request, $responseData, $limit, $security, $serverURL): ?Operations\PaginationBodyFlattenedOptionalSecurityResponse {
                    $offset = $request != null ? $request->offset : 0;
                    if (! $responseData) {
                        return null;
                    }
                    $jsonObject = new \JsonPath\JsonObject($responseData);
                    $results = $jsonObject->get('$.resultArray');

                    if (is_array($results)) {
                        $results = $results[0];
                    }
                    if (count($results) === 0) {
                        return null;
                    }
                    $limit = $request != null ? $request->limit : 0;
                    if (count($results) < $limit) {
                        return null;
                    }
                    $nextOffset = $offset + count($results);

                    return $sdk->paginationBodyFlattenedOptionalSecurityIndividual(
                        limit: $limit,
                        offset: $nextOffset,
                        security: $security,
                        serverURL: $serverURL,
                    );
                };


                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }
    /**
     * paginationBodyFlattenedOptionalSecurity
     *
     * @param  int  $limit
     * @param  int  $offset
     * @param  ?Operations\PaginationBodyFlattenedOptionalSecuritySecurity  $security
     * @param  ?string  $serverURL
     * @return \Generator<Operations\PaginationBodyFlattenedOptionalSecurityResponse>
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function paginationBodyFlattenedOptionalSecurity(int $limit, int $offset, ?Operations\PaginationBodyFlattenedOptionalSecuritySecurity $security = null, ?string $serverURL = null): \Generator
    {
        $res = $this->paginationBodyFlattenedOptionalSecurityIndividual($limit, $offset, $security, $serverURL);
        while ($res !== null) {
            yield $res;
            $res = $res->next($res);
        }
    }

    /**
     * paginationBodyFlattenedWithSecurity
     *
     * @param  Operations\PaginationBodyFlattenedWithSecuritySecurity  $security
     * @param  int  $limit
     * @param  int  $offset
     * @param  ?string  $serverURL
     * @return Operations\PaginationBodyFlattenedWithSecurityResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    private function paginationBodyFlattenedWithSecurityIndividual(Operations\PaginationBodyFlattenedWithSecuritySecurity $security, int $limit, int $offset, ?string $serverURL = null): Operations\PaginationBodyFlattenedWithSecurityResponse
    {
        $request = new Operations\PaginationBodyFlattenedWithSecurityRequest(
            limit: $limit,
            offset: $offset,
        );
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_BODY_FLATTENED_WITH_SECURITY_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/limitoffset/offset#paginationBodyFlattenedWithSecurity');
        $urlOverride = null;
        $options = ['http_errors' => false];

        $qp = Utils\Utils::getQueryParams(Operations\PaginationBodyFlattenedWithSecurityRequest::class, $request, $urlOverride, $this->sdkConfiguration->globals);

        $options = array_merge_recursive($options, $qp);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);
        if ($security != null) {
            $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        } else {
            $client = $this->sdkConfiguration->defaultClient;
        }

        $httpResponse = $client->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $responseData = (string) $httpResponse->getBody();
                $obj = $serializer->deserialize($responseData, '\OpenAPI\OpenAPI\Models\Operations\PaginationBodyFlattenedWithSecurityRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\PaginationBodyFlattenedWithSecurityResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);
                $sdk = $this;

                $response->next = function () use ($sdk, $request, $responseData, $security, $limit, $serverURL): ?Operations\PaginationBodyFlattenedWithSecurityResponse {
                    $offset = $request != null ? $request->offset : 0;
                    if (! $responseData) {
                        return null;
                    }
                    $jsonObject = new \JsonPath\JsonObject($responseData);
                    $results = $jsonObject->get('$.resultArray');

                    if (is_array($results)) {
                        $results = $results[0];
                    }
                    if (count($results) === 0) {
                        return null;
                    }
                    $limit = $request != null ? $request->limit : 0;
                    if (count($results) < $limit) {
                        return null;
                    }
                    $nextOffset = $offset + count($results);

                    return $sdk->paginationBodyFlattenedWithSecurityIndividual(
                        security: $security,
                        limit: $limit,
                        offset: $nextOffset,
                        serverURL: $serverURL,
                    );
                };


                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }
    /**
     * paginationBodyFlattenedWithSecurity
     *
     * @param  Operations\PaginationBodyFlattenedWithSecuritySecurity  $security
     * @param  int  $limit
     * @param  int  $offset
     * @param  ?string  $serverURL
     * @return \Generator<Operations\PaginationBodyFlattenedWithSecurityResponse>
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function paginationBodyFlattenedWithSecurity(Operations\PaginationBodyFlattenedWithSecuritySecurity $security, int $limit, int $offset, ?string $serverURL = null): \Generator
    {
        $res = $this->paginationBodyFlattenedWithSecurityIndividual($security, $limit, $offset, $serverURL);
        while ($res !== null) {
            yield $res;
            $res = $res->next($res);
        }
    }

    /**
     * This operation has a request wrapper type that encapsulates the
     * parameters and request body. The pagination inputs are meant to go in
     * the request body and we want to test that the generator correctly
     * generates the next() function call preserving everything from the
     * original request and interpolating the next pagination inputs.
     *
     *
     * @param  Operations\PaginationBodyWrappedRequestRequest  $request
     * @param  ?string  $serverURL
     * @return Operations\PaginationBodyWrappedRequestResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    private function paginationBodyWrappedRequestIndividual(Operations\PaginationBodyWrappedRequestRequest $request, ?string $serverURL = null): Operations\PaginationBodyWrappedRequestResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_BODY_WRAPPED_REQUEST_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/limitoffset/page#paginationBodyWrappedRequest');
        $urlOverride = null;
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'limitOffsetConfig', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('PUT', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $responseData = (string) $httpResponse->getBody();
                $obj = $serializer->deserialize($responseData, '\OpenAPI\OpenAPI\Models\Operations\PaginationBodyWrappedRequestRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\PaginationBodyWrappedRequestResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);
                $sdk = $this;

                $response->next = function () use ($sdk, $request, $responseData, $serverURL): ?Operations\PaginationBodyWrappedRequestResponse {
                    $page = $request != null ? $request->limitOffsetConfig->page : 0;
                    $nextPage = $page + 1;
                    $jsonObject = new \JsonPath\JsonObject($responseData);
                    $numPages = $jsonObject->get('$.numPages');
                    if ($numPages == null || $numPages[0] <= $page) {
                        return null;
                    }
                    if (! $responseData) {
                        return null;
                    }
                    $limitOffsetConfig = new Shared\LimitOffsetConfig(
                        limit: $request != null ? $request->limitOffsetConfig->limit : null,
                        offset: $request != null ? $request->limitOffsetConfig->offset : null,
                        page: $nextPage,
                    );

                    return $sdk->paginationBodyWrappedRequestIndividual(
                        request: new Operations\PaginationBodyWrappedRequestRequest(
                            idempotencyKey: $request != null ? $request->idempotencyKey : null,
                            limitOffsetConfig: $limitOffsetConfig,
                            requestId: $request != null ? $request->requestId : null,
                        ),
                        serverURL: $serverURL,
                    );
                };


                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }
    /**
     * This operation has a request wrapper type that encapsulates the
     * parameters and request body. The pagination inputs are meant to go in
     * the request body and we want to test that the generator correctly
     * generates the next() function call preserving everything from the
     * original request and interpolating the next pagination inputs.
     *
     *
     * @param  Operations\PaginationBodyWrappedRequestRequest  $request
     * @param  ?string  $serverURL
     * @return \Generator<Operations\PaginationBodyWrappedRequestResponse>
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function paginationBodyWrappedRequest(Operations\PaginationBodyWrappedRequestRequest $request, ?string $serverURL = null): \Generator
    {
        $res = $this->paginationBodyWrappedRequestIndividual($request, $serverURL);
        while ($res !== null) {
            yield $res;
            $res = $res->next($res);
        }
    }

    /**
     * paginationCursorBody
     *
     * @param  Operations\PaginationCursorBodyRequestBody  $request
     * @param  ?string  $serverURL
     * @return Operations\PaginationCursorBodyResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    private function paginationCursorBodyIndividual(Operations\PaginationCursorBodyRequestBody $request, ?string $serverURL = null): Operations\PaginationCursorBodyResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_CURSOR_BODY_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/cursor');
        $urlOverride = null;
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('PUT', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $responseData = (string) $httpResponse->getBody();
                $obj = $serializer->deserialize($responseData, '\OpenAPI\OpenAPI\Models\Operations\PaginationCursorBodyRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\PaginationCursorBodyResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);
                $sdk = $this;

                $response->next = function () use ($sdk, $responseData, $serverURL): ?Operations\PaginationCursorBodyResponse {
                    $jsonObject = new \JsonPath\JsonObject($responseData);
                    $nextCursor = $jsonObject->get('$.resultArray[-1:]');
                    if ($nextCursor == null) {
                        return null;
                    } else {
                        $nextCursor = $nextCursor[0];
                    }

                    return $sdk->paginationCursorBodyIndividual(
                        request: new Operations\PaginationCursorBodyRequestBody(
                            cursor: $nextCursor,
                        ),
                        serverURL: $serverURL,
                    );
                };


                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }
    /**
     * paginationCursorBody
     *
     * @param  Operations\PaginationCursorBodyRequestBody  $request
     * @param  ?string  $serverURL
     * @return \Generator<Operations\PaginationCursorBodyResponse>
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function paginationCursorBody(Operations\PaginationCursorBodyRequestBody $request, ?string $serverURL = null): \Generator
    {
        $res = $this->paginationCursorBodyIndividual($request, $serverURL);
        while ($res !== null) {
            yield $res;
            $res = $res->next($res);
        }
    }

    /**
     * paginationCursorNonNumeric
     *
     * @param  ?string  $cursor
     * @param  ?string  $serverURL
     * @return Operations\PaginationCursorNonNumericResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    private function paginationCursorNonNumericIndividual(?string $cursor = null, ?string $serverURL = null): Operations\PaginationCursorNonNumericResponse
    {
        $request = new Operations\PaginationCursorNonNumericRequest(
            cursor: $cursor,
        );
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_CURSOR_NON_NUMERIC_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/cursor_non_numeric');
        $urlOverride = null;
        $options = ['http_errors' => false];

        $qp = Utils\Utils::getQueryParams(Operations\PaginationCursorNonNumericRequest::class, $request, $urlOverride, $this->sdkConfiguration->globals);

        $options = array_merge_recursive($options, $qp);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $responseData = (string) $httpResponse->getBody();
                $obj = $serializer->deserialize($responseData, '\OpenAPI\OpenAPI\Models\Operations\PaginationCursorNonNumericRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\PaginationCursorNonNumericResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);
                $sdk = $this;

                $response->next = function () use ($sdk, $responseData, $serverURL): ?Operations\PaginationCursorNonNumericResponse {
                    $jsonObject = new \JsonPath\JsonObject($responseData);
                    $nextCursor = $jsonObject->get('$.resultArray[-1:]');
                    if ($nextCursor == null) {
                        return null;
                    } else {
                        $nextCursor = $nextCursor[0];
                    }

                    return $sdk->paginationCursorNonNumericIndividual(
                        cursor: $nextCursor,
                        serverURL: $serverURL,
                    );
                };


                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }
    /**
     * paginationCursorNonNumeric
     *
     * @param  ?string  $cursor
     * @param  ?string  $serverURL
     * @return \Generator<Operations\PaginationCursorNonNumericResponse>
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function paginationCursorNonNumeric(?string $cursor = null, ?string $serverURL = null): \Generator
    {
        $res = $this->paginationCursorNonNumericIndividual($cursor, $serverURL);
        while ($res !== null) {
            yield $res;
            $res = $res->next($res);
        }
    }

    /**
     * paginationCursorParams
     *
     * @param  int  $cursor
     * @param  ?string  $serverURL
     * @return Operations\PaginationCursorParamsResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    private function paginationCursorParamsIndividual(int $cursor, ?string $serverURL = null): Operations\PaginationCursorParamsResponse
    {
        $request = new Operations\PaginationCursorParamsRequest(
            cursor: $cursor,
        );
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_CURSOR_PARAMS_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/cursor');
        $urlOverride = null;
        $options = ['http_errors' => false];

        $qp = Utils\Utils::getQueryParams(Operations\PaginationCursorParamsRequest::class, $request, $urlOverride, $this->sdkConfiguration->globals);

        $options = array_merge_recursive($options, $qp);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $responseData = (string) $httpResponse->getBody();
                $obj = $serializer->deserialize($responseData, '\OpenAPI\OpenAPI\Models\Operations\PaginationCursorParamsRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\PaginationCursorParamsResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);
                $sdk = $this;

                $response->next = function () use ($sdk, $responseData, $serverURL): ?Operations\PaginationCursorParamsResponse {
                    $jsonObject = new \JsonPath\JsonObject($responseData);
                    $nextCursor = $jsonObject->get('$.resultArray[-1:]');
                    if ($nextCursor == null) {
                        return null;
                    } else {
                        $nextCursor = $nextCursor[0];
                    }

                    return $sdk->paginationCursorParamsIndividual(
                        cursor: $nextCursor,
                        serverURL: $serverURL,
                    );
                };


                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }
    /**
     * paginationCursorParams
     *
     * @param  int  $cursor
     * @param  ?string  $serverURL
     * @return \Generator<Operations\PaginationCursorParamsResponse>
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function paginationCursorParams(int $cursor, ?string $serverURL = null): \Generator
    {
        $res = $this->paginationCursorParamsIndividual($cursor, $serverURL);
        while ($res !== null) {
            yield $res;
            $res = $res->next($res);
        }
    }

    /**
     * paginationLimitOffsetDeepOutputsPageBody
     *
     * @param  ?Shared\LimitOffsetConfig  $request
     * @param  ?string  $serverURL
     * @return Operations\PaginationLimitOffsetDeepOutputsPageBodyResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    private function paginationLimitOffsetDeepOutputsPageBodyIndividual(?Shared\LimitOffsetConfig $request = null, ?string $serverURL = null): Operations\PaginationLimitOffsetDeepOutputsPageBodyResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_LIMIT_OFFSET_DEEP_OUTPUTS_PAGE_BODY_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/limitoffset/deep_outputs/page');
        $urlOverride = null;
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('PUT', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $responseData = (string) $httpResponse->getBody();
                $obj = $serializer->deserialize($responseData, '\OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetDeepOutputsPageBodyRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\PaginationLimitOffsetDeepOutputsPageBodyResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);
                $sdk = $this;

                $response->next = function () use ($sdk, $request, $responseData, $serverURL): ?Operations\PaginationLimitOffsetDeepOutputsPageBodyResponse {
                    $page = $request != null ? $request->page : 0;
                    $nextPage = $page + 1;
                    $jsonObject = new \JsonPath\JsonObject($responseData);
                    $numPages = $jsonObject->get('$.pageInfo.numPages');
                    if ($numPages == null || $numPages[0] <= $page) {
                        return null;
                    }
                    if (! $responseData) {
                        return null;
                    }

                    return $sdk->paginationLimitOffsetDeepOutputsPageBodyIndividual(
                        request: new Shared\LimitOffsetConfig(
                            limit: $request != null ? $request->limit : null,
                            offset: $request != null ? $request->offset : null,
                            page: $nextPage,
                        ),
                        serverURL: $serverURL,
                    );
                };


                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }
    /**
     * paginationLimitOffsetDeepOutputsPageBody
     *
     * @param  ?Shared\LimitOffsetConfig  $request
     * @param  ?string  $serverURL
     * @return \Generator<Operations\PaginationLimitOffsetDeepOutputsPageBodyResponse>
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function paginationLimitOffsetDeepOutputsPageBody(?Shared\LimitOffsetConfig $request = null, ?string $serverURL = null): \Generator
    {
        $res = $this->paginationLimitOffsetDeepOutputsPageBodyIndividual($request, $serverURL);
        while ($res !== null) {
            yield $res;
            $res = $res->next($res);
        }
    }

    /**
     * paginationLimitOffsetOffsetBody
     *
     * @param  ?Shared\LimitOffsetConfig  $request
     * @param  ?string  $serverURL
     * @return Operations\PaginationLimitOffsetOffsetBodyResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    private function paginationLimitOffsetOffsetBodyIndividual(?Shared\LimitOffsetConfig $request = null, ?string $serverURL = null): Operations\PaginationLimitOffsetOffsetBodyResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_LIMIT_OFFSET_OFFSET_BODY_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/limitoffset/offset');
        $urlOverride = null;
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('PUT', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $responseData = (string) $httpResponse->getBody();
                $obj = $serializer->deserialize($responseData, '\OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetOffsetBodyRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\PaginationLimitOffsetOffsetBodyResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);
                $sdk = $this;

                $response->next = function () use ($sdk, $request, $responseData, $serverURL): ?Operations\PaginationLimitOffsetOffsetBodyResponse {
                    $offset = $request != null ? $request->offset : 0;
                    if (! $responseData) {
                        return null;
                    }
                    $jsonObject = new \JsonPath\JsonObject($responseData);
                    $results = $jsonObject->get('$.resultArray');

                    if (is_array($results)) {
                        $results = $results[0];
                    }
                    if (count($results) === 0) {
                        return null;
                    }
                    $limit = $request != null ? $request->limit : 0;
                    if (count($results) < $limit) {
                        return null;
                    }
                    $nextOffset = $offset + count($results);

                    return $sdk->paginationLimitOffsetOffsetBodyIndividual(
                        request: new Shared\LimitOffsetConfig(
                            limit: $request != null ? $request->limit : null,
                            offset: $nextOffset,
                            page: $request != null ? $request->page : null,
                        ),
                        serverURL: $serverURL,
                    );
                };


                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }
    /**
     * paginationLimitOffsetOffsetBody
     *
     * @param  ?Shared\LimitOffsetConfig  $request
     * @param  ?string  $serverURL
     * @return \Generator<Operations\PaginationLimitOffsetOffsetBodyResponse>
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function paginationLimitOffsetOffsetBody(?Shared\LimitOffsetConfig $request = null, ?string $serverURL = null): \Generator
    {
        $res = $this->paginationLimitOffsetOffsetBodyIndividual($request, $serverURL);
        while ($res !== null) {
            yield $res;
            $res = $res->next($res);
        }
    }

    /**
     * paginationLimitOffsetOffsetParams
     *
     * @param  ?int  $limit
     * @param  ?int  $offset
     * @param  ?string  $serverURL
     * @return Operations\PaginationLimitOffsetOffsetParamsResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    private function paginationLimitOffsetOffsetParamsIndividual(?int $limit = null, ?int $offset = null, ?string $serverURL = null): Operations\PaginationLimitOffsetOffsetParamsResponse
    {
        $request = new Operations\PaginationLimitOffsetOffsetParamsRequest(
            limit: $limit,
            offset: $offset,
        );
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_LIMIT_OFFSET_OFFSET_PARAMS_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/limitoffset/offset');
        $urlOverride = null;
        $options = ['http_errors' => false];

        $qp = Utils\Utils::getQueryParams(Operations\PaginationLimitOffsetOffsetParamsRequest::class, $request, $urlOverride, $this->sdkConfiguration->globals);

        $options = array_merge_recursive($options, $qp);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $responseData = (string) $httpResponse->getBody();
                $obj = $serializer->deserialize($responseData, '\OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetOffsetParamsRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\PaginationLimitOffsetOffsetParamsResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);
                $sdk = $this;

                $response->next = function () use ($sdk, $request, $responseData, $limit, $serverURL): ?Operations\PaginationLimitOffsetOffsetParamsResponse {
                    $offset = $request != null ? $request->offset : 0;
                    if (! $responseData) {
                        return null;
                    }
                    $jsonObject = new \JsonPath\JsonObject($responseData);
                    $results = $jsonObject->get('$.resultArray');

                    if (is_array($results)) {
                        $results = $results[0];
                    }
                    if (count($results) === 0) {
                        return null;
                    }
                    $limit = $request != null ? $request->limit : 0;
                    if (count($results) < $limit) {
                        return null;
                    }
                    $nextOffset = $offset + count($results);

                    return $sdk->paginationLimitOffsetOffsetParamsIndividual(
                        limit: $limit,
                        offset: $nextOffset,
                        serverURL: $serverURL,
                    );
                };


                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }
    /**
     * paginationLimitOffsetOffsetParams
     *
     * @param  ?int  $limit
     * @param  ?int  $offset
     * @param  ?string  $serverURL
     * @return \Generator<Operations\PaginationLimitOffsetOffsetParamsResponse>
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function paginationLimitOffsetOffsetParams(?int $limit = null, ?int $offset = null, ?string $serverURL = null): \Generator
    {
        $res = $this->paginationLimitOffsetOffsetParamsIndividual($limit, $offset, $serverURL);
        while ($res !== null) {
            yield $res;
            $res = $res->next($res);
        }
    }

    /**
     * paginationLimitOffsetPageBody
     *
     * @param  ?Shared\LimitOffsetConfig  $request
     * @param  ?string  $serverURL
     * @return Operations\PaginationLimitOffsetPageBodyResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    private function paginationLimitOffsetPageBodyIndividual(?Shared\LimitOffsetConfig $request = null, ?string $serverURL = null): Operations\PaginationLimitOffsetPageBodyResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_LIMIT_OFFSET_PAGE_BODY_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/limitoffset/page');
        $urlOverride = null;
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('PUT', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $responseData = (string) $httpResponse->getBody();
                $obj = $serializer->deserialize($responseData, '\OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetPageBodyRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\PaginationLimitOffsetPageBodyResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);
                $sdk = $this;

                $response->next = function () use ($sdk, $request, $responseData, $serverURL): ?Operations\PaginationLimitOffsetPageBodyResponse {
                    $page = $request != null ? $request->page : 0;
                    $nextPage = $page + 1;
                    $jsonObject = new \JsonPath\JsonObject($responseData);
                    $numPages = $jsonObject->get('$.numPages');
                    if ($numPages == null || $numPages[0] <= $page) {
                        return null;
                    }
                    if (! $responseData) {
                        return null;
                    }

                    return $sdk->paginationLimitOffsetPageBodyIndividual(
                        request: new Shared\LimitOffsetConfig(
                            limit: $request != null ? $request->limit : null,
                            offset: $request != null ? $request->offset : null,
                            page: $nextPage,
                        ),
                        serverURL: $serverURL,
                    );
                };


                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }
    /**
     * paginationLimitOffsetPageBody
     *
     * @param  ?Shared\LimitOffsetConfig  $request
     * @param  ?string  $serverURL
     * @return \Generator<Operations\PaginationLimitOffsetPageBodyResponse>
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function paginationLimitOffsetPageBody(?Shared\LimitOffsetConfig $request = null, ?string $serverURL = null): \Generator
    {
        $res = $this->paginationLimitOffsetPageBodyIndividual($request, $serverURL);
        while ($res !== null) {
            yield $res;
            $res = $res->next($res);
        }
    }

    /**
     * paginationLimitOffsetPageParams
     *
     * @param  int  $page
     * @param  ?string  $serverURL
     * @return Operations\PaginationLimitOffsetPageParamsResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    private function paginationLimitOffsetPageParamsIndividual(int $page, ?string $serverURL = null): Operations\PaginationLimitOffsetPageParamsResponse
    {
        $request = new Operations\PaginationLimitOffsetPageParamsRequest(
            page: $page,
        );
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_LIMIT_OFFSET_PAGE_PARAMS_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/limitoffset/page');
        $urlOverride = null;
        $options = ['http_errors' => false];

        $qp = Utils\Utils::getQueryParams(Operations\PaginationLimitOffsetPageParamsRequest::class, $request, $urlOverride, $this->sdkConfiguration->globals);

        $options = array_merge_recursive($options, $qp);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $responseData = (string) $httpResponse->getBody();
                $obj = $serializer->deserialize($responseData, '\OpenAPI\OpenAPI\Models\Operations\PaginationLimitOffsetPageParamsRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\PaginationLimitOffsetPageParamsResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);
                $sdk = $this;

                $response->next = function () use ($sdk, $request, $responseData, $serverURL): ?Operations\PaginationLimitOffsetPageParamsResponse {
                    $page = $request != null ? $request->page : 0;
                    $nextPage = $page + 1;
                    if (! $responseData) {
                        return null;
                    }
                    $jsonObject = new \JsonPath\JsonObject($responseData);
                    $results = $jsonObject->get('$.resultArray');

                    if (is_array($results)) {
                        $results = $results[0];
                    }
                    if (count($results) === 0) {
                        return null;
                    }

                    return $sdk->paginationLimitOffsetPageParamsIndividual(
                        page: $nextPage,
                        serverURL: $serverURL,
                    );
                };


                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }
    /**
     * paginationLimitOffsetPageParams
     *
     * @param  int  $page
     * @param  ?string  $serverURL
     * @return \Generator<Operations\PaginationLimitOffsetPageParamsResponse>
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function paginationLimitOffsetPageParams(int $page, ?string $serverURL = null): \Generator
    {
        $res = $this->paginationLimitOffsetPageParamsIndividual($page, $serverURL);
        while ($res !== null) {
            yield $res;
            $res = $res->next($res);
        }
    }

    /**
     * paginationURLParams
     *
     * @param  int  $attempts
     * @param  ?string  $isReferencePath
     * @param  ?string  $serverURL
     * @return Operations\PaginationURLParamsResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    private function paginationURLParamsIndividual(int $attempts, ?string $isReferencePath = null, ?string $serverURL = null, ?string $urlOverride = null): Operations\PaginationURLParamsResponse
    {
        $request = new Operations\PaginationURLParamsRequest(
            attempts: $attempts,
            isReferencePath: $isReferencePath,
        );
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_URL_PARAMS_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/url');
        if ($urlOverride != null) {
            $url = $urlOverride;
        }
        $options = ['http_errors' => false];

        $qp = Utils\Utils::getQueryParams(Operations\PaginationURLParamsRequest::class, $request, $urlOverride, $this->sdkConfiguration->globals);

        $options = array_merge_recursive($options, $qp);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $responseData = (string) $httpResponse->getBody();
                $obj = $serializer->deserialize($responseData, '\OpenAPI\OpenAPI\Models\Operations\PaginationURLParamsRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\PaginationURLParamsResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);
                $sdk = $this;

                $response->next = function () use ($sdk, $responseData, $baseUrl, $attempts, $isReferencePath, $serverURL): ?Operations\PaginationURLParamsResponse {
                    $jsonObject = new \JsonPath\JsonObject($responseData);
                    $nextURL = $jsonObject->get('$.next');
                    if ($nextURL == null) {
                        return null;
                    } else {
                        $nextURL = $nextURL[0];
                    }
                    if (str_starts_with($nextURL, '/')) {
                        $url = $this->getUrl($baseUrl, []);

                        $nextURL = $url.$nextURL;

                    }
                    if (filter_var($nextURL, FILTER_VALIDATE_URL) === false) {
                        return null;
                    }

                    return $sdk->paginationURLParamsIndividual(
                        attempts: $attempts,
                        isReferencePath: $isReferencePath,
                        serverURL: $serverURL,
                        urlOverride: $nextURL,
                    );
                };


                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }
    /**
     * paginationURLParams
     *
     * @param  int  $attempts
     * @param  ?string  $isReferencePath
     * @param  ?string  $serverURL
     * @return \Generator<Operations\PaginationURLParamsResponse>
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function paginationURLParams(int $attempts, ?string $isReferencePath = null, ?string $serverURL = null, ?string $urlOverride = null): \Generator
    {
        $res = $this->paginationURLParamsIndividual($attempts, $isReferencePath, $serverURL, $urlOverride);
        while ($res !== null) {
            yield $res;
            $res = $res->next($res);
        }
    }

    /**
     * paginationWithRetries
     *
     * @param  ?string  $cursor
     * @param  ?string  $faultSettings
     * @param  ?string  $requestId
     * @param  ?string  $serverURL
     * @return Operations\PaginationWithRetriesResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    private function paginationWithRetriesIndividual(?string $cursor = null, ?string $faultSettings = null, ?string $requestId = null, ?string $serverURL = null): Operations\PaginationWithRetriesResponse
    {
        $request = new Operations\PaginationWithRetriesRequest(
            cursor: $cursor,
            faultSettings: $faultSettings,
            requestId: $requestId,
        );
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_WITH_RETRIES_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/cursor_non_numeric#withRetries');
        $urlOverride = null;
        $options = ['http_errors' => false];

        $qp = Utils\Utils::getQueryParams(Operations\PaginationWithRetriesRequest::class, $request, $urlOverride, $this->sdkConfiguration->globals);

        $options = array_merge_recursive($options, $qp);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $responseData = (string) $httpResponse->getBody();
                $obj = $serializer->deserialize($responseData, '\OpenAPI\OpenAPI\Models\Operations\PaginationWithRetriesRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\PaginationWithRetriesResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);
                $sdk = $this;

                $response->next = function () use ($sdk, $responseData, $faultSettings, $requestId, $serverURL): ?Operations\PaginationWithRetriesResponse {
                    $jsonObject = new \JsonPath\JsonObject($responseData);
                    $nextCursor = $jsonObject->get('$.resultArray[-1:]');
                    if ($nextCursor == null) {
                        return null;
                    } else {
                        $nextCursor = $nextCursor[0];
                    }

                    return $sdk->paginationWithRetriesIndividual(
                        cursor: $nextCursor,
                        faultSettings: $faultSettings,
                        requestId: $requestId,
                        serverURL: $serverURL,
                    );
                };


                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }
    /**
     * paginationWithRetries
     *
     * @param  ?string  $cursor
     * @param  ?string  $faultSettings
     * @param  ?string  $requestId
     * @param  ?string  $serverURL
     * @return \Generator<Operations\PaginationWithRetriesResponse>
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function paginationWithRetries(?string $cursor = null, ?string $faultSettings = null, ?string $requestId = null, ?string $serverURL = null): \Generator
    {
        $res = $this->paginationWithRetriesIndividual($cursor, $faultSettings, $requestId, $serverURL);
        while ($res !== null) {
            yield $res;
            $res = $res->next($res);
        }
    }

    /**
     * paginationWrappedOptionalBody
     *
     * @param  ?Operations\PaginationWrappedOptionalBodyRequest  $request
     * @param  ?Operations\PaginationWrappedOptionalBodySecurity  $security
     * @param  ?string  $serverURL
     * @return Operations\PaginationWrappedOptionalBodyResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    private function paginationWrappedOptionalBodyIndividual(?Operations\PaginationWrappedOptionalBodyRequest $request = null, ?Operations\PaginationWrappedOptionalBodySecurity $security = null, ?string $serverURL = null): Operations\PaginationWrappedOptionalBodyResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Pagination::PAGINATION_WRAPPED_OPTIONAL_BODY_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/pagination/limitoffset/offset#paginationWrappedOptionalBody');
        $urlOverride = null;
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'limitOffsetConfig', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('PUT', $url);
        if ($security != null) {
            $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        } else {
            $client = $this->sdkConfiguration->defaultClient;
        }

        $httpResponse = $client->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $responseData = (string) $httpResponse->getBody();
                $obj = $serializer->deserialize($responseData, '\OpenAPI\OpenAPI\Models\Operations\PaginationWrappedOptionalBodyRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\PaginationWrappedOptionalBodyResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);
                $sdk = $this;

                $response->next = function () use ($sdk, $request, $responseData, $serverURL): ?Operations\PaginationWrappedOptionalBodyResponse {
                    $offset = $request != null ? $request->limitOffsetConfig->offset : 0;
                    if (! $responseData) {
                        return null;
                    }
                    $jsonObject = new \JsonPath\JsonObject($responseData);
                    $results = $jsonObject->get('$.resultArray');

                    if (is_array($results)) {
                        $results = $results[0];
                    }
                    if (count($results) === 0) {
                        return null;
                    }
                    $limit = $request != null ? $request->limitOffsetConfig->limit : 0;
                    if (count($results) < $limit) {
                        return null;
                    }
                    $nextOffset = $offset + count($results);
                    $limitOffsetConfig = new Shared\LimitOffsetConfig(
                        limit: $request != null ? $request->limitOffsetConfig->limit : null,
                        offset: $nextOffset,
                        page: $request != null ? $request->limitOffsetConfig->page : null,
                    );

                    return $sdk->paginationWrappedOptionalBodyIndividual(
                        request: new Operations\PaginationWrappedOptionalBodyRequest(
                            idempotencyKey: $request != null ? $request->idempotencyKey : null,
                            limitOffsetConfig: $limitOffsetConfig,
                            requestId: $request != null ? $request->requestId : null,
                        ),
                        serverURL: $serverURL,
                    );
                };


                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }
    /**
     * paginationWrappedOptionalBody
     *
     * @param  ?Operations\PaginationWrappedOptionalBodyRequest  $request
     * @param  ?Operations\PaginationWrappedOptionalBodySecurity  $security
     * @param  ?string  $serverURL
     * @return \Generator<Operations\PaginationWrappedOptionalBodyResponse>
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function paginationWrappedOptionalBody(?Operations\PaginationWrappedOptionalBodyRequest $request = null, ?Operations\PaginationWrappedOptionalBodySecurity $security = null, ?string $serverURL = null): \Generator
    {
        $res = $this->paginationWrappedOptionalBodyIndividual($request, $security, $serverURL);
        while ($res !== null) {
            yield $res;
            $res = $res->next($res);
        }
    }

}