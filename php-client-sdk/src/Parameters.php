<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Parameters 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * deepObjectQueryParamsMap
     * 
     * @param array<string, string> $mapParam
     * @param ?array<string, array<string>> $mapArrParam
     * @return \OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsMapResponse
     */
	public function deepObjectQueryParamsMap(
        array $mapParam,
        ?array $mapArrParam = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsMapResponse
    {
        $request = new \OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsMapRequest();
        $request->mapParam = $mapParam;
        $request->mapArrParam = $mapArrParam;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/deepObject/map');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsMapRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsMapResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsMapRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * deepObjectQueryParamsObject
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SimpleObject $objParam
     * @param ?\OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsObjectObjArrParam $objArrParam
     * @return \OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsObjectResponse
     */
	public function deepObjectQueryParamsObject(
        \OpenAPI\OpenAPI\Models\Shared\SimpleObject $objParam,
        ?\OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsObjectObjArrParam $objArrParam = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsObjectResponse
    {
        $request = new \OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsObjectRequest();
        $request->objParam = $objParam;
        $request->objArrParam = $objArrParam;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/deepObject/obj');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsObjectRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsObjectRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * duplicateParam
     * 
     * @param string $duplicateParamRequest
     * @return \OpenAPI\OpenAPI\Models\Operations\DuplicateParamResponse
     */
	public function duplicateParam(
        string $duplicateParamRequest,
    ): \OpenAPI\OpenAPI\Models\Operations\DuplicateParamResponse
    {
        $request = new \OpenAPI\OpenAPI\Models\Operations\DuplicateParamRequest();
        $request->duplicateParamRequest = $duplicateParamRequest;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/params/{duplicateParamRequest}', \OpenAPI\OpenAPI\Models\Operations\DuplicateParamRequest::class, $request, $this->sdkConfiguration->globals);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DuplicateParamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->duplicateParamResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DuplicateParamDuplicateParamResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * formQueryParamsArray
     * 
     * @param ?array<string> $arrParam
     * @param ?array<int> $arrParamExploded
     * @return \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsArrayResponse
     */
	public function formQueryParamsArray(
        ?array $arrParam = null,
        ?array $arrParamExploded = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsArrayResponse
    {
        $request = new \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsArrayRequest();
        $request->arrParam = $arrParam;
        $request->arrParamExploded = $arrParamExploded;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/form/array');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FormQueryParamsArrayRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsArrayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\FormQueryParamsArrayRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * formQueryParamsCamelObject
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsCamelObjectObjParamExploded $objParamExploded
     * @param ?\OpenAPI\OpenAPI\Models\Operations\FormQueryParamsCamelObjectObjParam $objParam
     * @return \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsCamelObjectResponse
     */
	public function formQueryParamsCamelObject(
        \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsCamelObjectObjParamExploded $objParamExploded,
        ?\OpenAPI\OpenAPI\Models\Operations\FormQueryParamsCamelObjectObjParam $objParam = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsCamelObjectResponse
    {
        $request = new \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsCamelObjectRequest();
        $request->objParamExploded = $objParamExploded;
        $request->objParam = $objParam;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/form/camelObj');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FormQueryParamsCamelObjectRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsCamelObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\FormQueryParamsCamelObjectRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * formQueryParamsMap
     * 
     * @param ?array<string, string> $mapParam
     * @param ?array<string, int> $mapParamExploded
     * @return \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsMapResponse
     */
	public function formQueryParamsMap(
        ?array $mapParam = null,
        ?array $mapParamExploded = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsMapResponse
    {
        $request = new \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsMapRequest();
        $request->mapParam = $mapParam;
        $request->mapParamExploded = $mapParamExploded;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/form/map');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FormQueryParamsMapRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsMapResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\FormQueryParamsMapRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * formQueryParamsObject
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SimpleObject $objParamExploded
     * @param ?\OpenAPI\OpenAPI\Models\Shared\SimpleObject $objParam
     * @return \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsObjectResponse
     */
	public function formQueryParamsObject(
        \OpenAPI\OpenAPI\Models\Shared\SimpleObject $objParamExploded,
        ?\OpenAPI\OpenAPI\Models\Shared\SimpleObject $objParam = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsObjectResponse
    {
        $request = new \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsObjectRequest();
        $request->objParamExploded = $objParamExploded;
        $request->objParam = $objParam;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/form/obj');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FormQueryParamsObjectRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\FormQueryParamsObjectRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * formQueryParamsPrimitive
     * 
     * @param bool $boolParam
     * @param int $intParam
     * @param float $numParam
     * @param string $strParam
     * @return \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsPrimitiveResponse
     */
	public function formQueryParamsPrimitive(
        bool $boolParam,
        int $intParam,
        float $numParam,
        string $strParam,
    ): \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsPrimitiveResponse
    {
        $request = new \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsPrimitiveRequest();
        $request->boolParam = $boolParam;
        $request->intParam = $intParam;
        $request->numParam = $numParam;
        $request->strParam = $strParam;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/form/primitive');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FormQueryParamsPrimitiveRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsPrimitiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\FormQueryParamsPrimitiveRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * formQueryParamsRefParamObject
     * 
     * @param ?\OpenAPI\OpenAPI\Models\Shared\RefQueryParamObj $refObjParam
     * @param ?\OpenAPI\OpenAPI\Models\Shared\RefQueryParamObjExploded $refObjParamExploded
     * @return \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsRefParamObjectResponse
     */
	public function formQueryParamsRefParamObject(
        ?\OpenAPI\OpenAPI\Models\Shared\RefQueryParamObj $refObjParam = null,
        ?\OpenAPI\OpenAPI\Models\Shared\RefQueryParamObjExploded $refObjParamExploded = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsRefParamObjectResponse
    {
        $request = new \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsRefParamObjectRequest();
        $request->refObjParam = $refObjParam;
        $request->refObjParamExploded = $refObjParamExploded;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/form/refParamObject');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FormQueryParamsRefParamObjectRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FormQueryParamsRefParamObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\FormQueryParamsRefParamObjectRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * headerParamsArray
     * 
     * @param array<string> $xHeaderArray
     * @return \OpenAPI\OpenAPI\Models\Operations\HeaderParamsArrayResponse
     */
	public function headerParamsArray(
        array $xHeaderArray,
    ): \OpenAPI\OpenAPI\Models\Operations\HeaderParamsArrayResponse
    {
        $request = new \OpenAPI\OpenAPI\Models\Operations\HeaderParamsArrayRequest();
        $request->xHeaderArray = $xHeaderArray;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/headers/array');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        if (!array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\HeaderParamsArrayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\HeaderParamsArrayRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * headerParamsMap
     * 
     * @param array<string, string> $xHeaderMap
     * @param array<string, string> $xHeaderMapExplode
     * @return \OpenAPI\OpenAPI\Models\Operations\HeaderParamsMapResponse
     */
	public function headerParamsMap(
        array $xHeaderMap,
        array $xHeaderMapExplode,
    ): \OpenAPI\OpenAPI\Models\Operations\HeaderParamsMapResponse
    {
        $request = new \OpenAPI\OpenAPI\Models\Operations\HeaderParamsMapRequest();
        $request->xHeaderMap = $xHeaderMap;
        $request->xHeaderMapExplode = $xHeaderMapExplode;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/headers/map');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        if (!array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\HeaderParamsMapResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\HeaderParamsMapRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * headerParamsObject
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SimpleObject $xHeaderObj
     * @param \OpenAPI\OpenAPI\Models\Shared\SimpleObject $xHeaderObjExplode
     * @return \OpenAPI\OpenAPI\Models\Operations\HeaderParamsObjectResponse
     */
	public function headerParamsObject(
        \OpenAPI\OpenAPI\Models\Shared\SimpleObject $xHeaderObj,
        \OpenAPI\OpenAPI\Models\Shared\SimpleObject $xHeaderObjExplode,
    ): \OpenAPI\OpenAPI\Models\Operations\HeaderParamsObjectResponse
    {
        $request = new \OpenAPI\OpenAPI\Models\Operations\HeaderParamsObjectRequest();
        $request->xHeaderObj = $xHeaderObj;
        $request->xHeaderObjExplode = $xHeaderObjExplode;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/headers/obj');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        if (!array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\HeaderParamsObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\HeaderParamsObjectRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * headerParamsPrimitive
     * 
     * @param bool $xHeaderBoolean
     * @param int $xHeaderInteger
     * @param float $xHeaderNumber
     * @param string $xHeaderString
     * @return \OpenAPI\OpenAPI\Models\Operations\HeaderParamsPrimitiveResponse
     */
	public function headerParamsPrimitive(
        bool $xHeaderBoolean,
        int $xHeaderInteger,
        float $xHeaderNumber,
        string $xHeaderString,
    ): \OpenAPI\OpenAPI\Models\Operations\HeaderParamsPrimitiveResponse
    {
        $request = new \OpenAPI\OpenAPI\Models\Operations\HeaderParamsPrimitiveRequest();
        $request->xHeaderBoolean = $xHeaderBoolean;
        $request->xHeaderInteger = $xHeaderInteger;
        $request->xHeaderNumber = $xHeaderNumber;
        $request->xHeaderString = $xHeaderString;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/headers/primitive');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        if (!array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\HeaderParamsPrimitiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\HeaderParamsPrimitiveRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * jsonQueryParamsObject
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\DeepObject $deepObjParam
     * @param \OpenAPI\OpenAPI\Models\Shared\SimpleObject $simpleObjParam
     * @return \OpenAPI\OpenAPI\Models\Operations\JsonQueryParamsObjectResponse
     */
	public function jsonQueryParamsObject(
        \OpenAPI\OpenAPI\Models\Shared\DeepObject $deepObjParam,
        \OpenAPI\OpenAPI\Models\Shared\SimpleObject $simpleObjParam,
    ): \OpenAPI\OpenAPI\Models\Operations\JsonQueryParamsObjectResponse
    {
        $request = new \OpenAPI\OpenAPI\Models\Operations\JsonQueryParamsObjectRequest();
        $request->deepObjParam = $deepObjParam;
        $request->simpleObjParam = $simpleObjParam;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/json/obj');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\JsonQueryParamsObjectRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JsonQueryParamsObjectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\JsonQueryParamsObjectRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * mixedParametersCamelCase
     * 
     * @param string $headerParam
     * @param string $pathParam
     * @param string $queryStringParam
     * @return \OpenAPI\OpenAPI\Models\Operations\MixedParametersCamelCaseResponse
     */
	public function mixedParametersCamelCase(
        string $headerParam,
        string $pathParam,
        string $queryStringParam,
    ): \OpenAPI\OpenAPI\Models\Operations\MixedParametersCamelCaseResponse
    {
        $request = new \OpenAPI\OpenAPI\Models\Operations\MixedParametersCamelCaseRequest();
        $request->headerParam = $headerParam;
        $request->pathParam = $pathParam;
        $request->queryStringParam = $queryStringParam;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/mixedParams/path/{path_param}/camelcase', \OpenAPI\OpenAPI\Models\Operations\MixedParametersCamelCaseRequest::class, $request, $this->sdkConfiguration->globals);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MixedParametersCamelCaseRequest::class, $request, $this->sdkConfiguration->globals));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        if (!array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MixedParametersCamelCaseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MixedParametersCamelCaseRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * mixedParametersPrimitives
     * 
     * @param string $headerParam
     * @param string $pathParam
     * @param string $queryStringParam
     * @return \OpenAPI\OpenAPI\Models\Operations\MixedParametersPrimitivesResponse
     */
	public function mixedParametersPrimitives(
        string $headerParam,
        string $pathParam,
        string $queryStringParam,
    ): \OpenAPI\OpenAPI\Models\Operations\MixedParametersPrimitivesResponse
    {
        $request = new \OpenAPI\OpenAPI\Models\Operations\MixedParametersPrimitivesRequest();
        $request->headerParam = $headerParam;
        $request->pathParam = $pathParam;
        $request->queryStringParam = $queryStringParam;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/mixedParams/path/{pathParam}', \OpenAPI\OpenAPI\Models\Operations\MixedParametersPrimitivesRequest::class, $request, $this->sdkConfiguration->globals);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MixedParametersPrimitivesRequest::class, $request, $this->sdkConfiguration->globals));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        if (!array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MixedParametersPrimitivesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MixedParametersPrimitivesRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * mixedQueryParams
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SimpleObject $deepObjectParam
     * @param \OpenAPI\OpenAPI\Models\Shared\SimpleObject $formParam
     * @param \OpenAPI\OpenAPI\Models\Shared\SimpleObject $jsonParam
     * @return \OpenAPI\OpenAPI\Models\Operations\MixedQueryParamsResponse
     */
	public function mixedQueryParams(
        \OpenAPI\OpenAPI\Models\Shared\SimpleObject $deepObjectParam,
        \OpenAPI\OpenAPI\Models\Shared\SimpleObject $formParam,
        \OpenAPI\OpenAPI\Models\Shared\SimpleObject $jsonParam,
    ): \OpenAPI\OpenAPI\Models\Operations\MixedQueryParamsResponse
    {
        $request = new \OpenAPI\OpenAPI\Models\Operations\MixedQueryParamsRequest();
        $request->deepObjectParam = $deepObjectParam;
        $request->formParam = $formParam;
        $request->jsonParam = $jsonParam;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/mixed');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MixedQueryParamsRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MixedQueryParamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MixedQueryParamsRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * pathParameterJson
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SimpleObject $jsonObj
     * @return \OpenAPI\OpenAPI\Models\Operations\PathParameterJsonResponse
     */
	public function pathParameterJson(
        \OpenAPI\OpenAPI\Models\Shared\SimpleObject $jsonObj,
    ): \OpenAPI\OpenAPI\Models\Operations\PathParameterJsonResponse
    {
        $request = new \OpenAPI\OpenAPI\Models\Operations\PathParameterJsonRequest();
        $request->jsonObj = $jsonObj;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/pathParams/json/{jsonObj}', \OpenAPI\OpenAPI\Models\Operations\PathParameterJsonRequest::class, $request, $this->sdkConfiguration->globals);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PathParameterJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PathParameterJsonRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * pipeDelimitedQueryParamsArray
     * 
     * @param ?array<string> $arrParam
     * @param ?array<int> $arrParamExploded
     * @param ?array<string, string> $mapParam
     * @param ?\OpenAPI\OpenAPI\Models\Shared\SimpleObject $objParam
     * @return \OpenAPI\OpenAPI\Models\Operations\PipeDelimitedQueryParamsArrayResponse
     */
	public function pipeDelimitedQueryParamsArray(
        ?array $arrParam = null,
        ?array $arrParamExploded = null,
        ?array $mapParam = null,
        ?\OpenAPI\OpenAPI\Models\Shared\SimpleObject $objParam = null,
    ): \OpenAPI\OpenAPI\Models\Operations\PipeDelimitedQueryParamsArrayResponse
    {
        $request = new \OpenAPI\OpenAPI\Models\Operations\PipeDelimitedQueryParamsArrayRequest();
        $request->arrParam = $arrParam;
        $request->arrParamExploded = $arrParamExploded;
        $request->mapParam = $mapParam;
        $request->objParam = $objParam;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/pipe/array');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PipeDelimitedQueryParamsArrayRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PipeDelimitedQueryParamsArrayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PipeDelimitedQueryParamsArrayRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * simplePathParameterArrays
     * 
     * @param array<string> $arrParam
     * @return \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterArraysResponse
     */
	public function simplePathParameterArrays(
        array $arrParam,
    ): \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterArraysResponse
    {
        $request = new \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterArraysRequest();
        $request->arrParam = $arrParam;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/pathParams/arr/{arrParam}', \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterArraysRequest::class, $request, $this->sdkConfiguration->globals);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterArraysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SimplePathParameterArraysRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * simplePathParameterMaps
     * 
     * @param array<string, string> $mapParam
     * @param array<string, int> $mapParamExploded
     * @return \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterMapsResponse
     */
	public function simplePathParameterMaps(
        array $mapParam,
        array $mapParamExploded,
    ): \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterMapsResponse
    {
        $request = new \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterMapsRequest();
        $request->mapParam = $mapParam;
        $request->mapParamExploded = $mapParamExploded;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/pathParams/map/{mapParam}/mapExploded/{mapParamExploded}', \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterMapsRequest::class, $request, $this->sdkConfiguration->globals);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterMapsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SimplePathParameterMapsRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * simplePathParameterObjects
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SimpleObject $objParam
     * @param \OpenAPI\OpenAPI\Models\Shared\SimpleObject $objParamExploded
     * @return \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterObjectsResponse
     */
	public function simplePathParameterObjects(
        \OpenAPI\OpenAPI\Models\Shared\SimpleObject $objParam,
        \OpenAPI\OpenAPI\Models\Shared\SimpleObject $objParamExploded,
    ): \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterObjectsResponse
    {
        $request = new \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterObjectsRequest();
        $request->objParam = $objParam;
        $request->objParamExploded = $objParamExploded;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/pathParams/obj/{objParam}/objExploded/{objParamExploded}', \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterObjectsRequest::class, $request, $this->sdkConfiguration->globals);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterObjectsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SimplePathParameterObjectsRes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * simplePathParameterPrimitives
     * 
     * @param bool $boolParam
     * @param int $intParam
     * @param float $numParam
     * @param string $strParam
     * @return \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterPrimitivesResponse
     */
	public function simplePathParameterPrimitives(
        bool $boolParam,
        int $intParam,
        float $numParam,
        string $strParam,
    ): \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterPrimitivesResponse
    {
        $request = new \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterPrimitivesRequest();
        $request->boolParam = $boolParam;
        $request->intParam = $intParam;
        $request->numParam = $numParam;
        $request->strParam = $strParam;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/pathParams/str/{strParam}/bool/{boolParam}/int/{intParam}/num/{numParam}', \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterPrimitivesRequest::class, $request, $this->sdkConfiguration->globals);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SimplePathParameterPrimitivesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SimplePathParameterPrimitivesRes', 'json');
            }
        }

        return $response;
    }
}