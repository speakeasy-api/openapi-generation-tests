<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

use OpenAPI\OpenAPI\Models\Operations;
use OpenAPI\OpenAPI\Models\Shared;
use Speakeasy\Serializer\DeserializationContext;

class Parameters
{
    private SDKConfiguration $sdkConfiguration;
    /**
     * @param  SDKConfiguration  $sdkConfig
     */
    public function __construct(public SDKConfiguration $sdkConfig)
    {
        $this->sdkConfiguration = $sdkConfig;
    }

    /**
     * deepObjectQueryParamsMap
     *
     * @param  array<string, string>  $mapParam
     * @param  ?array<string, array<string>>  $mapArrParam
     * @return Operations\DeepObjectQueryParamsMapResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function deepObjectQueryParamsMap(array $mapParam, ?array $mapArrParam = null): Operations\DeepObjectQueryParamsMapResponse
    {
        $request = new Operations\DeepObjectQueryParamsMapRequest(
            mapParam: $mapParam,
            mapArrParam: $mapArrParam,
        );
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/deepObject/map');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(Operations\DeepObjectQueryParamsMapRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsMapRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\DeepObjectQueryParamsMapResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * deepObjectQueryParamsObject
     *
     * @param  Shared\SimpleObject  $objParam
     * @param  ?Operations\ObjArrParam  $objArrParam
     * @return Operations\DeepObjectQueryParamsObjectResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function deepObjectQueryParamsObject(Shared\SimpleObject $objParam, ?Operations\ObjArrParam $objArrParam = null): Operations\DeepObjectQueryParamsObjectResponse
    {
        $request = new Operations\DeepObjectQueryParamsObjectRequest(
            objParam: $objParam,
            objArrParam: $objArrParam,
        );
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/deepObject/obj');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(Operations\DeepObjectQueryParamsObjectRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\DeepObjectQueryParamsObjectRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\DeepObjectQueryParamsObjectResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * duplicateParam
     *
     * @param  string  $duplicateParamRequest
     * @return Operations\DuplicateParamResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function duplicateParam(string $duplicateParamRequest): Operations\DuplicateParamResponse
    {
        $request = new Operations\DuplicateParamRequest(
            duplicateParamRequest: $duplicateParamRequest,
        );
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/params/{duplicateParamRequest}', Operations\DuplicateParamRequest::class, $request, $this->sdkConfiguration->globals);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\DuplicateParamDuplicateParamResponse', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\DuplicateParamResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    duplicateParamResponse: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * formQueryParamsArray
     *
     * @param  ?array<string>  $arrParam
     * @param  ?array<int>  $arrParamExploded
     * @return Operations\FormQueryParamsArrayResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function formQueryParamsArray(?array $arrParam = null, ?array $arrParamExploded = null): Operations\FormQueryParamsArrayResponse
    {
        $request = new Operations\FormQueryParamsArrayRequest(
            arrParam: $arrParam,
            arrParamExploded: $arrParamExploded,
        );
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/form/array');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(Operations\FormQueryParamsArrayRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\FormQueryParamsArrayRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\FormQueryParamsArrayResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * formQueryParamsCamelObject
     *
     * @param  Operations\ObjParamExploded  $objParamExploded
     * @param  ?Operations\ObjParam  $objParam
     * @return Operations\FormQueryParamsCamelObjectResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function formQueryParamsCamelObject(Operations\ObjParamExploded $objParamExploded, ?Operations\ObjParam $objParam = null): Operations\FormQueryParamsCamelObjectResponse
    {
        $request = new Operations\FormQueryParamsCamelObjectRequest(
            objParamExploded: $objParamExploded,
            objParam: $objParam,
        );
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/form/camelObj');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(Operations\FormQueryParamsCamelObjectRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\FormQueryParamsCamelObjectRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\FormQueryParamsCamelObjectResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * formQueryParamsMap
     *
     * @param  ?array<string, string>  $mapParam
     * @param  ?array<string, int>  $mapParamExploded
     * @return Operations\FormQueryParamsMapResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function formQueryParamsMap(?array $mapParam = null, ?array $mapParamExploded = null): Operations\FormQueryParamsMapResponse
    {
        $request = new Operations\FormQueryParamsMapRequest(
            mapParam: $mapParam,
            mapParamExploded: $mapParamExploded,
        );
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/form/map');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(Operations\FormQueryParamsMapRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\FormQueryParamsMapRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\FormQueryParamsMapResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * formQueryParamsObject
     *
     * @param  Shared\SimpleObject  $objParamExploded
     * @param  ?Shared\SimpleObject  $objParam
     * @return Operations\FormQueryParamsObjectResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function formQueryParamsObject(Shared\SimpleObject $objParamExploded, ?Shared\SimpleObject $objParam = null): Operations\FormQueryParamsObjectResponse
    {
        $request = new Operations\FormQueryParamsObjectRequest(
            objParamExploded: $objParamExploded,
            objParam: $objParam,
        );
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/form/obj');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(Operations\FormQueryParamsObjectRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\FormQueryParamsObjectRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\FormQueryParamsObjectResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * formQueryParamsPrimitive
     *
     * @param  bool  $boolParam
     * @param  int  $intParam
     * @param  float  $numParam
     * @param  string  $strParam
     * @return Operations\FormQueryParamsPrimitiveResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function formQueryParamsPrimitive(bool $boolParam, int $intParam, float $numParam, string $strParam): Operations\FormQueryParamsPrimitiveResponse
    {
        $request = new Operations\FormQueryParamsPrimitiveRequest(
            boolParam: $boolParam,
            intParam: $intParam,
            numParam: $numParam,
            strParam: $strParam,
        );
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/form/primitive');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(Operations\FormQueryParamsPrimitiveRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\FormQueryParamsPrimitiveRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\FormQueryParamsPrimitiveResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * formQueryParamsRefParamObject
     *
     * @param  ?Shared\RefQueryParamObj  $refObjParam
     * @param  ?Shared\RefQueryParamObjExploded  $refObjParamExploded
     * @return Operations\FormQueryParamsRefParamObjectResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function formQueryParamsRefParamObject(?Shared\RefQueryParamObj $refObjParam = null, ?Shared\RefQueryParamObjExploded $refObjParamExploded = null): Operations\FormQueryParamsRefParamObjectResponse
    {
        $request = new Operations\FormQueryParamsRefParamObjectRequest(
            refObjParam: $refObjParam,
            refObjParamExploded: $refObjParamExploded,
        );
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/form/refParamObject');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(Operations\FormQueryParamsRefParamObjectRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\FormQueryParamsRefParamObjectRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\FormQueryParamsRefParamObjectResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * headerParamsArray
     *
     * @param  array<string>  $xHeaderArray
     * @return Operations\HeaderParamsArrayResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function headerParamsArray(array $xHeaderArray): Operations\HeaderParamsArrayResponse
    {
        $request = new Operations\HeaderParamsArrayRequest(
            xHeaderArray: $xHeaderArray,
        );
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/headers/array');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\HeaderParamsArrayRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\HeaderParamsArrayResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * headerParamsMap
     *
     * @param  array<string, string>  $xHeaderMap
     * @param  array<string, string>  $xHeaderMapExplode
     * @return Operations\HeaderParamsMapResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function headerParamsMap(array $xHeaderMap, array $xHeaderMapExplode): Operations\HeaderParamsMapResponse
    {
        $request = new Operations\HeaderParamsMapRequest(
            xHeaderMap: $xHeaderMap,
            xHeaderMapExplode: $xHeaderMapExplode,
        );
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/headers/map');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\HeaderParamsMapRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\HeaderParamsMapResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * headerParamsObject
     *
     * @param  Shared\SimpleObject  $xHeaderObj
     * @param  Shared\SimpleObject  $xHeaderObjExplode
     * @return Operations\HeaderParamsObjectResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function headerParamsObject(Shared\SimpleObject $xHeaderObj, Shared\SimpleObject $xHeaderObjExplode): Operations\HeaderParamsObjectResponse
    {
        $request = new Operations\HeaderParamsObjectRequest(
            xHeaderObj: $xHeaderObj,
            xHeaderObjExplode: $xHeaderObjExplode,
        );
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/headers/obj');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\HeaderParamsObjectRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\HeaderParamsObjectResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * headerParamsPrimitive
     *
     * @param  bool  $xHeaderBoolean
     * @param  int  $xHeaderInteger
     * @param  float  $xHeaderNumber
     * @param  string  $xHeaderString
     * @return Operations\HeaderParamsPrimitiveResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function headerParamsPrimitive(bool $xHeaderBoolean, int $xHeaderInteger, float $xHeaderNumber, string $xHeaderString): Operations\HeaderParamsPrimitiveResponse
    {
        $request = new Operations\HeaderParamsPrimitiveRequest(
            xHeaderBoolean: $xHeaderBoolean,
            xHeaderInteger: $xHeaderInteger,
            xHeaderNumber: $xHeaderNumber,
            xHeaderString: $xHeaderString,
        );
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/headers/primitive');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\HeaderParamsPrimitiveRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\HeaderParamsPrimitiveResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * jsonQueryParamsObject
     *
     * @param  Shared\DeepObject  $deepObjParam
     * @param  Shared\SimpleObject  $simpleObjParam
     * @return Operations\JsonQueryParamsObjectResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function jsonQueryParamsObject(Shared\DeepObject $deepObjParam, Shared\SimpleObject $simpleObjParam): Operations\JsonQueryParamsObjectResponse
    {
        $request = new Operations\JsonQueryParamsObjectRequest(
            deepObjParam: $deepObjParam,
            simpleObjParam: $simpleObjParam,
        );
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/json/obj');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(Operations\JsonQueryParamsObjectRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\JsonQueryParamsObjectRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\JsonQueryParamsObjectResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * jsonQueryParamsObjectSmaller
     *
     * @param  Shared\DeepObjectSmaller  $deepObjParam
     * @param  Shared\SimpleObject  $simpleObjParam
     * @return Operations\JsonQueryParamsObjectSmallerResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function jsonQueryParamsObjectSmaller(Shared\DeepObjectSmaller $deepObjParam, Shared\SimpleObject $simpleObjParam): Operations\JsonQueryParamsObjectSmallerResponse
    {
        $request = new Operations\JsonQueryParamsObjectSmallerRequest(
            deepObjParam: $deepObjParam,
            simpleObjParam: $simpleObjParam,
        );
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/json/objsmaller');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(Operations\JsonQueryParamsObjectSmallerRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\JsonQueryParamsObjectSmallerRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\JsonQueryParamsObjectSmallerResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * mixedParametersCamelCase
     *
     * @param  string  $headerParam
     * @param  string  $pathParam
     * @param  string  $queryStringParam
     * @return Operations\MixedParametersCamelCaseResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function mixedParametersCamelCase(string $headerParam, string $pathParam, string $queryStringParam): Operations\MixedParametersCamelCaseResponse
    {
        $request = new Operations\MixedParametersCamelCaseRequest(
            headerParam: $headerParam,
            pathParam: $pathParam,
            queryStringParam: $queryStringParam,
        );
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/mixedParams/path/{path_param}/camelcase', Operations\MixedParametersCamelCaseRequest::class, $request, $this->sdkConfiguration->globals);
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(Operations\MixedParametersCamelCaseRequest::class, $request, $this->sdkConfiguration->globals));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\MixedParametersCamelCaseRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\MixedParametersCamelCaseResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * mixedParametersPrimitives
     *
     * @param  string  $headerParam
     * @param  string  $pathParam
     * @param  string  $queryStringParam
     * @return Operations\MixedParametersPrimitivesResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function mixedParametersPrimitives(string $headerParam, string $pathParam, string $queryStringParam): Operations\MixedParametersPrimitivesResponse
    {
        $request = new Operations\MixedParametersPrimitivesRequest(
            headerParam: $headerParam,
            pathParam: $pathParam,
            queryStringParam: $queryStringParam,
        );
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/mixedParams/path/{pathParam}', Operations\MixedParametersPrimitivesRequest::class, $request, $this->sdkConfiguration->globals);
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(Operations\MixedParametersPrimitivesRequest::class, $request, $this->sdkConfiguration->globals));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request, $this->sdkConfiguration->globals));
        if (! array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\MixedParametersPrimitivesRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\MixedParametersPrimitivesResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * mixedQueryParams
     *
     * @param  Shared\SimpleObject  $deepObjectParam
     * @param  Shared\SimpleObject  $formParam
     * @param  Shared\SimpleObject  $jsonParam
     * @return Operations\MixedQueryParamsResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function mixedQueryParams(Shared\SimpleObject $deepObjectParam, Shared\SimpleObject $formParam, Shared\SimpleObject $jsonParam): Operations\MixedQueryParamsResponse
    {
        $request = new Operations\MixedQueryParamsRequest(
            deepObjectParam: $deepObjectParam,
            formParam: $formParam,
            jsonParam: $jsonParam,
        );
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/mixed');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(Operations\MixedQueryParamsRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\MixedQueryParamsRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\MixedQueryParamsResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * pathEncoding
     *
     * @param  string  $param1
     * @param  string  $param2
     * @return Operations\PathEncodingResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function pathEncoding(string $param1, string $param2): Operations\PathEncodingResponse
    {
        $request = new Operations\PathEncodingRequest(
            param1: $param1,
            param2: $param2,
        );
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/pathencoding/{param1}/{param2}', Operations\PathEncodingRequest::class, $request, $this->sdkConfiguration->globals);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = '*/*';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            return new Operations\PathEncodingResponse(
                statusCode: $statusCode,
                contentType: $contentType,
                rawResponse: $httpResponse
            );
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * pathParameterJson
     *
     * @param  Shared\SimpleObject  $jsonObj
     * @return Operations\PathParameterJsonResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function pathParameterJson(Shared\SimpleObject $jsonObj): Operations\PathParameterJsonResponse
    {
        $request = new Operations\PathParameterJsonRequest(
            jsonObj: $jsonObj,
        );
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/pathParams/json/{jsonObj}', Operations\PathParameterJsonRequest::class, $request, $this->sdkConfiguration->globals);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\PathParameterJsonRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\PathParameterJsonResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * pipeDelimitedQueryParamsArray
     *
     * @param  ?array<string>  $arrParam
     * @param  ?array<int>  $arrParamExploded
     * @param  ?array<string, string>  $mapParam
     * @param  ?Shared\SimpleObject  $objParam
     * @return Operations\PipeDelimitedQueryParamsArrayResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function pipeDelimitedQueryParamsArray(?array $arrParam = null, ?array $arrParamExploded = null, ?array $mapParam = null, ?Shared\SimpleObject $objParam = null): Operations\PipeDelimitedQueryParamsArrayResponse
    {
        $request = new Operations\PipeDelimitedQueryParamsArrayRequest(
            arrParam: $arrParam,
            arrParamExploded: $arrParamExploded,
            mapParam: $mapParam,
            objParam: $objParam,
        );
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/pipe/array');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(Operations\PipeDelimitedQueryParamsArrayRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\PipeDelimitedQueryParamsArrayRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\PipeDelimitedQueryParamsArrayResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * simplePathParameterArrays
     *
     * @param  array<string>  $arrParam
     * @return Operations\SimplePathParameterArraysResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function simplePathParameterArrays(array $arrParam): Operations\SimplePathParameterArraysResponse
    {
        $request = new Operations\SimplePathParameterArraysRequest(
            arrParam: $arrParam,
        );
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/pathParams/arr/{arrParam}', Operations\SimplePathParameterArraysRequest::class, $request, $this->sdkConfiguration->globals);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\SimplePathParameterArraysRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\SimplePathParameterArraysResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * simplePathParameterMaps
     *
     * @param  array<string, string>  $mapParam
     * @param  array<string, int>  $mapParamExploded
     * @return Operations\SimplePathParameterMapsResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function simplePathParameterMaps(array $mapParam, array $mapParamExploded): Operations\SimplePathParameterMapsResponse
    {
        $request = new Operations\SimplePathParameterMapsRequest(
            mapParam: $mapParam,
            mapParamExploded: $mapParamExploded,
        );
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/pathParams/map/{mapParam}/mapExploded/{mapParamExploded}', Operations\SimplePathParameterMapsRequest::class, $request, $this->sdkConfiguration->globals);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\SimplePathParameterMapsRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\SimplePathParameterMapsResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * simplePathParameterObjects
     *
     * @param  Shared\SimpleObject  $objParam
     * @param  Shared\SimpleObject  $objParamExploded
     * @return Operations\SimplePathParameterObjectsResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function simplePathParameterObjects(Shared\SimpleObject $objParam, Shared\SimpleObject $objParamExploded): Operations\SimplePathParameterObjectsResponse
    {
        $request = new Operations\SimplePathParameterObjectsRequest(
            objParam: $objParam,
            objParamExploded: $objParamExploded,
        );
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/pathParams/obj/{objParam}/objExploded/{objParamExploded}', Operations\SimplePathParameterObjectsRequest::class, $request, $this->sdkConfiguration->globals);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\SimplePathParameterObjectsRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\SimplePathParameterObjectsResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * simplePathParameterPrimitives
     *
     * @param  bool  $boolParam
     * @param  int  $intParam
     * @param  float  $numParam
     * @param  string  $strParam
     * @return Operations\SimplePathParameterPrimitivesResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function simplePathParameterPrimitives(bool $boolParam, int $intParam, float $numParam, string $strParam): Operations\SimplePathParameterPrimitivesResponse
    {
        $request = new Operations\SimplePathParameterPrimitivesRequest(
            boolParam: $boolParam,
            intParam: $intParam,
            numParam: $numParam,
            strParam: $strParam,
        );
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/pathParams/str/{strParam}/bool/{boolParam}/int/{intParam}/num/{numParam}', Operations\SimplePathParameterPrimitivesRequest::class, $request, $this->sdkConfiguration->globals);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\SimplePathParameterPrimitivesRes', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\SimplePathParameterPrimitivesResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    res: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

}