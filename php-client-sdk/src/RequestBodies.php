<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RequestBodies
{
    public const REQUEST_BODY_POST_APPLICATION_JSON_ARRAY_SERVERS = [

        'http://localhost:35456',
    ];
    public const REQUEST_BODY_POST_APPLICATION_JSON_ARRAY_CAMEL_CASE_SERVERS = [

        'http://localhost:35456',
    ];
    public const REQUEST_BODY_POST_APPLICATION_JSON_ARRAY_OF_ARRAY_SERVERS = [

        'http://localhost:35456',
    ];
    public const REQUEST_BODY_POST_APPLICATION_JSON_ARRAY_OF_ARRAY_CAMEL_CASE_SERVERS = [

        'http://localhost:35456',
    ];
    public const REQUEST_BODY_POST_APPLICATION_JSON_ARRAY_OF_ARRAY_OF_PRIMITIVE_SERVERS = [

        'http://localhost:35456',
    ];
    public const REQUEST_BODY_POST_APPLICATION_JSON_ARRAY_OF_MAP_SERVERS = [

        'http://localhost:35456',
    ];
    public const REQUEST_BODY_POST_APPLICATION_JSON_ARRAY_OF_MAP_CAMEL_CASE_SERVERS = [

        'http://localhost:35456',
    ];
    public const REQUEST_BODY_POST_APPLICATION_JSON_ARRAY_OF_PRIMITIVE_SERVERS = [

        'http://localhost:35456',
    ];
    public const REQUEST_BODY_POST_APPLICATION_JSON_MAP_SERVERS = [

        'http://localhost:35456',
    ];
    public const REQUEST_BODY_POST_APPLICATION_JSON_MAP_CAMEL_CASE_SERVERS = [

        'http://localhost:35456',
    ];
    public const REQUEST_BODY_POST_APPLICATION_JSON_MAP_OF_ARRAY_SERVERS = [

        'http://localhost:35456',
    ];
    public const REQUEST_BODY_POST_APPLICATION_JSON_MAP_OF_ARRAY_CAMEL_CASE_SERVERS = [

        'http://localhost:35456',
    ];
    public const REQUEST_BODY_POST_APPLICATION_JSON_MAP_OF_MAP_SERVERS = [

        'http://localhost:35456',
    ];
    public const REQUEST_BODY_POST_APPLICATION_JSON_MAP_OF_MAP_CAMEL_CASE_SERVERS = [

        'http://localhost:35456',
    ];
    public const REQUEST_BODY_POST_APPLICATION_JSON_MAP_OF_MAP_OF_PRIMITIVE_SERVERS = [

        'http://localhost:35456',
    ];
    public const REQUEST_BODY_POST_APPLICATION_JSON_MAP_OF_PRIMITIVE_SERVERS = [

        'http://localhost:35456',
    ];
    public const REQUEST_BODY_READ_AND_WRITE_SERVERS = [

        'http://localhost:35456',
    ];
    public const REQUEST_BODY_READ_ONLY_INPUT_SERVERS = [

        'http://localhost:35456',
    ];
    public const REQUEST_BODY_READ_ONLY_UNION_SERVERS = [

        'http://localhost:35456',
    ];
    public const REQUEST_BODY_READ_WRITE_ONLY_UNION_SERVERS = [

        'http://localhost:35456',
    ];
    public const REQUEST_BODY_WRITE_ONLY_SERVERS = [

        'http://localhost:35456',
    ];
    public const REQUEST_BODY_WRITE_ONLY_OUTPUT_SERVERS = [

        'http://localhost:35456',
    ];
    public const REQUEST_BODY_WRITE_ONLY_UNION_SERVERS = [

        'http://localhost:35456',
    ];
    private SDKConfiguration $sdkConfiguration;

    /**
     * @param  SDKConfiguration  $sdkConfig
     */
    public function __construct(SDKConfiguration $sdkConfig)
    {
        $this->sdkConfiguration = $sdkConfig;
    }

    /**
     * nullEnumPost
     *
     * @param  \OpenAPI\OpenAPI\Models\Shared\ObjectWithNullEnums  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\NullEnumPostResponse
     */
    public function nullEnumPost(
        \OpenAPI\OpenAPI\Models\Shared\ObjectWithNullEnums $request,
    ): \OpenAPI\OpenAPI\Models\Operations\NullEnumPostResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/nullEnum');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\NullEnumPostResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\NullEnumPostRes', 'json');
            }
        }

        return $response;
    }

    /**
     * nullableObjectPost
     *
     * @param  \OpenAPI\OpenAPI\Models\Shared\NullableObject  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\NullableObjectPostResponse
     */
    public function nullableObjectPost(
        \OpenAPI\OpenAPI\Models\Shared\NullableObject $request,
    ): \OpenAPI\OpenAPI\Models\Operations\NullableObjectPostResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/nullableRequiredObject');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\NullableObjectPostResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\NullableObjectPostRes', 'json');
            }
        }

        return $response;
    }

    /**
     * nullableOptionalFieldsPost
     *
     * @param  \OpenAPI\OpenAPI\Models\Operations\NullableOptionalFieldsPostRequestBody  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\NullableOptionalFieldsPostResponse
     */
    public function nullableOptionalFieldsPost(
        \OpenAPI\OpenAPI\Models\Operations\NullableOptionalFieldsPostRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\NullableOptionalFieldsPostResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/nullableOptionalFields');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\NullableOptionalFieldsPostResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\NullableOptionalFieldsPostResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * nullableRequiredEmptyObjectPost
     *
     * @param  \OpenAPI\OpenAPI\Models\Operations\NullableRequiredEmptyObjectPostRequestBody  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\NullableRequiredEmptyObjectPostResponse
     */
    public function nullableRequiredEmptyObjectPost(
        \OpenAPI\OpenAPI\Models\Operations\NullableRequiredEmptyObjectPostRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\NullableRequiredEmptyObjectPostResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/nullableRequiredEmptyObject');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\NullableRequiredEmptyObjectPostResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\NullableRequiredEmptyObjectPostResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * nullableRequiredPropertyPost
     *
     * @param  \OpenAPI\OpenAPI\Models\Operations\NullableRequiredPropertyPostRequestBody  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\NullableRequiredPropertyPostResponse
     */
    public function nullableRequiredPropertyPost(
        \OpenAPI\OpenAPI\Models\Operations\NullableRequiredPropertyPostRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\NullableRequiredPropertyPostResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/nullableRequiredProperty');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\NullableRequiredPropertyPostResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\NullableRequiredPropertyPostResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * nullableRequiredSharedObjectPost
     *
     * @param  \OpenAPI\OpenAPI\Models\Operations\NullableRequiredSharedObjectPostRequestBody  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\NullableRequiredSharedObjectPostResponse
     */
    public function nullableRequiredSharedObjectPost(
        \OpenAPI\OpenAPI\Models\Operations\NullableRequiredSharedObjectPostRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\NullableRequiredSharedObjectPostResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/nullableRequiredSharedObject');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\NullableRequiredSharedObjectPostResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\NullableRequiredSharedObjectPostResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostApplicationJsonArray
     *
     * @param  array<\OpenAPI\OpenAPI\Models\Shared\SimpleObject>  $request
     * @param  string  $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayResponse
     */
    public function requestBodyPostApplicationJsonArray(
        array $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayResponse {
        $baseUrl = Utils\Utils::templateUrl(RequestBodies::REQUEST_BODY_POST_APPLICATION_JSON_ARRAY_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/requestbody#array');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SimpleObject>', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostApplicationJsonArrayCamelCase
     *
     * @param  array<\OpenAPI\OpenAPI\Models\Shared\SimpleObjectCamelCase>  $request
     * @param  string  $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayCamelCaseResponse
     */
    public function requestBodyPostApplicationJsonArrayCamelCase(
        array $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayCamelCaseResponse {
        $baseUrl = Utils\Utils::templateUrl(RequestBodies::REQUEST_BODY_POST_APPLICATION_JSON_ARRAY_CAMEL_CASE_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/requestbody#arrayCamelCase');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayCamelCaseResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SimpleObjectCamelCase>', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostApplicationJsonArrayObj
     *
     * @param  array<\OpenAPI\OpenAPI\Models\Shared\SimpleObject>  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayObjResponse
     */
    public function requestBodyPostApplicationJsonArrayObj(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayObjResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/application/json/array/objResponse');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayObjResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->arrObjValue = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ArrObjValue', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostApplicationJsonArrayObjCamelCase
     *
     * @param  array<\OpenAPI\OpenAPI\Models\Shared\SimpleObjectCamelCase>  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayObjCamelCaseResponse
     */
    public function requestBodyPostApplicationJsonArrayObjCamelCase(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayObjCamelCaseResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/application/json/array/objResponseCamelCase');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayObjCamelCaseResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->arrObjValueCamelCase = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ArrObjValueCamelCase', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostApplicationJsonArrayOfArray
     *
     * @param  array<array<\OpenAPI\OpenAPI\Models\Shared\SimpleObject>>  $request
     * @param  string  $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayOfArrayResponse
     */
    public function requestBodyPostApplicationJsonArrayOfArray(
        array $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayOfArrayResponse {
        $baseUrl = Utils\Utils::templateUrl(RequestBodies::REQUEST_BODY_POST_APPLICATION_JSON_ARRAY_OF_ARRAY_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/requestbody#arrayOfArrays');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayOfArrayResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'array<array<OpenAPI\OpenAPI\Models\Shared\SimpleObject>>', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostApplicationJsonArrayOfArrayCamelCase
     *
     * @param  array<array<\OpenAPI\OpenAPI\Models\Shared\SimpleObjectCamelCase>>  $request
     * @param  string  $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayOfArrayCamelCaseResponse
     */
    public function requestBodyPostApplicationJsonArrayOfArrayCamelCase(
        array $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayOfArrayCamelCaseResponse {
        $baseUrl = Utils\Utils::templateUrl(RequestBodies::REQUEST_BODY_POST_APPLICATION_JSON_ARRAY_OF_ARRAY_CAMEL_CASE_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/requestbody#arrayOfArraysCamelCase');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayOfArrayCamelCaseResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'array<array<OpenAPI\OpenAPI\Models\Shared\SimpleObjectCamelCase>>', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostApplicationJsonArrayOfArrayOfPrimitive
     *
     * @param  array<array<string>>  $request
     * @param  string  $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayOfArrayOfPrimitiveResponse
     */
    public function requestBodyPostApplicationJsonArrayOfArrayOfPrimitive(
        array $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayOfArrayOfPrimitiveResponse {
        $baseUrl = Utils\Utils::templateUrl(RequestBodies::REQUEST_BODY_POST_APPLICATION_JSON_ARRAY_OF_ARRAY_OF_PRIMITIVE_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/requestbody#arrayOfArraysOfPrimitives');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayOfArrayOfPrimitiveResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'array<array<string>>', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostApplicationJsonArrayOfMap
     *
     * @param  array<array<string, \OpenAPI\OpenAPI\Models\Shared\SimpleObject>>  $request
     * @param  string  $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayOfMapResponse
     */
    public function requestBodyPostApplicationJsonArrayOfMap(
        array $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayOfMapResponse {
        $baseUrl = Utils\Utils::templateUrl(RequestBodies::REQUEST_BODY_POST_APPLICATION_JSON_ARRAY_OF_MAP_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/requestbody#arrayOfMaps');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayOfMapResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'array<array<string, OpenAPI\OpenAPI\Models\Shared\SimpleObject>>', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostApplicationJsonArrayOfMapCamelCase
     *
     * @param  array<array<string, \OpenAPI\OpenAPI\Models\Shared\SimpleObjectCamelCase>>  $request
     * @param  string  $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayOfMapCamelCaseResponse
     */
    public function requestBodyPostApplicationJsonArrayOfMapCamelCase(
        array $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayOfMapCamelCaseResponse {
        $baseUrl = Utils\Utils::templateUrl(RequestBodies::REQUEST_BODY_POST_APPLICATION_JSON_ARRAY_OF_MAP_CAMEL_CASE_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/requestbody#arrayOfMapsCamelCase');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayOfMapCamelCaseResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'array<array<string, OpenAPI\OpenAPI\Models\Shared\SimpleObjectCamelCase>>', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostApplicationJsonArrayOfPrimitive
     *
     * @param  array<string>  $request
     * @param  string  $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayOfPrimitiveResponse
     */
    public function requestBodyPostApplicationJsonArrayOfPrimitive(
        array $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayOfPrimitiveResponse {
        $baseUrl = Utils\Utils::templateUrl(RequestBodies::REQUEST_BODY_POST_APPLICATION_JSON_ARRAY_OF_PRIMITIVE_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/requestbody#arrayOfPrimitives');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonArrayOfPrimitiveResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'array<string>', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostApplicationJsonDeep
     *
     * @param  \OpenAPI\OpenAPI\Models\Shared\DeepObject  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonDeepResponse
     */
    public function requestBodyPostApplicationJsonDeep(
        \OpenAPI\OpenAPI\Models\Shared\DeepObject $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonDeepResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/application/json/deep');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonDeepResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonDeepRes', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostApplicationJsonDeepCamelCase
     *
     * @param  \OpenAPI\OpenAPI\Models\Shared\DeepObjectCamelCase  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonDeepCamelCaseResponse
     */
    public function requestBodyPostApplicationJsonDeepCamelCase(
        \OpenAPI\OpenAPI\Models\Shared\DeepObjectCamelCase $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonDeepCamelCaseResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/application/json/deep/camelcase');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonDeepCamelCaseResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonDeepCamelCaseRes', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostApplicationJsonMap
     *
     * @param  array<string, \OpenAPI\OpenAPI\Models\Shared\SimpleObject>  $request
     * @param  string  $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapResponse
     */
    public function requestBodyPostApplicationJsonMap(
        array $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapResponse {
        $baseUrl = Utils\Utils::templateUrl(RequestBodies::REQUEST_BODY_POST_APPLICATION_JSON_MAP_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/requestbody#map');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'array<string, OpenAPI\OpenAPI\Models\Shared\SimpleObject>', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostApplicationJsonMapCamelCase
     *
     * @param  array<string, \OpenAPI\OpenAPI\Models\Shared\SimpleObjectCamelCase>  $request
     * @param  string  $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapCamelCaseResponse
     */
    public function requestBodyPostApplicationJsonMapCamelCase(
        array $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapCamelCaseResponse {
        $baseUrl = Utils\Utils::templateUrl(RequestBodies::REQUEST_BODY_POST_APPLICATION_JSON_MAP_CAMEL_CASE_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/requestbody#mapCamelCase');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapCamelCaseResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'array<string, OpenAPI\OpenAPI\Models\Shared\SimpleObjectCamelCase>', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostApplicationJsonMapObj
     *
     * @param  array<string, \OpenAPI\OpenAPI\Models\Shared\SimpleObject>  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapObjResponse
     */
    public function requestBodyPostApplicationJsonMapObj(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapObjResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/application/json/map/objResponse');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapObjResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mapObjValue = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MapObjValue', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostApplicationJsonMapObjCamelCase
     *
     * @param  array<string, \OpenAPI\OpenAPI\Models\Shared\SimpleObjectCamelCase>  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapObjCamelCaseResponse
     */
    public function requestBodyPostApplicationJsonMapObjCamelCase(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapObjCamelCaseResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/application/json/map/objResponseCamelCase');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapObjCamelCaseResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mapObjValueCamelCase = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MapObjValueCamelCase', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostApplicationJsonMapOfArray
     *
     * @param  array<string, array<\OpenAPI\OpenAPI\Models\Shared\SimpleObject>>  $request
     * @param  string  $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapOfArrayResponse
     */
    public function requestBodyPostApplicationJsonMapOfArray(
        array $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapOfArrayResponse {
        $baseUrl = Utils\Utils::templateUrl(RequestBodies::REQUEST_BODY_POST_APPLICATION_JSON_MAP_OF_ARRAY_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/requestbody#mapOfArrays');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapOfArrayResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'array<string, array<OpenAPI\OpenAPI\Models\Shared\SimpleObject>>', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostApplicationJsonMapOfArrayCamelCase
     *
     * @param  array<string, array<\OpenAPI\OpenAPI\Models\Shared\SimpleObjectCamelCase>>  $request
     * @param  string  $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapOfArrayCamelCaseResponse
     */
    public function requestBodyPostApplicationJsonMapOfArrayCamelCase(
        array $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapOfArrayCamelCaseResponse {
        $baseUrl = Utils\Utils::templateUrl(RequestBodies::REQUEST_BODY_POST_APPLICATION_JSON_MAP_OF_ARRAY_CAMEL_CASE_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/requestbody#mapOfArraysCamelCase');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapOfArrayCamelCaseResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'array<string, array<OpenAPI\OpenAPI\Models\Shared\SimpleObjectCamelCase>>', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostApplicationJsonMapOfMap
     *
     * @param  array<string, array<string, \OpenAPI\OpenAPI\Models\Shared\SimpleObject>>  $request
     * @param  string  $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapOfMapResponse
     */
    public function requestBodyPostApplicationJsonMapOfMap(
        array $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapOfMapResponse {
        $baseUrl = Utils\Utils::templateUrl(RequestBodies::REQUEST_BODY_POST_APPLICATION_JSON_MAP_OF_MAP_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/requestbody#mapOfMaps');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapOfMapResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'array<string, array<string, OpenAPI\OpenAPI\Models\Shared\SimpleObject>>', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostApplicationJsonMapOfMapCamelCase
     *
     * @param  array<string, array<string, \OpenAPI\OpenAPI\Models\Shared\SimpleObjectCamelCase>>  $request
     * @param  string  $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapOfMapCamelCaseResponse
     */
    public function requestBodyPostApplicationJsonMapOfMapCamelCase(
        array $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapOfMapCamelCaseResponse {
        $baseUrl = Utils\Utils::templateUrl(RequestBodies::REQUEST_BODY_POST_APPLICATION_JSON_MAP_OF_MAP_CAMEL_CASE_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/requestbody#mapOfMapsCamelCase');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapOfMapCamelCaseResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'array<string, array<string, OpenAPI\OpenAPI\Models\Shared\SimpleObjectCamelCase>>', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostApplicationJsonMapOfMapOfPrimitive
     *
     * @param  array<string, array<string, string>>  $request
     * @param  string  $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapOfMapOfPrimitiveResponse
     */
    public function requestBodyPostApplicationJsonMapOfMapOfPrimitive(
        array $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapOfMapOfPrimitiveResponse {
        $baseUrl = Utils\Utils::templateUrl(RequestBodies::REQUEST_BODY_POST_APPLICATION_JSON_MAP_OF_MAP_OF_PRIMITIVE_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/requestbody#mapOfMapsOfPrimitives');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapOfMapOfPrimitiveResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'array<string, array<string, string>>', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostApplicationJsonMapOfPrimitive
     *
     * @param  array<string, string>  $request
     * @param  string  $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapOfPrimitiveResponse
     */
    public function requestBodyPostApplicationJsonMapOfPrimitive(
        array $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapOfPrimitiveResponse {
        $baseUrl = Utils\Utils::templateUrl(RequestBodies::REQUEST_BODY_POST_APPLICATION_JSON_MAP_OF_PRIMITIVE_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/requestbody#mapOfPrimitives');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMapOfPrimitiveResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'array<string, string>', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostApplicationJsonMultipleJsonFiltered
     *
     * @param  \OpenAPI\OpenAPI\Models\Shared\SimpleObject  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMultipleJsonFilteredResponse
     */
    public function requestBodyPostApplicationJsonMultipleJsonFiltered(
        \OpenAPI\OpenAPI\Models\Shared\SimpleObject $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMultipleJsonFilteredResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/application/json/multiple/json/filtered');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMultipleJsonFilteredResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonMultipleJsonFilteredRes', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostApplicationJsonSimple
     *
     * @param  \OpenAPI\OpenAPI\Models\Shared\SimpleObject  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonSimpleResponse
     */
    public function requestBodyPostApplicationJsonSimple(
        \OpenAPI\OpenAPI\Models\Shared\SimpleObject $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonSimpleResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/application/json/simple');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonSimpleResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonSimpleRes', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostApplicationJsonSimpleCamelCase
     *
     * @param  \OpenAPI\OpenAPI\Models\Shared\SimpleObjectCamelCase  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonSimpleCamelCaseResponse
     */
    public function requestBodyPostApplicationJsonSimpleCamelCase(
        \OpenAPI\OpenAPI\Models\Shared\SimpleObjectCamelCase $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonSimpleCamelCaseResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/application/json/camelcase');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonSimpleCamelCaseResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostApplicationJsonSimpleCamelCaseRes', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostComplexNumberTypes
     *
     * @param  \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostComplexNumberTypesRequest  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostComplexNumberTypesResponse
     */
    public function requestBodyPostComplexNumberTypes(
        \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostComplexNumberTypesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostComplexNumberTypesResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/{pathBigInt}/{pathBigIntStr}/{pathDecimal}/{pathDecimalStr}/complex-number-types', \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostComplexNumberTypesRequest::class, $request, $this->sdkConfiguration->globals);
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'complexNumberTypes', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RequestBodyPostComplexNumberTypesRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostComplexNumberTypesResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostComplexNumberTypesResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostDefaultsAndConsts
     *
     * @param  \OpenAPI\OpenAPI\Models\Shared\DefaultsAndConsts  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostDefaultsAndConstsResponse
     */
    public function requestBodyPostDefaultsAndConsts(
        \OpenAPI\OpenAPI\Models\Shared\DefaultsAndConsts $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostDefaultsAndConstsResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/defaultsAndConsts');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostDefaultsAndConstsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostDefaultsAndConstsResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostEmptyObject
     *
     * @param  \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostEmptyObjectRequestBody  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostEmptyObjectResponse
     */
    public function requestBodyPostEmptyObject(
        \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostEmptyObjectRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostEmptyObjectResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/empty-object');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostEmptyObjectResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostEmptyObjectResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostFormDeep
     *
     * @param  \OpenAPI\OpenAPI\Models\Shared\DeepObject  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostFormDeepResponse
     */
    public function requestBodyPostFormDeep(
        \OpenAPI\OpenAPI\Models\Shared\DeepObject $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostFormDeepResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/form/deep');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'form');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostFormDeepResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostFormDeepRes', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostFormMapPrimitive
     *
     * @param  array<string, string>  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostFormMapPrimitiveResponse
     */
    public function requestBodyPostFormMapPrimitive(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostFormMapPrimitiveResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/form/map/primitive');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'form');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostFormMapPrimitiveResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostFormMapPrimitiveRes', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostFormSimple
     *
     * @param  \OpenAPI\OpenAPI\Models\Shared\SimpleObject  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostFormSimpleResponse
     */
    public function requestBodyPostFormSimple(
        \OpenAPI\OpenAPI\Models\Shared\SimpleObject $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostFormSimpleResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/form/simple');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'form');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostFormSimpleResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostFormSimpleRes', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostJsonDataTypesArrayBigInt
     *
     * @param  array<int>  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesArrayBigIntResponse
     */
    public function requestBodyPostJsonDataTypesArrayBigInt(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesArrayBigIntResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/jsonDataTypes/array/bigInt');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesArrayBigIntResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesArrayBigIntResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostJsonDataTypesArrayDate
     *
     * @param  array<\DateTime>  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesArrayDateResponse
     */
    public function requestBodyPostJsonDataTypesArrayDate(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesArrayDateResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/jsonDataTypes/array/date');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesArrayDateResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesArrayDateResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostJsonDataTypesArrayDecimalStr
     *
     * @param  array<string>  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesArrayDecimalStrResponse
     */
    public function requestBodyPostJsonDataTypesArrayDecimalStr(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesArrayDecimalStrResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/jsonDataTypes/array/decimalStr');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesArrayDecimalStrResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesArrayDecimalStrResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostJsonDataTypesBigInt
     *
     * @param  int  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesBigIntResponse
     */
    public function requestBodyPostJsonDataTypesBigInt(
        int $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesBigIntResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/jsonDataTypes/bigint');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesBigIntResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesBigIntResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostJsonDataTypesBigIntStr
     *
     * @param  string  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesBigIntStrResponse
     */
    public function requestBodyPostJsonDataTypesBigIntStr(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesBigIntStrResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/jsonDataTypes/bigintStr');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesBigIntStrResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesBigIntStrResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostJsonDataTypesBoolean
     *
     * @param  bool  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesBooleanResponse
     */
    public function requestBodyPostJsonDataTypesBoolean(
        bool $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesBooleanResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/jsonDataTypes/boolean');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesBooleanResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesBooleanResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostJsonDataTypesComplexNumberArrays
     *
     * @param  \OpenAPI\OpenAPI\Models\Shared\ComplexNumberArrays  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesComplexNumberArraysResponse
     */
    public function requestBodyPostJsonDataTypesComplexNumberArrays(
        \OpenAPI\OpenAPI\Models\Shared\ComplexNumberArrays $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesComplexNumberArraysResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/jsonDataTypes/complexNumberArrays');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesComplexNumberArraysResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesComplexNumberArraysRes', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostJsonDataTypesComplexNumberMaps
     *
     * @param  \OpenAPI\OpenAPI\Models\Shared\ComplexNumberMaps  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesComplexNumberMapsResponse
     */
    public function requestBodyPostJsonDataTypesComplexNumberMaps(
        \OpenAPI\OpenAPI\Models\Shared\ComplexNumberMaps $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesComplexNumberMapsResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/jsonDataTypes/complexNumberMaps');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesComplexNumberMapsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesComplexNumberMapsRes', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostJsonDataTypesDate
     *
     * @param  \DateTime  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesDateResponse
     */
    public function requestBodyPostJsonDataTypesDate(
        \DateTime $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesDateResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/jsonDataTypes/date');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesDateResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesDateResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostJsonDataTypesDateTime
     *
     * @param  \DateTime  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesDateTimeResponse
     */
    public function requestBodyPostJsonDataTypesDateTime(
        \DateTime $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesDateTimeResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/jsonDataTypes/dateTime');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesDateTimeResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesDateTimeResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostJsonDataTypesDecimal
     *
     * @param  float  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesDecimalResponse
     */
    public function requestBodyPostJsonDataTypesDecimal(
        float $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesDecimalResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/jsonDataTypes/decimal');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesDecimalResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesDecimalResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostJsonDataTypesDecimalStr
     *
     * @param  string  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesDecimalStrResponse
     */
    public function requestBodyPostJsonDataTypesDecimalStr(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesDecimalStrResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/jsonDataTypes/decimalStr');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesDecimalStrResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesDecimalStrResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostJsonDataTypesFloat32
     *
     * @param  float  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesFloat32Response
     */
    public function requestBodyPostJsonDataTypesFloat32(
        float $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesFloat32Response {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/jsonDataTypes/float32');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesFloat32Response();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesFloat32ResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostJsonDataTypesInt32
     *
     * @param  int  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesInt32Response
     */
    public function requestBodyPostJsonDataTypesInt32(
        int $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesInt32Response {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/jsonDataTypes/int32');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesInt32Response();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesInt32ResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostJsonDataTypesInteger
     *
     * @param  int  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesIntegerResponse
     */
    public function requestBodyPostJsonDataTypesInteger(
        int $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesIntegerResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/jsonDataTypes/integer');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesIntegerResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesIntegerResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostJsonDataTypesMapBigIntStr
     *
     * @param  array<string, string>  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesMapBigIntStrResponse
     */
    public function requestBodyPostJsonDataTypesMapBigIntStr(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesMapBigIntStrResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/jsonDataTypes/map/bigIntStr');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesMapBigIntStrResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesMapBigIntStrResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostJsonDataTypesMapDateTime
     *
     * @param  array<string, \DateTime>  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesMapDateTimeResponse
     */
    public function requestBodyPostJsonDataTypesMapDateTime(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesMapDateTimeResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/jsonDataTypes/map/dateTime');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesMapDateTimeResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesMapDateTimeResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostJsonDataTypesMapDecimal
     *
     * @param  array<string, float>  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesMapDecimalResponse
     */
    public function requestBodyPostJsonDataTypesMapDecimal(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesMapDecimalResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/jsonDataTypes/map/decimal');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesMapDecimalResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesMapDecimalResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostJsonDataTypesNumber
     *
     * @param  float  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesNumberResponse
     */
    public function requestBodyPostJsonDataTypesNumber(
        float $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesNumberResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/jsonDataTypes/number');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesNumberResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesNumberResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostJsonDataTypesString
     *
     * @param  string  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesStringResponse
     */
    public function requestBodyPostJsonDataTypesString(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesStringResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/jsonDataTypes/string');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesStringResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostJsonDataTypesStringResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostMultipleContentTypesComponentFiltered
     *
     * @param  \OpenAPI\OpenAPI\Models\Shared\SimpleObject  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesComponentFilteredResponse
     */
    public function requestBodyPostMultipleContentTypesComponentFiltered(
        \OpenAPI\OpenAPI\Models\Shared\SimpleObject $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesComponentFilteredResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/multiple/contentTypes/component/filtered');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesComponentFilteredResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesComponentFilteredRes', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostMultipleContentTypesInlineFiltered
     *
     * @param  \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesInlineFilteredRequestBody  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesInlineFilteredResponse
     */
    public function requestBodyPostMultipleContentTypesInlineFiltered(
        \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesInlineFilteredRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesInlineFilteredResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/multiple/contentTypes/inline/filtered');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesInlineFilteredResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesInlineFilteredRes', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostMultipleContentTypesSplitParamForm
     *
     * @param  \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitParamFormRequestBody  $requestBody
     * @param  string  $paramStr
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitParamFormResponse
     */
    public function requestBodyPostMultipleContentTypesSplitParamForm(
        \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitParamFormRequestBody $requestBody,
        string $paramStr,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitParamFormResponse {
        $request = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitParamFormRequest();
        $request->requestBody = $requestBody;
        $request->paramStr = $paramStr;
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/multiple/contentTypes/split/param');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'form');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitParamFormRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitParamFormResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitParamFormRes', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostMultipleContentTypesSplitParamJson
     *
     * @param  \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody  $requestBody
     * @param  string  $paramStr
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitParamJsonResponse
     */
    public function requestBodyPostMultipleContentTypesSplitParamJson(
        \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody $requestBody,
        string $paramStr,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitParamJsonResponse {
        $request = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitParamJsonRequest();
        $request->requestBody = $requestBody;
        $request->paramStr = $paramStr;
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/multiple/contentTypes/split/param');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitParamJsonRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitParamJsonResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitParamJsonRes', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostMultipleContentTypesSplitParamMultipart
     *
     * @param  \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody  $requestBody
     * @param  string  $paramStr
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitParamMultipartResponse
     */
    public function requestBodyPostMultipleContentTypesSplitParamMultipart(
        \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody $requestBody,
        string $paramStr,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitParamMultipartResponse {
        $request = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitParamMultipartRequest();
        $request->requestBody = $requestBody;
        $request->paramStr = $paramStr;
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/multiple/contentTypes/split/param');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'multipart');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitParamMultipartRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitParamMultipartResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitParamMultipartRes', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostMultipleContentTypesSplitForm
     *
     * @param  \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitFormRequestBody  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitFormResponse
     */
    public function requestBodyPostMultipleContentTypesSplitForm(
        \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitFormRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitFormResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/multiple/contentTypes/split');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'form');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitFormResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitFormRes', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostMultipleContentTypesSplitJson
     *
     * @param  \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitJsonRequestBody  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitJsonResponse
     */
    public function requestBodyPostMultipleContentTypesSplitJson(
        \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitJsonRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitJsonResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/multiple/contentTypes/split');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitJsonResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitJsonRes', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostMultipleContentTypesSplitMultipart
     *
     * @param  \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitMultipartRequestBody  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitMultipartResponse
     */
    public function requestBodyPostMultipleContentTypesSplitMultipart(
        \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitMultipartRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitMultipartResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/multiple/contentTypes/split');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'multipart');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitMultipartResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostMultipleContentTypesSplitMultipartRes', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostNotNullableNotRequiredStringBody
     *
     * @param  string  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostNotNullableNotRequiredStringBodyResponse
     */
    public function requestBodyPostNotNullableNotRequiredStringBody(
        ?string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostNotNullableNotRequiredStringBodyResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/notnullable/notrequired/string');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostNotNullableNotRequiredStringBodyResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostNotNullableNotRequiredStringBodyResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostNullArray
     *
     * @param  array<string>  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostNullArrayResponse
     */
    public function requestBodyPostNullArray(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostNullArrayResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/null-array');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostNullArrayResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostNullArrayResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostNullDictionary
     *
     * @param  array<string, string>  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostNullDictionaryResponse
     */
    public function requestBodyPostNullDictionary(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostNullDictionaryResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/null-dictionary');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostNullDictionaryResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostNullDictionaryResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostNullableNotRequiredStringBody
     *
     * @param  string  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostNullableNotRequiredStringBodyResponse
     */
    public function requestBodyPostNullableNotRequiredStringBody(
        ?string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostNullableNotRequiredStringBodyResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/nullable/notrequired/string');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostNullableNotRequiredStringBodyResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostNullableNotRequiredStringBodyResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPostNullableRequiredStringBody
     *
     * @param  string  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostNullableRequiredStringBodyResponse
     */
    public function requestBodyPostNullableRequiredStringBody(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostNullableRequiredStringBodyResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/post/nullable/required/string');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPostNullableRequiredStringBodyResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPostNullableRequiredStringBodyResponseBody', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPutBytes
     *
     * @param  string  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutBytesResponse
     */
    public function requestBodyPutBytes(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutBytesResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/put/bytes');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'raw');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('PUT', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutBytesResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPutBytesRes', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPutBytesWithParams
     *
     * @param  string  $requestBody
     * @param  string  $queryStringParam
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutBytesWithParamsResponse
     */
    public function requestBodyPutBytesWithParams(
        string $requestBody,
        string $queryStringParam,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutBytesWithParamsResponse {
        $request = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutBytesWithParamsRequest();
        $request->requestBody = $requestBody;
        $request->queryStringParam = $queryStringParam;
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/put/bytesWithParams');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'raw');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RequestBodyPutBytesWithParamsRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('PUT', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutBytesWithParamsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPutBytesWithParamsRes', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPutMultipartDeep
     *
     * @param  \OpenAPI\OpenAPI\Models\Shared\DeepObject  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutMultipartDeepResponse
     */
    public function requestBodyPutMultipartDeep(
        \OpenAPI\OpenAPI\Models\Shared\DeepObject $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutMultipartDeepResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/put/multipart/deep');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'multipart');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('PUT', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutMultipartDeepResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPutMultipartDeepRes', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPutMultipartDifferentFileName
     *
     * @param  \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutMultipartDifferentFileNameRequestBody  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutMultipartDifferentFileNameResponse
     */
    public function requestBodyPutMultipartDifferentFileName(
        \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutMultipartDifferentFileNameRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutMultipartDifferentFileNameResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/put/multipart/differentFileName');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'multipart');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('PUT', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutMultipartDifferentFileNameResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPutMultipartDifferentFileNameRes', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPutMultipartFile
     *
     * @param  \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutMultipartFileRequestBody  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutMultipartFileResponse
     */
    public function requestBodyPutMultipartFile(
        \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutMultipartFileRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutMultipartFileResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/put/multipart/file');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'multipart');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('PUT', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutMultipartFileResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPutMultipartFileRes', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPutMultipartOptionalRequestBody
     *
     * @param  \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutMultipartOptionalRequestBodyRequestBody  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutMultipartOptionalRequestBodyResponse
     */
    public function requestBodyPutMultipartOptionalRequestBody(
        ?\OpenAPI\OpenAPI\Models\Operations\RequestBodyPutMultipartOptionalRequestBodyRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutMultipartOptionalRequestBodyResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/put/multipart/optionalRequestBody');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'multipart');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('PUT', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutMultipartOptionalRequestBodyResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPutMultipartOptionalRequestBodyRes', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPutMultipartSimple
     *
     * @param  \OpenAPI\OpenAPI\Models\Shared\SimpleObject  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutMultipartSimpleResponse
     */
    public function requestBodyPutMultipartSimple(
        \OpenAPI\OpenAPI\Models\Shared\SimpleObject $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutMultipartSimpleResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/put/multipart/simple');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'multipart');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('PUT', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutMultipartSimpleResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPutMultipartSimpleRes', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPutString
     *
     * @param  string  $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutStringResponse
     */
    public function requestBodyPutString(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutStringResponse {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/put/string');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'string');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('PUT', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutStringResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPutStringRes', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyPutStringWithParams
     *
     * @param  string  $requestBody
     * @param  string  $queryStringParam
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutStringWithParamsResponse
     */
    public function requestBodyPutStringWithParams(
        string $requestBody,
        string $queryStringParam,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutStringWithParamsResponse {
        $request = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutStringWithParamsRequest();
        $request->requestBody = $requestBody;
        $request->queryStringParam = $queryStringParam;
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/requestBodies/put/stringWithParams');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'string');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RequestBodyPutStringWithParamsRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('PUT', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyPutStringWithParamsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->res = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RequestBodyPutStringWithParamsRes', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyReadAndWrite
     *
     * @param  \OpenAPI\OpenAPI\Models\Shared\ReadWriteObject  $request
     * @param  string  $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyReadAndWriteResponse
     */
    public function requestBodyReadAndWrite(
        \OpenAPI\OpenAPI\Models\Shared\ReadWriteObject $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyReadAndWriteResponse {
        $baseUrl = Utils\Utils::templateUrl(RequestBodies::REQUEST_BODY_READ_AND_WRITE_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/readonlyandwriteonly');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyReadAndWriteResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->readWriteObject = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReadWriteObjectOutput', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyReadOnlyInput
     *
     * @param  \OpenAPI\OpenAPI\Models\Shared\ReadOnlyObjectInput  $request
     * @param  string  $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyReadOnlyInputResponse
     */
    public function requestBodyReadOnlyInput(
        \OpenAPI\OpenAPI\Models\Shared\ReadOnlyObjectInput $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyReadOnlyInputResponse {
        $baseUrl = Utils\Utils::templateUrl(RequestBodies::REQUEST_BODY_READ_ONLY_INPUT_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/readonlyorwriteonly#readOnlyInput');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyReadOnlyInputResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->readOnlyObject = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReadOnlyObject', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyReadOnlyUnion
     *
     * @param  mixed  $request
     * @param  string  $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyReadOnlyUnionResponse
     */
    public function requestBodyReadOnlyUnion(
        mixed $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyReadOnlyUnionResponse {
        $baseUrl = Utils\Utils::templateUrl(RequestBodies::REQUEST_BODY_READ_ONLY_UNION_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/readonlyorwriteonly#readOnlyUnion');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyReadOnlyUnionResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->weaklyTypedOneOfReadOnlyObject = $serializer->deserialize((string) $httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyReadWriteOnlyUnion
     *
     * @param  mixed  $request
     * @param  string  $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyReadWriteOnlyUnionResponse
     */
    public function requestBodyReadWriteOnlyUnion(
        mixed $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyReadWriteOnlyUnionResponse {
        $baseUrl = Utils\Utils::templateUrl(RequestBodies::REQUEST_BODY_READ_WRITE_ONLY_UNION_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/readonlyandwriteonly#readWriteOnlyUnion');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyReadWriteOnlyUnionResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->weaklyTypedOneOfReadWriteObject = $serializer->deserialize((string) $httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyWriteOnly
     *
     * @param  \OpenAPI\OpenAPI\Models\Shared\WriteOnlyObject  $request
     * @param  string  $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyWriteOnlyResponse
     */
    public function requestBodyWriteOnly(
        \OpenAPI\OpenAPI\Models\Shared\WriteOnlyObject $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyWriteOnlyResponse {
        $baseUrl = Utils\Utils::templateUrl(RequestBodies::REQUEST_BODY_WRITE_ONLY_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/readonlyorwriteonly#writeOnly');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyWriteOnlyResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->readOnlyObject = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReadOnlyObject', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyWriteOnlyOutput
     *
     * @param  \OpenAPI\OpenAPI\Models\Shared\WriteOnlyObject  $request
     * @param  string  $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyWriteOnlyOutputResponse
     */
    public function requestBodyWriteOnlyOutput(
        \OpenAPI\OpenAPI\Models\Shared\WriteOnlyObject $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyWriteOnlyOutputResponse {
        $baseUrl = Utils\Utils::templateUrl(RequestBodies::REQUEST_BODY_WRITE_ONLY_OUTPUT_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/writeonlyoutput#writeOnlyOutput');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyWriteOnlyOutputResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->writeOnlyObject = $serializer->deserialize((string) $httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\WriteOnlyObjectOutput', 'json');
            }
        }

        return $response;
    }

    /**
     * requestBodyWriteOnlyUnion
     *
     * @param  mixed  $request
     * @param  string  $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestBodyWriteOnlyUnionResponse
     */
    public function requestBodyWriteOnlyUnion(
        mixed $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestBodyWriteOnlyUnionResponse {
        $baseUrl = Utils\Utils::templateUrl(RequestBodies::REQUEST_BODY_WRITE_ONLY_UNION_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/writeonlyoutput#writeOnlyUnion');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestBodyWriteOnlyUnionResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->weaklyTypedOneOfWriteOnlyObject = $serializer->deserialize((string) $httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
}