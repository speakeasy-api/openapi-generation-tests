<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ResponseBodies 
{
	
	public const RESPONSE_BODY_OPTIONAL_GET_SERVERS = [
		'http://localhost:35456',
	];
	
	public const RESPONSE_BODY_READ_ONLY_SERVERS = [
		'http://localhost:35456',
	];

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * responseBodyAdditionalPropertiesComplexNumbersPost
     * 
     * @param array<string, string> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ResponseBodyAdditionalPropertiesComplexNumbersPostResponse
     */
	public function responseBodyAdditionalPropertiesComplexNumbersPost(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ResponseBodyAdditionalPropertiesComplexNumbersPostResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/responseBodies/additionalPropertiesComplexNumbers');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResponseBodyAdditionalPropertiesComplexNumbersPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseBodyAdditionalPropertiesComplexNumbersPost200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ResponseBodyAdditionalPropertiesComplexNumbersPost200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * responseBodyAdditionalPropertiesDatePost
     * 
     * @param array<string, \DateTime> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ResponseBodyAdditionalPropertiesDatePostResponse
     */
	public function responseBodyAdditionalPropertiesDatePost(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ResponseBodyAdditionalPropertiesDatePostResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/responseBodies/additionalPropertiesDate');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResponseBodyAdditionalPropertiesDatePostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseBodyAdditionalPropertiesDatePost200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ResponseBodyAdditionalPropertiesDatePost200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * responseBodyAdditionalPropertiesObjectPost
     * 
     * @param array<string, \OpenAPI\OpenAPI\Models\Shared\SimpleObject> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ResponseBodyAdditionalPropertiesObjectPostResponse
     */
	public function responseBodyAdditionalPropertiesObjectPost(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ResponseBodyAdditionalPropertiesObjectPostResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/responseBodies/additionalPropertiesObject');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResponseBodyAdditionalPropertiesObjectPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseBodyAdditionalPropertiesObjectPost200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ResponseBodyAdditionalPropertiesObjectPost200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * responseBodyAdditionalPropertiesPost
     * 
     * @param array<string, string> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ResponseBodyAdditionalPropertiesPostResponse
     */
	public function responseBodyAdditionalPropertiesPost(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ResponseBodyAdditionalPropertiesPostResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/responseBodies/additionalProperties');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResponseBodyAdditionalPropertiesPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseBodyAdditionalPropertiesPost200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ResponseBodyAdditionalPropertiesPost200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * responseBodyBytesGet
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ResponseBodyBytesGetResponse
     */
	public function responseBodyBytesGet(
    ): \OpenAPI\OpenAPI\Models\Operations\ResponseBodyBytesGetResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/bytes/100');
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/octet-stream';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResponseBodyBytesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/octet-stream')) {
                $response->bytes = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * responseBodyEmptyWithHeaders
     * 
     * @param float $xNumberHeader
     * @param string $xStringHeader
     * @return \OpenAPI\OpenAPI\Models\Operations\ResponseBodyEmptyWithHeadersResponse
     */
	public function responseBodyEmptyWithHeaders(
        float $xNumberHeader,
        string $xStringHeader,
    ): \OpenAPI\OpenAPI\Models\Operations\ResponseBodyEmptyWithHeadersResponse
    {
        $request = new \OpenAPI\OpenAPI\Models\Operations\ResponseBodyEmptyWithHeadersRequest();
        $request->xNumberHeader = $xNumberHeader;
        $request->xStringHeader = $xStringHeader;
        
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/response-headers');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ResponseBodyEmptyWithHeadersRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = '*/*';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResponseBodyEmptyWithHeadersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * responseBodyOptionalGet
     * 
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ResponseBodyOptionalGetResponse
     */
	public function responseBodyOptionalGet(
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ResponseBodyOptionalGetResponse
    {
        $baseUrl = Utils\Utils::templateUrl(ResponseBodies::RESPONSE_BODY_OPTIONAL_GET_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/optional');
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json;q=1, text/plain;q=0';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResponseBodyOptionalGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->typedObject1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TypedObject1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->responseBodyOptionalGet200TextPlainString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * responseBodyReadOnly
     * 
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ResponseBodyReadOnlyResponse
     */
	public function responseBodyReadOnly(
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ResponseBodyReadOnlyResponse
    {
        $baseUrl = Utils\Utils::templateUrl(ResponseBodies::RESPONSE_BODY_READ_ONLY_SERVERS[0], array(
        ));
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/readonlyorwriteonly#readOnly');
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResponseBodyReadOnlyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->readOnlyObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReadOnlyObject', 'json');
            }
        }

        return $response;
    }
	
    /**
     * responseBodyStringGet
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ResponseBodyStringGetResponse
     */
	public function responseBodyStringGet(
    ): \OpenAPI\OpenAPI\Models\Operations\ResponseBodyStringGetResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/html');
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'text/html';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResponseBodyStringGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->html = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * responseBodyXmlGet
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ResponseBodyXmlGetResponse
     */
	public function responseBodyXmlGet(
    ): \OpenAPI\OpenAPI\Models\Operations\ResponseBodyXmlGetResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/xml');
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/xml';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResponseBodyXmlGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->xml = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * responseBodyZeroValueComplexTypePtrsPost
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ObjWithZeroValueComplexTypePtrs $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ResponseBodyZeroValueComplexTypePtrsPostResponse
     */
	public function responseBodyZeroValueComplexTypePtrsPost(
        \OpenAPI\OpenAPI\Models\Shared\ObjWithZeroValueComplexTypePtrs $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ResponseBodyZeroValueComplexTypePtrsPostResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/responseBodies/zeroValueComplexTypePtrs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResponseBodyZeroValueComplexTypePtrsPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseBodyZeroValueComplexTypePtrsPost200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ResponseBodyZeroValueComplexTypePtrsPost200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}