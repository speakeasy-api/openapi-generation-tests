<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

use JMS\Serializer\DeserializationContext;
use OpenAPI\OpenAPI\Models\Operations;

class Retries
{
    public const RETRIES_AFTER_SERVERS = [

        'http://localhost:35456',
    ];
    public const RETRIES_CONNECT_ERROR_GET_SERVERS = [

        'http://localhost:33333',
    ];
    public const RETRIES_FLAT_EMPTY_RESPONSE_POST_SERVERS = [

        'http://localhost:35456',
    ];
    public const RETRIES_GET_SERVERS = [

        'http://localhost:35456',
    ];
    public const RETRIES_POST_SERVERS = [

        'http://localhost:35456',
    ];
    private SDKConfiguration $sdkConfiguration;
    /**
     * @param  SDKConfiguration  $sdkConfig
     */
    public function __construct(SDKConfiguration $sdkConfig)
    {
        $this->sdkConfiguration = $sdkConfig;
    }

    /**
     * retriesAfter
     *
     * @param  string  $requestId
     * @param  ?int  $numRetries
     * @param  ?int  $retryAfterVal
     * @param  string  $serverURL
     * @return Operations\RetriesAfterResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function retriesAfter(
        string $requestId,
        ?int $numRetries = null,
        ?int $retryAfterVal = null,
        ?string $serverURL = null,
    ): Operations\RetriesAfterResponse {
        $request = new Operations\RetriesAfterRequest(
            requestId: $requestId,
            numRetries: $numRetries,
            retryAfterVal: $retryAfterVal,
        );
        $baseUrl = Utils\Utils::templateUrl(Retries::RETRIES_AFTER_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/retries/after');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(Operations\RetriesAfterRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\RetriesAfterRetries', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\RetriesAfterResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    retries: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * A request to a non-valid port to test connection errors
     *
     * @param  string  $serverURL
     * @return Operations\RetriesConnectErrorGetResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function retriesConnectErrorGet(
        ?string $serverURL = null,
    ): Operations\RetriesConnectErrorGetResponse {
        $baseUrl = Utils\Utils::templateUrl(Retries::RETRIES_CONNECT_ERROR_GET_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/retriesConnectError');
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\RetriesConnectErrorGetRetries', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\RetriesConnectErrorGetResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    retries: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * retriesFlatEmptyResponsePost
     *
     * @param  string  $requestId
     * @param  ?Operations\RetriesFlatEmptyResponsePostRequestBody  $requestBody
     * @param  ?int  $numRetries
     * @param  string  $serverURL
     * @return Operations\RetriesFlatEmptyResponsePostResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function retriesFlatEmptyResponsePost(
        string $requestId,
        ?Operations\RetriesFlatEmptyResponsePostRequestBody $requestBody = null,
        ?int $numRetries = null,
        ?string $serverURL = null,
    ): Operations\RetriesFlatEmptyResponsePostResponse {
        $request = new Operations\RetriesFlatEmptyResponsePostRequest(
            requestId: $requestId,
            requestBody: $requestBody,
            numRetries: $numRetries,
        );
        $baseUrl = Utils\Utils::templateUrl(Retries::RETRIES_FLAT_EMPTY_RESPONSE_POST_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/retriesFlatEmptyResponse');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(Operations\RetriesFlatEmptyResponsePostRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = '*/*';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('POST', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            return new Operations\RetriesFlatEmptyResponsePostResponse(
                statusCode: $statusCode,
                contentType: $contentType,
                rawResponse: $httpResponse
            );
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * retriesGet
     *
     * @param  string  $requestId
     * @param  ?int  $numRetries
     * @param  string  $serverURL
     * @return Operations\RetriesGetResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function retriesGet(
        string $requestId,
        ?int $numRetries = null,
        ?string $serverURL = null,
    ): Operations\RetriesGetResponse {
        $request = new Operations\RetriesGetRequest(
            requestId: $requestId,
            numRetries: $numRetries,
        );
        $baseUrl = Utils\Utils::templateUrl(Retries::RETRIES_GET_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/retries');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(Operations\RetriesGetRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\RetriesGetRetries', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\RetriesGetResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    retries: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * retriesPost
     *
     * @param  string  $requestId
     * @param  ?Operations\RetriesPostRequestBody  $requestBody
     * @param  ?int  $numRetries
     * @param  string  $serverURL
     * @return Operations\RetriesPostResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function retriesPost(
        string $requestId,
        ?Operations\RetriesPostRequestBody $requestBody = null,
        ?int $numRetries = null,
        ?string $serverURL = null,
    ): Operations\RetriesPostResponse {
        $request = new Operations\RetriesPostRequest(
            requestId: $requestId,
            requestBody: $requestBody,
            numRetries: $numRetries,
        );
        $baseUrl = Utils\Utils::templateUrl(Retries::RETRIES_POST_SERVERS[0], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/retries');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(Operations\RetriesPostRequest::class, $request, $this->sdkConfiguration->globals));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('POST', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\OpenAPI\OpenAPI\Models\Operations\RetriesPostRetries', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\RetriesPostResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    retries: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

}