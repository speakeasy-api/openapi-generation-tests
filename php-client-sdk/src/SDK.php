<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

use OpenAPI\OpenAPI\Hooks\HookContext;
use OpenAPI\OpenAPI\Models\Operations;
use OpenAPI\OpenAPI\Models\Shared;
use OpenAPI\OpenAPI\Utils\Options;
use Speakeasy\Serializer\DeserializationContext;

/**
 * SDK - Speakeasy's Uber Test Spec: Contains a wide array of different operation types and schema to try and cover enough ground to ensure good coverage of our support of OpenAPI
 *
 * Some test description.
 * About our test document.
 * https://speakeasy.com/docs - Speakeasy Docs
 *
 * @see https://speakeasy.com/docs
 */
class SDK
{
    public const SERVERS = [
        /** The default server. */
        'http://localhost:35123',
        /** A server url to a non-existent server. */
        'http://broken',
        /** A server url with templated variables. */
        'http://{hostname}:{port}',
        /** A server url with templated variables. */
        'http://localhost:35123/anything/{something}',
        /** A server url with templated variables (including the protocol). */
        '{protocol}://{hostname}:{port}',
    ];

    /**
     * Endpoints for purely testing valid generation behavior.
     *
     * @var Generation $$generation
     */
    public Generation $generation;

    /**
     * Endpoints for testing union types.
     *
     * @var Unions $$unions
     */
    public Unions $unions;

    /**
     * Endpoints for testing error responses.
     *
     * @var Errors $$errors
     */
    public Errors $errors;

    /**
     * Endpoints for testing custom HTTP clients
     *
     * @var CustomClient $$customClient
     */
    public CustomClient $customClient;

    /**
     * Endpoints for testing response bodies.
     *
     * @var ResponseBodies $$responseBodies
     */
    public ResponseBodies $responseBodies;

    /**
     * Endpoints for testing flattening through request body and parameter combinations.
     *
     * @var Flattening $$flattening
     */
    public Flattening $flattening;

    /**
     * Endpoints for testing global parameters.
     *
     * @var Globals $$globals
     */
    public Globals $globals;

    /**
     * Endpoints for testing parameters.
     *
     * @var Parameters $$parameters
     */
    public Parameters $parameters;

    /**
     * Endpoints for testing hooks
     *
     * @var HooksT $$hooks
     */
    public HooksT $hooks;

    /**
     * Endpoints for testing request bodies.
     *
     * @var RequestBodies $$requestBodies
     */
    public RequestBodies $requestBodies;

    public Nest $nest;

    public Nested $nested;

    /**
     * Endpoints for testing authentication.
     *
     * @var Auth $$auth
     */
    public Auth $auth;

    /**
     * Endpoints for testing open/closed enums
     *
     * @var OpenEnums $$openEnums
     */
    public OpenEnums $openEnums;

    /**
     * Endpoints for testing servers.
     *
     * @var Servers $$servers
     */
    public Servers $servers;

    /**
     * Endpoints for testing telemetry.
     *
     * @var Telemetry $$telemetry
     */
    public Telemetry $telemetry;

    /**
     * Endpoints for testing authentication.
     *
     * @var AuthNew $$authNew
     */
    public AuthNew $authNew;

    public Resource $resource;

    /**
     * Testing for documentation extensions and tooling.
     *
     * @var Documentation $$documentation
     */
    public Documentation $documentation;

    public First $first;

    public Second $second;

    /**
     * Endpoints for testing HTTP methods.
     *
     * @var Methods $$methods
     */
    public Methods $methods;

    /**
     * Endpoints for testing the pagination extension
     *
     * @var Pagination $$pagination
     */
    public Pagination $pagination;

    /**
     * Endpoints for testing retries.
     *
     * @var Retries $$retries
     */
    public Retries $retries;

    /**
     * Endpoints for testing HTTP status codes, especially OAS-defined XX and default.
     *
     * @var StatusCode $$statusCode
     */
    public StatusCode $statusCode;

    /**
     * Returns a new instance of the SDK builder used to configure and create the SDK instance.
     *
     * @return SDKBuilder
     */
    public static function builder(): SDKBuilder
    {
        return new SDKBuilder();
    }

    /**
     * @param  SDKConfiguration  $sdkConfiguration
     */
    public function __construct(
        public SDKConfiguration $sdkConfiguration,
    ) {
        $this->generation = new Generation($this->sdkConfiguration);
        $this->unions = new Unions($this->sdkConfiguration);
        $this->errors = new Errors($this->sdkConfiguration);
        $this->customClient = new CustomClient($this->sdkConfiguration);
        $this->responseBodies = new ResponseBodies($this->sdkConfiguration);
        $this->flattening = new Flattening($this->sdkConfiguration);
        $this->globals = new Globals($this->sdkConfiguration);
        $this->parameters = new Parameters($this->sdkConfiguration);
        $this->hooks = new HooksT($this->sdkConfiguration);
        $this->requestBodies = new RequestBodies($this->sdkConfiguration);
        $this->nest = new Nest($this->sdkConfiguration);
        $this->nested = new Nested($this->sdkConfiguration);
        $this->auth = new Auth($this->sdkConfiguration);
        $this->openEnums = new OpenEnums($this->sdkConfiguration);
        $this->servers = new Servers($this->sdkConfiguration);
        $this->telemetry = new Telemetry($this->sdkConfiguration);
        $this->authNew = new AuthNew($this->sdkConfiguration);
        $this->resource = new Resource($this->sdkConfiguration);
        $this->documentation = new Documentation($this->sdkConfiguration);
        $this->first = new First($this->sdkConfiguration);
        $this->second = new Second($this->sdkConfiguration);
        $this->methods = new Methods($this->sdkConfiguration);
        $this->pagination = new Pagination($this->sdkConfiguration);
        $this->retries = new Retries($this->sdkConfiguration);
        $this->statusCode = new StatusCode($this->sdkConfiguration);
        $this->sdkConfiguration->client = $this->sdkConfiguration->initHooks($this->sdkConfiguration->client);

    }

    /**
     * Tests conflict with C# System namespace
     *
     * @param  Operations\Console  $console
     * @return Operations\AmbiguousQueryParamResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function ambiguousQueryParam(Operations\Console $console, ?Options $options = null): Operations\AmbiguousQueryParamResponse
    {
        $request = new Operations\AmbiguousQueryParamRequest(
            console: $console,
        );
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/queryParams/namespaceConflict');
        $urlOverride = null;
        $httpOptions = ['http_errors' => false];

        $qp = Utils\Utils::getQueryParams(Operations\AmbiguousQueryParamRequest::class, $request, $urlOverride, $this->sdkConfiguration->globals);
        $httpOptions['headers']['Accept'] = '*/*';
        $httpOptions['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);
        $hookContext = new HookContext('ambiguousQueryParam', null, $this->sdkConfiguration->securitySource);
        $httpRequest = $this->sdkConfiguration->hooks->beforeRequest(new Hooks\BeforeRequestContext($hookContext), $httpRequest);
        $httpOptions['query'] = Utils\QueryParameters::standardizeQueryParams($httpRequest, $qp);
        $httpOptions = Utils\Utils::convertHeadersToOptions($httpRequest, $httpOptions);
        $httpRequest = Utils\Utils::removeHeaders($httpRequest);
        try {
            $httpResponse = $this->sdkConfiguration->client->send($httpRequest, $httpOptions);
        } catch (\GuzzleHttp\Exception\GuzzleException $error) {
            $res = $this->sdkConfiguration->hooks->afterError(new Hooks\AfterErrorContext($hookContext), null, $error);
            $httpResponse = $res;
        }
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            $res = $this->sdkConfiguration->hooks->afterError(new Hooks\AfterErrorContext($hookContext), $httpResponse, null);
            $httpResponse = $res;
        }
        if ($statusCode == 200) {
            $httpResponse = $this->sdkConfiguration->hooks->afterSuccess(new Hooks\AfterSuccessContext($hookContext), $httpResponse);

            return new Operations\AmbiguousQueryParamResponse(
                statusCode: $statusCode,
                contentType: $contentType,
                rawResponse: $httpResponse
            );
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * authenticatedRequest
     *
     * @param  Operations\AuthenticatedRequestSecurity  $security
     * @param  ?Operations\AuthenticatedRequestRequestBody  $request
     * @return Operations\AuthenticatedRequestResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function authenticatedRequest(Operations\AuthenticatedRequestSecurity $security, ?Operations\AuthenticatedRequestRequestBody $request = null, ?Options $options = null): Operations\AuthenticatedRequestResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/clientcredentials/authenticatedrequest');
        $urlOverride = null;
        $httpOptions = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body !== null) {
            $httpOptions = array_merge_recursive($httpOptions, $body);
        }
        $httpOptions['headers']['Accept'] = '*/*';
        $httpOptions['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('POST', $url);
        if ($security != null) {
            $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->client, $security);
        } else {
            $client = $this->sdkConfiguration->client;
        }

        $hookContext = new HookContext('authenticatedRequest', null, fn () => $security);
        $httpRequest = $this->sdkConfiguration->hooks->beforeRequest(new Hooks\BeforeRequestContext($hookContext), $httpRequest);
        $httpOptions = Utils\Utils::convertHeadersToOptions($httpRequest, $httpOptions);
        $httpRequest = Utils\Utils::removeHeaders($httpRequest);
        try {
            $httpResponse = $client->send($httpRequest, $httpOptions);
        } catch (\GuzzleHttp\Exception\GuzzleException $error) {
            $res = $this->sdkConfiguration->hooks->afterError(new Hooks\AfterErrorContext($hookContext), null, $error);
            $httpResponse = $res;
        }
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            $res = $this->sdkConfiguration->hooks->afterError(new Hooks\AfterErrorContext($hookContext), $httpResponse, null);
            $httpResponse = $res;
        }
        if ($statusCode == 200) {
            $httpResponse = $this->sdkConfiguration->hooks->afterSuccess(new Hooks\AfterSuccessContext($hookContext), $httpResponse);

            return new Operations\AuthenticatedRequestResponse(
                statusCode: $statusCode,
                contentType: $contentType,
                rawResponse: $httpResponse
            );
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * Test potential namespace conflicts with java.lang.Object
     *
     * @param  ?Shared\ConflictingEnum  $request
     * @return Operations\ConflictingEnumResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function conflictingEnum(?Shared\ConflictingEnum $request = null, ?Options $options = null): Operations\ConflictingEnumResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/conflictingEnum/');
        $urlOverride = null;
        $httpOptions = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body !== null) {
            $httpOptions = array_merge_recursive($httpOptions, $body);
        }
        $httpOptions['headers']['Accept'] = '*/*';
        $httpOptions['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('POST', $url);
        $hookContext = new HookContext('conflictingEnum', null, $this->sdkConfiguration->securitySource);
        $httpRequest = $this->sdkConfiguration->hooks->beforeRequest(new Hooks\BeforeRequestContext($hookContext), $httpRequest);
        $httpOptions = Utils\Utils::convertHeadersToOptions($httpRequest, $httpOptions);
        $httpRequest = Utils\Utils::removeHeaders($httpRequest);
        try {
            $httpResponse = $this->sdkConfiguration->client->send($httpRequest, $httpOptions);
        } catch (\GuzzleHttp\Exception\GuzzleException $error) {
            $res = $this->sdkConfiguration->hooks->afterError(new Hooks\AfterErrorContext($hookContext), null, $error);
            $httpResponse = $res;
        }
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            $res = $this->sdkConfiguration->hooks->afterError(new Hooks\AfterErrorContext($hookContext), $httpResponse, null);
            $httpResponse = $res;
        }
        if ($statusCode == 200) {
            $httpResponse = $this->sdkConfiguration->hooks->afterSuccess(new Hooks\AfterSuccessContext($hookContext), $httpResponse);

            return new Operations\ConflictingEnumResponse(
                statusCode: $statusCode,
                contentType: $contentType,
                rawResponse: $httpResponse
            );
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * ignoredGenerationPut
     *
     * @param  string  $request
     * @return Operations\IgnoredGenerationPutResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function ignoredGenerationPut(string $request, ?Options $options = null): Operations\IgnoredGenerationPutResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/ignoredGeneration');
        $urlOverride = null;
        $httpOptions = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $httpOptions = array_merge_recursive($httpOptions, $body);
        $httpOptions['headers']['Accept'] = 'application/json';
        $httpOptions['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('PUT', $url);
        $hookContext = new HookContext('ignoredGenerationPut', null, $this->sdkConfiguration->securitySource);
        $httpRequest = $this->sdkConfiguration->hooks->beforeRequest(new Hooks\BeforeRequestContext($hookContext), $httpRequest);
        $httpOptions = Utils\Utils::convertHeadersToOptions($httpRequest, $httpOptions);
        $httpRequest = Utils\Utils::removeHeaders($httpRequest);
        try {
            $httpResponse = $this->sdkConfiguration->client->send($httpRequest, $httpOptions);
        } catch (\GuzzleHttp\Exception\GuzzleException $error) {
            $res = $this->sdkConfiguration->hooks->afterError(new Hooks\AfterErrorContext($hookContext), null, $error);
            $httpResponse = $res;
        }
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            $res = $this->sdkConfiguration->hooks->afterError(new Hooks\AfterErrorContext($hookContext), $httpResponse, null);
            $httpResponse = $res;
        }
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $httpResponse = $this->sdkConfiguration->hooks->afterSuccess(new Hooks\AfterSuccessContext($hookContext), $httpResponse);

                $serializer = Utils\JSON::createSerializer();
                $responseData = (string) $httpResponse->getBody();
                $obj = $serializer->deserialize($responseData, '\OpenAPI\OpenAPI\Models\Operations\IgnoredGenerationPutResponseBody', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\IgnoredGenerationPutResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    object: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * multilineExample
     *
     * @param  ?Operations\MultilineExampleRequestBody  $request
     * @return Operations\MultilineExampleResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function multilineExample(?Operations\MultilineExampleRequestBody $request = null, ?Options $options = null): Operations\MultilineExampleResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/multilineExample');
        $urlOverride = null;
        $httpOptions = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body !== null) {
            $httpOptions = array_merge_recursive($httpOptions, $body);
        }
        $httpOptions['headers']['Accept'] = '*/*';
        $httpOptions['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);
        $hookContext = new HookContext('multilineExample', null, $this->sdkConfiguration->securitySource);
        $httpRequest = $this->sdkConfiguration->hooks->beforeRequest(new Hooks\BeforeRequestContext($hookContext), $httpRequest);
        $httpOptions = Utils\Utils::convertHeadersToOptions($httpRequest, $httpOptions);
        $httpRequest = Utils\Utils::removeHeaders($httpRequest);
        try {
            $httpResponse = $this->sdkConfiguration->client->send($httpRequest, $httpOptions);
        } catch (\GuzzleHttp\Exception\GuzzleException $error) {
            $res = $this->sdkConfiguration->hooks->afterError(new Hooks\AfterErrorContext($hookContext), null, $error);
            $httpResponse = $res;
        }
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            $res = $this->sdkConfiguration->hooks->afterError(new Hooks\AfterErrorContext($hookContext), $httpResponse, null);
            $httpResponse = $res;
        }
        if ($statusCode == 201) {
            $httpResponse = $this->sdkConfiguration->hooks->afterSuccess(new Hooks\AfterSuccessContext($hookContext), $httpResponse);

            return new Operations\MultilineExampleResponse(
                statusCode: $statusCode,
                contentType: $contentType,
                rawResponse: $httpResponse
            );
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * postAdditionalPropertiesWithNullableFields
     *
     * @param  array<string, mixed>  $request
     * @return Operations\PostAdditionalPropertiesWithNullableFieldsResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function postAdditionalPropertiesWithNullableFields(array $request, ?Options $options = null): Operations\PostAdditionalPropertiesWithNullableFieldsResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/additionalPropertiesWithNullableFields');
        $urlOverride = null;
        $httpOptions = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $httpOptions = array_merge_recursive($httpOptions, $body);
        $httpOptions['headers']['Accept'] = 'application/json';
        $httpOptions['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('POST', $url);
        $hookContext = new HookContext('postAdditionalPropertiesWithNullableFields', null, $this->sdkConfiguration->securitySource);
        $httpRequest = $this->sdkConfiguration->hooks->beforeRequest(new Hooks\BeforeRequestContext($hookContext), $httpRequest);
        $httpOptions = Utils\Utils::convertHeadersToOptions($httpRequest, $httpOptions);
        $httpRequest = Utils\Utils::removeHeaders($httpRequest);
        try {
            $httpResponse = $this->sdkConfiguration->client->send($httpRequest, $httpOptions);
        } catch (\GuzzleHttp\Exception\GuzzleException $error) {
            $res = $this->sdkConfiguration->hooks->afterError(new Hooks\AfterErrorContext($hookContext), null, $error);
            $httpResponse = $res;
        }
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            $res = $this->sdkConfiguration->hooks->afterError(new Hooks\AfterErrorContext($hookContext), $httpResponse, null);
            $httpResponse = $res;
        }
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $httpResponse = $this->sdkConfiguration->hooks->afterSuccess(new Hooks\AfterSuccessContext($hookContext), $httpResponse);

                $serializer = Utils\JSON::createSerializer();
                $responseData = (string) $httpResponse->getBody();
                $obj = $serializer->deserialize($responseData, '\OpenAPI\OpenAPI\Models\Operations\PostAdditionalPropertiesWithNullableFieldsResponseBody', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\PostAdditionalPropertiesWithNullableFieldsResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    object: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * responseBodyJsonGet
     *
     * @return Operations\ResponseBodyJsonGetResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function responseBodyJsonGet(?Options $options = null): Operations\ResponseBodyJsonGetResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/json');
        $urlOverride = null;
        $httpOptions = ['http_errors' => false];
        $httpOptions['headers']['Accept'] = 'application/json';
        $httpOptions['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);
        $hookContext = new HookContext('responseBodyJsonGet', null, $this->sdkConfiguration->securitySource);
        $httpRequest = $this->sdkConfiguration->hooks->beforeRequest(new Hooks\BeforeRequestContext($hookContext), $httpRequest);
        $httpOptions = Utils\Utils::convertHeadersToOptions($httpRequest, $httpOptions);
        $httpRequest = Utils\Utils::removeHeaders($httpRequest);
        try {
            $httpResponse = $this->sdkConfiguration->client->send($httpRequest, $httpOptions);
        } catch (\GuzzleHttp\Exception\GuzzleException $error) {
            $res = $this->sdkConfiguration->hooks->afterError(new Hooks\AfterErrorContext($hookContext), null, $error);
            $httpResponse = $res;
        }
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            $res = $this->sdkConfiguration->hooks->afterError(new Hooks\AfterErrorContext($hookContext), $httpResponse, null);
            $httpResponse = $res;
        }
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $httpResponse = $this->sdkConfiguration->hooks->afterSuccess(new Hooks\AfterSuccessContext($hookContext), $httpResponse);

                $serializer = Utils\JSON::createSerializer();
                $responseData = (string) $httpResponse->getBody();
                $obj = $serializer->deserialize($responseData, '\OpenAPI\OpenAPI\Models\Shared\HttpBinSimpleJsonObject', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\ResponseBodyJsonGetResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    httpBinSimpleJsonObject: $obj);

                return $response;
            } else {
                throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }
}