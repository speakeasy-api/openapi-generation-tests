<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;
use OpenAPI\OpenAPI\Utils\Retry\RetryConfig;

class SDKConfiguration
{
    public ?\GuzzleHttp\ClientInterface $client = null;

    public Hooks\SDKHooks $hooks;
    public ?Models\Shared\Security $security = null;

    /** @var pure-Closure(): Models\Shared\Security */
    public ?\Closure $securitySource = null;
    public string $serverUrl = '';

    public int $serverIndex = 0;

    /** @var array<array<string, string>> */
    public ?array $serverDefaults = [
        [
        ],
        [
        ],
        [
            'hostname' => 'localhost',
            'port' => '35123',
        ],
        [
            'something' => 'something',
        ],
        [
            'hostname' => 'localhost',
            'port' => '35123',
            'protocol' => 'http',
        ],
    ];

    public string $language = 'php';

    public string $openapiDocVersion = '0.1.0';

    public string $sdkVersion = '2.2.0';

    public string $genVersion = '2.486.6';

    public string $userAgent = 'speakeasy-sdk/php 2.2.0 2.486.6 0.1.0 openapi/openapi';
    /** @var array<string, array<string, array<string, mixed>>> */
    public ?array $globals = [
        'parameters' => [],
    ];

    public ?RetryConfig $retryConfig = null;

    public function __construct()
    {
        $this->hooks = new Hooks\SDKHooks();
    }

    public function getServerUrl(): string
    {

        if ($this->serverUrl !== '') {
            return $this->serverUrl;
        }

        if (isset(SDK::SERVERS[$this->serverIndex])) {
            return SDK::SERVERS[$this->serverIndex];
        } else {
            throw new \OutOfBoundsException('Server index '.$this->serverIndex.' is out of bounds');
        }
    }

    /**
     * @return array<string, string>
     */
    public function getServerDefaults(): ?array
    {
        return $this->serverDefaults[$this->serverIndex];
    }
    public function hasSecurity(): bool
    {
        return $this->security !== null || $this->securitySource !== null;
    }

    public function getSecurity(): ?Models\Shared\Security
    {
        if ($this->securitySource !== null) {
            $security = $this->securitySource->call($this);

            return $security;
        } else {
            return $this->security;
        }
    }

    /**
     * @return Utils\ServerDetails
     */
    public function getServerDetails(): Utils\ServerDetails
    {
        if ($this->serverUrl !== '') {
            return new Utils\ServerDetails(rtrim($this->serverUrl, '/'), []);
        }
        if ($this->serverIndex === null) {
            $this->serverIndex = 0;
        }

        return new Utils\ServerDetails(SDK::SERVERS[$this->serverIndex], $this->serverDefaults[$this->serverIndex]);

    }

    public function getTemplatedServerUrl(): string
    {
        if ($this->serverUrl) {
            return Utils\Utils::templateUrl($this->serverUrl.trim('/'), []);
        }

        return Utils\Utils::templateUrl($this->getServerUrl(), $this->getServerDefaults());
    }

    public function initHooks(\GuzzleHttp\ClientInterface $client): \GuzzleHttp\ClientInterface
    {
        $preHooksUrl = $this->getTemplatedServerUrl();
        $ret = $this->hooks->sdkInit($preHooksUrl, $client);
        if ($preHooksUrl != $ret->url) {
            $this->serverUrl = $ret->url;
        }

        return $ret->client;
    }
}
