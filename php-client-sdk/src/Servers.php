<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

use OpenAPI\OpenAPI\Models\Operations;

class Servers
{
    /** SELECT_SERVER_WITH_ID_SERVER_VALID - The default server. */
    public const SELECT_SERVER_WITH_ID_SERVER_VALID = 'valid';

    /** SELECT_SERVER_WITH_ID_SERVER_BROKEN - A server url to a non-existent server. */
    public const SELECT_SERVER_WITH_ID_SERVER_BROKEN = 'broken';

    public const SELECT_SERVER_WITH_ID_SERVERS = [
        /** The default server. */
        Servers::SELECT_SERVER_WITH_ID_SERVER_VALID => 'http://localhost:35123',
        /** A server url to a non-existent server. */
        Servers::SELECT_SERVER_WITH_ID_SERVER_BROKEN => 'http://broken',
    ];

    public const SERVER_WITH_PROTOCOL_TEMPLATE_SERVER_MAIN = 'main';

    public const SERVER_WITH_PROTOCOL_TEMPLATE_SERVERS = [

        Servers::SERVER_WITH_PROTOCOL_TEMPLATE_SERVER_MAIN => '{protocol}://{hostname}:{port}',
    ];
    public const SERVER_WITH_TEMPLATES_SERVERS = [

        'http://{hostname}:{port}',
    ];

    public const SERVERS_BY_ID_WITH_TEMPLATES_SERVER_MAIN = 'main';

    public const SERVERS_BY_ID_WITH_TEMPLATES_SERVERS = [

        Servers::SERVERS_BY_ID_WITH_TEMPLATES_SERVER_MAIN => 'http://{hostname}:{port}',
    ];
    private SDKConfiguration $sdkConfiguration;
    /**
     * @param  SDKConfiguration  $sdkConfig
     */
    public function __construct(public SDKConfiguration $sdkConfig)
    {
        $this->sdkConfiguration = $sdkConfig;
    }

    /**
     * selectGlobalServer
     *
     * @return Operations\SelectGlobalServerResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function selectGlobalServer(): Operations\SelectGlobalServerResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/selectGlobalServer');
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = '*/*';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            return new Operations\SelectGlobalServerResponse(
                statusCode: $statusCode,
                contentType: $contentType,
                rawResponse: $httpResponse
            );
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * Select a server by ID.
     *
     * @param  string  $serverURL
     * @return Operations\SelectServerWithIDResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function selectServerWithID(?string $serverURL = null): Operations\SelectServerWithIDResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Servers::SELECT_SERVER_WITH_ID_SERVERS[Servers::SELECT_SERVER_WITH_ID_SERVER_VALID], [
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/selectServerWithID');
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = '*/*';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            return new Operations\SelectServerWithIDResponse(
                statusCode: $statusCode,
                contentType: $contentType,
                rawResponse: $httpResponse
            );
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * serverWithProtocolTemplate
     *
     * @param  string  $serverURL
     * @return Operations\ServerWithProtocolTemplateResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function serverWithProtocolTemplate(?string $serverURL = null): Operations\ServerWithProtocolTemplateResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Servers::SERVER_WITH_PROTOCOL_TEMPLATE_SERVERS[Servers::SERVER_WITH_PROTOCOL_TEMPLATE_SERVER_MAIN], [
            'hostname' => 'localhost',
            'port' => '35123',
            'protocol' => 'http',
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/serverWithProtocolTemplate');
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = '*/*';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            return new Operations\ServerWithProtocolTemplateResponse(
                statusCode: $statusCode,
                contentType: $contentType,
                rawResponse: $httpResponse
            );
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * serverWithTemplates
     *
     * @param  string  $serverURL
     * @return Operations\ServerWithTemplatesResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function serverWithTemplates(?string $serverURL = null): Operations\ServerWithTemplatesResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Servers::SERVER_WITH_TEMPLATES_SERVERS[0], [
            'hostname' => 'localhost',
            'port' => '35123',
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/serverWithTemplates');
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = '*/*';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            return new Operations\ServerWithTemplatesResponse(
                statusCode: $statusCode,
                contentType: $contentType,
                rawResponse: $httpResponse
            );
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * serverWithTemplatesGlobal
     *
     * @return Operations\ServerWithTemplatesGlobalResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function serverWithTemplatesGlobal(): Operations\ServerWithTemplatesGlobalResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/serverWithTemplatesGlobal');
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = '*/*';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            return new Operations\ServerWithTemplatesGlobalResponse(
                statusCode: $statusCode,
                contentType: $contentType,
                rawResponse: $httpResponse
            );
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * serversByIDWithTemplates
     *
     * @param  string  $serverURL
     * @return Operations\ServersByIDWithTemplatesResponse
     * @throws \OpenAPI\OpenAPI\Models\Errors\SDKException
     */
    public function serversByIDWithTemplates(?string $serverURL = null): Operations\ServersByIDWithTemplatesResponse
    {
        $baseUrl = Utils\Utils::templateUrl(Servers::SERVERS_BY_ID_WITH_TEMPLATES_SERVERS[Servers::SERVERS_BY_ID_WITH_TEMPLATES_SERVER_MAIN], [
            'hostname' => 'localhost',
            'port' => '35123',
        ]);
        if (! empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        $url = Utils\Utils::generateUrl($baseUrl, '/anything/serversByIDWithTemplates');
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = '*/*';
        $options['headers']['x-speakeasy-user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            return new Operations\ServersByIDWithTemplatesResponse(
                statusCode: $statusCode,
                contentType: $contentType,
                rawResponse: $httpResponse
            );
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \OpenAPI\OpenAPI\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

}