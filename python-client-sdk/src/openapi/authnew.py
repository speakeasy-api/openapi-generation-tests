"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from openapi._hooks import HookContext
from openapi.models import errors, operations, shared
from openapi.types import BaseModel, OptionalNullable, UNSET
import openapi.utils as utils
from typing import Optional, Union, cast

class AuthNew(BaseSDK):
    r"""Endpoints for testing authentication."""
    
    
    def auth_global(
        self, *,
        request: Union[shared.AuthServiceRequestBody, shared.AuthServiceRequestBodyTypedDict],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ):
        r"""
        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        else:
            base_url = operations.AUTH_GLOBAL_SERVERS[0]
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, shared.AuthServiceRequestBody)
        request = cast(shared.AuthServiceRequestBody, request)
        
        req = self.build_request(
            method="POST",
            path="/auth#authGlobal",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="x-speakeasy-user-agent",
            accept_header_value="*/*",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", shared.AuthServiceRequestBody),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="authGlobal", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["401","4XX","5XX"],
            retry_config=retry_config
        )
        
        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    async def auth_global_async(
        self, *,
        request: Union[shared.AuthServiceRequestBody, shared.AuthServiceRequestBodyTypedDict],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ):
        r"""
        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        else:
            base_url = operations.AUTH_GLOBAL_SERVERS[0]
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, shared.AuthServiceRequestBody)
        request = cast(shared.AuthServiceRequestBody, request)
        
        req = self.build_request(
            method="POST",
            path="/auth#authGlobal",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="x-speakeasy-user-agent",
            accept_header_value="*/*",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", shared.AuthServiceRequestBody),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="authGlobal", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["401","4XX","5XX"],
            retry_config=retry_config
        )
        
        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    def basic_auth_new(
        self, *,
        security: Union[operations.BasicAuthNewSecurity, operations.BasicAuthNewSecurityTypedDict],
        request: Union[shared.AuthServiceRequestBody, shared.AuthServiceRequestBodyTypedDict],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ):
        r"""
        :param security: 
        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        else:
            base_url = operations.BASIC_AUTH_NEW_SERVERS[0]
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, shared.AuthServiceRequestBody)
        request = cast(shared.AuthServiceRequestBody, request)
        
        req = self.build_request(
            method="POST",
            path="/auth#basicAuth",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="x-speakeasy-user-agent",
            accept_header_value="*/*",
            security=security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", shared.AuthServiceRequestBody),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="basicAuthNew", oauth2_scopes=[], security_source=security),
            request=req,
            error_status_codes=["401","4XX","5XX"],
            retry_config=retry_config
        )
        
        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    async def basic_auth_new_async(
        self, *,
        security: Union[operations.BasicAuthNewSecurity, operations.BasicAuthNewSecurityTypedDict],
        request: Union[shared.AuthServiceRequestBody, shared.AuthServiceRequestBodyTypedDict],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ):
        r"""
        :param security: 
        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        else:
            base_url = operations.BASIC_AUTH_NEW_SERVERS[0]
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, shared.AuthServiceRequestBody)
        request = cast(shared.AuthServiceRequestBody, request)
        
        req = self.build_request(
            method="POST",
            path="/auth#basicAuth",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="x-speakeasy-user-agent",
            accept_header_value="*/*",
            security=security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", shared.AuthServiceRequestBody),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="basicAuthNew", oauth2_scopes=[], security_source=security),
            request=req,
            error_status_codes=["401","4XX","5XX"],
            retry_config=retry_config
        )
        
        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    def multiple_mixed_options_auth(
        self, *,
        request: Union[shared.AuthServiceRequestBody, shared.AuthServiceRequestBodyTypedDict],
        security: Optional[Union[operations.MultipleMixedOptionsAuthSecurity, operations.MultipleMixedOptionsAuthSecurityTypedDict]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ):
        r"""
        :param request: The request object to send.
        :param security: 
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        else:
            base_url = operations.MULTIPLE_MIXED_OPTIONS_AUTH_SERVERS[0]
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, shared.AuthServiceRequestBody)
        request = cast(shared.AuthServiceRequestBody, request)
        
        req = self.build_request(
            method="POST",
            path="/auth#multipleMixedOptionsAuth",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="x-speakeasy-user-agent",
            accept_header_value="*/*",
            security=security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", shared.AuthServiceRequestBody),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="multipleMixedOptionsAuth", oauth2_scopes=[], security_source=security),
            request=req,
            error_status_codes=["401","4XX","5XX"],
            retry_config=retry_config
        )
        
        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    async def multiple_mixed_options_auth_async(
        self, *,
        request: Union[shared.AuthServiceRequestBody, shared.AuthServiceRequestBodyTypedDict],
        security: Optional[Union[operations.MultipleMixedOptionsAuthSecurity, operations.MultipleMixedOptionsAuthSecurityTypedDict]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ):
        r"""
        :param request: The request object to send.
        :param security: 
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        else:
            base_url = operations.MULTIPLE_MIXED_OPTIONS_AUTH_SERVERS[0]
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, shared.AuthServiceRequestBody)
        request = cast(shared.AuthServiceRequestBody, request)
        
        req = self.build_request(
            method="POST",
            path="/auth#multipleMixedOptionsAuth",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="x-speakeasy-user-agent",
            accept_header_value="*/*",
            security=security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", shared.AuthServiceRequestBody),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="multipleMixedOptionsAuth", oauth2_scopes=[], security_source=security),
            request=req,
            error_status_codes=["401","4XX","5XX"],
            retry_config=retry_config
        )
        
        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    def multiple_mixed_scheme_auth(
        self, *,
        security: Union[operations.MultipleMixedSchemeAuthSecurity, operations.MultipleMixedSchemeAuthSecurityTypedDict],
        request: Union[shared.AuthServiceRequestBody, shared.AuthServiceRequestBodyTypedDict],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ):
        r"""
        :param security: 
        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        else:
            base_url = operations.MULTIPLE_MIXED_SCHEME_AUTH_SERVERS[0]
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, shared.AuthServiceRequestBody)
        request = cast(shared.AuthServiceRequestBody, request)
        
        req = self.build_request(
            method="POST",
            path="/auth#multipleMixedSchemeAuth",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="x-speakeasy-user-agent",
            accept_header_value="*/*",
            security=security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", shared.AuthServiceRequestBody),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="multipleMixedSchemeAuth", oauth2_scopes=[], security_source=security),
            request=req,
            error_status_codes=["401","4XX","5XX"],
            retry_config=retry_config
        )
        
        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    async def multiple_mixed_scheme_auth_async(
        self, *,
        security: Union[operations.MultipleMixedSchemeAuthSecurity, operations.MultipleMixedSchemeAuthSecurityTypedDict],
        request: Union[shared.AuthServiceRequestBody, shared.AuthServiceRequestBodyTypedDict],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ):
        r"""
        :param security: 
        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        else:
            base_url = operations.MULTIPLE_MIXED_SCHEME_AUTH_SERVERS[0]
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, shared.AuthServiceRequestBody)
        request = cast(shared.AuthServiceRequestBody, request)
        
        req = self.build_request(
            method="POST",
            path="/auth#multipleMixedSchemeAuth",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="x-speakeasy-user-agent",
            accept_header_value="*/*",
            security=security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", shared.AuthServiceRequestBody),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="multipleMixedSchemeAuth", oauth2_scopes=[], security_source=security),
            request=req,
            error_status_codes=["401","4XX","5XX"],
            retry_config=retry_config
        )
        
        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    def multiple_options_with_mixed_schemes_auth(
        self, *,
        request: Union[shared.AuthServiceRequestBody, shared.AuthServiceRequestBodyTypedDict],
        security: Optional[Union[operations.MultipleOptionsWithMixedSchemesAuthSecurity, operations.MultipleOptionsWithMixedSchemesAuthSecurityTypedDict]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ):
        r"""
        :param request: The request object to send.
        :param security: 
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        else:
            base_url = operations.MULTIPLE_OPTIONS_WITH_MIXED_SCHEMES_AUTH_SERVERS[0]
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, shared.AuthServiceRequestBody)
        request = cast(shared.AuthServiceRequestBody, request)
        
        req = self.build_request(
            method="POST",
            path="/auth#multipleOptionsWithMixedSchemesAuth",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="x-speakeasy-user-agent",
            accept_header_value="*/*",
            security=security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", shared.AuthServiceRequestBody),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="multipleOptionsWithMixedSchemesAuth", oauth2_scopes=[], security_source=security),
            request=req,
            error_status_codes=["401","4XX","5XX"],
            retry_config=retry_config
        )
        
        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    async def multiple_options_with_mixed_schemes_auth_async(
        self, *,
        request: Union[shared.AuthServiceRequestBody, shared.AuthServiceRequestBodyTypedDict],
        security: Optional[Union[operations.MultipleOptionsWithMixedSchemesAuthSecurity, operations.MultipleOptionsWithMixedSchemesAuthSecurityTypedDict]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ):
        r"""
        :param request: The request object to send.
        :param security: 
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        else:
            base_url = operations.MULTIPLE_OPTIONS_WITH_MIXED_SCHEMES_AUTH_SERVERS[0]
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, shared.AuthServiceRequestBody)
        request = cast(shared.AuthServiceRequestBody, request)
        
        req = self.build_request(
            method="POST",
            path="/auth#multipleOptionsWithMixedSchemesAuth",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="x-speakeasy-user-agent",
            accept_header_value="*/*",
            security=security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", shared.AuthServiceRequestBody),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="multipleOptionsWithMixedSchemesAuth", oauth2_scopes=[], security_source=security),
            request=req,
            error_status_codes=["401","4XX","5XX"],
            retry_config=retry_config
        )
        
        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    def multiple_options_with_simple_schemes_auth(
        self, *,
        request: Union[shared.AuthServiceRequestBody, shared.AuthServiceRequestBodyTypedDict],
        security: Optional[Union[operations.MultipleOptionsWithSimpleSchemesAuthSecurity, operations.MultipleOptionsWithSimpleSchemesAuthSecurityTypedDict]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ):
        r"""
        :param request: The request object to send.
        :param security: 
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        else:
            base_url = operations.MULTIPLE_OPTIONS_WITH_SIMPLE_SCHEMES_AUTH_SERVERS[0]
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, shared.AuthServiceRequestBody)
        request = cast(shared.AuthServiceRequestBody, request)
        
        req = self.build_request(
            method="POST",
            path="/auth#multipleOptionsWithSimpleSchemesAuth",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="x-speakeasy-user-agent",
            accept_header_value="*/*",
            security=security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", shared.AuthServiceRequestBody),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="multipleOptionsWithSimpleSchemesAuth", oauth2_scopes=[], security_source=security),
            request=req,
            error_status_codes=["401","4XX","5XX"],
            retry_config=retry_config
        )
        
        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    async def multiple_options_with_simple_schemes_auth_async(
        self, *,
        request: Union[shared.AuthServiceRequestBody, shared.AuthServiceRequestBodyTypedDict],
        security: Optional[Union[operations.MultipleOptionsWithSimpleSchemesAuthSecurity, operations.MultipleOptionsWithSimpleSchemesAuthSecurityTypedDict]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ):
        r"""
        :param request: The request object to send.
        :param security: 
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        else:
            base_url = operations.MULTIPLE_OPTIONS_WITH_SIMPLE_SCHEMES_AUTH_SERVERS[0]
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, shared.AuthServiceRequestBody)
        request = cast(shared.AuthServiceRequestBody, request)
        
        req = self.build_request(
            method="POST",
            path="/auth#multipleOptionsWithSimpleSchemesAuth",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="x-speakeasy-user-agent",
            accept_header_value="*/*",
            security=security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", shared.AuthServiceRequestBody),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="multipleOptionsWithSimpleSchemesAuth", oauth2_scopes=[], security_source=security),
            request=req,
            error_status_codes=["401","4XX","5XX"],
            retry_config=retry_config
        )
        
        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    def multiple_simple_options_auth(
        self, *,
        request: Union[shared.AuthServiceRequestBody, shared.AuthServiceRequestBodyTypedDict],
        security: Optional[Union[operations.MultipleSimpleOptionsAuthSecurity, operations.MultipleSimpleOptionsAuthSecurityTypedDict]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ):
        r"""
        :param request: The request object to send.
        :param security: 
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        else:
            base_url = operations.MULTIPLE_SIMPLE_OPTIONS_AUTH_SERVERS[0]
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, shared.AuthServiceRequestBody)
        request = cast(shared.AuthServiceRequestBody, request)
        
        req = self.build_request(
            method="POST",
            path="/auth#multipleSimpleOptionsAuth",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="x-speakeasy-user-agent",
            accept_header_value="*/*",
            security=security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", shared.AuthServiceRequestBody),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="multipleSimpleOptionsAuth", oauth2_scopes=[], security_source=security),
            request=req,
            error_status_codes=["401","4XX","5XX"],
            retry_config=retry_config
        )
        
        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    async def multiple_simple_options_auth_async(
        self, *,
        request: Union[shared.AuthServiceRequestBody, shared.AuthServiceRequestBodyTypedDict],
        security: Optional[Union[operations.MultipleSimpleOptionsAuthSecurity, operations.MultipleSimpleOptionsAuthSecurityTypedDict]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ):
        r"""
        :param request: The request object to send.
        :param security: 
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        else:
            base_url = operations.MULTIPLE_SIMPLE_OPTIONS_AUTH_SERVERS[0]
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, shared.AuthServiceRequestBody)
        request = cast(shared.AuthServiceRequestBody, request)
        
        req = self.build_request(
            method="POST",
            path="/auth#multipleSimpleOptionsAuth",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="x-speakeasy-user-agent",
            accept_header_value="*/*",
            security=security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", shared.AuthServiceRequestBody),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="multipleSimpleOptionsAuth", oauth2_scopes=[], security_source=security),
            request=req,
            error_status_codes=["401","4XX","5XX"],
            retry_config=retry_config
        )
        
        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    def multiple_simple_scheme_auth(
        self, *,
        security: Union[operations.MultipleSimpleSchemeAuthSecurity, operations.MultipleSimpleSchemeAuthSecurityTypedDict],
        request: Union[shared.AuthServiceRequestBody, shared.AuthServiceRequestBodyTypedDict],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ):
        r"""
        :param security: 
        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        else:
            base_url = operations.MULTIPLE_SIMPLE_SCHEME_AUTH_SERVERS[0]
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, shared.AuthServiceRequestBody)
        request = cast(shared.AuthServiceRequestBody, request)
        
        req = self.build_request(
            method="POST",
            path="/auth#multipleSimpleSchemeAuth",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="x-speakeasy-user-agent",
            accept_header_value="*/*",
            security=security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", shared.AuthServiceRequestBody),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="multipleSimpleSchemeAuth", oauth2_scopes=[], security_source=security),
            request=req,
            error_status_codes=["401","4XX","5XX"],
            retry_config=retry_config
        )
        
        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    async def multiple_simple_scheme_auth_async(
        self, *,
        security: Union[operations.MultipleSimpleSchemeAuthSecurity, operations.MultipleSimpleSchemeAuthSecurityTypedDict],
        request: Union[shared.AuthServiceRequestBody, shared.AuthServiceRequestBodyTypedDict],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ):
        r"""
        :param security: 
        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        else:
            base_url = operations.MULTIPLE_SIMPLE_SCHEME_AUTH_SERVERS[0]
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, shared.AuthServiceRequestBody)
        request = cast(shared.AuthServiceRequestBody, request)
        
        req = self.build_request(
            method="POST",
            path="/auth#multipleSimpleSchemeAuth",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="x-speakeasy-user-agent",
            accept_header_value="*/*",
            security=security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", shared.AuthServiceRequestBody),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="multipleSimpleSchemeAuth", oauth2_scopes=[], security_source=security),
            request=req,
            error_status_codes=["401","4XX","5XX"],
            retry_config=retry_config
        )
        
        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    def oauth2_auth_new(
        self, *,
        request: Union[shared.AuthServiceRequestBody, shared.AuthServiceRequestBodyTypedDict],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ):
        r"""
        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        else:
            base_url = operations.OAUTH2_AUTH_NEW_SERVERS[0]
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, shared.AuthServiceRequestBody)
        request = cast(shared.AuthServiceRequestBody, request)
        
        req = self.build_request(
            method="POST",
            path="/auth#oauth2Auth",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="x-speakeasy-user-agent",
            accept_header_value="*/*",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", shared.AuthServiceRequestBody),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="oauth2AuthNew", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["401","4XX","5XX"],
            retry_config=retry_config
        )
        
        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    async def oauth2_auth_new_async(
        self, *,
        request: Union[shared.AuthServiceRequestBody, shared.AuthServiceRequestBodyTypedDict],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ):
        r"""
        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        else:
            base_url = operations.OAUTH2_AUTH_NEW_SERVERS[0]
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, shared.AuthServiceRequestBody)
        request = cast(shared.AuthServiceRequestBody, request)
        
        req = self.build_request(
            method="POST",
            path="/auth#oauth2Auth",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="x-speakeasy-user-agent",
            accept_header_value="*/*",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", shared.AuthServiceRequestBody),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="oauth2AuthNew", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["401","4XX","5XX"],
            retry_config=retry_config
        )
        
        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    def open_id_connect_auth_new(
        self, *,
        security: Union[operations.OpenIDConnectAuthNewSecurity, operations.OpenIDConnectAuthNewSecurityTypedDict],
        request: Union[shared.AuthServiceRequestBody, shared.AuthServiceRequestBodyTypedDict],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ):
        r"""
        :param security: 
        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        else:
            base_url = operations.OPEN_ID_CONNECT_AUTH_NEW_SERVERS[0]
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, shared.AuthServiceRequestBody)
        request = cast(shared.AuthServiceRequestBody, request)
        
        req = self.build_request(
            method="POST",
            path="/auth#openIdConnectAuth",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="x-speakeasy-user-agent",
            accept_header_value="*/*",
            security=security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", shared.AuthServiceRequestBody),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="openIdConnectAuthNew", oauth2_scopes=[], security_source=security),
            request=req,
            error_status_codes=["401","4XX","5XX"],
            retry_config=retry_config
        )
        
        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    async def open_id_connect_auth_new_async(
        self, *,
        security: Union[operations.OpenIDConnectAuthNewSecurity, operations.OpenIDConnectAuthNewSecurityTypedDict],
        request: Union[shared.AuthServiceRequestBody, shared.AuthServiceRequestBodyTypedDict],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ):
        r"""
        :param security: 
        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        else:
            base_url = operations.OPEN_ID_CONNECT_AUTH_NEW_SERVERS[0]
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, shared.AuthServiceRequestBody)
        request = cast(shared.AuthServiceRequestBody, request)
        
        req = self.build_request(
            method="POST",
            path="/auth#openIdConnectAuth",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="x-speakeasy-user-agent",
            accept_header_value="*/*",
            security=security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", shared.AuthServiceRequestBody),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="openIdConnectAuthNew", oauth2_scopes=[], security_source=security),
            request=req,
            error_status_codes=["401","4XX","5XX"],
            retry_config=retry_config
        )
        
        if utils.match_response(http_res, "200", "*"):
            return
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
