"""Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.models.shared import simpleobject as shared_simpleobject
from openapi.types import BaseModel
from openapi.utils import FieldMetadata, QueryParamMetadata, RequestMetadata
import pydantic
from typing import Dict, TypedDict
from typing_extensions import Annotated


class ComponentBodyAndParamNoConflictRequestTypedDict(TypedDict):
    param_str: str
    simple_object: shared_simpleobject.SimpleObjectTypedDict
    

class ComponentBodyAndParamNoConflictRequest(BaseModel):
    param_str: Annotated[str, pydantic.Field(alias="paramStr"), FieldMetadata(query=QueryParamMetadata(style="form", explode=True))]
    simple_object: Annotated[shared_simpleobject.SimpleObject, FieldMetadata(request=RequestMetadata(media_type="application/json"))]
    

class ComponentBodyAndParamNoConflictResTypedDict(TypedDict):
    r"""OK"""
    
    args: Dict[str, str]
    json_: shared_simpleobject.SimpleObjectTypedDict
    r"""A simple object that uses all our supported primitive types and enums and has optional properties.
    https://docs.speakeasyapi.dev - A link to the external docs.
    """
    

class ComponentBodyAndParamNoConflictRes(BaseModel):
    r"""OK"""
    
    args: Dict[str, str]
    json_: Annotated[shared_simpleobject.SimpleObject, pydantic.Field(alias="json")]
    r"""A simple object that uses all our supported primitive types and enums and has optional properties.
    https://docs.speakeasyapi.dev - A link to the external docs.
    """
    
