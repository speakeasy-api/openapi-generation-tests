"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.models.shared import deepobjectqueryparams as shared_deepobjectqueryparams
from openapi.types import BaseModel
from openapi.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class DeepObjectQueryParamsDeepObjectRequestTypedDict(TypedDict):
    deep_obj: shared_deepobjectqueryparams.DeepObjectQueryParamsTypedDict
    r"""deepObject style query parameter serialization is undefined for arrays or nested objects by the specification:
    https://github.com/OAI/OpenAPI-Specification/issues/1706
    This schema covers the intended implementation cases rather than the fully complex deepObject schema.

    """


class DeepObjectQueryParamsDeepObjectRequest(BaseModel):
    deep_obj: Annotated[
        shared_deepobjectqueryparams.DeepObjectQueryParams,
        pydantic.Field(alias="deepObj"),
        FieldMetadata(query=QueryParamMetadata(style="deepObject", explode=True)),
    ]
    r"""deepObject style query parameter serialization is undefined for arrays or nested objects by the specification:
    https://github.com/OAI/OpenAPI-Specification/issues/1706
    This schema covers the intended implementation cases rather than the fully complex deepObject schema.

    """


class DeepObjectQueryParamsDeepObjectArgsTypedDict(TypedDict):
    deep_obj_arr: List[str]
    deep_obj_bool: str
    deep_obj_int: str
    deep_obj_map_testkey1: str
    deep_obj_map_testkey2: str
    deep_obj_num: str
    deep_obj_obj_any: str
    deep_obj_obj_bigint_str: str
    deep_obj_obj_bigint: str
    deep_obj_obj_bool_opt: str
    deep_obj_obj_bool: str
    deep_obj_obj_date_time: str
    deep_obj_obj_date: str
    deep_obj_obj_decimal_str: str
    deep_obj_obj_decimal: str
    deep_obj_obj_enum: str
    deep_obj_obj_float32: str
    deep_obj_obj_int32_enum: str
    deep_obj_obj_int32: str
    deep_obj_obj_int_enum: str
    deep_obj_obj_int: str
    deep_obj_obj_num: str
    deep_obj_obj_str_opt: str
    deep_obj_obj_str: str
    deep_obj_str: str
    deep_obj_obj_float64_str: NotRequired[str]
    deep_obj_obj_int64_str: NotRequired[str]


class DeepObjectQueryParamsDeepObjectArgs(BaseModel):
    deep_obj_arr: Annotated[List[str], pydantic.Field(alias="deepObj[arr]")]

    deep_obj_bool: Annotated[str, pydantic.Field(alias="deepObj[bool]")]

    deep_obj_int: Annotated[str, pydantic.Field(alias="deepObj[int]")]

    deep_obj_map_testkey1: Annotated[
        str, pydantic.Field(alias="deepObj[map][testkey1]")
    ]

    deep_obj_map_testkey2: Annotated[
        str, pydantic.Field(alias="deepObj[map][testkey2]")
    ]

    deep_obj_num: Annotated[str, pydantic.Field(alias="deepObj[num]")]

    deep_obj_obj_any: Annotated[str, pydantic.Field(alias="deepObj[obj][any]")]

    deep_obj_obj_bigint_str: Annotated[
        str, pydantic.Field(alias="deepObj[obj][bigintStr]")
    ]

    deep_obj_obj_bigint: Annotated[str, pydantic.Field(alias="deepObj[obj][bigint]")]

    deep_obj_obj_bool_opt: Annotated[str, pydantic.Field(alias="deepObj[obj][boolOpt]")]

    deep_obj_obj_bool: Annotated[str, pydantic.Field(alias="deepObj[obj][bool]")]

    deep_obj_obj_date_time: Annotated[
        str, pydantic.Field(alias="deepObj[obj][dateTime]")
    ]

    deep_obj_obj_date: Annotated[str, pydantic.Field(alias="deepObj[obj][date]")]

    deep_obj_obj_decimal_str: Annotated[
        str, pydantic.Field(alias="deepObj[obj][decimalStr]")
    ]

    deep_obj_obj_decimal: Annotated[str, pydantic.Field(alias="deepObj[obj][decimal]")]

    deep_obj_obj_enum: Annotated[str, pydantic.Field(alias="deepObj[obj][enum]")]

    deep_obj_obj_float32: Annotated[str, pydantic.Field(alias="deepObj[obj][float32]")]

    deep_obj_obj_int32_enum: Annotated[
        str, pydantic.Field(alias="deepObj[obj][int32Enum]")
    ]

    deep_obj_obj_int32: Annotated[str, pydantic.Field(alias="deepObj[obj][int32]")]

    deep_obj_obj_int_enum: Annotated[str, pydantic.Field(alias="deepObj[obj][intEnum]")]

    deep_obj_obj_int: Annotated[str, pydantic.Field(alias="deepObj[obj][int]")]

    deep_obj_obj_num: Annotated[str, pydantic.Field(alias="deepObj[obj][num]")]

    deep_obj_obj_str_opt: Annotated[str, pydantic.Field(alias="deepObj[obj][strOpt]")]

    deep_obj_obj_str: Annotated[str, pydantic.Field(alias="deepObj[obj][str]")]

    deep_obj_str: Annotated[str, pydantic.Field(alias="deepObj[str]")]

    deep_obj_obj_float64_str: Annotated[
        Optional[str], pydantic.Field(alias="deepObj[obj][float64Str]")
    ] = None

    deep_obj_obj_int64_str: Annotated[
        Optional[str], pydantic.Field(alias="deepObj[obj][int64Str]")
    ] = None


class DeepObjectQueryParamsDeepObjectResTypedDict(TypedDict):
    r"""OK"""

    args: DeepObjectQueryParamsDeepObjectArgsTypedDict
    url: str


class DeepObjectQueryParamsDeepObjectRes(BaseModel):
    r"""OK"""

    args: DeepObjectQueryParamsDeepObjectArgs

    url: str
