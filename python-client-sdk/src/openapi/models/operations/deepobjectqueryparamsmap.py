"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.types import BaseModel
from openapi.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import Dict, List, Optional, TypedDict, Union
from typing_extensions import Annotated, NotRequired


class DeepObjectQueryParamsMapRequestTypedDict(TypedDict):
    map_param: Dict[str, str]
    map_arr_param: NotRequired[Dict[str, List[str]]]


class DeepObjectQueryParamsMapRequest(BaseModel):
    map_param: Annotated[
        Dict[str, str],
        pydantic.Field(alias="mapParam"),
        FieldMetadata(query=QueryParamMetadata(style="deepObject", explode=True)),
    ]

    map_arr_param: Annotated[
        Optional[Dict[str, List[str]]],
        pydantic.Field(alias="mapArrParam"),
        FieldMetadata(query=QueryParamMetadata(style="deepObject", explode=True)),
    ] = None


DeepObjectQueryParamsMapArgsTypedDict = Union[str, List[str]]


DeepObjectQueryParamsMapArgs = Union[str, List[str]]


class DeepObjectQueryParamsMapResTypedDict(TypedDict):
    r"""OK"""

    args: Dict[str, DeepObjectQueryParamsMapArgsTypedDict]
    url: str


class DeepObjectQueryParamsMapRes(BaseModel):
    r"""OK"""

    args: Dict[str, DeepObjectQueryParamsMapArgs]

    url: str
