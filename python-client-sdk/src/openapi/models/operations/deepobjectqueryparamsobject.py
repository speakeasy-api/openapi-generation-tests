"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from openapi.models.shared import simpleobject as shared_simpleobject
from openapi.types import BaseModel
from openapi.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class ObjArrParamTypedDict(TypedDict):
    arr: NotRequired[List[str]]
    

class ObjArrParam(BaseModel):
    arr: Annotated[Optional[List[str]], FieldMetadata(query=True)] = None
    

class DeepObjectQueryParamsObjectRequestTypedDict(TypedDict):
    obj_param: shared_simpleobject.SimpleObjectTypedDict
    r"""A simple object that uses all our supported primitive types and enums and has optional properties."""
    obj_arr_param: NotRequired[ObjArrParamTypedDict]
    

class DeepObjectQueryParamsObjectRequest(BaseModel):
    obj_param: Annotated[shared_simpleobject.SimpleObject, pydantic.Field(alias="objParam"), FieldMetadata(query=QueryParamMetadata(style="deepObject", explode=True))]
    r"""A simple object that uses all our supported primitive types and enums and has optional properties."""
    obj_arr_param: Annotated[Optional[ObjArrParam], pydantic.Field(alias="objArrParam"), FieldMetadata(query=QueryParamMetadata(style="deepObject", explode=True))] = None
    

class DeepObjectQueryParamsObjectArgsTypedDict(TypedDict):
    obj_arr_param_arr: List[str]
    obj_param_any: str
    obj_param_bool_opt: str
    obj_param_bool: str
    obj_param_date_time: str
    obj_param_date: str
    obj_param_enum: str
    obj_param_float32: str
    obj_param_int32_enum: str
    obj_param_int32: str
    obj_param_int_enum: str
    obj_param_int: str
    obj_param_num: str
    obj_param_str_opt: str
    obj_param_str: str
    obj_param_bigint_str: NotRequired[str]
    obj_param_bigint: NotRequired[str]
    obj_param_decimal_str: NotRequired[str]
    obj_param_decimal: NotRequired[str]
    obj_param_float64_str: NotRequired[str]
    obj_param_int64_str: NotRequired[str]
    

class DeepObjectQueryParamsObjectArgs(BaseModel):
    obj_arr_param_arr: Annotated[List[str], pydantic.Field(alias="objArrParam[arr]")]
    obj_param_any: Annotated[str, pydantic.Field(alias="objParam[any]")]
    obj_param_bool_opt: Annotated[str, pydantic.Field(alias="objParam[boolOpt]")]
    obj_param_bool: Annotated[str, pydantic.Field(alias="objParam[bool]")]
    obj_param_date_time: Annotated[str, pydantic.Field(alias="objParam[dateTime]")]
    obj_param_date: Annotated[str, pydantic.Field(alias="objParam[date]")]
    obj_param_enum: Annotated[str, pydantic.Field(alias="objParam[enum]")]
    obj_param_float32: Annotated[str, pydantic.Field(alias="objParam[float32]")]
    obj_param_int32_enum: Annotated[str, pydantic.Field(alias="objParam[int32Enum]")]
    obj_param_int32: Annotated[str, pydantic.Field(alias="objParam[int32]")]
    obj_param_int_enum: Annotated[str, pydantic.Field(alias="objParam[intEnum]")]
    obj_param_int: Annotated[str, pydantic.Field(alias="objParam[int]")]
    obj_param_num: Annotated[str, pydantic.Field(alias="objParam[num]")]
    obj_param_str_opt: Annotated[str, pydantic.Field(alias="objParam[strOpt]")]
    obj_param_str: Annotated[str, pydantic.Field(alias="objParam[str]")]
    obj_param_bigint_str: Annotated[Optional[str], pydantic.Field(alias="objParam[bigintStr]")] = None
    obj_param_bigint: Annotated[Optional[str], pydantic.Field(alias="objParam[bigint]")] = None
    obj_param_decimal_str: Annotated[Optional[str], pydantic.Field(alias="objParam[decimalStr]")] = None
    obj_param_decimal: Annotated[Optional[str], pydantic.Field(alias="objParam[decimal]")] = None
    obj_param_float64_str: Annotated[Optional[str], pydantic.Field(alias="objParam[float64Str]")] = None
    obj_param_int64_str: Annotated[Optional[str], pydantic.Field(alias="objParam[int64Str]")] = None
    

class DeepObjectQueryParamsObjectResTypedDict(TypedDict):
    r"""OK"""
    
    args: DeepObjectQueryParamsObjectArgsTypedDict
    url: str
    

class DeepObjectQueryParamsObjectRes(BaseModel):
    r"""OK"""
    
    args: DeepObjectQueryParamsObjectArgs
    url: str
    
