"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from openapi.types import BaseModel
from openapi.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import Callable, List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class FlattenedEnvelopePaginationResponseRequestTypedDict(TypedDict):
    cursor: NotRequired[str]
    r"""The page token used to request a specific page of the search results"""
    

class FlattenedEnvelopePaginationResponseRequest(BaseModel):
    cursor: Annotated[Optional[str], FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = None
    r"""The page token used to request a specific page of the search results"""
    

class FlattenedEnvelopePaginationResponseResTypedDict(TypedDict):
    r"""OK"""
    
    num_pages: int
    result_array: List[str]
    next: NotRequired[str]
    

class FlattenedEnvelopePaginationResponseRes(BaseModel):
    r"""OK"""
    
    num_pages: Annotated[int, pydantic.Field(alias="numPages")]
    result_array: Annotated[List[str], pydantic.Field(alias="resultArray")]
    next: Optional[str] = None
    

class FlattenedEnvelopePaginationResponseResponseTypedDict(TypedDict):
    result: FlattenedEnvelopePaginationResponseResTypedDict
    

class FlattenedEnvelopePaginationResponseResponse(BaseModel):
    next: Callable[[], Optional[FlattenedEnvelopePaginationResponseResponse]]
    
    result: FlattenedEnvelopePaginationResponseRes
    
