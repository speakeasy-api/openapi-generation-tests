"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.models.shared import simpleobject as shared_simpleobject
from openapi.types import BaseModel
from openapi.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class FormQueryParamsObjectRequestTypedDict(TypedDict):
    obj_param_exploded: shared_simpleobject.SimpleObjectTypedDict
    r"""A simple object that uses all our supported primitive types and enums and has optional properties."""
    obj_param: NotRequired[shared_simpleobject.SimpleObjectTypedDict]
    r"""A simple object that uses all our supported primitive types and enums and has optional properties."""
    

class FormQueryParamsObjectRequest(BaseModel):
    obj_param_exploded: Annotated[shared_simpleobject.SimpleObject, pydantic.Field(alias="objParamExploded"), FieldMetadata(query=QueryParamMetadata(style="form", explode=True))]
    r"""A simple object that uses all our supported primitive types and enums and has optional properties."""
    obj_param: Annotated[Optional[shared_simpleobject.SimpleObject], pydantic.Field(alias="objParam"), FieldMetadata(query=QueryParamMetadata(style="form", explode=False))] = None
    r"""A simple object that uses all our supported primitive types and enums and has optional properties."""
    

class FormQueryParamsObjectArgsTypedDict(TypedDict):
    any: str
    bool_: str
    date_: str
    date_time: str
    enum: str
    float32: str
    int_: str
    int32: str
    int32_enum: str
    int_enum: str
    num: str
    obj_param: str
    str_: str
    bigint: NotRequired[str]
    bigint_str: NotRequired[str]
    bool_opt: NotRequired[str]
    decimal: NotRequired[str]
    decimal_str: NotRequired[str]
    float64_str: NotRequired[str]
    int64_str: NotRequired[str]
    int_opt_null: NotRequired[str]
    num_opt_null: NotRequired[str]
    str_opt: NotRequired[str]
    

class FormQueryParamsObjectArgs(BaseModel):
    any: str
    bool_: Annotated[str, pydantic.Field(alias="bool")]
    date_: Annotated[str, pydantic.Field(alias="date")]
    date_time: Annotated[str, pydantic.Field(alias="dateTime")]
    enum: str
    float32: str
    int_: Annotated[str, pydantic.Field(alias="int")]
    int32: str
    int32_enum: Annotated[str, pydantic.Field(alias="int32Enum")]
    int_enum: Annotated[str, pydantic.Field(alias="intEnum")]
    num: str
    obj_param: Annotated[str, pydantic.Field(alias="objParam")]
    str_: Annotated[str, pydantic.Field(alias="str")]
    bigint: Optional[str] = None
    bigint_str: Annotated[Optional[str], pydantic.Field(alias="bigintStr")] = None
    bool_opt: Annotated[Optional[str], pydantic.Field(alias="boolOpt")] = None
    decimal: Optional[str] = None
    decimal_str: Annotated[Optional[str], pydantic.Field(alias="decimalStr")] = None
    float64_str: Annotated[Optional[str], pydantic.Field(alias="float64Str")] = None
    int64_str: Annotated[Optional[str], pydantic.Field(alias="int64Str")] = None
    int_opt_null: Annotated[Optional[str], pydantic.Field(alias="intOptNull")] = None
    num_opt_null: Annotated[Optional[str], pydantic.Field(alias="numOptNull")] = None
    str_opt: Annotated[Optional[str], pydantic.Field(alias="strOpt")] = None
    

class FormQueryParamsObjectResTypedDict(TypedDict):
    r"""OK"""
    
    args: FormQueryParamsObjectArgsTypedDict
    url: str
    

class FormQueryParamsObjectRes(BaseModel):
    r"""OK"""
    
    args: FormQueryParamsObjectArgs
    url: str
    
