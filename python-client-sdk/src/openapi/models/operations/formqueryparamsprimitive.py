"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.types import BaseModel
from openapi.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import TypedDict
from typing_extensions import Annotated


class FormQueryParamsPrimitiveRequestTypedDict(TypedDict):
    bool_param: bool
    int_param: int
    num_param: float
    str_param: str


class FormQueryParamsPrimitiveRequest(BaseModel):
    bool_param: Annotated[
        bool,
        pydantic.Field(alias="boolParam"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]

    int_param: Annotated[
        int,
        pydantic.Field(alias="intParam"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]

    num_param: Annotated[
        float,
        pydantic.Field(alias="numParam"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]

    str_param: Annotated[
        str,
        pydantic.Field(alias="strParam"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]


class FormQueryParamsPrimitiveArgsTypedDict(TypedDict):
    bool_param: str
    int_param: str
    num_param: str
    str_param: str


class FormQueryParamsPrimitiveArgs(BaseModel):
    bool_param: Annotated[str, pydantic.Field(alias="boolParam")]

    int_param: Annotated[str, pydantic.Field(alias="intParam")]

    num_param: Annotated[str, pydantic.Field(alias="numParam")]

    str_param: Annotated[str, pydantic.Field(alias="strParam")]


class FormQueryParamsPrimitiveResTypedDict(TypedDict):
    r"""OK"""

    args: FormQueryParamsPrimitiveArgsTypedDict
    url: str


class FormQueryParamsPrimitiveRes(BaseModel):
    r"""OK"""

    args: FormQueryParamsPrimitiveArgs

    url: str
