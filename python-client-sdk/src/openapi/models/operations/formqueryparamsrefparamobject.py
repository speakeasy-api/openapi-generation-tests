"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from openapi.models.shared import refqueryparamobj as shared_refqueryparamobj, refqueryparamobjexploded as shared_refqueryparamobjexploded
from openapi.types import BaseModel
from openapi.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class FormQueryParamsRefParamObjectRequestTypedDict(TypedDict):
    ref_obj_param: NotRequired[shared_refqueryparamobj.RefQueryParamObjTypedDict]
    ref_obj_param_exploded: NotRequired[shared_refqueryparamobjexploded.RefQueryParamObjExplodedTypedDict]
    

class FormQueryParamsRefParamObjectRequest(BaseModel):
    ref_obj_param: Annotated[Optional[shared_refqueryparamobj.RefQueryParamObj], pydantic.Field(alias="refObjParam"), FieldMetadata(query=QueryParamMetadata(style="form", explode=False))] = None
    ref_obj_param_exploded: Annotated[Optional[shared_refqueryparamobjexploded.RefQueryParamObjExploded], pydantic.Field(alias="refObjParamExploded"), FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = None
    

class FormQueryParamsRefParamObjectArgsTypedDict(TypedDict):
    bool_: str
    int_: str
    num: str
    ref_obj_param: str
    str_: str
    

class FormQueryParamsRefParamObjectArgs(BaseModel):
    bool_: Annotated[str, pydantic.Field(alias="bool")]
    int_: Annotated[str, pydantic.Field(alias="int")]
    num: str
    ref_obj_param: Annotated[str, pydantic.Field(alias="refObjParam")]
    str_: Annotated[str, pydantic.Field(alias="str")]
    

class FormQueryParamsRefParamObjectResTypedDict(TypedDict):
    r"""OK"""
    
    args: FormQueryParamsRefParamObjectArgsTypedDict
    url: str
    

class FormQueryParamsRefParamObjectRes(BaseModel):
    r"""OK"""
    
    args: FormQueryParamsRefParamObjectArgs
    url: str
    
