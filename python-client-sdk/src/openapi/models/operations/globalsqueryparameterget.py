"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.types import BaseModel
from openapi.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class GlobalsQueryParameterGetGlobalsTypedDict(TypedDict):
    global_query_param: NotRequired[str]
    

class GlobalsQueryParameterGetGlobals(BaseModel):
    global_query_param: Annotated[Optional[str], pydantic.Field(alias="globalQueryParam"), FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = None
    

class GlobalsQueryParameterGetRequestTypedDict(TypedDict):
    global_query_param: NotRequired[str]
    

class GlobalsQueryParameterGetRequest(BaseModel):
    global_query_param: Annotated[Optional[str], pydantic.Field(alias="globalQueryParam"), FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = None
    

class GlobalsQueryParameterGetArgsTypedDict(TypedDict):
    global_query_param: str
    

class GlobalsQueryParameterGetArgs(BaseModel):
    global_query_param: Annotated[str, pydantic.Field(alias="globalQueryParam")]
    

class GlobalsQueryParameterGetResTypedDict(TypedDict):
    r"""OK"""
    
    args: GlobalsQueryParameterGetArgsTypedDict
    

class GlobalsQueryParameterGetRes(BaseModel):
    r"""OK"""
    
    args: GlobalsQueryParameterGetArgs
    
