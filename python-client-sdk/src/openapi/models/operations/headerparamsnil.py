"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from openapi.utils import FieldMetadata, HeaderMetadata
import pydantic
from pydantic import model_serializer
from typing import Any, Dict, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class HeaderParamsNilRequestTypedDict(TypedDict):
    nullable_header: Nullable[str]
    optional_header: NotRequired[str]
    optional_nullable_header: NotRequired[Nullable[str]]


class HeaderParamsNilRequest(BaseModel):
    nullable_header: Annotated[
        Nullable[str],
        pydantic.Field(alias="Nullable-Header"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ]

    optional_header: Annotated[
        Optional[str],
        pydantic.Field(alias="Optional-Header"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None

    optional_nullable_header: Annotated[
        OptionalNullable[str],
        pydantic.Field(alias="Optional-Nullable-Header"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["Optional-Header", "Optional-Nullable-Header"]
        nullable_fields = ["Nullable-Header", "Optional-Nullable-Header"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class HeaderParamsNilResTypedDict(TypedDict):
    r"""OK"""

    headers: Dict[str, Any]


class HeaderParamsNilRes(BaseModel):
    r"""OK"""

    headers: Dict[str, Any]
