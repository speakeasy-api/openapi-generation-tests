"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from openapi.models.shared import simpleobject as shared_simpleobject
from openapi.types import BaseModel
from openapi.utils import FieldMetadata, HeaderMetadata
import pydantic
from typing import TypedDict
from typing_extensions import Annotated


class HeaderParamsObjectRequestTypedDict(TypedDict):
    x_header_obj: shared_simpleobject.SimpleObjectTypedDict
    r"""A simple object that uses all our supported primitive types and enums and has optional properties."""
    x_header_obj_explode: shared_simpleobject.SimpleObjectTypedDict
    r"""A simple object that uses all our supported primitive types and enums and has optional properties."""
    

class HeaderParamsObjectRequest(BaseModel):
    x_header_obj: Annotated[shared_simpleobject.SimpleObject, pydantic.Field(alias="X-Header-Obj"), FieldMetadata(header=HeaderMetadata(style="simple", explode=False))]
    r"""A simple object that uses all our supported primitive types and enums and has optional properties."""
    x_header_obj_explode: Annotated[shared_simpleobject.SimpleObject, pydantic.Field(alias="X-Header-Obj-Explode"), FieldMetadata(header=HeaderMetadata(style="simple", explode=True))]
    r"""A simple object that uses all our supported primitive types and enums and has optional properties."""
    

class HeaderParamsObjectHeadersTypedDict(TypedDict):
    x_header_obj: str
    x_header_obj_explode: str
    

class HeaderParamsObjectHeaders(BaseModel):
    x_header_obj: Annotated[str, pydantic.Field(alias="X-Header-Obj")]
    x_header_obj_explode: Annotated[str, pydantic.Field(alias="X-Header-Obj-Explode")]
    

class HeaderParamsObjectResTypedDict(TypedDict):
    r"""OK"""
    
    headers: HeaderParamsObjectHeadersTypedDict
    

class HeaderParamsObjectRes(BaseModel):
    r"""OK"""
    
    headers: HeaderParamsObjectHeaders
    
