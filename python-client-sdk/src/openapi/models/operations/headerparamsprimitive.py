"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.types import BaseModel
from openapi.utils import FieldMetadata, HeaderMetadata
import pydantic
from typing import TypedDict
from typing_extensions import Annotated


class HeaderParamsPrimitiveRequestTypedDict(TypedDict):
    x_header_boolean: bool
    x_header_integer: int
    x_header_number: float
    x_header_string: str


class HeaderParamsPrimitiveRequest(BaseModel):
    x_header_boolean: Annotated[
        bool,
        pydantic.Field(alias="X-Header-Boolean"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ]

    x_header_integer: Annotated[
        int,
        pydantic.Field(alias="X-Header-Integer"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ]

    x_header_number: Annotated[
        float,
        pydantic.Field(alias="X-Header-Number"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ]

    x_header_string: Annotated[
        str,
        pydantic.Field(alias="X-Header-String"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ]


class HeaderParamsPrimitiveHeadersTypedDict(TypedDict):
    x_header_boolean: str
    x_header_integer: str
    x_header_number: str
    x_header_string: str


class HeaderParamsPrimitiveHeaders(BaseModel):
    x_header_boolean: Annotated[str, pydantic.Field(alias="X-Header-Boolean")]

    x_header_integer: Annotated[str, pydantic.Field(alias="X-Header-Integer")]

    x_header_number: Annotated[str, pydantic.Field(alias="X-Header-Number")]

    x_header_string: Annotated[str, pydantic.Field(alias="X-Header-String")]


class HeaderParamsPrimitiveResTypedDict(TypedDict):
    r"""OK"""

    headers: HeaderParamsPrimitiveHeadersTypedDict


class HeaderParamsPrimitiveRes(BaseModel):
    r"""OK"""

    headers: HeaderParamsPrimitiveHeaders
