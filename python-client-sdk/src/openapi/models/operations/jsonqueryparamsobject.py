"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.models.shared import (
    deepobject as shared_deepobject,
    simpleobject as shared_simpleobject,
)
from openapi.types import BaseModel
from openapi.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import TypedDict
from typing_extensions import Annotated


class JSONQueryParamsObjectRequestTypedDict(TypedDict):
    deep_obj_param: shared_deepobject.DeepObjectTypedDict
    simple_obj_param: shared_simpleobject.SimpleObjectTypedDict
    r"""A simple object that uses all our supported primitive types and enums and has optional properties."""


class JSONQueryParamsObjectRequest(BaseModel):
    deep_obj_param: Annotated[
        shared_deepobject.DeepObject,
        pydantic.Field(alias="deepObjParam"),
        FieldMetadata(query=QueryParamMetadata(serialization="json")),
    ]

    simple_obj_param: Annotated[
        shared_simpleobject.SimpleObject,
        pydantic.Field(alias="simpleObjParam"),
        FieldMetadata(query=QueryParamMetadata(serialization="json")),
    ]
    r"""A simple object that uses all our supported primitive types and enums and has optional properties."""


class JSONQueryParamsObjectArgsTypedDict(TypedDict):
    deep_obj_param: str
    simple_obj_param: str


class JSONQueryParamsObjectArgs(BaseModel):
    deep_obj_param: Annotated[str, pydantic.Field(alias="deepObjParam")]

    simple_obj_param: Annotated[str, pydantic.Field(alias="simpleObjParam")]


class JSONQueryParamsObjectResTypedDict(TypedDict):
    r"""OK"""

    args: JSONQueryParamsObjectArgsTypedDict
    url: str


class JSONQueryParamsObjectRes(BaseModel):
    r"""OK"""

    args: JSONQueryParamsObjectArgs

    url: str
