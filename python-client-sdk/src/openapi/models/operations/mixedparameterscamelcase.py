"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from openapi.types import BaseModel
from openapi.utils import FieldMetadata, HeaderMetadata, PathParamMetadata, QueryParamMetadata
import pydantic
from typing import TypedDict
from typing_extensions import Annotated


class MixedParametersCamelCaseRequestTypedDict(TypedDict):
    header_param: str
    path_param: str
    query_string_param: str
    

class MixedParametersCamelCaseRequest(BaseModel):
    header_param: Annotated[str, FieldMetadata(header=HeaderMetadata(style="simple", explode=False))]
    path_param: Annotated[str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))]
    query_string_param: Annotated[str, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))]
    

class MixedParametersCamelCaseArgsTypedDict(TypedDict):
    query_string_param: str
    

class MixedParametersCamelCaseArgs(BaseModel):
    query_string_param: str
    

class MixedParametersCamelCaseHeadersTypedDict(TypedDict):
    header_param: str
    

class MixedParametersCamelCaseHeaders(BaseModel):
    header_param: Annotated[str, pydantic.Field(alias="Header-Param")]
    

class MixedParametersCamelCaseResTypedDict(TypedDict):
    r"""OK"""
    
    args: MixedParametersCamelCaseArgsTypedDict
    headers: MixedParametersCamelCaseHeadersTypedDict
    url: str
    

class MixedParametersCamelCaseRes(BaseModel):
    r"""OK"""
    
    args: MixedParametersCamelCaseArgs
    headers: MixedParametersCamelCaseHeaders
    url: str
    
