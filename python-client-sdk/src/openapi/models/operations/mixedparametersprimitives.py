"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.types import BaseModel
from openapi.utils import FieldMetadata, HeaderMetadata, PathParamMetadata, QueryParamMetadata
import pydantic
from typing import TypedDict
from typing_extensions import Annotated


class MixedParametersPrimitivesRequestTypedDict(TypedDict):
    header_param: str
    path_param: str
    query_string_param: str
    

class MixedParametersPrimitivesRequest(BaseModel):
    header_param: Annotated[str, pydantic.Field(alias="headerParam"), FieldMetadata(header=HeaderMetadata(style="simple", explode=False))]
    path_param: Annotated[str, pydantic.Field(alias="pathParam"), FieldMetadata(path=PathParamMetadata(style="simple", explode=False))]
    query_string_param: Annotated[str, pydantic.Field(alias="queryStringParam"), FieldMetadata(query=QueryParamMetadata(style="form", explode=True))]
    

class MixedParametersPrimitivesArgsTypedDict(TypedDict):
    query_string_param: str
    

class MixedParametersPrimitivesArgs(BaseModel):
    query_string_param: Annotated[str, pydantic.Field(alias="queryStringParam")]
    

class MixedParametersPrimitivesHeadersTypedDict(TypedDict):
    headerparam: str
    

class MixedParametersPrimitivesHeaders(BaseModel):
    headerparam: Annotated[str, pydantic.Field(alias="Headerparam")]
    

class MixedParametersPrimitivesResTypedDict(TypedDict):
    r"""OK"""
    
    args: MixedParametersPrimitivesArgsTypedDict
    headers: MixedParametersPrimitivesHeadersTypedDict
    url: str
    

class MixedParametersPrimitivesRes(BaseModel):
    r"""OK"""
    
    args: MixedParametersPrimitivesArgs
    headers: MixedParametersPrimitivesHeaders
    url: str
    
