"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.models.shared import simpleobject as shared_simpleobject
from openapi.types import BaseModel
from openapi.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import Dict, TypedDict
from typing_extensions import Annotated


class MixedQueryParamsRequestTypedDict(TypedDict):
    deep_object_param: shared_simpleobject.SimpleObjectTypedDict
    r"""A simple object that uses all our supported primitive types and enums and has optional properties."""
    form_param: shared_simpleobject.SimpleObjectTypedDict
    r"""A simple object that uses all our supported primitive types and enums and has optional properties."""
    json_param: shared_simpleobject.SimpleObjectTypedDict
    r"""A simple object that uses all our supported primitive types and enums and has optional properties."""
    

class MixedQueryParamsRequest(BaseModel):
    deep_object_param: Annotated[shared_simpleobject.SimpleObject, pydantic.Field(alias="deepObjectParam"), FieldMetadata(query=QueryParamMetadata(style="deepObject", explode=True))]
    r"""A simple object that uses all our supported primitive types and enums and has optional properties."""
    form_param: Annotated[shared_simpleobject.SimpleObject, pydantic.Field(alias="formParam"), FieldMetadata(query=QueryParamMetadata(style="form", explode=True))]
    r"""A simple object that uses all our supported primitive types and enums and has optional properties."""
    json_param: Annotated[shared_simpleobject.SimpleObject, pydantic.Field(alias="jsonParam"), FieldMetadata(query=QueryParamMetadata(serialization="json"))]
    r"""A simple object that uses all our supported primitive types and enums and has optional properties."""
    

class MixedQueryParamsResTypedDict(TypedDict):
    r"""OK"""
    
    args: Dict[str, str]
    url: str
    

class MixedQueryParamsRes(BaseModel):
    r"""OK"""
    
    args: Dict[str, str]
    url: str
    
