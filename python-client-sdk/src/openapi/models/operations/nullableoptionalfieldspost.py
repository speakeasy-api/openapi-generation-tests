"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class NullableOptionalFieldsPostRequestBodyTypedDict(TypedDict):
    nullable_required: Nullable[str]
    nullable_optional: NotRequired[Nullable[str]]
    optional: NotRequired[str]
    

class NullableOptionalFieldsPostRequestBody(BaseModel):
    nullable_required: Annotated[Nullable[str], pydantic.Field(alias="nullableRequired")]
    nullable_optional: Annotated[OptionalNullable[str], pydantic.Field(alias="nullableOptional")] = UNSET
    optional: Optional[str] = None
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["nullableOptional", "optional"]
        nullable_fields = ["nullableRequired", "nullableOptional"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        

class NullableOptionalFieldsPostJSONTypedDict(TypedDict):
    nullable_required: Nullable[str]
    nullable_optional: NotRequired[Nullable[str]]
    optional: NotRequired[str]
    

class NullableOptionalFieldsPostJSON(BaseModel):
    nullable_required: Annotated[Nullable[str], pydantic.Field(alias="nullableRequired")]
    nullable_optional: Annotated[OptionalNullable[str], pydantic.Field(alias="nullableOptional")] = UNSET
    optional: Optional[str] = None
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["nullableOptional", "optional"]
        nullable_fields = ["nullableRequired", "nullableOptional"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        

class NullableOptionalFieldsPostResponseBodyTypedDict(TypedDict):
    r"""OK"""
    
    json_: NullableOptionalFieldsPostJSONTypedDict
    

class NullableOptionalFieldsPostResponseBody(BaseModel):
    r"""OK"""
    
    json_: Annotated[NullableOptionalFieldsPostJSON, pydantic.Field(alias="json")]
    
