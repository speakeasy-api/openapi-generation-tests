"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class NullableOptionalObjTypedDict(TypedDict):
    pass
    

class NullableOptionalObj(BaseModel):
    pass
    

class NullableRequiredObjTypedDict(TypedDict):
    pass
    

class NullableRequiredObj(BaseModel):
    pass
    

class RequiredObjTypedDict(TypedDict):
    pass
    

class RequiredObj(BaseModel):
    pass
    

class NullableRequiredEmptyObjectPostRequestBodyTypedDict(TypedDict):
    nullable_required_obj: Nullable[NullableRequiredObjTypedDict]
    required_obj: RequiredObjTypedDict
    nullable_optional_obj: NotRequired[Nullable[NullableOptionalObjTypedDict]]
    

class NullableRequiredEmptyObjectPostRequestBody(BaseModel):
    nullable_required_obj: Annotated[Nullable[NullableRequiredObj], pydantic.Field(alias="NullableRequiredObj")]
    required_obj: Annotated[RequiredObj, pydantic.Field(alias="RequiredObj")]
    nullable_optional_obj: Annotated[OptionalNullable[NullableOptionalObj], pydantic.Field(alias="NullableOptionalObj")] = UNSET
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["NullableOptionalObj"]
        nullable_fields = ["NullableRequiredObj", "NullableOptionalObj"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields
                or (
                    k in optional_fields
                    and k in nullable_fields
                    and (
                        self.__pydantic_fields_set__.intersection({n})
                        or k in null_default_fields
                    )  # pylint: disable=no-member
                )
            ):
                m[k] = val

        return m
        

class NullableRequiredEmptyObjectPostNullableOptionalObjTypedDict(TypedDict):
    pass
    

class NullableRequiredEmptyObjectPostNullableOptionalObj(BaseModel):
    pass
    

class NullableRequiredEmptyObjectPostNullableRequiredObjTypedDict(TypedDict):
    pass
    

class NullableRequiredEmptyObjectPostNullableRequiredObj(BaseModel):
    pass
    

class NullableRequiredEmptyObjectPostRequiredObjTypedDict(TypedDict):
    pass
    

class NullableRequiredEmptyObjectPostRequiredObj(BaseModel):
    pass
    

class NullableRequiredEmptyObjectPostJSONTypedDict(TypedDict):
    nullable_required_obj: Nullable[NullableRequiredEmptyObjectPostNullableRequiredObjTypedDict]
    required_obj: NullableRequiredEmptyObjectPostRequiredObjTypedDict
    nullable_optional_obj: NotRequired[Nullable[NullableRequiredEmptyObjectPostNullableOptionalObjTypedDict]]
    

class NullableRequiredEmptyObjectPostJSON(BaseModel):
    nullable_required_obj: Annotated[Nullable[NullableRequiredEmptyObjectPostNullableRequiredObj], pydantic.Field(alias="NullableRequiredObj")]
    required_obj: Annotated[NullableRequiredEmptyObjectPostRequiredObj, pydantic.Field(alias="RequiredObj")]
    nullable_optional_obj: Annotated[OptionalNullable[NullableRequiredEmptyObjectPostNullableOptionalObj], pydantic.Field(alias="NullableOptionalObj")] = UNSET
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["NullableOptionalObj"]
        nullable_fields = ["NullableRequiredObj", "NullableOptionalObj"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields
                or (
                    k in optional_fields
                    and k in nullable_fields
                    and (
                        self.__pydantic_fields_set__.intersection({n})
                        or k in null_default_fields
                    )  # pylint: disable=no-member
                )
            ):
                m[k] = val

        return m
        

class NullableRequiredEmptyObjectPostResponseBodyTypedDict(TypedDict):
    r"""OK"""
    
    data: NotRequired[str]
    json_: NotRequired[NullableRequiredEmptyObjectPostJSONTypedDict]
    

class NullableRequiredEmptyObjectPostResponseBody(BaseModel):
    r"""OK"""
    
    data: Optional[str] = None
    json_: Annotated[Optional[NullableRequiredEmptyObjectPostJSON], pydantic.Field(alias="json")] = None
    
