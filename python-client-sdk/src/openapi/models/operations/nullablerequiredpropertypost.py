"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from decimal import Decimal
from enum import Enum
from openapi.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from openapi.utils import (
    serialize_decimal,
    serialize_int,
    validate_decimal,
    validate_int,
)
import pydantic
from pydantic import model_serializer
from pydantic.functional_serializers import PlainSerializer
from pydantic.functional_validators import BeforeValidator
from typing import Any, List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class NullableRequiredEnum(str, Enum):
    FIRST = "first"
    SECOND = "second"
    NULL = "null"


class NullableRequiredPropertyPostRequestBodyTypedDict(TypedDict):
    nullable_required_array: Nullable[List[float]]
    nullable_required_big_int_str: Nullable[int]
    nullable_required_date_time: Nullable[datetime]
    nullable_required_decimal_str: Nullable[Decimal]
    nullable_required_enum: Nullable[NullableRequiredEnum]
    nullable_required_int: Nullable[int]
    nullable_optional_int: NotRequired[Nullable[int]]


class NullableRequiredPropertyPostRequestBody(BaseModel):
    nullable_required_array: Annotated[
        Nullable[List[float]], pydantic.Field(alias="NullableRequiredArray")
    ]

    nullable_required_big_int_str: Annotated[
        Annotated[
            Nullable[int],
            BeforeValidator(validate_int),
            PlainSerializer(serialize_int(True)),
        ],
        pydantic.Field(alias="NullableRequiredBigIntStr"),
    ]

    nullable_required_date_time: Annotated[
        Nullable[datetime], pydantic.Field(alias="NullableRequiredDateTime")
    ]

    nullable_required_decimal_str: Annotated[
        Annotated[
            Nullable[Decimal],
            BeforeValidator(validate_decimal),
            PlainSerializer(serialize_decimal(True)),
        ],
        pydantic.Field(alias="NullableRequiredDecimalStr"),
    ]

    nullable_required_enum: Annotated[
        Nullable[NullableRequiredEnum], pydantic.Field(alias="NullableRequiredEnum")
    ]

    nullable_required_int: Annotated[
        Nullable[int], pydantic.Field(alias="NullableRequiredInt")
    ]

    nullable_optional_int: Annotated[
        OptionalNullable[int], pydantic.Field(alias="NullableOptionalInt")
    ] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["NullableOptionalInt"]
        nullable_fields = [
            "NullableRequiredArray",
            "NullableRequiredBigIntStr",
            "NullableRequiredDateTime",
            "NullableRequiredDecimalStr",
            "NullableRequiredEnum",
            "NullableRequiredInt",
            "NullableOptionalInt",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class NullableRequiredPropertyPostNullableRequiredEnum(str, Enum):
    FIRST = "first"
    SECOND = "second"
    NULL = "null"


class NullableRequiredPropertyPostJSONTypedDict(TypedDict):
    nullable_required_array: Nullable[List[float]]
    nullable_required_big_int_str: Nullable[int]
    nullable_required_date_time: Nullable[datetime]
    nullable_required_decimal_str: Nullable[Decimal]
    nullable_required_enum: Nullable[NullableRequiredPropertyPostNullableRequiredEnum]
    nullable_required_int: Nullable[int]
    nullable_optional_int: NotRequired[Nullable[int]]
    x_speakeasy_test_internal_directives: NotRequired[Any]


class NullableRequiredPropertyPostJSON(BaseModel):
    nullable_required_array: Annotated[
        Nullable[List[float]], pydantic.Field(alias="NullableRequiredArray")
    ]

    nullable_required_big_int_str: Annotated[
        Annotated[
            Nullable[int],
            BeforeValidator(validate_int),
            PlainSerializer(serialize_int(True)),
        ],
        pydantic.Field(alias="NullableRequiredBigIntStr"),
    ]

    nullable_required_date_time: Annotated[
        Nullable[datetime], pydantic.Field(alias="NullableRequiredDateTime")
    ]

    nullable_required_decimal_str: Annotated[
        Annotated[
            Nullable[Decimal],
            BeforeValidator(validate_decimal),
            PlainSerializer(serialize_decimal(True)),
        ],
        pydantic.Field(alias="NullableRequiredDecimalStr"),
    ]

    nullable_required_enum: Annotated[
        Nullable[NullableRequiredPropertyPostNullableRequiredEnum],
        pydantic.Field(alias="NullableRequiredEnum"),
    ]

    nullable_required_int: Annotated[
        Nullable[int], pydantic.Field(alias="NullableRequiredInt")
    ]

    nullable_optional_int: Annotated[
        OptionalNullable[int], pydantic.Field(alias="NullableOptionalInt")
    ] = UNSET

    x_speakeasy_test_internal_directives: Annotated[
        Optional[Any], pydantic.Field(alias="x-speakeasy-test-internal-directives")
    ] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "NullableOptionalInt",
            "x-speakeasy-test-internal-directives",
        ]
        nullable_fields = [
            "NullableRequiredArray",
            "NullableRequiredBigIntStr",
            "NullableRequiredDateTime",
            "NullableRequiredDecimalStr",
            "NullableRequiredEnum",
            "NullableRequiredInt",
            "NullableOptionalInt",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class NullableRequiredPropertyPostResponseBodyTypedDict(TypedDict):
    r"""OK"""

    data: NotRequired[str]
    json_: NotRequired[NullableRequiredPropertyPostJSONTypedDict]


class NullableRequiredPropertyPostResponseBody(BaseModel):
    r"""OK"""

    data: Optional[str] = None

    json_: Annotated[
        Optional[NullableRequiredPropertyPostJSON], pydantic.Field(alias="json")
    ] = None
