"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.models.shared import nullableobject as shared_nullableobject, nullableoptionalobject as shared_nullableoptionalobject
from openapi.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class NullableRequiredSharedObjectPostRequestBodyTypedDict(TypedDict):
    nullable_required_obj: Nullable[shared_nullableobject.NullableObjectTypedDict]
    nullable_optional_obj: NotRequired[Nullable[shared_nullableoptionalobject.NullableOptionalObjectTypedDict]]
    

class NullableRequiredSharedObjectPostRequestBody(BaseModel):
    nullable_required_obj: Annotated[Nullable[shared_nullableobject.NullableObject], pydantic.Field(alias="NullableRequiredObj")]
    nullable_optional_obj: Annotated[OptionalNullable[shared_nullableoptionalobject.NullableOptionalObject], pydantic.Field(alias="NullableOptionalObj")] = UNSET
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["NullableOptionalObj"]
        nullable_fields = ["NullableRequiredObj", "NullableOptionalObj"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val
        
        return m
        

class NullableRequiredSharedObjectPostJSONTypedDict(TypedDict):
    nullable_required_obj: Nullable[shared_nullableobject.NullableObjectTypedDict]
    nullable_optional_obj: NotRequired[Nullable[shared_nullableoptionalobject.NullableOptionalObjectTypedDict]]
    

class NullableRequiredSharedObjectPostJSON(BaseModel):
    nullable_required_obj: Annotated[Nullable[shared_nullableobject.NullableObject], pydantic.Field(alias="NullableRequiredObj")]
    nullable_optional_obj: Annotated[OptionalNullable[shared_nullableoptionalobject.NullableOptionalObject], pydantic.Field(alias="NullableOptionalObj")] = UNSET
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["NullableOptionalObj"]
        nullable_fields = ["NullableRequiredObj", "NullableOptionalObj"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val
        
        return m
        

class NullableRequiredSharedObjectPostResponseBodyTypedDict(TypedDict):
    r"""OK"""
    
    data: NotRequired[str]
    json_: NotRequired[NullableRequiredSharedObjectPostJSONTypedDict]
    

class NullableRequiredSharedObjectPostResponseBody(BaseModel):
    r"""OK"""
    
    data: Optional[str] = None
    json_: Annotated[Optional[NullableRequiredSharedObjectPostJSON], pydantic.Field(alias="json")] = None
    
