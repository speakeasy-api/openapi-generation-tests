"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.types import BaseModel
from openapi.utils import FieldMetadata, QueryParamMetadata, RequestMetadata
import pydantic
from typing import Callable, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict

PAGINATION_AMBIGUOUS_INPUT_SERVERS = [
    "http://localhost:35456",
]


class PaginationAmbiguousInputRequestBodyTypedDict(TypedDict):
    cursor: int


class PaginationAmbiguousInputRequestBody(BaseModel):
    cursor: int


class PaginationAmbiguousInputRequestTypedDict(TypedDict):
    request_body: PaginationAmbiguousInputRequestBodyTypedDict
    cursor: NotRequired[int]


class PaginationAmbiguousInputRequest(BaseModel):
    request_body: Annotated[
        PaginationAmbiguousInputRequestBody,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]

    cursor: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None


class PaginationAmbiguousInputResTypedDict(TypedDict):
    r"""OK"""

    num_pages: int
    result_array: List[int]
    next: NotRequired[str]


class PaginationAmbiguousInputRes(BaseModel):
    r"""OK"""

    num_pages: Annotated[int, pydantic.Field(alias="numPages")]

    result_array: Annotated[List[int], pydantic.Field(alias="resultArray")]

    next: Optional[str] = None


class PaginationAmbiguousInputResponseTypedDict(TypedDict):
    result: PaginationAmbiguousInputResTypedDict


class PaginationAmbiguousInputResponse(BaseModel):
    next: Callable[[], Optional[PaginationAmbiguousInputResponse]]

    result: PaginationAmbiguousInputRes
