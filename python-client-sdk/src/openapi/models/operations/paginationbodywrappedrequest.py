"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.models.shared import limitoffsetconfig as shared_limitoffsetconfig
from openapi.types import BaseModel
from openapi.utils import FieldMetadata, HeaderMetadata, RequestMetadata
import pydantic
from typing import Callable, List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired

PAGINATION_BODY_WRAPPED_REQUEST_SERVERS = [
    "http://localhost:35456",
]


class PaginationBodyWrappedRequestRequestTypedDict(TypedDict):
    limit_offset_config: shared_limitoffsetconfig.LimitOffsetConfigTypedDict
    idempotency_key: NotRequired[str]
    request_id: NotRequired[str]


class PaginationBodyWrappedRequestRequest(BaseModel):
    limit_offset_config: Annotated[
        shared_limitoffsetconfig.LimitOffsetConfig,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]

    idempotency_key: Annotated[
        Optional[str],
        pydantic.Field(alias="idempotency-key"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None

    request_id: Annotated[
        Optional[str],
        pydantic.Field(alias="request-id"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None


class PaginationBodyWrappedRequestResTypedDict(TypedDict):
    r"""OK"""

    num_pages: int
    result_array: List[int]
    next: NotRequired[str]


class PaginationBodyWrappedRequestRes(BaseModel):
    r"""OK"""

    num_pages: Annotated[int, pydantic.Field(alias="numPages")]

    result_array: Annotated[List[int], pydantic.Field(alias="resultArray")]

    next: Optional[str] = None


class PaginationBodyWrappedRequestResponseTypedDict(TypedDict):
    result: PaginationBodyWrappedRequestResTypedDict


class PaginationBodyWrappedRequestResponse(BaseModel):
    next: Callable[[], Optional[PaginationBodyWrappedRequestResponse]]

    result: PaginationBodyWrappedRequestRes
