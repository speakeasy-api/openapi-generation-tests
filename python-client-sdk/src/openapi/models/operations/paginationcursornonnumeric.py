"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.types import BaseModel
from openapi.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import Callable, List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired

PAGINATION_CURSOR_NON_NUMERIC_SERVERS = [
    "http://localhost:35456",
]


class PaginationCursorNonNumericRequestTypedDict(TypedDict):
    cursor: NotRequired[str]
    r"""The page token used to request a specific page of the search results"""


class PaginationCursorNonNumericRequest(BaseModel):
    cursor: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The page token used to request a specific page of the search results"""


class PaginationCursorNonNumericResTypedDict(TypedDict):
    r"""OK"""

    num_pages: int
    result_array: List[str]
    next: NotRequired[str]


class PaginationCursorNonNumericRes(BaseModel):
    r"""OK"""

    num_pages: Annotated[int, pydantic.Field(alias="numPages")]

    result_array: Annotated[List[str], pydantic.Field(alias="resultArray")]

    next: Optional[str] = None


class PaginationCursorNonNumericResponseTypedDict(TypedDict):
    result: PaginationCursorNonNumericResTypedDict


class PaginationCursorNonNumericResponse(BaseModel):
    next: Callable[[], Optional[PaginationCursorNonNumericResponse]]

    result: PaginationCursorNonNumericRes
