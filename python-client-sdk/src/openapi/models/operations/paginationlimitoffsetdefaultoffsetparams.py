"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.types import BaseModel
from openapi.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import Callable, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict

PAGINATION_LIMIT_OFFSET_DEFAULT_OFFSET_PARAMS_SERVERS = [
    "http://localhost:35456",
]


class PaginationLimitOffsetDefaultOffsetParamsRequestTypedDict(TypedDict):
    limit: NotRequired[int]
    offset: NotRequired[int]


class PaginationLimitOffsetDefaultOffsetParamsRequest(BaseModel):
    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 15

    offset: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 10


class PaginationLimitOffsetDefaultOffsetParamsResTypedDict(TypedDict):
    r"""OK"""

    num_pages: int
    result_array: List[int]
    next: NotRequired[str]


class PaginationLimitOffsetDefaultOffsetParamsRes(BaseModel):
    r"""OK"""

    num_pages: Annotated[int, pydantic.Field(alias="numPages")]

    result_array: Annotated[List[int], pydantic.Field(alias="resultArray")]

    next: Optional[str] = None


class PaginationLimitOffsetDefaultOffsetParamsResponseTypedDict(TypedDict):
    result: PaginationLimitOffsetDefaultOffsetParamsResTypedDict


class PaginationLimitOffsetDefaultOffsetParamsResponse(BaseModel):
    next: Callable[[], Optional[PaginationLimitOffsetDefaultOffsetParamsResponse]]

    result: PaginationLimitOffsetDefaultOffsetParamsRes
