"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.types import BaseModel
from openapi.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import Callable, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict

PAGINATION_URL_PARAMS_SERVERS = [
    "http://localhost:35456",
]


class PaginationURLParamsRequestTypedDict(TypedDict):
    attempts: int
    is_reference_path: NotRequired[str]


class PaginationURLParamsRequest(BaseModel):
    attempts: Annotated[
        int, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]

    is_reference_path: Annotated[
        Optional[str],
        pydantic.Field(alias="is-reference-path"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None


class PaginationURLParamsResTypedDict(TypedDict):
    r"""OK"""

    num_pages: int
    result_array: List[int]
    next: NotRequired[str]


class PaginationURLParamsRes(BaseModel):
    r"""OK"""

    num_pages: Annotated[int, pydantic.Field(alias="numPages")]

    result_array: Annotated[List[int], pydantic.Field(alias="resultArray")]

    next: Optional[str] = None


class PaginationURLParamsResponseTypedDict(TypedDict):
    result: PaginationURLParamsResTypedDict


class PaginationURLParamsResponse(BaseModel):
    next: Callable[[], Optional[PaginationURLParamsResponse]]

    result: PaginationURLParamsRes
