"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.types import BaseModel
from openapi.utils import FieldMetadata, HeaderMetadata, QueryParamMetadata
import pydantic
from typing import Callable, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict

PAGINATION_WITH_RETRIES_SERVERS = [
    "http://localhost:35456",
]


class PaginationWithRetriesRequestTypedDict(TypedDict):
    cursor: NotRequired[str]
    r"""The page token used to request a specific page of the search results"""
    fault_settings: NotRequired[str]
    request_id: NotRequired[str]


class PaginationWithRetriesRequest(BaseModel):
    cursor: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The page token used to request a specific page of the search results"""

    fault_settings: Annotated[
        Optional[str],
        pydantic.Field(alias="fault-settings"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = '{"error_code": 503, "error_count": 3}'

    request_id: Annotated[
        Optional[str],
        pydantic.Field(alias="request-id"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = "paginationWithRetries"


class PaginationWithRetriesResTypedDict(TypedDict):
    r"""OK"""

    num_pages: int
    result_array: List[str]
    next: NotRequired[str]


class PaginationWithRetriesRes(BaseModel):
    r"""OK"""

    num_pages: Annotated[int, pydantic.Field(alias="numPages")]

    result_array: Annotated[List[str], pydantic.Field(alias="resultArray")]

    next: Optional[str] = None


class PaginationWithRetriesResponseTypedDict(TypedDict):
    result: PaginationWithRetriesResTypedDict


class PaginationWithRetriesResponse(BaseModel):
    next: Callable[[], Optional[PaginationWithRetriesResponse]]

    result: PaginationWithRetriesRes
