"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.models.shared import limitoffsetconfig as shared_limitoffsetconfig
from openapi.types import BaseModel
from openapi.utils import (
    FieldMetadata,
    HeaderMetadata,
    RequestMetadata,
    SecurityMetadata,
)
import pydantic
from typing import Callable, List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired

PAGINATION_WRAPPED_OPTIONAL_BODY_SERVERS = [
    "http://localhost:35456",
]


class PaginationWrappedOptionalBodySecurityTypedDict(TypedDict):
    pagination_auth: NotRequired[str]


class PaginationWrappedOptionalBodySecurity(BaseModel):
    pagination_auth: Annotated[
        Optional[str],
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True,
                scheme_type="apiKey",
                sub_type="header",
                field_name="x-api-key",
            )
        ),
    ] = None


class PaginationWrappedOptionalBodyRequestTypedDict(TypedDict):
    idempotency_key: NotRequired[str]
    limit_offset_config: NotRequired[
        shared_limitoffsetconfig.LimitOffsetConfigTypedDict
    ]
    request_id: NotRequired[str]


class PaginationWrappedOptionalBodyRequest(BaseModel):
    idempotency_key: Annotated[
        Optional[str],
        pydantic.Field(alias="idempotency-key"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None

    limit_offset_config: Annotated[
        Optional[shared_limitoffsetconfig.LimitOffsetConfig],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ] = None

    request_id: Annotated[
        Optional[str],
        pydantic.Field(alias="request-id"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None


class PaginationWrappedOptionalBodyResTypedDict(TypedDict):
    r"""OK"""

    num_pages: int
    result_array: List[int]
    next: NotRequired[str]


class PaginationWrappedOptionalBodyRes(BaseModel):
    r"""OK"""

    num_pages: Annotated[int, pydantic.Field(alias="numPages")]

    result_array: Annotated[List[int], pydantic.Field(alias="resultArray")]

    next: Optional[str] = None


class PaginationWrappedOptionalBodyResponseTypedDict(TypedDict):
    result: PaginationWrappedOptionalBodyResTypedDict


class PaginationWrappedOptionalBodyResponse(BaseModel):
    next: Callable[[], Optional[PaginationWrappedOptionalBodyResponse]]

    result: PaginationWrappedOptionalBodyRes
