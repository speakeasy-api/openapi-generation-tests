"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import ConfigDict, model_serializer
from typing import Any, Dict, TypedDict
from typing_extensions import Annotated, NotRequired


class PostAdditionalPropertiesWithNullableFieldsRequestBodyTypedDict(TypedDict):
    some_camel_case: NotRequired[Nullable[str]]
    

class PostAdditionalPropertiesWithNullableFieldsRequestBody(BaseModel):
    model_config = ConfigDict(populate_by_name=True, arbitrary_types_allowed=True, extra="allow")
    __pydantic_extra__:  Dict[str, Any] = pydantic.Field(init=False)
    
    some_camel_case: Annotated[OptionalNullable[str], pydantic.Field(alias="someCamelCase")] = UNSET
    
    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value # pyright: ignore[reportIncompatibleVariableOverride]
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["someCamelCase"]
        nullable_fields = ["someCamelCase"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val
        
        for k, v in serialized.items():
            m[k] = v
        
        return m
        

class PostAdditionalPropertiesWithNullableFieldsResponseBodyTypedDict(TypedDict):
    r"""Ok"""
    
    json_: Dict[str, str]
    

class PostAdditionalPropertiesWithNullableFieldsResponseBody(BaseModel):
    r"""Ok"""
    
    json_: Annotated[Dict[str, str], pydantic.Field(alias="json")]
    
