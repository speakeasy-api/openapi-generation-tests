"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from decimal import Decimal
from openapi.models.shared import complexnumbertypes as shared_complexnumbertypes
from openapi.types import BaseModel
from openapi.utils import (
    FieldMetadata,
    PathParamMetadata,
    QueryParamMetadata,
    RequestMetadata,
    serialize_decimal,
    serialize_int,
    validate_decimal,
    validate_int,
)
import pydantic
from pydantic.functional_serializers import PlainSerializer
from pydantic.functional_validators import BeforeValidator
from typing_extensions import Annotated, TypedDict


class RequestBodyPostComplexNumberTypesRequestTypedDict(TypedDict):
    complex_number_types: shared_complexnumbertypes.ComplexNumberTypesTypedDict
    path_big_int: int
    path_big_int_str: int
    path_decimal: Decimal
    path_decimal_str: Decimal
    query_big_int: int
    query_big_int_str: int
    query_decimal: Decimal
    query_decimal_str: Decimal


class RequestBodyPostComplexNumberTypesRequest(BaseModel):
    complex_number_types: Annotated[
        shared_complexnumbertypes.ComplexNumberTypes,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]

    path_big_int: Annotated[
        Annotated[int, BeforeValidator(validate_int)],
        pydantic.Field(alias="pathBigInt"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]

    path_big_int_str: Annotated[
        Annotated[
            int, BeforeValidator(validate_int), PlainSerializer(serialize_int(True))
        ],
        pydantic.Field(alias="pathBigIntStr"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]

    path_decimal: Annotated[
        Annotated[
            Decimal,
            BeforeValidator(validate_decimal),
            PlainSerializer(serialize_decimal(False)),
        ],
        pydantic.Field(alias="pathDecimal"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]

    path_decimal_str: Annotated[
        Annotated[
            Decimal,
            BeforeValidator(validate_decimal),
            PlainSerializer(serialize_decimal(True)),
        ],
        pydantic.Field(alias="pathDecimalStr"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]

    query_big_int: Annotated[
        Annotated[int, BeforeValidator(validate_int)],
        pydantic.Field(alias="queryBigInt"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]

    query_big_int_str: Annotated[
        Annotated[
            int, BeforeValidator(validate_int), PlainSerializer(serialize_int(True))
        ],
        pydantic.Field(alias="queryBigIntStr"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]

    query_decimal: Annotated[
        Annotated[
            Decimal,
            BeforeValidator(validate_decimal),
            PlainSerializer(serialize_decimal(False)),
        ],
        pydantic.Field(alias="queryDecimal"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]

    query_decimal_str: Annotated[
        Annotated[
            Decimal,
            BeforeValidator(validate_decimal),
            PlainSerializer(serialize_decimal(True)),
        ],
        pydantic.Field(alias="queryDecimalStr"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]


class RequestBodyPostComplexNumberTypesResponseBodyTypedDict(TypedDict):
    r"""OK"""

    json_: shared_complexnumbertypes.ComplexNumberTypesTypedDict
    url: str


class RequestBodyPostComplexNumberTypesResponseBody(BaseModel):
    r"""OK"""

    json_: Annotated[
        shared_complexnumbertypes.ComplexNumberTypes, pydantic.Field(alias="json")
    ]

    url: str
