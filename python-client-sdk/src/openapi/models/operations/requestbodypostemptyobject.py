"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.types import BaseModel
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class EmptyTypedDict(TypedDict):
    pass


class Empty(BaseModel):
    pass


class EmptyWithEmptyPropertiesTypedDict(TypedDict):
    pass


class EmptyWithEmptyProperties(BaseModel):
    pass


class RequestBodyPostEmptyObjectRequestBodyTypedDict(TypedDict):
    empty: NotRequired[EmptyTypedDict]
    empty_with_empty_properties: NotRequired[EmptyWithEmptyPropertiesTypedDict]


class RequestBodyPostEmptyObjectRequestBody(BaseModel):
    empty: Optional[Empty] = None

    empty_with_empty_properties: Annotated[
        Optional[EmptyWithEmptyProperties],
        pydantic.Field(alias="emptyWithEmptyProperties"),
    ] = None


class RequestBodyPostEmptyObjectEmptyTypedDict(TypedDict):
    pass


class RequestBodyPostEmptyObjectEmpty(BaseModel):
    pass


class EmptyRespWithEmptyProperiesTypedDict(TypedDict):
    pass


class EmptyRespWithEmptyProperies(BaseModel):
    pass


class RequestBodyPostEmptyObjectResponseBodyTypedDict(TypedDict):
    r"""OK"""

    empty: NotRequired[RequestBodyPostEmptyObjectEmptyTypedDict]
    empty_resp_with_empty_properies: NotRequired[EmptyRespWithEmptyProperiesTypedDict]


class RequestBodyPostEmptyObjectResponseBody(BaseModel):
    r"""OK"""

    empty: Optional[RequestBodyPostEmptyObjectEmpty] = None

    empty_resp_with_empty_properies: Annotated[
        Optional[EmptyRespWithEmptyProperies],
        pydantic.Field(alias="emptyRespWithEmptyProperies"),
    ] = None
