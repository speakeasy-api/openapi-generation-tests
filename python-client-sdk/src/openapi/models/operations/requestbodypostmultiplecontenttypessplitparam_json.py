"""Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from openapi.utils import FieldMetadata, QueryParamMetadata, RequestMetadata
import pydantic
from pydantic import model_serializer
from typing import Any, Dict, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class RequestBodyPostMultipleContentTypesSplitParamJSONRequestBodyTypedDict(TypedDict):
    bool_: bool
    num: float
    str_: str
    

class RequestBodyPostMultipleContentTypesSplitParamJSONRequestBody(BaseModel):
    bool_: Annotated[bool, pydantic.Field(alias="bool")]
    num: float
    str_: Annotated[str, pydantic.Field(alias="str")]
    

class RequestBodyPostMultipleContentTypesSplitParamJSONRequestTypedDict(TypedDict):
    request_body: RequestBodyPostMultipleContentTypesSplitParamJSONRequestBodyTypedDict
    param_str: str
    

class RequestBodyPostMultipleContentTypesSplitParamJSONRequest(BaseModel):
    request_body: Annotated[RequestBodyPostMultipleContentTypesSplitParamJSONRequestBody, FieldMetadata(request=RequestMetadata(media_type="application/json"))]
    param_str: Annotated[str, pydantic.Field(alias="paramStr"), FieldMetadata(query=QueryParamMetadata(style="form", explode=True))]
    

class RequestBodyPostMultipleContentTypesSplitParamJSONResTypedDict(TypedDict):
    r"""OK"""
    
    args: NotRequired[Dict[str, str]]
    form: NotRequired[Dict[str, Any]]
    json_: NotRequired[Nullable[Dict[str, Any]]]
    

class RequestBodyPostMultipleContentTypesSplitParamJSONRes(BaseModel):
    r"""OK"""
    
    args: Optional[Dict[str, str]] = None
    form: Optional[Dict[str, Any]] = None
    json_: Annotated[OptionalNullable[Dict[str, Any]], pydantic.Field(alias="json")] = UNSET
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["args", "form", "json"]
        nullable_fields = ["json"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields
                or (
                    k in optional_fields
                    and k in nullable_fields
                    and (
                        self.__pydantic_fields_set__.intersection({n})
                        or k in null_default_fields
                    )  # pylint: disable=no-member
                )
            ):
                m[k] = val

        return m
        
