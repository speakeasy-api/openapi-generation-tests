"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.types import BaseModel
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class RequestBodyPutMultipartSimpleFormTypedDict(TypedDict):
    any: str
    bool_: str
    date_: str
    date_time: str
    enum: str
    float32: str
    int_: str
    int32: str
    int32_enum: str
    int_enum: str
    num: str
    str_: str
    bigint: NotRequired[str]
    bigint_str: NotRequired[str]
    bool_opt: NotRequired[str]
    decimal: NotRequired[str]
    decimal_str: NotRequired[str]
    int_opt_null: NotRequired[str]
    num_opt_null: NotRequired[str]
    str_opt: NotRequired[str]


class RequestBodyPutMultipartSimpleForm(BaseModel):
    any: str

    bool_: Annotated[str, pydantic.Field(alias="bool")]

    date_: Annotated[str, pydantic.Field(alias="date")]

    date_time: Annotated[str, pydantic.Field(alias="dateTime")]

    enum: str

    float32: str

    int_: Annotated[str, pydantic.Field(alias="int")]

    int32: str

    int32_enum: Annotated[str, pydantic.Field(alias="int32Enum")]

    int_enum: Annotated[str, pydantic.Field(alias="intEnum")]

    num: str

    str_: Annotated[str, pydantic.Field(alias="str")]

    bigint: Optional[str] = None

    bigint_str: Annotated[Optional[str], pydantic.Field(alias="bigintStr")] = None

    bool_opt: Annotated[Optional[str], pydantic.Field(alias="boolOpt")] = None

    decimal: Optional[str] = None

    decimal_str: Annotated[Optional[str], pydantic.Field(alias="decimalStr")] = None

    int_opt_null: Annotated[Optional[str], pydantic.Field(alias="intOptNull")] = None

    num_opt_null: Annotated[Optional[str], pydantic.Field(alias="numOptNull")] = None

    str_opt: Annotated[Optional[str], pydantic.Field(alias="strOpt")] = None


class RequestBodyPutMultipartSimpleHeadersTypedDict(TypedDict):
    content_type: str


class RequestBodyPutMultipartSimpleHeaders(BaseModel):
    content_type: Annotated[str, pydantic.Field(alias="Content-Type")]


class RequestBodyPutMultipartSimpleResTypedDict(TypedDict):
    r"""OK"""

    form: RequestBodyPutMultipartSimpleFormTypedDict
    headers: RequestBodyPutMultipartSimpleHeadersTypedDict


class RequestBodyPutMultipartSimpleRes(BaseModel):
    r"""OK"""

    form: RequestBodyPutMultipartSimpleForm

    headers: RequestBodyPutMultipartSimpleHeaders
