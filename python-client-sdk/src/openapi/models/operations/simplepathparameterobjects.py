"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.models.shared import simpleobject as shared_simpleobject
from openapi.types import BaseModel
from openapi.utils import FieldMetadata, PathParamMetadata
import pydantic
from typing import TypedDict
from typing_extensions import Annotated


class SimplePathParameterObjectsRequestTypedDict(TypedDict):
    obj_param: shared_simpleobject.SimpleObjectTypedDict
    r"""A simple object that uses all our supported primitive types and enums and has optional properties."""
    obj_param_exploded: shared_simpleobject.SimpleObjectTypedDict
    r"""A simple object that uses all our supported primitive types and enums and has optional properties."""
    

class SimplePathParameterObjectsRequest(BaseModel):
    obj_param: Annotated[shared_simpleobject.SimpleObject, pydantic.Field(alias="objParam"), FieldMetadata(path=PathParamMetadata(style="simple", explode=False))]
    r"""A simple object that uses all our supported primitive types and enums and has optional properties."""
    obj_param_exploded: Annotated[shared_simpleobject.SimpleObject, pydantic.Field(alias="objParamExploded"), FieldMetadata(path=PathParamMetadata(style="simple", explode=True))]
    r"""A simple object that uses all our supported primitive types and enums and has optional properties."""
    

class SimplePathParameterObjectsResTypedDict(TypedDict):
    r"""OK"""
    
    url: str
    

class SimplePathParameterObjectsRes(BaseModel):
    r"""OK"""
    
    url: str
    
