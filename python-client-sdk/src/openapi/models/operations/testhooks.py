"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.types import BaseModel
from openapi.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class TestHooksRequestTypedDict(TypedDict):
    __test__ = False  # pyright: ignore[reportGeneralTypeIssues]

    some_param: str


class TestHooksRequest(BaseModel):
    __test__ = False

    some_param: Annotated[
        str,
        pydantic.Field(alias="someParam"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]


class TestHooksArgsTypedDict(TypedDict):
    __test__ = False  # pyright: ignore[reportGeneralTypeIssues]

    some_param: str


class TestHooksArgs(BaseModel):
    __test__ = False

    some_param: Annotated[str, pydantic.Field(alias="someParam")]


class HeadersTypedDict(TypedDict):
    client_level_header: NotRequired[str]
    idempotency_key: NotRequired[str]


class Headers(BaseModel):
    client_level_header: Annotated[
        Optional[str], pydantic.Field(alias="Client-Level-Header")
    ] = None

    idempotency_key: Annotated[
        Optional[str], pydantic.Field(alias="Idempotency-Key")
    ] = None


class TestHooksResTypedDict(TypedDict):
    r"""OK"""

    __test__ = False  # pyright: ignore[reportGeneralTypeIssues]

    args: TestHooksArgsTypedDict
    headers: HeadersTypedDict
    url: str


class TestHooksRes(BaseModel):
    r"""OK"""

    __test__ = False

    args: TestHooksArgs

    headers: Headers

    url: str
