"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import date
from decimal import Decimal
from openapi.types import BaseModel
from openapi.utils import (
    FieldMetadata,
    QueryParamMetadata,
    serialize_decimal,
    validate_decimal,
    validate_int,
)
import pydantic
from pydantic.functional_serializers import PlainSerializer
from pydantic.functional_validators import BeforeValidator
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ObjTypedDict(TypedDict):
    bool_: bool
    num: float
    str_: str


class Obj(BaseModel):
    bool_: Annotated[bool, pydantic.Field(alias="bool"), FieldMetadata(query=True)]

    num: Annotated[float, FieldMetadata(query=True)]

    str_: Annotated[str, pydantic.Field(alias="str"), FieldMetadata(query=True)]


class TypedParameterGenerationGetRequestTypedDict(TypedDict):
    bigint: NotRequired[int]
    date_: NotRequired[date]
    decimal: NotRequired[Decimal]
    obj: NotRequired[ObjTypedDict]


class TypedParameterGenerationGetRequest(BaseModel):
    bigint: Annotated[
        Annotated[Optional[int], BeforeValidator(validate_int)],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    date_: Annotated[
        Optional[date],
        pydantic.Field(alias="date"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    decimal: Annotated[
        Annotated[
            Optional[Decimal],
            BeforeValidator(validate_decimal),
            PlainSerializer(serialize_decimal(False)),
        ],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    obj: Annotated[
        Optional[Obj],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
