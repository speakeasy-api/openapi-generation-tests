"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import date, datetime
from decimal import Decimal
from enum import Enum
from openapi.models.shared import (
    fakerformattedstrings as shared_fakerformattedstrings,
    fakerstrings as shared_fakerstrings,
    simpleobject as shared_simpleobject,
)
from openapi.types import BaseModel, Nullable, UNSET_SENTINEL
from openapi.utils import (
    FieldMetadata,
    QueryParamMetadata,
    RequestMetadata,
    SecurityMetadata,
    serialize_decimal,
    serialize_float,
    serialize_int,
    validate_decimal,
    validate_float,
    validate_int,
)
import pydantic
from pydantic import model_serializer
from pydantic.functional_serializers import PlainSerializer
from pydantic.functional_validators import BeforeValidator
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class UsageExamplePostSecurityTypedDict(TypedDict):
    password: str
    username: str


class UsageExamplePostSecurity(BaseModel):
    password: Annotated[
        str,
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True, scheme_type="http", sub_type="basic", field_name="password"
            )
        ),
    ]

    username: Annotated[
        str,
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True, scheme_type="http", sub_type="basic", field_name="username"
            )
        ),
    ]


class UsageExamplePostRequestBodyTypedDict(TypedDict):
    r"""A request body that contains fields with different formats for testing example generation"""

    faker_formatted_strings: NotRequired[
        shared_fakerformattedstrings.FakerFormattedStringsTypedDict
    ]
    r"""A set of strings with format values that lead to relevant examples being generated for them"""
    faker_strings: NotRequired[shared_fakerstrings.FakerStringsTypedDict]
    r"""A set of strings with fieldnames that lead to relevant examples being generated for them"""
    simple_object: NotRequired[shared_simpleobject.SimpleObjectTypedDict]
    r"""A simple object that uses all our supported primitive types and enums and has optional properties.
    https://speakeasy.com/docs - A link to the external docs.
    """


class UsageExamplePostRequestBody(BaseModel):
    r"""A request body that contains fields with different formats for testing example generation"""

    faker_formatted_strings: Annotated[
        Optional[shared_fakerformattedstrings.FakerFormattedStrings],
        pydantic.Field(alias="fakerFormattedStrings"),
    ] = None
    r"""A set of strings with format values that lead to relevant examples being generated for them"""

    faker_strings: Annotated[
        Optional[shared_fakerstrings.FakerStrings], pydantic.Field(alias="fakerStrings")
    ] = None
    r"""A set of strings with fieldnames that lead to relevant examples being generated for them"""

    simple_object: Annotated[
        Optional[shared_simpleobject.SimpleObject], pydantic.Field(alias="simpleObject")
    ] = None
    r"""A simple object that uses all our supported primitive types and enums and has optional properties.
    https://speakeasy.com/docs - A link to the external docs.
    """


class EnumParameter(str, Enum):
    r"""An enum type"""

    VALUE1 = "value1"
    VALUE2 = "value2"
    VALUE3 = "value3"


class OptEnumParameter(str, Enum):
    r"""An enum type"""

    VALUE1 = "value1"
    VALUE2 = "value2"
    VALUE3 = "value3"


class UsageExamplePostRequestTypedDict(TypedDict):
    bigint_parameter: int
    r"""An bigint parameter"""
    bigint_str_parameter: int
    r"""An bigint parameter"""
    bool_parameter: bool
    r"""A boolean parameter"""
    date_parameter: date
    r"""A date parameter"""
    date_time_default_parameter: datetime
    r"""A date time parameter with a default value"""
    date_time_parameter: datetime
    r"""A date time parameter"""
    decimal_parameter: Decimal
    r"""A decimal parameter"""
    decimal_str_parameter: Decimal
    r"""A decimal parameter"""
    double_parameter: float
    r"""A double parameter"""
    enum_parameter: EnumParameter
    r"""An enum parameter"""
    falsey_number_parameter: float
    r"""A number parameter that contains a falsey example value"""
    float32_parameter: float
    r"""A float32 parameter"""
    float64_string_parameter: float
    r"""A float64 parameter"""
    float_parameter: float
    r"""A float parameter"""
    int64_parameter: int
    r"""An int64 parameter"""
    int64_string_parameter: int
    r"""An int64 parameter"""
    int_parameter: int
    r"""An integer parameter"""
    str_parameter: str
    r"""A string parameter"""
    request_body: NotRequired[UsageExamplePostRequestBodyTypedDict]
    r"""A request body that contains fields with different formats for testing example generation"""
    bigint_parameter_optional: NotRequired[int]
    r"""An bigint parameter"""
    bigint_str_parameter_optional: NotRequired[int]
    r"""An bigint parameter"""
    decimal_parameter_optional: NotRequired[Decimal]
    r"""A decimal parameter"""
    decimal_str_parameter_optional: NotRequired[Decimal]
    r"""A decimal parameter"""
    opt_enum_parameter: NotRequired[OptEnumParameter]
    r"""An enum parameter"""


class UsageExamplePostRequest(BaseModel):
    bigint_parameter: Annotated[
        Annotated[int, BeforeValidator(validate_int)],
        pydantic.Field(alias="bigintParameter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""An bigint parameter"""

    bigint_str_parameter: Annotated[
        Annotated[
            int, BeforeValidator(validate_int), PlainSerializer(serialize_int(True))
        ],
        pydantic.Field(alias="bigintStrParameter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""An bigint parameter"""

    bool_parameter: Annotated[
        bool,
        pydantic.Field(alias="boolParameter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""A boolean parameter"""

    date_parameter: Annotated[
        date,
        pydantic.Field(alias="dateParameter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""A date parameter"""

    date_time_default_parameter: Annotated[
        datetime,
        pydantic.Field(alias="dateTimeDefaultParameter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""A date time parameter with a default value"""

    date_time_parameter: Annotated[
        datetime,
        pydantic.Field(alias="dateTimeParameter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""A date time parameter"""

    decimal_parameter: Annotated[
        Annotated[
            Decimal,
            BeforeValidator(validate_decimal),
            PlainSerializer(serialize_decimal(False)),
        ],
        pydantic.Field(alias="decimalParameter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""A decimal parameter"""

    decimal_str_parameter: Annotated[
        Annotated[
            Decimal,
            BeforeValidator(validate_decimal),
            PlainSerializer(serialize_decimal(True)),
        ],
        pydantic.Field(alias="decimalStrParameter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""A decimal parameter"""

    double_parameter: Annotated[
        float,
        pydantic.Field(alias="doubleParameter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""A double parameter"""

    enum_parameter: Annotated[
        EnumParameter,
        pydantic.Field(alias="enumParameter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""An enum parameter"""

    falsey_number_parameter: Annotated[
        float,
        pydantic.Field(alias="falseyNumberParameter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""A number parameter that contains a falsey example value"""

    float32_parameter: Annotated[
        float,
        pydantic.Field(alias="float32Parameter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""A float32 parameter"""

    float64_string_parameter: Annotated[
        Annotated[
            float,
            BeforeValidator(validate_float),
            PlainSerializer(serialize_float(True)),
        ],
        pydantic.Field(alias="float64StringParameter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""A float64 parameter"""

    float_parameter: Annotated[
        float,
        pydantic.Field(alias="floatParameter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""A float parameter"""

    int64_parameter: Annotated[
        int,
        pydantic.Field(alias="int64Parameter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""An int64 parameter"""

    int64_string_parameter: Annotated[
        Annotated[
            int, BeforeValidator(validate_int), PlainSerializer(serialize_int(True))
        ],
        pydantic.Field(alias="int64StringParameter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""An int64 parameter"""

    int_parameter: Annotated[
        int,
        pydantic.Field(alias="intParameter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""An integer parameter"""

    str_parameter: Annotated[
        str,
        pydantic.Field(alias="strParameter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""A string parameter"""

    request_body: Annotated[
        Optional[UsageExamplePostRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ] = None
    r"""A request body that contains fields with different formats for testing example generation"""

    bigint_parameter_optional: Annotated[
        Annotated[Optional[int], BeforeValidator(validate_int)],
        pydantic.Field(alias="bigintParameterOptional"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""An bigint parameter"""

    bigint_str_parameter_optional: Annotated[
        Annotated[
            Optional[int],
            BeforeValidator(validate_int),
            PlainSerializer(serialize_int(True)),
        ],
        pydantic.Field(alias="bigintStrParameterOptional"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""An bigint parameter"""

    decimal_parameter_optional: Annotated[
        Annotated[
            Optional[Decimal],
            BeforeValidator(validate_decimal),
            PlainSerializer(serialize_decimal(False)),
        ],
        pydantic.Field(alias="decimalParameterOptional"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A decimal parameter"""

    decimal_str_parameter_optional: Annotated[
        Annotated[
            Optional[Decimal],
            BeforeValidator(validate_decimal),
            PlainSerializer(serialize_decimal(True)),
        ],
        pydantic.Field(alias="decimalStrParameterOptional"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A decimal parameter"""

    opt_enum_parameter: Annotated[
        Optional[OptEnumParameter],
        pydantic.Field(alias="optEnumParameter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""An enum parameter"""


class UsageExamplePostJSONTypedDict(TypedDict):
    faker_formatted_strings: NotRequired[
        shared_fakerformattedstrings.FakerFormattedStringsTypedDict
    ]
    r"""A set of strings with format values that lead to relevant examples being generated for them"""
    faker_strings: NotRequired[shared_fakerstrings.FakerStringsTypedDict]
    r"""A set of strings with fieldnames that lead to relevant examples being generated for them"""
    simple_object: NotRequired[shared_simpleobject.SimpleObjectTypedDict]
    r"""A simple object that uses all our supported primitive types and enums and has optional properties.
    https://speakeasy.com/docs - A link to the external docs.
    """


class UsageExamplePostJSON(BaseModel):
    faker_formatted_strings: Annotated[
        Optional[shared_fakerformattedstrings.FakerFormattedStrings],
        pydantic.Field(alias="fakerFormattedStrings"),
    ] = None
    r"""A set of strings with format values that lead to relevant examples being generated for them"""

    faker_strings: Annotated[
        Optional[shared_fakerstrings.FakerStrings], pydantic.Field(alias="fakerStrings")
    ] = None
    r"""A set of strings with fieldnames that lead to relevant examples being generated for them"""

    simple_object: Annotated[
        Optional[shared_simpleobject.SimpleObject], pydantic.Field(alias="simpleObject")
    ] = None
    r"""A simple object that uses all our supported primitive types and enums and has optional properties.
    https://speakeasy.com/docs - A link to the external docs.
    """


class UsageExamplePostResponseBodyTypedDict(TypedDict):
    r"""A response body that contains the simpleObject sent in the request body"""

    json_: Nullable[UsageExamplePostJSONTypedDict]


class UsageExamplePostResponseBody(BaseModel):
    r"""A response body that contains the simpleObject sent in the request body"""

    json_: Annotated[Nullable[UsageExamplePostJSON], pydantic.Field(alias="json")]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["json"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
