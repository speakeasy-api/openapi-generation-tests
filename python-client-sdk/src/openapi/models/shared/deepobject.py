"""Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT."""

from __future__ import annotations
from .simpleobject import SimpleObject, SimpleObjectTypedDict
from openapi.types import BaseModel
from openapi.utils import FieldMetadata, FormMetadata, MultipartFormMetadata
import pydantic
from typing import Dict, List, Optional, TypedDict, Union
from typing_extensions import Annotated, NotRequired


class DeepObjectTypedDict(TypedDict):
    any: AnyTTypedDict
    arr: List[SimpleObjectTypedDict]
    bool_: bool
    int_: int
    map: Dict[str, SimpleObjectTypedDict]
    num: float
    obj: SimpleObjectTypedDict
    r"""A simple object that uses all our supported primitive types and enums and has optional properties.
    https://speakeasy.com/docs - A link to the external docs.
    """
    str_: str
    type: NotRequired[str]
    

class DeepObject(BaseModel):
    any: Annotated[AnyT, FieldMetadata(form=FormMetadata(json=True), multipart=MultipartFormMetadata(json=True))]
    arr: Annotated[List[SimpleObject], FieldMetadata(form=FormMetadata(json=True), multipart=MultipartFormMetadata(json=True))]
    bool_: Annotated[bool, pydantic.Field(alias="bool"), FieldMetadata(form=True, multipart=True)]
    int_: Annotated[int, pydantic.Field(alias="int"), FieldMetadata(form=True, multipart=True)]
    map: Annotated[Dict[str, SimpleObject], FieldMetadata(form=FormMetadata(json=True), multipart=MultipartFormMetadata(json=True))]
    num: Annotated[float, FieldMetadata(form=True, multipart=True)]
    obj: Annotated[SimpleObject, FieldMetadata(form=FormMetadata(json=True), multipart=MultipartFormMetadata(json=True))]
    r"""A simple object that uses all our supported primitive types and enums and has optional properties.
    https://speakeasy.com/docs - A link to the external docs.
    """
    str_: Annotated[str, pydantic.Field(alias="str"), FieldMetadata(form=True, multipart=True)]
    type: Annotated[Optional[str], FieldMetadata(form=True, multipart=True)] = None
    

AnyTTypedDict = Union[SimpleObjectTypedDict, str]


AnyT = Union[SimpleObject, str]

