"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .simpleobjectcamelcase import SimpleObjectCamelCase, SimpleObjectCamelCaseTypedDict
from openapi.types import BaseModel
from typing import Dict, List, Optional, Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict


AnyValTypedDict = TypeAliasType(
    "AnyValTypedDict", Union[SimpleObjectCamelCaseTypedDict, str]
)


AnyVal = TypeAliasType("AnyVal", Union[SimpleObjectCamelCase, str])


class DeepObjectCamelCaseTypedDict(TypedDict):
    any_val: AnyValTypedDict
    arr_val: List[SimpleObjectCamelCaseTypedDict]
    bool_val: bool
    int_val: int
    map_val: Dict[str, SimpleObjectCamelCaseTypedDict]
    num_val: float
    obj_val: SimpleObjectCamelCaseTypedDict
    r"""A simple object that uses all our supported primitive types and enums and has optional properties.
    https://speakeasy.com/docs - A link to the external docs.
    """
    str_val: str
    type: NotRequired[str]


class DeepObjectCamelCase(BaseModel):
    any_val: AnyVal

    arr_val: List[SimpleObjectCamelCase]

    bool_val: bool

    int_val: int

    map_val: Dict[str, SimpleObjectCamelCase]

    num_val: float

    obj_val: SimpleObjectCamelCase
    r"""A simple object that uses all our supported primitive types and enums and has optional properties.
    https://speakeasy.com/docs - A link to the external docs.
    """

    str_val: str

    type: Optional[str] = None
