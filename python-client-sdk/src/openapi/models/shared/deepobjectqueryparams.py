"""Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT."""

from __future__ import annotations
from .simpleobject import SimpleObject, SimpleObjectTypedDict
from openapi.types import BaseModel
from openapi.utils import FieldMetadata
import pydantic
from typing import Dict, List, TypedDict
from typing_extensions import Annotated


class DeepObjectQueryParamsTypedDict(TypedDict):
    r"""deepObject style query parameter serialization is undefined for arrays or nested objects by the specification:
    https://github.com/OAI/OpenAPI-Specification/issues/1706
    This schema covers the intended implementation cases rather than the fully complex deepObject schema.

    """
    
    arr: List[str]
    bool_: bool
    int_: int
    map: Dict[str, str]
    num: float
    obj: SimpleObjectTypedDict
    r"""A simple object that uses all our supported primitive types and enums and has optional properties.
    https://speakeasy.com/docs - A link to the external docs.
    """
    str_: str
    

class DeepObjectQueryParams(BaseModel):
    r"""deepObject style query parameter serialization is undefined for arrays or nested objects by the specification:
    https://github.com/OAI/OpenAPI-Specification/issues/1706
    This schema covers the intended implementation cases rather than the fully complex deepObject schema.

    """
    
    arr: Annotated[List[str], FieldMetadata(query=True)]
    bool_: Annotated[bool, pydantic.Field(alias="bool"), FieldMetadata(query=True)]
    int_: Annotated[int, pydantic.Field(alias="int"), FieldMetadata(query=True)]
    map: Annotated[Dict[str, str], FieldMetadata(query=True)]
    num: Annotated[float, FieldMetadata(query=True)]
    obj: Annotated[SimpleObject, FieldMetadata(query=True)]
    r"""A simple object that uses all our supported primitive types and enums and has optional properties.
    https://speakeasy.com/docs - A link to the external docs.
    """
    str_: Annotated[str, pydantic.Field(alias="str"), FieldMetadata(query=True)]
    
