"""Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT."""

from __future__ import annotations
from .simpleobject import SimpleObject, SimpleObjectTypedDict
from openapi.types import BaseModel
import pydantic
from typing import Dict, List, Optional, TypedDict, Union
from typing_extensions import Annotated, NotRequired


class DeepObjectWithTypeTypedDict(TypedDict):
    any: DeepObjectWithTypeAnyTypedDict
    arr: List[SimpleObjectTypedDict]
    bool_: bool
    int_: int
    map: Dict[str, SimpleObjectTypedDict]
    num: float
    obj: SimpleObjectTypedDict
    r"""A simple object that uses all our supported primitive types and enums and has optional properties.
    https://speakeasy.com/docs - A link to the external docs.
    """
    str_: str
    type: NotRequired[str]
    

class DeepObjectWithType(BaseModel):
    any: DeepObjectWithTypeAny
    arr: List[SimpleObject]
    bool_: Annotated[bool, pydantic.Field(alias="bool")]
    int_: Annotated[int, pydantic.Field(alias="int")]
    map: Dict[str, SimpleObject]
    num: float
    obj: SimpleObject
    r"""A simple object that uses all our supported primitive types and enums and has optional properties.
    https://speakeasy.com/docs - A link to the external docs.
    """
    str_: Annotated[str, pydantic.Field(alias="str")]
    type: Optional[str] = None
    

DeepObjectWithTypeAnyTypedDict = Union[SimpleObjectTypedDict, str]


DeepObjectWithTypeAny = Union[SimpleObject, str]

