"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import date, datetime
import dateutil.parser
from decimal import Decimal
from enum import Enum
from openapi.types import BaseModel, Nullable, OptionalNullable, UNSET_SENTINEL
from openapi.utils import (
    serialize_decimal,
    serialize_int,
    validate_const,
    validate_decimal,
    validate_int,
)
import pydantic
from pydantic import model_serializer
from pydantic.functional_serializers import PlainSerializer
from pydantic.functional_validators import AfterValidator, BeforeValidator
from typing import Literal, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ConstEnumInt(int, Enum):
    ONE = 1
    TWO = 2
    THREE = 3


class ConstEnumStr(str, Enum):
    ONE = "one"
    TWO = "two"
    THREE = "three"


class DefaultEnumInt(int, Enum):
    ONE = 1
    TWO = 2
    THREE = 3


class DefaultEnumStr(str, Enum):
    ONE = "one"
    TWO = "two"
    THREE = "three"


class DefaultsAndConstsTypedDict(TypedDict):
    normal_field: str
    const_big_int: Literal[9007199254740991]
    const_big_int_str: Literal[9223372036854775807]
    const_bool: Literal[True]
    const_date: date
    const_date_time: datetime
    const_decimal: Decimal
    const_decimal_str: Decimal
    const_enum_int: ConstEnumInt
    const_enum_str: ConstEnumStr
    const_int: Literal[123]
    const_num: float
    const_str: Literal["const"]
    const_str_d_quotes: Literal['const with "double quotes"']
    const_str_null: Nullable[Literal[None]]
    const_str_s_quotes: Literal["const with 'single quotes'"]
    default_big_int: NotRequired[int]
    default_big_int_str: NotRequired[int]
    default_bool: NotRequired[bool]
    default_date: NotRequired[date]
    default_date_time: NotRequired[datetime]
    default_decimal: NotRequired[Decimal]
    default_decimal_str: NotRequired[Decimal]
    default_enum_int: NotRequired[DefaultEnumInt]
    default_enum_str: NotRequired[DefaultEnumStr]
    default_int: NotRequired[int]
    default_num: NotRequired[float]
    default_str: NotRequired[str]
    default_str_d_quotes: NotRequired[str]
    default_str_nullable: NotRequired[Nullable[str]]
    default_str_optional: NotRequired[str]
    default_str_s_quotes: NotRequired[str]


class DefaultsAndConsts(BaseModel):
    normal_field: Annotated[str, pydantic.Field(alias="normalField")]

    CONST_BIG_INT: Annotated[
        Annotated[
            Literal[9007199254740991],
            BeforeValidator(validate_int),
            AfterValidator(validate_const(9007199254740991)),
        ],
        pydantic.Field(alias="constBigInt"),
    ] = 9007199254740991

    CONST_BIG_INT_STR: Annotated[
        Annotated[
            Literal[9223372036854775807],
            BeforeValidator(validate_int),
            AfterValidator(validate_const(9223372036854775807)),
            PlainSerializer(serialize_int(True)),
        ],
        pydantic.Field(alias="constBigIntStr"),
    ] = 9223372036854775807

    CONST_BOOL: Annotated[
        Annotated[Literal[True], AfterValidator(validate_const(True))],
        pydantic.Field(alias="constBool"),
    ] = True

    CONST_DATE: Annotated[
        Annotated[
            date,
            AfterValidator(validate_const(dateutil.parser.parse("2020-01-01").date())),
        ],
        pydantic.Field(alias="constDate"),
    ] = dateutil.parser.parse("2020-01-01").date()

    CONST_DATE_TIME: Annotated[
        Annotated[
            datetime,
            AfterValidator(
                validate_const(dateutil.parser.isoparse("2020-01-01T00:00:00Z"))
            ),
        ],
        pydantic.Field(alias="constDateTime"),
    ] = dateutil.parser.isoparse("2020-01-01T00:00:00Z")

    CONST_DECIMAL: Annotated[
        Annotated[
            Decimal,
            BeforeValidator(validate_decimal),
            AfterValidator(validate_const(Decimal("3.141592653589793"))),
            PlainSerializer(serialize_decimal(False)),
        ],
        pydantic.Field(alias="constDecimal"),
    ] = Decimal("3.141592653589793")

    CONST_DECIMAL_STR: Annotated[
        Annotated[
            Decimal,
            BeforeValidator(validate_decimal),
            AfterValidator(validate_const(Decimal("3.141592653589793238462643383279"))),
            PlainSerializer(serialize_decimal(True)),
        ],
        pydantic.Field(alias="constDecimalStr"),
    ] = Decimal("3.141592653589793238462643383279")

    CONST_ENUM_INT: Annotated[
        Annotated[ConstEnumInt, AfterValidator(validate_const(ConstEnumInt.TWO))],
        pydantic.Field(alias="constEnumInt"),
    ] = ConstEnumInt.TWO

    CONST_ENUM_STR: Annotated[
        Annotated[ConstEnumStr, AfterValidator(validate_const(ConstEnumStr.TWO))],
        pydantic.Field(alias="constEnumStr"),
    ] = ConstEnumStr.TWO

    CONST_INT: Annotated[
        Annotated[Literal[123], AfterValidator(validate_const(123))],
        pydantic.Field(alias="constInt"),
    ] = 123

    CONST_NUM: Annotated[
        Annotated[float, AfterValidator(validate_const(123.456))],
        pydantic.Field(alias="constNum"),
    ] = 123.456

    CONST_STR: Annotated[
        Annotated[Literal["const"], AfterValidator(validate_const("const"))],
        pydantic.Field(alias="constStr"),
    ] = "const"

    CONST_STR_D_QUOTES: Annotated[
        Annotated[
            Literal['const with "double quotes"'],
            AfterValidator(validate_const('const with "double quotes"')),
        ],
        pydantic.Field(alias="constStrDQuotes"),
    ] = 'const with "double quotes"'

    CONST_STR_NULL: Annotated[
        Annotated[Nullable[Literal[None]], AfterValidator(validate_const(None))],
        pydantic.Field(alias="constStrNull"),
    ] = None

    CONST_STR_S_QUOTES: Annotated[
        Annotated[
            Literal["const with 'single quotes'"],
            AfterValidator(validate_const("const with 'single quotes'")),
        ],
        pydantic.Field(alias="constStrSQuotes"),
    ] = "const with 'single quotes'"

    default_big_int: Annotated[
        Annotated[Optional[int], BeforeValidator(validate_int)],
        pydantic.Field(alias="defaultBigInt"),
    ] = 9007199254740991

    default_big_int_str: Annotated[
        Annotated[
            Optional[int],
            BeforeValidator(validate_int),
            PlainSerializer(serialize_int(True)),
        ],
        pydantic.Field(alias="defaultBigIntStr"),
    ] = 9223372036854775807

    default_bool: Annotated[Optional[bool], pydantic.Field(alias="defaultBool")] = True

    default_date: Annotated[Optional[date], pydantic.Field(alias="defaultDate")] = (
        dateutil.parser.parse("2020-01-01").date()
    )

    default_date_time: Annotated[
        Optional[datetime], pydantic.Field(alias="defaultDateTime")
    ] = dateutil.parser.isoparse("2020-01-01T00:00:00Z")

    default_decimal: Annotated[
        Annotated[
            Optional[Decimal],
            BeforeValidator(validate_decimal),
            PlainSerializer(serialize_decimal(False)),
        ],
        pydantic.Field(alias="defaultDecimal"),
    ] = Decimal("3.141592653589793")

    default_decimal_str: Annotated[
        Annotated[
            Optional[Decimal],
            BeforeValidator(validate_decimal),
            PlainSerializer(serialize_decimal(True)),
        ],
        pydantic.Field(alias="defaultDecimalStr"),
    ] = Decimal("3.141592653589793238462643383279")

    default_enum_int: Annotated[
        Optional[DefaultEnumInt], pydantic.Field(alias="defaultEnumInt")
    ] = DefaultEnumInt.TWO

    default_enum_str: Annotated[
        Optional[DefaultEnumStr], pydantic.Field(alias="defaultEnumStr")
    ] = DefaultEnumStr.TWO

    default_int: Annotated[Optional[int], pydantic.Field(alias="defaultInt")] = 123

    default_num: Annotated[Optional[float], pydantic.Field(alias="defaultNum")] = (
        123.456
    )

    default_str: Annotated[Optional[str], pydantic.Field(alias="defaultStr")] = (
        "default"
    )

    default_str_d_quotes: Annotated[
        Optional[str], pydantic.Field(alias="defaultStrDQuotes")
    ] = 'default with "double quotes"'

    default_str_nullable: Annotated[
        OptionalNullable[str], pydantic.Field(alias="defaultStrNullable")
    ] = None

    default_str_optional: Annotated[
        Optional[str], pydantic.Field(alias="defaultStrOptional")
    ] = "default"

    default_str_s_quotes: Annotated[
        Optional[str], pydantic.Field(alias="defaultStrSQuotes")
    ] = "default with 'single quotes'"

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "defaultBigInt",
            "defaultBigIntStr",
            "defaultBool",
            "defaultDate",
            "defaultDateTime",
            "defaultDecimal",
            "defaultDecimalStr",
            "defaultEnumInt",
            "defaultEnumStr",
            "defaultInt",
            "defaultNum",
            "defaultStr",
            "defaultStrDQuotes",
            "defaultStrNullable",
            "defaultStrOptional",
            "defaultStrSQuotes",
        ]
        nullable_fields = ["constStrNull", "defaultStrNullable"]
        null_default_fields = ["defaultStrNullable"]

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
