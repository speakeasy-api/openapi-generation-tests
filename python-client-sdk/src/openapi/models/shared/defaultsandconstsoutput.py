"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from datetime import date, datetime
from decimal import Decimal
from enum import Enum
from openapi.types import BaseModel, Nullable, UNSET_SENTINEL
from openapi.utils import serialize_decimal, serialize_int, validate_decimal, validate_int
import pydantic
from pydantic import model_serializer
from pydantic.functional_serializers import PlainSerializer
from pydantic.functional_validators import BeforeValidator
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class DefaultsAndConstsOutputConstEnumInt(int, Enum):
    ONE = 1
    TWO = 2
    THREE = 3

class DefaultsAndConstsOutputConstEnumStr(str, Enum):
    ONE = "one"
    TWO = "two"
    THREE = "three"

class DefaultsAndConstsOutputDefaultEnumInt(int, Enum):
    ONE = 1
    TWO = 2
    THREE = 3

class DefaultsAndConstsOutputDefaultEnumStr(str, Enum):
    ONE = "one"
    TWO = "two"
    THREE = "three"

class DefaultsAndConstsOutputTypedDict(TypedDict):
    const_big_int: int
    const_big_int_str: int
    const_bool: bool
    const_date: date
    const_date_time: datetime
    const_decimal: Decimal
    const_decimal_str: Decimal
    const_enum_int: DefaultsAndConstsOutputConstEnumInt
    const_enum_str: DefaultsAndConstsOutputConstEnumStr
    const_int: int
    const_num: float
    const_str: str
    const_str_d_quotes: str
    const_str_null: Nullable[str]
    const_str_s_quotes: str
    default_big_int: int
    default_big_int_str: int
    default_bool: bool
    default_date: date
    default_date_time: datetime
    default_decimal: Decimal
    default_decimal_str: Decimal
    default_enum_int: DefaultsAndConstsOutputDefaultEnumInt
    default_enum_str: DefaultsAndConstsOutputDefaultEnumStr
    default_int: int
    default_num: float
    default_str: str
    default_str_d_quotes: str
    default_str_nullable: Nullable[str]
    default_str_s_quotes: str
    normal_field: str
    default_str_optional: NotRequired[str]
    

class DefaultsAndConstsOutput(BaseModel):
    const_big_int: Annotated[Annotated[int, BeforeValidator(validate_int)], pydantic.Field(alias="constBigInt")]
    const_big_int_str: Annotated[Annotated[int, BeforeValidator(validate_int), PlainSerializer(serialize_int(True))], pydantic.Field(alias="constBigIntStr")]
    const_bool: Annotated[bool, pydantic.Field(alias="constBool")]
    const_date: Annotated[date, pydantic.Field(alias="constDate")]
    const_date_time: Annotated[datetime, pydantic.Field(alias="constDateTime")]
    const_decimal: Annotated[Annotated[Decimal, BeforeValidator(validate_decimal), PlainSerializer(serialize_decimal(False))], pydantic.Field(alias="constDecimal")]
    const_decimal_str: Annotated[Annotated[Decimal, BeforeValidator(validate_decimal), PlainSerializer(serialize_decimal(True))], pydantic.Field(alias="constDecimalStr")]
    const_enum_int: Annotated[DefaultsAndConstsOutputConstEnumInt, pydantic.Field(alias="constEnumInt")]
    const_enum_str: Annotated[DefaultsAndConstsOutputConstEnumStr, pydantic.Field(alias="constEnumStr")]
    const_int: Annotated[int, pydantic.Field(alias="constInt")]
    const_num: Annotated[float, pydantic.Field(alias="constNum")]
    const_str: Annotated[str, pydantic.Field(alias="constStr")]
    const_str_d_quotes: Annotated[str, pydantic.Field(alias="constStrDQuotes")]
    const_str_null: Annotated[Nullable[str], pydantic.Field(alias="constStrNull")]
    const_str_s_quotes: Annotated[str, pydantic.Field(alias="constStrSQuotes")]
    default_big_int: Annotated[Annotated[int, BeforeValidator(validate_int)], pydantic.Field(alias="defaultBigInt")]
    default_big_int_str: Annotated[Annotated[int, BeforeValidator(validate_int), PlainSerializer(serialize_int(True))], pydantic.Field(alias="defaultBigIntStr")]
    default_bool: Annotated[bool, pydantic.Field(alias="defaultBool")]
    default_date: Annotated[date, pydantic.Field(alias="defaultDate")]
    default_date_time: Annotated[datetime, pydantic.Field(alias="defaultDateTime")]
    default_decimal: Annotated[Annotated[Decimal, BeforeValidator(validate_decimal), PlainSerializer(serialize_decimal(False))], pydantic.Field(alias="defaultDecimal")]
    default_decimal_str: Annotated[Annotated[Decimal, BeforeValidator(validate_decimal), PlainSerializer(serialize_decimal(True))], pydantic.Field(alias="defaultDecimalStr")]
    default_enum_int: Annotated[DefaultsAndConstsOutputDefaultEnumInt, pydantic.Field(alias="defaultEnumInt")]
    default_enum_str: Annotated[DefaultsAndConstsOutputDefaultEnumStr, pydantic.Field(alias="defaultEnumStr")]
    default_int: Annotated[int, pydantic.Field(alias="defaultInt")]
    default_num: Annotated[float, pydantic.Field(alias="defaultNum")]
    default_str: Annotated[str, pydantic.Field(alias="defaultStr")]
    default_str_d_quotes: Annotated[str, pydantic.Field(alias="defaultStrDQuotes")]
    default_str_nullable: Annotated[Nullable[str], pydantic.Field(alias="defaultStrNullable")]
    default_str_s_quotes: Annotated[str, pydantic.Field(alias="defaultStrSQuotes")]
    normal_field: Annotated[str, pydantic.Field(alias="normalField")]
    default_str_optional: Annotated[Optional[str], pydantic.Field(alias="defaultStrOptional")] = None
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["defaultStrOptional"]
        nullable_fields = ["constStrNull", "defaultStrNullable"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields
                or (
                    k in optional_fields
                    and k in nullable_fields
                    and (
                        self.__pydantic_fields_set__.intersection({n})
                        or k in null_default_fields
                    )  # pylint: disable=no-member
                )
            ):
                m[k] = val

        return m
        
