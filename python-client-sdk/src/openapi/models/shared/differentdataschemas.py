"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .messageevent import MessageEvent, MessageEventTypedDict
from .urlevent import URLEvent, URLEventTypedDict
from enum import Enum
from openapi.types import BaseModel
from typing import Union
from typing_extensions import TypeAliasType, TypedDict


DifferentDataSchemasDataTypedDict = TypeAliasType(
    "DifferentDataSchemasDataTypedDict", Union[MessageEventTypedDict, URLEventTypedDict]
)


DifferentDataSchemasData = TypeAliasType(
    "DifferentDataSchemasData", Union[MessageEvent, URLEvent]
)


class Event(str, Enum):
    MESSAGE = "message"
    URL = "url"


class DifferentDataSchemasTypedDict(TypedDict):
    r"""Represents an event with different schemas for the data property"""

    data: DifferentDataSchemasDataTypedDict
    event: Event
    id: str


class DifferentDataSchemas(BaseModel):
    r"""Represents an event with different schemas for the data property"""

    data: DifferentDataSchemasData

    event: Event

    id: str
