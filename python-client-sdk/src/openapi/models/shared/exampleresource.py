"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .examplevehicle import ExampleVehicle, ExampleVehicleTypedDict
from datetime import datetime
from enum import Enum
from openapi.types import BaseModel
import pydantic
from typing import Dict, List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class ChocolatesTypedDict(TypedDict):
    description: str
    

class Chocolates(BaseModel):
    description: str
    

class EnumNumber(int, Enum):
    ONE = 1
    TWO = 2
    THREE = 3

class EnumStr(str, Enum):
    ONE = "one"
    TWO = "two"
    THREE = "three"

class InlineObjectTypedDict(TypedDict):
    inline_name: NotRequired[str]
    

class InlineObject(BaseModel):
    inline_name: Optional[str] = None
    

class ExampleResourceTypedDict(TypedDict):
    chocolates: List[ChocolatesTypedDict]
    id: str
    name: str
    vehicle: ExampleVehicleTypedDict
    array_of_number: NotRequired[List[float]]
    array_of_string: NotRequired[List[str]]
    created_at: NotRequired[datetime]
    enum_number: NotRequired[EnumNumber]
    enum_str: NotRequired[EnumStr]
    inline_object: NotRequired[InlineObjectTypedDict]
    map_of_integer: NotRequired[Dict[str, int]]
    map_of_string: NotRequired[Dict[str, str]]
    name_prefix: NotRequired[str]
    updated_at: NotRequired[datetime]
    

class ExampleResource(BaseModel):
    chocolates: List[Chocolates]
    id: str
    name: str
    vehicle: ExampleVehicle
    array_of_number: Annotated[Optional[List[float]], pydantic.Field(alias="arrayOfNumber")] = None
    array_of_string: Annotated[Optional[List[str]], pydantic.Field(alias="arrayOfString")] = None
    created_at: Annotated[Optional[datetime], pydantic.Field(alias="createdAt")] = None
    enum_number: Annotated[Optional[EnumNumber], pydantic.Field(alias="enumNumber")] = None
    enum_str: Annotated[Optional[EnumStr], pydantic.Field(alias="enumStr")] = None
    inline_object: Annotated[Optional[InlineObject], pydantic.Field(alias="inlineObject")] = None
    map_of_integer: Annotated[Optional[Dict[str, int]], pydantic.Field(alias="mapOfInteger")] = None
    map_of_string: Annotated[Optional[Dict[str, str]], pydantic.Field(alias="mapOfString")] = None
    name_prefix: Optional[str] = None
    updated_at: Annotated[Optional[datetime], pydantic.Field(alias="updatedAt")] = None
    
