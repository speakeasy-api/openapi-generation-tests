"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.types import BaseModel
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class FakerPascalCasePropertyNameStringsTypedDict(TypedDict):
    r"""A set of strings with pascal case fieldnames that lead to relevant examples being generated for them"""

    account: str
    address: str
    amount: str
    avatar: str
    city: str
    color: str
    comment: str
    company: str
    continent: str
    country: str
    country_code: str
    created_at: str
    r"""RFC3339 formatted timestamp"""
    currency: str
    currency_code: str
    currency_iso: str
    datatype: str
    default: str
    description: str
    directory: str
    domain: str
    domain_name: str
    email: str
    email_addr: str
    email_address: str
    expired_at: str
    expires: str
    expires_at: str
    extension: str
    filename: str
    filepath: str
    filetype: str
    first_name: str
    full_name: str
    gender: str
    host: str
    host_name: str
    http_status: str
    iban: str
    id: str
    ip: str
    ip_addr: str
    ip_address: str
    ipv4: str
    ipv6: str
    job: str
    json_: str
    key: str
    last_name: str
    latitude: str
    locale: str
    longitude: str
    mac: str
    manufacturer: str
    material: str
    middle_name: str
    model: str
    password: str
    phone: str
    pin: str
    postal_code: str
    price: str
    product: str
    sex: str
    status_code: str
    street: str
    timezone: str
    unit: str
    updated_at: str
    r"""RFC3339 formatted timestamp"""
    uri: str
    url: str
    username: str
    uuid: str
    address_line1: NotRequired[str]


class FakerPascalCasePropertyNameStrings(BaseModel):
    r"""A set of strings with pascal case fieldnames that lead to relevant examples being generated for them"""

    account: str

    address: str

    amount: str

    avatar: str

    city: str

    color: str

    comment: str

    company: str

    continent: str

    country: str

    country_code: Annotated[str, pydantic.Field(alias="countryCode")]

    created_at: Annotated[str, pydantic.Field(alias="createdAt")]
    r"""RFC3339 formatted timestamp"""

    currency: str

    currency_code: Annotated[str, pydantic.Field(alias="currencyCode")]

    currency_iso: Annotated[str, pydantic.Field(alias="currencyISO")]

    datatype: str

    default: str

    description: str

    directory: str

    domain: str

    domain_name: Annotated[str, pydantic.Field(alias="domainName")]

    email: str

    email_addr: Annotated[str, pydantic.Field(alias="emailAddr")]

    email_address: Annotated[str, pydantic.Field(alias="emailAddress")]

    expired_at: Annotated[str, pydantic.Field(alias="expiredAt")]

    expires: str

    expires_at: Annotated[str, pydantic.Field(alias="expiresAt")]

    extension: str

    filename: str

    filepath: str

    filetype: str

    first_name: Annotated[str, pydantic.Field(alias="firstName")]

    full_name: Annotated[str, pydantic.Field(alias="fullName")]

    gender: str

    host: str

    host_name: Annotated[str, pydantic.Field(alias="hostName")]

    http_status: Annotated[str, pydantic.Field(alias="httpStatus")]

    iban: str

    id: str

    ip: str

    ip_addr: Annotated[str, pydantic.Field(alias="ipAddr")]

    ip_address: Annotated[str, pydantic.Field(alias="ipAddress")]

    ipv4: str

    ipv6: str

    job: str

    json_: Annotated[str, pydantic.Field(alias="json")]

    key: str

    last_name: Annotated[str, pydantic.Field(alias="lastName")]

    latitude: str

    locale: str

    longitude: str

    mac: str

    manufacturer: str

    material: str

    middle_name: Annotated[str, pydantic.Field(alias="middleName")]

    model: str

    password: str

    phone: str

    pin: str

    postal_code: Annotated[str, pydantic.Field(alias="postalCode")]

    price: str

    product: str

    sex: str

    status_code: Annotated[str, pydantic.Field(alias="statusCode")]

    street: str

    timezone: str

    unit: str

    updated_at: Annotated[str, pydantic.Field(alias="updatedAt")]
    r"""RFC3339 formatted timestamp"""

    uri: str

    url: str

    username: str

    uuid: str

    address_line1: Annotated[Optional[str], pydantic.Field(alias="addressLine1")] = None
