"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .typedobject1 import TypedObject1, TypedObject1TypedDict
from .typedobject2 import TypedObject2, TypedObject2TypedDict
from openapi.types import BaseModel, Nullable, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import TypedDict, Union
from typing_extensions import Annotated


NullableOneOfTwoTypedDict = Union[TypedObject1TypedDict, TypedObject2TypedDict]


NullableOneOfTwo = Union[TypedObject1, TypedObject2]


OneOfOneTypedDict = TypedObject1TypedDict


OneOfOne = TypedObject1


class NullableOneOfRefInObjectTypedDict(TypedDict):
    nullable_one_of_one: Nullable[TypedObject1TypedDict]
    nullable_one_of_two: Nullable[NullableOneOfTwoTypedDict]
    one_of_one: OneOfOneTypedDict
    

class NullableOneOfRefInObject(BaseModel):
    nullable_one_of_one: Annotated[Nullable[TypedObject1], pydantic.Field(alias="NullableOneOfOne")]
    nullable_one_of_two: Annotated[Nullable[NullableOneOfTwo], pydantic.Field(alias="NullableOneOfTwo")]
    one_of_one: Annotated[OneOfOne, pydantic.Field(alias="OneOfOne")]
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["NullableOneOfOne", "NullableOneOfTwo"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        
