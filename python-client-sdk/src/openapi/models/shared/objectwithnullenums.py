"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from openapi.types import BaseModel, Nullable, OptionalNullable, UNSET_SENTINEL
from openapi.utils import validate_const
import pydantic
from pydantic import model_serializer
from pydantic.functional_validators import AfterValidator
from typing import Literal
from typing_extensions import Annotated, TypedDict


class ObjectWithNullEnumsTypedDict(TypedDict):
    null_enum: Nullable[Literal[None]]
    opt_null_enum: Nullable[Literal[None]]


class ObjectWithNullEnums(BaseModel):
    NULL_ENUM: Annotated[
        Annotated[Nullable[Literal[None]], AfterValidator(validate_const(None))],
        pydantic.Field(alias="nullEnum"),
    ] = None

    OPT_NULL_ENUM: Annotated[
        Annotated[
            OptionalNullable[Literal[None]], AfterValidator(validate_const(None))
        ],
        pydantic.Field(alias="optNullEnum"),
    ] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["optNullEnum"]
        nullable_fields = ["nullEnum", "optNullEnum"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
