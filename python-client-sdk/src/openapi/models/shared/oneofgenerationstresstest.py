"""Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from openapi.types import BaseModel, Nullable, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import Any, TypedDict, Union
from typing_extensions import Annotated


class Two(str, Enum):
    LATEST = "latest"

class OneOfGenerationStressTestTypedDict(TypedDict):
    any: Any
    nullable_any: Nullable[Any]
    one_of_from_array_of_types: Nullable[OneOfFromArrayOfTypesTypedDict]
    one_of_same_type: Nullable[OneOfSameTypeTypedDict]
    

class OneOfGenerationStressTest(BaseModel):
    any: Any
    nullable_any: Annotated[Nullable[Any], pydantic.Field(alias="nullableAny")]
    one_of_from_array_of_types: Annotated[Nullable[OneOfFromArrayOfTypes], pydantic.Field(alias="oneOfFromArrayOfTypes")]
    one_of_same_type: Annotated[Nullable[OneOfSameType], pydantic.Field(alias="oneOfSameType")]
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["nullableAny", "oneOfFromArrayOfTypes", "oneOfSameType"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields
                or (
                    k in optional_fields
                    and k in nullable_fields
                    and (
                        self.__pydantic_fields_set__.intersection({n})
                        or k in null_default_fields
                    )  # pylint: disable=no-member
                )
            ):
                m[k] = val

        return m
        

OneOfFromArrayOfTypesTypedDict = Union[str, int]


OneOfFromArrayOfTypes = Union[str, int]


OneOfSameTypeTypedDict = Union[str, Two]


OneOfSameType = Union[str, Two]

