"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from openapi.types import BaseModel, Nullable, UNSET_SENTINEL
from pydantic import model_serializer
from typing import Optional, TypedDict
from typing_extensions import NotRequired


class StopReason(str, Enum):
    STOP_SEQUENCE = "stop_sequence"
    MAX_TOKENS = "max_tokens"

class RichCompletionEventDataTypedDict(TypedDict):
    completion: str
    stop_reason: Nullable[StopReason]
    model: NotRequired[str]
    

class RichCompletionEventData(BaseModel):
    completion: str
    stop_reason: Nullable[StopReason]
    model: Optional[str] = None
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["model"]
        nullable_fields = ["stop_reason"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields
                or (
                    k in optional_fields
                    and k in nullable_fields
                    and (
                        self.__pydantic_fields_set__.intersection({n})
                        or k in null_default_fields
                    )  # pylint: disable=no-member
                )
            ):
                m[k] = val

        return m
        
