"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .enum import EnumT
from datetime import date, datetime
from decimal import Decimal
from enum import Enum
from openapi.types import BaseModel
from openapi.utils import serialize_decimal, serialize_int, validate_decimal, validate_int
from pydantic.functional_serializers import PlainSerializer
from pydantic.functional_validators import BeforeValidator
from typing import Any, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class Int32EnumVal(int, Enum):
    r"""An int32 enum property."""
    FIFTY_FIVE = 55
    SIXTY_NINE = 69
    ONE_HUNDRED_AND_EIGHTY_ONE = 181

class IntEnumVal(int, Enum):
    r"""An integer enum property."""
    FIRST = 1
    SECOND = 2
    THIRD = 3

class SimpleObjectCamelCaseTypedDict(TypedDict):
    r"""A simple object that uses all our supported primitive types and enums and has optional properties.
    https://speakeasy.com/docs - A link to the external docs.
    """
    
    any_val: Any
    r"""An any property."""
    bool_val: bool
    r"""A boolean property."""
    date_time_val: datetime
    r"""A date-time property."""
    date_val: date
    r"""A date property."""
    enum_val: EnumT
    r"""A string based enum"""
    float32_val: float
    r"""A float32 property."""
    int32_enum_val: Int32EnumVal
    r"""An int32 enum property."""
    int32_val: int
    r"""An int32 property."""
    int_enum_val: IntEnumVal
    r"""An integer enum property."""
    int_val: int
    r"""An integer property."""
    num_val: float
    r"""A number property."""
    str_val: str
    r"""A string property."""
    bigint_str_val: NotRequired[int]
    bigint_val: NotRequired[int]
    bool_opt_val: NotRequired[bool]
    r"""An optional boolean property."""
    decimal_val: NotRequired[Decimal]
    int_opt_null_val: NotRequired[int]
    r"""An optional integer property will be null for tests."""
    num_opt_null_val: NotRequired[float]
    r"""An optional number property will be null for tests."""
    str_opt_val: NotRequired[str]
    r"""An optional string property."""
    

class SimpleObjectCamelCase(BaseModel):
    r"""A simple object that uses all our supported primitive types and enums and has optional properties.
    https://speakeasy.com/docs - A link to the external docs.
    """
    
    any_val: Any
    r"""An any property."""
    bool_val: bool
    r"""A boolean property."""
    date_time_val: datetime
    r"""A date-time property."""
    date_val: date
    r"""A date property."""
    enum_val: EnumT
    r"""A string based enum"""
    float32_val: float
    r"""A float32 property."""
    int32_enum_val: Int32EnumVal
    r"""An int32 enum property."""
    int32_val: int
    r"""An int32 property."""
    int_enum_val: IntEnumVal
    r"""An integer enum property."""
    int_val: int
    r"""An integer property."""
    num_val: float
    r"""A number property."""
    str_val: str
    r"""A string property."""
    bigint_str_val: Annotated[Optional[int], BeforeValidator(validate_int), PlainSerializer(serialize_int(True))] = None
    bigint_val: Annotated[Optional[int], BeforeValidator(validate_int)] = None
    bool_opt_val: Optional[bool] = None
    r"""An optional boolean property."""
    decimal_val: Annotated[Optional[Decimal], BeforeValidator(validate_decimal), PlainSerializer(serialize_decimal(False))] = None
    int_opt_null_val: Optional[int] = None
    r"""An optional integer property will be null for tests."""
    num_opt_null_val: Optional[float] = None
    r"""An optional number property will be null for tests."""
    str_opt_val: Optional[str] = None
    r"""An optional string property."""
    
