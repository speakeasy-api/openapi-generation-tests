"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from ._hooks import SDKHooks
from .httpclient import AsyncHttpClient, HttpClient
from .utils import Logger, RetryConfig, remove_suffix
from dataclasses import dataclass, field
from enum import Enum
from openapi.models import internal, shared
from openapi.types import OptionalNullable, UNSET
from pydantic import Field
from typing import Callable, Dict, List, Optional, Tuple, Union


SERVERS = [
    "http://localhost:35123",
    # The default server.
    "http://broken",
    # A server url to a non-existent server.
    "http://{hostname}:{port}",
    # A server url with templated variables.
    "http://localhost:35123/anything/{something}",
    # A server url with templated variables.
    "{protocol}://{hostname}:{port}",
    # A server url with templated variables (including the protocol).
]
"""Contains the list of servers available to the SDK"""


class ServerSomething(str, Enum):
    r"""Something is a variable for changing the root path"""

    SOMETHING = "something"
    SOMETHING_ELSE = "somethingElse"
    SOMETHING_ELSE_AGAIN = "somethingElseAgain"


@dataclass
class SDKConfiguration:
    client: HttpClient
    async_client: AsyncHttpClient
    debug_logger: Logger
    globals: internal.Globals
    security: Optional[Union[shared.Security, Callable[[], shared.Security]]] = None
    server_url: Optional[str] = ""
    server_idx: Optional[int] = 0
    server_defaults: List[Dict[str, str]] = field(default_factory=List)
    language: str = "python"
    openapi_doc_version: str = "0.1.0"
    sdk_version: str = "4.0.0"
    gen_version: str = "2.434.1"
    user_agent: str = "speakeasy-sdk/python 4.0.0 2.434.1 0.1.0 openapi"
    retry_config: OptionalNullable[RetryConfig] = Field(default_factory=lambda: UNSET)
    timeout_ms: Optional[int] = None

    def __post_init__(self):
        self._hooks = SDKHooks()

    def get_server_details(self) -> Tuple[str, Dict[str, str]]:
        if self.server_url is not None and self.server_url:
            return remove_suffix(self.server_url, "/"), {}
        if self.server_idx is None:
            self.server_idx = 0

        return SERVERS[self.server_idx], self.server_defaults[self.server_idx]

    def get_hooks(self) -> SDKHooks:
        return self._hooks
