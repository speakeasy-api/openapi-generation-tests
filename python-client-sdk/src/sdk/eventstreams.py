"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .sdkconfiguration import SDKConfiguration
from enum import Enum
from sdk import utils
from sdk.models import errors, operations, shared
from sdk.utils import eventstreaming
from typing import List, Optional, Union

class ChatAcceptEnum(str, Enum):
    APPLICATION_JSON = "application/json"
    TEXT_EVENT_STREAM = "text/event-stream"

class Eventstreams:
    r"""Endpoints for testing server-sent events streaming"""
    sdk_configuration: SDKConfiguration

    def __init__(self, sdk_config: SDKConfiguration) -> None:
        self.sdk_configuration = sdk_config
        
    
    
    def chat(self, request: operations.ChatRequestBody, server_url: Optional[str] = None, accept_header_override: Optional[ChatAcceptEnum] = None) -> operations.ChatResponse:
        base_url = utils.template_url(operations.CHAT_SERVERS[0], {
        })
        if server_url is not None:
            base_url = server_url
        
        url = base_url + '/eventstreams/chat'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, operations.ChatRequestBody, "request", False, False, 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        if accept_header_override is not None:
            headers['Accept'] = accept_header_override.value
        else:
            headers['Accept'] = 'application/json;q=1, text/event-stream;q=0'
        headers['x-speakeasy-user-agent'] = self.sdk_configuration.user_agent
        
        if callable(self.sdk_configuration.security):
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security())
        else:
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.ChatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[List[Union[shared.ChatCompletionEvent, shared.SentinelEvent]]])
                res.chat_completion_result = out
            elif utils.match_content_type(content_type, 'text/event-stream'):
                out = eventstreaming.stream_events(http_res.iter_content(None), lambda raw: utils.unmarshal_json(raw, Union[shared.ChatCompletionEvent, shared.SentinelEvent]))
                res.chat_completion_stream = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def different_data_schemas(self, server_url: Optional[str] = None) -> operations.DifferentDataSchemasResponse:
        base_url = utils.template_url(operations.DIFFERENT_DATA_SCHEMAS_SERVERS[0], {
        })
        if server_url is not None:
            base_url = server_url
        
        url = base_url + '/eventstreams/differentdataschemas'
        headers = {}
        headers['Accept'] = 'text/event-stream'
        headers['x-speakeasy-user-agent'] = self.sdk_configuration.user_agent
        
        if callable(self.sdk_configuration.security):
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security())
        else:
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security)
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.DifferentDataSchemasResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/event-stream'):
                out = eventstreaming.stream_events(http_res.iter_content(None), lambda raw: utils.unmarshal_json(raw, shared.DifferentDataSchemas))
                res.different_data_schemas = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def json(self, server_url: Optional[str] = None) -> operations.JSONResponse:
        base_url = utils.template_url(operations.JSON_SERVERS[0], {
        })
        if server_url is not None:
            base_url = server_url
        
        url = base_url + '/eventstreams/json'
        headers = {}
        headers['Accept'] = 'text/event-stream'
        headers['x-speakeasy-user-agent'] = self.sdk_configuration.user_agent
        
        if callable(self.sdk_configuration.security):
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security())
        else:
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security)
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.JSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/event-stream'):
                out = eventstreaming.stream_events(http_res.iter_content(None), lambda raw: utils.unmarshal_json(raw, shared.JSONEvent))
                res.json_event = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def multiline(self, server_url: Optional[str] = None) -> operations.MultilineResponse:
        base_url = utils.template_url(operations.MULTILINE_SERVERS[0], {
        })
        if server_url is not None:
            base_url = server_url
        
        url = base_url + '/eventstreams/multiline'
        headers = {}
        headers['Accept'] = 'text/event-stream'
        headers['x-speakeasy-user-agent'] = self.sdk_configuration.user_agent
        
        if callable(self.sdk_configuration.security):
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security())
        else:
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security)
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.MultilineResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/event-stream'):
                out = eventstreaming.stream_events(http_res.iter_content(None), lambda raw: utils.unmarshal_json(raw, shared.TextEvent))
                res.text_event = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def rich(self, server_url: Optional[str] = None) -> operations.RichResponse:
        base_url = utils.template_url(operations.RICH_SERVERS[0], {
        })
        if server_url is not None:
            base_url = server_url
        
        url = base_url + '/eventstreams/rich'
        headers = {}
        headers['Accept'] = 'text/event-stream'
        headers['x-speakeasy-user-agent'] = self.sdk_configuration.user_agent
        
        if callable(self.sdk_configuration.security):
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security())
        else:
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security)
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.RichResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/event-stream'):
                out = eventstreaming.stream_events(http_res.iter_content(None), lambda raw: utils.unmarshal_json(raw, Union[shared.RichCompletionEvent, shared.HeartbeatEvent]))
                res.rich_stream = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def text(self, server_url: Optional[str] = None) -> operations.TextResponse:
        base_url = utils.template_url(operations.TEXT_SERVERS[0], {
        })
        if server_url is not None:
            base_url = server_url
        
        url = base_url + '/eventstreams/text'
        headers = {}
        headers['Accept'] = 'text/event-stream'
        headers['x-speakeasy-user-agent'] = self.sdk_configuration.user_agent
        
        if callable(self.sdk_configuration.security):
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security())
        else:
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security)
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.TextResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/event-stream'):
                out = eventstreaming.stream_events(http_res.iter_content(None), lambda raw: utils.unmarshal_json(raw, shared.TextEvent))
                res.text_event = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    