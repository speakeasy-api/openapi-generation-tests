"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import simpleobject as shared_simpleobject
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional



@dataclasses.dataclass
class DeepObjectQueryParamsObjectObjArrParam:
    arr: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'arr' }})
    




@dataclasses.dataclass
class DeepObjectQueryParamsObjectRequest:
    obj_param: shared_simpleobject.SimpleObject = dataclasses.field(metadata={'query_param': { 'field_name': 'objParam', 'style': 'deepObject', 'explode': True }})
    r"""A simple object that uses all our supported primitive types and enums and has optional properties."""
    obj_arr_param: Optional[DeepObjectQueryParamsObjectObjArrParam] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'objArrParam', 'style': 'deepObject', 'explode': True }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class DeepObjectQueryParamsObjectResArgs:
    obj_arr_param_arr: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objArrParam[arr]') }})
    obj_param_any: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objParam[any]') }})
    obj_param_bool: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objParam[bool]') }})
    obj_param_bool_opt: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objParam[boolOpt]') }})
    obj_param_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objParam[date]') }})
    obj_param_date_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objParam[dateTime]') }})
    obj_param_enum: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objParam[enum]') }})
    obj_param_float32: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objParam[float32]') }})
    obj_param_int: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objParam[int]') }})
    obj_param_int32: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objParam[int32]') }})
    obj_param_int32_enum: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objParam[int32Enum]') }})
    obj_param_int_enum: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objParam[intEnum]') }})
    obj_param_num: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objParam[num]') }})
    obj_param_str: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objParam[str]') }})
    obj_param_str_opt: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objParam[strOpt]') }})
    obj_param_bigint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objParam[bigint]'), 'exclude': lambda f: f is None }})
    obj_param_bigint_str: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objParam[bigintStr]'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class DeepObjectQueryParamsObjectRes:
    r"""OK"""
    args: DeepObjectQueryParamsObjectResArgs = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('args') }})
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    




@dataclasses.dataclass
class DeepObjectQueryParamsObjectResponse:
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    res: Optional[DeepObjectQueryParamsObjectRes] = dataclasses.field(default=None)
    r"""OK"""
    

