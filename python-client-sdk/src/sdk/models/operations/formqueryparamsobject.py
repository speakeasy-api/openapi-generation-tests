"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import simpleobject as shared_simpleobject
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional



@dataclasses.dataclass
class FormQueryParamsObjectRequest:
    obj_param_exploded: shared_simpleobject.SimpleObject = dataclasses.field(metadata={'query_param': { 'field_name': 'objParamExploded', 'style': 'form', 'explode': True }})
    r"""A simple object that uses all our supported primitive types and enums and has optional properties."""
    obj_param: Optional[shared_simpleobject.SimpleObject] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'objParam', 'style': 'form', 'explode': False }})
    r"""A simple object that uses all our supported primitive types and enums and has optional properties."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class FormQueryParamsObjectResArgs:
    any: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('any') }})
    bool: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bool') }})
    date_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date') }})
    date_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateTime') }})
    enum: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enum') }})
    float32: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('float32') }})
    int: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('int') }})
    int32: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('int32') }})
    int32_enum: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('int32Enum') }})
    int_enum: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('intEnum') }})
    num: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num') }})
    obj_param: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objParam') }})
    str_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('str') }})
    bigint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bigint'), 'exclude': lambda f: f is None }})
    bigint_str: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bigintStr'), 'exclude': lambda f: f is None }})
    bool_opt: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('boolOpt'), 'exclude': lambda f: f is None }})
    int_opt_null: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('intOptNull'), 'exclude': lambda f: f is None }})
    num_opt_null: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numOptNull'), 'exclude': lambda f: f is None }})
    str_opt: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('strOpt'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class FormQueryParamsObjectRes:
    r"""OK"""
    args: FormQueryParamsObjectResArgs = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('args') }})
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    




@dataclasses.dataclass
class FormQueryParamsObjectResponse:
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    res: Optional[FormQueryParamsObjectRes] = dataclasses.field(default=None)
    r"""OK"""
    

