"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ...models.shared import fakerformattedstrings as shared_fakerformattedstrings
from ...models.shared import fakerstrings as shared_fakerstrings
from ...models.shared import simpleobject as shared_simpleobject
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from decimal import Decimal
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class UsageExamplePostSecurity:
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UsageExamplePostRequestBody:
    r"""A request body that contains fields with different formats for testing example generation"""
    faker_formatted_strings: Optional[shared_fakerformattedstrings.FakerFormattedStrings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fakerFormattedStrings'), 'exclude': lambda f: f is None }})
    r"""A set of strings with format values that lead to relevant examples being generated for them"""
    faker_strings: Optional[shared_fakerstrings.FakerStrings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fakerStrings'), 'exclude': lambda f: f is None }})
    r"""A set of strings with fieldnames that lead to relevant examples being generated for them"""
    simple_object: Optional[shared_simpleobject.SimpleObject] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('simpleObject'), 'exclude': lambda f: f is None }})
    r"""A simple object that uses all our supported primitive types and enums and has optional properties.
    https://docs.speakeasyapi.dev - A link to the external docs.
    """
    



class EnumParameter(str, Enum):
    r"""An enum type"""
    VALUE1 = 'value1'
    VALUE2 = 'value2'
    VALUE3 = 'value3'


class OptEnumParameter(str, Enum):
    r"""An enum type"""
    VALUE1 = 'value1'
    VALUE2 = 'value2'
    VALUE3 = 'value3'


@dataclasses.dataclass
class UsageExamplePostRequest:
    bigint_parameter: int = dataclasses.field(metadata={'query_param': { 'field_name': 'bigintParameter', 'style': 'form', 'explode': True }})
    r"""An bigint parameter"""
    bigint_str_parameter: int = dataclasses.field(metadata={'query_param': { 'field_name': 'bigintStrParameter', 'style': 'form', 'explode': True }})
    r"""An bigint parameter"""
    bool_parameter: bool = dataclasses.field(metadata={'query_param': { 'field_name': 'boolParameter', 'style': 'form', 'explode': True }})
    r"""A boolean parameter"""
    date_parameter: date = dataclasses.field(metadata={'query_param': { 'field_name': 'dateParameter', 'style': 'form', 'explode': True }})
    r"""A date parameter"""
    date_time_default_parameter: datetime = dataclasses.field(metadata={'query_param': { 'field_name': 'dateTimeDefaultParameter', 'style': 'form', 'explode': True }})
    r"""A date time parameter with a default value"""
    date_time_parameter: datetime = dataclasses.field(metadata={'query_param': { 'field_name': 'dateTimeParameter', 'style': 'form', 'explode': True }})
    r"""A date time parameter"""
    decimal_parameter: Decimal = dataclasses.field(metadata={'query_param': { 'field_name': 'decimalParameter', 'style': 'form', 'explode': True }})
    r"""A decimal parameter"""
    decimal_str_parameter: Decimal = dataclasses.field(metadata={'query_param': { 'field_name': 'decimalStrParameter', 'style': 'form', 'explode': True }})
    r"""A decimal parameter"""
    double_parameter: float = dataclasses.field(metadata={'query_param': { 'field_name': 'doubleParameter', 'style': 'form', 'explode': True }})
    r"""A double parameter"""
    enum_parameter: EnumParameter = dataclasses.field(metadata={'query_param': { 'field_name': 'enumParameter', 'style': 'form', 'explode': True }})
    r"""An enum parameter"""
    falsey_number_parameter: float = dataclasses.field(metadata={'query_param': { 'field_name': 'falseyNumberParameter', 'style': 'form', 'explode': True }})
    r"""A number parameter that contains a falsey example value"""
    float32_parameter: float = dataclasses.field(metadata={'query_param': { 'field_name': 'float32Parameter', 'style': 'form', 'explode': True }})
    r"""A float32 parameter"""
    float64_string_parameter: float = dataclasses.field(metadata={'query_param': { 'field_name': 'float64StringParameter', 'style': 'form', 'explode': True }})
    r"""A float64 parameter"""
    float_parameter: float = dataclasses.field(metadata={'query_param': { 'field_name': 'floatParameter', 'style': 'form', 'explode': True }})
    r"""A float parameter"""
    int64_parameter: int = dataclasses.field(metadata={'query_param': { 'field_name': 'int64Parameter', 'style': 'form', 'explode': True }})
    r"""An int64 parameter"""
    int64_string_parameter: int = dataclasses.field(metadata={'query_param': { 'field_name': 'int64StringParameter', 'style': 'form', 'explode': True }})
    r"""An int64 parameter"""
    int_parameter: int = dataclasses.field(metadata={'query_param': { 'field_name': 'intParameter', 'style': 'form', 'explode': True }})
    r"""An integer parameter"""
    str_parameter: str = dataclasses.field(metadata={'query_param': { 'field_name': 'strParameter', 'style': 'form', 'explode': True }})
    r"""A string parameter"""
    request_body: Optional[UsageExamplePostRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})
    r"""A request body that contains fields with different formats for testing example generation"""
    bigint_parameter_optional: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'bigintParameterOptional', 'style': 'form', 'explode': True }})
    r"""An bigint parameter"""
    bigint_str_parameter_optional: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'bigintStrParameterOptional', 'style': 'form', 'explode': True }})
    r"""An bigint parameter"""
    decimal_parameter_optional: Optional[Decimal] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'decimalParameterOptional', 'style': 'form', 'explode': True }})
    r"""A decimal parameter"""
    decimal_str_parameter_optional: Optional[Decimal] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'decimalStrParameterOptional', 'style': 'form', 'explode': True }})
    r"""A decimal parameter"""
    opt_enum_parameter: Optional[OptEnumParameter] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'optEnumParameter', 'style': 'form', 'explode': True }})
    r"""An enum parameter"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UsageExamplePostJSON:
    faker_formatted_strings: Optional[shared_fakerformattedstrings.FakerFormattedStrings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fakerFormattedStrings'), 'exclude': lambda f: f is None }})
    r"""A set of strings with format values that lead to relevant examples being generated for them"""
    faker_strings: Optional[shared_fakerstrings.FakerStrings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fakerStrings'), 'exclude': lambda f: f is None }})
    r"""A set of strings with fieldnames that lead to relevant examples being generated for them"""
    simple_object: Optional[shared_simpleobject.SimpleObject] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('simpleObject'), 'exclude': lambda f: f is None }})
    r"""A simple object that uses all our supported primitive types and enums and has optional properties.
    https://docs.speakeasyapi.dev - A link to the external docs.
    """
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UsageExamplePostResponseBody:
    r"""A response body that contains the simpleObject sent in the request body"""
    json: Optional[UsageExamplePostJSON] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('json') }})
    



@dataclasses.dataclass
class UsageExamplePostResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    raw_response: requests_http.Response = dataclasses.field()
    r"""Raw HTTP response; suitable for custom response parsing"""
    object: Optional[UsageExamplePostResponseBody] = dataclasses.field(default=None)
    r"""A successful response that contains the simpleObject sent in the request body"""
    

