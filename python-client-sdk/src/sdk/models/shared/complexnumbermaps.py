"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from decimal import Decimal
from sdk import utils
from typing import Dict, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ComplexNumberMaps:
    bigint_map: Optional[Dict[str, int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bigintMap'), 'exclude': lambda f: f is None }})
    bigint_str_map: Optional[Dict[str, int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bigintStrMap'), 'encoder': utils.map_encoder(True, utils.bigintencoder(False)), 'decoder': utils.map_decoder(utils.bigintdecoder), 'exclude': lambda f: f is None }})
    decimal_map: Optional[Dict[str, Decimal]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('decimalMap'), 'encoder': utils.map_encoder(True, utils.decimalencoder(False, False)), 'decoder': utils.map_decoder(utils.decimaldecoder), 'exclude': lambda f: f is None }})
    decimal_str_map: Optional[Dict[str, Decimal]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('decimalStrMap'), 'encoder': utils.map_encoder(True, utils.decimalencoder(False, True)), 'decoder': utils.map_decoder(utils.decimaldecoder), 'exclude': lambda f: f is None }})
    

