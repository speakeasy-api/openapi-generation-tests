"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .simpleobject import SimpleObject
from typing import Dict, List


@dataclasses.dataclass
class DeepObjectQueryParams:
    r"""deepObject style query parameter serialization is undefined for arrays or nested objects by the specification:
       https://github.com/OAI/OpenAPI-Specification/issues/1706
    This schema covers the intended implementation cases rather than the fully complex deepObject schema.
    """
    arr: List[str] = dataclasses.field(metadata={'query_param': { 'field_name': 'arr' }})
    bool: bool = dataclasses.field(metadata={'query_param': { 'field_name': 'bool' }})
    int: int = dataclasses.field(metadata={'query_param': { 'field_name': 'int' }})
    map: Dict[str, str] = dataclasses.field(metadata={'query_param': { 'field_name': 'map' }})
    num: float = dataclasses.field(metadata={'query_param': { 'field_name': 'num' }})
    obj: SimpleObject = dataclasses.field(metadata={'query_param': { 'field_name': 'obj' }})
    r"""A simple object that uses all our supported primitive types and enums and has optional properties.
    https://docs.speakeasyapi.dev - A link to the external docs.
    """
    str_: str = dataclasses.field(metadata={'query_param': { 'field_name': 'str' }})
    

