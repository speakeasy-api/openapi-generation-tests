"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FakerFormattedStrings:
    r"""A set of strings with format values that lead to relevant examples being generated for them"""
    address_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressFormat'), 'exclude': lambda f: f is None }})
    r"""A field that will have an address generated as example"""
    directory_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('directoryFormat'), 'exclude': lambda f: f is None }})
    r"""A field that will have a directory path generated as example"""
    domain_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domainFormat'), 'exclude': lambda f: f is None }})
    r"""A field that will have a domain name generated as example"""
    email_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailFormat'), 'exclude': lambda f: f is None }})
    r"""A field that will have an email address generated as example"""
    filename_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filenameFormat'), 'exclude': lambda f: f is None }})
    r"""A field that will have a filename generated as example"""
    filepath_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filepathFormat'), 'exclude': lambda f: f is None }})
    r"""A field that will have a file path generated as example"""
    image_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageFormat'), 'exclude': lambda f: f is None }})
    r"""A field that will have a image url generated as example"""
    ipv4_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipv4Format'), 'exclude': lambda f: f is None }})
    r"""A field that will have an IPv4 address generated as example"""
    ipv6_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipv6Format'), 'exclude': lambda f: f is None }})
    r"""A field that will have an IPv6 address generated as example"""
    json_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jsonFormat'), 'exclude': lambda f: f is None }})
    r"""A field that will have a JSON generated as example"""
    mac_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('macFormat'), 'exclude': lambda f: f is None }})
    r"""A field that will have a MAC address generated as example"""
    password_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passwordFormat'), 'exclude': lambda f: f is None }})
    r"""A field that will have a fake password generated as example"""
    phone_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneFormat'), 'exclude': lambda f: f is None }})
    r"""A field that will have a phone number generated as example"""
    timezone_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezoneFormat'), 'exclude': lambda f: f is None }})
    r"""A field that will have a timezone generated as example"""
    unknown_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unknownFormat'), 'exclude': lambda f: f is None }})
    r"""A field that will have random words generated as example"""
    url_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urlFormat'), 'exclude': lambda f: f is None }})
    r"""A field that will have a URL generated as example"""
    uuid_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uuidFormat'), 'exclude': lambda f: f is None }})
    r"""A field that will have a UUID generated as example"""
    zipcode_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zipcodeFormat'), 'exclude': lambda f: f is None }})
    r"""A field that will have a postal code generated as example"""
    

