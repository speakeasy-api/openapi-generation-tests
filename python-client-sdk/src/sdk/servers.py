"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .sdkconfiguration import SDKConfiguration
from sdk import utils
from sdk.models import operations
from typing import Optional

class Servers:
    r"""Endpoints for testing servers."""
    sdk_configuration: SDKConfiguration

    def __init__(self, sdk_config: SDKConfiguration) -> None:
        self.sdk_configuration = sdk_config
        
    
    def select_global_server(self) -> operations.SelectGlobalServerResponse:
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/anything/selectGlobalServer'
        headers = {}
        headers['Accept'] = '*/*'
        headers['x-speakeasy-user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SelectGlobalServerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            

        return res

    
    def select_server_with_id(self, server_url: Optional[str] = None) -> operations.SelectServerWithIDResponse:
        r"""Select a server by ID."""
        base_url = utils.template_url(operations.SELECT_SERVER_WITH_ID_SERVERS[operations.SELECT_SERVER_WITH_ID_SERVER_VALID], {
        })
        if server_url is not None:
            base_url = server_url
        
        url = base_url + '/anything/selectServerWithID'
        headers = {}
        headers['Accept'] = '*/*'
        headers['x-speakeasy-user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SelectServerWithIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    
    def server_with_templates(self, server_url: Optional[str] = None) -> operations.ServerWithTemplatesResponse:
        base_url = utils.template_url(operations.SERVER_WITH_TEMPLATES_SERVERS[0], {
            'hostname': 'localhost',
            'port': '35123',
        })
        if server_url is not None:
            base_url = server_url
        
        url = base_url + '/anything/serverWithTemplates'
        headers = {}
        headers['Accept'] = '*/*'
        headers['x-speakeasy-user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServerWithTemplatesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    
    def server_with_templates_global(self) -> operations.ServerWithTemplatesGlobalResponse:
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/anything/serverWithTemplatesGlobal'
        headers = {}
        headers['Accept'] = '*/*'
        headers['x-speakeasy-user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServerWithTemplatesGlobalResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    
    def servers_by_id_with_templates(self, server_url: Optional[str] = None) -> operations.ServersByIDWithTemplatesResponse:
        base_url = utils.template_url(operations.SERVERS_BY_ID_WITH_TEMPLATES_SERVERS[operations.SERVERS_BY_ID_WITH_TEMPLATES_SERVER_MAIN], {
            'hostname': 'localhost',
            'port': '35123',
        })
        if server_url is not None:
            base_url = server_url
        
        url = base_url + '/anything/serversByIDWithTemplates'
        headers = {}
        headers['Accept'] = '*/*'
        headers['x-speakeasy-user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServersByIDWithTemplatesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    