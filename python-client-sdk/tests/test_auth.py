"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import sdk.models.shared as shared
from sdk import SDK
from sdk.models.operations import *

from .helpers import *


def test_basic_auth():
    record_test('auth-basic-auth')

    s = SDK()
    assert s is not None

    res = s.auth_new.basic_auth_new(request=shared.AuthServiceRequestBody(
        basic_auth=shared.AuthServiceRequestBodyBasicAuth(
            username='testUser',
            password='testPass',
        )
    ), security=BasicAuthNewSecurity(
        username='testUser',
        password='testPass',
    ))
    assert res is not None
    assert res.status_code == 200


def test_api_key_auth_global():
    record_test('auth-api-key-auth-global')

    s = SDK(security=shared.Security(
        api_key_auth_new='test_api_key',
    ))
    assert s is not None

    res = s.auth_new.api_key_auth_global_new(request=shared.AuthServiceRequestBody(
        header_auth=[shared.AuthServiceRequestBodyHeaderAuth(
            header_name='x-api-key',
            expected_value='test_api_key',
        )]
    ),
    )
    assert res is not None
    assert res.status_code == 200


def test_api_key_auth_operation():
    record_test('auth-api-key-auth-operation')

    s = SDK()
    assert s is not None

    res = s.auth.api_key_auth(security=APIKeyAuthSecurity(
        api_key_auth='Bearer test_token'
    ))
    assert res is not None
    assert res.status_code == 200
    assert res.token.authenticated is True
    assert res.token.token == 'test_token'


def test_bearer_auth_operation_with_prefix():
    record_test('auth-bearer-auth-operation-with-prefix')

    s = SDK()
    assert s is not None

    res = s.auth.bearer_auth(security=BearerAuthSecurity(
        bearer_auth='Bearer test_token'
    ))
    assert res is not None
    assert res.status_code == 200
    assert res.token.authenticated is True
    assert res.token.token == 'test_token'


def test_bearer_auth_operation_without_prefix():
    record_test('auth-bearer-auth-operation-without-prefix')

    s = SDK()
    assert s is not None

    res = s.auth.bearer_auth(security=BearerAuthSecurity(
        bearer_auth='test_token'
    ))
    assert res is not None
    assert res.status_code == 200
    assert res.token.authenticated is True
    assert res.token.token == 'test_token'


def test_oauth2_auth():
    record_test('auth-oauth2-auth')

    s = SDK()
    assert s is not None

    res = s.auth_new.oauth2_auth_new(request=shared.AuthServiceRequestBody(
        header_auth=[shared.AuthServiceRequestBodyHeaderAuth(
            header_name='Authorization',
            expected_value='Bearer testToken',
        )]
    ), security=Oauth2AuthNewSecurity(
        oauth2='Bearer testToken',
    ))
    assert res is not None
    assert res.status_code == 200


def test_open_id_connect_auth():
    record_test('auth-open-id-connect-auth')

    s = SDK()
    assert s is not None

    res = s.auth_new.open_id_connect_auth_new(request=shared.AuthServiceRequestBody(
        header_auth=[shared.AuthServiceRequestBodyHeaderAuth(
            header_name='Authorization',
            expected_value='Bearer testToken',
        )]
    ), security=OpenIDConnectAuthNewSecurity(
        open_id_connect='Bearer testToken',
    ))
    assert res is not None
    assert res.status_code == 200


def test_multiple_simple_scheme_auth():
    record_test('auth-multiple-simple-scheme-auth')

    s = SDK()
    assert s is not None

    res = s.auth_new.multiple_simple_scheme_auth(request=shared.AuthServiceRequestBody(
        header_auth=[
            shared.AuthServiceRequestBodyHeaderAuth(
                header_name='x-api-key',
                expected_value='test_api_key',
            ),
            shared.AuthServiceRequestBodyHeaderAuth(
                header_name='Authorization',
                expected_value='Bearer testToken',
            )
        ]
    ), security=MultipleSimpleSchemeAuthSecurity(
        api_key_auth_new='test_api_key',
        oauth2='Bearer testToken',
    ))
    assert res is not None
    assert res.status_code == 200


def test_multiple_mixed_scheme_auth():
    record_test('auth-multiple-mixed-scheme-auth')

    s = SDK()
    assert s is not None

    res = s.auth_new.multiple_mixed_scheme_auth(request=shared.AuthServiceRequestBody(
        header_auth=[
            shared.AuthServiceRequestBodyHeaderAuth(
                header_name='x-api-key',
                expected_value='test_api_key',
            ),
        ],
        basic_auth=shared.AuthServiceRequestBodyBasicAuth(
            username='testUser',
            password='testPass',
        )
    ), security=MultipleMixedSchemeAuthSecurity(
        api_key_auth_new='test_api_key',
        basic_auth=shared.SchemeBasicAuth(
            username='testUser',
            password='testPass',
        ),
    ))
    assert res is not None
    assert res.status_code == 200


def test_multiple_simple_options_auth_first_option():
    record_test('auth-multiple-simple-options-auth-first-option')

    s = SDK()
    assert s is not None

    res = s.auth_new.multiple_simple_options_auth(request=shared.AuthServiceRequestBody(
        header_auth=[
            shared.AuthServiceRequestBodyHeaderAuth(
                header_name='x-api-key',
                expected_value='test_api_key',
            ),
        ],
    ), security=MultipleSimpleOptionsAuthSecurity(
        api_key_auth_new='test_api_key',
    ))
    assert res is not None
    assert res.status_code == 200


def test_multiple_simple_options_auth_second_option():
    record_test('auth-multiple-simple-options-auth-second-option')

    s = SDK()
    assert s is not None

    res = s.auth_new.multiple_simple_options_auth(request=shared.AuthServiceRequestBody(
        header_auth=[
            shared.AuthServiceRequestBodyHeaderAuth(
                header_name='Authorization',
                expected_value='Bearer testToken',
            ),
        ],
    ), security=MultipleSimpleOptionsAuthSecurity(
        oauth2='Bearer testToken',
    ))
    assert res is not None
    assert res.status_code == 200


def test_multiple_mixed_options_auth_first_option():
    record_test('auth-multiple-mixed-options-auth-first-option')

    s = SDK()
    assert s is not None

    res = s.auth_new.multiple_mixed_options_auth(request=shared.AuthServiceRequestBody(
        header_auth=[
            shared.AuthServiceRequestBodyHeaderAuth(
                header_name='x-api-key',
                expected_value='test_api_key',
            ),
        ],
    ), security=MultipleMixedOptionsAuthSecurity(
        api_key_auth_new='test_api_key',
    ))
    assert res is not None
    assert res.status_code == 200


def test_multiple_mixed_options_auth_second_option():
    record_test('auth-multiple-mixed-options-auth-second-option')

    s = SDK()
    assert s is not None

    res = s.auth_new.multiple_mixed_options_auth(request=shared.AuthServiceRequestBody(
        basic_auth=shared.AuthServiceRequestBodyBasicAuth(
            username='testUser',
            password='testPass',
        ),
    ), security=MultipleMixedOptionsAuthSecurity(
        basic_auth=shared.SchemeBasicAuth(
            username='testUser',
            password='testPass',
        ),
    ))
    assert res is not None
    assert res.status_code == 200


def test_multiple_options_with_simple_schemes_auth_first_option():
    record_test('auth-multiple-options-with-simple-schemes-auth-first-option')

    s = SDK()
    assert s is not None

    res = s.auth_new.multiple_options_with_simple_schemes_auth(request=shared.AuthServiceRequestBody(
        header_auth=[
            shared.AuthServiceRequestBodyHeaderAuth(
                header_name='x-api-key',
                expected_value='test_api_key',
            ),
            shared.AuthServiceRequestBodyHeaderAuth(
                header_name='Authorization',
                expected_value='Bearer testToken',
            )
        ],
    ), security=MultipleOptionsWithSimpleSchemesAuthSecurity(
        option1=MultipleOptionsWithSimpleSchemesAuthSecurityOption1(
            api_key_auth_new='test_api_key',
            oauth2='Bearer testToken',
        ),
    ))
    assert res is not None
    assert res.status_code == 200


def test_multiple_options_with_simple_schemes_auth_second_option():
    record_test('auth-multiple-options-with-simple-schemes-auth-second-option')

    s = SDK()
    assert s is not None

    res = s.auth_new.multiple_options_with_simple_schemes_auth(request=shared.AuthServiceRequestBody(
        header_auth=[
            shared.AuthServiceRequestBodyHeaderAuth(
                header_name='x-api-key',
                expected_value='test_api_key',
            ),
            shared.AuthServiceRequestBodyHeaderAuth(
                header_name='Authorization',
                expected_value='Bearer testToken',
            )
        ],
    ), security=MultipleOptionsWithSimpleSchemesAuthSecurity(
        option2=MultipleOptionsWithSimpleSchemesAuthSecurityOption2(
            api_key_auth_new='test_api_key',
            open_id_connect='Bearer testToken',
        ),
    ))
    assert res is not None
    assert res.status_code == 200


def test_multiple_options_with_mixed_schemes_auth_first_option():
    record_test('auth-multiple-options-with-mixed-schemes-auth-first-option')

    s = SDK()
    assert s is not None

    res = s.auth_new.multiple_options_with_mixed_schemes_auth(request=shared.AuthServiceRequestBody(
        header_auth=[
            shared.AuthServiceRequestBodyHeaderAuth(
                header_name='x-api-key',
                expected_value='test_api_key',
            ),
            shared.AuthServiceRequestBodyHeaderAuth(
                header_name='Authorization',
                expected_value='Bearer testToken',
            )
        ],
    ), security=MultipleOptionsWithMixedSchemesAuthSecurity(
        option1=MultipleOptionsWithMixedSchemesAuthSecurityOption1(
            api_key_auth_new='test_api_key',
            oauth2='Bearer testToken',
        ),
    ))
    assert res is not None
    assert res.status_code == 200


def test_multiple_options_with_mixed_schemes_auth_second_option():
    record_test('auth-multiple-options-with-mixed-schemes-auth-second-option')

    s = SDK()
    assert s is not None

    res = s.auth_new.multiple_options_with_mixed_schemes_auth(request=shared.AuthServiceRequestBody(
        header_auth=[
            shared.AuthServiceRequestBodyHeaderAuth(
                header_name='x-api-key',
                expected_value='test_api_key',
            ),
        ],
        basic_auth=shared.AuthServiceRequestBodyBasicAuth(
            username='testUser',
            password='testPass',
        ),
    ), security=MultipleOptionsWithMixedSchemesAuthSecurity(
        option2=MultipleOptionsWithMixedSchemesAuthSecurityOption2(
            api_key_auth_new='test_api_key',
            basic_auth=shared.SchemeBasicAuth(
                username='testUser',
                password='testPass',
            ),
        ),
    ))
    assert res is not None
    assert res.status_code == 200
