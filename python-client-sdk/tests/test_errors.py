"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import pytest
import requests
from sdk import SDK
from sdk.models import errors

from .helpers import *


def test_status_get_error_default_error_codes():
    record_test('errors-status-get-error-default-error-codes')

    s = SDK()
    assert s is not None

    with pytest.raises(errors.SDKError, match="API error occurred: Status 400") as exc_info:
        res = s.errors.status_get_error(status_code=400)

    assert exc_info.value.status_code == 400
    assert exc_info.value.raw_response.status_code == 400

    with pytest.raises(errors.SDKError, match="API error occurred: Status 500") as exc_info:
        res = s.errors.status_get_error(status_code=500)

    assert exc_info.value.status_code == 500
    assert exc_info.value.raw_response.status_code == 500


def test_status_get_error_300_non_error():
    record_test('errors-status-get-error-300-non-error')

    s = SDK()
    assert s is not None

    res = s.errors.status_get_error(status_code=300)
    assert res.status_code == 300


def test_status_get_x_speakeasy_errors():
    record_test('errors-status-get-error-x-speakeasy-errors')

    s = SDK()
    assert s is not None

    with pytest.raises(errors.SDKError, match='API error occurred: Status 400\n{"message":"an error occurred","code":"400"}\n') as exc_info:
        res = s.errors.status_get_x_speakeasy_errors(status_code=400)

    assert exc_info.value.status_code == 400
    assert exc_info.value.raw_response.status_code == 400

    with pytest.raises(errors.SDKError, match='API error occurred: Status 401\n{"message":"an error occurred","code":"401"}\n') as exc_info:
        res = s.errors.status_get_x_speakeasy_errors(status_code=401)

    assert exc_info.value.status_code == 401
    assert exc_info.value.raw_response.status_code == 401

    with pytest.raises(errors.SDKError, match='API error occurred: Status 402\n{"message":"an error occurred","code":"402"}\n') as exc_info:
        res = s.errors.status_get_x_speakeasy_errors(status_code=402)

    assert exc_info.value.status_code == 402
    assert exc_info.value.raw_response.status_code == 402

    with pytest.raises(errors.Error, match='an error occurred') as exc_info:
        res = s.errors.status_get_x_speakeasy_errors(status_code=500)

    assert exc_info.value.code == "500"
    assert exc_info.value.raw_response.status_code == 500

    with pytest.raises(errors.StatusGetXSpeakeasyErrors501ApplicationJSON, match='{"code": "501", "message": "an error occurred"}') as exc_info:
        res = s.errors.status_get_x_speakeasy_errors(status_code=501)

    assert exc_info.value.code == "501"
    assert exc_info.value.raw_response.status_code == 501


def test_connection_error_get():
    record_test('errors-connection-error')

    s = SDK()
    assert s is not None

    with pytest.raises(requests.exceptions.ConnectionError, match='Failed to resolve \'somebrokenapi.broken\'') as exc_info:
        res = s.errors.connection_error_get()
