"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from src.sdk import SDK
from src.sdk.models.operations import *
from src.sdk.models.shared import *
from src.sdk.utils import *

from .helpers import *


def test_pagination_limit_offset_page_params():
    record_test("pagination-limitOffset-page-params");

    s = SDK()
    assert s is not None
    serverLimit = 20

    res = s.pagination.pagination_limit_offset_page_params(
        page=1
    )

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert len(res.res.result_array) == serverLimit

    next_res = res.next()
    assert next_res is not None
    assert next_res.status_code == 200
    assert next_res.res is not None
    assert len(next_res.res.result_array) == 0

    null_res = next_res.next()
    assert null_res is None


def test_pagination_limitOffset_page_body():
    record_test("pagination-limitOffset-page-body");

    s = SDK()
    assert s is not None
    limit = 15

    res = s.pagination.pagination_limit_offset_page_body(
        request=LimitOffsetConfig(
            limit=limit,
            page=1
        )
    )

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert len(res.res.result_array) == limit

    next_res = res.next()
    assert next_res is not None
    assert next_res.status_code == 200
    assert next_res.res is not None
    assert len(next_res.res.result_array) < limit

    null_res = next_res.next()
    assert null_res is None


def test_pagination_limit_offset_offset_params():
    record_test("pagination-limitOffset-offset-params");

    s = SDK()
    assert s is not None
    limit = 15

    res = s.pagination.pagination_limit_offset_offset_params(
        limit=limit,
        offset=0
    )

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert len(res.res.result_array) == limit

    next_res = res.next()
    assert next_res is not None
    assert next_res.status_code == 200
    assert next_res.res is not None
    assert len(next_res.res.result_array) < limit

    null_res = next_res.next()
    assert null_res is None


def test_pagination_limitOffset_offset_body():
    record_test("pagination-limitOffset-offset-body");

    s = SDK()
    assert s is not None
    limit = 15

    res = s.pagination.pagination_limit_offset_offset_body(
        request=LimitOffsetConfig(
            limit=limit,
            offset=0
        )
    )

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert len(res.res.result_array) == limit

    next_res = res.next()
    assert next_res is not None
    assert next_res.status_code == 200
    assert next_res.res is not None
    assert len(next_res.res.result_array) < limit

    null_res = next_res.next()
    assert null_res is None


def test_pagination_cursor_params():
    record_test("pagination-cursor-params");

    s = SDK()
    assert s is not None
    limit = 15

    res = s.pagination.pagination_cursor_body(
        request=PaginationCursorBodyRequestBody(
            cursor=-1,
        )
    )

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert len(res.res.result_array) == limit

    next_res = res.next()
    assert next_res is not None
    assert next_res.status_code == 200
    assert next_res.res is not None
    assert len(next_res.res.result_array) < limit

    penultimate_res = next_res.next()
    assert penultimate_res is not None
    assert penultimate_res.status_code == 200
    assert penultimate_res.res is not None
    assert len(penultimate_res.res.result_array) == 0

    null_res = penultimate_res.next()
    assert null_res is None


def test_pagination_cursor_body():
    record_test("pagination-cursor-body");

    s = SDK()
    assert s is not None
    limit = 15

    res = s.pagination.pagination_cursor_params(
        cursor=-1
    )

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert len(res.res.result_array) == limit

    next_res = res.next()
    assert next_res is not None
    assert next_res.status_code == 200
    assert next_res.res is not None
    assert len(next_res.res.result_array) < limit

    penultimate_res = next_res.next()
    assert penultimate_res is not None
    assert penultimate_res.status_code == 200
    assert penultimate_res.res is not None
    assert len(penultimate_res.res.result_array) == 0

    null_res = penultimate_res.next()
    assert null_res is None