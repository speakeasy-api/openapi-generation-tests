"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import dateutil.parser
import sdk
from .helpers import *
from decimal import Decimal
from sdk.models import operations, shared


def test_parameters_deep_object_query_params_map():
    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
        global_path_param=100,
        global_query_param='some example global query param',
    )
    
    assert s is not None

    
    res = s.parameters.deep_object_query_params_map(map_param={
        "test": 'value',
        "test2": 'value2',
    }, map_arr_param={
        "test": [
            'test',
            'test2',
        ],
        "test2": [
            'test3',
            'test4',
        ],
    })
    assert res is not None

    assert res.status_code == 200
    assert res.res.args ==         {
                "mapArrParam[test]": [
                    'test',
                    'test2',
                ],
                "mapArrParam[test2]": [
                    'test3',
                    'test4',
                ],
                "mapParam[test]": 'value',
                "mapParam[test2]": 'value2',
            }
    assert sort_query_parameters(res.res.url) == 'http://localhost:35123/anything/queryParams/deepObject/map?mapArrParam[test2]=test3&mapArrParam[test2]=test4&mapArrParam[test]=test&mapArrParam[test]=test2&mapParam[test2]=value2&mapParam[test]=value'

def test_parameters_deep_object_query_params_object():
    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
        global_path_param=100,
        global_query_param='some example global query param',
    )
    
    assert s is not None

    
    res = s.parameters.deep_object_query_params_object(obj_param=shared.SimpleObject(
        any='any',
        bigint=8821239038968084,
        bigint_str=9223372036854775808,
        bool=True,
        bool_opt=True,
        date_=dateutil.parser.parse('2020-01-01').date(),
        date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.000001Z'),
        decimal=Decimal('3.141592653589793'),
        decimal_str=Decimal('3.14159265358979344719667586'),
        enum=shared.EnumT.ONE,
        float32=1.1,
        int=1,
        int32=1,
        int32_enum=shared.Int32Enum.FIFTY_FIVE,
        int_enum=shared.IntEnum.SECOND,
        num=1.1,
        str_='test',
        str_opt='testOptional',
    ), obj_arr_param=operations.ObjArrParam(
        arr=[
            'test',
            'test2',
        ],
    ))
    assert res is not None

    assert res.status_code == 200
    assert res.res.args.obj_arr_param_arr ==         [
                'test',
                'test2',
            ]
    assert res.res.args.obj_param_any == 'any'
    assert res.res.args.obj_param_bigint_str == '9223372036854775808'
    assert res.res.args.obj_param_bigint == '8821239038968084'
    assert res.res.args.obj_param_bool_opt == 'true'
    assert res.res.args.obj_param_bool == 'true'
    assert res.res.args.obj_param_date_time == '2020-01-01T00:00:00.000001Z'
    assert res.res.args.obj_param_date == '2020-01-01'
    assert res.res.args.obj_param_decimal_str == '3.14159265358979344719667586'
    assert res.res.args.obj_param_decimal == '3.141592653589793'
    assert res.res.args.obj_param_enum == 'one'
    assert res.res.args.obj_param_float32 == '1.1'
    assert res.res.args.obj_param_int32_enum == '55'
    assert res.res.args.obj_param_int32 == '1'
    assert res.res.args.obj_param_int_enum == '2'
    assert res.res.args.obj_param_int == '1'
    assert res.res.args.obj_param_num == '1.1'
    assert res.res.args.obj_param_str_opt == 'testOptional'
    assert res.res.args.obj_param_str == 'test'
    assert sort_query_parameters(res.res.url) == 'http://localhost:35123/anything/queryParams/deepObject/obj?objArrParam[arr]=test&objArrParam[arr]=test2&objParam[any]=any&objParam[bigintStr]=9223372036854775808&objParam[bigint]=8821239038968084&objParam[boolOpt]=true&objParam[bool]=true&objParam[dateTime]=2020-01-01T00%3A00%3A00.000001Z&objParam[date]=2020-01-01&objParam[decimalStr]=3.14159265358979344719667586&objParam[decimal]=3.141592653589793&objParam[enum]=one&objParam[float32]=1.1&objParam[int32Enum]=55&objParam[int32]=1&objParam[intEnum]=2&objParam[int]=1&objParam[num]=1.1&objParam[strOpt]=testOptional&objParam[str]=test'

def test_parameters_form_query_params_array():
    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
        global_path_param=100,
        global_query_param='some example global query param',
    )
    
    assert s is not None

    
    res = s.parameters.form_query_params_array(arr_param=[
        'test',
        'test2',
    ], arr_param_exploded=[
        1,
        2,
    ])
    assert res is not None

    assert res.status_code == 200
    assert res.res.args.arr_param == 'test,test2'
    assert res.res.args.arr_param_exploded ==         [
                '1',
                '2',
            ]
    assert res.res.url == 'http://localhost:35123/anything/queryParams/form/array?arrParam=test%2Ctest2&arrParamExploded=1&arrParamExploded=2'

def test_parameters_form_query_params_camel_object():
    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
        global_path_param=100,
        global_query_param='some example global query param',
    )
    
    assert s is not None

    
    res = s.parameters.form_query_params_camel_object(obj_param_exploded=operations.ObjParamExploded(
        item_count='10',
        search_term='foo',
    ), obj_param=operations.ObjParam(
        encoded_count='11',
        encoded_term='bar',
    ))
    assert res is not None

    assert res.status_code == 200
    assert res.res.args.item_count == '10'
    assert res.res.args.search_term == 'foo'
    assert sort_query_parameters(res.res.url) == 'http://localhost:35123/anything/queryParams/form/camelObj?item_count=10&obj_param=encoded_count%2C11%2Cencoded_term%2Cbar&search_term=foo'

def test_parameters_form_query_params_map():
    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
        global_path_param=100,
        global_query_param='some example global query param',
    )
    
    assert s is not None

    
    res = s.parameters.form_query_params_map(map_param={
        "test": 'value',
        "test2": 'value2',
    }, map_param_exploded={
        "test": 1,
        "test2": 2,
    })
    assert res is not None

    assert res.status_code == 200
    assert sort_serialized_maps(res.res.args, r'(.*)', ',') ==         {
                "test": '1',
                "test2": '2',
                "mapParam": 'test,value,test2,value2',
            }
    assert sort_serialized_maps(res.res.url, r'.*?\?mapParam=(.*?)&(.*)', '%2C') == 'http://localhost:35123/anything/queryParams/form/map?mapParam=test%2Cvalue%2Ctest2%2Cvalue2&test=1&test2=2'

def test_parameters_form_query_params_object():
    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
        global_path_param=100,
        global_query_param='some example global query param',
    )
    
    assert s is not None

    
    res = s.parameters.form_query_params_object(obj_param_exploded=shared.SimpleObject(
        any='any',
        bigint=8821239038968084,
        bigint_str=9223372036854775808,
        bool=True,
        bool_opt=True,
        date_=dateutil.parser.parse('2020-01-01').date(),
        date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.000001Z'),
        decimal=Decimal('3.141592653589793'),
        decimal_str=Decimal('3.14159265358979344719667586'),
        enum=shared.EnumT.ONE,
        float32=1.1,
        int=1,
        int32=1,
        int32_enum=shared.Int32Enum.FIFTY_FIVE,
        int_enum=shared.IntEnum.SECOND,
        num=1.1,
        str_='test',
        str_opt='testOptional',
    ), obj_param=shared.SimpleObject(
        any='any',
        bigint=8821239038968084,
        bigint_str=9223372036854775808,
        bool=True,
        bool_opt=True,
        date_=dateutil.parser.parse('2020-01-01').date(),
        date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.000001Z'),
        decimal=Decimal('3.141592653589793'),
        decimal_str=Decimal('3.14159265358979344719667586'),
        enum=shared.EnumT.ONE,
        float32=1.1,
        int=1,
        int32=1,
        int32_enum=shared.Int32Enum.FIFTY_FIVE,
        int_enum=shared.IntEnum.SECOND,
        num=1.1,
        str_='test',
        str_opt='testOptional',
    ))
    assert res is not None

    assert res.status_code == 200
    assert res.res.args.any == 'any'
    assert res.res.args.bigint == '8821239038968084'
    assert res.res.args.bigint_str == '9223372036854775808'
    assert res.res.args.bool == 'true'
    assert res.res.args.bool_opt == 'true'
    assert res.res.args.date_ == '2020-01-01'
    assert res.res.args.date_time == '2020-01-01T00:00:00.000001Z'
    assert res.res.args.decimal == '3.141592653589793'
    assert res.res.args.decimal_str == '3.14159265358979344719667586'
    assert res.res.args.enum == 'one'
    assert res.res.args.float32 == '1.1'
    assert res.res.args.int == '1'
    assert res.res.args.int32 == '1'
    assert res.res.args.int32_enum == '55'
    assert res.res.args.int_enum == '2'
    assert res.res.args.int_opt_null is None
    assert res.res.args.num == '1.1'
    assert res.res.args.num_opt_null is None
    assert sort_serialized_maps(res.res.args.obj_param, r'(.*)', ',') == 'any,any,bigint,8821239038968084,bigintStr,9223372036854775808,bool,true,boolOpt,true,date,2020-01-01,dateTime,2020-01-01T00:00:00.000001Z,decimal,3.141592653589793,decimalStr,3.14159265358979344719667586,enum,one,float32,1.1,int,1,int32,1,int32Enum,55,intEnum,2,num,1.1,str,test,strOpt,testOptional'
    assert res.res.args.str_ == 'test'
    assert res.res.args.str_opt == 'testOptional'
    assert sort_serialized_maps(sort_query_parameters(res.res.url), r'objParam=(.*?)&', '%2C') == 'http://localhost:35123/anything/queryParams/form/obj?any=any&bigint=8821239038968084&bigintStr=9223372036854775808&bool=true&boolOpt=true&date=2020-01-01&dateTime=2020-01-01T00%3A00%3A00.000001Z&decimal=3.141592653589793&decimalStr=3.14159265358979344719667586&enum=one&float32=1.1&int=1&int32=1&int32Enum=55&intEnum=2&num=1.1&objParam=any%2Cany%2Cbigint%2C8821239038968084%2CbigintStr%2C9223372036854775808%2Cbool%2Ctrue%2CboolOpt%2Ctrue%2Cdate%2C2020-01-01%2CdateTime%2C2020-01-01T00%3A00%3A00.000001Z%2Cdecimal%2C3.141592653589793%2CdecimalStr%2C3.14159265358979344719667586%2Cenum%2Cone%2Cfloat32%2C1.1%2Cint%2C1%2Cint32%2C1%2Cint32Enum%2C55%2CintEnum%2C2%2Cnum%2C1.1%2Cstr%2Ctest%2CstrOpt%2CtestOptional&str=test&strOpt=testOptional'

def test_parameters_form_query_params_primitive():
    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
        global_path_param=100,
        global_query_param='some example global query param',
    )
    
    assert s is not None

    
    res = s.parameters.form_query_params_primitive(bool_param=True, int_param=1, num_param=1.1, str_param='test')
    assert res is not None

    assert res.status_code == 200
    assert res.res.args.bool_param == 'true'
    assert res.res.args.int_param == '1'
    assert res.res.args.num_param == '1.1'
    assert res.res.args.str_param == 'test'
    assert res.res.url == 'http://localhost:35123/anything/queryParams/form/primitive?boolParam=true&intParam=1&numParam=1.1&strParam=test'

def test_parameters_form_query_params_ref_param_object():
    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
        global_path_param=100,
        global_query_param='some example global query param',
    )
    
    assert s is not None

    
    res = s.parameters.form_query_params_ref_param_object(ref_obj_param=shared.RefQueryParamObj(
        bool=True,
        int=1,
        num=1.1,
        str_='test',
    ), ref_obj_param_exploded=shared.RefQueryParamObjExploded(
        bool=True,
        int=1,
        num=1.1,
        str_='test',
    ))
    assert res is not None

    assert res.status_code == 200
    assert res.res.args.bool == 'true'
    assert res.res.args.int == '1'
    assert res.res.args.num == '1.1'
    assert res.res.args.ref_obj_param == 'bool,true,int,1,num,1.1,str,test'
    assert res.res.args.str_ == 'test'
    assert sort_query_parameters(res.res.url) == 'http://localhost:35123/anything/queryParams/form/refParamObject?bool=true&int=1&num=1.1&refObjParam=bool%2Ctrue%2Cint%2C1%2Cnum%2C1.1%2Cstr%2Ctest&str=test'

def test_parameters_header_params_array():
    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
        global_path_param=100,
        global_query_param='some example global query param',
    )
    
    assert s is not None

    
    res = s.parameters.header_params_array(x_header_array=[
        'test1',
        'test2',
    ])
    assert res is not None

    assert res.status_code == 200
    assert res.res.headers.x_header_array == 'test1,test2'

def test_parameters_header_params_map():
    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
        global_path_param=100,
        global_query_param='some example global query param',
    )
    
    assert s is not None

    
    res = s.parameters.header_params_map(x_header_map={
        "key1": 'value1',
        "key2": 'value2',
    }, x_header_map_explode={
        "test2": 'val2',
        "test1": 'val1',
    })
    assert res is not None

    assert res.status_code == 200
    assert sort_serialized_maps(res.res.headers.x_header_map, r'(.*)', ',') == 'key1,value1,key2,value2'
    assert sort_serialized_maps(res.res.headers.x_header_map_explode, r'(.*)', ',') == 'test1=val1,test2=val2'

def test_parameters_header_params_object():
    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
        global_path_param=100,
        global_query_param='some example global query param',
    )
    
    assert s is not None

    
    res = s.parameters.header_params_object(x_header_obj=shared.SimpleObject(
        any='any',
        bigint=8821239038968084,
        bigint_str=9223372036854775808,
        bool=True,
        bool_opt=True,
        date_=dateutil.parser.parse('2020-01-01').date(),
        date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.000001Z'),
        decimal=Decimal('3.141592653589793'),
        decimal_str=Decimal('3.14159265358979344719667586'),
        enum=shared.EnumT.ONE,
        float32=1.1,
        int=1,
        int32=1,
        int32_enum=shared.Int32Enum.FIFTY_FIVE,
        int_enum=shared.IntEnum.SECOND,
        num=1.1,
        str_='test',
        str_opt='testOptional',
    ), x_header_obj_explode=shared.SimpleObject(
        any='any',
        bigint=8821239038968084,
        bigint_str=9223372036854775808,
        bool=True,
        bool_opt=True,
        date_=dateutil.parser.parse('2020-01-01').date(),
        date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.000001Z'),
        decimal=Decimal('3.141592653589793'),
        decimal_str=Decimal('3.14159265358979344719667586'),
        enum=shared.EnumT.ONE,
        float32=1.1,
        int=1,
        int32=1,
        int32_enum=shared.Int32Enum.FIFTY_FIVE,
        int_enum=shared.IntEnum.SECOND,
        num=1.1,
        str_='test',
        str_opt='testOptional',
    ))
    assert res is not None

    assert res.status_code == 200
    assert sort_serialized_maps(res.res.headers.x_header_obj, r'(.*)', ',') == 'any,any,bigint,8821239038968084,bigintStr,9223372036854775808,bool,true,boolOpt,true,date,2020-01-01,dateTime,2020-01-01T00:00:00.000001Z,decimal,3.141592653589793,decimalStr,3.14159265358979344719667586,enum,one,float32,1.1,int,1,int32,1,int32Enum,55,intEnum,2,num,1.1,str,test,strOpt,testOptional'
    assert sort_serialized_maps(res.res.headers.x_header_obj_explode, r'(.*)', ',') == 'any=any,bigint=8821239038968084,bigintStr=9223372036854775808,bool=true,boolOpt=true,date=2020-01-01,dateTime=2020-01-01T00:00:00.000001Z,decimal=3.141592653589793,decimalStr=3.14159265358979344719667586,enum=one,float32=1.1,int=1,int32=1,int32Enum=55,intEnum=2,num=1.1,str=test,strOpt=testOptional'

def test_parameters_header_params_primitive():
    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
        global_path_param=100,
        global_query_param='some example global query param',
    )
    
    assert s is not None

    
    res = s.parameters.header_params_primitive(x_header_boolean=True, x_header_integer=1, x_header_number=1.1, x_header_string='test')
    assert res is not None

    assert res.status_code == 200
    assert res.res.headers.x_header_boolean == 'true'
    assert res.res.headers.x_header_integer == '1'
    assert res.res.headers.x_header_number == '1.1'
    assert res.res.headers.x_header_string == 'test'

def test_parameters_json_query_params_object():
    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
        global_path_param=100,
        global_query_param='some example global query param',
    )
    
    assert s is not None

    
    res = s.parameters.json_query_params_object(deep_obj_param=shared.DeepObject(
        any=shared.SimpleObject(
        any='any',
        bigint=8821239038968084,
        bigint_str=9223372036854775808,
        bool=True,
        bool_opt=True,
        date_=dateutil.parser.parse('2020-01-01').date(),
        date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.000001Z'),
        decimal=Decimal('3.141592653589793'),
        decimal_str=Decimal('3.14159265358979344719667586'),
        enum=shared.EnumT.ONE,
        float32=1.1,
        int=1,
        int32=1,
        int32_enum=shared.Int32Enum.FIFTY_FIVE,
        int_enum=shared.IntEnum.SECOND,
        num=1.1,
        str_='test',
        str_opt='testOptional',
    ),
        arr=[
            shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.000001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
            shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.000001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
        ],
        bool=True,
        int=1,
        map={
            "key": shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.000001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
            "key2": shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.000001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
        },
        num=1.1,
        obj=shared.SimpleObject(
            any='any',
            bigint=8821239038968084,
            bigint_str=9223372036854775808,
            bool=True,
            bool_opt=True,
            date_=dateutil.parser.parse('2020-01-01').date(),
            date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.000001Z'),
            decimal=Decimal('3.141592653589793'),
            decimal_str=Decimal('3.14159265358979344719667586'),
            enum=shared.EnumT.ONE,
            float32=1.1,
            int=1,
            int32=1,
            int32_enum=shared.Int32Enum.FIFTY_FIVE,
            int_enum=shared.IntEnum.SECOND,
            num=1.1,
            str_='test',
            str_opt='testOptional',
        ),
        str_='test',
    ), simple_obj_param=shared.SimpleObject(
        any='any',
        bigint=8821239038968084,
        bigint_str=9223372036854775808,
        bool=True,
        bool_opt=True,
        date_=dateutil.parser.parse('2020-01-01').date(),
        date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.000001Z'),
        decimal=Decimal('3.141592653589793'),
        decimal_str=Decimal('3.14159265358979344719667586'),
        enum=shared.EnumT.ONE,
        float32=1.1,
        int=1,
        int32=1,
        int32_enum=shared.Int32Enum.FIFTY_FIVE,
        int_enum=shared.IntEnum.SECOND,
        num=1.1,
        str_='test',
        str_opt='testOptional',
    ))
    assert res is not None

    assert res.status_code == 200
    assert res.res.args.deep_obj_param == '{"any":{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.000001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"int":1,"int32":1,"int32Enum":55,"intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"},"arr":[{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.000001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"int":1,"int32":1,"int32Enum":55,"intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"},{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.000001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"int":1,"int32":1,"int32Enum":55,"intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"}],"bool":true,"int":1,"map":{"key":{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.000001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"int":1,"int32":1,"int32Enum":55,"intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"},"key2":{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.000001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"int":1,"int32":1,"int32Enum":55,"intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"}},"num":1.1,"obj":{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.000001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"int":1,"int32":1,"int32Enum":55,"intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"},"str":"test"}'
    assert res.res.args.simple_obj_param == '{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.000001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"int":1,"int32":1,"int32Enum":55,"intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"}'
    assert res.res.url == 'http://localhost:35123/anything/queryParams/json/obj?deepObjParam={"any"%3A{"any"%3A"any"%2C"bigint"%3A8821239038968084%2C"bigintStr"%3A"9223372036854775808"%2C"bool"%3Atrue%2C"boolOpt"%3Atrue%2C"date"%3A"2020-01-01"%2C"dateTime"%3A"2020-01-01T00%3A00%3A00.000001Z"%2C"decimal"%3A3.141592653589793%2C"decimalStr"%3A"3.14159265358979344719667586"%2C"enum"%3A"one"%2C"float32"%3A1.1%2C"int"%3A1%2C"int32"%3A1%2C"int32Enum"%3A55%2C"intEnum"%3A2%2C"num"%3A1.1%2C"str"%3A"test"%2C"strOpt"%3A"testOptional"}%2C"arr"%3A[{"any"%3A"any"%2C"bigint"%3A8821239038968084%2C"bigintStr"%3A"9223372036854775808"%2C"bool"%3Atrue%2C"boolOpt"%3Atrue%2C"date"%3A"2020-01-01"%2C"dateTime"%3A"2020-01-01T00%3A00%3A00.000001Z"%2C"decimal"%3A3.141592653589793%2C"decimalStr"%3A"3.14159265358979344719667586"%2C"enum"%3A"one"%2C"float32"%3A1.1%2C"int"%3A1%2C"int32"%3A1%2C"int32Enum"%3A55%2C"intEnum"%3A2%2C"num"%3A1.1%2C"str"%3A"test"%2C"strOpt"%3A"testOptional"}%2C{"any"%3A"any"%2C"bigint"%3A8821239038968084%2C"bigintStr"%3A"9223372036854775808"%2C"bool"%3Atrue%2C"boolOpt"%3Atrue%2C"date"%3A"2020-01-01"%2C"dateTime"%3A"2020-01-01T00%3A00%3A00.000001Z"%2C"decimal"%3A3.141592653589793%2C"decimalStr"%3A"3.14159265358979344719667586"%2C"enum"%3A"one"%2C"float32"%3A1.1%2C"int"%3A1%2C"int32"%3A1%2C"int32Enum"%3A55%2C"intEnum"%3A2%2C"num"%3A1.1%2C"str"%3A"test"%2C"strOpt"%3A"testOptional"}]%2C"bool"%3Atrue%2C"int"%3A1%2C"map"%3A{"key"%3A{"any"%3A"any"%2C"bigint"%3A8821239038968084%2C"bigintStr"%3A"9223372036854775808"%2C"bool"%3Atrue%2C"boolOpt"%3Atrue%2C"date"%3A"2020-01-01"%2C"dateTime"%3A"2020-01-01T00%3A00%3A00.000001Z"%2C"decimal"%3A3.141592653589793%2C"decimalStr"%3A"3.14159265358979344719667586"%2C"enum"%3A"one"%2C"float32"%3A1.1%2C"int"%3A1%2C"int32"%3A1%2C"int32Enum"%3A55%2C"intEnum"%3A2%2C"num"%3A1.1%2C"str"%3A"test"%2C"strOpt"%3A"testOptional"}%2C"key2"%3A{"any"%3A"any"%2C"bigint"%3A8821239038968084%2C"bigintStr"%3A"9223372036854775808"%2C"bool"%3Atrue%2C"boolOpt"%3Atrue%2C"date"%3A"2020-01-01"%2C"dateTime"%3A"2020-01-01T00%3A00%3A00.000001Z"%2C"decimal"%3A3.141592653589793%2C"decimalStr"%3A"3.14159265358979344719667586"%2C"enum"%3A"one"%2C"float32"%3A1.1%2C"int"%3A1%2C"int32"%3A1%2C"int32Enum"%3A55%2C"intEnum"%3A2%2C"num"%3A1.1%2C"str"%3A"test"%2C"strOpt"%3A"testOptional"}}%2C"num"%3A1.1%2C"obj"%3A{"any"%3A"any"%2C"bigint"%3A8821239038968084%2C"bigintStr"%3A"9223372036854775808"%2C"bool"%3Atrue%2C"boolOpt"%3Atrue%2C"date"%3A"2020-01-01"%2C"dateTime"%3A"2020-01-01T00%3A00%3A00.000001Z"%2C"decimal"%3A3.141592653589793%2C"decimalStr"%3A"3.14159265358979344719667586"%2C"enum"%3A"one"%2C"float32"%3A1.1%2C"int"%3A1%2C"int32"%3A1%2C"int32Enum"%3A55%2C"intEnum"%3A2%2C"num"%3A1.1%2C"str"%3A"test"%2C"strOpt"%3A"testOptional"}%2C"str"%3A"test"}&simpleObjParam={"any"%3A"any"%2C"bigint"%3A8821239038968084%2C"bigintStr"%3A"9223372036854775808"%2C"bool"%3Atrue%2C"boolOpt"%3Atrue%2C"date"%3A"2020-01-01"%2C"dateTime"%3A"2020-01-01T00%3A00%3A00.000001Z"%2C"decimal"%3A3.141592653589793%2C"decimalStr"%3A"3.14159265358979344719667586"%2C"enum"%3A"one"%2C"float32"%3A1.1%2C"int"%3A1%2C"int32"%3A1%2C"int32Enum"%3A55%2C"intEnum"%3A2%2C"num"%3A1.1%2C"str"%3A"test"%2C"strOpt"%3A"testOptional"}'

def test_parameters_mixed_parameters_camel_case():
    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
        global_path_param=100,
        global_query_param='some example global query param',
    )
    
    assert s is not None

    
    res = s.parameters.mixed_parameters_camel_case(header_param='headerValue', path_param='pathValue', query_string_param='queryValue')
    assert res is not None

    assert res.status_code == 200
    assert res.res.args.query_string_param == 'queryValue'
    assert res.res.headers.header_param == 'headerValue'
    assert res.res.url == 'http://localhost:35123/anything/mixedParams/path/pathValue/camelcase?query_string_param=queryValue'

def test_parameters_mixed_parameters_primitives():
    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
        global_path_param=100,
        global_query_param='some example global query param',
    )
    
    assert s is not None

    
    res = s.parameters.mixed_parameters_primitives(header_param='headerValue', path_param='pathValue', query_string_param='queryValue')
    assert res is not None

    assert res.status_code == 200
    assert res.res.args.query_string_param == 'queryValue'
    assert res.res.headers.headerparam == 'headerValue'
    assert res.res.url == 'http://localhost:35123/anything/mixedParams/path/pathValue?queryStringParam=queryValue'

def test_parameters_mixed_query_params():
    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
        global_path_param=100,
        global_query_param='some example global query param',
    )
    
    assert s is not None

    
    res = s.parameters.mixed_query_params(deep_object_param=shared.SimpleObject(
        any='any',
        bigint=8821239038968084,
        bigint_str=9223372036854775808,
        bool=True,
        bool_opt=True,
        date_=dateutil.parser.parse('2020-01-01').date(),
        date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.000001Z'),
        decimal=Decimal('3.141592653589793'),
        decimal_str=Decimal('3.14159265358979344719667586'),
        enum=shared.EnumT.ONE,
        float32=1.1,
        int=1,
        int32=1,
        int32_enum=shared.Int32Enum.FIFTY_FIVE,
        int_enum=shared.IntEnum.SECOND,
        num=1.1,
        str_='test',
        str_opt='testOptional',
    ), form_param=shared.SimpleObject(
        any='any',
        bigint=8821239038968084,
        bigint_str=9223372036854775808,
        bool=True,
        bool_opt=True,
        date_=dateutil.parser.parse('2020-01-01').date(),
        date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.000001Z'),
        decimal=Decimal('3.141592653589793'),
        decimal_str=Decimal('3.14159265358979344719667586'),
        enum=shared.EnumT.ONE,
        float32=1.1,
        int=1,
        int32=1,
        int32_enum=shared.Int32Enum.FIFTY_FIVE,
        int_enum=shared.IntEnum.SECOND,
        num=1.1,
        str_='test',
        str_opt='testOptional',
    ), json_param=shared.SimpleObject(
        any='any',
        bigint=8821239038968084,
        bigint_str=9223372036854775808,
        bool=True,
        bool_opt=True,
        date_=dateutil.parser.parse('2020-01-01').date(),
        date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.000001Z'),
        decimal=Decimal('3.141592653589793'),
        decimal_str=Decimal('3.14159265358979344719667586'),
        enum=shared.EnumT.ONE,
        float32=1.1,
        int=1,
        int32=1,
        int32_enum=shared.Int32Enum.FIFTY_FIVE,
        int_enum=shared.IntEnum.SECOND,
        num=1.1,
        str_='test',
        str_opt='testOptional',
    ))
    assert res is not None

    assert res.status_code == 200
    assert res.res.args ==         {
                "int32": '1',
                "decimal": '3.141592653589793',
                "any": 'any',
                "deepObjectParam[bigint]": '8821239038968084',
                "deepObjectParam[boolOpt]": 'true',
                "deepObjectParam[enum]": 'one',
                "deepObjectParam[int32Enum]": '55',
                "deepObjectParam[strOpt]": 'testOptional',
                "deepObjectParam[str]": 'test',
                "int": '1',
                "bool": 'true',
                "boolOpt": 'true',
                "deepObjectParam[bigintStr]": '9223372036854775808',
                "deepObjectParam[num]": '1.1',
                "strOpt": 'testOptional',
                "deepObjectParam[dateTime]": '2020-01-01T00:00:00.000001Z',
                "deepObjectParam[date]": '2020-01-01',
                "deepObjectParam[intEnum]": '2',
                "enum": 'one',
                "int32Enum": '55',
                "date": '2020-01-01',
                "deepObjectParam[any]": 'any',
                "deepObjectParam[decimalStr]": '3.14159265358979344719667586',
                "str": 'test',
                "deepObjectParam[bool]": 'true',
                "intEnum": '2',
                "decimalStr": '3.14159265358979344719667586',
                "deepObjectParam[decimal]": '3.141592653589793',
                "float32": '1.1',
                "num": '1.1',
                "bigintStr": '9223372036854775808',
                "dateTime": '2020-01-01T00:00:00.000001Z',
                "deepObjectParam[int]": '1',
                "jsonParam": '{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.000001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"int":1,"int32":1,"int32Enum":55,"intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"}',
                "bigint": '8821239038968084',
                "deepObjectParam[float32]": '1.1',
                "deepObjectParam[int32]": '1',
            }
    assert sort_query_parameters(res.res.url) == 'http://localhost:35123/anything/queryParams/mixed?any=any&bigint=8821239038968084&bigintStr=9223372036854775808&bool=true&boolOpt=true&date=2020-01-01&dateTime=2020-01-01T00%3A00%3A00.000001Z&decimal=3.141592653589793&decimalStr=3.14159265358979344719667586&deepObjectParam[any]=any&deepObjectParam[bigintStr]=9223372036854775808&deepObjectParam[bigint]=8821239038968084&deepObjectParam[boolOpt]=true&deepObjectParam[bool]=true&deepObjectParam[dateTime]=2020-01-01T00%3A00%3A00.000001Z&deepObjectParam[date]=2020-01-01&deepObjectParam[decimalStr]=3.14159265358979344719667586&deepObjectParam[decimal]=3.141592653589793&deepObjectParam[enum]=one&deepObjectParam[float32]=1.1&deepObjectParam[int32Enum]=55&deepObjectParam[int32]=1&deepObjectParam[intEnum]=2&deepObjectParam[int]=1&deepObjectParam[num]=1.1&deepObjectParam[strOpt]=testOptional&deepObjectParam[str]=test&enum=one&float32=1.1&int=1&int32=1&int32Enum=55&intEnum=2&jsonParam={"any"%3A"any"%2C"bigint"%3A8821239038968084%2C"bigintStr"%3A"9223372036854775808"%2C"bool"%3Atrue%2C"boolOpt"%3Atrue%2C"date"%3A"2020-01-01"%2C"dateTime"%3A"2020-01-01T00%3A00%3A00.000001Z"%2C"decimal"%3A3.141592653589793%2C"decimalStr"%3A"3.14159265358979344719667586"%2C"enum"%3A"one"%2C"float32"%3A1.1%2C"int"%3A1%2C"int32"%3A1%2C"int32Enum"%3A55%2C"intEnum"%3A2%2C"num"%3A1.1%2C"str"%3A"test"%2C"strOpt"%3A"testOptional"}&num=1.1&str=test&strOpt=testOptional'

def test_parameters_path_parameter_json():
    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
        global_path_param=100,
        global_query_param='some example global query param',
    )
    
    assert s is not None

    
    res = s.parameters.path_parameter_json(json_obj=shared.SimpleObject(
        any='any',
        bigint=8821239038968084,
        bigint_str=9223372036854775808,
        bool=True,
        bool_opt=True,
        date_=dateutil.parser.parse('2020-01-01').date(),
        date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.000001Z'),
        decimal=Decimal('3.141592653589793'),
        decimal_str=Decimal('3.14159265358979344719667586'),
        enum=shared.EnumT.ONE,
        float32=1.1,
        int=1,
        int32=1,
        int32_enum=shared.Int32Enum.FIFTY_FIVE,
        int_enum=shared.IntEnum.SECOND,
        num=1.1,
        str_='test',
        str_opt='testOptional',
    ))
    assert res is not None

    assert res.status_code == 200
    assert res.res.url == 'http://localhost:35123/anything/pathParams/json/{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.000001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"int":1,"int32":1,"int32Enum":55,"intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"}'

def test_parameters_pipe_delimited_query_params_array():
    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
        global_path_param=100,
        global_query_param='some example global query param',
    )
    
    assert s is not None

    
    res = s.parameters.pipe_delimited_query_params_array(arr_param=[
        'test',
        'test2',
    ], arr_param_exploded=[
        1,
        2,
    ], map_param={
        "key1": 'val1',
        "key2": 'val2',
    }, obj_param=shared.SimpleObject(
        any='any',
        bigint=8821239038968084,
        bigint_str=9223372036854775808,
        bool=True,
        bool_opt=True,
        date_=dateutil.parser.parse('2020-01-01').date(),
        date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.000001Z'),
        decimal=Decimal('3.141592653589793'),
        decimal_str=Decimal('3.14159265358979344719667586'),
        enum=shared.EnumT.ONE,
        float32=1.1,
        int=1,
        int32=1,
        int32_enum=shared.Int32Enum.FIFTY_FIVE,
        int_enum=shared.IntEnum.SECOND,
        num=1.1,
        str_='test',
        str_opt='testOptional',
    ))
    assert res is not None

    assert res.status_code == 200
    assert res.res.args.arr_param == 'test|test2'
    assert res.res.args.arr_param_exploded ==         [
                '1',
                '2',
            ]
    assert sort_serialized_maps(sort_query_parameters(res.res.url), r'(?:map|obj)Param=(.*?)(?:&|$)', '|') == 'http://localhost:35123/anything/queryParams/pipe/array?arrParam=test|test2&arrParamExploded=1&arrParamExploded=2&mapParam=key1|val1|key2|val2&objParam=any|any|bigint|8821239038968084|bigintStr|9223372036854775808|bool|true|boolOpt|true|date|2020-01-01|dateTime|2020-01-01T00%3A00%3A00.000001Z|decimal|3.141592653589793|decimalStr|3.14159265358979344719667586|enum|one|float32|1.1|int|1|int32|1|int32Enum|55|intEnum|2|num|1.1|str|test|strOpt|testOptional'

def test_parameters_simple_path_parameter_arrays():
    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
        global_path_param=100,
        global_query_param='some example global query param',
    )
    
    assert s is not None

    
    res = s.parameters.simple_path_parameter_arrays(arr_param=[
        'test',
        'test2',
    ])
    assert res is not None

    assert res.status_code == 200
    assert res.res.url == 'http://localhost:35123/anything/pathParams/arr/test,test2'

def test_parameters_simple_path_parameter_maps():
    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
        global_path_param=100,
        global_query_param='some example global query param',
    )
    
    assert s is not None

    
    res = s.parameters.simple_path_parameter_maps(map_param={
        "test": 'value',
        "test2": 'value2',
    }, map_param_exploded={
        "test": 1,
        "test2": 2,
    })
    assert res is not None

    assert res.status_code == 200
    assert sort_serialized_maps(res.res.url, r'.*?\/map\/(.*?)\/mapExploded\/(.*)', ',') == 'http://localhost:35123/anything/pathParams/map/test,value,test2,value2/mapExploded/test=1,test2=2'

def test_parameters_simple_path_parameter_objects():
    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
        global_path_param=100,
        global_query_param='some example global query param',
    )
    
    assert s is not None

    
    res = s.parameters.simple_path_parameter_objects(obj_param=shared.SimpleObject(
        any='any',
        bigint=8821239038968084,
        bigint_str=9223372036854775808,
        bool=True,
        bool_opt=True,
        date_=dateutil.parser.parse('2020-01-01').date(),
        date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.000001Z'),
        decimal=Decimal('3.141592653589793'),
        decimal_str=Decimal('3.14159265358979344719667586'),
        enum=shared.EnumT.ONE,
        float32=1.1,
        int=1,
        int32=1,
        int32_enum=shared.Int32Enum.FIFTY_FIVE,
        int_enum=shared.IntEnum.SECOND,
        num=1.1,
        str_='test',
        str_opt='testOptional',
    ), obj_param_exploded=shared.SimpleObject(
        any='any',
        bigint=8821239038968084,
        bigint_str=9223372036854775808,
        bool=True,
        bool_opt=True,
        date_=dateutil.parser.parse('2020-01-01').date(),
        date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.000001Z'),
        decimal=Decimal('3.141592653589793'),
        decimal_str=Decimal('3.14159265358979344719667586'),
        enum=shared.EnumT.ONE,
        float32=1.1,
        int=1,
        int32=1,
        int32_enum=shared.Int32Enum.FIFTY_FIVE,
        int_enum=shared.IntEnum.SECOND,
        num=1.1,
        str_='test',
        str_opt='testOptional',
    ))
    assert res is not None

    assert res.status_code == 200
    assert sort_serialized_maps(sort_query_parameters(res.res.url), r'obj/(.*)', ',') == 'http://localhost:35123/anything/pathParams/obj/1,1,1.1,1.1,2,2020-01-01,2020-01-01T00:00:00.000001Z,3.141592653589793,3.14159265358979344719667586,55,8821239038968084,9223372036854775808,any,any,bigint,bigint=8821239038968084,bigintStr,bigintStr=9223372036854775808,bool,bool=true,boolOpt,boolOpt=true,date,date=2020-01-01,dateTime,dateTime=2020-01-01T00:00:00.000001Z,decimal,decimal=3.141592653589793,decimalStr,decimalStr=3.14159265358979344719667586,enum,enum=one,float32,float32=1.1,int,int=1,int32,int32=1,int32Enum,int32Enum=55,intEnum,intEnum=2,num,num=1.1,one,str,str=test,strOpt,strOpt=testOptional,test,testOptional/objExploded/any=any,true,true'

def test_parameters_simple_path_parameter_primitives():
    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
        global_path_param=100,
        global_query_param='some example global query param',
    )
    
    assert s is not None

    
    res = s.parameters.simple_path_parameter_primitives(bool_param=True, int_param=1, num_param=1.1, str_param='test')
    assert res is not None

    assert res.status_code == 200
    assert res.res.url == 'http://localhost:35123/anything/pathParams/str/test/bool/true/int/1/num/1.1'
