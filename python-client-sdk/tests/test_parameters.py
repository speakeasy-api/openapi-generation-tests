"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .common_helpers import *
from .helpers import *
import dateutil.parser
from decimal import Decimal
from openapi import SDK
from openapi.models import operations, shared


def test_parameters_deep_object_query_params_deep_object():
    record_test("parameters-deep-object-query-params-deep-object")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.parameters.deep_object_query_params_deep_object(deep_obj={
        "arr": [
            "test1",
            "test2",
        ],
        "bool_": True,
        "int_": 1,
        "map": {
            "testkey1": "testvalue1",
            "testkey2": "testvalue2",
        },
        "num": 1.1,
        "obj": {
            "any": "any",
            "bigint": 8821239038968084,
            "bigint_str": 9223372036854775808,
            "bool_": True,
            "bool_opt": True,
            "date": dateutil.parser.parse("2020-01-01").date(),
            "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
            "decimal": Decimal("3.141592653589793"),
            "decimal_str": Decimal("3.14159265358979344719667586"),
            "enum": shared.EnumT.ONE,
            "float32": 1.1,
            "float64_str": 1.1,
            "int_": 1,
            "int32": 1,
            "int32_enum": shared.Int32Enum.FIFTY_FIVE,
            "int64_str": 100,
            "int_enum": shared.IntEnum.SECOND,
            "num": 1.1,
            "str_": "test",
            "str_opt": "testOptional",
        },
        "str_": "test",
    })
    assert res is not None
    assert res is not None
    assert sanitize_timestamp(res.args) == operations.DeepObjectQueryParamsDeepObjectArgs(
            deep_obj_arr=[
                "test1",
                "test2",
            ],
            deep_obj_bool="true",
            deep_obj_int="1",
            deep_obj_map_testkey1="testvalue1",
            deep_obj_map_testkey2="testvalue2",
            deep_obj_num="1.1",
            deep_obj_obj_any="any",
            deep_obj_obj_bigint_str="9223372036854775808",
            deep_obj_obj_bigint="8821239038968084",
            deep_obj_obj_bool_opt="true",
            deep_obj_obj_bool="true",
            deep_obj_obj_date_time="2020-01-01T00:00:00.001Z",
            deep_obj_obj_date="2020-01-01",
            deep_obj_obj_decimal_str="3.14159265358979344719667586",
            deep_obj_obj_decimal="3.141592653589793",
            deep_obj_obj_enum="one",
            deep_obj_obj_float32="1.1",
            deep_obj_obj_float64_str="1.1",
            deep_obj_obj_int32_enum="55",
            deep_obj_obj_int32="1",
            deep_obj_obj_int64_str="100",
            deep_obj_obj_int_enum="2",
            deep_obj_obj_int="1",
            deep_obj_obj_num="1.1",
            deep_obj_obj_str_opt="testOptional",
            deep_obj_obj_str="test",
            deep_obj_str="test",
        )
    assert sanitize_timestamp(sort_query_parameters(res.url)) == "http://localhost:35123/anything/queryParams/deepObject/deepObj?deepObj[arr]=test1&deepObj[arr]=test2&deepObj[bool]=true&deepObj[int]=1&deepObj[map][testkey1]=testvalue1&deepObj[map][testkey2]=testvalue2&deepObj[num]=1.1&deepObj[obj][any]=any&deepObj[obj][bigintStr]=9223372036854775808&deepObj[obj][bigint]=8821239038968084&deepObj[obj][boolOpt]=true&deepObj[obj][bool]=true&deepObj[obj][dateTime]=2020-01-01T00%3A00%3A00.001Z&deepObj[obj][date]=2020-01-01&deepObj[obj][decimalStr]=3.14159265358979344719667586&deepObj[obj][decimal]=3.141592653589793&deepObj[obj][enum]=one&deepObj[obj][float32]=1.1&deepObj[obj][float64Str]=1.1&deepObj[obj][int32Enum]=55&deepObj[obj][int32]=1&deepObj[obj][int64Str]=100&deepObj[obj][intEnum]=2&deepObj[obj][int]=1&deepObj[obj][num]=1.1&deepObj[obj][strOpt]=testOptional&deepObj[obj][str]=test&deepObj[str]=test"

def test_parameters_deep_object_query_params_map():
    record_test("parameters-deep-object-query-params-map")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.parameters.deep_object_query_params_map(map_param={
        "test": "value",
        "test2": "value2",
    }, map_arr_param={
        "test": [
            "test",
            "test2",
        ],
        "test2": [
            "test3",
            "test4",
        ],
    })
    assert res is not None
    assert res is not None
    assert res.args == {
            "mapArrParam[test]": [
                "test",
                "test2",
            ],
            "mapArrParam[test2]": [
                "test3",
                "test4",
            ],
            "mapParam[test]": "value",
            "mapParam[test2]": "value2",
        }
    assert sort_query_parameters(res.url) == "http://localhost:35123/anything/queryParams/deepObject/map?mapArrParam[test2]=test3&mapArrParam[test2]=test4&mapArrParam[test]=test&mapArrParam[test]=test2&mapParam[test2]=value2&mapParam[test]=value"

def test_parameters_deep_object_query_params_object():
    record_test("parameters-deep-object-query-params-object")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.parameters.deep_object_query_params_object(obj_param={
        "any": "any",
        "bigint": 8821239038968084,
        "bigint_str": 9223372036854775808,
        "bool_": True,
        "bool_opt": True,
        "date": dateutil.parser.parse("2020-01-01").date(),
        "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
        "decimal": Decimal("3.141592653589793"),
        "decimal_str": Decimal("3.14159265358979344719667586"),
        "enum": shared.EnumT.ONE,
        "float32": 1.1,
        "float64_str": 1.1,
        "int_": 1,
        "int32": 1,
        "int32_enum": shared.Int32Enum.FIFTY_FIVE,
        "int64_str": 100,
        "int_enum": shared.IntEnum.SECOND,
        "num": 1.1,
        "str_": "test",
        "str_opt": "testOptional",
    }, obj_arr_param={
        "arr": [
            "test",
            "test2",
        ],
    })
    assert res is not None
    assert res is not None
    assert sanitize_timestamp(res.args) == operations.DeepObjectQueryParamsObjectArgs(
            obj_arr_param_arr=[
                "test",
                "test2",
            ],
            obj_param_any="any",
            obj_param_bigint_str="9223372036854775808",
            obj_param_bigint="8821239038968084",
            obj_param_bool_opt="true",
            obj_param_bool="true",
            obj_param_date_time="2020-01-01T00:00:00.001Z",
            obj_param_date="2020-01-01",
            obj_param_decimal_str="3.14159265358979344719667586",
            obj_param_decimal="3.141592653589793",
            obj_param_enum="one",
            obj_param_float32="1.1",
            obj_param_float64_str="1.1",
            obj_param_int32_enum="55",
            obj_param_int32="1",
            obj_param_int64_str="100",
            obj_param_int_enum="2",
            obj_param_int="1",
            obj_param_num="1.1",
            obj_param_str_opt="testOptional",
            obj_param_str="test",
        )
    assert sanitize_timestamp(sort_query_parameters(res.url)) == "http://localhost:35123/anything/queryParams/deepObject/obj?objArrParam[arr]=test&objArrParam[arr]=test2&objParam[any]=any&objParam[bigintStr]=9223372036854775808&objParam[bigint]=8821239038968084&objParam[boolOpt]=true&objParam[bool]=true&objParam[dateTime]=2020-01-01T00%3A00%3A00.001Z&objParam[date]=2020-01-01&objParam[decimalStr]=3.14159265358979344719667586&objParam[decimal]=3.141592653589793&objParam[enum]=one&objParam[float32]=1.1&objParam[float64Str]=1.1&objParam[int32Enum]=55&objParam[int32]=1&objParam[int64Str]=100&objParam[intEnum]=2&objParam[int]=1&objParam[num]=1.1&objParam[strOpt]=testOptional&objParam[str]=test"

def test_parameters_form_query_params_array():
    record_test("parameters-form-query-params-array")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.parameters.form_query_params_array(arr_param=[
        "test",
        "test2",
    ], arr_param_exploded=[
        1,
        2,
    ])
    assert res is not None
    assert res is not None
    assert res.args == operations.FormQueryParamsArrayArgs(
            arr_param="test,test2",
            arr_param_exploded=[
                "1",
                "2",
            ],
        )
    assert sort_query_parameters(res.url) == "http://localhost:35123/anything/queryParams/form/array?arrParam=test%2Ctest2&arrParamExploded=1&arrParamExploded=2"

def test_parameters_form_query_params_camel_object():
    record_test("parameters-form-query-params-camel-object")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.parameters.form_query_params_camel_object(obj_param_exploded={
        "item_count": "10",
        "search_term": "foo",
    }, obj_param={
        "encoded_count": "11",
        "encoded_term": "bar",
    })
    assert res is not None
    assert res is not None
    assert res.args == operations.FormQueryParamsCamelObjectArgs(
            item_count="10",
            search_term="foo",
        )
    assert sort_query_parameters(res.url) == "http://localhost:35123/anything/queryParams/form/camelObj?item_count=10&obj_param=encoded_count%2C11%2Cencoded_term%2Cbar&search_term=foo"

def test_parameters_form_query_params_map():
    record_test("parameters-form-query-params-map")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.parameters.form_query_params_map(map_param={
        "test": "value",
        "test2": "value2",
    }, map_param_exploded={
        "test": 1,
        "test2": 2,
    })
    assert res is not None
    assert res is not None
    assert sort_serialized_maps(res.args, r"(.*)", ",") == {
            "mapParam": "test,value,test2,value2",
            "test": "1",
            "test2": "2",
        }
    assert sort_serialized_maps(sort_query_parameters(res.url), r".*?\?mapParam=(.*?)&(.*)", "%2C") == "http://localhost:35123/anything/queryParams/form/map?mapParam=test%2Cvalue%2Ctest2%2Cvalue2&test=1&test2=2"

def test_parameters_form_query_params_object():
    record_test("parameters-form-query-params-object")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.parameters.form_query_params_object(obj_param_exploded={
        "any": "any",
        "bigint": 8821239038968084,
        "bigint_str": 9223372036854775808,
        "bool_": True,
        "bool_opt": True,
        "date": dateutil.parser.parse("2020-01-01").date(),
        "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
        "decimal": Decimal("3.141592653589793"),
        "decimal_str": Decimal("3.14159265358979344719667586"),
        "enum": shared.EnumT.ONE,
        "float32": 1.1,
        "float64_str": 1.1,
        "int_": 1,
        "int32": 1,
        "int32_enum": shared.Int32Enum.FIFTY_FIVE,
        "int64_str": 100,
        "int_enum": shared.IntEnum.SECOND,
        "num": 1.1,
        "str_": "test",
        "str_opt": "testOptional",
    }, obj_param={
        "any": "any",
        "bigint": 8821239038968084,
        "bigint_str": 9223372036854775808,
        "bool_": True,
        "bool_opt": True,
        "date": dateutil.parser.parse("2020-01-01").date(),
        "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
        "decimal": Decimal("3.141592653589793"),
        "decimal_str": Decimal("3.14159265358979344719667586"),
        "enum": shared.EnumT.ONE,
        "float32": 1.1,
        "float64_str": 1.1,
        "int_": 1,
        "int32": 1,
        "int32_enum": shared.Int32Enum.FIFTY_FIVE,
        "int64_str": 100,
        "int_enum": shared.IntEnum.SECOND,
        "num": 1.1,
        "str_": "test",
        "str_opt": "testOptional",
    })
    assert res is not None
    assert res is not None
    assert res.args.any == "any"
    assert res.args.bigint is not None
    assert res.args.bigint == "8821239038968084"
    assert res.args.bigint_str is not None
    assert res.args.bigint_str == "9223372036854775808"
    assert res.args.bool_ == "true"
    assert res.args.bool_opt is not None
    assert res.args.bool_opt == "true"
    assert res.args.date == "2020-01-01"
    assert sanitize_timestamp(res.args.date_time) == "2020-01-01T00:00:00.001Z"
    assert res.args.decimal is not None
    assert res.args.decimal == "3.141592653589793"
    assert res.args.decimal_str is not None
    assert res.args.decimal_str == "3.14159265358979344719667586"
    assert res.args.enum == "one"
    assert res.args.float32 == "1.1"
    assert res.args.float64_str is not None
    assert res.args.float64_str == "1.1"
    assert res.args.int_ == "1"
    assert res.args.int32 == "1"
    assert res.args.int32_enum == "55"
    assert res.args.int64_str is not None
    assert res.args.int64_str == "100"
    assert res.args.int_enum == "2"
    assert res.args.int_opt_null is None
    assert res.args.num == "1.1"
    assert res.args.num_opt_null is None
    assert sanitize_timestamp(sort_serialized_maps(res.args.obj_param, r"(.*)", ",")) == "any,any,bigint,8821239038968084,bigintStr,9223372036854775808,bool,true,boolOpt,true,date,2020-01-01,dateTime,2020-01-01T00:00:00.001Z,decimal,3.141592653589793,decimalStr,3.14159265358979344719667586,enum,one,float32,1.1,float64Str,1.1,int,1,int32,1,int32Enum,55,int64Str,100,intEnum,2,num,1.1,str,test,strOpt,testOptional"
    assert res.args.str_ == "test"
    assert res.args.str_opt is not None
    assert res.args.str_opt == "testOptional"
    assert sanitize_timestamp(sort_serialized_maps(sort_query_parameters(res.url), r"objParam=(.*?)&", "%2C")) == "http://localhost:35123/anything/queryParams/form/obj?any=any&bigint=8821239038968084&bigintStr=9223372036854775808&bool=true&boolOpt=true&date=2020-01-01&dateTime=2020-01-01T00%3A00%3A00.001Z&decimal=3.141592653589793&decimalStr=3.14159265358979344719667586&enum=one&float32=1.1&float64Str=1.1&int=1&int32=1&int32Enum=55&int64Str=100&intEnum=2&num=1.1&objParam=any%2Cany%2Cbigint%2C8821239038968084%2CbigintStr%2C9223372036854775808%2Cbool%2Ctrue%2CboolOpt%2Ctrue%2Cdate%2C2020-01-01%2CdateTime%2C2020-01-01T00%3A00%3A00.001Z%2Cdecimal%2C3.141592653589793%2CdecimalStr%2C3.14159265358979344719667586%2Cenum%2Cone%2Cfloat32%2C1.1%2Cfloat64Str%2C1.1%2Cint%2C1%2Cint32%2C1%2Cint32Enum%2C55%2Cint64Str%2C100%2CintEnum%2C2%2Cnum%2C1.1%2Cstr%2Ctest%2CstrOpt%2CtestOptional&str=test&strOpt=testOptional"

def test_parameters_form_query_params_primitive():
    record_test("parameters-form-query-params-primitive")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.parameters.form_query_params_primitive(bool_param=True, int_param=1, num_param=1.1, str_param="test")
    assert res is not None
    assert res is not None
    assert res.args == operations.FormQueryParamsPrimitiveArgs(
            bool_param="true",
            int_param="1",
            num_param="1.1",
            str_param="test",
        )
    assert sort_query_parameters(res.url) == "http://localhost:35123/anything/queryParams/form/primitive?boolParam=true&intParam=1&numParam=1.1&strParam=test"

def test_parameters_form_query_params_ref_param_object():
    record_test("parameters-form-query-params-ref-param-object")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.parameters.form_query_params_ref_param_object(ref_obj_param={
        "bool_": True,
        "int_": 1,
        "num": 1.1,
        "str_": "test",
    }, ref_obj_param_exploded={
        "bool_": True,
        "int_": 1,
        "num": 1.1,
        "str_": "test",
    })
    assert res is not None
    assert res is not None
    assert res.args == operations.FormQueryParamsRefParamObjectArgs(
            bool_="true",
            int_="1",
            num="1.1",
            ref_obj_param="bool,true,int,1,num,1.1,str,test",
            str_="test",
        )
    assert sort_query_parameters(res.url) == "http://localhost:35123/anything/queryParams/form/refParamObject?bool=true&int=1&num=1.1&refObjParam=bool%2Ctrue%2Cint%2C1%2Cnum%2C1.1%2Cstr%2Ctest&str=test"

def test_parameters_header_params_array():
    record_test("parameters-header-params-array")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.parameters.header_params_array(x_header_array=[
        "test1",
        "test2",
    ])
    assert res is not None
    assert res is not None
    assert res == operations.HeaderParamsArrayRes(
            headers=operations.HeaderParamsArrayHeaders(
                x_header_array="test1,test2",
            ),
        )

def test_parameters_header_params_map():
    record_test("parameters-header-params-map")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.parameters.header_params_map(x_header_map={
        "key1": "value1",
        "key2": "value2",
    }, x_header_map_explode={
        "test1": "val1",
        "test2": "val2",
    })
    assert res is not None
    assert res is not None
    assert sort_serialized_maps(res.headers.x_header_map, r"(.*)", ",") == "key1,value1,key2,value2"
    assert sort_serialized_maps(res.headers.x_header_map_explode, r"(.*)", ",") == "test1=val1,test2=val2"

def test_parameters_header_params_object():
    record_test("parameters-header-params-object")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.parameters.header_params_object(x_header_obj={
        "any": "any",
        "bigint": 8821239038968084,
        "bigint_str": 9223372036854775808,
        "bool_": True,
        "bool_opt": True,
        "date": dateutil.parser.parse("2020-01-01").date(),
        "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
        "decimal": Decimal("3.141592653589793"),
        "decimal_str": Decimal("3.14159265358979344719667586"),
        "enum": shared.EnumT.ONE,
        "float32": 1.1,
        "float64_str": 1.1,
        "int_": 1,
        "int32": 1,
        "int32_enum": shared.Int32Enum.FIFTY_FIVE,
        "int64_str": 100,
        "int_enum": shared.IntEnum.SECOND,
        "num": 1.1,
        "str_": "test",
        "str_opt": "testOptional",
    }, x_header_obj_explode={
        "any": "any",
        "bigint": 8821239038968084,
        "bigint_str": 9223372036854775808,
        "bool_": True,
        "bool_opt": True,
        "date": dateutil.parser.parse("2020-01-01").date(),
        "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
        "decimal": Decimal("3.141592653589793"),
        "decimal_str": Decimal("3.14159265358979344719667586"),
        "enum": shared.EnumT.ONE,
        "float32": 1.1,
        "float64_str": 1.1,
        "int_": 1,
        "int32": 1,
        "int32_enum": shared.Int32Enum.FIFTY_FIVE,
        "int64_str": 100,
        "int_enum": shared.IntEnum.SECOND,
        "num": 1.1,
        "str_": "test",
        "str_opt": "testOptional",
    })
    assert res is not None
    assert res is not None
    assert sanitize_timestamp(sort_serialized_maps(res.headers.x_header_obj, r"(.*)", ",")) == "any,any,bigint,8821239038968084,bigintStr,9223372036854775808,bool,true,boolOpt,true,date,2020-01-01,dateTime,2020-01-01T00:00:00.001Z,decimal,3.141592653589793,decimalStr,3.14159265358979344719667586,enum,one,float32,1.1,float64Str,1.1,int,1,int32,1,int32Enum,55,int64Str,100,intEnum,2,num,1.1,str,test,strOpt,testOptional"
    assert sanitize_timestamp(sort_serialized_maps(res.headers.x_header_obj_explode, r"(.*)", ",")) == "any=any,bigint=8821239038968084,bigintStr=9223372036854775808,bool=true,boolOpt=true,date=2020-01-01,dateTime=2020-01-01T00:00:00.001Z,decimal=3.141592653589793,decimalStr=3.14159265358979344719667586,enum=one,float32=1.1,float64Str=1.1,int=1,int32=1,int32Enum=55,int64Str=100,intEnum=2,num=1.1,str=test,strOpt=testOptional"

def test_parameters_header_params_primitive():
    record_test("parameters-header-params-primitive")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.parameters.header_params_primitive(x_header_boolean=True, x_header_integer=1, x_header_number=1.1, x_header_string="test")
    assert res is not None
    assert res is not None
    assert res == operations.HeaderParamsPrimitiveRes(
            headers=operations.HeaderParamsPrimitiveHeaders(
                x_header_boolean="true",
                x_header_integer="1",
                x_header_number="1.1",
                x_header_string="test",
            ),
        )

def test_parameters_json_query_params_object_smaller():
    record_test("parameters-json-query-params-object")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.parameters.json_query_params_object_smaller(deep_obj_param={
        "any": {
            "any": "any",
            "bigint": 8821239038968084,
            "bigint_str": 9223372036854775808,
            "bool_": True,
            "bool_opt": True,
            "date": dateutil.parser.parse("2020-01-01").date(),
            "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
            "decimal": Decimal("3.141592653589793"),
            "decimal_str": Decimal("3.14159265358979344719667586"),
            "enum": shared.EnumT.ONE,
            "float32": 1.1,
            "float64_str": 1.1,
            "int_": 1,
            "int32": 1,
            "int32_enum": shared.Int32Enum.FIFTY_FIVE,
            "int64_str": 100,
            "int_enum": shared.IntEnum.SECOND,
            "num": 1.1,
            "str_": "test",
            "str_opt": "testOptional",
        },
        "arr": [
            {
                "any": "any",
                "bigint": 8821239038968084,
                "bigint_str": 9223372036854775808,
                "bool_": True,
                "bool_opt": True,
                "date": dateutil.parser.parse("2020-01-01").date(),
                "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                "decimal": Decimal("3.141592653589793"),
                "decimal_str": Decimal("3.14159265358979344719667586"),
                "enum": shared.EnumT.ONE,
                "float32": 1.1,
                "float64_str": 1.1,
                "int_": 1,
                "int32": 1,
                "int32_enum": shared.Int32Enum.FIFTY_FIVE,
                "int64_str": 100,
                "int_enum": shared.IntEnum.SECOND,
                "num": 1.1,
                "str_": "test",
                "str_opt": "testOptional",
            },
            {
                "any": "any",
                "bigint": 8821239038968084,
                "bigint_str": 9223372036854775808,
                "bool_": True,
                "bool_opt": True,
                "date": dateutil.parser.parse("2020-01-01").date(),
                "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                "decimal": Decimal("3.141592653589793"),
                "decimal_str": Decimal("3.14159265358979344719667586"),
                "enum": shared.EnumT.ONE,
                "float32": 1.1,
                "float64_str": 1.1,
                "int_": 1,
                "int32": 1,
                "int32_enum": shared.Int32Enum.FIFTY_FIVE,
                "int64_str": 100,
                "int_enum": shared.IntEnum.SECOND,
                "num": 1.1,
                "str_": "test",
                "str_opt": "testOptional",
            },
        ],
        "bool_": True,
        "int_": 1,
        "map": {
            "key": {
                "any": "any",
                "bigint": 8821239038968084,
                "bigint_str": 9223372036854775808,
                "bool_": True,
                "bool_opt": True,
                "date": dateutil.parser.parse("2020-01-01").date(),
                "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                "decimal": Decimal("3.141592653589793"),
                "decimal_str": Decimal("3.14159265358979344719667586"),
                "enum": shared.EnumT.ONE,
                "float32": 1.1,
                "float64_str": 1.1,
                "int_": 1,
                "int32": 1,
                "int32_enum": shared.Int32Enum.FIFTY_FIVE,
                "int64_str": 100,
                "int_enum": shared.IntEnum.SECOND,
                "num": 1.1,
                "str_": "test",
                "str_opt": "testOptional",
            },
        },
        "num": 1.1,
        "obj": {
            "any": "any",
            "bigint": 8821239038968084,
            "bigint_str": 9223372036854775808,
            "bool_": True,
            "bool_opt": True,
            "date": dateutil.parser.parse("2020-01-01").date(),
            "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
            "decimal": Decimal("3.141592653589793"),
            "decimal_str": Decimal("3.14159265358979344719667586"),
            "enum": shared.EnumT.ONE,
            "float32": 1.1,
            "float64_str": 1.1,
            "int_": 1,
            "int32": 1,
            "int32_enum": shared.Int32Enum.FIFTY_FIVE,
            "int64_str": 100,
            "int_enum": shared.IntEnum.SECOND,
            "num": 1.1,
            "str_": "test",
            "str_opt": "testOptional",
        },
        "str_": "test",
    }, simple_obj_param={
        "any": "any",
        "bigint": 8821239038968084,
        "bigint_str": 9223372036854775808,
        "bool_": True,
        "bool_opt": True,
        "date": dateutil.parser.parse("2020-01-01").date(),
        "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
        "decimal": Decimal("3.141592653589793"),
        "decimal_str": Decimal("3.14159265358979344719667586"),
        "enum": shared.EnumT.ONE,
        "float32": 1.1,
        "float64_str": 1.1,
        "int_": 1,
        "int32": 1,
        "int32_enum": shared.Int32Enum.FIFTY_FIVE,
        "int64_str": 100,
        "int_enum": shared.IntEnum.SECOND,
        "num": 1.1,
        "str_": "test",
        "str_opt": "testOptional",
    })
    assert res is not None
    assert res is not None
    assert sanitize_timestamp(res.args.deep_obj_param) == "{\"any\":{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"float64Str\":\"1.1\",\"int\":1,\"int32\":1,\"int32Enum\":55,\"int64Str\":\"100\",\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"},\"arr\":[{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"float64Str\":\"1.1\",\"int\":1,\"int32\":1,\"int32Enum\":55,\"int64Str\":\"100\",\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"},{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"float64Str\":\"1.1\",\"int\":1,\"int32\":1,\"int32Enum\":55,\"int64Str\":\"100\",\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"}],\"bool\":true,\"int\":1,\"map\":{\"key\":{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"float64Str\":\"1.1\",\"int\":1,\"int32\":1,\"int32Enum\":55,\"int64Str\":\"100\",\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"}},\"num\":1.1,\"obj\":{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"float64Str\":\"1.1\",\"int\":1,\"int32\":1,\"int32Enum\":55,\"int64Str\":\"100\",\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"},\"str\":\"test\"}"
    assert sanitize_timestamp(res.args.simple_obj_param) == "{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"float64Str\":\"1.1\",\"int\":1,\"int32\":1,\"int32Enum\":55,\"int64Str\":\"100\",\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"}"
    assert sanitize_timestamp(res.url) == "http://localhost:35123/anything/queryParams/json/objsmaller?deepObjParam={\"any\"%3A{\"any\"%3A\"any\"%2C\"bigint\"%3A8821239038968084%2C\"bigintStr\"%3A\"9223372036854775808\"%2C\"bool\"%3Atrue%2C\"boolOpt\"%3Atrue%2C\"date\"%3A\"2020-01-01\"%2C\"dateTime\"%3A\"2020-01-01T00%3A00%3A00.001Z\"%2C\"decimal\"%3A3.141592653589793%2C\"decimalStr\"%3A\"3.14159265358979344719667586\"%2C\"enum\"%3A\"one\"%2C\"float32\"%3A1.1%2C\"float64Str\"%3A\"1.1\"%2C\"int\"%3A1%2C\"int32\"%3A1%2C\"int32Enum\"%3A55%2C\"int64Str\"%3A\"100\"%2C\"intEnum\"%3A2%2C\"num\"%3A1.1%2C\"str\"%3A\"test\"%2C\"strOpt\"%3A\"testOptional\"}%2C\"arr\"%3A[{\"any\"%3A\"any\"%2C\"bigint\"%3A8821239038968084%2C\"bigintStr\"%3A\"9223372036854775808\"%2C\"bool\"%3Atrue%2C\"boolOpt\"%3Atrue%2C\"date\"%3A\"2020-01-01\"%2C\"dateTime\"%3A\"2020-01-01T00%3A00%3A00.001Z\"%2C\"decimal\"%3A3.141592653589793%2C\"decimalStr\"%3A\"3.14159265358979344719667586\"%2C\"enum\"%3A\"one\"%2C\"float32\"%3A1.1%2C\"float64Str\"%3A\"1.1\"%2C\"int\"%3A1%2C\"int32\"%3A1%2C\"int32Enum\"%3A55%2C\"int64Str\"%3A\"100\"%2C\"intEnum\"%3A2%2C\"num\"%3A1.1%2C\"str\"%3A\"test\"%2C\"strOpt\"%3A\"testOptional\"}%2C{\"any\"%3A\"any\"%2C\"bigint\"%3A8821239038968084%2C\"bigintStr\"%3A\"9223372036854775808\"%2C\"bool\"%3Atrue%2C\"boolOpt\"%3Atrue%2C\"date\"%3A\"2020-01-01\"%2C\"dateTime\"%3A\"2020-01-01T00%3A00%3A00.001Z\"%2C\"decimal\"%3A3.141592653589793%2C\"decimalStr\"%3A\"3.14159265358979344719667586\"%2C\"enum\"%3A\"one\"%2C\"float32\"%3A1.1%2C\"float64Str\"%3A\"1.1\"%2C\"int\"%3A1%2C\"int32\"%3A1%2C\"int32Enum\"%3A55%2C\"int64Str\"%3A\"100\"%2C\"intEnum\"%3A2%2C\"num\"%3A1.1%2C\"str\"%3A\"test\"%2C\"strOpt\"%3A\"testOptional\"}]%2C\"bool\"%3Atrue%2C\"int\"%3A1%2C\"map\"%3A{\"key\"%3A{\"any\"%3A\"any\"%2C\"bigint\"%3A8821239038968084%2C\"bigintStr\"%3A\"9223372036854775808\"%2C\"bool\"%3Atrue%2C\"boolOpt\"%3Atrue%2C\"date\"%3A\"2020-01-01\"%2C\"dateTime\"%3A\"2020-01-01T00%3A00%3A00.001Z\"%2C\"decimal\"%3A3.141592653589793%2C\"decimalStr\"%3A\"3.14159265358979344719667586\"%2C\"enum\"%3A\"one\"%2C\"float32\"%3A1.1%2C\"float64Str\"%3A\"1.1\"%2C\"int\"%3A1%2C\"int32\"%3A1%2C\"int32Enum\"%3A55%2C\"int64Str\"%3A\"100\"%2C\"intEnum\"%3A2%2C\"num\"%3A1.1%2C\"str\"%3A\"test\"%2C\"strOpt\"%3A\"testOptional\"}}%2C\"num\"%3A1.1%2C\"obj\"%3A{\"any\"%3A\"any\"%2C\"bigint\"%3A8821239038968084%2C\"bigintStr\"%3A\"9223372036854775808\"%2C\"bool\"%3Atrue%2C\"boolOpt\"%3Atrue%2C\"date\"%3A\"2020-01-01\"%2C\"dateTime\"%3A\"2020-01-01T00%3A00%3A00.001Z\"%2C\"decimal\"%3A3.141592653589793%2C\"decimalStr\"%3A\"3.14159265358979344719667586\"%2C\"enum\"%3A\"one\"%2C\"float32\"%3A1.1%2C\"float64Str\"%3A\"1.1\"%2C\"int\"%3A1%2C\"int32\"%3A1%2C\"int32Enum\"%3A55%2C\"int64Str\"%3A\"100\"%2C\"intEnum\"%3A2%2C\"num\"%3A1.1%2C\"str\"%3A\"test\"%2C\"strOpt\"%3A\"testOptional\"}%2C\"str\"%3A\"test\"}&simpleObjParam={\"any\"%3A\"any\"%2C\"bigint\"%3A8821239038968084%2C\"bigintStr\"%3A\"9223372036854775808\"%2C\"bool\"%3Atrue%2C\"boolOpt\"%3Atrue%2C\"date\"%3A\"2020-01-01\"%2C\"dateTime\"%3A\"2020-01-01T00%3A00%3A00.001Z\"%2C\"decimal\"%3A3.141592653589793%2C\"decimalStr\"%3A\"3.14159265358979344719667586\"%2C\"enum\"%3A\"one\"%2C\"float32\"%3A1.1%2C\"float64Str\"%3A\"1.1\"%2C\"int\"%3A1%2C\"int32\"%3A1%2C\"int32Enum\"%3A55%2C\"int64Str\"%3A\"100\"%2C\"intEnum\"%3A2%2C\"num\"%3A1.1%2C\"str\"%3A\"test\"%2C\"strOpt\"%3A\"testOptional\"}"

def test_parameters_mixed_parameters_camel_case():
    record_test("parameters-camel-case")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.parameters.mixed_parameters_camel_case(header_param="headerValue", path_param="pathValue", query_string_param="queryValue")
    assert res is not None
    assert res is not None
    assert res == operations.MixedParametersCamelCaseRes(
            args=operations.MixedParametersCamelCaseArgs(
                query_string_param="queryValue",
            ),
            headers=operations.MixedParametersCamelCaseHeaders(
                header_param="headerValue",
            ),
            url="http://localhost:35123/anything/mixedParams/path/pathValue/camelcase?query_string_param=queryValue",
        )

def test_parameters_mixed_parameters_primitives():
    record_test("parameters-mixed-primitives")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.parameters.mixed_parameters_primitives(header_param="headerValue", path_param="pathValue", query_string_param="queryValue")
    assert res is not None
    assert res is not None
    assert res == operations.MixedParametersPrimitivesRes(
            args=operations.MixedParametersPrimitivesArgs(
                query_string_param="queryValue",
            ),
            headers=operations.MixedParametersPrimitivesHeaders(
                headerparam="headerValue",
            ),
            url="http://localhost:35123/anything/mixedParams/path/pathValue?queryStringParam=queryValue",
        )

def test_parameters_mixed_query_params():
    record_test("parameters-mixed-query-params")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.parameters.mixed_query_params(deep_object_param={
        "any": "any",
        "bigint": 8821239038968084,
        "bigint_str": 9223372036854775808,
        "bool_": True,
        "bool_opt": True,
        "date": dateutil.parser.parse("2020-01-01").date(),
        "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
        "decimal": Decimal("3.141592653589793"),
        "decimal_str": Decimal("3.14159265358979344719667586"),
        "enum": shared.EnumT.ONE,
        "float32": 1.1,
        "float64_str": 1.1,
        "int_": 1,
        "int32": 1,
        "int32_enum": shared.Int32Enum.FIFTY_FIVE,
        "int64_str": 100,
        "int_enum": shared.IntEnum.SECOND,
        "num": 1.1,
        "str_": "test",
        "str_opt": "testOptional",
    }, form_param={
        "any": "any",
        "bigint": 8821239038968084,
        "bigint_str": 9223372036854775808,
        "bool_": True,
        "bool_opt": True,
        "date": dateutil.parser.parse("2020-01-01").date(),
        "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
        "decimal": Decimal("3.141592653589793"),
        "decimal_str": Decimal("3.14159265358979344719667586"),
        "enum": shared.EnumT.ONE,
        "float32": 1.1,
        "float64_str": 1.1,
        "int_": 1,
        "int32": 1,
        "int32_enum": shared.Int32Enum.FIFTY_FIVE,
        "int64_str": 100,
        "int_enum": shared.IntEnum.SECOND,
        "num": 1.1,
        "str_": "test",
        "str_opt": "testOptional",
    }, json_param={
        "any": "any",
        "bigint": 8821239038968084,
        "bigint_str": 9223372036854775808,
        "bool_": True,
        "bool_opt": True,
        "date": dateutil.parser.parse("2020-01-01").date(),
        "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
        "decimal": Decimal("3.141592653589793"),
        "decimal_str": Decimal("3.14159265358979344719667586"),
        "enum": shared.EnumT.ONE,
        "float32": 1.1,
        "float64_str": 1.1,
        "int_": 1,
        "int32": 1,
        "int32_enum": shared.Int32Enum.FIFTY_FIVE,
        "int64_str": 100,
        "int_enum": shared.IntEnum.SECOND,
        "num": 1.1,
        "str_": "test",
        "str_opt": "testOptional",
    })
    assert res is not None
    assert res is not None
    assert sanitize_timestamp(res.args) == {
            "any": "any",
            "bigint": "8821239038968084",
            "bigintStr": "9223372036854775808",
            "bool": "true",
            "boolOpt": "true",
            "date": "2020-01-01",
            "dateTime": "2020-01-01T00:00:00.001Z",
            "deepObjectParam[any]": "any",
            "deepObjectParam[bigint]": "8821239038968084",
            "deepObjectParam[bigintStr]": "9223372036854775808",
            "deepObjectParam[boolOpt]": "true",
            "deepObjectParam[bool]": "true",
            "deepObjectParam[dateTime]": "2020-01-01T00:00:00.001Z",
            "deepObjectParam[date]": "2020-01-01",
            "deepObjectParam[enum]": "one",
            "deepObjectParam[float32]": "1.1",
            "deepObjectParam[float64Str]": "1.1",
            "deepObjectParam[int32]": "1",
            "deepObjectParam[int]": "1",
            "deepObjectParam[intEnum]": "2",
            "deepObjectParam[int32Enum]": "55",
            "deepObjectParam[int64Str]": "100",
            "deepObjectParam[num]": "1.1",
            "deepObjectParam[decimal]": "3.141592653589793",
            "deepObjectParam[decimalStr]": "3.14159265358979344719667586",
            "deepObjectParam[strOpt]": "testOptional",
            "deepObjectParam[str]": "test",
            "enum": "one",
            "float32": "1.1",
            "float64Str": "1.1",
            "int": "1",
            "int32": "1",
            "intEnum": "2",
            "int32Enum": "55",
            "int64Str": "100",
            "jsonParam": "{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"float64Str\":\"1.1\",\"int\":1,\"int32\":1,\"int32Enum\":55,\"int64Str\":\"100\",\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"}",
            "num": "1.1",
            "decimal": "3.141592653589793",
            "decimalStr": "3.14159265358979344719667586",
            "str": "test",
            "strOpt": "testOptional",
        }
    assert sanitize_timestamp(sort_query_parameters(res.url)) == "http://localhost:35123/anything/queryParams/mixed?any=any&bigint=8821239038968084&bigintStr=9223372036854775808&bool=true&boolOpt=true&date=2020-01-01&dateTime=2020-01-01T00%3A00%3A00.001Z&decimal=3.141592653589793&decimalStr=3.14159265358979344719667586&deepObjectParam[any]=any&deepObjectParam[bigintStr]=9223372036854775808&deepObjectParam[bigint]=8821239038968084&deepObjectParam[boolOpt]=true&deepObjectParam[bool]=true&deepObjectParam[dateTime]=2020-01-01T00%3A00%3A00.001Z&deepObjectParam[date]=2020-01-01&deepObjectParam[decimalStr]=3.14159265358979344719667586&deepObjectParam[decimal]=3.141592653589793&deepObjectParam[enum]=one&deepObjectParam[float32]=1.1&deepObjectParam[float64Str]=1.1&deepObjectParam[int32Enum]=55&deepObjectParam[int32]=1&deepObjectParam[int64Str]=100&deepObjectParam[intEnum]=2&deepObjectParam[int]=1&deepObjectParam[num]=1.1&deepObjectParam[strOpt]=testOptional&deepObjectParam[str]=test&enum=one&float32=1.1&float64Str=1.1&int=1&int32=1&int32Enum=55&int64Str=100&intEnum=2&jsonParam={\"any\"%3A\"any\"%2C\"bigint\"%3A8821239038968084%2C\"bigintStr\"%3A\"9223372036854775808\"%2C\"bool\"%3Atrue%2C\"boolOpt\"%3Atrue%2C\"date\"%3A\"2020-01-01\"%2C\"dateTime\"%3A\"2020-01-01T00%3A00%3A00.001Z\"%2C\"decimal\"%3A3.141592653589793%2C\"decimalStr\"%3A\"3.14159265358979344719667586\"%2C\"enum\"%3A\"one\"%2C\"float32\"%3A1.1%2C\"float64Str\"%3A\"1.1\"%2C\"int\"%3A1%2C\"int32\"%3A1%2C\"int32Enum\"%3A55%2C\"int64Str\"%3A\"100\"%2C\"intEnum\"%3A2%2C\"num\"%3A1.1%2C\"str\"%3A\"test\"%2C\"strOpt\"%3A\"testOptional\"}&num=1.1&str=test&strOpt=testOptional"

def test_parameters_path_parameter_json():
    record_test("parameters-path-parameter-json")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.parameters.path_parameter_json(json_obj={
        "any": "any",
        "bigint": 8821239038968084,
        "bigint_str": 9223372036854775808,
        "bool_": True,
        "bool_opt": True,
        "date": dateutil.parser.parse("2020-01-01").date(),
        "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
        "decimal": Decimal("3.141592653589793"),
        "decimal_str": Decimal("3.14159265358979344719667586"),
        "enum": shared.EnumT.ONE,
        "float32": 1.1,
        "float64_str": 1.1,
        "int_": 1,
        "int32": 1,
        "int32_enum": shared.Int32Enum.FIFTY_FIVE,
        "int64_str": 100,
        "int_enum": shared.IntEnum.SECOND,
        "num": 1.1,
        "str_": "test",
        "str_opt": "testOptional",
    })
    assert res is not None
    assert res is not None
    assert sanitize_timestamp(res.url) == "http://localhost:35123/anything/pathParams/json/{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"float64Str\":\"1.1\",\"int\":1,\"int32\":1,\"int32Enum\":55,\"int64Str\":\"100\",\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"}"

def test_parameters_pipe_delimited_query_params_array():
    record_test("parameters-pipe-query-params-array")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.parameters.pipe_delimited_query_params_array(arr_param=[
        "test",
        "test2",
    ], arr_param_exploded=[
        1,
        2,
    ], map_param={
        "key1": "val1",
        "key2": "val2",
    }, obj_param={
        "any": "any",
        "bigint": 8821239038968084,
        "bigint_str": 9223372036854775808,
        "bool_": True,
        "bool_opt": True,
        "date": dateutil.parser.parse("2020-01-01").date(),
        "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
        "decimal": Decimal("3.141592653589793"),
        "decimal_str": Decimal("3.14159265358979344719667586"),
        "enum": shared.EnumT.ONE,
        "float32": 1.1,
        "float64_str": 1.1,
        "int_": 1,
        "int32": 1,
        "int32_enum": shared.Int32Enum.FIFTY_FIVE,
        "int64_str": 100,
        "int_enum": shared.IntEnum.SECOND,
        "num": 1.1,
        "str_": "test",
        "str_opt": "testOptional",
    })
    assert res is not None
    assert res is not None
    assert res.args == operations.PipeDelimitedQueryParamsArrayArgs(
            arr_param="test|test2",
            arr_param_exploded=[
                "1",
                "2",
            ],
        )
    assert sanitize_timestamp(sort_serialized_maps(sort_query_parameters(res.url), r"(?:map|obj)Param=(.*?)(?:&|$)", "|")) == "http://localhost:35123/anything/queryParams/pipe/array?arrParam=test|test2&arrParamExploded=1&arrParamExploded=2&mapParam=key1|val1|key2|val2&objParam=any|any|bigint|8821239038968084|bigintStr|9223372036854775808|bool|true|boolOpt|true|date|2020-01-01|dateTime|2020-01-01T00%3A00%3A00.001Z|decimal|3.141592653589793|decimalStr|3.14159265358979344719667586|enum|one|float32|1.1|float64Str|1.1|int|1|int32|1|int32Enum|55|int64Str|100|intEnum|2|num|1.1|str|test|strOpt|testOptional"

def test_parameters_simple_path_parameter_arrays():
    record_test("parameters-simple-path-parameter-arrays")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.parameters.simple_path_parameter_arrays(arr_param=[
        "test",
        "test2",
    ])
    assert res is not None
    assert res is not None
    assert res == operations.SimplePathParameterArraysRes(
            url="http://localhost:35123/anything/pathParams/arr/test,test2",
        )

def test_parameters_simple_path_parameter_maps():
    record_test("parameters-simple-path-parameter-maps")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.parameters.simple_path_parameter_maps(map_param={
        "test": "value",
        "test2": "value2",
    }, map_param_exploded={
        "test": 1,
        "test2": 2,
    })
    assert res is not None
    assert res is not None
    assert sort_serialized_maps(res.url, r".*?\/map\/(.*?)\/mapExploded\/(.*)", ",") == "http://localhost:35123/anything/pathParams/map/test,value,test2,value2/mapExploded/test=1,test2=2"

def test_parameters_simple_path_parameter_objects():
    record_test("parameters-simple-path-parameter-objects")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.parameters.simple_path_parameter_objects(obj_param={
        "any": "any",
        "bigint": 8821239038968084,
        "bigint_str": 9223372036854775808,
        "bool_": True,
        "bool_opt": True,
        "date": dateutil.parser.parse("2020-01-01").date(),
        "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
        "decimal": Decimal("3.141592653589793"),
        "decimal_str": Decimal("3.14159265358979344719667586"),
        "enum": shared.EnumT.ONE,
        "float32": 1.1,
        "float64_str": 1.1,
        "int_": 1,
        "int32": 1,
        "int32_enum": shared.Int32Enum.FIFTY_FIVE,
        "int64_str": 100,
        "int_enum": shared.IntEnum.SECOND,
        "num": 1.1,
        "str_": "test",
        "str_opt": "testOptional",
    }, obj_param_exploded={
        "any": "any",
        "bigint": 8821239038968084,
        "bigint_str": 9223372036854775808,
        "bool_": True,
        "bool_opt": True,
        "date": dateutil.parser.parse("2020-01-01").date(),
        "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
        "decimal": Decimal("3.141592653589793"),
        "decimal_str": Decimal("3.14159265358979344719667586"),
        "enum": shared.EnumT.ONE,
        "float32": 1.1,
        "float64_str": 1.1,
        "int_": 1,
        "int32": 1,
        "int32_enum": shared.Int32Enum.FIFTY_FIVE,
        "int64_str": 100,
        "int_enum": shared.IntEnum.SECOND,
        "num": 1.1,
        "str_": "test",
        "str_opt": "testOptional",
    })
    assert res is not None
    assert res is not None
    assert sanitize_timestamp(sort_serialized_maps(res.url, r"(?:obj|objExploded)\/(.*?)(?:\/|$)", ",")) == "http://localhost:35123/anything/pathParams/obj/any,any,bigint,8821239038968084,bigintStr,9223372036854775808,bool,true,boolOpt,true,date,2020-01-01,dateTime,2020-01-01T00:00:00.001Z,decimal,3.141592653589793,decimalStr,3.14159265358979344719667586,enum,one,float32,1.1,float64Str,1.1,int,1,int32,1,int32Enum,55,int64Str,100,intEnum,2,num,1.1,str,test,strOpt,testOptional/objExploded/any=any,bigint=8821239038968084,bigintStr=9223372036854775808,bool=true,boolOpt=true,date=2020-01-01,dateTime=2020-01-01T00:00:00.001Z,decimal=3.141592653589793,decimalStr=3.14159265358979344719667586,enum=one,float32=1.1,float64Str=1.1,int=1,int32=1,int32Enum=55,int64Str=100,intEnum=2,num=1.1,str=test,strOpt=testOptional"

def test_parameters_simple_path_parameter_primitives():
    record_test("parameters-simple-path-parameter-primitives")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.parameters.simple_path_parameter_primitives(bool_param=True, int_param=1, num_param=1.1, str_param="test")
    assert res is not None
    assert res is not None
    assert res == operations.SimplePathParameterPrimitivesRes(
            url="http://localhost:35123/anything/pathParams/str/test/bool/true/int/1/num/1.1",
        )
