"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from sdk import SDK
from sdk.models.operations import *
from sdk.utils import *

from .helpers import *


def test_request_body_post_application_json_simple():
    record_test('request-bodies-post-application-json-simple')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.request_bodies.request_body_post_application_json_simple(
        request=obj)

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    compare_simple_object(res.res.json, obj)


def test_request_body_post_application_json_array():
    record_test('request-bodies-post-application-json-array')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.request_bodies.request_body_post_application_json_array(request=[
                                                                    obj])

    assert res is not None
    assert res.status_code == 200
    assert res.simple_objects is not None
    compare_simple_object(res.simple_objects[0], obj)


def test_request_body_post_application_json_array_of_array():
    record_test('request-bodies-post-application-json-array-of-array')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.request_bodies.request_body_post_application_json_array_of_array(request=[
                                                                             [obj], [obj]])

    assert res is not None
    assert res.status_code == 200
    assert res.arrs is not None
    compare_simple_object(res.arrs[0][0], obj)
    compare_simple_object(res.arrs[1][0], obj)


def test_request_body_post_application_json_map():
    record_test('request-bodies-post-application-json-map')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.request_bodies.request_body_post_application_json_map(request={
        'mapElem1': obj,
        'mapElem2': obj,
    })

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    compare_simple_object(res.res['mapElem1'], obj)
    compare_simple_object(res.res['mapElem2'], obj)


def test_request_body_post_application_json_map_of_map():
    record_test('request-bodies-post-application-json-map-of-map')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.request_bodies.request_body_post_application_json_map_of_map(request={
        'mapElem1': {
            'subMapElem1': obj,
            'subMapElem2': obj,
        },
        'mapElem2': {
            'subMapElem1': obj,
            'subMapElem2': obj,
        },
    })

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    compare_simple_object(res.res['mapElem1']['subMapElem1'], obj)
    compare_simple_object(res.res['mapElem1']['subMapElem2'], obj)
    compare_simple_object(res.res['mapElem2']['subMapElem1'], obj)
    compare_simple_object(res.res['mapElem2']['subMapElem2'], obj)


def test_request_body_post_application_json_map_of_array():
    record_test('request-bodies-post-application-json-map-of-array')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.request_bodies.request_body_post_application_json_map_of_array(request={
        'mapElem1': [obj, obj],
        'mapElem2': [obj, obj],
    })

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    compare_simple_object(res.res['mapElem1'][0], obj)
    compare_simple_object(res.res['mapElem1'][1], obj)
    compare_simple_object(res.res['mapElem2'][0], obj)
    compare_simple_object(res.res['mapElem2'][1], obj)


def test_request_body_post_application_json_array_of_map():
    record_test('request-bodies-post-application-json-array-of-map')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.request_bodies.request_body_post_application_json_array_of_map(request=[
        {
            'mapElem1': obj,
            'mapElem2': obj,
        },
        {
            'mapElem1': obj,
            'mapElem2': obj,
        },
    ])

    assert res is not None
    assert res.status_code == 200
    assert res.maps is not None
    compare_simple_object(res.maps[0]['mapElem1'], obj)
    compare_simple_object(res.maps[0]['mapElem2'], obj)
    compare_simple_object(res.maps[1]['mapElem1'], obj)
    compare_simple_object(res.maps[1]['mapElem2'], obj)


def test_request_body_post_application_json_map_of_primitive():
    record_test('request-bodies-post-application-json-map-of-primitive')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_application_json_map_of_primitive(request={
        'mapElem1': 'hello',
        'mapElem2': 'world',
    })

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res['mapElem1'] == 'hello'
    assert res.res['mapElem2'] == 'world'


def test_request_body_post_application_json_array_of_primitive():
    record_test('request-bodies-post-application-json-array-of-primitive')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_application_json_array_of_primitive(
        request=['hello', 'world'])

    assert res is not None
    assert res.status_code == 200
    assert res.strings is not None
    assert res.strings == ['hello', 'world']


def test_request_body_post_application_json_map_of_map_of_primitive():
    record_test('request-bodies-post-application-json-map-of-map-of-primitive')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_application_json_map_of_map_of_primitive(request={
        'mapElem1': {
            'subMapElem1': 'foo',
            'subMapElem2': 'bar',
        },
        'mapElem2': {
            'subMapElem1': 'buzz',
            'subMapElem2': 'bazz',
        },
    })

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res['mapElem1']['subMapElem1'] == 'foo'
    assert res.res['mapElem1']['subMapElem2'] == 'bar'
    assert res.res['mapElem2']['subMapElem1'] == 'buzz'
    assert res.res['mapElem2']['subMapElem2'] == 'bazz'


def test_request_body_post_application_json_array_of_array_of_primitive():
    record_test(
        'request-bodies-post-application-json-array-of-array-of-primitive')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_application_json_array_of_array_of_primitive(request=[
        ['foo', 'bar'],
        ['buzz', 'bazz'],
    ])

    assert res is not None
    assert res.status_code == 200
    assert res.arrs is not None
    assert res.arrs == [
        ['foo', 'bar'],
        ['buzz', 'bazz'],
    ]


def test_request_body_post_application_json_array_object():
    record_test('request-bodies-post-application-json-array-object')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.request_bodies.request_body_post_application_json_array_obj(request=[
                                                                        obj, obj])

    assert res is not None
    assert res.status_code == 200
    assert res.arr_obj_value is not None
    assert len(res.arr_obj_value.json) == 2
    compare_simple_object(res.arr_obj_value.json[0], obj)
    compare_simple_object(res.arr_obj_value.json[1], obj)


def test_request_body_post_application_json_map_object():
    record_test('request-bodies-post-application-json-map-object')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.request_bodies.request_body_post_application_json_map_obj(request={
        'mapElem1': obj,
        'mapElem2': obj,
    })

    assert res is not None
    assert res.status_code == 200
    assert res.map_obj_value is not None
    assert len(res.map_obj_value.json) == 2
    compare_simple_object(res.map_obj_value.json['mapElem1'], obj)
    compare_simple_object(res.map_obj_value.json['mapElem2'], obj)


def test_request_body_post_application_json_deep():
    record_test('request-bodies-post-application-json-deep')

    s = SDK()
    assert s is not None

    obj = create_deep_object()

    res = s.request_bodies.request_body_post_application_json_deep(request=obj)

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None

    any = res.res.json.any
    res.res.json.any = None
    obj.any = None

    compare_deep_object(res.res.json, obj)
    assert any == {
        'any': 'any',
        'bool': True,
        'boolOpt': True,
        'date': '2020-01-01',
        'dateTime': '2020-01-01T00:00:00.000001Z',
        'enum': 'one',
        'float32': 1.1,
        'int': 1,
        'int32': 1,
        'int32Enum': 55,
        'intEnum': 2,
        'num': 1.1,
        'str': 'test',
        'strOpt': 'testOptional'
    }


def test_request_body_post_application_json_multiple_json_filtered():
    record_test('request-bodies-post-application-json-multiple-json-filtered')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.request_bodies.request_body_post_application_json_multiple_json_filtered(
        request=obj)

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    compare_simple_object(res.res.json, obj)


def test_request_body_post_multiple_content_types_component_filtered():
    record_test('request-bodies-post-multiple-content-types-component-filtered')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.request_bodies.request_body_post_multiple_content_types_component_filtered(
        request=obj)

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    compare_simple_object(res.res.json, obj)


def test_request_body_post_multiple_content_types_inline_filtered():
    record_test('request-bodies-post-multiple-content-types-inline-filtered')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_multiple_content_types_inline_filtered(request=RequestBodyPostMultipleContentTypesInlineFilteredApplicationJSON(
        bool=True,
        num=1.1,
        str_='test'
    ))

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.json == {
        'bool': True,
        'num': 1.1,
        'str': 'test'
    }


def test_request_body_post_multiple_content_types_split_json():
    record_test('request-bodies-post-multiple-content-types-split-json')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_multiple_content_types_split_json(request=RequestBodyPostMultipleContentTypesSplitApplicationJSON(
        bool=True,
        num=1.1,
        str_='test'
    ))

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert {
        'bool': True,
        'num': 1.1,
        'str': 'test'
    } == res.res.json


def test_request_body_post_multiple_content_types_split_multipart():
    record_test('request-bodies-post-multiple-content-types-split-multipart')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_multiple_content_types_split_multipart(request=RequestBodyPostMultipleContentTypesSplitMultipartFormData(
        bool2=True,
        num2=1.1,
        str2='test'
    ))

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert {
        'bool2': 'true',
        'num2': '1.1',
        'str2': 'test'
    } == res.res.form


def test_request_body_post_multiple_content_types_split_form():
    record_test('request-bodies-post-multiple-content-types-split-form')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_multiple_content_types_split_form(request=RequestBodyPostMultipleContentTypesSplitApplicationXWwwFormUrlencoded(
        bool3=True,
        num3=1.1,
        str3='test'
    ))

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert {
        'bool3': 'true',
        'num3': '1.1',
        'str3': 'test'
    } == res.res.form


def test_request_body_post_multiple_content_types_split_json_with_param():
    record_test(
        'request-bodies-post-multiple-content-types-split-json-with-param')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_multiple_content_types_split_param_json(
        request_body=RequestBodyPostMultipleContentTypesSplitParamApplicationJSON(
            bool=True,
            num=1.1,
            str_='test body'
        ),
        param_str='test param'
    )

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert {
        'bool': True,
        'num': 1.1,
        'str': 'test body'
    } == res.res.json
    assert {'paramStr': 'test param'} == res.res.args


def test_request_body_post_multiple_content_types_split_multipart_with_param():
    record_test(
        'request-bodies-post-multiple-content-types-split-multipart-with-param')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_multiple_content_types_split_param_multipart(
        request_body=RequestBodyPostMultipleContentTypesSplitParamMultipartFormData(
            bool2=True,
            num2=1.1,
            str2='test body'
        ),
        param_str='test param'
    )

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert {
        'bool2': 'true',
        'num2': '1.1',
        'str2': 'test body'
    } == res.res.form
    assert {'paramStr': 'test param'} == res.res.args


def test_request_body_post_multiple_content_types_split_form_with_param():
    record_test(
        'request-bodies-post-multiple-content-types-split-form-with-param')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_multiple_content_types_split_param_form(
        request_body=RequestBodyPostMultipleContentTypesSplitParamApplicationXWwwFormUrlencoded(
            bool3=True,
            num3=1.1,
            str3='test body'
        ),
        param_str='test param'
    )

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert {
        'bool3': 'true',
        'num3': '1.1',
        'str3': 'test body'
    } == res.res.form
    assert {'paramStr': 'test param'} == res.res.args


def test_request_body_put_multipart_simple():
    record_test('request-bodies-put-multipart-simple')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.request_bodies.request_body_put_multipart_simple(request=obj)

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.form.any == 'any'
    assert res.res.form.bool == 'true'
    assert res.res.form.bool_opt == 'true'
    assert res.res.form.date_ == '2020-01-01'
    assert res.res.form.date_time == '2020-01-01T00:00:00.000001Z'
    assert res.res.form.enum == 'one'
    assert res.res.form.float32 == '1.1'
    assert res.res.form.int == '1'
    assert res.res.form.int32 == '1'
    assert res.res.form.num == '1.1'
    assert res.res.form.str_ == 'test'
    assert res.res.form.str_opt == 'testOptional'
    assert res.res.form.int_opt_null is None
    assert res.res.form.num_opt_null is None


def test_request_body_put_multipart_deep():
    record_test('request-bodies-put-multipart-deep')

    s = SDK()
    assert s is not None

    obj = create_deep_object()

    res = s.request_bodies.request_body_put_multipart_deep(request=obj)

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.form.arr == marshal_json(obj.arr)
    assert res.res.form.bool == 'true'
    assert res.res.form.int == '1'
    assert res.res.form.map == marshal_json(obj.map)
    assert res.res.form.num == '1.1'
    assert res.res.form.obj == marshal_json(obj.obj)
    assert res.res.form.str_ == 'test'


def test_request_body_put_multipart_file():
    record_test('request-bodies-put-multipart-file')

    s = SDK()
    assert s is not None

    f = open('./tests/testUpload.json')
    data = f.read()

    res = s.request_bodies.request_body_put_multipart_file(request=RequestBodyPutMultipartFileRequestBody(
        file=RequestBodyPutMultipartFileRequestBodyFile(
            content=data,
            file='testUpload.json'
        )
    ))

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.files == {
        'file': data
    }


def test_request_body_post_form_simple():
    record_test('request-bodies-post-form-simple')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.request_bodies.request_body_post_form_simple(request=obj)

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.form.any == 'any'
    assert res.res.form.bool == 'true'
    assert res.res.form.bool_opt == 'true'
    assert res.res.form.date_ == '2020-01-01'
    assert res.res.form.date_time == '2020-01-01T00:00:00.000001Z'
    assert res.res.form.enum == 'one'
    assert res.res.form.float32 == '1.1'
    assert res.res.form.int == '1'
    assert res.res.form.int32 == '1'
    assert res.res.form.num == '1.1'
    assert res.res.form.str_ == 'test'
    assert res.res.form.str_opt == 'testOptional'
    assert res.res.form.int_opt_null is None
    assert res.res.form.num_opt_null is None


def test_request_body_post_form_deep():
    record_test('request-bodies-post-form-deep')

    s = SDK()
    assert s is not None

    obj = create_deep_object()

    res = s.request_bodies.request_body_post_form_deep(request=obj)

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.form.arr == marshal_json(obj.arr)
    assert res.res.form.bool == 'true'
    assert res.res.form.int == '1'
    assert res.res.form.map == marshal_json(obj.map)
    assert res.res.form.num == '1.1'
    assert res.res.form.obj == marshal_json(obj.obj)
    assert res.res.form.str_ == 'test'


def test_request_body_post_form_map_primitive():
    record_test('request-bodies-post-form-map-primitive')

    s = SDK()
    assert s is not None

    m = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}

    res = s.request_bodies.request_body_post_form_map_primitive(request=m)

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.form == m


def test_request_body_put_string():
    record_test('request-bodies-put-string')

    s = SDK()
    assert s is not None

    string = 'Hello world'
    res = s.request_bodies.request_body_put_string(request=string)

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.data == string


def test_request_body_put_bytes():
    record_test('request-bodies-put-bytes')

    s = SDK()
    assert s is not None

    f = open('./tests/testUpload.json')
    data = f.read()
    res = s.request_bodies.request_body_put_bytes(request=data)

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.data == data


def test_request_body_put_string_with_params():
    record_test('request-bodies-put-string-with-params')

    s = SDK()
    assert s is not None

    string = 'Hello world'
    res = s.request_bodies.request_body_put_string_with_params(
        request_body=string, query_string_param="test param")

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.data == string
    assert res.res.args.query_string_param == "test param"


def test_request_body_put_bytes_with_params():
    record_test('request-bodies-put-bytes-with-params')

    s = SDK()
    assert s is not None

    f = open('./tests/testUpload.json')
    data = f.read()
    res = s.request_bodies.request_body_put_bytes_with_params(
        request_body=data, query_string_param="test param")

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.data == data
    assert res.res.args.query_string_param == "test param"


def test_request_body_post_empty_object():
    record_test('request-bodies-post-empty-object')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_empty_object(request={})

    assert res is not None
    assert res.status_code == 200


def test_request_body_camel_case():
    record_test('request-bodies-camel-case')

    s = SDK()
    assert s is not None

    obj = create_simple_object_camel_case()

    res = s.request_bodies.request_body_camel_case(request=obj)

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    compare_simple_object_camel_case(res.res.json)
