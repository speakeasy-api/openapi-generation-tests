"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import dateutil.parser
import sdk
from .common_helpers import *
from .helpers import *
from decimal import Decimal
from sdk.models import operations, shared


def test_request_bodies_nullable_object_post():
    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.nullable_object_post(request=None)
    assert res is not None
    assert res.status_code == 200
    assert res.res == operations.NullableObjectPostRes(
            json=None,
        )

def test_request_bodies_nullable_required_empty_object_post_nullable_set():
    record_test('request-bodies-post-nullable-required-empty-object-nullable-set')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.nullable_required_empty_object_post(request=operations.NullableRequiredEmptyObjectPostRequestBody(
        nullable_optional_obj=None,
        nullable_required_obj=None,
        required_obj=operations.RequiredObj(),
    ))
    assert res is not None
    assert res.status_code == 200
    assert res.object.json == operations.NullableRequiredEmptyObjectPostJSON(
            nullable_optional_obj=None,
            nullable_required_obj=None,
            required_obj=operations.NullableRequiredEmptyObjectPostRequiredObj(),
        )

def test_request_bodies_nullable_required_empty_object_post_optional_set():
    record_test('request-bodies-post-nullable-required-empty-object-optional-set')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.nullable_required_empty_object_post(request=operations.NullableRequiredEmptyObjectPostRequestBody(
        nullable_optional_obj=operations.NullableOptionalObj(),
        nullable_required_obj=None,
        required_obj=operations.RequiredObj(),
    ))
    assert res is not None
    assert res.status_code == 200
    assert res.object.json == operations.NullableRequiredEmptyObjectPostJSON(
            nullable_optional_obj=operations.NullableRequiredEmptyObjectPostNullableOptionalObj(),
            nullable_required_obj=None,
            required_obj=operations.NullableRequiredEmptyObjectPostRequiredObj(),
        )

def test_request_bodies_nullable_required_empty_object_post_all_set():
    record_test('request-bodies-post-nullable-required-empty-object-all-set')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.nullable_required_empty_object_post(request=operations.NullableRequiredEmptyObjectPostRequestBody(
        nullable_optional_obj=operations.NullableOptionalObj(),
        nullable_required_obj=operations.NullableRequiredObj(),
        required_obj=operations.RequiredObj(),
    ))
    assert res is not None
    assert res.status_code == 200
    assert res.object.json == operations.NullableRequiredEmptyObjectPostJSON(
            nullable_optional_obj=operations.NullableRequiredEmptyObjectPostNullableOptionalObj(),
            nullable_required_obj=operations.NullableRequiredEmptyObjectPostNullableRequiredObj(),
            required_obj=operations.NullableRequiredEmptyObjectPostRequiredObj(),
        )

def test_request_bodies_nullable_required_property_post_all_set():
    record_test('request-bodies-post-nullable-required-property-all-set')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.nullable_required_property_post(request=operations.NullableRequiredPropertyPostRequestBody(
        nullable_optional_int=0,
        nullable_required_array=[
            1.1,
            2.2,
            3.3,
        ],
        nullable_required_big_int_str=9223372036854775807,
        nullable_required_date_time=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
        nullable_required_decimal_str=Decimal('3.141592653589793238462643383279'),
        nullable_required_enum=operations.NullableRequiredEnum.SECOND,
        nullable_required_int=1,
    ))
    assert res is not None
    assert res.status_code == 200
    assert res.object.json == operations.NullableRequiredPropertyPostJSON(
            nullable_optional_int=0,
            nullable_required_array=[
                1.1,
                2.2,
                3.3,
            ],
            nullable_required_big_int_str=9223372036854775807,
            nullable_required_date_time=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
            nullable_required_decimal_str=Decimal('3.141592653589793238462643383279'),
            nullable_required_enum=operations.NullableRequiredPropertyPostNullableRequiredEnum.SECOND,
            nullable_required_int=1,
        )

def test_request_bodies_nullable_required_property_post_all_null():
    record_test('request-bodies-post-nullable-required-property-all-null')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.nullable_required_property_post(request=operations.NullableRequiredPropertyPostRequestBody(
        nullable_optional_int=None,
        nullable_required_array=None,
        nullable_required_big_int_str=None,
        nullable_required_date_time=None,
        nullable_required_decimal_str=None,
        nullable_required_enum=operations.NullableRequiredEnum.SECOND,
        nullable_required_int=None,
    ))
    assert res is not None
    assert res.status_code == 200
    assert res.object.json == operations.NullableRequiredPropertyPostJSON(
            nullable_optional_int=None,
            nullable_required_array=None,
            nullable_required_big_int_str=None,
            nullable_required_date_time=None,
            nullable_required_decimal_str=None,
            nullable_required_enum=operations.NullableRequiredPropertyPostNullableRequiredEnum.SECOND,
            nullable_required_int=None,
        )

def test_request_bodies_request_body_post_application_json_array():
    record_test('request-bodies-post-application-json-array')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_array(request=[
        shared.SimpleObject(
            any='any',
            bigint=8821239038968084,
            bigint_str=9223372036854775808,
            bool=True,
            bool_opt=True,
            date_=dateutil.parser.parse('2020-01-01').date(),
            date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
            decimal=Decimal('3.141592653589793'),
            decimal_str=Decimal('3.14159265358979344719667586'),
            enum=shared.EnumT.ONE,
            float32=1.1,
            float64_str=1.1,
            int=1,
            int32=1,
            int32_enum=shared.Int32Enum.FIFTY_FIVE,
            int64_str=100,
            int_enum=shared.IntEnum.SECOND,
            num=1.1,
            str_='test',
            str_opt='testOptional',
        ),
    ])
    assert res is not None
    assert res.status_code == 200
    assert res.res ==     [
            shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
        ]

def test_request_bodies_request_body_post_application_json_array_camel_case():
    record_test('request-bodies-post-application-json-array-camel-case')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_array_camel_case(request=[
        shared.SimpleObjectCamelCase(
            any_val='any example',
            bool_opt_val=True,
            bool_val=True,
            date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
            date_val=dateutil.parser.parse('2020-01-01').date(),
            enum_val=shared.EnumT.ONE,
            float32_val=2.2222222,
            int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
            int32_val=1,
            int_enum_val=shared.IntEnumVal.THIRD,
            int_opt_null_val=999999,
            int_val=999999,
            num_opt_null_val=1.1,
            num_val=1.1,
            str_opt_val='optional example',
            str_val='example',
        ),
    ])
    assert res is not None
    assert res.status_code == 200
    assert res.res ==     [
            shared.SimpleObjectCamelCase(
                any_val='any example',
                bool_opt_val=True,
                bool_val=True,
                date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                date_val=dateutil.parser.parse('2020-01-01').date(),
                enum_val=shared.EnumT.ONE,
                float32_val=2.2222222,
                int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                int32_val=1,
                int_enum_val=shared.IntEnumVal.THIRD,
                int_opt_null_val=999999,
                int_val=999999,
                num_opt_null_val=1.1,
                num_val=1.1,
                str_opt_val='optional example',
                str_val='example',
            ),
        ]

def test_request_bodies_request_body_post_application_json_array_obj():
    record_test('request-bodies-post-application-json-array-object')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_array_obj(request=[
        shared.SimpleObject(
            any='any',
            bigint=8821239038968084,
            bigint_str=9223372036854775808,
            bool=True,
            bool_opt=True,
            date_=dateutil.parser.parse('2020-01-01').date(),
            date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
            decimal=Decimal('3.141592653589793'),
            decimal_str=Decimal('3.14159265358979344719667586'),
            enum=shared.EnumT.ONE,
            float32=1.1,
            float64_str=1.1,
            int=1,
            int32=1,
            int32_enum=shared.Int32Enum.FIFTY_FIVE,
            int64_str=100,
            int_enum=shared.IntEnum.SECOND,
            num=1.1,
            str_='test',
            str_opt='testOptional',
        ),
        shared.SimpleObject(
            any='any',
            bigint=8821239038968084,
            bigint_str=9223372036854775808,
            bool=True,
            bool_opt=True,
            date_=dateutil.parser.parse('2020-01-01').date(),
            date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
            decimal=Decimal('3.141592653589793'),
            decimal_str=Decimal('3.14159265358979344719667586'),
            enum=shared.EnumT.ONE,
            float32=1.1,
            float64_str=1.1,
            int=1,
            int32=1,
            int32_enum=shared.Int32Enum.FIFTY_FIVE,
            int64_str=100,
            int_enum=shared.IntEnum.SECOND,
            num=1.1,
            str_='test',
            str_opt='testOptional',
        ),
    ])
    assert res is not None
    assert res.status_code == 200
    assert res.arr_obj_value == shared.ArrObjValue(
            json=[
                shared.SimpleObject(
                    any='any',
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool=True,
                    bool_opt=True,
                    date_=dateutil.parser.parse('2020-01-01').date(),
                    date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                    decimal=Decimal('3.141592653589793'),
                    decimal_str=Decimal('3.14159265358979344719667586'),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_='test',
                    str_opt='testOptional',
                ),
                shared.SimpleObject(
                    any='any',
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool=True,
                    bool_opt=True,
                    date_=dateutil.parser.parse('2020-01-01').date(),
                    date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                    decimal=Decimal('3.141592653589793'),
                    decimal_str=Decimal('3.14159265358979344719667586'),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_='test',
                    str_opt='testOptional',
                ),
            ],
        )

def test_request_bodies_request_body_post_application_json_array_obj_camel_case():
    record_test('request-bodies-post-application-json-array-object-camel-case')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_array_obj_camel_case(request=[
        shared.SimpleObjectCamelCase(
            any_val='any example',
            bool_opt_val=True,
            bool_val=True,
            date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
            date_val=dateutil.parser.parse('2020-01-01').date(),
            enum_val=shared.EnumT.ONE,
            float32_val=2.2222222,
            int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
            int32_val=1,
            int_enum_val=shared.IntEnumVal.THIRD,
            int_opt_null_val=999999,
            int_val=999999,
            num_opt_null_val=1.1,
            num_val=1.1,
            str_opt_val='optional example',
            str_val='example',
        ),
        shared.SimpleObjectCamelCase(
            any_val='any example',
            bool_opt_val=True,
            bool_val=True,
            date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
            date_val=dateutil.parser.parse('2020-01-01').date(),
            enum_val=shared.EnumT.ONE,
            float32_val=2.2222222,
            int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
            int32_val=1,
            int_enum_val=shared.IntEnumVal.THIRD,
            int_opt_null_val=999999,
            int_val=999999,
            num_opt_null_val=1.1,
            num_val=1.1,
            str_opt_val='optional example',
            str_val='example',
        ),
    ])
    assert res is not None
    assert res.status_code == 200
    assert res.arr_obj_value_camel_case == shared.ArrObjValueCamelCase(
            json=[
                shared.SimpleObjectCamelCase(
                    any_val='any example',
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                    date_val=dateutil.parser.parse('2020-01-01').date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val='optional example',
                    str_val='example',
                ),
                shared.SimpleObjectCamelCase(
                    any_val='any example',
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                    date_val=dateutil.parser.parse('2020-01-01').date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val='optional example',
                    str_val='example',
                ),
            ],
        )

def test_request_bodies_request_body_post_application_json_array_of_array():
    record_test('request-bodies-post-application-json-array-of-array')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_array_of_array(request=[
        [
            shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
        ],
    ])
    assert res is not None
    assert res.status_code == 200
    assert res.res ==     [
            [
                shared.SimpleObject(
                    any='any',
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool=True,
                    bool_opt=True,
                    date_=dateutil.parser.parse('2020-01-01').date(),
                    date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                    decimal=Decimal('3.141592653589793'),
                    decimal_str=Decimal('3.14159265358979344719667586'),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_='test',
                    str_opt='testOptional',
                ),
            ],
        ]

def test_request_bodies_request_body_post_application_json_array_of_array_camel_case():
    record_test('request-bodies-post-application-json-array-of-array-camel-case')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_array_of_array_camel_case(request=[
        [
            shared.SimpleObjectCamelCase(
                any_val='any example',
                bool_opt_val=True,
                bool_val=True,
                date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                date_val=dateutil.parser.parse('2020-01-01').date(),
                enum_val=shared.EnumT.ONE,
                float32_val=2.2222222,
                int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                int32_val=1,
                int_enum_val=shared.IntEnumVal.THIRD,
                int_opt_null_val=999999,
                int_val=999999,
                num_opt_null_val=1.1,
                num_val=1.1,
                str_opt_val='optional example',
                str_val='example',
            ),
        ],
    ])
    assert res is not None
    assert res.status_code == 200
    assert res.res ==     [
            [
                shared.SimpleObjectCamelCase(
                    any_val='any example',
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                    date_val=dateutil.parser.parse('2020-01-01').date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val='optional example',
                    str_val='example',
                ),
            ],
        ]

def test_request_bodies_request_body_post_application_json_array_of_array_of_primitive():
    record_test('request-bodies-post-application-json-array-of-array-of-primitive')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_array_of_array_of_primitive(request=[
        [
            'foo',
            'bar',
        ],
        [
            'buzz',
            'bazz',
        ],
    ])
    assert res is not None
    assert res.status_code == 200
    assert res.res ==     [
            [
                'foo',
                'bar',
            ],
            [
                'buzz',
                'bazz',
            ],
        ]

def test_request_bodies_request_body_post_application_json_array_of_map():
    record_test('request-bodies-post-application-json-array-of-map')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_array_of_map(request=[
        {
            'mapElem1': shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
            'mapElem2': shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
        },
        {
            'mapElem1': shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
            'mapElem2': shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
        },
    ])
    assert res is not None
    assert res.status_code == 200
    assert res.res ==     [
            {
                'mapElem1': shared.SimpleObject(
                    any='any',
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool=True,
                    bool_opt=True,
                    date_=dateutil.parser.parse('2020-01-01').date(),
                    date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                    decimal=Decimal('3.141592653589793'),
                    decimal_str=Decimal('3.14159265358979344719667586'),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_='test',
                    str_opt='testOptional',
                ),
                'mapElem2': shared.SimpleObject(
                    any='any',
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool=True,
                    bool_opt=True,
                    date_=dateutil.parser.parse('2020-01-01').date(),
                    date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                    decimal=Decimal('3.141592653589793'),
                    decimal_str=Decimal('3.14159265358979344719667586'),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_='test',
                    str_opt='testOptional',
                ),
            },
            {
                'mapElem1': shared.SimpleObject(
                    any='any',
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool=True,
                    bool_opt=True,
                    date_=dateutil.parser.parse('2020-01-01').date(),
                    date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                    decimal=Decimal('3.141592653589793'),
                    decimal_str=Decimal('3.14159265358979344719667586'),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_='test',
                    str_opt='testOptional',
                ),
                'mapElem2': shared.SimpleObject(
                    any='any',
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool=True,
                    bool_opt=True,
                    date_=dateutil.parser.parse('2020-01-01').date(),
                    date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                    decimal=Decimal('3.141592653589793'),
                    decimal_str=Decimal('3.14159265358979344719667586'),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_='test',
                    str_opt='testOptional',
                ),
            },
        ]

def test_request_bodies_request_body_post_application_json_array_of_map_camel_case():
    record_test('request-bodies-post-application-json-array-of-map-camel-case')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_array_of_map_camel_case(request=[
        {
            'mapElem1': shared.SimpleObjectCamelCase(
                any_val='any example',
                bool_opt_val=True,
                bool_val=True,
                date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                date_val=dateutil.parser.parse('2020-01-01').date(),
                enum_val=shared.EnumT.ONE,
                float32_val=2.2222222,
                int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                int32_val=1,
                int_enum_val=shared.IntEnumVal.THIRD,
                int_opt_null_val=999999,
                int_val=999999,
                num_opt_null_val=1.1,
                num_val=1.1,
                str_opt_val='optional example',
                str_val='example',
            ),
            'mapElem2': shared.SimpleObjectCamelCase(
                any_val='any example',
                bool_opt_val=True,
                bool_val=True,
                date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                date_val=dateutil.parser.parse('2020-01-01').date(),
                enum_val=shared.EnumT.ONE,
                float32_val=2.2222222,
                int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                int32_val=1,
                int_enum_val=shared.IntEnumVal.THIRD,
                int_opt_null_val=999999,
                int_val=999999,
                num_opt_null_val=1.1,
                num_val=1.1,
                str_opt_val='optional example',
                str_val='example',
            ),
        },
        {
            'mapElem1': shared.SimpleObjectCamelCase(
                any_val='any example',
                bool_opt_val=True,
                bool_val=True,
                date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                date_val=dateutil.parser.parse('2020-01-01').date(),
                enum_val=shared.EnumT.ONE,
                float32_val=2.2222222,
                int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                int32_val=1,
                int_enum_val=shared.IntEnumVal.THIRD,
                int_opt_null_val=999999,
                int_val=999999,
                num_opt_null_val=1.1,
                num_val=1.1,
                str_opt_val='optional example',
                str_val='example',
            ),
            'mapElem2': shared.SimpleObjectCamelCase(
                any_val='any example',
                bool_opt_val=True,
                bool_val=True,
                date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                date_val=dateutil.parser.parse('2020-01-01').date(),
                enum_val=shared.EnumT.ONE,
                float32_val=2.2222222,
                int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                int32_val=1,
                int_enum_val=shared.IntEnumVal.THIRD,
                int_opt_null_val=999999,
                int_val=999999,
                num_opt_null_val=1.1,
                num_val=1.1,
                str_opt_val='optional example',
                str_val='example',
            ),
        },
    ])
    assert res is not None
    assert res.status_code == 200
    assert res.res ==     [
            {
                'mapElem1': shared.SimpleObjectCamelCase(
                    any_val='any example',
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                    date_val=dateutil.parser.parse('2020-01-01').date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val='optional example',
                    str_val='example',
                ),
                'mapElem2': shared.SimpleObjectCamelCase(
                    any_val='any example',
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                    date_val=dateutil.parser.parse('2020-01-01').date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val='optional example',
                    str_val='example',
                ),
            },
            {
                'mapElem1': shared.SimpleObjectCamelCase(
                    any_val='any example',
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                    date_val=dateutil.parser.parse('2020-01-01').date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val='optional example',
                    str_val='example',
                ),
                'mapElem2': shared.SimpleObjectCamelCase(
                    any_val='any example',
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                    date_val=dateutil.parser.parse('2020-01-01').date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val='optional example',
                    str_val='example',
                ),
            },
        ]

def test_request_bodies_request_body_post_application_json_array_of_primitive():
    record_test('request-bodies-post-application-json-array-of-primitive')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_array_of_primitive(request=[
        'hello',
        'world',
    ])
    assert res is not None
    assert res.status_code == 200
    assert res.res ==     [
            'hello',
            'world',
        ]

def test_request_bodies_request_body_post_application_json_deep():
    record_test('request-bodies-post-application-json-deep')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_deep(request=shared.DeepObject(
        any=shared.SimpleObject(
            any='any',
            bigint=8821239038968084,
            bigint_str=9223372036854775808,
            bool=True,
            bool_opt=True,
            date_=dateutil.parser.parse('2020-01-01').date(),
            date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
            decimal=Decimal('3.141592653589793'),
            decimal_str=Decimal('3.14159265358979344719667586'),
            enum=shared.EnumT.ONE,
            float32=1.1,
            float64_str=1.1,
            int=1,
            int32=1,
            int32_enum=shared.Int32Enum.FIFTY_FIVE,
            int64_str=100,
            int_enum=shared.IntEnum.SECOND,
            num=1.1,
            str_='test',
            str_opt='testOptional',
        ),
        arr=[
            shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
            shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
        ],
        bool=True,
        int=1,
        map={
            'key': shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
            'key2': shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
        },
        num=1.1,
        obj=shared.SimpleObject(
            any='any',
            bigint=8821239038968084,
            bigint_str=9223372036854775808,
            bool=True,
            bool_opt=True,
            date_=dateutil.parser.parse('2020-01-01').date(),
            date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
            decimal=Decimal('3.141592653589793'),
            decimal_str=Decimal('3.14159265358979344719667586'),
            enum=shared.EnumT.ONE,
            float32=1.1,
            float64_str=1.1,
            int=1,
            int32=1,
            int32_enum=shared.Int32Enum.FIFTY_FIVE,
            int64_str=100,
            int_enum=shared.IntEnum.SECOND,
            num=1.1,
            str_='test',
            str_opt='testOptional',
        ),
        str_='test',
    ))
    assert res is not None
    assert res.status_code == 200
    assert res.res == operations.RequestBodyPostApplicationJSONDeepRes(
            json=shared.DeepObject(
                any=shared.SimpleObject(
                    any='any',
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool=True,
                    bool_opt=True,
                    date_=dateutil.parser.parse('2020-01-01').date(),
                    date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                    decimal=Decimal('3.141592653589793'),
                    decimal_str=Decimal('3.14159265358979344719667586'),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_='test',
                    str_opt='testOptional',
                ),
                arr=[
                    shared.SimpleObject(
                        any='any',
                        bigint=8821239038968084,
                        bigint_str=9223372036854775808,
                        bool=True,
                        bool_opt=True,
                        date_=dateutil.parser.parse('2020-01-01').date(),
                        date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                        decimal=Decimal('3.141592653589793'),
                        decimal_str=Decimal('3.14159265358979344719667586'),
                        enum=shared.EnumT.ONE,
                        float32=1.1,
                        float64_str=1.1,
                        int=1,
                        int32=1,
                        int32_enum=shared.Int32Enum.FIFTY_FIVE,
                        int64_str=100,
                        int_enum=shared.IntEnum.SECOND,
                        num=1.1,
                        str_='test',
                        str_opt='testOptional',
                    ),
                    shared.SimpleObject(
                        any='any',
                        bigint=8821239038968084,
                        bigint_str=9223372036854775808,
                        bool=True,
                        bool_opt=True,
                        date_=dateutil.parser.parse('2020-01-01').date(),
                        date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                        decimal=Decimal('3.141592653589793'),
                        decimal_str=Decimal('3.14159265358979344719667586'),
                        enum=shared.EnumT.ONE,
                        float32=1.1,
                        float64_str=1.1,
                        int=1,
                        int32=1,
                        int32_enum=shared.Int32Enum.FIFTY_FIVE,
                        int64_str=100,
                        int_enum=shared.IntEnum.SECOND,
                        num=1.1,
                        str_='test',
                        str_opt='testOptional',
                    ),
                ],
                bool=True,
                int=1,
                map={
                    'key': shared.SimpleObject(
                        any='any',
                        bigint=8821239038968084,
                        bigint_str=9223372036854775808,
                        bool=True,
                        bool_opt=True,
                        date_=dateutil.parser.parse('2020-01-01').date(),
                        date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                        decimal=Decimal('3.141592653589793'),
                        decimal_str=Decimal('3.14159265358979344719667586'),
                        enum=shared.EnumT.ONE,
                        float32=1.1,
                        float64_str=1.1,
                        int=1,
                        int32=1,
                        int32_enum=shared.Int32Enum.FIFTY_FIVE,
                        int64_str=100,
                        int_enum=shared.IntEnum.SECOND,
                        num=1.1,
                        str_='test',
                        str_opt='testOptional',
                    ),
                    'key2': shared.SimpleObject(
                        any='any',
                        bigint=8821239038968084,
                        bigint_str=9223372036854775808,
                        bool=True,
                        bool_opt=True,
                        date_=dateutil.parser.parse('2020-01-01').date(),
                        date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                        decimal=Decimal('3.141592653589793'),
                        decimal_str=Decimal('3.14159265358979344719667586'),
                        enum=shared.EnumT.ONE,
                        float32=1.1,
                        float64_str=1.1,
                        int=1,
                        int32=1,
                        int32_enum=shared.Int32Enum.FIFTY_FIVE,
                        int64_str=100,
                        int_enum=shared.IntEnum.SECOND,
                        num=1.1,
                        str_='test',
                        str_opt='testOptional',
                    ),
                },
                num=1.1,
                obj=shared.SimpleObject(
                    any='any',
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool=True,
                    bool_opt=True,
                    date_=dateutil.parser.parse('2020-01-01').date(),
                    date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                    decimal=Decimal('3.141592653589793'),
                    decimal_str=Decimal('3.14159265358979344719667586'),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_='test',
                    str_opt='testOptional',
                ),
                str_='test',
            ),
        )

def test_request_bodies_request_body_post_application_json_deep_camel_case():
    record_test('request-bodies-post-application-json-deep-camel-case')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_deep_camel_case(request=shared.DeepObjectCamelCase(
        any_val='<value>',
        arr_val=[
            shared.SimpleObjectCamelCase(
                any_val='any example',
                bool_opt_val=True,
                bool_val=True,
                date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                date_val=dateutil.parser.parse('2020-01-01').date(),
                enum_val=shared.EnumT.ONE,
                float32_val=2.2222222,
                int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                int32_val=1,
                int_enum_val=shared.IntEnumVal.THIRD,
                int_opt_null_val=999999,
                int_val=999999,
                num_opt_null_val=1.1,
                num_val=1.1,
                str_opt_val='optional example',
                str_val='example',
            ),
            shared.SimpleObjectCamelCase(
                any_val='any example',
                bool_opt_val=True,
                bool_val=True,
                date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                date_val=dateutil.parser.parse('2020-01-01').date(),
                enum_val=shared.EnumT.ONE,
                float32_val=2.2222222,
                int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                int32_val=1,
                int_enum_val=shared.IntEnumVal.THIRD,
                int_opt_null_val=999999,
                int_val=999999,
                num_opt_null_val=1.1,
                num_val=1.1,
                str_opt_val='optional example',
                str_val='example',
            ),
        ],
        bool_val=True,
        int_val=1,
        map_val={
            'key': shared.SimpleObjectCamelCase(
                any_val='any example',
                bool_opt_val=True,
                bool_val=True,
                date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                date_val=dateutil.parser.parse('2020-01-01').date(),
                enum_val=shared.EnumT.ONE,
                float32_val=2.2222222,
                int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                int32_val=1,
                int_enum_val=shared.IntEnumVal.THIRD,
                int_opt_null_val=999999,
                int_val=999999,
                num_opt_null_val=1.1,
                num_val=1.1,
                str_opt_val='optional example',
                str_val='example',
            ),
        },
        num_val=1.1,
        obj_val=shared.SimpleObjectCamelCase(
            any_val='any example',
            bool_opt_val=True,
            bool_val=True,
            date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
            date_val=dateutil.parser.parse('2020-01-01').date(),
            enum_val=shared.EnumT.ONE,
            float32_val=2.2222222,
            int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
            int32_val=1,
            int_enum_val=shared.IntEnumVal.THIRD,
            int_opt_null_val=999999,
            int_val=999999,
            num_opt_null_val=1.1,
            num_val=1.1,
            str_opt_val='optional example',
            str_val='example',
        ),
        str_val='test',
    ))
    assert res is not None
    assert res.status_code == 200
    assert res.res == operations.RequestBodyPostApplicationJSONDeepCamelCaseRes(
            json=shared.DeepObjectCamelCase(
                any_val='<value>',
                arr_val=[
                    shared.SimpleObjectCamelCase(
                        any_val='any example',
                        bool_opt_val=True,
                        bool_val=True,
                        date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                        date_val=dateutil.parser.parse('2020-01-01').date(),
                        enum_val=shared.EnumT.ONE,
                        float32_val=2.2222222,
                        int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                        int32_val=1,
                        int_enum_val=shared.IntEnumVal.THIRD,
                        int_opt_null_val=999999,
                        int_val=999999,
                        num_opt_null_val=1.1,
                        num_val=1.1,
                        str_opt_val='optional example',
                        str_val='example',
                    ),
                    shared.SimpleObjectCamelCase(
                        any_val='any example',
                        bool_opt_val=True,
                        bool_val=True,
                        date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                        date_val=dateutil.parser.parse('2020-01-01').date(),
                        enum_val=shared.EnumT.ONE,
                        float32_val=2.2222222,
                        int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                        int32_val=1,
                        int_enum_val=shared.IntEnumVal.THIRD,
                        int_opt_null_val=999999,
                        int_val=999999,
                        num_opt_null_val=1.1,
                        num_val=1.1,
                        str_opt_val='optional example',
                        str_val='example',
                    ),
                ],
                bool_val=True,
                int_val=1,
                map_val={
                    'key': shared.SimpleObjectCamelCase(
                        any_val='any example',
                        bool_opt_val=True,
                        bool_val=True,
                        date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                        date_val=dateutil.parser.parse('2020-01-01').date(),
                        enum_val=shared.EnumT.ONE,
                        float32_val=2.2222222,
                        int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                        int32_val=1,
                        int_enum_val=shared.IntEnumVal.THIRD,
                        int_opt_null_val=999999,
                        int_val=999999,
                        num_opt_null_val=1.1,
                        num_val=1.1,
                        str_opt_val='optional example',
                        str_val='example',
                    ),
                },
                num_val=1.1,
                obj_val=shared.SimpleObjectCamelCase(
                    any_val='any example',
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                    date_val=dateutil.parser.parse('2020-01-01').date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val='optional example',
                    str_val='example',
                ),
                str_val='test',
            ),
        )

def test_request_bodies_request_body_post_application_json_map():
    record_test('request-bodies-post-application-json-map')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_map(request={
        'mapElem1': shared.SimpleObject(
            any='any',
            bigint=8821239038968084,
            bigint_str=9223372036854775808,
            bool=True,
            bool_opt=True,
            date_=dateutil.parser.parse('2020-01-01').date(),
            date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
            decimal=Decimal('3.141592653589793'),
            decimal_str=Decimal('3.14159265358979344719667586'),
            enum=shared.EnumT.ONE,
            float32=1.1,
            float64_str=1.1,
            int=1,
            int32=1,
            int32_enum=shared.Int32Enum.FIFTY_FIVE,
            int64_str=100,
            int_enum=shared.IntEnum.SECOND,
            num=1.1,
            str_='test',
            str_opt='testOptional',
        ),
        'mapElem2': shared.SimpleObject(
            any='any',
            bigint=8821239038968084,
            bigint_str=9223372036854775808,
            bool=True,
            bool_opt=True,
            date_=dateutil.parser.parse('2020-01-01').date(),
            date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
            decimal=Decimal('3.141592653589793'),
            decimal_str=Decimal('3.14159265358979344719667586'),
            enum=shared.EnumT.ONE,
            float32=1.1,
            float64_str=1.1,
            int=1,
            int32=1,
            int32_enum=shared.Int32Enum.FIFTY_FIVE,
            int64_str=100,
            int_enum=shared.IntEnum.SECOND,
            num=1.1,
            str_='test',
            str_opt='testOptional',
        ),
    })
    assert res is not None
    assert res.status_code == 200
    assert res.res ==     {
            'mapElem1': shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
            'mapElem2': shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
        }

def test_request_bodies_request_body_post_application_json_map_camel_case():
    record_test('request-bodies-post-application-json-map-camel-case')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_map_camel_case(request={
        'mapElem1': shared.SimpleObjectCamelCase(
            any_val='any example',
            bool_opt_val=True,
            bool_val=True,
            date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
            date_val=dateutil.parser.parse('2020-01-01').date(),
            enum_val=shared.EnumT.ONE,
            float32_val=2.2222222,
            int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
            int32_val=1,
            int_enum_val=shared.IntEnumVal.THIRD,
            int_opt_null_val=999999,
            int_val=999999,
            num_opt_null_val=1.1,
            num_val=1.1,
            str_opt_val='optional example',
            str_val='example',
        ),
        'mapElem2': shared.SimpleObjectCamelCase(
            any_val='any example',
            bool_opt_val=True,
            bool_val=True,
            date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
            date_val=dateutil.parser.parse('2020-01-01').date(),
            enum_val=shared.EnumT.ONE,
            float32_val=2.2222222,
            int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
            int32_val=1,
            int_enum_val=shared.IntEnumVal.THIRD,
            int_opt_null_val=999999,
            int_val=999999,
            num_opt_null_val=1.1,
            num_val=1.1,
            str_opt_val='optional example',
            str_val='example',
        ),
    })
    assert res is not None
    assert res.status_code == 200
    assert res.res ==     {
            'mapElem1': shared.SimpleObjectCamelCase(
                any_val='any example',
                bool_opt_val=True,
                bool_val=True,
                date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                date_val=dateutil.parser.parse('2020-01-01').date(),
                enum_val=shared.EnumT.ONE,
                float32_val=2.2222222,
                int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                int32_val=1,
                int_enum_val=shared.IntEnumVal.THIRD,
                int_opt_null_val=999999,
                int_val=999999,
                num_opt_null_val=1.1,
                num_val=1.1,
                str_opt_val='optional example',
                str_val='example',
            ),
            'mapElem2': shared.SimpleObjectCamelCase(
                any_val='any example',
                bool_opt_val=True,
                bool_val=True,
                date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                date_val=dateutil.parser.parse('2020-01-01').date(),
                enum_val=shared.EnumT.ONE,
                float32_val=2.2222222,
                int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                int32_val=1,
                int_enum_val=shared.IntEnumVal.THIRD,
                int_opt_null_val=999999,
                int_val=999999,
                num_opt_null_val=1.1,
                num_val=1.1,
                str_opt_val='optional example',
                str_val='example',
            ),
        }

def test_request_bodies_request_body_post_application_json_map_obj():
    record_test('request-bodies-post-application-json-map-object')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_map_obj(request={
        'mapElem1': shared.SimpleObject(
            any='any',
            bigint=8821239038968084,
            bigint_str=9223372036854775808,
            bool=True,
            bool_opt=True,
            date_=dateutil.parser.parse('2020-01-01').date(),
            date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
            decimal=Decimal('3.141592653589793'),
            decimal_str=Decimal('3.14159265358979344719667586'),
            enum=shared.EnumT.ONE,
            float32=1.1,
            float64_str=1.1,
            int=1,
            int32=1,
            int32_enum=shared.Int32Enum.FIFTY_FIVE,
            int64_str=100,
            int_enum=shared.IntEnum.SECOND,
            num=1.1,
            str_='test',
            str_opt='testOptional',
        ),
        'mapElem2': shared.SimpleObject(
            any='any',
            bigint=8821239038968084,
            bigint_str=9223372036854775808,
            bool=True,
            bool_opt=True,
            date_=dateutil.parser.parse('2020-01-01').date(),
            date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
            decimal=Decimal('3.141592653589793'),
            decimal_str=Decimal('3.14159265358979344719667586'),
            enum=shared.EnumT.ONE,
            float32=1.1,
            float64_str=1.1,
            int=1,
            int32=1,
            int32_enum=shared.Int32Enum.FIFTY_FIVE,
            int64_str=100,
            int_enum=shared.IntEnum.SECOND,
            num=1.1,
            str_='test',
            str_opt='testOptional',
        ),
    })
    assert res is not None
    assert res.status_code == 200
    assert res.map_obj_value == shared.MapObjValue(
            json={
                'mapElem1': shared.SimpleObject(
                    any='any',
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool=True,
                    bool_opt=True,
                    date_=dateutil.parser.parse('2020-01-01').date(),
                    date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                    decimal=Decimal('3.141592653589793'),
                    decimal_str=Decimal('3.14159265358979344719667586'),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_='test',
                    str_opt='testOptional',
                ),
                'mapElem2': shared.SimpleObject(
                    any='any',
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool=True,
                    bool_opt=True,
                    date_=dateutil.parser.parse('2020-01-01').date(),
                    date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                    decimal=Decimal('3.141592653589793'),
                    decimal_str=Decimal('3.14159265358979344719667586'),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_='test',
                    str_opt='testOptional',
                ),
            },
        )

def test_request_bodies_request_body_post_application_json_map_obj_camel_case():
    record_test('request-bodies-post-application-json-map-object-camel-case')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_map_obj_camel_case(request={
        'mapElem1': shared.SimpleObjectCamelCase(
            any_val='any example',
            bool_opt_val=True,
            bool_val=True,
            date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
            date_val=dateutil.parser.parse('2020-01-01').date(),
            enum_val=shared.EnumT.ONE,
            float32_val=2.2222222,
            int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
            int32_val=1,
            int_enum_val=shared.IntEnumVal.THIRD,
            int_opt_null_val=999999,
            int_val=999999,
            num_opt_null_val=1.1,
            num_val=1.1,
            str_opt_val='optional example',
            str_val='example',
        ),
        'mapElem2': shared.SimpleObjectCamelCase(
            any_val='any example',
            bool_opt_val=True,
            bool_val=True,
            date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
            date_val=dateutil.parser.parse('2020-01-01').date(),
            enum_val=shared.EnumT.ONE,
            float32_val=2.2222222,
            int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
            int32_val=1,
            int_enum_val=shared.IntEnumVal.THIRD,
            int_opt_null_val=999999,
            int_val=999999,
            num_opt_null_val=1.1,
            num_val=1.1,
            str_opt_val='optional example',
            str_val='example',
        ),
    })
    assert res is not None
    assert res.status_code == 200
    assert res.map_obj_value_camel_case == shared.MapObjValueCamelCase(
            json={
                'mapElem1': shared.SimpleObjectCamelCase(
                    any_val='any example',
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                    date_val=dateutil.parser.parse('2020-01-01').date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val='optional example',
                    str_val='example',
                ),
                'mapElem2': shared.SimpleObjectCamelCase(
                    any_val='any example',
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                    date_val=dateutil.parser.parse('2020-01-01').date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val='optional example',
                    str_val='example',
                ),
            },
        )

def test_request_bodies_request_body_post_application_json_map_of_array():
    record_test('request-bodies-post-application-json-map-of-array')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_map_of_array(request={
        'mapElem1': [
            shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
            shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
        ],
        'mapElem2': [
            shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
            shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
        ],
    })
    assert res is not None
    assert res.status_code == 200
    assert res.res ==     {
            'mapElem1': [
                shared.SimpleObject(
                    any='any',
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool=True,
                    bool_opt=True,
                    date_=dateutil.parser.parse('2020-01-01').date(),
                    date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                    decimal=Decimal('3.141592653589793'),
                    decimal_str=Decimal('3.14159265358979344719667586'),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_='test',
                    str_opt='testOptional',
                ),
                shared.SimpleObject(
                    any='any',
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool=True,
                    bool_opt=True,
                    date_=dateutil.parser.parse('2020-01-01').date(),
                    date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                    decimal=Decimal('3.141592653589793'),
                    decimal_str=Decimal('3.14159265358979344719667586'),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_='test',
                    str_opt='testOptional',
                ),
            ],
            'mapElem2': [
                shared.SimpleObject(
                    any='any',
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool=True,
                    bool_opt=True,
                    date_=dateutil.parser.parse('2020-01-01').date(),
                    date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                    decimal=Decimal('3.141592653589793'),
                    decimal_str=Decimal('3.14159265358979344719667586'),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_='test',
                    str_opt='testOptional',
                ),
                shared.SimpleObject(
                    any='any',
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool=True,
                    bool_opt=True,
                    date_=dateutil.parser.parse('2020-01-01').date(),
                    date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                    decimal=Decimal('3.141592653589793'),
                    decimal_str=Decimal('3.14159265358979344719667586'),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_='test',
                    str_opt='testOptional',
                ),
            ],
        }

def test_request_bodies_request_body_post_application_json_map_of_array_camel_case():
    record_test('request-bodies-post-application-json-map-of-array-camel-case')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_map_of_array_camel_case(request={
        'mapElem1': [
            shared.SimpleObjectCamelCase(
                any_val='any example',
                bool_opt_val=True,
                bool_val=True,
                date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                date_val=dateutil.parser.parse('2020-01-01').date(),
                enum_val=shared.EnumT.ONE,
                float32_val=2.2222222,
                int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                int32_val=1,
                int_enum_val=shared.IntEnumVal.THIRD,
                int_opt_null_val=999999,
                int_val=999999,
                num_opt_null_val=1.1,
                num_val=1.1,
                str_opt_val='optional example',
                str_val='example',
            ),
            shared.SimpleObjectCamelCase(
                any_val='any example',
                bool_opt_val=True,
                bool_val=True,
                date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                date_val=dateutil.parser.parse('2020-01-01').date(),
                enum_val=shared.EnumT.ONE,
                float32_val=2.2222222,
                int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                int32_val=1,
                int_enum_val=shared.IntEnumVal.THIRD,
                int_opt_null_val=999999,
                int_val=999999,
                num_opt_null_val=1.1,
                num_val=1.1,
                str_opt_val='optional example',
                str_val='example',
            ),
        ],
        'mapElem2': [
            shared.SimpleObjectCamelCase(
                any_val='any example',
                bool_opt_val=True,
                bool_val=True,
                date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                date_val=dateutil.parser.parse('2020-01-01').date(),
                enum_val=shared.EnumT.ONE,
                float32_val=2.2222222,
                int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                int32_val=1,
                int_enum_val=shared.IntEnumVal.THIRD,
                int_opt_null_val=999999,
                int_val=999999,
                num_opt_null_val=1.1,
                num_val=1.1,
                str_opt_val='optional example',
                str_val='example',
            ),
            shared.SimpleObjectCamelCase(
                any_val='any example',
                bool_opt_val=True,
                bool_val=True,
                date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                date_val=dateutil.parser.parse('2020-01-01').date(),
                enum_val=shared.EnumT.ONE,
                float32_val=2.2222222,
                int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                int32_val=1,
                int_enum_val=shared.IntEnumVal.THIRD,
                int_opt_null_val=999999,
                int_val=999999,
                num_opt_null_val=1.1,
                num_val=1.1,
                str_opt_val='optional example',
                str_val='example',
            ),
        ],
    })
    assert res is not None
    assert res.status_code == 200
    assert res.res ==     {
            'mapElem1': [
                shared.SimpleObjectCamelCase(
                    any_val='any example',
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                    date_val=dateutil.parser.parse('2020-01-01').date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val='optional example',
                    str_val='example',
                ),
                shared.SimpleObjectCamelCase(
                    any_val='any example',
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                    date_val=dateutil.parser.parse('2020-01-01').date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val='optional example',
                    str_val='example',
                ),
            ],
            'mapElem2': [
                shared.SimpleObjectCamelCase(
                    any_val='any example',
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                    date_val=dateutil.parser.parse('2020-01-01').date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val='optional example',
                    str_val='example',
                ),
                shared.SimpleObjectCamelCase(
                    any_val='any example',
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                    date_val=dateutil.parser.parse('2020-01-01').date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val='optional example',
                    str_val='example',
                ),
            ],
        }

def test_request_bodies_request_body_post_application_json_map_of_map():
    record_test('request-bodies-post-application-json-map-of-map')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_map_of_map(request={
        'mapElem1': {
            'subMapElem1': shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
            'subMapElem2': shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
        },
        'mapElem2': {
            'subMapElem1': shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
            'subMapElem2': shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
        },
    })
    assert res is not None
    assert res.status_code == 200
    assert res.res ==     {
            'mapElem1': {
                'subMapElem1': shared.SimpleObject(
                    any='any',
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool=True,
                    bool_opt=True,
                    date_=dateutil.parser.parse('2020-01-01').date(),
                    date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                    decimal=Decimal('3.141592653589793'),
                    decimal_str=Decimal('3.14159265358979344719667586'),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_='test',
                    str_opt='testOptional',
                ),
                'subMapElem2': shared.SimpleObject(
                    any='any',
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool=True,
                    bool_opt=True,
                    date_=dateutil.parser.parse('2020-01-01').date(),
                    date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                    decimal=Decimal('3.141592653589793'),
                    decimal_str=Decimal('3.14159265358979344719667586'),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_='test',
                    str_opt='testOptional',
                ),
            },
            'mapElem2': {
                'subMapElem1': shared.SimpleObject(
                    any='any',
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool=True,
                    bool_opt=True,
                    date_=dateutil.parser.parse('2020-01-01').date(),
                    date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                    decimal=Decimal('3.141592653589793'),
                    decimal_str=Decimal('3.14159265358979344719667586'),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_='test',
                    str_opt='testOptional',
                ),
                'subMapElem2': shared.SimpleObject(
                    any='any',
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool=True,
                    bool_opt=True,
                    date_=dateutil.parser.parse('2020-01-01').date(),
                    date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                    decimal=Decimal('3.141592653589793'),
                    decimal_str=Decimal('3.14159265358979344719667586'),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_='test',
                    str_opt='testOptional',
                ),
            },
        }

def test_request_bodies_request_body_post_application_json_map_of_map_camel_case():
    record_test('request-bodies-post-application-json-map-of-map-camel-case')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_map_of_map_camel_case(request={
        'mapElem1': {
            'subMapElem1': shared.SimpleObjectCamelCase(
                any_val='any example',
                bool_opt_val=True,
                bool_val=True,
                date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                date_val=dateutil.parser.parse('2020-01-01').date(),
                enum_val=shared.EnumT.ONE,
                float32_val=2.2222222,
                int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                int32_val=1,
                int_enum_val=shared.IntEnumVal.THIRD,
                int_opt_null_val=999999,
                int_val=999999,
                num_opt_null_val=1.1,
                num_val=1.1,
                str_opt_val='optional example',
                str_val='example',
            ),
            'subMapElem2': shared.SimpleObjectCamelCase(
                any_val='any example',
                bool_opt_val=True,
                bool_val=True,
                date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                date_val=dateutil.parser.parse('2020-01-01').date(),
                enum_val=shared.EnumT.ONE,
                float32_val=2.2222222,
                int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                int32_val=1,
                int_enum_val=shared.IntEnumVal.THIRD,
                int_opt_null_val=999999,
                int_val=999999,
                num_opt_null_val=1.1,
                num_val=1.1,
                str_opt_val='optional example',
                str_val='example',
            ),
        },
        'mapElem2': {
            'subMapElem1': shared.SimpleObjectCamelCase(
                any_val='any example',
                bool_opt_val=True,
                bool_val=True,
                date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                date_val=dateutil.parser.parse('2020-01-01').date(),
                enum_val=shared.EnumT.ONE,
                float32_val=2.2222222,
                int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                int32_val=1,
                int_enum_val=shared.IntEnumVal.THIRD,
                int_opt_null_val=999999,
                int_val=999999,
                num_opt_null_val=1.1,
                num_val=1.1,
                str_opt_val='optional example',
                str_val='example',
            ),
            'subMapElem2': shared.SimpleObjectCamelCase(
                any_val='any example',
                bool_opt_val=True,
                bool_val=True,
                date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                date_val=dateutil.parser.parse('2020-01-01').date(),
                enum_val=shared.EnumT.ONE,
                float32_val=2.2222222,
                int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                int32_val=1,
                int_enum_val=shared.IntEnumVal.THIRD,
                int_opt_null_val=999999,
                int_val=999999,
                num_opt_null_val=1.1,
                num_val=1.1,
                str_opt_val='optional example',
                str_val='example',
            ),
        },
    })
    assert res is not None
    assert res.status_code == 200
    assert res.res ==     {
            'mapElem1': {
                'subMapElem1': shared.SimpleObjectCamelCase(
                    any_val='any example',
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                    date_val=dateutil.parser.parse('2020-01-01').date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val='optional example',
                    str_val='example',
                ),
                'subMapElem2': shared.SimpleObjectCamelCase(
                    any_val='any example',
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                    date_val=dateutil.parser.parse('2020-01-01').date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val='optional example',
                    str_val='example',
                ),
            },
            'mapElem2': {
                'subMapElem1': shared.SimpleObjectCamelCase(
                    any_val='any example',
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                    date_val=dateutil.parser.parse('2020-01-01').date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val='optional example',
                    str_val='example',
                ),
                'subMapElem2': shared.SimpleObjectCamelCase(
                    any_val='any example',
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                    date_val=dateutil.parser.parse('2020-01-01').date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val='optional example',
                    str_val='example',
                ),
            },
        }

def test_request_bodies_request_body_post_application_json_map_of_map_of_primitive():
    record_test('request-bodies-post-application-json-map-of-map-of-primitive')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_map_of_map_of_primitive(request={
        'mapElem1': {
            'subMapElem1': 'foo',
            'subMapElem2': 'bar',
        },
        'mapElem2': {
            'subMapElem1': 'buzz',
            'subMapElem2': 'bazz',
        },
    })
    assert res is not None
    assert res.status_code == 200
    assert res.res ==     {
            'mapElem1': {
                'subMapElem1': 'foo',
                'subMapElem2': 'bar',
            },
            'mapElem2': {
                'subMapElem1': 'buzz',
                'subMapElem2': 'bazz',
            },
        }

def test_request_bodies_request_body_post_application_json_map_of_primitive():
    record_test('request-bodies-post-application-json-map-of-primitive')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_map_of_primitive(request={
        'mapElem1': 'hello',
        'mapElem2': 'world',
    })
    assert res is not None
    assert res.status_code == 200
    assert res.res ==     {
            'mapElem1': 'hello',
            'mapElem2': 'world',
        }

def test_request_bodies_request_body_post_application_json_multiple_json_filtered():
    record_test('request-bodies-post-application-json-multiple-json-filtered')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_multiple_json_filtered(request=shared.SimpleObject(
        any='any',
        bigint=8821239038968084,
        bigint_str=9223372036854775808,
        bool=True,
        bool_opt=True,
        date_=dateutil.parser.parse('2020-01-01').date(),
        date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
        decimal=Decimal('3.141592653589793'),
        decimal_str=Decimal('3.14159265358979344719667586'),
        enum=shared.EnumT.ONE,
        float32=1.1,
        float64_str=1.1,
        int=1,
        int32=1,
        int32_enum=shared.Int32Enum.FIFTY_FIVE,
        int64_str=100,
        int_enum=shared.IntEnum.SECOND,
        num=1.1,
        str_='test',
        str_opt='testOptional',
    ))
    assert res is not None
    assert res.status_code == 200
    assert res.res == operations.RequestBodyPostApplicationJSONMultipleJSONFilteredRes(
            json=shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
        )

def test_request_bodies_request_body_post_application_json_simple():
    record_test('request-bodies-post-application-json-simple')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_simple(request=shared.SimpleObject(
        any='any',
        bigint=8821239038968084,
        bigint_str=9223372036854775808,
        bool=True,
        bool_opt=True,
        date_=dateutil.parser.parse('2020-01-01').date(),
        date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
        decimal=Decimal('3.141592653589793'),
        decimal_str=Decimal('3.14159265358979344719667586'),
        enum=shared.EnumT.ONE,
        float32=1.1,
        float64_str=1.1,
        int=1,
        int32=1,
        int32_enum=shared.Int32Enum.FIFTY_FIVE,
        int64_str=100,
        int_enum=shared.IntEnum.SECOND,
        num=1.1,
        str_='test',
        str_opt='testOptional',
    ))
    assert res is not None
    assert res.status_code == 200
    assert res.res == operations.RequestBodyPostApplicationJSONSimpleRes(
            json=shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
        )

def test_request_bodies_request_body_post_application_json_simple_camel_case():
    record_test('request-bodies-post-application-json-simple-camel-case')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_simple_camel_case(request=shared.SimpleObjectCamelCase(
        any_val='any example',
        bool_opt_val=True,
        bool_val=True,
        date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
        date_val=dateutil.parser.parse('2020-01-01').date(),
        enum_val=shared.EnumT.ONE,
        float32_val=2.2222222,
        int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
        int32_val=1,
        int_enum_val=shared.IntEnumVal.THIRD,
        int_opt_null_val=999999,
        int_val=999999,
        num_opt_null_val=1.1,
        num_val=1.1,
        str_opt_val='optional example',
        str_val='example',
    ))
    assert res is not None
    assert res.status_code == 200
    assert res.res == operations.RequestBodyPostApplicationJSONSimpleCamelCaseRes(
            json=shared.SimpleObjectCamelCase(
                any_val='any example',
                bool_opt_val=True,
                bool_val=True,
                date_time_val=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                date_val=dateutil.parser.parse('2020-01-01').date(),
                enum_val=shared.EnumT.ONE,
                float32_val=2.2222222,
                int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                int32_val=1,
                int_enum_val=shared.IntEnumVal.THIRD,
                int_opt_null_val=999999,
                int_val=999999,
                num_opt_null_val=1.1,
                num_val=1.1,
                str_opt_val='optional example',
                str_val='example',
            ),
        )

def test_request_bodies_request_body_post_complex_number_types():
    record_test('request-bodies-complex-number-types')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_complex_number_types(request=operations.RequestBodyPostComplexNumberTypesRequest(
        complex_number_types=shared.ComplexNumberTypes(
            bigint=8821239038968084,
            bigint_str=9223372036854775808,
            decimal=Decimal('3.141592653589793'),
            decimal_str=Decimal('3.14159265358979344719667586'),
        ),
        path_big_int=8821239038968084,
        path_big_int_str=9223372036854775808,
        path_decimal=Decimal('3.141592653589793'),
        path_decimal_str=Decimal('3.14159265358979344719667586'),
        query_big_int=8821239038968084,
        query_big_int_str=9223372036854775808,
        query_decimal=Decimal('3.141592653589793'),
        query_decimal_str=Decimal('3.14159265358979344719667586'),
    ))
    assert res is not None
    assert res.status_code == 200
    assert res.object.json == shared.ComplexNumberTypes(
            bigint=8821239038968084,
            bigint_str=9223372036854775808,
            decimal=Decimal('3.141592653589793'),
            decimal_str=Decimal('3.14159265358979344719667586'),
        )
    assert sort_query_parameters(res.object.url) == 'http://localhost:35123/anything/requestBodies/post/8821239038968084/9223372036854775808/3.141592653589793/3.14159265358979344719667586/complex-number-types?queryBigInt=8821239038968084&queryBigIntStr=9223372036854775808&queryDecimal=3.141592653589793&queryDecimalStr=3.14159265358979344719667586'

def test_request_bodies_request_body_post_defaults_and_consts():
    record_test('request-bodies-defaults-and-consts')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_defaults_and_consts(request=shared.DefaultsAndConsts(
        normal_field='test',
    ))
    assert res is not None
    assert res.status_code == 200
    assert res.object == operations.RequestBodyPostDefaultsAndConstsResponseBody(
            json=shared.DefaultsAndConstsOutput(
                const_big_int=9007199254740991,
                const_big_int_str=9223372036854775807,
                const_bool=True,
                const_date=dateutil.parser.parse('2020-01-01').date(),
                const_date_time=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                const_decimal=Decimal('3.141592653589793'),
                const_decimal_str=Decimal('3.141592653589793238462643383279'),
                const_enum_int=shared.DefaultsAndConstsOutputConstEnumInt.TWO,
                const_enum_str=shared.DefaultsAndConstsOutputConstEnumStr.TWO,
                const_int=123,
                const_num=123.456,
                const_str='const',
                const_str_d_quotes='const with "double quotes"',
                const_str_null=None,
                const_str_s_quotes='const with \'single quotes\'',
                default_big_int=9007199254740991,
                default_big_int_str=9223372036854775807,
                default_bool=True,
                default_date=dateutil.parser.parse('2020-01-01').date(),
                default_date_time=dateutil.parser.isoparse('2020-01-01T00:00:00Z'),
                default_decimal=Decimal('3.141592653589793'),
                default_decimal_str=Decimal('3.141592653589793238462643383279'),
                default_enum_int=shared.DefaultsAndConstsOutputDefaultEnumInt.TWO,
                default_enum_str=shared.DefaultsAndConstsOutputDefaultEnumStr.TWO,
                default_int=123,
                default_num=123.456,
                default_str='default',
                default_str_d_quotes='default with "double quotes"',
                default_str_nullable=None,
                default_str_optional='default',
                default_str_s_quotes='default with \'single quotes\'',
                normal_field='test',
            ),
        )

def test_request_bodies_request_body_post_empty_object():
    record_test('request-bodies-post-empty-object')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_empty_object(request=operations.RequestBodyPostEmptyObjectRequestBody())
    assert res is not None
    assert res.status_code == 200
    assert res.object == operations.RequestBodyPostEmptyObjectResponseBody()

def test_request_bodies_request_body_post_form_deep():
    record_test('request-bodies-post-form-deep')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_form_deep(request=shared.DeepObject(
        any=shared.SimpleObject(
            any='any',
            bigint=8821239038968084,
            bigint_str=9223372036854775808,
            bool=True,
            bool_opt=True,
            date_=dateutil.parser.parse('2020-01-01').date(),
            date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
            decimal=Decimal('3.141592653589793'),
            decimal_str=Decimal('3.14159265358979344719667586'),
            enum=shared.EnumT.ONE,
            float32=1.1,
            float64_str=1.1,
            int=1,
            int32=1,
            int32_enum=shared.Int32Enum.FIFTY_FIVE,
            int64_str=100,
            int_enum=shared.IntEnum.SECOND,
            num=1.1,
            str_='test',
            str_opt='testOptional',
        ),
        arr=[
            shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
            shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
        ],
        bool=True,
        int=1,
        map={
            'key': shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
            'key2': shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
        },
        num=1.1,
        obj=shared.SimpleObject(
            any='any',
            bigint=8821239038968084,
            bigint_str=9223372036854775808,
            bool=True,
            bool_opt=True,
            date_=dateutil.parser.parse('2020-01-01').date(),
            date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
            decimal=Decimal('3.141592653589793'),
            decimal_str=Decimal('3.14159265358979344719667586'),
            enum=shared.EnumT.ONE,
            float32=1.1,
            float64_str=1.1,
            int=1,
            int32=1,
            int32_enum=shared.Int32Enum.FIFTY_FIVE,
            int64_str=100,
            int_enum=shared.IntEnum.SECOND,
            num=1.1,
            str_='test',
            str_opt='testOptional',
        ),
        str_='test',
    ))
    assert res is not None
    assert res.status_code == 200
    assert sanitize_timestamp(res.res.form.arr) == '[{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"},{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"}]'
    assert res.res.form.bool == 'true'
    assert res.res.form.int == '1'
    assert sanitize_timestamp(res.res.form.map) == '{"key":{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"},"key2":{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"}}'
    assert res.res.form.num == '1.1'
    assert sanitize_timestamp(res.res.form.obj) == '{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"}'
    assert res.res.form.str_ == 'test'

def test_request_bodies_request_body_post_form_map_primitive():
    record_test('request-bodies-post-form-map-primitive')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_form_map_primitive(request={
        'key1': 'value1',
        'key2': 'value2',
        'key3': 'value3',
    })
    assert res is not None
    assert res.status_code == 200
    assert res.res == operations.RequestBodyPostFormMapPrimitiveRes(
            form={
                'key1': 'value1',
                'key2': 'value2',
                'key3': 'value3',
            },
        )

def test_request_bodies_request_body_post_form_simple():
    record_test('request-bodies-post-form-simple')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_form_simple(request=shared.SimpleObject(
        any='any',
        bigint=8821239038968084,
        bigint_str=9223372036854775808,
        bool=True,
        bool_opt=True,
        date_=dateutil.parser.parse('2020-01-01').date(),
        date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
        decimal=Decimal('3.141592653589793'),
        decimal_str=Decimal('3.14159265358979344719667586'),
        enum=shared.EnumT.ONE,
        float32=1.1,
        float64_str=1.1,
        int=1,
        int32=1,
        int32_enum=shared.Int32Enum.FIFTY_FIVE,
        int64_str=100,
        int_enum=shared.IntEnum.SECOND,
        num=1.1,
        str_='test',
        str_opt='testOptional',
    ))
    assert res is not None
    assert res.status_code == 200
    assert res.res.form.any == 'any'
    assert res.res.form.bigint == '8821239038968084'
    assert res.res.form.bigint_str == '9223372036854775808'
    assert res.res.form.bool == 'true'
    assert res.res.form.bool_opt == 'true'
    assert res.res.form.date_ == '2020-01-01'
    assert sanitize_timestamp(res.res.form.date_time) == '2020-01-01T00:00:00.001Z'
    assert res.res.form.decimal == '3.141592653589793'
    assert res.res.form.decimal_str == '3.14159265358979344719667586'
    assert res.res.form.enum == 'one'
    assert res.res.form.float32 == '1.1'
    assert res.res.form.int == '1'
    assert res.res.form.int32 == '1'
    assert res.res.form.int32_enum == '55'
    assert res.res.form.int_enum == '2'
    assert res.res.form.int_opt_null is None
    assert res.res.form.num == '1.1'
    assert res.res.form.num_opt_null is None
    assert res.res.form.str_ == 'test'
    assert res.res.form.str_opt == 'testOptional'

def test_request_bodies_request_body_post_json_data_types_array_big_int():
    record_test('request-bodies-post-json-data-types-array-bigint')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_array_big_int(request=[
        1,
    ])
    assert res is not None
    assert res.status_code == 200
    assert res.object == operations.RequestBodyPostJSONDataTypesArrayBigIntResponseBody(
            data='[1]',
            json=[
                1,
            ],
        )

def test_request_bodies_request_body_post_json_data_types_array_date():
    record_test('request-bodies-post-json-data-types-array-date')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_array_date(request=[
        dateutil.parser.parse('2020-01-01').date(),
    ])
    assert res is not None
    assert res.status_code == 200
    assert res.object == operations.RequestBodyPostJSONDataTypesArrayDateResponseBody(
            data='["2020-01-01"]',
            json=[
                dateutil.parser.parse('2020-01-01').date(),
            ],
        )

def test_request_bodies_request_body_post_json_data_types_array_decimal_str():
    record_test('request-bodies-post-json-data-types-array-decimal-str')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_array_decimal_str(request=[
        Decimal('3.141592653589793438462643383279'),
    ])
    assert res is not None
    assert res.status_code == 200
    assert res.object == operations.RequestBodyPostJSONDataTypesArrayDecimalStrResponseBody(
            data='["3.141592653589793438462643383279"]',
            json=[
                Decimal('3.141592653589793438462643383279'),
            ],
        )

def test_request_bodies_request_body_post_json_data_types_big_int():
    record_test('request-bodies-post-json-data-types-bigint')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_big_int(request=1)
    assert res is not None
    assert res.status_code == 200
    assert res.object == operations.RequestBodyPostJSONDataTypesBigIntResponseBody(
            data='1',
            json=1,
        )

def test_request_bodies_request_body_post_json_data_types_big_int_str():
    record_test('request-bodies-post-json-data-types-bigint-str')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_big_int_str(request=1)
    assert res is not None
    assert res.status_code == 200
    assert res.object == operations.RequestBodyPostJSONDataTypesBigIntStrResponseBody(
            data='"1"',
            json=1,
        )

def test_request_bodies_request_body_post_json_data_types_boolean():
    record_test('request-bodies-post-json-data-types-boolean')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_boolean(request=True)
    assert res is not None
    assert res.status_code == 200
    assert res.object == operations.RequestBodyPostJSONDataTypesBooleanResponseBody(
            json=True,
        )

def test_request_bodies_request_body_post_json_data_types_complex_number_arrays_test():
    record_test('request-bodies-post-json-data-types-complex-number-arrays')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_complex_number_arrays(request=shared.ComplexNumberArrays(
        decimal_array=[
            Decimal('3.141592653589793'),
        ],
        decimal_str_array=[
            Decimal('3.141592653589793238462643383279'),
        ],
    ))
    assert res is not None
    assert res.status_code == 200
    assert res.res == operations.RequestBodyPostJSONDataTypesComplexNumberArraysRes(
            json=shared.ComplexNumberArrays(
                decimal_array=[
                    Decimal('3.141592653589793'),
                ],
                decimal_str_array=[
                    Decimal('3.141592653589793238462643383279'),
                ],
            ),
        )

def test_request_bodies_request_body_post_json_data_types_complex_number_maps_test():
    record_test('request-bodies-post-json-data-types-complex-number-maps')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_complex_number_maps(request=shared.ComplexNumberMaps(
        bigint_map={
            'bigint': 9007199254740991,
        },
        bigint_str_map={
            'bigint': 9223372036854775807,
        },
        decimal_map={
            'decimal': Decimal('3.141592653589793'),
        },
        decimal_str_map={
            'decimal': Decimal('3.141592653589793238462643383279'),
        },
    ))
    assert res is not None
    assert res.status_code == 200
    assert res.res == operations.RequestBodyPostJSONDataTypesComplexNumberMapsRes(
            json=shared.ComplexNumberMaps(
                bigint_map={
                    'bigint': 9007199254740991,
                },
                bigint_str_map={
                    'bigint': 9223372036854775807,
                },
                decimal_map={
                    'decimal': Decimal('3.141592653589793'),
                },
                decimal_str_map={
                    'decimal': Decimal('3.141592653589793238462643383279'),
                },
            ),
        )

def test_request_bodies_request_body_post_json_data_types_date():
    record_test('request-bodies-post-json-data-types-date')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_date(request=dateutil.parser.parse('2020-01-01').date())
    assert res is not None
    assert res.status_code == 200
    assert res.object == operations.RequestBodyPostJSONDataTypesDateResponseBody(
            data='"2020-01-01"',
            json=dateutil.parser.parse('2020-01-01').date(),
        )

def test_request_bodies_request_body_post_json_data_types_date_time():
    record_test('request-bodies-post-json-data-types-date-time')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_date_time(request=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'))
    assert res is not None
    assert res.status_code == 200
    assert sanitize_timestamp(res.object.data) == '"2020-01-01T00:00:00.001Z"'
    assert res.object.json == dateutil.parser.isoparse('2020-01-01T00:00:00.001Z')

def test_request_bodies_request_body_post_json_data_types_decimal():
    record_test('request-bodies-post-json-data-types-decimal')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_decimal(request=Decimal('1.1'))
    assert res is not None
    assert res.status_code == 200
    assert res.object == operations.RequestBodyPostJSONDataTypesDecimalResponseBody(
            data='1.1',
            json=Decimal('1.1'),
        )

def test_request_bodies_request_body_post_json_data_types_decimal_str():
    record_test('request-bodies-post-json-data-types-decimal-str')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_decimal_str(request=Decimal('1.1'))
    assert res is not None
    assert res.status_code == 200
    assert res.object == operations.RequestBodyPostJSONDataTypesDecimalStrResponseBody(
            data='"1.1"',
            json=Decimal('1.1'),
        )

def test_request_bodies_request_body_post_json_data_types_float32():
    record_test('request-bodies-post-json-data-types-float32')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_float32(request=1.1)
    assert res is not None
    assert res.status_code == 200
    assert res.object == operations.RequestBodyPostJSONDataTypesFloat32ResponseBody(
            json=1.1,
        )

def test_request_bodies_request_body_post_json_data_types_int32():
    record_test('request-bodies-post-json-data-types-int32')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_int32(request=1)
    assert res is not None
    assert res.status_code == 200
    assert res.object == operations.RequestBodyPostJSONDataTypesInt32ResponseBody(
            json=1,
        )

def test_request_bodies_request_body_post_json_data_types_integer():
    record_test('request-bodies-post-json-data-types-integer')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_integer(request=1)
    assert res is not None
    assert res.status_code == 200
    assert res.object == operations.RequestBodyPostJSONDataTypesIntegerResponseBody(
            json=1,
        )

def test_request_bodies_request_body_post_json_data_types_map_big_int_str():
    record_test('request-bodies-post-json-data-types-map-bigint-str')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_map_big_int_str(request={
        'test': 1,
    })
    assert res is not None
    assert res.status_code == 200
    assert res.object == operations.RequestBodyPostJSONDataTypesMapBigIntStrResponseBody(
            data='{"test":"1"}',
            json={
                'test': 1,
            },
        )

def test_request_bodies_request_body_post_json_data_types_map_date_time():
    record_test('request-bodies-post-json-data-types-map-date-time')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_map_date_time(request={
        'test': dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
    })
    assert res is not None
    assert res.status_code == 200
    assert sanitize_timestamp(res.object.data) == '{"test":"2020-01-01T00:00:00.001Z"}'
    assert res.object.json ==     {
            'test': dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
        }

def test_request_bodies_request_body_post_json_data_types_map_decimal():
    record_test('request-bodies-post-json-data-types-map-decimal')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_map_decimal(request={
        'test': Decimal('3.141592653589793'),
    })
    assert res is not None
    assert res.status_code == 200
    assert res.object == operations.RequestBodyPostJSONDataTypesMapDecimalResponseBody(
            data='{"test":3.141592653589793}',
            json={
                'test': Decimal('3.141592653589793'),
            },
        )

def test_request_bodies_request_body_post_json_data_types_number():
    record_test('request-bodies-post-json-data-types-number')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_number(request=1.1)
    assert res is not None
    assert res.status_code == 200
    assert res.object == operations.RequestBodyPostJSONDataTypesNumberResponseBody(
            json=1.1,
        )

def test_request_bodies_request_body_post_json_data_types_string():
    record_test('request-bodies-post-json-data-types-string')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_string(request='test')
    assert res is not None
    assert res.status_code == 200
    assert res.object == operations.RequestBodyPostJSONDataTypesStringResponseBody(
            json='test',
        )

def test_request_bodies_request_body_post_multiple_content_types_component_filtered():
    record_test('request-bodies-post-multiple-content-types-component-filtered')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_multiple_content_types_component_filtered(request=shared.SimpleObject(
        any='any',
        bigint=8821239038968084,
        bigint_str=9223372036854775808,
        bool=True,
        bool_opt=True,
        date_=dateutil.parser.parse('2020-01-01').date(),
        date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
        decimal=Decimal('3.141592653589793'),
        decimal_str=Decimal('3.14159265358979344719667586'),
        enum=shared.EnumT.ONE,
        float32=1.1,
        float64_str=1.1,
        int=1,
        int32=1,
        int32_enum=shared.Int32Enum.FIFTY_FIVE,
        int64_str=100,
        int_enum=shared.IntEnum.SECOND,
        num=1.1,
        str_='test',
        str_opt='testOptional',
    ))
    assert res is not None
    assert res.status_code == 200
    assert res.res == operations.RequestBodyPostMultipleContentTypesComponentFilteredRes(
            json=shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
        )

def test_request_bodies_request_body_post_multiple_content_types_inline_filtered():
    record_test('request-bodies-post-multiple-content-types-inline-filtered')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_multiple_content_types_inline_filtered(request=operations.RequestBodyPostMultipleContentTypesInlineFilteredRequestBody(
        bool=True,
        num=1.1,
        str_='test',
    ))
    assert res is not None
    assert res.status_code == 200
    assert res.res == operations.RequestBodyPostMultipleContentTypesInlineFilteredRes(
            json={
                'bool': True,
                'num': 1.1,
                'str': 'test',
            },
        )

def test_request_bodies_request_body_post_not_nullable_not_required_string_body():
    record_test('request-bodies-post-not-nullable-not-required-string-body')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_not_nullable_not_required_string_body(request=None)
    assert res is not None
    assert res.status_code == 200
    assert res.object == operations.RequestBodyPostNotNullableNotRequiredStringBodyResponseBody(
            data='',
        )

def test_request_bodies_request_body_post_null_array():
    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_null_array(request=[
        'value1',
        'value2',
        'value3',
    ])
    assert res is not None
    assert res.status_code == 200
    assert res.object == operations.RequestBodyPostNullArrayResponseBody(
            data='["value1","value2","value3"]',
        )

def test_request_bodies_request_body_post_null_dictionary():
    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_null_dictionary(request={
        'key1': 'value1',
        'key2': 'value2',
        'key3': 'value3',
    })
    assert res is not None
    assert res.status_code == 200
    assert res.object == operations.RequestBodyPostNullDictionaryResponseBody(
            data='{"key1":"value1","key2":"value2","key3":"value3"}',
        )

def test_request_bodies_request_body_post_nullable_not_required_string_body():
    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_nullable_not_required_string_body(request=None)
    assert res is not None
    assert res.status_code == 200
    assert res.object == operations.RequestBodyPostNullableNotRequiredStringBodyResponseBody(
            data='null',
        )

def test_request_bodies_request_body_post_nullable_required_string_body():
    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_nullable_required_string_body(request=None)
    assert res is not None
    assert res.status_code == 200
    assert res.object == operations.RequestBodyPostNullableRequiredStringBodyResponseBody(
            data='null',
        )

def test_request_bodies_request_body_put_multipart_deep():
    record_test('request-bodies-put-multipart-deep')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_put_multipart_deep(request=shared.DeepObject(
        any=shared.SimpleObject(
            any='any',
            bigint=8821239038968084,
            bigint_str=9223372036854775808,
            bool=True,
            bool_opt=True,
            date_=dateutil.parser.parse('2020-01-01').date(),
            date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
            decimal=Decimal('3.141592653589793'),
            decimal_str=Decimal('3.14159265358979344719667586'),
            enum=shared.EnumT.ONE,
            float32=1.1,
            float64_str=1.1,
            int=1,
            int32=1,
            int32_enum=shared.Int32Enum.FIFTY_FIVE,
            int64_str=100,
            int_enum=shared.IntEnum.SECOND,
            num=1.1,
            str_='test',
            str_opt='testOptional',
        ),
        arr=[
            shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
            shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
        ],
        bool=True,
        int=1,
        map={
            'key': shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
            'key2': shared.SimpleObject(
                any='any',
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool=True,
                bool_opt=True,
                date_=dateutil.parser.parse('2020-01-01').date(),
                date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
                decimal=Decimal('3.141592653589793'),
                decimal_str=Decimal('3.14159265358979344719667586'),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_='test',
                str_opt='testOptional',
            ),
        },
        num=1.1,
        obj=shared.SimpleObject(
            any='any',
            bigint=8821239038968084,
            bigint_str=9223372036854775808,
            bool=True,
            bool_opt=True,
            date_=dateutil.parser.parse('2020-01-01').date(),
            date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
            decimal=Decimal('3.141592653589793'),
            decimal_str=Decimal('3.14159265358979344719667586'),
            enum=shared.EnumT.ONE,
            float32=1.1,
            float64_str=1.1,
            int=1,
            int32=1,
            int32_enum=shared.Int32Enum.FIFTY_FIVE,
            int64_str=100,
            int_enum=shared.IntEnum.SECOND,
            num=1.1,
            str_='test',
            str_opt='testOptional',
        ),
        str_='test',
    ))
    assert res is not None
    assert res.status_code == 200
    assert sanitize_timestamp(res.res.form.arr) == '[{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"},{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"}]'
    assert res.res.form.bool == 'true'
    assert res.res.form.int == '1'
    assert sanitize_timestamp(res.res.form.map) == '{"key":{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"},"key2":{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"}}'
    assert res.res.form.num == '1.1'
    assert sanitize_timestamp(res.res.form.obj) == '{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"}'
    assert res.res.form.str_ == 'test'

def test_request_bodies_request_body_put_multipart_simple():
    record_test('request-bodies-put-multipart-simple')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_put_multipart_simple(request=shared.SimpleObject(
        any='any',
        bigint=8821239038968084,
        bigint_str=9223372036854775808,
        bool=True,
        bool_opt=True,
        date_=dateutil.parser.parse('2020-01-01').date(),
        date_time=dateutil.parser.isoparse('2020-01-01T00:00:00.001Z'),
        decimal=Decimal('3.141592653589793'),
        decimal_str=Decimal('3.14159265358979344719667586'),
        enum=shared.EnumT.ONE,
        float32=1.1,
        float64_str=1.1,
        int=1,
        int32=1,
        int32_enum=shared.Int32Enum.FIFTY_FIVE,
        int64_str=100,
        int_enum=shared.IntEnum.SECOND,
        num=1.1,
        str_='test',
        str_opt='testOptional',
    ))
    assert res is not None
    assert res.status_code == 200
    assert res.res.form.any == 'any'
    assert res.res.form.bigint == '8821239038968084'
    assert res.res.form.bigint_str == '9223372036854775808'
    assert res.res.form.bool == 'true'
    assert res.res.form.bool_opt == 'true'
    assert res.res.form.date_ == '2020-01-01'
    assert sanitize_timestamp(res.res.form.date_time) == '2020-01-01T00:00:00.001Z'
    assert res.res.form.decimal == '3.141592653589793'
    assert res.res.form.decimal_str == '3.14159265358979344719667586'
    assert res.res.form.enum == 'one'
    assert res.res.form.float32 == '1.1'
    assert res.res.form.int == '1'
    assert res.res.form.int32 == '1'
    assert res.res.form.int32_enum == '55'
    assert res.res.form.int_enum == '2'
    assert res.res.form.int_opt_null is None
    assert res.res.form.num == '1.1'
    assert res.res.form.num_opt_null is None
    assert res.res.form.str_ == 'test'
    assert res.res.form.str_opt == 'testOptional'

def test_request_bodies_request_body_put_string():
    record_test('request-bodies-put-string')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_put_string(request='Hello World')
    assert res is not None
    assert res.status_code == 200
    assert res.res == operations.RequestBodyPutStringRes(
            data='Hello World',
        )

def test_request_bodies_request_body_put_string_with_params():
    record_test('request-bodies-put-string-with-params')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_put_string_with_params(request_body='Hello world', query_string_param='test param')
    assert res is not None
    assert res.status_code == 200
    assert res.res == operations.RequestBodyPutStringWithParamsRes(
            args=operations.RequestBodyPutStringWithParamsArgs(
                query_string_param='test param',
            ),
            data='Hello world',
        )

def test_request_bodies_request_body_read_and_write():
    record_test('request-bodies-read-and-write')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_read_and_write(request=shared.ReadWriteObject(
        num1=1,
        num2=2,
        num3=4,
    ))
    assert res is not None
    assert res.status_code == 200
    assert res.read_write_object == shared.ReadWriteObjectOutput(
            num3=4,
            sum=7,
        )

def test_request_bodies_request_body_read_only_input():
    record_test('request-bodies-read-only-input')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_read_only_input(request=shared.ReadOnlyObjectInput())
    assert res is not None
    assert res.status_code == 200
    assert res.read_only_object == shared.ReadOnlyObject(
            bool=True,
            num=1,
            string='hello',
        )

def test_request_bodies_request_body_read_only_union():
    record_test('request-bodies-read-only-union')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_read_only_union(request=shared.ReadOnlyObjectInput())
    assert res is not None
    assert res.status_code == 200
    assert res.weakly_typed_one_of_read_only_object ==     shared.ReadOnlyObject(
            bool=True,
            num=1,
            string='hello',
        )

def test_request_bodies_request_body_read_write_only_union():
    record_test('request-bodies-read-write-only-union')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_read_write_only_union(request=shared.ReadWriteObject(
        num1=1,
        num2=2,
        num3=4,
    ))
    assert res is not None
    assert res.status_code == 200
    assert res.weakly_typed_one_of_read_write_object ==     shared.ReadWriteObjectOutput(
            num3=4,
            sum=7,
        )

def test_request_bodies_request_body_write_only():
    record_test('request-bodies-write-only')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_write_only(request=shared.WriteOnlyObject(
        bool=True,
        num=1,
        string='hello',
    ))
    assert res is not None
    assert res.status_code == 200
    assert res.read_only_object == shared.ReadOnlyObject(
            bool=True,
            num=1,
            string='hello',
        )

def test_request_bodies_request_body_write_only_output():
    record_test('request-bodies-write-only-output')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_write_only_output(request=shared.WriteOnlyObject(
        bool=True,
        num=1,
        string='hello',
    ))
    assert res is not None
    assert res.status_code == 200
    assert res.write_only_object == shared.WriteOnlyObjectOutput()

def test_request_bodies_request_body_write_only_union_write_only_object():
    record_test('request-bodies-write-only-union')

    s = sdk.SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_write_only_union(request=shared.WriteOnlyObject(
        bool=True,
        num=1,
        string='hello',
    ))
    assert res is not None
    assert res.status_code == 200
    assert res.weakly_typed_one_of_write_only_object ==     shared.WriteOnlyObjectOutput()
