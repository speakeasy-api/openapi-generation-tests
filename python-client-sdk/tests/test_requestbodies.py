"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .common_helpers import *
from .helpers import *
import dateutil.parser
from decimal import Decimal
from openapi import SDK
from openapi.models import operations, shared


def test_request_bodies_nullable_object_post():
    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.nullable_object_post(request=None)
    assert res is not None
    assert res is not None
    assert res == operations.NullableObjectPostRes(
            json_=None,
        )

def test_request_bodies_nullable_required_empty_object_post_nullable_set():
    record_test("request-bodies-post-nullable-required-empty-object-nullable-set")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.nullable_required_empty_object_post(request={
        "nullable_optional_obj": None,
        "nullable_required_obj": None,
        "required_obj": {},
    })
    assert res is not None
    assert res is not None
    assert res.json_ is not None
    assert res.json_ == operations.NullableRequiredEmptyObjectPostJSON(
            nullable_optional_obj=None,
            nullable_required_obj=None,
            required_obj=operations.NullableRequiredEmptyObjectPostRequiredObj(),
        )

def test_request_bodies_nullable_required_empty_object_post_optional_set():
    record_test("request-bodies-post-nullable-required-empty-object-optional-set")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.nullable_required_empty_object_post(request={
        "nullable_optional_obj": {},
        "nullable_required_obj": None,
        "required_obj": {},
    })
    assert res is not None
    assert res is not None
    assert res.json_ is not None
    assert res.json_ == operations.NullableRequiredEmptyObjectPostJSON(
            nullable_optional_obj=operations.NullableRequiredEmptyObjectPostNullableOptionalObj(),
            nullable_required_obj=None,
            required_obj=operations.NullableRequiredEmptyObjectPostRequiredObj(),
        )

def test_request_bodies_nullable_required_empty_object_post_all_set():
    record_test("request-bodies-post-nullable-required-empty-object-all-set")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.nullable_required_empty_object_post(request={
        "nullable_optional_obj": {},
        "nullable_required_obj": {},
        "required_obj": {},
    })
    assert res is not None
    assert res is not None
    assert res.json_ is not None
    assert res.json_ == operations.NullableRequiredEmptyObjectPostJSON(
            nullable_optional_obj=operations.NullableRequiredEmptyObjectPostNullableOptionalObj(),
            nullable_required_obj=operations.NullableRequiredEmptyObjectPostNullableRequiredObj(),
            required_obj=operations.NullableRequiredEmptyObjectPostRequiredObj(),
        )

def test_request_bodies_nullable_required_property_post_all_set():
    record_test("request-bodies-post-nullable-required-property-all-set")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.nullable_required_property_post(request={
        "nullable_optional_int": 0,
        "nullable_required_array": [
            1.1,
            2.2,
            3.3,
        ],
        "nullable_required_big_int_str": 9223372036854775807,
        "nullable_required_date_time": dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
        "nullable_required_decimal_str": Decimal("3.141592653589793238462643383279"),
        "nullable_required_enum": operations.NullableRequiredEnum.SECOND,
        "nullable_required_int": 1,
    })
    assert res is not None
    assert res is not None
    assert res.json_ is not None
    assert res.json_ == operations.NullableRequiredPropertyPostJSON(
            nullable_optional_int=0,
            nullable_required_array=[
                1.1,
                2.2,
                3.3,
            ],
            nullable_required_big_int_str=9223372036854775807,
            nullable_required_date_time=dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
            nullable_required_decimal_str=Decimal("3.141592653589793238462643383279"),
            nullable_required_enum=operations.NullableRequiredPropertyPostNullableRequiredEnum.SECOND,
            nullable_required_int=1,
        )

def test_request_bodies_nullable_required_property_post_all_null():
    record_test("request-bodies-post-nullable-required-property-all-null")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.nullable_required_property_post(request={
        "nullable_optional_int": None,
        "nullable_required_array": None,
        "nullable_required_big_int_str": None,
        "nullable_required_date_time": None,
        "nullable_required_decimal_str": None,
        "nullable_required_enum": None,
        "nullable_required_int": None,
    })
    assert res is not None
    assert res is not None
    assert res.json_ is not None
    assert res.json_ == operations.NullableRequiredPropertyPostJSON(
            nullable_optional_int=None,
            nullable_required_array=None,
            nullable_required_big_int_str=None,
            nullable_required_date_time=None,
            nullable_required_decimal_str=None,
            nullable_required_enum=None,
            nullable_required_int=None,
        )

def test_request_bodies_request_body_post_application_json_array():
    record_test("request-bodies-post-application-json-array")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_array(request=[
        {
            "any": "any",
            "bigint": 8821239038968084,
            "bigint_str": 9223372036854775808,
            "bool_": True,
            "bool_opt": True,
            "date": dateutil.parser.parse("2020-01-01").date(),
            "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
            "decimal": Decimal("3.141592653589793"),
            "decimal_str": Decimal("3.14159265358979344719667586"),
            "enum": shared.EnumT.ONE,
            "float32": 1.1,
            "float64_str": 1.1,
            "int_": 1,
            "int32": 1,
            "int32_enum": shared.Int32Enum.FIFTY_FIVE,
            "int64_str": 100,
            "int_enum": shared.IntEnum.SECOND,
            "num": 1.1,
            "str_": "test",
            "str_opt": "testOptional",
        },
    ])
    assert res is not None
    assert res is not None
    assert res == [
            shared.SimpleObject(
                any="any",
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool_=True,
                bool_opt=True,
                date=dateutil.parser.parse("2020-01-01").date(),
                date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                decimal=Decimal("3.141592653589793"),
                decimal_str=Decimal("3.14159265358979344719667586"),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int_=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_="test",
                str_opt="testOptional",
            ),
        ]

def test_request_bodies_request_body_post_application_json_array_camel_case():
    record_test("request-bodies-post-application-json-array-camel-case")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_array_camel_case(request=[
        {
            "any_val": "any example",
            "bool_opt_val": True,
            "bool_val": True,
            "date_time_val": dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
            "date_val": dateutil.parser.parse("2020-01-01").date(),
            "enum_val": shared.EnumT.ONE,
            "float32_val": 2.2222222,
            "int32_enum_val": shared.Int32EnumVal.SIXTY_NINE,
            "int32_val": 1,
            "int_enum_val": shared.IntEnumVal.THIRD,
            "int_opt_null_val": 999999,
            "int_val": 999999,
            "num_opt_null_val": 1.1,
            "num_val": 1.1,
            "str_opt_val": "optional example",
            "str_val": "example",
        },
    ])
    assert res is not None
    assert res is not None
    assert res == [
            shared.SimpleObjectCamelCase(
                any_val="any example",
                bool_opt_val=True,
                bool_val=True,
                date_time_val=dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                date_val=dateutil.parser.parse("2020-01-01").date(),
                enum_val=shared.EnumT.ONE,
                float32_val=2.2222222,
                int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                int32_val=1,
                int_enum_val=shared.IntEnumVal.THIRD,
                int_opt_null_val=999999,
                int_val=999999,
                num_opt_null_val=1.1,
                num_val=1.1,
                str_opt_val="optional example",
                str_val="example",
            ),
        ]

def test_request_bodies_request_body_post_application_json_array_obj():
    record_test("request-bodies-post-application-json-array-object")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_array_obj(request=[
        {
            "any": "any",
            "bigint": 8821239038968084,
            "bigint_str": 9223372036854775808,
            "bool_": True,
            "bool_opt": True,
            "date": dateutil.parser.parse("2020-01-01").date(),
            "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
            "decimal": Decimal("3.141592653589793"),
            "decimal_str": Decimal("3.14159265358979344719667586"),
            "enum": shared.EnumT.ONE,
            "float32": 1.1,
            "float64_str": 1.1,
            "int_": 1,
            "int32": 1,
            "int32_enum": shared.Int32Enum.FIFTY_FIVE,
            "int64_str": 100,
            "int_enum": shared.IntEnum.SECOND,
            "num": 1.1,
            "str_": "test",
            "str_opt": "testOptional",
        },
        {
            "any": "any",
            "bigint": 8821239038968084,
            "bigint_str": 9223372036854775808,
            "bool_": True,
            "bool_opt": True,
            "date": dateutil.parser.parse("2020-01-01").date(),
            "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
            "decimal": Decimal("3.141592653589793"),
            "decimal_str": Decimal("3.14159265358979344719667586"),
            "enum": shared.EnumT.ONE,
            "float32": 1.1,
            "float64_str": 1.1,
            "int_": 1,
            "int32": 1,
            "int32_enum": shared.Int32Enum.FIFTY_FIVE,
            "int64_str": 100,
            "int_enum": shared.IntEnum.SECOND,
            "num": 1.1,
            "str_": "test",
            "str_opt": "testOptional",
        },
    ])
    assert res is not None
    assert res is not None
    assert res == shared.ArrObjValue(
            json_=[
                shared.SimpleObject(
                    any="any",
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool_=True,
                    bool_opt=True,
                    date=dateutil.parser.parse("2020-01-01").date(),
                    date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                    decimal=Decimal("3.141592653589793"),
                    decimal_str=Decimal("3.14159265358979344719667586"),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int_=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_="test",
                    str_opt="testOptional",
                ),
                shared.SimpleObject(
                    any="any",
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool_=True,
                    bool_opt=True,
                    date=dateutil.parser.parse("2020-01-01").date(),
                    date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                    decimal=Decimal("3.141592653589793"),
                    decimal_str=Decimal("3.14159265358979344719667586"),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int_=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_="test",
                    str_opt="testOptional",
                ),
            ],
        )

def test_request_bodies_request_body_post_application_json_array_obj_camel_case():
    record_test("request-bodies-post-application-json-array-object-camel-case")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_array_obj_camel_case(request=[
        {
            "any_val": "any example",
            "bool_opt_val": True,
            "bool_val": True,
            "date_time_val": dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
            "date_val": dateutil.parser.parse("2020-01-01").date(),
            "enum_val": shared.EnumT.ONE,
            "float32_val": 2.2222222,
            "int32_enum_val": shared.Int32EnumVal.SIXTY_NINE,
            "int32_val": 1,
            "int_enum_val": shared.IntEnumVal.THIRD,
            "int_opt_null_val": 999999,
            "int_val": 999999,
            "num_opt_null_val": 1.1,
            "num_val": 1.1,
            "str_opt_val": "optional example",
            "str_val": "example",
        },
        {
            "any_val": "any example",
            "bool_opt_val": True,
            "bool_val": True,
            "date_time_val": dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
            "date_val": dateutil.parser.parse("2020-01-01").date(),
            "enum_val": shared.EnumT.ONE,
            "float32_val": 2.2222222,
            "int32_enum_val": shared.Int32EnumVal.SIXTY_NINE,
            "int32_val": 1,
            "int_enum_val": shared.IntEnumVal.THIRD,
            "int_opt_null_val": 999999,
            "int_val": 999999,
            "num_opt_null_val": 1.1,
            "num_val": 1.1,
            "str_opt_val": "optional example",
            "str_val": "example",
        },
    ])
    assert res is not None
    assert res is not None
    assert res == shared.ArrObjValueCamelCase(
            json_=[
                shared.SimpleObjectCamelCase(
                    any_val="any example",
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                    date_val=dateutil.parser.parse("2020-01-01").date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val="optional example",
                    str_val="example",
                ),
                shared.SimpleObjectCamelCase(
                    any_val="any example",
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                    date_val=dateutil.parser.parse("2020-01-01").date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val="optional example",
                    str_val="example",
                ),
            ],
        )

def test_request_bodies_request_body_post_application_json_array_of_array():
    record_test("request-bodies-post-application-json-array-of-array")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_array_of_array(request=[
        [
            {
                "any": "any",
                "bigint": 8821239038968084,
                "bigint_str": 9223372036854775808,
                "bool_": True,
                "bool_opt": True,
                "date": dateutil.parser.parse("2020-01-01").date(),
                "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                "decimal": Decimal("3.141592653589793"),
                "decimal_str": Decimal("3.14159265358979344719667586"),
                "enum": shared.EnumT.ONE,
                "float32": 1.1,
                "float64_str": 1.1,
                "int_": 1,
                "int32": 1,
                "int32_enum": shared.Int32Enum.FIFTY_FIVE,
                "int64_str": 100,
                "int_enum": shared.IntEnum.SECOND,
                "num": 1.1,
                "str_": "test",
                "str_opt": "testOptional",
            },
        ],
    ])
    assert res is not None
    assert res is not None
    assert res == [
            [
                shared.SimpleObject(
                    any="any",
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool_=True,
                    bool_opt=True,
                    date=dateutil.parser.parse("2020-01-01").date(),
                    date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                    decimal=Decimal("3.141592653589793"),
                    decimal_str=Decimal("3.14159265358979344719667586"),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int_=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_="test",
                    str_opt="testOptional",
                ),
            ],
        ]

def test_request_bodies_request_body_post_application_json_array_of_array_camel_case():
    record_test("request-bodies-post-application-json-array-of-array-camel-case")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_array_of_array_camel_case(request=[
        [
            {
                "any_val": "any example",
                "bool_opt_val": True,
                "bool_val": True,
                "date_time_val": dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                "date_val": dateutil.parser.parse("2020-01-01").date(),
                "enum_val": shared.EnumT.ONE,
                "float32_val": 2.2222222,
                "int32_enum_val": shared.Int32EnumVal.SIXTY_NINE,
                "int32_val": 1,
                "int_enum_val": shared.IntEnumVal.THIRD,
                "int_opt_null_val": 999999,
                "int_val": 999999,
                "num_opt_null_val": 1.1,
                "num_val": 1.1,
                "str_opt_val": "optional example",
                "str_val": "example",
            },
        ],
    ])
    assert res is not None
    assert res is not None
    assert res == [
            [
                shared.SimpleObjectCamelCase(
                    any_val="any example",
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                    date_val=dateutil.parser.parse("2020-01-01").date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val="optional example",
                    str_val="example",
                ),
            ],
        ]

def test_request_bodies_request_body_post_application_json_array_of_array_of_primitive():
    record_test("request-bodies-post-application-json-array-of-array-of-primitive")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_array_of_array_of_primitive(request=[
        [
            "foo",
            "bar",
        ],
        [
            "buzz",
            "bazz",
        ],
    ])
    assert res is not None
    assert res is not None
    assert res == [
            [
                "foo",
                "bar",
            ],
            [
                "buzz",
                "bazz",
            ],
        ]

def test_request_bodies_request_body_post_application_json_array_of_map():
    record_test("request-bodies-post-application-json-array-of-map")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_array_of_map(request=[
        {
            "mapElem1": {
                "any": "any",
                "bigint": 8821239038968084,
                "bigint_str": 9223372036854775808,
                "bool_": True,
                "bool_opt": True,
                "date": dateutil.parser.parse("2020-01-01").date(),
                "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                "decimal": Decimal("3.141592653589793"),
                "decimal_str": Decimal("3.14159265358979344719667586"),
                "enum": shared.EnumT.ONE,
                "float32": 1.1,
                "float64_str": 1.1,
                "int_": 1,
                "int32": 1,
                "int32_enum": shared.Int32Enum.FIFTY_FIVE,
                "int64_str": 100,
                "int_enum": shared.IntEnum.SECOND,
                "num": 1.1,
                "str_": "test",
                "str_opt": "testOptional",
            },
            "mapElem2": {
                "any": "any",
                "bigint": 8821239038968084,
                "bigint_str": 9223372036854775808,
                "bool_": True,
                "bool_opt": True,
                "date": dateutil.parser.parse("2020-01-01").date(),
                "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                "decimal": Decimal("3.141592653589793"),
                "decimal_str": Decimal("3.14159265358979344719667586"),
                "enum": shared.EnumT.ONE,
                "float32": 1.1,
                "float64_str": 1.1,
                "int_": 1,
                "int32": 1,
                "int32_enum": shared.Int32Enum.FIFTY_FIVE,
                "int64_str": 100,
                "int_enum": shared.IntEnum.SECOND,
                "num": 1.1,
                "str_": "test",
                "str_opt": "testOptional",
            },
        },
        {
            "mapElem1": {
                "any": "any",
                "bigint": 8821239038968084,
                "bigint_str": 9223372036854775808,
                "bool_": True,
                "bool_opt": True,
                "date": dateutil.parser.parse("2020-01-01").date(),
                "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                "decimal": Decimal("3.141592653589793"),
                "decimal_str": Decimal("3.14159265358979344719667586"),
                "enum": shared.EnumT.ONE,
                "float32": 1.1,
                "float64_str": 1.1,
                "int_": 1,
                "int32": 1,
                "int32_enum": shared.Int32Enum.FIFTY_FIVE,
                "int64_str": 100,
                "int_enum": shared.IntEnum.SECOND,
                "num": 1.1,
                "str_": "test",
                "str_opt": "testOptional",
            },
            "mapElem2": {
                "any": "any",
                "bigint": 8821239038968084,
                "bigint_str": 9223372036854775808,
                "bool_": True,
                "bool_opt": True,
                "date": dateutil.parser.parse("2020-01-01").date(),
                "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                "decimal": Decimal("3.141592653589793"),
                "decimal_str": Decimal("3.14159265358979344719667586"),
                "enum": shared.EnumT.ONE,
                "float32": 1.1,
                "float64_str": 1.1,
                "int_": 1,
                "int32": 1,
                "int32_enum": shared.Int32Enum.FIFTY_FIVE,
                "int64_str": 100,
                "int_enum": shared.IntEnum.SECOND,
                "num": 1.1,
                "str_": "test",
                "str_opt": "testOptional",
            },
        },
    ])
    assert res is not None
    assert res is not None
    assert res == [
            {
                "mapElem1": shared.SimpleObject(
                    any="any",
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool_=True,
                    bool_opt=True,
                    date=dateutil.parser.parse("2020-01-01").date(),
                    date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                    decimal=Decimal("3.141592653589793"),
                    decimal_str=Decimal("3.14159265358979344719667586"),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int_=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_="test",
                    str_opt="testOptional",
                ),
                "mapElem2": shared.SimpleObject(
                    any="any",
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool_=True,
                    bool_opt=True,
                    date=dateutil.parser.parse("2020-01-01").date(),
                    date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                    decimal=Decimal("3.141592653589793"),
                    decimal_str=Decimal("3.14159265358979344719667586"),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int_=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_="test",
                    str_opt="testOptional",
                ),
            },
            {
                "mapElem1": shared.SimpleObject(
                    any="any",
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool_=True,
                    bool_opt=True,
                    date=dateutil.parser.parse("2020-01-01").date(),
                    date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                    decimal=Decimal("3.141592653589793"),
                    decimal_str=Decimal("3.14159265358979344719667586"),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int_=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_="test",
                    str_opt="testOptional",
                ),
                "mapElem2": shared.SimpleObject(
                    any="any",
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool_=True,
                    bool_opt=True,
                    date=dateutil.parser.parse("2020-01-01").date(),
                    date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                    decimal=Decimal("3.141592653589793"),
                    decimal_str=Decimal("3.14159265358979344719667586"),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int_=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_="test",
                    str_opt="testOptional",
                ),
            },
        ]

def test_request_bodies_request_body_post_application_json_array_of_map_camel_case():
    record_test("request-bodies-post-application-json-array-of-map-camel-case")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_array_of_map_camel_case(request=[
        {
            "mapElem1": {
                "any_val": "any example",
                "bool_opt_val": True,
                "bool_val": True,
                "date_time_val": dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                "date_val": dateutil.parser.parse("2020-01-01").date(),
                "enum_val": shared.EnumT.ONE,
                "float32_val": 2.2222222,
                "int32_enum_val": shared.Int32EnumVal.SIXTY_NINE,
                "int32_val": 1,
                "int_enum_val": shared.IntEnumVal.THIRD,
                "int_opt_null_val": 999999,
                "int_val": 999999,
                "num_opt_null_val": 1.1,
                "num_val": 1.1,
                "str_opt_val": "optional example",
                "str_val": "example",
            },
            "mapElem2": {
                "any_val": "any example",
                "bool_opt_val": True,
                "bool_val": True,
                "date_time_val": dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                "date_val": dateutil.parser.parse("2020-01-01").date(),
                "enum_val": shared.EnumT.ONE,
                "float32_val": 2.2222222,
                "int32_enum_val": shared.Int32EnumVal.SIXTY_NINE,
                "int32_val": 1,
                "int_enum_val": shared.IntEnumVal.THIRD,
                "int_opt_null_val": 999999,
                "int_val": 999999,
                "num_opt_null_val": 1.1,
                "num_val": 1.1,
                "str_opt_val": "optional example",
                "str_val": "example",
            },
        },
        {
            "mapElem1": {
                "any_val": "any example",
                "bool_opt_val": True,
                "bool_val": True,
                "date_time_val": dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                "date_val": dateutil.parser.parse("2020-01-01").date(),
                "enum_val": shared.EnumT.ONE,
                "float32_val": 2.2222222,
                "int32_enum_val": shared.Int32EnumVal.SIXTY_NINE,
                "int32_val": 1,
                "int_enum_val": shared.IntEnumVal.THIRD,
                "int_opt_null_val": 999999,
                "int_val": 999999,
                "num_opt_null_val": 1.1,
                "num_val": 1.1,
                "str_opt_val": "optional example",
                "str_val": "example",
            },
            "mapElem2": {
                "any_val": "any example",
                "bool_opt_val": True,
                "bool_val": True,
                "date_time_val": dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                "date_val": dateutil.parser.parse("2020-01-01").date(),
                "enum_val": shared.EnumT.ONE,
                "float32_val": 2.2222222,
                "int32_enum_val": shared.Int32EnumVal.SIXTY_NINE,
                "int32_val": 1,
                "int_enum_val": shared.IntEnumVal.THIRD,
                "int_opt_null_val": 999999,
                "int_val": 999999,
                "num_opt_null_val": 1.1,
                "num_val": 1.1,
                "str_opt_val": "optional example",
                "str_val": "example",
            },
        },
    ])
    assert res is not None
    assert res is not None
    assert res == [
            {
                "mapElem1": shared.SimpleObjectCamelCase(
                    any_val="any example",
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                    date_val=dateutil.parser.parse("2020-01-01").date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val="optional example",
                    str_val="example",
                ),
                "mapElem2": shared.SimpleObjectCamelCase(
                    any_val="any example",
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                    date_val=dateutil.parser.parse("2020-01-01").date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val="optional example",
                    str_val="example",
                ),
            },
            {
                "mapElem1": shared.SimpleObjectCamelCase(
                    any_val="any example",
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                    date_val=dateutil.parser.parse("2020-01-01").date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val="optional example",
                    str_val="example",
                ),
                "mapElem2": shared.SimpleObjectCamelCase(
                    any_val="any example",
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                    date_val=dateutil.parser.parse("2020-01-01").date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val="optional example",
                    str_val="example",
                ),
            },
        ]

def test_request_bodies_request_body_post_application_json_array_of_primitive():
    record_test("request-bodies-post-application-json-array-of-primitive")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_array_of_primitive(request=[
        "hello",
        "world",
    ])
    assert res is not None
    assert res is not None
    assert res == [
            "hello",
            "world",
        ]

def test_request_bodies_request_body_post_application_json_deep():
    record_test("request-bodies-post-application-json-deep")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_deep(request={
        "any": {
            "any": "any",
            "bigint": 8821239038968084,
            "bigint_str": 9223372036854775808,
            "bool_": True,
            "bool_opt": True,
            "date": dateutil.parser.parse("2020-01-01").date(),
            "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
            "decimal": Decimal("3.141592653589793"),
            "decimal_str": Decimal("3.14159265358979344719667586"),
            "enum": shared.EnumT.ONE,
            "float32": 1.1,
            "float64_str": 1.1,
            "int_": 1,
            "int32": 1,
            "int32_enum": shared.Int32Enum.FIFTY_FIVE,
            "int64_str": 100,
            "int_enum": shared.IntEnum.SECOND,
            "num": 1.1,
            "str_": "test",
            "str_opt": "testOptional",
        },
        "arr": [
            {
                "any": "any",
                "bigint": 8821239038968084,
                "bigint_str": 9223372036854775808,
                "bool_": True,
                "bool_opt": True,
                "date": dateutil.parser.parse("2020-01-01").date(),
                "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                "decimal": Decimal("3.141592653589793"),
                "decimal_str": Decimal("3.14159265358979344719667586"),
                "enum": shared.EnumT.ONE,
                "float32": 1.1,
                "float64_str": 1.1,
                "int_": 1,
                "int32": 1,
                "int32_enum": shared.Int32Enum.FIFTY_FIVE,
                "int64_str": 100,
                "int_enum": shared.IntEnum.SECOND,
                "num": 1.1,
                "str_": "test",
                "str_opt": "testOptional",
            },
            {
                "any": "any",
                "bigint": 8821239038968084,
                "bigint_str": 9223372036854775808,
                "bool_": True,
                "bool_opt": True,
                "date": dateutil.parser.parse("2020-01-01").date(),
                "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                "decimal": Decimal("3.141592653589793"),
                "decimal_str": Decimal("3.14159265358979344719667586"),
                "enum": shared.EnumT.ONE,
                "float32": 1.1,
                "float64_str": 1.1,
                "int_": 1,
                "int32": 1,
                "int32_enum": shared.Int32Enum.FIFTY_FIVE,
                "int64_str": 100,
                "int_enum": shared.IntEnum.SECOND,
                "num": 1.1,
                "str_": "test",
                "str_opt": "testOptional",
            },
        ],
        "bool_": True,
        "int_": 1,
        "map": {
            "key": {
                "any": "any",
                "bigint": 8821239038968084,
                "bigint_str": 9223372036854775808,
                "bool_": True,
                "bool_opt": True,
                "date": dateutil.parser.parse("2020-01-01").date(),
                "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                "decimal": Decimal("3.141592653589793"),
                "decimal_str": Decimal("3.14159265358979344719667586"),
                "enum": shared.EnumT.ONE,
                "float32": 1.1,
                "float64_str": 1.1,
                "int_": 1,
                "int32": 1,
                "int32_enum": shared.Int32Enum.FIFTY_FIVE,
                "int64_str": 100,
                "int_enum": shared.IntEnum.SECOND,
                "num": 1.1,
                "str_": "test",
                "str_opt": "testOptional",
            },
            "key2": {
                "any": "any",
                "bigint": 8821239038968084,
                "bigint_str": 9223372036854775808,
                "bool_": True,
                "bool_opt": True,
                "date": dateutil.parser.parse("2020-01-01").date(),
                "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                "decimal": Decimal("3.141592653589793"),
                "decimal_str": Decimal("3.14159265358979344719667586"),
                "enum": shared.EnumT.ONE,
                "float32": 1.1,
                "float64_str": 1.1,
                "int_": 1,
                "int32": 1,
                "int32_enum": shared.Int32Enum.FIFTY_FIVE,
                "int64_str": 100,
                "int_enum": shared.IntEnum.SECOND,
                "num": 1.1,
                "str_": "test",
                "str_opt": "testOptional",
            },
        },
        "num": 1.1,
        "obj": {
            "any": "any",
            "bigint": 8821239038968084,
            "bigint_str": 9223372036854775808,
            "bool_": True,
            "bool_opt": True,
            "date": dateutil.parser.parse("2020-01-01").date(),
            "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
            "decimal": Decimal("3.141592653589793"),
            "decimal_str": Decimal("3.14159265358979344719667586"),
            "enum": shared.EnumT.ONE,
            "float32": 1.1,
            "float64_str": 1.1,
            "int_": 1,
            "int32": 1,
            "int32_enum": shared.Int32Enum.FIFTY_FIVE,
            "int64_str": 100,
            "int_enum": shared.IntEnum.SECOND,
            "num": 1.1,
            "str_": "test",
            "str_opt": "testOptional",
        },
        "str_": "test",
    })
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostApplicationJSONDeepRes(
            json_=shared.DeepObject(
                any=shared.SimpleObject(
                    any="any",
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool_=True,
                    bool_opt=True,
                    date=dateutil.parser.parse("2020-01-01").date(),
                    date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                    decimal=Decimal("3.141592653589793"),
                    decimal_str=Decimal("3.14159265358979344719667586"),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int_=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_="test",
                    str_opt="testOptional",
                ),
                arr=[
                    shared.SimpleObject(
                        any="any",
                        bigint=8821239038968084,
                        bigint_str=9223372036854775808,
                        bool_=True,
                        bool_opt=True,
                        date=dateutil.parser.parse("2020-01-01").date(),
                        date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                        decimal=Decimal("3.141592653589793"),
                        decimal_str=Decimal("3.14159265358979344719667586"),
                        enum=shared.EnumT.ONE,
                        float32=1.1,
                        float64_str=1.1,
                        int_=1,
                        int32=1,
                        int32_enum=shared.Int32Enum.FIFTY_FIVE,
                        int64_str=100,
                        int_enum=shared.IntEnum.SECOND,
                        num=1.1,
                        str_="test",
                        str_opt="testOptional",
                    ),
                    shared.SimpleObject(
                        any="any",
                        bigint=8821239038968084,
                        bigint_str=9223372036854775808,
                        bool_=True,
                        bool_opt=True,
                        date=dateutil.parser.parse("2020-01-01").date(),
                        date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                        decimal=Decimal("3.141592653589793"),
                        decimal_str=Decimal("3.14159265358979344719667586"),
                        enum=shared.EnumT.ONE,
                        float32=1.1,
                        float64_str=1.1,
                        int_=1,
                        int32=1,
                        int32_enum=shared.Int32Enum.FIFTY_FIVE,
                        int64_str=100,
                        int_enum=shared.IntEnum.SECOND,
                        num=1.1,
                        str_="test",
                        str_opt="testOptional",
                    ),
                ],
                bool_=True,
                int_=1,
                map={
                    "key": shared.SimpleObject(
                        any="any",
                        bigint=8821239038968084,
                        bigint_str=9223372036854775808,
                        bool_=True,
                        bool_opt=True,
                        date=dateutil.parser.parse("2020-01-01").date(),
                        date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                        decimal=Decimal("3.141592653589793"),
                        decimal_str=Decimal("3.14159265358979344719667586"),
                        enum=shared.EnumT.ONE,
                        float32=1.1,
                        float64_str=1.1,
                        int_=1,
                        int32=1,
                        int32_enum=shared.Int32Enum.FIFTY_FIVE,
                        int64_str=100,
                        int_enum=shared.IntEnum.SECOND,
                        num=1.1,
                        str_="test",
                        str_opt="testOptional",
                    ),
                    "key2": shared.SimpleObject(
                        any="any",
                        bigint=8821239038968084,
                        bigint_str=9223372036854775808,
                        bool_=True,
                        bool_opt=True,
                        date=dateutil.parser.parse("2020-01-01").date(),
                        date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                        decimal=Decimal("3.141592653589793"),
                        decimal_str=Decimal("3.14159265358979344719667586"),
                        enum=shared.EnumT.ONE,
                        float32=1.1,
                        float64_str=1.1,
                        int_=1,
                        int32=1,
                        int32_enum=shared.Int32Enum.FIFTY_FIVE,
                        int64_str=100,
                        int_enum=shared.IntEnum.SECOND,
                        num=1.1,
                        str_="test",
                        str_opt="testOptional",
                    ),
                },
                num=1.1,
                obj=shared.SimpleObject(
                    any="any",
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool_=True,
                    bool_opt=True,
                    date=dateutil.parser.parse("2020-01-01").date(),
                    date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                    decimal=Decimal("3.141592653589793"),
                    decimal_str=Decimal("3.14159265358979344719667586"),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int_=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_="test",
                    str_opt="testOptional",
                ),
                str_="test",
            ),
        )

def test_request_bodies_request_body_post_application_json_deep_camel_case():
    record_test("request-bodies-post-application-json-deep-camel-case")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_deep_camel_case(request={
        "any_val": "<value>",
        "arr_val": [
            {
                "any_val": "any example",
                "bool_opt_val": True,
                "bool_val": True,
                "date_time_val": dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                "date_val": dateutil.parser.parse("2020-01-01").date(),
                "enum_val": shared.EnumT.ONE,
                "float32_val": 2.2222222,
                "int32_enum_val": shared.Int32EnumVal.SIXTY_NINE,
                "int32_val": 1,
                "int_enum_val": shared.IntEnumVal.THIRD,
                "int_opt_null_val": 999999,
                "int_val": 999999,
                "num_opt_null_val": 1.1,
                "num_val": 1.1,
                "str_opt_val": "optional example",
                "str_val": "example",
            },
            {
                "any_val": "any example",
                "bool_opt_val": True,
                "bool_val": True,
                "date_time_val": dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                "date_val": dateutil.parser.parse("2020-01-01").date(),
                "enum_val": shared.EnumT.ONE,
                "float32_val": 2.2222222,
                "int32_enum_val": shared.Int32EnumVal.SIXTY_NINE,
                "int32_val": 1,
                "int_enum_val": shared.IntEnumVal.THIRD,
                "int_opt_null_val": 999999,
                "int_val": 999999,
                "num_opt_null_val": 1.1,
                "num_val": 1.1,
                "str_opt_val": "optional example",
                "str_val": "example",
            },
        ],
        "bool_val": True,
        "int_val": 1,
        "map_val": {
            "key": {
                "any_val": "any example",
                "bool_opt_val": True,
                "bool_val": True,
                "date_time_val": dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                "date_val": dateutil.parser.parse("2020-01-01").date(),
                "enum_val": shared.EnumT.ONE,
                "float32_val": 2.2222222,
                "int32_enum_val": shared.Int32EnumVal.SIXTY_NINE,
                "int32_val": 1,
                "int_enum_val": shared.IntEnumVal.THIRD,
                "int_opt_null_val": 999999,
                "int_val": 999999,
                "num_opt_null_val": 1.1,
                "num_val": 1.1,
                "str_opt_val": "optional example",
                "str_val": "example",
            },
        },
        "num_val": 1.1,
        "obj_val": {
            "any_val": "any example",
            "bool_opt_val": True,
            "bool_val": True,
            "date_time_val": dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
            "date_val": dateutil.parser.parse("2020-01-01").date(),
            "enum_val": shared.EnumT.ONE,
            "float32_val": 2.2222222,
            "int32_enum_val": shared.Int32EnumVal.SIXTY_NINE,
            "int32_val": 1,
            "int_enum_val": shared.IntEnumVal.THIRD,
            "int_opt_null_val": 999999,
            "int_val": 999999,
            "num_opt_null_val": 1.1,
            "num_val": 1.1,
            "str_opt_val": "optional example",
            "str_val": "example",
        },
        "str_val": "test",
    })
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostApplicationJSONDeepCamelCaseRes(
            json_=shared.DeepObjectCamelCase(
                any_val="<value>",
                arr_val=[
                    shared.SimpleObjectCamelCase(
                        any_val="any example",
                        bool_opt_val=True,
                        bool_val=True,
                        date_time_val=dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                        date_val=dateutil.parser.parse("2020-01-01").date(),
                        enum_val=shared.EnumT.ONE,
                        float32_val=2.2222222,
                        int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                        int32_val=1,
                        int_enum_val=shared.IntEnumVal.THIRD,
                        int_opt_null_val=999999,
                        int_val=999999,
                        num_opt_null_val=1.1,
                        num_val=1.1,
                        str_opt_val="optional example",
                        str_val="example",
                    ),
                    shared.SimpleObjectCamelCase(
                        any_val="any example",
                        bool_opt_val=True,
                        bool_val=True,
                        date_time_val=dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                        date_val=dateutil.parser.parse("2020-01-01").date(),
                        enum_val=shared.EnumT.ONE,
                        float32_val=2.2222222,
                        int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                        int32_val=1,
                        int_enum_val=shared.IntEnumVal.THIRD,
                        int_opt_null_val=999999,
                        int_val=999999,
                        num_opt_null_val=1.1,
                        num_val=1.1,
                        str_opt_val="optional example",
                        str_val="example",
                    ),
                ],
                bool_val=True,
                int_val=1,
                map_val={
                    "key": shared.SimpleObjectCamelCase(
                        any_val="any example",
                        bool_opt_val=True,
                        bool_val=True,
                        date_time_val=dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                        date_val=dateutil.parser.parse("2020-01-01").date(),
                        enum_val=shared.EnumT.ONE,
                        float32_val=2.2222222,
                        int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                        int32_val=1,
                        int_enum_val=shared.IntEnumVal.THIRD,
                        int_opt_null_val=999999,
                        int_val=999999,
                        num_opt_null_val=1.1,
                        num_val=1.1,
                        str_opt_val="optional example",
                        str_val="example",
                    ),
                },
                num_val=1.1,
                obj_val=shared.SimpleObjectCamelCase(
                    any_val="any example",
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                    date_val=dateutil.parser.parse("2020-01-01").date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val="optional example",
                    str_val="example",
                ),
                str_val="test",
            ),
        )

def test_request_bodies_request_body_post_application_json_map():
    record_test("request-bodies-post-application-json-map")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_map(request={
        "mapElem1": {
            "any": "any",
            "bigint": 8821239038968084,
            "bigint_str": 9223372036854775808,
            "bool_": True,
            "bool_opt": True,
            "date": dateutil.parser.parse("2020-01-01").date(),
            "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
            "decimal": Decimal("3.141592653589793"),
            "decimal_str": Decimal("3.14159265358979344719667586"),
            "enum": shared.EnumT.ONE,
            "float32": 1.1,
            "float64_str": 1.1,
            "int_": 1,
            "int32": 1,
            "int32_enum": shared.Int32Enum.FIFTY_FIVE,
            "int64_str": 100,
            "int_enum": shared.IntEnum.SECOND,
            "num": 1.1,
            "str_": "test",
            "str_opt": "testOptional",
        },
        "mapElem2": {
            "any": "any",
            "bigint": 8821239038968084,
            "bigint_str": 9223372036854775808,
            "bool_": True,
            "bool_opt": True,
            "date": dateutil.parser.parse("2020-01-01").date(),
            "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
            "decimal": Decimal("3.141592653589793"),
            "decimal_str": Decimal("3.14159265358979344719667586"),
            "enum": shared.EnumT.ONE,
            "float32": 1.1,
            "float64_str": 1.1,
            "int_": 1,
            "int32": 1,
            "int32_enum": shared.Int32Enum.FIFTY_FIVE,
            "int64_str": 100,
            "int_enum": shared.IntEnum.SECOND,
            "num": 1.1,
            "str_": "test",
            "str_opt": "testOptional",
        },
    })
    assert res is not None
    assert res is not None
    assert res == {
            "mapElem1": shared.SimpleObject(
                any="any",
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool_=True,
                bool_opt=True,
                date=dateutil.parser.parse("2020-01-01").date(),
                date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                decimal=Decimal("3.141592653589793"),
                decimal_str=Decimal("3.14159265358979344719667586"),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int_=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_="test",
                str_opt="testOptional",
            ),
            "mapElem2": shared.SimpleObject(
                any="any",
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool_=True,
                bool_opt=True,
                date=dateutil.parser.parse("2020-01-01").date(),
                date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                decimal=Decimal("3.141592653589793"),
                decimal_str=Decimal("3.14159265358979344719667586"),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int_=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_="test",
                str_opt="testOptional",
            ),
        }

def test_request_bodies_request_body_post_application_json_map_camel_case():
    record_test("request-bodies-post-application-json-map-camel-case")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_map_camel_case(request={
        "mapElem1": {
            "any_val": "any example",
            "bool_opt_val": True,
            "bool_val": True,
            "date_time_val": dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
            "date_val": dateutil.parser.parse("2020-01-01").date(),
            "enum_val": shared.EnumT.ONE,
            "float32_val": 2.2222222,
            "int32_enum_val": shared.Int32EnumVal.SIXTY_NINE,
            "int32_val": 1,
            "int_enum_val": shared.IntEnumVal.THIRD,
            "int_opt_null_val": 999999,
            "int_val": 999999,
            "num_opt_null_val": 1.1,
            "num_val": 1.1,
            "str_opt_val": "optional example",
            "str_val": "example",
        },
        "mapElem2": {
            "any_val": "any example",
            "bool_opt_val": True,
            "bool_val": True,
            "date_time_val": dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
            "date_val": dateutil.parser.parse("2020-01-01").date(),
            "enum_val": shared.EnumT.ONE,
            "float32_val": 2.2222222,
            "int32_enum_val": shared.Int32EnumVal.SIXTY_NINE,
            "int32_val": 1,
            "int_enum_val": shared.IntEnumVal.THIRD,
            "int_opt_null_val": 999999,
            "int_val": 999999,
            "num_opt_null_val": 1.1,
            "num_val": 1.1,
            "str_opt_val": "optional example",
            "str_val": "example",
        },
    })
    assert res is not None
    assert res is not None
    assert res == {
            "mapElem1": shared.SimpleObjectCamelCase(
                any_val="any example",
                bool_opt_val=True,
                bool_val=True,
                date_time_val=dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                date_val=dateutil.parser.parse("2020-01-01").date(),
                enum_val=shared.EnumT.ONE,
                float32_val=2.2222222,
                int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                int32_val=1,
                int_enum_val=shared.IntEnumVal.THIRD,
                int_opt_null_val=999999,
                int_val=999999,
                num_opt_null_val=1.1,
                num_val=1.1,
                str_opt_val="optional example",
                str_val="example",
            ),
            "mapElem2": shared.SimpleObjectCamelCase(
                any_val="any example",
                bool_opt_val=True,
                bool_val=True,
                date_time_val=dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                date_val=dateutil.parser.parse("2020-01-01").date(),
                enum_val=shared.EnumT.ONE,
                float32_val=2.2222222,
                int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                int32_val=1,
                int_enum_val=shared.IntEnumVal.THIRD,
                int_opt_null_val=999999,
                int_val=999999,
                num_opt_null_val=1.1,
                num_val=1.1,
                str_opt_val="optional example",
                str_val="example",
            ),
        }

def test_request_bodies_request_body_post_application_json_map_obj():
    record_test("request-bodies-post-application-json-map-object")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_map_obj(request={
        "mapElem1": {
            "any": "any",
            "bigint": 8821239038968084,
            "bigint_str": 9223372036854775808,
            "bool_": True,
            "bool_opt": True,
            "date": dateutil.parser.parse("2020-01-01").date(),
            "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
            "decimal": Decimal("3.141592653589793"),
            "decimal_str": Decimal("3.14159265358979344719667586"),
            "enum": shared.EnumT.ONE,
            "float32": 1.1,
            "float64_str": 1.1,
            "int_": 1,
            "int32": 1,
            "int32_enum": shared.Int32Enum.FIFTY_FIVE,
            "int64_str": 100,
            "int_enum": shared.IntEnum.SECOND,
            "num": 1.1,
            "str_": "test",
            "str_opt": "testOptional",
        },
        "mapElem2": {
            "any": "any",
            "bigint": 8821239038968084,
            "bigint_str": 9223372036854775808,
            "bool_": True,
            "bool_opt": True,
            "date": dateutil.parser.parse("2020-01-01").date(),
            "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
            "decimal": Decimal("3.141592653589793"),
            "decimal_str": Decimal("3.14159265358979344719667586"),
            "enum": shared.EnumT.ONE,
            "float32": 1.1,
            "float64_str": 1.1,
            "int_": 1,
            "int32": 1,
            "int32_enum": shared.Int32Enum.FIFTY_FIVE,
            "int64_str": 100,
            "int_enum": shared.IntEnum.SECOND,
            "num": 1.1,
            "str_": "test",
            "str_opt": "testOptional",
        },
    })
    assert res is not None
    assert res is not None
    assert res == shared.MapObjValue(
            json_={
                "mapElem1": shared.SimpleObject(
                    any="any",
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool_=True,
                    bool_opt=True,
                    date=dateutil.parser.parse("2020-01-01").date(),
                    date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                    decimal=Decimal("3.141592653589793"),
                    decimal_str=Decimal("3.14159265358979344719667586"),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int_=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_="test",
                    str_opt="testOptional",
                ),
                "mapElem2": shared.SimpleObject(
                    any="any",
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool_=True,
                    bool_opt=True,
                    date=dateutil.parser.parse("2020-01-01").date(),
                    date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                    decimal=Decimal("3.141592653589793"),
                    decimal_str=Decimal("3.14159265358979344719667586"),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int_=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_="test",
                    str_opt="testOptional",
                ),
            },
        )

def test_request_bodies_request_body_post_application_json_map_obj_camel_case():
    record_test("request-bodies-post-application-json-map-object-camel-case")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_map_obj_camel_case(request={
        "mapElem1": {
            "any_val": "any example",
            "bool_opt_val": True,
            "bool_val": True,
            "date_time_val": dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
            "date_val": dateutil.parser.parse("2020-01-01").date(),
            "enum_val": shared.EnumT.ONE,
            "float32_val": 2.2222222,
            "int32_enum_val": shared.Int32EnumVal.SIXTY_NINE,
            "int32_val": 1,
            "int_enum_val": shared.IntEnumVal.THIRD,
            "int_opt_null_val": 999999,
            "int_val": 999999,
            "num_opt_null_val": 1.1,
            "num_val": 1.1,
            "str_opt_val": "optional example",
            "str_val": "example",
        },
        "mapElem2": {
            "any_val": "any example",
            "bool_opt_val": True,
            "bool_val": True,
            "date_time_val": dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
            "date_val": dateutil.parser.parse("2020-01-01").date(),
            "enum_val": shared.EnumT.ONE,
            "float32_val": 2.2222222,
            "int32_enum_val": shared.Int32EnumVal.SIXTY_NINE,
            "int32_val": 1,
            "int_enum_val": shared.IntEnumVal.THIRD,
            "int_opt_null_val": 999999,
            "int_val": 999999,
            "num_opt_null_val": 1.1,
            "num_val": 1.1,
            "str_opt_val": "optional example",
            "str_val": "example",
        },
    })
    assert res is not None
    assert res is not None
    assert res == shared.MapObjValueCamelCase(
            json_={
                "mapElem1": shared.SimpleObjectCamelCase(
                    any_val="any example",
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                    date_val=dateutil.parser.parse("2020-01-01").date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val="optional example",
                    str_val="example",
                ),
                "mapElem2": shared.SimpleObjectCamelCase(
                    any_val="any example",
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                    date_val=dateutil.parser.parse("2020-01-01").date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val="optional example",
                    str_val="example",
                ),
            },
        )

def test_request_bodies_request_body_post_application_json_map_of_array():
    record_test("request-bodies-post-application-json-map-of-array")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_map_of_array(request={
        "mapElem1": [
            {
                "any": "any",
                "bigint": 8821239038968084,
                "bigint_str": 9223372036854775808,
                "bool_": True,
                "bool_opt": True,
                "date": dateutil.parser.parse("2020-01-01").date(),
                "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                "decimal": Decimal("3.141592653589793"),
                "decimal_str": Decimal("3.14159265358979344719667586"),
                "enum": shared.EnumT.ONE,
                "float32": 1.1,
                "float64_str": 1.1,
                "int_": 1,
                "int32": 1,
                "int32_enum": shared.Int32Enum.FIFTY_FIVE,
                "int64_str": 100,
                "int_enum": shared.IntEnum.SECOND,
                "num": 1.1,
                "str_": "test",
                "str_opt": "testOptional",
            },
            {
                "any": "any",
                "bigint": 8821239038968084,
                "bigint_str": 9223372036854775808,
                "bool_": True,
                "bool_opt": True,
                "date": dateutil.parser.parse("2020-01-01").date(),
                "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                "decimal": Decimal("3.141592653589793"),
                "decimal_str": Decimal("3.14159265358979344719667586"),
                "enum": shared.EnumT.ONE,
                "float32": 1.1,
                "float64_str": 1.1,
                "int_": 1,
                "int32": 1,
                "int32_enum": shared.Int32Enum.FIFTY_FIVE,
                "int64_str": 100,
                "int_enum": shared.IntEnum.SECOND,
                "num": 1.1,
                "str_": "test",
                "str_opt": "testOptional",
            },
        ],
        "mapElem2": [
            {
                "any": "any",
                "bigint": 8821239038968084,
                "bigint_str": 9223372036854775808,
                "bool_": True,
                "bool_opt": True,
                "date": dateutil.parser.parse("2020-01-01").date(),
                "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                "decimal": Decimal("3.141592653589793"),
                "decimal_str": Decimal("3.14159265358979344719667586"),
                "enum": shared.EnumT.ONE,
                "float32": 1.1,
                "float64_str": 1.1,
                "int_": 1,
                "int32": 1,
                "int32_enum": shared.Int32Enum.FIFTY_FIVE,
                "int64_str": 100,
                "int_enum": shared.IntEnum.SECOND,
                "num": 1.1,
                "str_": "test",
                "str_opt": "testOptional",
            },
            {
                "any": "any",
                "bigint": 8821239038968084,
                "bigint_str": 9223372036854775808,
                "bool_": True,
                "bool_opt": True,
                "date": dateutil.parser.parse("2020-01-01").date(),
                "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                "decimal": Decimal("3.141592653589793"),
                "decimal_str": Decimal("3.14159265358979344719667586"),
                "enum": shared.EnumT.ONE,
                "float32": 1.1,
                "float64_str": 1.1,
                "int_": 1,
                "int32": 1,
                "int32_enum": shared.Int32Enum.FIFTY_FIVE,
                "int64_str": 100,
                "int_enum": shared.IntEnum.SECOND,
                "num": 1.1,
                "str_": "test",
                "str_opt": "testOptional",
            },
        ],
    })
    assert res is not None
    assert res is not None
    assert res == {
            "mapElem1": [
                shared.SimpleObject(
                    any="any",
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool_=True,
                    bool_opt=True,
                    date=dateutil.parser.parse("2020-01-01").date(),
                    date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                    decimal=Decimal("3.141592653589793"),
                    decimal_str=Decimal("3.14159265358979344719667586"),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int_=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_="test",
                    str_opt="testOptional",
                ),
                shared.SimpleObject(
                    any="any",
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool_=True,
                    bool_opt=True,
                    date=dateutil.parser.parse("2020-01-01").date(),
                    date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                    decimal=Decimal("3.141592653589793"),
                    decimal_str=Decimal("3.14159265358979344719667586"),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int_=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_="test",
                    str_opt="testOptional",
                ),
            ],
            "mapElem2": [
                shared.SimpleObject(
                    any="any",
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool_=True,
                    bool_opt=True,
                    date=dateutil.parser.parse("2020-01-01").date(),
                    date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                    decimal=Decimal("3.141592653589793"),
                    decimal_str=Decimal("3.14159265358979344719667586"),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int_=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_="test",
                    str_opt="testOptional",
                ),
                shared.SimpleObject(
                    any="any",
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool_=True,
                    bool_opt=True,
                    date=dateutil.parser.parse("2020-01-01").date(),
                    date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                    decimal=Decimal("3.141592653589793"),
                    decimal_str=Decimal("3.14159265358979344719667586"),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int_=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_="test",
                    str_opt="testOptional",
                ),
            ],
        }

def test_request_bodies_request_body_post_application_json_map_of_array_camel_case():
    record_test("request-bodies-post-application-json-map-of-array-camel-case")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_map_of_array_camel_case(request={
        "mapElem1": [
            {
                "any_val": "any example",
                "bool_opt_val": True,
                "bool_val": True,
                "date_time_val": dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                "date_val": dateutil.parser.parse("2020-01-01").date(),
                "enum_val": shared.EnumT.ONE,
                "float32_val": 2.2222222,
                "int32_enum_val": shared.Int32EnumVal.SIXTY_NINE,
                "int32_val": 1,
                "int_enum_val": shared.IntEnumVal.THIRD,
                "int_opt_null_val": 999999,
                "int_val": 999999,
                "num_opt_null_val": 1.1,
                "num_val": 1.1,
                "str_opt_val": "optional example",
                "str_val": "example",
            },
            {
                "any_val": "any example",
                "bool_opt_val": True,
                "bool_val": True,
                "date_time_val": dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                "date_val": dateutil.parser.parse("2020-01-01").date(),
                "enum_val": shared.EnumT.ONE,
                "float32_val": 2.2222222,
                "int32_enum_val": shared.Int32EnumVal.SIXTY_NINE,
                "int32_val": 1,
                "int_enum_val": shared.IntEnumVal.THIRD,
                "int_opt_null_val": 999999,
                "int_val": 999999,
                "num_opt_null_val": 1.1,
                "num_val": 1.1,
                "str_opt_val": "optional example",
                "str_val": "example",
            },
        ],
        "mapElem2": [
            {
                "any_val": "any example",
                "bool_opt_val": True,
                "bool_val": True,
                "date_time_val": dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                "date_val": dateutil.parser.parse("2020-01-01").date(),
                "enum_val": shared.EnumT.ONE,
                "float32_val": 2.2222222,
                "int32_enum_val": shared.Int32EnumVal.SIXTY_NINE,
                "int32_val": 1,
                "int_enum_val": shared.IntEnumVal.THIRD,
                "int_opt_null_val": 999999,
                "int_val": 999999,
                "num_opt_null_val": 1.1,
                "num_val": 1.1,
                "str_opt_val": "optional example",
                "str_val": "example",
            },
            {
                "any_val": "any example",
                "bool_opt_val": True,
                "bool_val": True,
                "date_time_val": dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                "date_val": dateutil.parser.parse("2020-01-01").date(),
                "enum_val": shared.EnumT.ONE,
                "float32_val": 2.2222222,
                "int32_enum_val": shared.Int32EnumVal.SIXTY_NINE,
                "int32_val": 1,
                "int_enum_val": shared.IntEnumVal.THIRD,
                "int_opt_null_val": 999999,
                "int_val": 999999,
                "num_opt_null_val": 1.1,
                "num_val": 1.1,
                "str_opt_val": "optional example",
                "str_val": "example",
            },
        ],
    })
    assert res is not None
    assert res is not None
    assert res == {
            "mapElem1": [
                shared.SimpleObjectCamelCase(
                    any_val="any example",
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                    date_val=dateutil.parser.parse("2020-01-01").date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val="optional example",
                    str_val="example",
                ),
                shared.SimpleObjectCamelCase(
                    any_val="any example",
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                    date_val=dateutil.parser.parse("2020-01-01").date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val="optional example",
                    str_val="example",
                ),
            ],
            "mapElem2": [
                shared.SimpleObjectCamelCase(
                    any_val="any example",
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                    date_val=dateutil.parser.parse("2020-01-01").date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val="optional example",
                    str_val="example",
                ),
                shared.SimpleObjectCamelCase(
                    any_val="any example",
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                    date_val=dateutil.parser.parse("2020-01-01").date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val="optional example",
                    str_val="example",
                ),
            ],
        }

def test_request_bodies_request_body_post_application_json_map_of_map():
    record_test("request-bodies-post-application-json-map-of-map")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_map_of_map(request={
        "mapElem1": {
            "subMapElem1": {
                "any": "any",
                "bigint": 8821239038968084,
                "bigint_str": 9223372036854775808,
                "bool_": True,
                "bool_opt": True,
                "date": dateutil.parser.parse("2020-01-01").date(),
                "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                "decimal": Decimal("3.141592653589793"),
                "decimal_str": Decimal("3.14159265358979344719667586"),
                "enum": shared.EnumT.ONE,
                "float32": 1.1,
                "float64_str": 1.1,
                "int_": 1,
                "int32": 1,
                "int32_enum": shared.Int32Enum.FIFTY_FIVE,
                "int64_str": 100,
                "int_enum": shared.IntEnum.SECOND,
                "num": 1.1,
                "str_": "test",
                "str_opt": "testOptional",
            },
            "subMapElem2": {
                "any": "any",
                "bigint": 8821239038968084,
                "bigint_str": 9223372036854775808,
                "bool_": True,
                "bool_opt": True,
                "date": dateutil.parser.parse("2020-01-01").date(),
                "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                "decimal": Decimal("3.141592653589793"),
                "decimal_str": Decimal("3.14159265358979344719667586"),
                "enum": shared.EnumT.ONE,
                "float32": 1.1,
                "float64_str": 1.1,
                "int_": 1,
                "int32": 1,
                "int32_enum": shared.Int32Enum.FIFTY_FIVE,
                "int64_str": 100,
                "int_enum": shared.IntEnum.SECOND,
                "num": 1.1,
                "str_": "test",
                "str_opt": "testOptional",
            },
        },
        "mapElem2": {
            "subMapElem1": {
                "any": "any",
                "bigint": 8821239038968084,
                "bigint_str": 9223372036854775808,
                "bool_": True,
                "bool_opt": True,
                "date": dateutil.parser.parse("2020-01-01").date(),
                "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                "decimal": Decimal("3.141592653589793"),
                "decimal_str": Decimal("3.14159265358979344719667586"),
                "enum": shared.EnumT.ONE,
                "float32": 1.1,
                "float64_str": 1.1,
                "int_": 1,
                "int32": 1,
                "int32_enum": shared.Int32Enum.FIFTY_FIVE,
                "int64_str": 100,
                "int_enum": shared.IntEnum.SECOND,
                "num": 1.1,
                "str_": "test",
                "str_opt": "testOptional",
            },
            "subMapElem2": {
                "any": "any",
                "bigint": 8821239038968084,
                "bigint_str": 9223372036854775808,
                "bool_": True,
                "bool_opt": True,
                "date": dateutil.parser.parse("2020-01-01").date(),
                "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                "decimal": Decimal("3.141592653589793"),
                "decimal_str": Decimal("3.14159265358979344719667586"),
                "enum": shared.EnumT.ONE,
                "float32": 1.1,
                "float64_str": 1.1,
                "int_": 1,
                "int32": 1,
                "int32_enum": shared.Int32Enum.FIFTY_FIVE,
                "int64_str": 100,
                "int_enum": shared.IntEnum.SECOND,
                "num": 1.1,
                "str_": "test",
                "str_opt": "testOptional",
            },
        },
    })
    assert res is not None
    assert res is not None
    assert res == {
            "mapElem1": {
                "subMapElem1": shared.SimpleObject(
                    any="any",
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool_=True,
                    bool_opt=True,
                    date=dateutil.parser.parse("2020-01-01").date(),
                    date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                    decimal=Decimal("3.141592653589793"),
                    decimal_str=Decimal("3.14159265358979344719667586"),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int_=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_="test",
                    str_opt="testOptional",
                ),
                "subMapElem2": shared.SimpleObject(
                    any="any",
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool_=True,
                    bool_opt=True,
                    date=dateutil.parser.parse("2020-01-01").date(),
                    date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                    decimal=Decimal("3.141592653589793"),
                    decimal_str=Decimal("3.14159265358979344719667586"),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int_=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_="test",
                    str_opt="testOptional",
                ),
            },
            "mapElem2": {
                "subMapElem1": shared.SimpleObject(
                    any="any",
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool_=True,
                    bool_opt=True,
                    date=dateutil.parser.parse("2020-01-01").date(),
                    date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                    decimal=Decimal("3.141592653589793"),
                    decimal_str=Decimal("3.14159265358979344719667586"),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int_=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_="test",
                    str_opt="testOptional",
                ),
                "subMapElem2": shared.SimpleObject(
                    any="any",
                    bigint=8821239038968084,
                    bigint_str=9223372036854775808,
                    bool_=True,
                    bool_opt=True,
                    date=dateutil.parser.parse("2020-01-01").date(),
                    date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                    decimal=Decimal("3.141592653589793"),
                    decimal_str=Decimal("3.14159265358979344719667586"),
                    enum=shared.EnumT.ONE,
                    float32=1.1,
                    float64_str=1.1,
                    int_=1,
                    int32=1,
                    int32_enum=shared.Int32Enum.FIFTY_FIVE,
                    int64_str=100,
                    int_enum=shared.IntEnum.SECOND,
                    num=1.1,
                    str_="test",
                    str_opt="testOptional",
                ),
            },
        }

def test_request_bodies_request_body_post_application_json_map_of_map_camel_case():
    record_test("request-bodies-post-application-json-map-of-map-camel-case")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_map_of_map_camel_case(request={
        "mapElem1": {
            "subMapElem1": {
                "any_val": "any example",
                "bool_opt_val": True,
                "bool_val": True,
                "date_time_val": dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                "date_val": dateutil.parser.parse("2020-01-01").date(),
                "enum_val": shared.EnumT.ONE,
                "float32_val": 2.2222222,
                "int32_enum_val": shared.Int32EnumVal.SIXTY_NINE,
                "int32_val": 1,
                "int_enum_val": shared.IntEnumVal.THIRD,
                "int_opt_null_val": 999999,
                "int_val": 999999,
                "num_opt_null_val": 1.1,
                "num_val": 1.1,
                "str_opt_val": "optional example",
                "str_val": "example",
            },
            "subMapElem2": {
                "any_val": "any example",
                "bool_opt_val": True,
                "bool_val": True,
                "date_time_val": dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                "date_val": dateutil.parser.parse("2020-01-01").date(),
                "enum_val": shared.EnumT.ONE,
                "float32_val": 2.2222222,
                "int32_enum_val": shared.Int32EnumVal.SIXTY_NINE,
                "int32_val": 1,
                "int_enum_val": shared.IntEnumVal.THIRD,
                "int_opt_null_val": 999999,
                "int_val": 999999,
                "num_opt_null_val": 1.1,
                "num_val": 1.1,
                "str_opt_val": "optional example",
                "str_val": "example",
            },
        },
        "mapElem2": {
            "subMapElem1": {
                "any_val": "any example",
                "bool_opt_val": True,
                "bool_val": True,
                "date_time_val": dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                "date_val": dateutil.parser.parse("2020-01-01").date(),
                "enum_val": shared.EnumT.ONE,
                "float32_val": 2.2222222,
                "int32_enum_val": shared.Int32EnumVal.SIXTY_NINE,
                "int32_val": 1,
                "int_enum_val": shared.IntEnumVal.THIRD,
                "int_opt_null_val": 999999,
                "int_val": 999999,
                "num_opt_null_val": 1.1,
                "num_val": 1.1,
                "str_opt_val": "optional example",
                "str_val": "example",
            },
            "subMapElem2": {
                "any_val": "any example",
                "bool_opt_val": True,
                "bool_val": True,
                "date_time_val": dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                "date_val": dateutil.parser.parse("2020-01-01").date(),
                "enum_val": shared.EnumT.ONE,
                "float32_val": 2.2222222,
                "int32_enum_val": shared.Int32EnumVal.SIXTY_NINE,
                "int32_val": 1,
                "int_enum_val": shared.IntEnumVal.THIRD,
                "int_opt_null_val": 999999,
                "int_val": 999999,
                "num_opt_null_val": 1.1,
                "num_val": 1.1,
                "str_opt_val": "optional example",
                "str_val": "example",
            },
        },
    })
    assert res is not None
    assert res is not None
    assert res == {
            "mapElem1": {
                "subMapElem1": shared.SimpleObjectCamelCase(
                    any_val="any example",
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                    date_val=dateutil.parser.parse("2020-01-01").date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val="optional example",
                    str_val="example",
                ),
                "subMapElem2": shared.SimpleObjectCamelCase(
                    any_val="any example",
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                    date_val=dateutil.parser.parse("2020-01-01").date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val="optional example",
                    str_val="example",
                ),
            },
            "mapElem2": {
                "subMapElem1": shared.SimpleObjectCamelCase(
                    any_val="any example",
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                    date_val=dateutil.parser.parse("2020-01-01").date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val="optional example",
                    str_val="example",
                ),
                "subMapElem2": shared.SimpleObjectCamelCase(
                    any_val="any example",
                    bool_opt_val=True,
                    bool_val=True,
                    date_time_val=dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                    date_val=dateutil.parser.parse("2020-01-01").date(),
                    enum_val=shared.EnumT.ONE,
                    float32_val=2.2222222,
                    int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                    int32_val=1,
                    int_enum_val=shared.IntEnumVal.THIRD,
                    int_opt_null_val=999999,
                    int_val=999999,
                    num_opt_null_val=1.1,
                    num_val=1.1,
                    str_opt_val="optional example",
                    str_val="example",
                ),
            },
        }

def test_request_bodies_request_body_post_application_json_map_of_map_of_primitive():
    record_test("request-bodies-post-application-json-map-of-map-of-primitive")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_map_of_map_of_primitive(request={
        "mapElem1": {
            "subMapElem1": "foo",
            "subMapElem2": "bar",
        },
        "mapElem2": {
            "subMapElem1": "buzz",
            "subMapElem2": "bazz",
        },
    })
    assert res is not None
    assert res is not None
    assert res == {
            "mapElem1": {
                "subMapElem1": "foo",
                "subMapElem2": "bar",
            },
            "mapElem2": {
                "subMapElem1": "buzz",
                "subMapElem2": "bazz",
            },
        }

def test_request_bodies_request_body_post_application_json_map_of_primitive():
    record_test("request-bodies-post-application-json-map-of-primitive")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_map_of_primitive(request={
        "mapElem1": "hello",
        "mapElem2": "world",
    })
    assert res is not None
    assert res is not None
    assert res == {
            "mapElem1": "hello",
            "mapElem2": "world",
        }

def test_request_bodies_request_body_post_application_json_multiple_json_filtered():
    record_test("request-bodies-post-application-json-multiple-json-filtered")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_multiple_json_filtered(request={
        "any": "any",
        "bigint": 8821239038968084,
        "bigint_str": 9223372036854775808,
        "bool_": True,
        "bool_opt": True,
        "date": dateutil.parser.parse("2020-01-01").date(),
        "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
        "decimal": Decimal("3.141592653589793"),
        "decimal_str": Decimal("3.14159265358979344719667586"),
        "enum": shared.EnumT.ONE,
        "float32": 1.1,
        "float64_str": 1.1,
        "int_": 1,
        "int32": 1,
        "int32_enum": shared.Int32Enum.FIFTY_FIVE,
        "int64_str": 100,
        "int_enum": shared.IntEnum.SECOND,
        "num": 1.1,
        "str_": "test",
        "str_opt": "testOptional",
    })
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostApplicationJSONMultipleJSONFilteredRes(
            json_=shared.SimpleObject(
                any="any",
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool_=True,
                bool_opt=True,
                date=dateutil.parser.parse("2020-01-01").date(),
                date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                decimal=Decimal("3.141592653589793"),
                decimal_str=Decimal("3.14159265358979344719667586"),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int_=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_="test",
                str_opt="testOptional",
            ),
        )

def test_request_bodies_request_body_post_application_json_simple():
    record_test("request-bodies-post-application-json-simple")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_simple(request={
        "any": "any",
        "bigint": 8821239038968084,
        "bigint_str": 9223372036854775808,
        "bool_": True,
        "bool_opt": True,
        "date": dateutil.parser.parse("2020-01-01").date(),
        "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
        "decimal": Decimal("3.141592653589793"),
        "decimal_str": Decimal("3.14159265358979344719667586"),
        "enum": shared.EnumT.ONE,
        "float32": 1.1,
        "float64_str": 1.1,
        "int_": 1,
        "int32": 1,
        "int32_enum": shared.Int32Enum.FIFTY_FIVE,
        "int64_str": 100,
        "int_enum": shared.IntEnum.SECOND,
        "num": 1.1,
        "str_": "test",
        "str_opt": "testOptional",
    })
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostApplicationJSONSimpleRes(
            json_=shared.SimpleObject(
                any="any",
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool_=True,
                bool_opt=True,
                date=dateutil.parser.parse("2020-01-01").date(),
                date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                decimal=Decimal("3.141592653589793"),
                decimal_str=Decimal("3.14159265358979344719667586"),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int_=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_="test",
                str_opt="testOptional",
            ),
        )

def test_request_bodies_request_body_post_application_json_simple_camel_case():
    record_test("request-bodies-post-application-json-simple-camel-case")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_application_json_simple_camel_case(request={
        "any_val": "any example",
        "bool_opt_val": True,
        "bool_val": True,
        "date_time_val": dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
        "date_val": dateutil.parser.parse("2020-01-01").date(),
        "enum_val": shared.EnumT.ONE,
        "float32_val": 2.2222222,
        "int32_enum_val": shared.Int32EnumVal.SIXTY_NINE,
        "int32_val": 1,
        "int_enum_val": shared.IntEnumVal.THIRD,
        "int_opt_null_val": 999999,
        "int_val": 999999,
        "num_opt_null_val": 1.1,
        "num_val": 1.1,
        "str_opt_val": "optional example",
        "str_val": "example",
    })
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostApplicationJSONSimpleCamelCaseRes(
            json_=shared.SimpleObjectCamelCase(
                any_val="any example",
                bool_opt_val=True,
                bool_val=True,
                date_time_val=dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                date_val=dateutil.parser.parse("2020-01-01").date(),
                enum_val=shared.EnumT.ONE,
                float32_val=2.2222222,
                int32_enum_val=shared.Int32EnumVal.SIXTY_NINE,
                int32_val=1,
                int_enum_val=shared.IntEnumVal.THIRD,
                int_opt_null_val=999999,
                int_val=999999,
                num_opt_null_val=1.1,
                num_val=1.1,
                str_opt_val="optional example",
                str_val="example",
            ),
        )

def test_request_bodies_request_body_post_complex_number_types():
    record_test("request-bodies-complex-number-types")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_complex_number_types(request={
        "complex_number_types": {
            "bigint": 8821239038968084,
            "bigint_str": 9223372036854775808,
            "decimal": Decimal("3.141592653589793"),
            "decimal_str": Decimal("3.14159265358979344719667586"),
        },
        "path_big_int": 8821239038968084,
        "path_big_int_str": 9223372036854775808,
        "path_decimal": Decimal("3.141592653589793"),
        "path_decimal_str": Decimal("3.14159265358979344719667586"),
        "query_big_int": 8821239038968084,
        "query_big_int_str": 9223372036854775808,
        "query_decimal": Decimal("3.141592653589793"),
        "query_decimal_str": Decimal("3.14159265358979344719667586"),
    })
    assert res is not None
    assert res is not None
    assert res.json_ == shared.ComplexNumberTypes(
            bigint=8821239038968084,
            bigint_str=9223372036854775808,
            decimal=Decimal("3.141592653589793"),
            decimal_str=Decimal("3.14159265358979344719667586"),
        )
    assert sort_query_parameters(res.url) == "http://localhost:35123/anything/requestBodies/post/8821239038968084/9223372036854775808/3.141592653589793/3.14159265358979344719667586/complex-number-types?queryBigInt=8821239038968084&queryBigIntStr=9223372036854775808&queryDecimal=3.141592653589793&queryDecimalStr=3.14159265358979344719667586"

def test_request_bodies_request_body_post_defaults_and_consts():
    record_test("request-bodies-defaults-and-consts")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_defaults_and_consts(request={
        "normal_field": "test",
    })
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostDefaultsAndConstsResponseBody(
            json_=shared.DefaultsAndConstsOutput(
                const_big_int=9007199254740991,
                const_big_int_str=9223372036854775807,
                const_bool=True,
                const_date=dateutil.parser.parse("2020-01-01").date(),
                const_date_time=dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                const_decimal=Decimal("3.141592653589793"),
                const_decimal_str=Decimal("3.141592653589793238462643383279"),
                const_enum_int=shared.DefaultsAndConstsOutputConstEnumInt.TWO,
                const_enum_str=shared.DefaultsAndConstsOutputConstEnumStr.TWO,
                const_int=123,
                const_num=123.456,
                const_str="const",
                const_str_d_quotes="const with \"double quotes\"",
                const_str_null=None,
                const_str_s_quotes="const with 'single quotes'",
                default_big_int=9007199254740991,
                default_big_int_str=9223372036854775807,
                default_bool=True,
                default_date=dateutil.parser.parse("2020-01-01").date(),
                default_date_time=dateutil.parser.isoparse("2020-01-01T00:00:00Z"),
                default_decimal=Decimal("3.141592653589793"),
                default_decimal_str=Decimal("3.141592653589793238462643383279"),
                default_enum_int=shared.DefaultsAndConstsOutputDefaultEnumInt.TWO,
                default_enum_str=shared.DefaultsAndConstsOutputDefaultEnumStr.TWO,
                default_int=123,
                default_num=123.456,
                default_str="default",
                default_str_d_quotes="default with \"double quotes\"",
                default_str_nullable=None,
                default_str_optional="default",
                default_str_s_quotes="default with 'single quotes'",
                normal_field="test",
            ),
        )

def test_request_bodies_request_body_post_empty_object():
    record_test("request-bodies-post-empty-object")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_empty_object(request={})
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostEmptyObjectResponseBody()

def test_request_bodies_request_body_post_form_deep():
    record_test("request-bodies-post-form-deep")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_form_deep(request={
        "any": {
            "any": "any",
            "bigint": 8821239038968084,
            "bigint_str": 9223372036854775808,
            "bool_": True,
            "bool_opt": True,
            "date": dateutil.parser.parse("2020-01-01").date(),
            "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
            "decimal": Decimal("3.141592653589793"),
            "decimal_str": Decimal("3.14159265358979344719667586"),
            "enum": shared.EnumT.ONE,
            "float32": 1.1,
            "float64_str": 1.1,
            "int_": 1,
            "int32": 1,
            "int32_enum": shared.Int32Enum.FIFTY_FIVE,
            "int64_str": 100,
            "int_enum": shared.IntEnum.SECOND,
            "num": 1.1,
            "str_": "test",
            "str_opt": "testOptional",
        },
        "arr": [
            {
                "any": "any",
                "bigint": 8821239038968084,
                "bigint_str": 9223372036854775808,
                "bool_": True,
                "bool_opt": True,
                "date": dateutil.parser.parse("2020-01-01").date(),
                "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                "decimal": Decimal("3.141592653589793"),
                "decimal_str": Decimal("3.14159265358979344719667586"),
                "enum": shared.EnumT.ONE,
                "float32": 1.1,
                "float64_str": 1.1,
                "int_": 1,
                "int32": 1,
                "int32_enum": shared.Int32Enum.FIFTY_FIVE,
                "int64_str": 100,
                "int_enum": shared.IntEnum.SECOND,
                "num": 1.1,
                "str_": "test",
                "str_opt": "testOptional",
            },
            {
                "any": "any",
                "bigint": 8821239038968084,
                "bigint_str": 9223372036854775808,
                "bool_": True,
                "bool_opt": True,
                "date": dateutil.parser.parse("2020-01-01").date(),
                "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                "decimal": Decimal("3.141592653589793"),
                "decimal_str": Decimal("3.14159265358979344719667586"),
                "enum": shared.EnumT.ONE,
                "float32": 1.1,
                "float64_str": 1.1,
                "int_": 1,
                "int32": 1,
                "int32_enum": shared.Int32Enum.FIFTY_FIVE,
                "int64_str": 100,
                "int_enum": shared.IntEnum.SECOND,
                "num": 1.1,
                "str_": "test",
                "str_opt": "testOptional",
            },
        ],
        "bool_": True,
        "int_": 1,
        "map": {
            "key": {
                "any": "any",
                "bigint": 8821239038968084,
                "bigint_str": 9223372036854775808,
                "bool_": True,
                "bool_opt": True,
                "date": dateutil.parser.parse("2020-01-01").date(),
                "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                "decimal": Decimal("3.141592653589793"),
                "decimal_str": Decimal("3.14159265358979344719667586"),
                "enum": shared.EnumT.ONE,
                "float32": 1.1,
                "float64_str": 1.1,
                "int_": 1,
                "int32": 1,
                "int32_enum": shared.Int32Enum.FIFTY_FIVE,
                "int64_str": 100,
                "int_enum": shared.IntEnum.SECOND,
                "num": 1.1,
                "str_": "test",
                "str_opt": "testOptional",
            },
            "key2": {
                "any": "any",
                "bigint": 8821239038968084,
                "bigint_str": 9223372036854775808,
                "bool_": True,
                "bool_opt": True,
                "date": dateutil.parser.parse("2020-01-01").date(),
                "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                "decimal": Decimal("3.141592653589793"),
                "decimal_str": Decimal("3.14159265358979344719667586"),
                "enum": shared.EnumT.ONE,
                "float32": 1.1,
                "float64_str": 1.1,
                "int_": 1,
                "int32": 1,
                "int32_enum": shared.Int32Enum.FIFTY_FIVE,
                "int64_str": 100,
                "int_enum": shared.IntEnum.SECOND,
                "num": 1.1,
                "str_": "test",
                "str_opt": "testOptional",
            },
        },
        "num": 1.1,
        "obj": {
            "any": "any",
            "bigint": 8821239038968084,
            "bigint_str": 9223372036854775808,
            "bool_": True,
            "bool_opt": True,
            "date": dateutil.parser.parse("2020-01-01").date(),
            "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
            "decimal": Decimal("3.141592653589793"),
            "decimal_str": Decimal("3.14159265358979344719667586"),
            "enum": shared.EnumT.ONE,
            "float32": 1.1,
            "float64_str": 1.1,
            "int_": 1,
            "int32": 1,
            "int32_enum": shared.Int32Enum.FIFTY_FIVE,
            "int64_str": 100,
            "int_enum": shared.IntEnum.SECOND,
            "num": 1.1,
            "str_": "test",
            "str_opt": "testOptional",
        },
        "str_": "test",
    })
    assert res is not None
    assert res is not None
    assert sanitize_timestamp(res.form.arr) == "[{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"float64Str\":\"1.1\",\"int\":1,\"int32\":1,\"int32Enum\":55,\"int64Str\":\"100\",\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"},{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"float64Str\":\"1.1\",\"int\":1,\"int32\":1,\"int32Enum\":55,\"int64Str\":\"100\",\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"}]"
    assert res.form.bool_ == "true"
    assert res.form.int_ == "1"
    assert sanitize_timestamp(res.form.map) == "{\"key\":{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"float64Str\":\"1.1\",\"int\":1,\"int32\":1,\"int32Enum\":55,\"int64Str\":\"100\",\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"},\"key2\":{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"float64Str\":\"1.1\",\"int\":1,\"int32\":1,\"int32Enum\":55,\"int64Str\":\"100\",\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"}}"
    assert res.form.num == "1.1"
    assert sanitize_timestamp(res.form.obj) == "{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"float64Str\":\"1.1\",\"int\":1,\"int32\":1,\"int32Enum\":55,\"int64Str\":\"100\",\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"}"
    assert res.form.str_ == "test"

def test_request_bodies_request_body_post_form_map_primitive():
    record_test("request-bodies-post-form-map-primitive")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_form_map_primitive(request={
        "key1": "value1",
        "key2": "value2",
        "key3": "value3",
    })
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostFormMapPrimitiveRes(
            form={
                "key1": "value1",
                "key2": "value2",
                "key3": "value3",
            },
        )

def test_request_bodies_request_body_post_form_simple():
    record_test("request-bodies-post-form-simple")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_form_simple(request={
        "any": "any",
        "bigint": 8821239038968084,
        "bigint_str": 9223372036854775808,
        "bool_": True,
        "bool_opt": True,
        "date": dateutil.parser.parse("2020-01-01").date(),
        "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
        "decimal": Decimal("3.141592653589793"),
        "decimal_str": Decimal("3.14159265358979344719667586"),
        "enum": shared.EnumT.ONE,
        "float32": 1.1,
        "float64_str": 1.1,
        "int_": 1,
        "int32": 1,
        "int32_enum": shared.Int32Enum.FIFTY_FIVE,
        "int64_str": 100,
        "int_enum": shared.IntEnum.SECOND,
        "num": 1.1,
        "str_": "test",
        "str_opt": "testOptional",
    })
    assert res is not None
    assert res is not None
    assert res.form.any == "any"
    assert res.form.bigint is not None
    assert res.form.bigint == "8821239038968084"
    assert res.form.bigint_str is not None
    assert res.form.bigint_str == "9223372036854775808"
    assert res.form.bool_ == "true"
    assert res.form.bool_opt is not None
    assert res.form.bool_opt == "true"
    assert res.form.date == "2020-01-01"
    assert sanitize_timestamp(res.form.date_time) == "2020-01-01T00:00:00.001Z"
    assert res.form.decimal is not None
    assert res.form.decimal == "3.141592653589793"
    assert res.form.decimal_str is not None
    assert res.form.decimal_str == "3.14159265358979344719667586"
    assert res.form.enum == "one"
    assert res.form.float32 == "1.1"
    assert res.form.int_ == "1"
    assert res.form.int32 == "1"
    assert res.form.int32_enum == "55"
    assert res.form.int_enum == "2"
    assert res.form.int_opt_null is None
    assert res.form.num == "1.1"
    assert res.form.num_opt_null is None
    assert res.form.str_ == "test"
    assert res.form.str_opt is not None
    assert res.form.str_opt == "testOptional"

def test_request_bodies_request_body_post_json_data_types_array_big_int():
    record_test("request-bodies-post-json-data-types-array-bigint")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_array_big_int(request=[
        1,
    ])
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostJSONDataTypesArrayBigIntResponseBody(
            data="[1]",
            json_=[
                1,
            ],
        )

def test_request_bodies_request_body_post_json_data_types_array_date():
    record_test("request-bodies-post-json-data-types-array-date")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_array_date(request=[
        dateutil.parser.parse("2020-01-01").date(),
    ])
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostJSONDataTypesArrayDateResponseBody(
            data="[\"2020-01-01\"]",
            json_=[
                dateutil.parser.parse("2020-01-01").date(),
            ],
        )

def test_request_bodies_request_body_post_json_data_types_array_decimal_str():
    record_test("request-bodies-post-json-data-types-array-decimal-str")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_array_decimal_str(request=[
        Decimal("3.141592653589793438462643383279"),
    ])
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostJSONDataTypesArrayDecimalStrResponseBody(
            data="[\"3.141592653589793438462643383279\"]",
            json_=[
                Decimal("3.141592653589793438462643383279"),
            ],
        )

def test_request_bodies_request_body_post_json_data_types_big_int():
    record_test("request-bodies-post-json-data-types-bigint")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_big_int(request=1)
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostJSONDataTypesBigIntResponseBody(
            data="1",
            json_=1,
        )

def test_request_bodies_request_body_post_json_data_types_big_int_str():
    record_test("request-bodies-post-json-data-types-bigint-str")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_big_int_str(request=1)
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostJSONDataTypesBigIntStrResponseBody(
            data="\"1\"",
            json_=1,
        )

def test_request_bodies_request_body_post_json_data_types_boolean():
    record_test("request-bodies-post-json-data-types-boolean")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_boolean(request=True)
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostJSONDataTypesBooleanResponseBody(
            json_=True,
        )

def test_request_bodies_request_body_post_json_data_types_complex_number_arrays_test():
    record_test("request-bodies-post-json-data-types-complex-number-arrays")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_complex_number_arrays(request={
        "decimal_array": [
            Decimal("3.141592653589793"),
        ],
        "decimal_str_array": [
            Decimal("3.141592653589793238462643383279"),
        ],
    })
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostJSONDataTypesComplexNumberArraysRes(
            json_=shared.ComplexNumberArrays(
                decimal_array=[
                    Decimal("3.141592653589793"),
                ],
                decimal_str_array=[
                    Decimal("3.141592653589793238462643383279"),
                ],
            ),
        )

def test_request_bodies_request_body_post_json_data_types_complex_number_maps_test():
    record_test("request-bodies-post-json-data-types-complex-number-maps")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_complex_number_maps(request={
        "bigint_map": {
            "bigint": 9007199254740991,
        },
        "bigint_str_map": {
            "bigint": 9223372036854775807,
        },
        "decimal_map": {
            "decimal": Decimal("3.141592653589793"),
        },
        "decimal_str_map": {
            "decimal": Decimal("3.141592653589793238462643383279"),
        },
    })
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostJSONDataTypesComplexNumberMapsRes(
            json_=shared.ComplexNumberMaps(
                bigint_map={
                    "bigint": 9007199254740991,
                },
                bigint_str_map={
                    "bigint": 9223372036854775807,
                },
                decimal_map={
                    "decimal": Decimal("3.141592653589793"),
                },
                decimal_str_map={
                    "decimal": Decimal("3.141592653589793238462643383279"),
                },
            ),
        )

def test_request_bodies_request_body_post_json_data_types_date():
    record_test("request-bodies-post-json-data-types-date")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_date(request=dateutil.parser.parse("2020-01-01").date())
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostJSONDataTypesDateResponseBody(
            data="\"2020-01-01\"",
            json_=dateutil.parser.parse("2020-01-01").date(),
        )

def test_request_bodies_request_body_post_json_data_types_date_time():
    record_test("request-bodies-post-json-data-types-date-time")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_date_time(request=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"))
    assert res is not None
    assert res is not None
    assert sanitize_timestamp(res.data) == "\"2020-01-01T00:00:00.001Z\""
    assert res.json_ == dateutil.parser.isoparse("2020-01-01T00:00:00.001Z")

def test_request_bodies_request_body_post_json_data_types_decimal():
    record_test("request-bodies-post-json-data-types-decimal")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_decimal(request=Decimal("1.1"))
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostJSONDataTypesDecimalResponseBody(
            data="1.1",
            json_=Decimal("1.1"),
        )

def test_request_bodies_request_body_post_json_data_types_decimal_str():
    record_test("request-bodies-post-json-data-types-decimal-str")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_decimal_str(request=Decimal("1.1"))
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostJSONDataTypesDecimalStrResponseBody(
            data="\"1.1\"",
            json_=Decimal("1.1"),
        )

def test_request_bodies_request_body_post_json_data_types_float32():
    record_test("request-bodies-post-json-data-types-float32")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_float32(request=1.1)
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostJSONDataTypesFloat32ResponseBody(
            json_=1.1,
        )

def test_request_bodies_request_body_post_json_data_types_int32():
    record_test("request-bodies-post-json-data-types-int32")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_int32(request=1)
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostJSONDataTypesInt32ResponseBody(
            json_=1,
        )

def test_request_bodies_request_body_post_json_data_types_integer():
    record_test("request-bodies-post-json-data-types-integer")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_integer(request=1)
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostJSONDataTypesIntegerResponseBody(
            json_=1,
        )

def test_request_bodies_request_body_post_json_data_types_map_big_int_str():
    record_test("request-bodies-post-json-data-types-map-bigint-str")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_map_big_int_str(request={
        "test": 1,
    })
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostJSONDataTypesMapBigIntStrResponseBody(
            data="{\"test\":\"1\"}",
            json_={
                "test": 1,
            },
        )

def test_request_bodies_request_body_post_json_data_types_map_date_time():
    record_test("request-bodies-post-json-data-types-map-date-time")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_map_date_time(request={
        "test": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
    })
    assert res is not None
    assert res is not None
    assert sanitize_timestamp(res.data) == "{\"test\":\"2020-01-01T00:00:00.001Z\"}"
    assert res.json_ == {
            "test": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
        }

def test_request_bodies_request_body_post_json_data_types_map_decimal():
    record_test("request-bodies-post-json-data-types-map-decimal")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_map_decimal(request={
        "test": Decimal("3.141592653589793"),
    })
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostJSONDataTypesMapDecimalResponseBody(
            data="{\"test\":3.141592653589793}",
            json_={
                "test": Decimal("3.141592653589793"),
            },
        )

def test_request_bodies_request_body_post_json_data_types_number():
    record_test("request-bodies-post-json-data-types-number")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_number(request=1.1)
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostJSONDataTypesNumberResponseBody(
            json_=1.1,
        )

def test_request_bodies_request_body_post_json_data_types_string():
    record_test("request-bodies-post-json-data-types-string")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_json_data_types_string(request="test")
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostJSONDataTypesStringResponseBody(
            json_="test",
        )

def test_request_bodies_request_body_post_multiple_content_types_component_filtered():
    record_test("request-bodies-post-multiple-content-types-component-filtered")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_multiple_content_types_component_filtered(request={
        "any": "any",
        "bigint": 8821239038968084,
        "bigint_str": 9223372036854775808,
        "bool_": True,
        "bool_opt": True,
        "date": dateutil.parser.parse("2020-01-01").date(),
        "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
        "decimal": Decimal("3.141592653589793"),
        "decimal_str": Decimal("3.14159265358979344719667586"),
        "enum": shared.EnumT.ONE,
        "float32": 1.1,
        "float64_str": 1.1,
        "int_": 1,
        "int32": 1,
        "int32_enum": shared.Int32Enum.FIFTY_FIVE,
        "int64_str": 100,
        "int_enum": shared.IntEnum.SECOND,
        "num": 1.1,
        "str_": "test",
        "str_opt": "testOptional",
    })
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostMultipleContentTypesComponentFilteredRes(
            json_=shared.SimpleObject(
                any="any",
                bigint=8821239038968084,
                bigint_str=9223372036854775808,
                bool_=True,
                bool_opt=True,
                date=dateutil.parser.parse("2020-01-01").date(),
                date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                decimal=Decimal("3.141592653589793"),
                decimal_str=Decimal("3.14159265358979344719667586"),
                enum=shared.EnumT.ONE,
                float32=1.1,
                float64_str=1.1,
                int_=1,
                int32=1,
                int32_enum=shared.Int32Enum.FIFTY_FIVE,
                int64_str=100,
                int_enum=shared.IntEnum.SECOND,
                num=1.1,
                str_="test",
                str_opt="testOptional",
            ),
        )

def test_request_bodies_request_body_post_multiple_content_types_inline_filtered():
    record_test("request-bodies-post-multiple-content-types-inline-filtered")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_multiple_content_types_inline_filtered(request={
        "bool_": True,
        "num": 1.1,
        "str_": "test",
    })
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostMultipleContentTypesInlineFilteredRes(
            json_={
                "bool": True,
                "num": 1.1,
                "str": "test",
            },
        )

def test_request_bodies_request_body_post_not_nullable_not_required_string_body():
    record_test("request-bodies-post-not-nullable-not-required-string-body")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_not_nullable_not_required_string_body()
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostNotNullableNotRequiredStringBodyResponseBody(
            data="",
        )

def test_request_bodies_request_body_post_null_array():
    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_null_array(request=[
        "value1",
        "value2",
        "value3",
    ])
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostNullArrayResponseBody(
            data="[\"value1\",\"value2\",\"value3\"]",
        )

def test_request_bodies_request_body_post_null_dictionary():
    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_null_dictionary(request={
        "key1": "value1",
        "key2": "value2",
        "key3": "value3",
    })
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostNullDictionaryResponseBody(
            data="{\"key1\":\"value1\",\"key2\":\"value2\",\"key3\":\"value3\"}",
        )

def test_request_bodies_request_body_post_nullable_not_required_string_body():
    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_nullable_not_required_string_body(request=None)
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostNullableNotRequiredStringBodyResponseBody(
            data="null",
        )

def test_request_bodies_request_body_post_nullable_required_string_body():
    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_post_nullable_required_string_body(request=None)
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPostNullableRequiredStringBodyResponseBody(
            data="null",
        )

def test_request_bodies_request_body_put_multipart_deep():
    record_test("request-bodies-put-multipart-deep")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_put_multipart_deep(request={
        "any": {
            "any": "any",
            "bigint": 8821239038968084,
            "bigint_str": 9223372036854775808,
            "bool_": True,
            "bool_opt": True,
            "date": dateutil.parser.parse("2020-01-01").date(),
            "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
            "decimal": Decimal("3.141592653589793"),
            "decimal_str": Decimal("3.14159265358979344719667586"),
            "enum": shared.EnumT.ONE,
            "float32": 1.1,
            "float64_str": 1.1,
            "int_": 1,
            "int32": 1,
            "int32_enum": shared.Int32Enum.FIFTY_FIVE,
            "int64_str": 100,
            "int_enum": shared.IntEnum.SECOND,
            "num": 1.1,
            "str_": "test",
            "str_opt": "testOptional",
        },
        "arr": [
            {
                "any": "any",
                "bigint": 8821239038968084,
                "bigint_str": 9223372036854775808,
                "bool_": True,
                "bool_opt": True,
                "date": dateutil.parser.parse("2020-01-01").date(),
                "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                "decimal": Decimal("3.141592653589793"),
                "decimal_str": Decimal("3.14159265358979344719667586"),
                "enum": shared.EnumT.ONE,
                "float32": 1.1,
                "float64_str": 1.1,
                "int_": 1,
                "int32": 1,
                "int32_enum": shared.Int32Enum.FIFTY_FIVE,
                "int64_str": 100,
                "int_enum": shared.IntEnum.SECOND,
                "num": 1.1,
                "str_": "test",
                "str_opt": "testOptional",
            },
            {
                "any": "any",
                "bigint": 8821239038968084,
                "bigint_str": 9223372036854775808,
                "bool_": True,
                "bool_opt": True,
                "date": dateutil.parser.parse("2020-01-01").date(),
                "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                "decimal": Decimal("3.141592653589793"),
                "decimal_str": Decimal("3.14159265358979344719667586"),
                "enum": shared.EnumT.ONE,
                "float32": 1.1,
                "float64_str": 1.1,
                "int_": 1,
                "int32": 1,
                "int32_enum": shared.Int32Enum.FIFTY_FIVE,
                "int64_str": 100,
                "int_enum": shared.IntEnum.SECOND,
                "num": 1.1,
                "str_": "test",
                "str_opt": "testOptional",
            },
        ],
        "bool_": True,
        "int_": 1,
        "map": {
            "key": {
                "any": "any",
                "bigint": 8821239038968084,
                "bigint_str": 9223372036854775808,
                "bool_": True,
                "bool_opt": True,
                "date": dateutil.parser.parse("2020-01-01").date(),
                "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                "decimal": Decimal("3.141592653589793"),
                "decimal_str": Decimal("3.14159265358979344719667586"),
                "enum": shared.EnumT.ONE,
                "float32": 1.1,
                "float64_str": 1.1,
                "int_": 1,
                "int32": 1,
                "int32_enum": shared.Int32Enum.FIFTY_FIVE,
                "int64_str": 100,
                "int_enum": shared.IntEnum.SECOND,
                "num": 1.1,
                "str_": "test",
                "str_opt": "testOptional",
            },
            "key2": {
                "any": "any",
                "bigint": 8821239038968084,
                "bigint_str": 9223372036854775808,
                "bool_": True,
                "bool_opt": True,
                "date": dateutil.parser.parse("2020-01-01").date(),
                "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
                "decimal": Decimal("3.141592653589793"),
                "decimal_str": Decimal("3.14159265358979344719667586"),
                "enum": shared.EnumT.ONE,
                "float32": 1.1,
                "float64_str": 1.1,
                "int_": 1,
                "int32": 1,
                "int32_enum": shared.Int32Enum.FIFTY_FIVE,
                "int64_str": 100,
                "int_enum": shared.IntEnum.SECOND,
                "num": 1.1,
                "str_": "test",
                "str_opt": "testOptional",
            },
        },
        "num": 1.1,
        "obj": {
            "any": "any",
            "bigint": 8821239038968084,
            "bigint_str": 9223372036854775808,
            "bool_": True,
            "bool_opt": True,
            "date": dateutil.parser.parse("2020-01-01").date(),
            "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
            "decimal": Decimal("3.141592653589793"),
            "decimal_str": Decimal("3.14159265358979344719667586"),
            "enum": shared.EnumT.ONE,
            "float32": 1.1,
            "float64_str": 1.1,
            "int_": 1,
            "int32": 1,
            "int32_enum": shared.Int32Enum.FIFTY_FIVE,
            "int64_str": 100,
            "int_enum": shared.IntEnum.SECOND,
            "num": 1.1,
            "str_": "test",
            "str_opt": "testOptional",
        },
        "str_": "test",
    })
    assert res is not None
    assert res is not None
    assert sanitize_timestamp(res.form.arr) == "[{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"float64Str\":\"1.1\",\"int\":1,\"int32\":1,\"int32Enum\":55,\"int64Str\":\"100\",\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"},{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"float64Str\":\"1.1\",\"int\":1,\"int32\":1,\"int32Enum\":55,\"int64Str\":\"100\",\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"}]"
    assert res.form.bool_ == "true"
    assert res.form.int_ == "1"
    assert sanitize_timestamp(res.form.map) == "{\"key\":{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"float64Str\":\"1.1\",\"int\":1,\"int32\":1,\"int32Enum\":55,\"int64Str\":\"100\",\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"},\"key2\":{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"float64Str\":\"1.1\",\"int\":1,\"int32\":1,\"int32Enum\":55,\"int64Str\":\"100\",\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"}}"
    assert res.form.num == "1.1"
    assert sanitize_timestamp(res.form.obj) == "{\"any\":\"any\",\"bigint\":8821239038968084,\"bigintStr\":\"9223372036854775808\",\"bool\":true,\"boolOpt\":true,\"date\":\"2020-01-01\",\"dateTime\":\"2020-01-01T00:00:00.001Z\",\"decimal\":3.141592653589793,\"decimalStr\":\"3.14159265358979344719667586\",\"enum\":\"one\",\"float32\":1.1,\"float64Str\":\"1.1\",\"int\":1,\"int32\":1,\"int32Enum\":55,\"int64Str\":\"100\",\"intEnum\":2,\"num\":1.1,\"str\":\"test\",\"strOpt\":\"testOptional\"}"
    assert res.form.str_ == "test"

def test_request_bodies_request_body_put_multipart_simple():
    record_test("request-bodies-put-multipart-simple")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_put_multipart_simple(request={
        "any": "any",
        "bigint": 8821239038968084,
        "bigint_str": 9223372036854775808,
        "bool_": True,
        "bool_opt": True,
        "date": dateutil.parser.parse("2020-01-01").date(),
        "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
        "decimal": Decimal("3.141592653589793"),
        "decimal_str": Decimal("3.14159265358979344719667586"),
        "enum": shared.EnumT.ONE,
        "float32": 1.1,
        "float64_str": 1.1,
        "int_": 1,
        "int32": 1,
        "int32_enum": shared.Int32Enum.FIFTY_FIVE,
        "int64_str": 100,
        "int_enum": shared.IntEnum.SECOND,
        "num": 1.1,
        "str_": "test",
        "str_opt": "testOptional",
    })
    assert res is not None
    assert res is not None
    assert res.form.any == "any"
    assert res.form.bigint is not None
    assert res.form.bigint == "8821239038968084"
    assert res.form.bigint_str is not None
    assert res.form.bigint_str == "9223372036854775808"
    assert res.form.bool_ == "true"
    assert res.form.bool_opt is not None
    assert res.form.bool_opt == "true"
    assert res.form.date == "2020-01-01"
    assert sanitize_timestamp(res.form.date_time) == "2020-01-01T00:00:00.001Z"
    assert res.form.decimal is not None
    assert res.form.decimal == "3.141592653589793"
    assert res.form.decimal_str is not None
    assert res.form.decimal_str == "3.14159265358979344719667586"
    assert res.form.enum == "one"
    assert res.form.float32 == "1.1"
    assert res.form.int_ == "1"
    assert res.form.int32 == "1"
    assert res.form.int32_enum == "55"
    assert res.form.int_enum == "2"
    assert res.form.int_opt_null is None
    assert res.form.num == "1.1"
    assert res.form.num_opt_null is None
    assert res.form.str_ == "test"
    assert res.form.str_opt is not None
    assert res.form.str_opt == "testOptional"

def test_request_bodies_request_body_put_string():
    record_test("request-bodies-put-string")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_put_string(request="Hello World")
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPutStringRes(
            data="Hello World",
        )

def test_request_bodies_request_body_put_string_with_params():
    record_test("request-bodies-put-string-with-params")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_put_string_with_params(query_string_param="test param", request_body="Hello world")
    assert res is not None
    assert res is not None
    assert res == operations.RequestBodyPutStringWithParamsRes(
            args=operations.RequestBodyPutStringWithParamsArgs(
                query_string_param="test param",
            ),
            data="Hello world",
        )

def test_request_bodies_request_body_read_and_write():
    record_test("request-bodies-read-and-write")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_read_and_write(request={
        "num1": 1,
        "num2": 2,
        "num3": 4,
    })
    assert res is not None
    assert res is not None
    assert res == shared.ReadWriteObjectOutput(
            num3=4,
            sum=7,
        )

def test_request_bodies_request_body_read_only_input():
    record_test("request-bodies-read-only-input")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_read_only_input(request={})
    assert res is not None
    assert res is not None
    assert res == shared.ReadOnlyObject(
            bool_=True,
            num=1,
            string="hello",
        )

def test_request_bodies_request_body_read_only_union():
    record_test("request-bodies-read-only-union")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_read_only_union(request={})
    assert res is not None
    assert res is not None
    assert res == shared.ReadOnlyObject(
            bool_=True,
            num=1,
            string="hello",
        )

def test_request_bodies_request_body_read_write_only_union():
    record_test("request-bodies-read-write-only-union")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_read_write_only_union(request={
        "num1": 1,
        "num2": 2,
        "num3": 4,
    })
    assert res is not None
    assert res is not None
    assert res == shared.ReadWriteObjectOutput(
            num3=4,
            sum=7,
        )

def test_request_bodies_request_body_write_only():
    record_test("request-bodies-write-only")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_write_only(request={
        "bool_": True,
        "num": 1,
        "string": "hello",
    })
    assert res is not None
    assert res is not None
    assert res == shared.ReadOnlyObject(
            bool_=True,
            num=1,
            string="hello",
        )

def test_request_bodies_request_body_write_only_output():
    record_test("request-bodies-write-only-output")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_write_only_output(request={
        "bool_": True,
        "num": 1,
        "string": "hello",
    })
    assert res is not None
    assert res is not None
    assert res == shared.WriteOnlyObjectOutput()

def test_request_bodies_request_body_write_only_union_write_only_object():
    record_test("request-bodies-write-only-union")

    s = SDK(
        security=shared.Security(
            api_key_auth="Token YOUR_API_KEY",
        ),
    )
    
    assert s is not None

    
    res = s.request_bodies.request_body_write_only_union(request={
        "bool_": True,
        "num": 1,
        "string": "hello",
    })
    assert res is not None
    assert res is not None
    assert res == shared.WriteOnlyObjectOutput()
