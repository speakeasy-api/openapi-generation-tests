"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .common_helpers import *
import dateutil.parser
from decimal import Decimal
from openapi import SDK
from openapi.models import operations, shared

def test_request_bodies_request_body_deprecated_request_body_ref_post():
    record_test("request-bodies-deprecated-request-body-ref")

    s = SDK()

    assert s is not None

    res = s.request_bodies.request_body_deprecated_request_body_ref_post(request={
        "str_": "testvalue",
    })
    assert res is not None
    assert res == operations.RequestBodyDeprecatedRequestBodyRefPostResponseBody(
        json_=shared.DeprecatedObjectWithExample(
            str_="testvalue",
        ),
    )

def test_request_bodies_request_body_post_multiple_content_types_component_filtered_application_json():
    record_test("request-bodies-post-multiple-content-types-component-filtered-application-json")

    s = SDK()

    assert s is not None

    res = s.request_bodies.request_body_post_multiple_content_types_component_filtered(request={
        "any": "any",
        "bigint": 8821239038968084,
        "bigint_str": 9223372036854775808,
        "bool_": True,
        "bool_opt": True,
        "date_": dateutil.parser.parse("2020-01-01").date(),
        "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
        "decimal": Decimal("3.141592653589793"),
        "decimal_str": Decimal("3.14159265358979344719667586"),
        "enum": shared.EnumT.ONE,
        "float32": 1.1,
        "float64_str": 1.1,
        "int_": 1,
        "int32": 1,
        "int32_enum": shared.Int32Enum.FIFTY_FIVE,
        "int64_str": 100,
        "int_enum": shared.IntEnum.SECOND,
        "num": 1.1,
        "str_": "test",
        "str_opt": "testOptional",
    })
    assert res is not None
    assert res == operations.RequestBodyPostMultipleContentTypesComponentFilteredRes(
        json_=shared.SimpleObject(
            any="any",
            bigint=8821239038968084,
            bigint_str=9223372036854775808,
            bool_=True,
            bool_opt=True,
            date_=dateutil.parser.parse("2020-01-01").date(),
            date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
            decimal=Decimal("3.141592653589793"),
            decimal_str=Decimal("3.14159265358979344719667586"),
            enum=shared.EnumT.ONE,
            float32=1.1,
            float64_str=1.1,
            int_=1,
            int32=1,
            int32_enum=shared.Int32Enum.FIFTY_FIVE,
            int64_str=100,
            int_enum=shared.IntEnum.SECOND,
            num=1.1,
            str_="test",
            str_opt="testOptional",
        ),
    )

def test_request_bodies_request_body_post_multiple_content_types_component_filtered_multipart_form_data():
    record_test("request-bodies-post-multiple-content-types-component-filtered-multipart-form-data")

    s = SDK()

    assert s is not None

    res = s.request_bodies.request_body_post_multiple_content_types_component_filtered(request={
        "any": "any",
        "bigint": 8821239038968084,
        "bigint_str": 9223372036854775808,
        "bool_": True,
        "bool_opt": True,
        "date_": dateutil.parser.parse("2020-01-01").date(),
        "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
        "decimal": Decimal("3.141592653589793"),
        "decimal_str": Decimal("3.14159265358979344719667586"),
        "enum": shared.EnumT.ONE,
        "float32": 1.1,
        "float64_str": 1.1,
        "int_": 1,
        "int32": 1,
        "int32_enum": shared.Int32Enum.FIFTY_FIVE,
        "int64_str": 100,
        "int_enum": shared.IntEnum.SECOND,
        "num": 1.1,
        "str_": "test",
        "str_opt": "testOptional",
    })
    assert res is not None
    assert res == operations.RequestBodyPostMultipleContentTypesComponentFilteredRes(
        json_=shared.SimpleObject(
            any="any",
            bigint=8821239038968084,
            bigint_str=9223372036854775808,
            bool_=True,
            bool_opt=True,
            date_=dateutil.parser.parse("2020-01-01").date(),
            date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
            decimal=Decimal("3.141592653589793"),
            decimal_str=Decimal("3.14159265358979344719667586"),
            enum=shared.EnumT.ONE,
            float32=1.1,
            float64_str=1.1,
            int_=1,
            int32=1,
            int32_enum=shared.Int32Enum.FIFTY_FIVE,
            int64_str=100,
            int_enum=shared.IntEnum.SECOND,
            num=1.1,
            str_="test",
            str_opt="testOptional",
        ),
    )

def test_request_bodies_request_body_post_multiple_content_types_component_filtered_default_test():
    s = SDK()

    assert s is not None

    res = s.request_bodies.request_body_post_multiple_content_types_component_filtered_default_test(request={
        "any": "any",
        "bigint": 8821239038968084,
        "bigint_str": 9223372036854775808,
        "bool_": True,
        "bool_opt": True,
        "date_": dateutil.parser.parse("2020-01-01").date(),
        "date_time": dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
        "decimal": Decimal("3.141592653589793"),
        "decimal_str": Decimal("3.14159265358979344719667586"),
        "enum": shared.EnumT.ONE,
        "float32": 1.1,
        "float64_str": 1.1,
        "int_": 1,
        "int32": 1,
        "int32_enum": shared.Int32Enum.FIFTY_FIVE,
        "int64_str": 100,
        "int_enum": shared.IntEnum.SECOND,
        "num": 1.1,
        "str_": "test",
        "str_opt": "testOptional",
    })
    assert res is not None
    assert res == operations.RequestBodyPostMultipleContentTypesComponentFilteredDefaultTestRes(
        json_=shared.SimpleObject(
            any="any",
            bigint=8821239038968084,
            bigint_str=9223372036854775808,
            bool_=True,
            bool_opt=True,
            date_=dateutil.parser.parse("2020-01-01").date(),
            date_time=dateutil.parser.isoparse("2020-01-01T00:00:00.001Z"),
            decimal=Decimal("3.141592653589793"),
            decimal_str=Decimal("3.14159265358979344719667586"),
            enum=shared.EnumT.ONE,
            float32=1.1,
            float64_str=1.1,
            int_=1,
            int32=1,
            int32_enum=shared.Int32Enum.FIFTY_FIVE,
            int64_str=100,
            int_enum=shared.IntEnum.SECOND,
            num=1.1,
            str_="test",
            str_opt="testOptional",
        ),
    )

def test_request_bodies_request_body_post_not_nullable_not_required_string_body():
    record_test("request-bodies-post-not-nullable-not-required-string-body")

    s = SDK()

    assert s is not None

    res = s.request_bodies.request_body_post_not_nullable_not_required_string_body()
    assert res is not None
    assert res == operations.RequestBodyPostNotNullableNotRequiredStringBodyResponseBody(
        data="",
    )
