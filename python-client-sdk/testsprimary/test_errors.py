"""Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT."""

import pytest
import httpx
from openapi import SDK
from openapi.models import errors, operations

from .common_helpers import *
from .test_helpers import *


def test_status_get_error_default_error_codes():
    record_test("errors-status-get-error-default-error-codes")

    s = SDK()
    assert s is not None

    with pytest.raises(
        errors.SDKError, match="API error occurred: Status 400"
    ) as exc_info_400:
        s.errors.status_get_error(status_code=400)

    assert exc_info_400.value.status_code == 400
    assert exc_info_400.value.raw_response is not None
    assert exc_info_400.value.raw_response.status_code == 400

    with pytest.raises(
        errors.SDKError, match="API error occurred: Status 500"
    ) as exc_info_500:
        s.errors.status_get_error(status_code=500)

    assert exc_info_500.value.status_code == 500
    assert exc_info_500.value.raw_response is not None
    assert exc_info_500.value.raw_response.status_code == 500


def test_status_get_error_300_non_error():
    record_test("errors-status-get-error300-non-error")

    s = SDK()
    assert s is not None

    res = s.errors.status_get_error(status_code=300)
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 300


def test_status_get_x_speakeasy_errors():
    record_test("errors-status-get-error-x-speakeasy-errors")

    s = SDK()
    assert s is not None

    with pytest.raises(
        errors.SDKError,
        match='API error occurred: Status 400\n{"message":"an error occurred","code":"400","type":"internal"}\n',
    ) as exc_info_400:
        s.errors.status_get_x_speakeasy_errors(status_code=400)

    assert exc_info_400.value.status_code == 400
    assert exc_info_400.value.raw_response is not None
    assert exc_info_400.value.raw_response.status_code == 400

    with pytest.raises(
        errors.SDKError,
        match='API error occurred: Status 401\n{"message":"an error occurred","code":"401","type":"internal"}\n',
    ) as exc_info_401:
        s.errors.status_get_x_speakeasy_errors(status_code=401)

    assert exc_info_401.value.status_code == 401
    assert exc_info_401.value.raw_response is not None
    assert exc_info_401.value.raw_response.status_code == 401

    with pytest.raises(
        errors.SDKError,
        match='API error occurred: Status 402\n{"message":"an error occurred","code":"402","type":"internal"}\n',
    ) as exc_info_402:
        s.errors.status_get_x_speakeasy_errors(status_code=402)

    assert exc_info_402.value.status_code == 402
    assert exc_info_402.value.raw_response is not None
    assert exc_info_402.value.raw_response.status_code == 402

    with pytest.raises(errors.Error, match="an error occurred") as exc_info_500:
        s.errors.status_get_x_speakeasy_errors(status_code=500)

    assert exc_info_500.value.data.code == "500"

    with pytest.raises(
        errors.StatusGetXSpeakeasyErrorsResponseBody,
        match='{"code":"501","message":"an error occurred","type":"internal"}',
    ) as exc_info_501:
        s.errors.status_get_x_speakeasy_errors(status_code=501)

    assert exc_info_501.value.data.code == "501"
    assert exc_info_501.value.data.http_meta is not None
    assert exc_info_501.value.data.http_meta.response is not None
    assert exc_info_501.value.data.http_meta.response.status_code == 501


def test_connection_error_get():
    record_test("errors-connection-error")

    s = SDK()
    assert s is not None

    with pytest.raises(
        httpx.ConnectError,
        match=r"(Name or service not known|nodename nor servname provided, or not known)",
    ):
        s.errors.connection_error_get()

def test_union_of_errors_post():
    record_test("errors-union-of-errors")

    s = SDK()
    assert s is not None

    req1 = operations.ErrorType1RequestBody(error="Error1")
    with pytest.raises(
        errors.ErrorUnionPostResponseBody,
        match='{"error":"Error1"}',
    ) as error1:
        s.errors.error_union_post(request=req1)
    assert error1.value.data.error == "Error1"
    assert error1.value.data.http_meta is not None
    assert error1.value.data.http_meta.response is not None
    assert error1.value.data.http_meta.response.status_code == 500

    req2 = operations.ErrorType2RequestBody(
        error=operations.ErrorType2Message(message="Error2")
    )
    with pytest.raises(
        errors.ErrorUnionPostResponseBody,
        match='{"error":{"message":"Error2"}}',
    ) as error2:
        s.errors.error_union_post(request=req2)
    assert error2.value.data.error.message == "Error2"
    assert error2.value.data.http_meta is not None
    assert error2.value.data.http_meta.response is not None
    assert error2.value.data.http_meta.response.status_code == 500

def test_discriminated_union_of_errors_post():
    record_test("errors-union-of-errors-discriminated")

    s = SDK()
    assert s is not None

    req1 = operations.TaggedError1RequestBody(tag="tag1", error="Error1")
    with pytest.raises(
        errors.ErrorUnionDiscriminatedPostResponseBody,
        match='{"error":"Error1","tag":"tag1"}',
    ) as error1:
        s.errors.error_union_discriminated_post(request=req1)
    assert error1.value.data.error == "Error1"
    assert error1.value.data.http_meta is not None
    assert error1.value.data.http_meta.response is not None
    assert error1.value.data.http_meta.response.status_code == 400

    req2 = operations.TaggedError2RequestBody(
        tag="tag2",
        error=operations.TaggedError2Message(message="Error2")
    )
    with pytest.raises(
        errors.ErrorUnionDiscriminatedPostResponseBody,
        match='{"error":{"message":"Error2"},"tag":"tag2"}',
    ) as error2:
        s.errors.error_union_discriminated_post(request=req2)
    assert error2.value.data.error.message == "Error2"
    assert error2.value.data.http_meta is not None
    assert error2.value.data.http_meta.response is not None
    assert error2.value.data.http_meta.response.status_code == 400
