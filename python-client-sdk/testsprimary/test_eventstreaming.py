"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from sdk import SDK
from sdk.models.operations import *
from sdk.models.shared import *
from sdk.utils import *

from .common_helpers import *
from .test_helpers import *

from typing import List, Union


def test_event_stream_json_data():
    record_test('event-stream-json-data')

    s = SDK()
    assert s is not None

    res = s.eventstreams.json()

    assert res is not None
    assert res.status_code == 200
    assert res.json_event is not None

    json_events: List[JSONEvent] = []
    for event in res.json_event:
        json_events.append(event)

    assert len(json_events) == 4

    message = ''
    for event in json_events:
        message += event.data.content

    assert message == 'Hello world!'


def test_event_stream_text_data():
    record_test('event-stream-text-data')

    s = SDK()
    assert s is not None

    res = s.eventstreams.text()

    assert res is not None
    assert res.status_code == 200
    assert res.text_event is not None

    text_events: List[TextEvent] = []
    for event in res.text_event:
        text_events.append(event)

    assert len(text_events) == 4

    message = ''
    for event in text_events:
        message += event.data

    assert message == 'Hello world!'


def test_event_stream_multiline_data():
    record_test('event-stream-multiline-data')

    s = SDK()
    assert s is not None

    res = s.eventstreams.multiline()

    text_events: List[TextEvent] = []
    for event in res.text_event:
        text_events.append(event)

    assert len(text_events) == 1

    assert text_events[0].data == 'YHOO\n+2\n10'


def test_event_stream_rich_events():
    record_test('event-stream-rich-events')

    s = SDK()
    assert s is not None

    res = s.eventstreams.rich()

    assert res is not None
    assert res.status_code == 200
    assert res.rich_stream is not None

    rich_events: List[Union[RichCompletionEvent, HeartbeatEvent]] = []
    for event in res.rich_stream:
        rich_events.append(event)

    assert len(rich_events) == 3

    assert rich_events == [
        RichCompletionEvent(
            id='job-1',
            data=RichCompletionEventData(
                completion='Hello',
                model='jeeves-1',
                stop_reason=None
            ),
        ),
        HeartbeatEvent(
            data='ping',
            retry=3000
        ),
        RichCompletionEvent(
            id='job-1',
            data=RichCompletionEventData(
                completion='world!',
                model='jeeves-1',
                stop_reason=StopReason.STOP_SEQUENCE
            ),
        )
    ]


def test_event_stream_with_sentinel_events():
    record_test('event-stream-chat-sentinel-event')

    s = SDK()
    assert s is not None

    res = s.eventstreams.chat(
        request=ChatRequestBody(
            prompt='Print test content',
        )
    )

    assert res is not None
    assert res.status_code == 200
    assert res.chat_completion_stream is not None

    chat_events: List[Union[ChatCompletionEvent, SentinelEvent]] = []
    for event in res.chat_completion_stream:
        chat_events.append(event)

    assert len(chat_events) == 5

    assert chat_events == [
        ChatCompletionEvent(
            data=Data(
                content='Hello'
            ),
        ),
        ChatCompletionEvent(
            data=Data(
                content=' '
            ),
        ),
        ChatCompletionEvent(
            data=Data(
                content='world'
            ),
        ),
        ChatCompletionEvent(
            data=Data(
                content='!'
            ),
        ),
        SentinelEvent()
    ]
