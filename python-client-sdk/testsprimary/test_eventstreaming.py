"""Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT."""

from openapi import SDK
from openapi.models.operations import *
from openapi.models.shared import *
from openapi.utils import *

from .common_helpers import *
from .test_helpers import *

from typing import Generator, List, Union


def test_event_stream_json_data():
    record_test("event-stream-json-data")

    s = SDK()
    assert s is not None

    res = s.eventstreams.json()

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.json_event is not None
    assert isinstance(res.json_event, Generator)

    json_events: List[JSONEvent] = []
    for event in res.json_event:
        json_events.append(event)

    assert len(json_events) == 4

    message = ""
    for event in json_events:
        message += event.data.content

    assert message == "Hello world!"


def test_event_stream_text_data():
    record_test("event-stream-text-data")

    s = SDK()
    assert s is not None

    res = s.eventstreams.text()

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.text_event is not None
    assert isinstance(res.text_event, Generator)

    text_events: List[TextEvent] = []
    for event in res.text_event:
        text_events.append(event)

    assert len(text_events) == 4

    message = ""
    for event in text_events:
        message += event.data

    assert message == "Hello world!"


def test_event_stream_multiline_data():
    record_test("event-stream-multiline-data")

    s = SDK()
    assert s is not None

    res = s.eventstreams.multiline()
    assert res is not None
    assert res.text_event is not None
    assert isinstance(res.text_event, Generator)

    text_events: List[TextEvent] = []
    for event in res.text_event:
        text_events.append(event)

    assert len(text_events) == 1

    assert text_events[0].data == "YHOO\n+2\n10"


def test_event_stream_rich_events():
    record_test("event-stream-rich-events")

    s = SDK()
    assert s is not None

    res = s.eventstreams.rich()

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.rich_stream is not None
    assert isinstance(res.rich_stream, Generator)

    rich_events: List[Union[RichCompletionEvent, HeartbeatEvent]] = []
    for event in res.rich_stream:
        rich_events.append(event)

    assert len(rich_events) == 3

    assert rich_events == [
        RichCompletionEvent(
            id="job-1",
            data=RichCompletionEventData(
                completion="Hello", model="jeeves-1", stop_reason=None
            ),
        ),
        HeartbeatEvent(data="ping", retry=3000),
        RichCompletionEvent(
            id="job-1",
            data=RichCompletionEventData(
                completion="world!",
                model="jeeves-1",
                stop_reason="stop_sequence",
            ),
        ),
    ]


def test_event_stream_with_sentinel_events():
    record_test("event-stream-chat-sentinel-event")

    s = SDK()
    assert s is not None

    res = s.eventstreams.chat(
        request=ChatRequestBody(
            prompt="Print test content",
        )
    )

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.chat_completion_stream is not None
    assert isinstance(res.chat_completion_stream, Generator)

    chat_events: List[Union[ChatCompletionEvent, SentinelEvent]] = []
    for event in res.chat_completion_stream:
        chat_events.append(event)

    assert len(chat_events) == 5

    assert chat_events == [
        ChatCompletionEvent(
            data=Data(content="Hello"),
        ),
        ChatCompletionEvent(
            data=Data(content=" "),
        ),
        ChatCompletionEvent(
            data=Data(content="world"),
        ),
        ChatCompletionEvent(
            data=Data(content="!"),
        ),
        SentinelEvent(),
    ]


def test_event_stream_skip_sentinel():
    record_test("event-stream-chat-skip-sentinel")

    s = SDK()
    assert s is not None

    res = s.eventstreams.chat_skip_sentinel(
        request=ChatSkipSentinelRequestBody(
            prompt="Print test content",
        )
    )

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.chat_completion_event is not None
    assert isinstance(res.chat_completion_event, Generator)

    chat_events: List[ChatCompletionEvent] = []
    for event in res.chat_completion_event:
        chat_events.append(event)

    assert len(chat_events) == 4

    assert chat_events == [
        ChatCompletionEvent(
            data=Data(content="Hello"),
        ),
        ChatCompletionEvent(
            data=Data(content=" "),
        ),
        ChatCompletionEvent(
            data=Data(content="world"),
        ),
        ChatCompletionEvent(
            data=Data(content="!"),
        ),
    ]


def test_event_stream_with_different_data_schemas():
    record_test("event-stream-different-data-schemas")

    s = SDK()
    assert s is not None

    res = s.eventstreams.different_data_schemas()

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.different_data_schemas is not None
    assert isinstance(res.different_data_schemas, Generator)

    events: List[DifferentDataSchemas] = []
    for event in res.different_data_schemas:
        events.append(event)

    assert len(events) == 3

    assert events == [
        DifferentDataSchemas(
            id="event-1",
            event="message",
            data=MessageEvent(content="Here is your url"),
        ),
        DifferentDataSchemas(
            id="event-2", event="url", data=URLEvent(url="https://example.com")
        ),
        DifferentDataSchemas(
            id="event-3",
            event="message",
            data=MessageEvent(content="Have a great day!"),
        ),
    ]
