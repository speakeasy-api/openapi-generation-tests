"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from datetime import date, datetime

import sdk.models.shared as shared
from dateutil.tz import tzutc


def create_simple_object():
    return shared.SimpleObject(
        any="any",
        bool=True,
        bool_opt=True,
        date_=date(2020, 1, 1),
        date_time=datetime(2020, 1, 1, 0, 0, 0, 1, tzutc()),
        enum=shared.EnumT.ONE,
        float32=1.1,
        int=1,
        int32=1,
        int32_enum=shared.Int32Enum.FIFTY_FIVE,
        int_enum=shared.IntEnum.SECOND,
        int_opt_null=None,
        num=1.1,
        num_opt_null=None,
        str_="test",
        str_opt="testOptional",
    )


def create_simple_object_with_type():
    return shared.SimpleObjectWithType(
        any="any",
        bool=True,
        bool_opt=True,
        date_=date(2020, 1, 1),
        date_time=datetime(2020, 1, 1, 0, 0, 0, 1, tzutc()),
        enum=shared.EnumT.ONE,
        float32=1.1,
        int=1,
        int32=1,
        int32_enum=shared.Int32Enum.FIFTY_FIVE,
        int_enum=shared.IntEnum.SECOND,
        int_opt_null=None,
        num=1.1,
        num_opt_null=None,
        str_="test",
        str_opt="testOptional",
        type="SimpleObjectWithType"
    )


def create_simple_object_camel_case():
    return shared.SimpleObjectCamelCase(
        any_val="any",
        bool_val=True,
        bool_opt_val=True,
        date_val=date(2020, 1, 1),
        date_time_val=datetime(2020, 1, 1, 0, 0, 0, 1, tzutc()),
        enum_val=shared.EnumT.ONE,
        float32_val=1.1,
        int_val=1,
        int32_val=1,
        int32_enum_val=shared.Int32EnumVal.FIFTY_FIVE,
        int_enum_val=shared.IntEnumVal.SECOND,
        int_opt_null_val=None,
        num_val=1.1,
        num_opt_null_val=None,
        str_val="test",
        str_opt_val="testOptional",
    )


def create_deep_object():
    return shared.DeepObject(
        any=create_simple_object(),
        arr=[create_simple_object(), create_simple_object()],
        bool=True,
        int=1,
        map={"key": create_simple_object()},
        num=1.1,
        obj=create_simple_object(),
        str_="test",
    )


def create_deep_object_with_type():
    return shared.DeepObjectWithType(
        any=create_simple_object(),
        arr=[create_simple_object(), create_simple_object()],
        bool=True,
        int=1,
        map={"key": create_simple_object()},
        num=1.1,
        obj=create_simple_object(),
        str_="test",
        type="DeepObjectWithType"
    )


def compare_simple_object(obj1: shared.SimpleObject, obj2: shared.SimpleObject):
    assert obj1.any == obj2.any
    assert obj1.bool == obj2.bool
    assert obj1.bool_opt == obj2.bool_opt
    assert obj1.date_ == obj2.date_
    assert obj1.date_time == obj2.date_time
    assert obj1.enum == obj2.enum
    assert obj1.float32 == obj2.float32
    assert obj1.int == obj2.int
    assert obj1.int32 == obj2.int32
    assert obj1.int_opt_null == obj2.int_opt_null
    assert obj1.num == obj2.num
    assert obj1.num_opt_null == obj2.num_opt_null
    assert obj1.str_ == obj2.str_
    assert obj1.str_opt == obj2.str_opt


def compare_simple_object_with_type(obj1: shared.SimpleObjectWithType, obj2: shared.SimpleObjectWithType):
    assert obj1.any == obj2.any
    assert obj1.bool == obj2.bool
    assert obj1.bool_opt == obj2.bool_opt
    assert obj1.date_ == obj2.date_
    assert obj1.date_time == obj2.date_time
    assert obj1.enum == obj2.enum
    assert obj1.float32 == obj2.float32
    assert obj1.int == obj2.int
    assert obj1.int32 == obj2.int32
    assert obj1.int_opt_null == obj2.int_opt_null
    assert obj1.num == obj2.num
    assert obj1.num_opt_null == obj2.num_opt_null
    assert obj1.str_ == obj2.str_
    assert obj1.str_opt == obj2.str_opt
    assert obj1.type == obj2.type


def compare_simple_object_camel_case(actual: shared.SimpleObjectCamelCase):
    expected = create_simple_object_camel_case()
    assert expected.any_val == actual.any_val
    assert expected.bool_val == actual.bool_val
    assert expected.bool_opt_val == actual.bool_opt_val
    assert expected.date_val == actual.date_val
    assert expected.date_time_val == actual.date_time_val
    assert expected.enum_val == actual.enum_val
    assert expected.float32_val == actual.float32_val
    assert expected.int_val == actual.int_val
    assert expected.int32_val == actual.int32_val
    assert actual.int_opt_null_val is None
    assert expected.num_val == actual.num_val
    assert actual.num_opt_null_val is None
    assert expected.str_val == actual.str_val
    assert expected.str_opt_val == actual.str_opt_val


def compare_deep_object(obj1: shared.DeepObject, obj2: shared.DeepObject):
    assert len(obj1.arr) == len(obj2.arr)
    for i in range(len(obj1.arr)):
        compare_simple_object(obj1.arr[i], obj2.arr[i])
    assert obj1.bool == obj2.bool
    assert obj1.int == obj2.int
    assert len(obj1.map) == len(obj2.map)
    for key in obj1.map:
        compare_simple_object(obj1.map[key], obj2.map[key])
    assert obj1.num == obj2.num
    compare_simple_object(obj1.obj, obj2.obj)
    assert obj1.str_ == obj2.str_


def compare_deep_object_with_type(obj1: shared.DeepObject, obj2: shared.DeepObject):
    assert len(obj1.arr) == len(obj2.arr)
    for i in range(len(obj1.arr)):
        compare_simple_object(obj1.arr[i], obj2.arr[i])
    assert obj1.bool == obj2.bool
    assert obj1.int == obj2.int
    assert len(obj1.map) == len(obj2.map)
    for key in obj1.map:
        compare_simple_object(obj1.map[key], obj2.map[key])
    assert obj1.num == obj2.num
    compare_simple_object(obj1.obj, obj2.obj)
    assert obj1.str_ == obj2.str_
    assert obj1.type == obj2.type
