"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from typing import List, Tuple
import requests
import uuid
from urllib.parse import urlparse

from sdk import SDK
from sdk.models.operations import *
from sdk.models.shared import *
from sdk.utils import *

from .common_helpers import *
from .test_helpers import *


def test_pagination_limit_offset_page_params():
    record_test("pagination-limit-offset-page-params")

    s = SDK()
    assert s is not None
    serverLimit = 20

    res = s.pagination.pagination_limit_offset_page_params(page=1)

    assert res is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert len(res.res.result_array) == serverLimit

    next_res = res.next()
    assert next_res is not None
    assert next_res.http_meta.response.status_code == 200
    assert next_res.res is not None
    assert len(next_res.res.result_array) == 0

    null_res = next_res.next()
    assert null_res is None


def test_pagination_limitOffset_page_body():
    record_test("pagination-limit-offset-page-body")

    s = SDK()
    assert s is not None
    limit = 15

    res = s.pagination.pagination_limit_offset_page_body(
        request=LimitOffsetConfig(limit=limit, page=1)
    )

    assert res is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert len(res.res.result_array) == limit

    next_res = res.next()
    assert next_res is not None
    assert next_res.http_meta.response.status_code == 200
    assert next_res.res is not None
    assert len(next_res.res.result_array) < limit

    null_res = next_res.next()
    assert null_res is None


def test_pagination_limit_offset_offset_params():
    record_test("pagination-limit-offset-offset-params")

    s = SDK()
    assert s is not None
    limit = 15

    res = s.pagination.pagination_limit_offset_offset_params(limit=limit, offset=0)

    assert res is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert len(res.res.result_array) == limit

    next_res = res.next()
    assert next_res is not None
    assert next_res.http_meta.response.status_code == 200
    assert next_res.res is not None
    assert len(next_res.res.result_array) < limit

    null_res = next_res.next()
    assert null_res is None


def test_pagination_limitOffset_offset_body():
    record_test("pagination-limit-offset-offset-body")

    s = SDK()
    assert s is not None
    limit = 15

    res = s.pagination.pagination_limit_offset_offset_body(
        request=LimitOffsetConfig(limit=limit, offset=0)
    )

    assert res is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert len(res.res.result_array) == limit

    next_res = res.next()
    assert next_res is not None
    assert next_res.http_meta.response.status_code == 200
    assert next_res.res is not None
    assert len(next_res.res.result_array) < limit

    null_res = next_res.next()
    assert null_res is None


def test_pagination_cursor_params():
    record_test("pagination-cursor-params")

    s = SDK()
    assert s is not None
    limit = 15

    res = s.pagination.pagination_cursor_params(cursor=-1)

    assert res is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert len(res.res.result_array) == limit

    next_res = res.next()
    assert next_res is not None
    assert next_res.http_meta.response.status_code == 200
    assert next_res.res is not None
    assert len(next_res.res.result_array) < limit

    penultimate_res = next_res.next()
    assert penultimate_res is not None
    assert penultimate_res.http_meta.response.status_code == 200
    assert penultimate_res.res is not None
    assert len(penultimate_res.res.result_array) == 0

    null_res = penultimate_res.next()
    assert null_res is None


def test_pagination_cursor_body():
    record_test("pagination-cursor-body")

    s = SDK()
    assert s is not None
    limit = 15

    res = s.pagination.pagination_cursor_body(
        request=PaginationCursorBodyRequestBody(
            cursor=-1,
        )
    )

    assert res is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert len(res.res.result_array) == limit

    next_res = res.next()
    assert next_res is not None
    assert next_res.http_meta.response.status_code == 200
    assert next_res.res is not None
    assert len(next_res.res.result_array) < limit

    penultimate_res = next_res.next()
    assert penultimate_res is not None
    assert penultimate_res.http_meta.response.status_code == 200
    assert penultimate_res.res is not None
    assert len(penultimate_res.res.result_array) == 0

    null_res = penultimate_res.next()
    assert null_res is None


def test_pagination_with_retries():
    record_test("pagination-with-retries")

    recorder = PaginationRecorder()
    http_client = requests.Session()
    http_client.hooks["response"].append(recorder.log_request)

    s = SDK(client=http_client)

    assert s is not None

    count = 0

    res = s.pagination.pagination_with_retries(
        request_id=uuid.uuid4(),
        fault_settings='{"error_code": 503, "error_count": 3}',
    )

    assert res is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    count += len(res.res.result_array)

    next_res = res.next()
    assert next_res is not None
    assert next_res.http_meta.response.status_code == 200
    assert next_res.res is not None
    count += len(next_res.res.result_array)

    penultimate_res = next_res.next()
    assert penultimate_res is not None
    assert penultimate_res.http_meta.response.status_code == 200
    assert penultimate_res.res is not None
    assert len(penultimate_res.res.result_array) == 0

    null_res = penultimate_res.next()
    assert null_res is None

    assert count == 20
    assert recorder.log == [
        (503, "GET", "/pagination/cursor_non_numeric"),
        (503, "GET", "/pagination/cursor_non_numeric"),
        (503, "GET", "/pagination/cursor_non_numeric"),
        (200, "GET", "/pagination/cursor_non_numeric"),
        (200, "GET", "/pagination/cursor_non_numeric"),
        (200, "GET", "/pagination/cursor_non_numeric"),
    ]


class PaginationRecorder:
    log: List[Tuple[int, str, str]] = []

    def log_request(self, res: requests.Response, *args, **kwargs):
        pathname = urlparse(res.request.url).path
        self.log.append((res.status_code, str(res.request.method), str(pathname)))
