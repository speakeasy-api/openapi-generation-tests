"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

import json
from typing import Any, Dict, List, Tuple
import uuid
import httpx
import logging
from openapi import SDK
from openapi.models.operations import *
from openapi.models.shared import *
from openapi.utils import *

from .common_helpers import *
from .test_helpers import *


def test_pagination_limit_offset_page_params():
    record_test("pagination-limit-offset-page-params")
    logging.basicConfig(level=logging.DEBUG)
    debug_logger = logging.getLogger("sdk")
    s = SDK(debug_logger=debug_logger)
    assert s is not None
    serverLimit = 20

    res = s.pagination.pagination_limit_offset_page_params(page=1)

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert len(res.res.result_array) == serverLimit

    next_res = res.next()
    assert next_res is not None
    assert next_res.http_meta is not None
    assert next_res.http_meta.response is not None
    assert next_res.http_meta.response.status_code == 200
    assert next_res.res is not None
    assert len(next_res.res.result_array) == 0

    null_res = next_res.next()
    assert null_res is None


def test_pagination_limit_offset_nil_page_params():
    record_test("pagination-limit-offset-nil-page-params")

    s = SDK()
    assert s is not None
    serverLimit = 20

    res = s.pagination.pagination_limit_offset_optional_page_params()

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert len(res.res.result_array) == serverLimit

    next_res = res.next()
    assert next_res is not None
    assert next_res.http_meta is not None
    assert next_res.http_meta.response is not None
    assert next_res.http_meta.response.status_code == 200
    assert next_res.res is not None
    assert len(next_res.res.result_array) == 0

    null_res = next_res.next()
    assert null_res is None


def test_pagination_limit_offset_zero_page_params():
    record_test("pagination-limit-offset-zero-page-params")

    s = SDK()
    assert s is not None
    serverLimit = 20

    res = s.pagination.pagination_limit_offset_optional_page_params(page=0)

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert len(res.res.result_array) == serverLimit

    assert res.http_meta.request is not None
    assert res.http_meta.request.url.params.get("page") == "0"

    next_res = res.next()
    assert next_res is not None
    assert next_res.http_meta is not None
    assert next_res.http_meta.response is not None
    assert next_res.http_meta.response.status_code == 200
    assert next_res.res is not None
    assert len(next_res.res.result_array) == 20

    assert next_res.http_meta.request is not None
    assert next_res.http_meta.request.url.params.get("page") == "1"


def test_pagination_limitOffset_page_body():
    record_test("pagination-limit-offset-page-body")

    s = SDK()
    assert s is not None
    limit = 15

    res = s.pagination.pagination_limit_offset_page_body(
        request=LimitOffsetConfig(limit=limit, page=1)
    )

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert len(res.res.result_array) == limit

    next_res = res.next()
    assert next_res is not None
    assert next_res.http_meta is not None
    assert next_res.http_meta.response is not None
    assert next_res.http_meta.response.status_code == 200
    assert next_res.res is not None
    assert len(next_res.res.result_array) < limit

    null_res = next_res.next()
    assert null_res is None


def test_pagination_limitOffset_deep_outputs_page_body():
    record_test("pagination-limit-offset-deep-outputs-page-body")

    s = SDK()
    assert s is not None
    limit = 15

    res = s.pagination.pagination_limit_offset_deep_outputs_page_body(
        request=LimitOffsetConfig(limit=limit, page=1)
    )

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert len(res.res.result_array) == limit

    next_res = res.next()
    assert next_res is not None
    assert next_res.http_meta is not None
    assert next_res.http_meta.response is not None
    assert next_res.http_meta.response.status_code == 200
    assert next_res.res is not None
    assert len(next_res.res.result_array) < limit

    null_res = next_res.next()
    assert null_res is None


def test_pagination_limit_offset_offset_params():
    record_test("pagination-limit-offset-offset-params")

    s = SDK()
    assert s is not None
    limit = 15

    res = s.pagination.pagination_limit_offset_offset_params(limit=limit, offset=0)

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert len(res.res.result_array) == limit

    next_res = res.next()
    assert next_res is not None
    assert next_res.http_meta is not None
    assert next_res.http_meta.response is not None
    assert next_res.http_meta.response.status_code == 200
    assert next_res.res is not None
    assert len(next_res.res.result_array) < limit

    null_res = next_res.next()
    assert null_res is None


def test_pagination_limit_offset_nil_offset_params():
    record_test("pagination-limit-offset-nil-offset-params")

    s = SDK()
    assert s is not None
    default_limit = 20

    res = s.pagination.pagination_limit_offset_offset_params()

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert len(res.res.result_array) == default_limit

    next_res = res.next()
    assert next_res is not None
    assert next_res.http_meta is not None
    assert next_res.http_meta.response is not None
    assert next_res.http_meta.response.status_code == 200
    assert next_res.res is not None
    assert len(next_res.res.result_array) < default_limit

    null_res = next_res.next()
    assert null_res is None


def test_pagination_limitOffset_offset_body():
    record_test("pagination-limit-offset-offset-body")

    s = SDK()
    assert s is not None
    limit = 15

    res = s.pagination.pagination_limit_offset_offset_body(
        request=LimitOffsetConfig(limit=limit, offset=0)
    )

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert len(res.res.result_array) == limit

    next_res = res.next()
    assert next_res is not None
    assert next_res.http_meta is not None
    assert next_res.http_meta.response is not None
    assert next_res.http_meta.response.status_code == 200
    assert next_res.res is not None
    assert len(next_res.res.result_array) < limit

    null_res = next_res.next()
    assert null_res is None


def test_pagination_limit_offset_default_offset_body():
    record_test("pagination-limit-offset-default-offset-body")

    s = SDK()
    assert s is not None

    res = s.pagination.pagination_limit_offset_default_offset_body()

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200

    assert res.http_meta.request is not None

    body: Dict[str, Any] = json.loads(res.http_meta.request.content.decode("utf-8"))
    assert body is not None
    assert body.get("limit") == 15
    assert body.get("offset") == 10


def test_pagination_limit_offset_default_offset_params():
    record_test("pagination-limit-offset-default-offset-params")

    s = SDK()
    assert s is not None

    res = s.pagination.pagination_limit_offset_default_offset_params()

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200

    assert res.http_meta.request is not None
    assert res.http_meta.request.url.params.get("limit") == "15"
    assert res.http_meta.request.url.params.get("offset") == "10"


def test_pagination_cursor_params():
    record_test("pagination-cursor-params")

    s = SDK()
    assert s is not None
    limit = 15

    res = s.pagination.pagination_cursor_params(cursor=-1)

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert len(res.res.result_array) == limit

    next_res = res.next()
    assert next_res is not None
    assert next_res.http_meta is not None
    assert next_res.http_meta.response is not None
    assert next_res.http_meta.response.status_code == 200
    assert next_res.res is not None
    assert len(next_res.res.result_array) < limit

    penultimate_res = next_res.next()
    assert penultimate_res is not None
    assert penultimate_res.http_meta is not None
    assert penultimate_res.http_meta.response is not None
    assert penultimate_res.http_meta.response.status_code == 200
    assert penultimate_res.res is not None
    assert len(penultimate_res.res.result_array) == 0

    null_res = penultimate_res.next()
    assert null_res is None


def test_pagination_cursor_body():
    record_test("pagination-cursor-body")

    s = SDK()
    assert s is not None
    limit = 15

    res = s.pagination.pagination_cursor_body(
        cursor=-1,
    )

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert len(res.res.result_array) == limit

    next_res = res.next()
    assert next_res is not None
    assert next_res.http_meta is not None
    assert next_res.http_meta.response is not None
    assert next_res.http_meta.response.status_code == 200
    assert next_res.res is not None
    assert len(next_res.res.result_array) < limit

    penultimate_res = next_res.next()
    assert penultimate_res is not None
    assert penultimate_res.http_meta is not None
    assert penultimate_res.http_meta.response is not None
    assert penultimate_res.http_meta.response.status_code == 200
    assert penultimate_res.res is not None
    assert len(penultimate_res.res.result_array) == 0

    null_res = penultimate_res.next()
    assert null_res is None


def test_pagination_cursor_non_numeric():
    record_test("pagination-cursor-non-numeric")

    s = SDK()
    assert s is not None

    res = s.pagination.pagination_cursor_non_numeric()

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert len(res.res.result_array) == 15

    next_res = res.next()
    assert next_res is not None
    assert next_res.http_meta is not None
    assert next_res.http_meta.response is not None
    assert next_res.http_meta.response.status_code == 200
    assert next_res.res is not None
    assert len(next_res.res.result_array) == 5

    penultimate_res = next_res.next()
    assert penultimate_res is not None
    assert penultimate_res.http_meta is not None
    assert penultimate_res.http_meta.response is not None
    assert penultimate_res.http_meta.response.status_code == 200
    assert penultimate_res.res is not None
    assert len(penultimate_res.res.result_array) == 0

    null_res = penultimate_res.next()
    assert null_res is None


def test_pagination_with_retries():
    record_test("pagination-with-retries")

    recorder = PaginationRecorder()
    http_client = httpx.Client()
    http_client.event_hooks["response"].append(recorder.log_response)

    s = SDK(client=http_client)

    assert s is not None

    count = 0

    res = s.pagination.pagination_with_retries(
        request_id=str(uuid.uuid4()),
        fault_settings='{"error_code": 503, "error_count": 3}',
    )

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    count += len(res.res.result_array)

    next_res = res.next()
    assert next_res is not None
    assert next_res.http_meta is not None
    assert next_res.http_meta.response is not None
    assert next_res.http_meta.response.status_code == 200
    assert next_res.res is not None
    count += len(next_res.res.result_array)

    penultimate_res = next_res.next()
    assert penultimate_res is not None
    assert penultimate_res.http_meta is not None
    assert penultimate_res.http_meta.response is not None
    assert penultimate_res.http_meta.response.status_code == 200
    assert penultimate_res.res is not None
    assert len(penultimate_res.res.result_array) == 0

    null_res = penultimate_res.next()
    assert null_res is None

    assert count == 20
    assert recorder.log == [
        (503, "GET", "/pagination/cursor_non_numeric"),
        (503, "GET", "/pagination/cursor_non_numeric"),
        (503, "GET", "/pagination/cursor_non_numeric"),
        (200, "GET", "/pagination/cursor_non_numeric"),
        (200, "GET", "/pagination/cursor_non_numeric"),
        (200, "GET", "/pagination/cursor_non_numeric"),
    ]


class PaginationRecorder:
    log: List[Tuple[int, str, str]] = []

    def log_response(self, res: httpx.Response):
        self.log.append((res.status_code, str(res.request.method), res.url.path))


def test_pagination_url():
    record_test("pagination-url")

    s = SDK()
    assert s is not None

    res = s.pagination.pagination_url_params(attempts=3)

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert len(res.res.result_array) == 9

    next_res = res.next()
    assert next_res is not None
    assert next_res.http_meta is not None
    assert next_res.http_meta.response is not None
    assert next_res.http_meta.response.status_code == 200
    assert next_res.res is not None
    assert len(next_res.res.result_array) == 6

    penultimate_res = next_res.next()
    assert penultimate_res is not None
    assert penultimate_res.http_meta is not None
    assert penultimate_res.http_meta.response is not None
    assert penultimate_res.http_meta.response.status_code == 200
    assert penultimate_res.res is not None
    assert len(penultimate_res.res.result_array) == 3

    null_res = penultimate_res.next()
    assert null_res is None

    res2 = s.pagination.pagination_url_params(attempts=3, is_reference_path="true")

    assert res2 is not None
    assert res2.http_meta is not None
    assert res2.http_meta.response is not None
    assert res2.http_meta.response.status_code == 200
    assert res2.res is not None
    assert len(res2.res.result_array) == 9

    next_res2 = res2.next()
    assert next_res2 is not None
    assert next_res2.http_meta is not None
    assert next_res2.http_meta.response is not None
    assert next_res2.http_meta.response.status_code == 200
    assert next_res2.res is not None
    assert len(next_res2.res.result_array) == 6

    penultimate_res2 = next_res2.next()
    assert penultimate_res2 is not None
    assert penultimate_res2.http_meta is not None
    assert penultimate_res2.http_meta.response is not None
    assert penultimate_res2.http_meta.response.status_code == 200
    assert penultimate_res2.res is not None
    assert len(penultimate_res2.res.result_array) == 3

    null_res2 = penultimate_res2.next()
    assert null_res2 is None
