"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from sdk import SDK
from sdk.models.operations import *
from sdk.utils import *

from .common_helpers import *
from .helpers import *


def test_mixed_parameters_primitives():
    record_test('parameters-mixed-primitives')

    s = SDK()
    assert s is not None

    res = s.parameters.mixed_parameters_primitives(
        header_param='headerValue',
        path_param='pathValue',
        query_string_param='queryValue'
    )
    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.url == 'http://localhost:35123/anything/mixedParams/path/pathValue?queryStringParam=queryValue'
    assert res.res.headers.headerparam == 'headerValue'
    assert res.res.args.query_string_param == 'queryValue'


def test_mixed_parameters_camel_case():
    record_test('parameters-camel-case')

    s = SDK()
    assert s is not None

    res = s.parameters.mixed_parameters_camel_case(
        header_param='headerValue',
        path_param='pathValue',
        query_string_param='queryValue'
    )
    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.url == 'http://localhost:35123/anything/mixedParams/path/pathValue/camelcase?query_string_param=queryValue'
    assert res.res.headers.header_param == 'headerValue'
    assert res.res.args.query_string_param == 'queryValue'


def test_simple_path_parameter_primitives():
    record_test('parameters-simple-path-parameter-primitives')

    s = SDK()
    assert s is not None

    res = s.parameters.simple_path_parameter_primitives(
        bool_param=True,
        int_param=1,
        num_param=1.1,
        str_param='test',
    )
    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.url == 'http://localhost:35123/anything/pathParams/str/test/bool/true/int/1/num/1.1'


def test_simple_path_parameter_objects():
    record_test('parameters-simple-path-parameter-objects')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.parameters.simple_path_parameter_objects(
        obj_param=obj,
        obj_param_exploded=obj,
    )
    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.url == 'http://localhost:35123/anything/pathParams/obj/any,any,bool,true,date,2020-01-01,dateTime,2020-01-01T00:00:00.000001Z,enum,one,float32,1.1,int,1,int32,1,int32Enum,55,intEnum,2,num,1.1,str,test,boolOpt,true,strOpt,testOptional/objExploded/any=any,bool=true,date=2020-01-01,dateTime=2020-01-01T00:00:00.000001Z,enum=one,float32=1.1,int=1,int32=1,int32Enum=55,intEnum=2,num=1.1,str=test,boolOpt=true,strOpt=testOptional'


def test_simple_path_parameter_arrays():
    record_test('parameters-simple-path-parameter-arrays')

    s = SDK()
    assert s is not None

    res = s.parameters.simple_path_parameter_arrays(
        arr_param=['test1', 'test2'])
    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.url == 'http://localhost:35123/anything/pathParams/arr/test1,test2'


def test_simple_path_parameter_maps():
    record_test('parameters-simple-path-parameter-maps')

    s = SDK()
    assert s is not None

    res = s.parameters.simple_path_parameter_maps(
        map_param={'test': 'value', 'test2': 'value2'},
        map_param_exploded={'test': 1, 'test2': 2},
    )
    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.url == 'http://localhost:35123/anything/pathParams/map/test,value,test2,value2/mapExploded/test=1,test2=2'


def test_path_parameter_json():
    record_test('parameters-path-parameter-json')

    s = SDK()
    assert s is not None

    res = s.parameters.path_parameter_json(json_obj=create_simple_object())
    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.url == 'http://localhost:35123/anything/pathParams/json/{"any": "any", "bool": true, "date": "2020-01-01", "dateTime": "2020-01-01T00:00:00.000001Z", "enum": "one", "float32": 1.1, "int": 1, "int32": 1, "int32Enum": 55, "intEnum": 2, "num": 1.1, "str": "test", "boolOpt": true, "strOpt": "testOptional"}'


def test_form_query_params_primitive():
    record_test('parameters-form-query-params-primitive')

    s = SDK()
    assert s is not None

    res = s.parameters.form_query_params_primitive(
        bool_param=True,
        int_param=1,
        num_param=1.1,
        str_param='test',
    )

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.url == 'http://localhost:35123/anything/queryParams/form/primitive?boolParam=true&intParam=1&numParam=1.1&strParam=test'
    assert res.res.args.bool_param == 'true'
    assert res.res.args.int_param == '1'
    assert res.res.args.num_param == '1.1'
    assert res.res.args.str_param == 'test'


def test_form_query_params_object():
    record_test('parameters-form-query-params-object')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.parameters.form_query_params_object(
        obj_param=obj,
        obj_param_exploded=obj,
    )

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.url == 'http://localhost:35123/anything/queryParams/form/obj?any=any&bool=true&date=2020-01-01&dateTime=2020-01-01T00%3A00%3A00.000001Z&enum=one&float32=1.1&int=1&int32=1&int32Enum=55&intEnum=2&num=1.1&str=test&boolOpt=true&strOpt=testOptional&objParam=any%2Cany%2Cbool%2Ctrue%2Cdate%2C2020-01-01%2CdateTime%2C2020-01-01T00%3A00%3A00.000001Z%2Cenum%2Cone%2Cfloat32%2C1.1%2Cint%2C1%2Cint32%2C1%2Cint32Enum%2C55%2CintEnum%2C2%2Cnum%2C1.1%2Cstr%2Ctest%2CboolOpt%2Ctrue%2CstrOpt%2CtestOptional'
    assert res.res.args.any == 'any'
    assert res.res.args.bool == 'true'
    assert res.res.args.bool_opt == 'true'
    assert res.res.args.date_ == '2020-01-01'
    assert res.res.args.date_time == '2020-01-01T00:00:00.000001Z'
    assert res.res.args.enum == 'one'
    assert res.res.args.float32 == '1.1'
    assert res.res.args.int == '1'
    assert res.res.args.int32 == '1'
    assert res.res.args.int32_enum == '55'
    assert res.res.args.int_enum == '2'
    assert res.res.args.num == '1.1'
    assert res.res.args.str_ == 'test'
    assert res.res.args.str_opt == 'testOptional'
    assert res.res.args.int_opt_null is None
    assert res.res.args.num_opt_null is None
    assert res.res.args.obj_param == 'any,any,bool,true,date,2020-01-01,dateTime,2020-01-01T00:00:00.000001Z,enum,one,float32,1.1,int,1,int32,1,int32Enum,55,intEnum,2,num,1.1,str,test,boolOpt,true,strOpt,testOptional'


def test_form_query_params_camel_object():
    record_test('parameters-form-query-params-camel-object')

    s = SDK()
    assert s is not None

    obj_param_exploded = FormQueryParamsCamelObjectObjParamExploded(
      search_term='foo',
      item_count='10'
    )
    obj_param = FormQueryParamsCamelObjectObjParam(
      encoded_term='bar',
      encoded_count='11'
    )

    res = s.parameters.form_query_params_camel_object(
        obj_param=obj_param,
        obj_param_exploded=obj_param_exploded,
    )

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.url == 'http://localhost:35123/anything/queryParams/form/camelObj?item_count=10&search_term=foo&obj_param=encoded_count%2C11%2Cencoded_term%2Cbar'
    assert res.res.args.search_term == 'foo'
    assert res.res.args.item_count == '10'

def test_form_query_params_ref_param_object():
    record_test('parameters-form-query-params-ref-param-object')

    s = SDK()
    assert s is not None

    res = s.parameters.form_query_params_ref_param_object(
        ref_obj_param=shared.RefQueryParamObj(
            bool=True,
            int=1,
            num=1.1,
            str_='test',
        ),
        ref_obj_param_exploded=shared.RefQueryParamObjExploded(
            bool=True,
            int=1,
            num=1.1,
            str_='test',
        ),
    )

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.url == 'http://localhost:35123/anything/queryParams/form/refParamObject?refObjParam=bool%2Ctrue%2Cint%2C1%2Cnum%2C1.1%2Cstr%2Ctest&bool=true&int=1&num=1.1&str=test'
    assert res.res.args.bool == 'true'
    assert res.res.args.int == '1'
    assert res.res.args.num == '1.1'
    assert res.res.args.str_ == 'test'
    assert res.res.args.ref_obj_param == 'bool,true,int,1,num,1.1,str,test'


def test_form_query_params_array():
    record_test('parameters-form-query-params-array')

    s = SDK()
    assert s is not None

    res = s.parameters.form_query_params_array(
        arr_param=['test', 'test2'],
        arr_param_exploded=[1, 2]
    )

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.url == 'http://localhost:35123/anything/queryParams/form/array?arrParam=test%2Ctest2&arrParamExploded=1&arrParamExploded=2'
    assert res.res.args.arr_param == 'test,test2'
    assert res.res.args.arr_param_exploded == ['1', '2']


def test_pipe_delimited_query_params_array():
    record_test('parameters-pipe-query-params-array')

    s = SDK()
    assert s is not None

    res = s.parameters.pipe_delimited_query_params_array(
        arr_param=['test', 'test2'],
        arr_param_exploded=[1, 2],
        map_param={'key1': 'val1', 'key2': 'val2'},
        obj_param=create_simple_object()
    )

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.url == 'http://localhost:35123/anything/queryParams/pipe/array?arrParam=test|test2&arrParamExploded=1&arrParamExploded=2&mapParam=key1|val1|key2|val2&objParam=any|any|bool|true|date|2020-01-01|dateTime|2020-01-01T00%3A00%3A00.000001Z|enum|one|float32|1.1|int|1|int32|1|int32Enum|55|intEnum|2|num|1.1|str|test|boolOpt|true|strOpt|testOptional'

    assert res.res.args.arr_param == 'test|test2'
    assert res.res.args.arr_param_exploded == ['1', '2']


def test_form_query_params_map():
    record_test('parameters-form-query-params-map')

    s = SDK()
    assert s is not None

    res = s.parameters.form_query_params_map(
        map_param={'test': 'value', 'test2': 'value2'},
        map_param_exploded={'test': 1, 'test2': 2},
    )

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.url == 'http://localhost:35123/anything/queryParams/form/map?mapParam=test%2Cvalue%2Ctest2%2Cvalue2&test=1&test2=2'
    assert res.res.args == {
        'mapParam': 'test,value,test2,value2', 'test': '1', 'test2': '2'}


def test_deep_object_query_params_object():
    record_test('parameters-deep-object-query-params-object')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.parameters.deep_object_query_params_object(
        obj_param=obj,
        obj_arr_param=DeepObjectQueryParamsObjectObjArrParam(
            arr=['test', 'test2']
        ),
    )

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.url == 'http://localhost:35123/anything/queryParams/deepObject/obj?objParam[any]=any&objParam[bool]=true&objParam[date]=2020-01-01&objParam[dateTime]=2020-01-01T00%3A00%3A00.000001Z&objParam[enum]=one&objParam[float32]=1.1&objParam[int]=1&objParam[int32]=1&objParam[int32Enum]=55&objParam[intEnum]=2&objParam[num]=1.1&objParam[str]=test&objParam[boolOpt]=true&objParam[strOpt]=testOptional&objArrParam[arr]=test&objArrParam[arr]=test2'
    assert res.res.args.obj_arr_param_arr == ['test', 'test2']
    assert res.res.args.obj_param_any == 'any'
    assert res.res.args.obj_param_bool == 'true'
    assert res.res.args.obj_param_bool_opt == 'true'
    assert res.res.args.obj_param_date == '2020-01-01'
    assert res.res.args.obj_param_date_time == '2020-01-01T00:00:00.000001Z'
    assert res.res.args.obj_param_enum == 'one'
    assert res.res.args.obj_param_float32 == '1.1'
    assert res.res.args.obj_param_int == '1'
    assert res.res.args.obj_param_int32 == '1'
    assert res.res.args.obj_param_int32_enum == '55'
    assert res.res.args.obj_param_int_enum == '2'
    assert res.res.args.obj_param_num == '1.1'
    assert res.res.args.obj_param_str == 'test'
    assert res.res.args.obj_param_str_opt == 'testOptional'


def test_deep_object_query_params_map():
    record_test('parameters-deep-object-query-params-map')

    s = SDK()
    assert s is not None

    res = s.parameters.deep_object_query_params_map(
        map_param={'test': 'value', 'test2': 'value2'},
        map_arr_param={'test': ['test', 'test2'],
                       'test2': ['test3', 'test4']},
    )

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.url == 'http://localhost:35123/anything/queryParams/deepObject/map?mapParam[test]=value&mapParam[test2]=value2&mapArrParam[test]=test&mapArrParam[test]=test2&mapArrParam[test2]=test3&mapArrParam[test2]=test4'
    assert res.res.args == {
        'mapArrParam[test]': ['test', 'test2'], 'mapArrParam[test2]': ['test3', 'test4'], 'mapParam[test]': 'value',
        'mapParam[test2]': 'value2'}


def test_json_query_params_object():
    record_test('parameters-json-query-params-object')

    s = SDK()
    assert s is not None

    simple_obj = create_simple_object()
    deep_obj = create_deep_object()

    res = s.parameters.json_query_params_object(
        simple_obj_param=simple_obj,
        deep_obj_param=deep_obj,
    )

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.url == 'http://localhost:35123/anything/queryParams/json/obj?deepObjParam={"any"%3A+{"any"%3A+"any"%2C+"bool"%3A+true%2C+"date"%3A+"2020-01-01"%2C+"dateTime"%3A+"2020-01-01T00%3A00%3A00.000001Z"%2C+"enum"%3A+"one"%2C+"float32"%3A+1.1%2C+"int"%3A+1%2C+"int32"%3A+1%2C+"int32Enum"%3A+55%2C+"intEnum"%3A+2%2C+"num"%3A+1.1%2C+"str"%3A+"test"%2C+"boolOpt"%3A+true%2C+"strOpt"%3A+"testOptional"}%2C+"arr"%3A+[{"any"%3A+"any"%2C+"bool"%3A+true%2C+"date"%3A+"2020-01-01"%2C+"dateTime"%3A+"2020-01-01T00%3A00%3A00.000001Z"%2C+"enum"%3A+"one"%2C+"float32"%3A+1.1%2C+"int"%3A+1%2C+"int32"%3A+1%2C+"int32Enum"%3A+55%2C+"intEnum"%3A+2%2C+"num"%3A+1.1%2C+"str"%3A+"test"%2C+"boolOpt"%3A+true%2C+"strOpt"%3A+"testOptional"}%2C+{"any"%3A+"any"%2C+"bool"%3A+true%2C+"date"%3A+"2020-01-01"%2C+"dateTime"%3A+"2020-01-01T00%3A00%3A00.000001Z"%2C+"enum"%3A+"one"%2C+"float32"%3A+1.1%2C+"int"%3A+1%2C+"int32"%3A+1%2C+"int32Enum"%3A+55%2C+"intEnum"%3A+2%2C+"num"%3A+1.1%2C+"str"%3A+"test"%2C+"boolOpt"%3A+true%2C+"strOpt"%3A+"testOptional"}]%2C+"bool"%3A+true%2C+"int"%3A+1%2C+"map"%3A+{"key"%3A+{"any"%3A+"any"%2C+"bool"%3A+true%2C+"date"%3A+"2020-01-01"%2C+"dateTime"%3A+"2020-01-01T00%3A00%3A00.000001Z"%2C+"enum"%3A+"one"%2C+"float32"%3A+1.1%2C+"int"%3A+1%2C+"int32"%3A+1%2C+"int32Enum"%3A+55%2C+"intEnum"%3A+2%2C+"num"%3A+1.1%2C+"str"%3A+"test"%2C+"boolOpt"%3A+true%2C+"strOpt"%3A+"testOptional"}}%2C+"num"%3A+1.1%2C+"obj"%3A+{"any"%3A+"any"%2C+"bool"%3A+true%2C+"date"%3A+"2020-01-01"%2C+"dateTime"%3A+"2020-01-01T00%3A00%3A00.000001Z"%2C+"enum"%3A+"one"%2C+"float32"%3A+1.1%2C+"int"%3A+1%2C+"int32"%3A+1%2C+"int32Enum"%3A+55%2C+"intEnum"%3A+2%2C+"num"%3A+1.1%2C+"str"%3A+"test"%2C+"boolOpt"%3A+true%2C+"strOpt"%3A+"testOptional"}%2C+"str"%3A+"test"}&simpleObjParam={"any"%3A+"any"%2C+"bool"%3A+true%2C+"date"%3A+"2020-01-01"%2C+"dateTime"%3A+"2020-01-01T00%3A00%3A00.000001Z"%2C+"enum"%3A+"one"%2C+"float32"%3A+1.1%2C+"int"%3A+1%2C+"int32"%3A+1%2C+"int32Enum"%3A+55%2C+"intEnum"%3A+2%2C+"num"%3A+1.1%2C+"str"%3A+"test"%2C+"boolOpt"%3A+true%2C+"strOpt"%3A+"testOptional"}'
    assert res.res.args.simple_obj_param == marshal_json(simple_obj)
    assert res.res.args.deep_obj_param == marshal_json(deep_obj)


def test_mixed_query_params():
    record_test('parameters-mixed-query-params')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.parameters.mixed_query_params(
        deep_object_param=obj,
        form_param=obj,
        json_param=obj,
    )

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.url == 'http://localhost:35123/anything/queryParams/mixed?deepObjectParam[any]=any&deepObjectParam[bool]=true&deepObjectParam[date]=2020-01-01&deepObjectParam[dateTime]=2020-01-01T00%3A00%3A00.000001Z&deepObjectParam[enum]=one&deepObjectParam[float32]=1.1&deepObjectParam[int]=1&deepObjectParam[int32]=1&deepObjectParam[int32Enum]=55&deepObjectParam[intEnum]=2&deepObjectParam[num]=1.1&deepObjectParam[str]=test&deepObjectParam[boolOpt]=true&deepObjectParam[strOpt]=testOptional&any=any&bool=true&date=2020-01-01&dateTime=2020-01-01T00%3A00%3A00.000001Z&enum=one&float32=1.1&int=1&int32=1&int32Enum=55&intEnum=2&num=1.1&str=test&boolOpt=true&strOpt=testOptional&jsonParam={"any"%3A+"any"%2C+"bool"%3A+true%2C+"date"%3A+"2020-01-01"%2C+"dateTime"%3A+"2020-01-01T00%3A00%3A00.000001Z"%2C+"enum"%3A+"one"%2C+"float32"%3A+1.1%2C+"int"%3A+1%2C+"int32"%3A+1%2C+"int32Enum"%3A+55%2C+"intEnum"%3A+2%2C+"num"%3A+1.1%2C+"str"%3A+"test"%2C+"boolOpt"%3A+true%2C+"strOpt"%3A+"testOptional"}'
    assert res.res.args == {
        'any': 'any',
        'bool': 'true',
        'boolOpt': 'true',
        'date': '2020-01-01',
        'dateTime': '2020-01-01T00:00:00.000001Z',
        'deepObjectParam[any]': 'any',
        'deepObjectParam[bool]': 'true',
        'deepObjectParam[boolOpt]': 'true',
        'deepObjectParam[date]': '2020-01-01',
        'deepObjectParam[dateTime]': '2020-01-01T00:00:00.000001Z',
        'deepObjectParam[enum]': 'one',
        'deepObjectParam[float32]': '1.1',
        'deepObjectParam[int]': '1',
        'deepObjectParam[int32]': '1',
        'deepObjectParam[int32Enum]': '55',
        'deepObjectParam[intEnum]': '2',
        'deepObjectParam[num]': '1.1',
        'deepObjectParam[str]': 'test',
        'deepObjectParam[strOpt]': 'testOptional',
        'enum': 'one',
        'float32': '1.1',
        'int': '1',
        'int32': '1',
        'int32Enum': '55',
        'intEnum': '2',
        'jsonParam': marshal_json(obj),
        'num': '1.1',
        'str': 'test',
        'strOpt': 'testOptional'
    }


def test_header_params_primitive():
    record_test('parameters-header-params-primitive')

    s = SDK()
    assert s is not None

    res = s.parameters.header_params_primitive(
        x_header_boolean=True,
        x_header_integer=1,
        x_header_number=1.1,
        x_header_string='test',
    )

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.headers.x_header_boolean == 'true'
    assert res.res.headers.x_header_integer == '1'
    assert res.res.headers.x_header_number == '1.1'
    assert res.res.headers.x_header_string == 'test'


def test_header_params_object():
    record_test('parameters-header-params-object')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.parameters.header_params_object(
        x_header_obj=obj,
        x_header_obj_explode=obj,
    )

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.headers.x_header_obj == 'any,any,bool,true,date,2020-01-01,dateTime,2020-01-01T00:00:00.000001Z,enum,one,float32,1.1,int,1,int32,1,int32Enum,55,intEnum,2,num,1.1,str,test,boolOpt,true,strOpt,testOptional'
    assert res.res.headers.x_header_obj_explode == 'any=any,bool=true,date=2020-01-01,dateTime=2020-01-01T00:00:00.000001Z,enum=one,float32=1.1,int=1,int32=1,int32Enum=55,intEnum=2,num=1.1,str=test,boolOpt=true,strOpt=testOptional'


def test_header_params_map():
    record_test('parameters-header-params-map')

    s = SDK()
    assert s is not None

    res = s.parameters.header_params_map(
        x_header_map={'key1': 'value1', 'key2': 'value2'},
        x_header_map_explode={'test1': 'val1', 'test2': 'val2'},
    )

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.headers.x_header_map == 'key1,value1,key2,value2'
    assert res.res.headers.x_header_map_explode == 'test1=val1,test2=val2'


def test_header_params_array():
    record_test('parameters-header-params-array')

    s = SDK()
    assert s is not None

    res = s.parameters.header_params_array(x_header_array=['test1', 'test2'])

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.headers.x_header_array == 'test1,test2'
