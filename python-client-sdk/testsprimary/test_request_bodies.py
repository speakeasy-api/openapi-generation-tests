"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from decimal import Decimal

from sdk import SDK
from sdk.models.operations import *
from sdk.models.shared import simpleobject as shared_simpleobject
from sdk.utils import *

from .common_helpers import *
from .helpers import *


def test_request_body_post_application_json_simple():
    record_test('request-bodies-post-application-json-simple')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.request_bodies.request_body_post_application_json_simple(
        request=obj)

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    compare_simple_object(res.res.json, obj)


def test_request_body_post_application_json_array():
    record_test('request-bodies-post-application-json-array')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.request_bodies.request_body_post_application_json_array(request=[
                                                                    obj])

    assert res is not None
    assert res.status_code == 200
    assert res.simple_objects is not None
    compare_simple_object(res.simple_objects[0], obj)


def test_request_body_post_application_json_array_of_array():
    record_test('request-bodies-post-application-json-array-of-array')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.request_bodies.request_body_post_application_json_array_of_array(request=[
                                                                             [obj], [obj]])

    assert res is not None
    assert res.status_code == 200
    assert res.arrs is not None
    compare_simple_object(res.arrs[0][0], obj)
    compare_simple_object(res.arrs[1][0], obj)


def test_request_body_post_application_json_map():
    record_test('request-bodies-post-application-json-map')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.request_bodies.request_body_post_application_json_map(request={
        'mapElem1': obj,
        'mapElem2': obj,
    })

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    compare_simple_object(res.res['mapElem1'], obj)
    compare_simple_object(res.res['mapElem2'], obj)


def test_request_body_post_application_json_map_of_map():
    record_test('request-bodies-post-application-json-map-of-map')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.request_bodies.request_body_post_application_json_map_of_map(request={
        'mapElem1': {
            'subMapElem1': obj,
            'subMapElem2': obj,
        },
        'mapElem2': {
            'subMapElem1': obj,
            'subMapElem2': obj,
        },
    })

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    compare_simple_object(res.res['mapElem1']['subMapElem1'], obj)
    compare_simple_object(res.res['mapElem1']['subMapElem2'], obj)
    compare_simple_object(res.res['mapElem2']['subMapElem1'], obj)
    compare_simple_object(res.res['mapElem2']['subMapElem2'], obj)


def test_request_body_post_application_json_map_of_array():
    record_test('request-bodies-post-application-json-map-of-array')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.request_bodies.request_body_post_application_json_map_of_array(request={
        'mapElem1': [obj, obj],
        'mapElem2': [obj, obj],
    })

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    compare_simple_object(res.res['mapElem1'][0], obj)
    compare_simple_object(res.res['mapElem1'][1], obj)
    compare_simple_object(res.res['mapElem2'][0], obj)
    compare_simple_object(res.res['mapElem2'][1], obj)


def test_request_body_post_application_json_array_of_map():
    record_test('request-bodies-post-application-json-array-of-map')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.request_bodies.request_body_post_application_json_array_of_map(request=[
        {
            'mapElem1': obj,
            'mapElem2': obj,
        },
        {
            'mapElem1': obj,
            'mapElem2': obj,
        },
    ])

    assert res is not None
    assert res.status_code == 200
    assert res.maps is not None
    compare_simple_object(res.maps[0]['mapElem1'], obj)
    compare_simple_object(res.maps[0]['mapElem2'], obj)
    compare_simple_object(res.maps[1]['mapElem1'], obj)
    compare_simple_object(res.maps[1]['mapElem2'], obj)


def test_request_body_post_application_json_map_of_primitive():
    record_test('request-bodies-post-application-json-map-of-primitive')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_application_json_map_of_primitive(request={
        'mapElem1': 'hello',
        'mapElem2': 'world',
    })

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res['mapElem1'] == 'hello'
    assert res.res['mapElem2'] == 'world'


def test_request_body_post_application_json_array_of_primitive():
    record_test('request-bodies-post-application-json-array-of-primitive')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_application_json_array_of_primitive(
        request=['hello', 'world'])

    assert res is not None
    assert res.status_code == 200
    assert res.strings is not None
    assert res.strings == ['hello', 'world']


def test_request_body_post_application_json_map_of_map_of_primitive():
    record_test('request-bodies-post-application-json-map-of-map-of-primitive')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_application_json_map_of_map_of_primitive(request={
        'mapElem1': {
            'subMapElem1': 'foo',
            'subMapElem2': 'bar',
        },
        'mapElem2': {
            'subMapElem1': 'buzz',
            'subMapElem2': 'bazz',
        },
    })

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res['mapElem1']['subMapElem1'] == 'foo'
    assert res.res['mapElem1']['subMapElem2'] == 'bar'
    assert res.res['mapElem2']['subMapElem1'] == 'buzz'
    assert res.res['mapElem2']['subMapElem2'] == 'bazz'


def test_request_body_post_application_json_array_of_array_of_primitive():
    record_test(
        'request-bodies-post-application-json-array-of-array-of-primitive')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_application_json_array_of_array_of_primitive(request=[
        ['foo', 'bar'],
        ['buzz', 'bazz'],
    ])

    assert res is not None
    assert res.status_code == 200
    assert res.arrs is not None
    assert res.arrs == [
        ['foo', 'bar'],
        ['buzz', 'bazz'],
    ]


def test_request_body_post_application_json_array_object():
    record_test('request-bodies-post-application-json-array-object')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.request_bodies.request_body_post_application_json_array_obj(request=[
                                                                        obj, obj])

    assert res is not None
    assert res.status_code == 200
    assert res.arr_obj_value is not None
    assert len(res.arr_obj_value.json) == 2
    compare_simple_object(res.arr_obj_value.json[0], obj)
    compare_simple_object(res.arr_obj_value.json[1], obj)


def test_request_body_post_application_json_map_object():
    record_test('request-bodies-post-application-json-map-object')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.request_bodies.request_body_post_application_json_map_obj(request={
        'mapElem1': obj,
        'mapElem2': obj,
    })

    assert res is not None
    assert res.status_code == 200
    assert res.map_obj_value is not None
    assert len(res.map_obj_value.json) == 2
    compare_simple_object(res.map_obj_value.json['mapElem1'], obj)
    compare_simple_object(res.map_obj_value.json['mapElem2'], obj)


def test_request_body_post_application_json_deep():
    record_test('request-bodies-post-application-json-deep')

    s = SDK()
    assert s is not None

    obj = create_deep_object()

    res = s.request_bodies.request_body_post_application_json_deep(request=obj)

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None

    any = res.res.json.any
    res.res.json.any = None
    obj.any = None

    compare_deep_object(res.res.json, obj)
    compare_simple_object(any, create_simple_object())


def test_request_body_post_application_json_multiple_json_filtered():
    record_test('request-bodies-post-application-json-multiple-json-filtered')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.request_bodies.request_body_post_application_json_multiple_json_filtered(
        request=obj)

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    compare_simple_object(res.res.json, obj)


def test_request_body_post_multiple_content_types_component_filtered():
    record_test('request-bodies-post-multiple-content-types-component-filtered')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.request_bodies.request_body_post_multiple_content_types_component_filtered(
        request=obj)

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    compare_simple_object(res.res.json, obj)


def test_request_body_post_multiple_content_types_inline_filtered():
    record_test('request-bodies-post-multiple-content-types-inline-filtered')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_multiple_content_types_inline_filtered(request=RequestBodyPostMultipleContentTypesInlineFilteredApplicationJSON(
        bool=True,
        num=1.1,
        str_='test'
    ))

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.json == {
        'bool': True,
        'num': 1.1,
        'str': 'test'
    }


def test_request_body_post_multiple_content_types_split_json():
    record_test('request-bodies-post-multiple-content-types-split-json')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_multiple_content_types_split_json(request=RequestBodyPostMultipleContentTypesSplitApplicationJSON(
        bool=True,
        num=1.1,
        str_='test'
    ))

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert {
        'bool': True,
        'num': 1.1,
        'str': 'test'
    } == res.res.json


def test_request_body_post_multiple_content_types_split_multipart():
    record_test('request-bodies-post-multiple-content-types-split-multipart')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_multiple_content_types_split_multipart(request=RequestBodyPostMultipleContentTypesSplitMultipartFormData(
        bool2=True,
        num2=1.1,
        str2='test'
    ))

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert {
        'bool2': 'true',
        'num2': '1.1',
        'str2': 'test'
    } == res.res.form


def test_request_body_post_multiple_content_types_split_form():
    record_test('request-bodies-post-multiple-content-types-split-form')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_multiple_content_types_split_form(request=RequestBodyPostMultipleContentTypesSplitApplicationXWwwFormUrlencoded(
        bool3=True,
        num3=1.1,
        str3='test'
    ))

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert {
        'bool3': 'true',
        'num3': '1.1',
        'str3': 'test'
    } == res.res.form


def test_request_body_post_multiple_content_types_split_json_with_param():
    record_test(
        'request-bodies-post-multiple-content-types-split-json-with-param')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_multiple_content_types_split_param_json(
        request_body=RequestBodyPostMultipleContentTypesSplitParamApplicationJSON(
            bool=True,
            num=1.1,
            str_='test body'
        ),
        param_str='test param'
    )

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert {
        'bool': True,
        'num': 1.1,
        'str': 'test body'
    } == res.res.json
    assert {'paramStr': 'test param'} == res.res.args


def test_request_body_post_multiple_content_types_split_multipart_with_param():
    record_test(
        'request-bodies-post-multiple-content-types-split-multipart-with-param')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_multiple_content_types_split_param_multipart(
        request_body=RequestBodyPostMultipleContentTypesSplitParamMultipartFormData(
            bool2=True,
            num2=1.1,
            str2='test body'
        ),
        param_str='test param'
    )

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert {
        'bool2': 'true',
        'num2': '1.1',
        'str2': 'test body'
    } == res.res.form
    assert {'paramStr': 'test param'} == res.res.args


def test_request_body_post_multiple_content_types_split_form_with_param():
    record_test(
        'request-bodies-post-multiple-content-types-split-form-with-param')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_multiple_content_types_split_param_form(
        request_body=RequestBodyPostMultipleContentTypesSplitParamApplicationXWwwFormUrlencoded(
            bool3=True,
            num3=1.1,
            str3='test body'
        ),
        param_str='test param'
    )

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert {
        'bool3': 'true',
        'num3': '1.1',
        'str3': 'test body'
    } == res.res.form
    assert {'paramStr': 'test param'} == res.res.args


def test_request_body_put_multipart_simple():
    record_test('request-bodies-put-multipart-simple')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.request_bodies.request_body_put_multipart_simple(request=obj)

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.form.any == 'any'
    assert res.res.form.bool == 'true'
    assert res.res.form.bool_opt == 'true'
    assert res.res.form.date_ == '2020-01-01'
    assert res.res.form.date_time == '2020-01-01T00:00:00.000001Z'
    assert res.res.form.enum == 'one'
    assert res.res.form.float32 == '1.1'
    assert res.res.form.int == '1'
    assert res.res.form.int32 == '1'
    assert res.res.form.num == '1.1'
    assert res.res.form.str_ == 'test'
    assert res.res.form.str_opt == 'testOptional'
    assert res.res.form.int_opt_null is None
    assert res.res.form.num_opt_null is None


def test_request_body_put_multipart_deep():
    record_test('request-bodies-put-multipart-deep')

    s = SDK()
    assert s is not None

    obj = create_deep_object()

    res = s.request_bodies.request_body_put_multipart_deep(request=obj)

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.form.arr == marshal_json(obj.arr)
    assert res.res.form.bool == 'true'
    assert res.res.form.int == '1'
    assert res.res.form.map == marshal_json(obj.map)
    assert res.res.form.num == '1.1'
    assert res.res.form.obj == marshal_json(obj.obj)
    assert res.res.form.str_ == 'test'


def test_request_body_put_multipart_file():
    record_test('request-bodies-put-multipart-file')

    s = SDK()
    assert s is not None

    f = open('./tests/testUpload.json')
    data = f.read()

    res = s.request_bodies.request_body_put_multipart_file(request=RequestBodyPutMultipartFileRequestBody(
        file=RequestBodyPutMultipartFileRequestBodyFile(
            content=data,
            file='testUpload.json'
        )
    ))

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.files == {
        'file': data
    }


def test_request_body_put_multipart_different_file_name():
    record_test('request-bodies-put-different-file-name')

    s = SDK()
    assert s is not None

    f = open('./tests/testUpload.json')
    data = f.read()

    res = s.request_bodies.request_body_put_multipart_different_file_name(request=RequestBodyPutMultipartDifferentFileNameRequestBody(
        different_file_name=RequestBodyPutMultipartDifferentFileNameRequestBodyDifferentFileName(
            content=data,
            different_file_name='testUpload.json'
        )
    ))

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.files == {
        'differentFileName': data
    }


def test_request_body_post_form_simple():
    record_test('request-bodies-post-form-simple')

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.request_bodies.request_body_post_form_simple(request=obj)

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.form.any == 'any'
    assert res.res.form.bool == 'true'
    assert res.res.form.bool_opt == 'true'
    assert res.res.form.date_ == '2020-01-01'
    assert res.res.form.date_time == '2020-01-01T00:00:00.000001Z'
    assert res.res.form.enum == 'one'
    assert res.res.form.float32 == '1.1'
    assert res.res.form.int == '1'
    assert res.res.form.int32 == '1'
    assert res.res.form.num == '1.1'
    assert res.res.form.str_ == 'test'
    assert res.res.form.str_opt == 'testOptional'
    assert res.res.form.int_opt_null is None
    assert res.res.form.num_opt_null is None


def test_request_body_post_form_deep():
    record_test('request-bodies-post-form-deep')

    s = SDK()
    assert s is not None

    obj = create_deep_object()

    res = s.request_bodies.request_body_post_form_deep(request=obj)

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.form.arr == marshal_json(obj.arr)
    assert res.res.form.bool == 'true'
    assert res.res.form.int == '1'
    assert res.res.form.map == marshal_json(obj.map)
    assert res.res.form.num == '1.1'
    assert res.res.form.obj == marshal_json(obj.obj)
    assert res.res.form.str_ == 'test'


def test_request_body_post_form_map_primitive():
    record_test('request-bodies-post-form-map-primitive')

    s = SDK()
    assert s is not None

    m = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}

    res = s.request_bodies.request_body_post_form_map_primitive(request=m)

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.form == m


def test_request_body_put_string():
    record_test('request-bodies-put-string')

    s = SDK()
    assert s is not None

    string = 'Hello world'
    res = s.request_bodies.request_body_put_string(request=string)

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.data == string


def test_request_body_put_bytes():
    record_test('request-bodies-put-bytes')

    s = SDK()
    assert s is not None

    f = open('./tests/testUpload.json')
    data = f.read()
    res = s.request_bodies.request_body_put_bytes(request=data)

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.data == data


def test_request_body_put_string_with_params():
    record_test('request-bodies-put-string-with-params')

    s = SDK()
    assert s is not None

    string = 'Hello world'
    res = s.request_bodies.request_body_put_string_with_params(
        request_body=string, query_string_param="test param")

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.data == string
    assert res.res.args.query_string_param == "test param"


def test_request_body_put_bytes_with_params():
    record_test('request-bodies-put-bytes-with-params')

    s = SDK()
    assert s is not None

    f = open('./tests/testUpload.json')
    data = f.read()
    res = s.request_bodies.request_body_put_bytes_with_params(
        request_body=data, query_string_param="test param")

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    assert res.res.data == data
    assert res.res.args.query_string_param == "test param"


def test_request_body_post_empty_object():
    record_test('request-bodies-post-empty-object')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_empty_object(request={})

    assert res is not None
    assert res.status_code == 200


def test_request_body_camel_case():
    record_test('request-bodies-post-application-json-simple-camel-case')

    s = SDK()
    assert s is not None

    obj = create_simple_object_camel_case()

    res = s.request_bodies.request_body_post_application_json_simple_camel_case(
        request=obj)

    assert res is not None
    assert res.status_code == 200
    assert res.res is not None
    compare_simple_object_camel_case(res.res.json)


def test_request_body_read_only_input():
    record_test('request-bodies-read-only-input')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_read_only_input(
        shared.ReadOnlyObjectInput())

    assert res is not None
    assert res.status_code == 200
    assert res.read_only_object is not None
    assert res.read_only_object.bool == True
    assert res.read_only_object.num == 1.0
    assert res.read_only_object.string == 'hello'


def test_request_body_write_only_output():
    record_test('request-bodies-write-only-output')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_write_only_output(
        shared.WriteOnlyObject(True, 1.0, 'hello'))

    assert res is not None
    assert res.status_code == 200
    assert res.write_only_object is not None


def test_request_body_write_only():
    record_test('request-bodies-write-only')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_write_only(
        shared.WriteOnlyObject(True, 1.0, 'hello'))

    assert res is not None
    assert res.status_code == 200
    assert res.read_only_object is not None
    assert res.read_only_object.bool == True
    assert res.read_only_object.num == 1.0
    assert res.read_only_object.string == 'hello'


def test_request_body_read_and_write():
    record_test('request-bodies-read-and-write')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_read_and_write(
        shared.ReadWriteObjectInput(1, 2, 4))

    assert res is not None
    assert res.status_code == 200
    assert res.read_write_object is not None
    assert res.read_write_object.num3 == 4
    assert res.read_write_object.sum == 7


def test_request_body_post_complex_number_types():
    record_test('request-bodies-complex-number-types')

    s = SDK()
    assert s is not None

    req = RequestBodyPostComplexNumberTypesRequest(
        complex_number_types=shared.ComplexNumberTypes(
            bigint=9007199254740991,
            bigint_str=9223372036854775807,
            decimal=Decimal('3.141592653589793'),
            decimal_str=Decimal('3.141592653589793238462643383279'),
        ),
        path_big_int=9007199254740991,
        path_big_int_str=9223372036854775807,
        path_decimal=Decimal('3.141592653589793'),
        path_decimal_str=Decimal('3.141592653589793238462643383279'),
        query_big_int=9007199254740991,
        query_big_int_str=9223372036854775807,
        query_decimal=Decimal('3.141592653589793'),
        query_decimal_str=Decimal('3.141592653589793238462643383279'),
    )

    res = s.request_bodies.request_body_post_complex_number_types(req)

    assert res is not None
    assert res.status_code == 200
    assert res.request_body_post_complex_number_types_200_application_json_object.json == req.complex_number_types
    assert res.request_body_post_complex_number_types_200_application_json_object.url == 'http://localhost:35123/anything/requestBodies/post/9007199254740991/9223372036854775807/3.141592653589793/3.141592653589793238462643383279/complex-number-types?queryBigInt=9007199254740991&queryBigIntStr=9223372036854775807&queryDecimal=3.141592653589793&queryDecimalStr=3.141592653589793238462643383279'


def test_request_body_post_defaults_and_consts():
    record_test('request-bodies-defaults-and-consts')

    s = SDK()
    assert s is not None

    req = shared.DefaultsAndConsts(
        normal_field='normal',
        default_str='not default',
    )

    res = s.request_bodies.request_body_post_defaults_and_consts(req)

    assert res is not None
    assert res.status_code == 200

    assert res.request_body_post_defaults_and_consts_200_application_json_object.json.normal_field == 'normal'

    assert res.request_body_post_defaults_and_consts_200_application_json_object.json.const_big_int == 9007199254740991
    assert res.request_body_post_defaults_and_consts_200_application_json_object.json.const_big_int_str == 9223372036854775807
    assert res.request_body_post_defaults_and_consts_200_application_json_object.json.const_bool == True
    assert res.request_body_post_defaults_and_consts_200_application_json_object.json.const_date == date(
        2020, 1, 1)
    assert res.request_body_post_defaults_and_consts_200_application_json_object.json.const_date_time == datetime(
        2020, 1, 1, 0, 0, 0, 0, tzutc())
    assert res.request_body_post_defaults_and_consts_200_application_json_object.json.const_decimal == Decimal(
        '3.141592653589793')
    assert res.request_body_post_defaults_and_consts_200_application_json_object.json.const_decimal_str == Decimal(
        '3.141592653589793238462643383279')
    assert res.request_body_post_defaults_and_consts_200_application_json_object.json.const_enum_int == shared.DefaultsAndConstsConstEnumInt.TWO
    assert res.request_body_post_defaults_and_consts_200_application_json_object.json.const_enum_str == shared.DefaultsAndConstsConstEnumStr.TWO
    assert res.request_body_post_defaults_and_consts_200_application_json_object.json.const_int == 123
    assert res.request_body_post_defaults_and_consts_200_application_json_object.json.const_num == 123.456
    assert res.request_body_post_defaults_and_consts_200_application_json_object.json.const_str == 'const'
    assert res.request_body_post_defaults_and_consts_200_application_json_object.json.const_str_null is None

    assert res.request_body_post_defaults_and_consts_200_application_json_object.json.default_big_int == 9007199254740991
    assert res.request_body_post_defaults_and_consts_200_application_json_object.json.default_big_int_str == 9223372036854775807
    assert res.request_body_post_defaults_and_consts_200_application_json_object.json.default_bool == True
    assert res.request_body_post_defaults_and_consts_200_application_json_object.json.default_date == date(
        2020, 1, 1)
    assert res.request_body_post_defaults_and_consts_200_application_json_object.json.default_date_time == datetime(
        2020, 1, 1, 0, 0, 0, 0, tzutc())
    assert res.request_body_post_defaults_and_consts_200_application_json_object.json.default_decimal == Decimal(
        '3.141592653589793')
    assert res.request_body_post_defaults_and_consts_200_application_json_object.json.default_decimal_str == Decimal(
        '3.141592653589793238462643383279')
    assert res.request_body_post_defaults_and_consts_200_application_json_object.json.default_enum_int == shared.DefaultsAndConstsDefaultEnumInt.TWO
    assert res.request_body_post_defaults_and_consts_200_application_json_object.json.default_enum_str == shared.DefaultsAndConstsDefaultEnumStr.TWO
    assert res.request_body_post_defaults_and_consts_200_application_json_object.json.default_int == 123
    assert res.request_body_post_defaults_and_consts_200_application_json_object.json.default_num == 123.456
    assert res.request_body_post_defaults_and_consts_200_application_json_object.json.default_str == 'not default'
    assert res.request_body_post_defaults_and_consts_200_application_json_object.json.default_str_nullable is None
    assert res.request_body_post_defaults_and_consts_200_application_json_object.json.default_str_optional == 'default'


def test_request_body_post_json_data_types_string():
    record_test('request-bodies-post-json-data-types-string')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_json_data_types_string('test')

    assert res is not None
    assert res.status_code == 200
    assert res.request_body_post_json_data_types_string_200_application_json_object.json == 'test'


def test_request_body_post_json_data_types_integer():
    record_test('request-bodies-post-json-data-types-integer')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_json_data_types_integer(1)

    assert res is not None
    assert res.status_code == 200
    assert res.request_body_post_json_data_types_integer_200_application_json_object.json == 1


def test_request_body_post_json_data_types_int32():
    record_test('request-bodies-post-json-data-types-int32')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_json_data_types_int32(1)

    assert res is not None
    assert res.status_code == 200
    assert res.request_body_post_json_data_types_int32_200_application_json_object.json == 1


def test_request_body_post_json_data_types_big_int():
    record_test('request-bodies-post-json-data-types-bigint')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_json_data_types_big_int(
        1)

    assert res is not None
    assert res.status_code == 200
    assert res.request_body_post_json_data_types_big_int_200_application_json_object.json == 1
    assert res.request_body_post_json_data_types_big_int_200_application_json_object.data == '1'


def test_request_body_post_json_data_types_big_int_str():
    record_test('request-bodies-post-json-data-types-bigint-str')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_json_data_types_big_int_str(
        1)

    assert res is not None
    assert res.status_code == 200
    assert res.request_body_post_json_data_types_big_int_str_200_application_json_object.json == 1
    assert res.request_body_post_json_data_types_big_int_str_200_application_json_object.data == '"1"'


def test_request_body_post_json_data_types_number():
    record_test('request-bodies-post-json-data-types-number')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_json_data_types_number(
        1.1)

    assert res is not None
    assert res.status_code == 200
    assert res.request_body_post_json_data_types_number_200_application_json_object.json == 1.1


def test_request_body_post_json_data_types_float32():
    record_test('request-bodies-post-json-data-types-float32')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_json_data_types_float32(
        1.1)

    assert res is not None
    assert res.status_code == 200
    assert res.request_body_post_json_data_types_float32_200_application_json_object.json == 1.1


def test_request_body_post_json_data_types_decimal():
    record_test('request-bodies-post-json-data-types-decimal')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_json_data_types_decimal(
        Decimal('1.1'))

    assert res is not None
    assert res.status_code == 200
    assert res.request_body_post_json_data_types_decimal_200_application_json_object.json == Decimal(
        '1.1')


def test_request_body_post_json_data_types_decimal_str():
    record_test('request-bodies-post-json-data-types-decimal-str')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_json_data_types_decimal_str(
        Decimal('1.1'))

    assert res is not None
    assert res.status_code == 200
    assert res.request_body_post_json_data_types_decimal_str_200_application_json_object.json == Decimal(
        '1.1')
    assert res.request_body_post_json_data_types_decimal_str_200_application_json_object.data == '"1.1"'


def test_request_body_post_json_data_types_boolean():
    record_test('request-bodies-post-json-data-types-boolean')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_json_data_types_boolean(True)

    assert res is not None
    assert res.status_code == 200
    assert res.request_body_post_json_data_types_boolean_200_application_json_object.json == True


def test_request_body_post_json_data_types_date():
    record_test('request-bodies-post-json-data-types-date')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_json_data_types_date(
        date(2020, 1, 1))

    assert res is not None
    assert res.status_code == 200
    assert res.request_body_post_json_data_types_date_200_application_json_object.json == date(
        2020, 1, 1)


def test_request_body_post_json_data_types_date_time():
    record_test('request-bodies-post-json-data-types-date-time')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_json_data_types_date_time(
        datetime(2020, 1, 1, 0, 0, 0, 0, tzutc()))

    assert res is not None
    assert res.status_code == 200
    assert res.request_body_post_json_data_types_date_time_200_application_json_object.json == datetime(
        2020, 1, 1, 0, 0, 0, 0, tzutc())


def test_request_body_post_json_data_types_map_date_time():
    record_test('request-bodies-post-json-data-types-map-date-time')

    s = SDK()
    assert s is not None

    req = {'test': datetime(2020, 1, 1, 0, 0, 0, 1, tzutc())}

    res = s.request_bodies.request_body_post_json_data_types_map_date_time(req)

    assert res is not None
    assert res.status_code == 200
    assert res.request_body_post_json_data_types_map_date_time_200_application_json_object.json == req
    assert res.request_body_post_json_data_types_map_date_time_200_application_json_object.data == '{"test": "2020-01-01T00:00:00.000001Z"}'


def test_request_body_post_json_data_types_map_big_int_str():
    record_test('request-bodies-post-json-data-types-map-bigint-str')

    s = SDK()
    assert s is not None

    req = {'test': 1}

    res = s.request_bodies.request_body_post_json_data_types_map_big_int_str(
        req)

    assert res is not None
    assert res.status_code == 200
    assert res.request_body_post_json_data_types_map_big_int_str_200_application_json_object.json == req
    assert res.request_body_post_json_data_types_map_big_int_str_200_application_json_object.data == '{"test": "1"}'


def test_request_body_post_json_data_types_map_decimal():
    record_test('request-bodies-post-json-data-types-map-decimal')

    s = SDK()
    assert s is not None

    req = {'test': Decimal('1.1')}

    res = s.request_bodies.request_body_post_json_data_types_map_decimal(
        req)

    assert res is not None
    assert res.status_code == 200
    assert res.request_body_post_json_data_types_map_decimal_200_application_json_object.json == req
    assert res.request_body_post_json_data_types_map_decimal_200_application_json_object.data == '{"test": 1.1}'


def test_request_body_post_json_data_types_array_date():
    record_test('request-bodies-post-json-data-types-array-date')

    s = SDK()
    assert s is not None

    req = [date(2020, 1, 1)]

    res = s.request_bodies.request_body_post_json_data_types_array_date(req)

    assert res is not None
    assert res.status_code == 200
    assert res.request_body_post_json_data_types_array_date_200_application_json_object.json == req
    assert res.request_body_post_json_data_types_array_date_200_application_json_object.data == '["2020-01-01"]'


def test_request_body_post_json_data_types_array_big_int():
    record_test('request-bodies-post-json-data-types-array-bigint')

    s = SDK()
    assert s is not None

    req = [1]

    res = s.request_bodies.request_body_post_json_data_types_array_big_int(
        req)

    assert res is not None
    assert res.status_code == 200
    assert res.request_body_post_json_data_types_array_big_int_200_application_json_object.json == req
    assert res.request_body_post_json_data_types_array_big_int_200_application_json_object.data == '[1]'


def test_request_body_post_json_data_types_array_decimal_str():
    record_test('request-bodies-post-json-data-types-array-decimal-str')

    s = SDK()
    assert s is not None

    req = [Decimal('3.141592653589793438462643383279')]

    res = s.request_bodies.request_body_post_json_data_types_array_decimal_str(
        req)

    assert res is not None
    assert res.status_code == 200
    assert res.request_body_post_json_data_types_array_decimal_str_200_application_json_object.json == req
    assert res.request_body_post_json_data_types_array_decimal_str_200_application_json_object.data == '["3.141592653589793438462643383279"]'


def test_request_body_post_nullable_required_string_body():
    record_test('request-bodies-post-nullable-required-string-body')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_nullable_required_string_body(
        None)

    assert res is not None
    assert res.status_code == 200
    assert res.request_body_post_nullable_required_string_body_200_application_json_object.data == 'null'


def test_request_body_post_nullable_not_required_string_body():
    record_test('request-bodies-post-nullable-not-required-string-body')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_nullable_not_required_string_body(
        None)

    assert res is not None
    assert res.status_code == 200
    assert res.request_body_post_nullable_not_required_string_body_200_application_json_object.data == 'null'


def test_request_body_post_not_nullable_not_required_string_body():
    record_test('request-bodies-post-not-nullable-not-required-string-body')

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_not_nullable_not_required_string_body(
        None)

    assert res is not None
    assert res.status_code == 200
    assert res.request_body_post_not_nullable_not_required_string_body_200_application_json_object.data == ''
