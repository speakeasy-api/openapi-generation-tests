"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

import os

from openapi import SDK
from openapi.models.operations import *
from openapi.models.shared import *
from openapi.types import UNSET

from .common_helpers import *
from .test_helpers import *


def test_request_body_put_multipart_file():
    record_test("request-bodies-put-multipart-file")

    s = SDK()
    assert s is not None

    f = open(os.path.dirname(__file__) + "/testUpload.json", mode="rb")
    data = f.read()

    res = s.request_bodies.request_body_put_multipart_file(
        request=RequestBodyPutMultipartFileRequestBody(
            file=File(content=data, file_name="testUpload.json")
        )
    )

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert res.res.files == {"file": data.decode("utf-8")}


def test_request_body_put_multipart_file_streaming():
    record_test("request-bodies-put-multipart-file-streaming")

    s = SDK()
    assert s is not None

    f = open(os.path.dirname(__file__) + "/testUpload.json", mode="rb")
    data = f.read()
    f.close()

    res = s.request_bodies.request_body_put_multipart_file(
        request=RequestBodyPutMultipartFileRequestBody(
            file=File(
                content=open(os.path.dirname(__file__) + "/testUpload.json", mode="rb"),
                file_name="testUpload.json",
            )
        )
    )

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert res.res.files == {"file": data.decode("utf-8")}


def test_request_body_put_multipart_different_file_name():
    record_test("request-bodies-put-different-file-name")

    s = SDK()
    assert s is not None

    f = open(os.path.dirname(__file__) + "/testUpload.json", mode="rb")
    data = f.read()

    res = s.request_bodies.request_body_put_multipart_different_file_name(
        request=RequestBodyPutMultipartDifferentFileNameRequestBody(
            different_file_name=DifferentFileName(
                content=data, file_name="testUpload.json"
            )
        )
    )

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert res.res.files == {"differentFileName": data.decode("utf-8")}


def test_request_body_put_bytes():
    record_test("request-bodies-put-bytes")

    s = SDK()
    assert s is not None

    f = open(os.path.dirname(__file__) + "/testUpload.json", mode="rb")
    data = f.read()
    res = s.request_bodies.request_body_put_bytes(request=data)

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert res.res.data == data.decode("utf-8")


def test_request_body_put_bytes_streaming():
    record_test("request-bodies-put-bytes-streaming")

    s = SDK()
    assert s is not None

    f = open(os.path.dirname(__file__) + "/testUpload.json", mode="rb")
    data = f.read()
    f.close()

    res = s.request_bodies.request_body_put_bytes(
        request=open(os.path.dirname(__file__) + "/testUpload.json", mode="rb")
    )

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert res.res.data == data.decode("utf-8")


def test_request_body_put_bytes_with_params():
    record_test("request-bodies-put-bytes-with-params")

    s = SDK()
    assert s is not None

    f = open(os.path.dirname(__file__) + "/testUpload.json", mode="rb")
    data = f.read()
    res = s.request_bodies.request_body_put_bytes_with_params(
        request_body=data, query_string_param="test param"
    )

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert res.res.data == data.decode("utf-8")
    assert res.res.args.query_string_param == "test param"
