"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

import os

from openapi import SDK
from openapi.models.operations import *
from openapi.models.shared import *
from openapi.types import UNSET

from .common_helpers import *
from .test_helpers import *


def test_request_body_post_multiple_content_types_split_json():
    record_test("request-bodies-post-multiple-content-types-split-json")

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_multiple_content_types_split_json(
        request=RequestBodyPostMultipleContentTypesSplitJSONRequestBody(
            bool=True, num=1.1, str="test"
        )
    )

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert {"bool": True, "num": 1.1, "str": "test"} == res.res.json_


def test_request_body_post_multiple_content_types_split_multipart():
    record_test("request-bodies-post-multiple-content-types-split-multipart")

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_multiple_content_types_split_multipart(
        request=RequestBodyPostMultipleContentTypesSplitMultipartRequestBody(
            bool2=True, num2=1.1, str2="test"
        )
    )

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert {"bool2": "true", "num2": "1.1", "str2": "test"} == res.res.form


def test_request_body_post_multiple_content_types_split_form():
    record_test("request-bodies-post-multiple-content-types-split-form")

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_multiple_content_types_split_form(
        request=RequestBodyPostMultipleContentTypesSplitFormRequestBody(
            bool3=True, num3=1.1, str3="test"
        )
    )

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert {"bool3": "true", "num3": "1.1", "str3": "test"} == res.res.form


def test_request_body_post_multiple_content_types_split_json_with_param():
    record_test("request-bodies-post-multiple-content-types-split-json-with-param")

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_multiple_content_types_split_param_json(
        request_body=RequestBodyPostMultipleContentTypesSplitParamJSONRequestBody(
            bool=True, num=1.1, str="test body"
        ),
        param_str="test param",
    )

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert {"bool": True, "num": 1.1, "str": "test body"} == res.res.json_
    assert {"paramStr": "test param"} == res.res.args


def test_request_body_post_multiple_content_types_split_multipart_with_param():
    record_test("request-bodies-post-multiple-content-types-split-multipart-with-param")

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_multiple_content_types_split_param_multipart(
        request_body=RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody(
            bool2=True, num2=1.1, str2="test body"
        ),
        param_str="test param",
    )

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert {"bool2": "true", "num2": "1.1", "str2": "test body"} == res.res.form
    assert {"paramStr": "test param"} == res.res.args


def test_request_body_post_multiple_content_types_split_form_with_param():
    record_test("request-bodies-post-multiple-content-types-split-form-with-param")

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_multiple_content_types_split_param_form(
        request_body=RequestBodyPostMultipleContentTypesSplitParamFormRequestBody(
            bool3=True, num3=1.1, str3="test body"
        ),
        param_str="test param",
    )

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert {"bool3": "true", "num3": "1.1", "str3": "test body"} == res.res.form
    assert {"paramStr": "test param"} == res.res.args


def test_request_body_put_multipart_file():
    record_test("request-bodies-put-multipart-file")

    s = SDK()
    assert s is not None

    f = open(os.path.dirname(__file__) + "/testUpload.json", mode="rb")
    data = f.read()

    res = s.request_bodies.request_body_put_multipart_file(
        request=RequestBodyPutMultipartFileRequestBody(
            file=File(content=data, file_name="testUpload.json")
        )
    )

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert res.res.files == {"file": data.decode("utf-8")}


def test_request_body_put_multipart_file_streaming():
    record_test("request-bodies-put-multipart-file-streaming")

    s = SDK()
    assert s is not None

    f = open(os.path.dirname(__file__) + "/testUpload.json", mode="rb")
    data = f.read()
    f.close()

    res = s.request_bodies.request_body_put_multipart_file(
        request=RequestBodyPutMultipartFileRequestBody(
            file=File(
                content=open(os.path.dirname(__file__) + "/testUpload.json", mode="rb"),
                file_name="testUpload.json",
            )
        )
    )

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert res.res.files == {"file": data.decode("utf-8")}


def test_request_body_put_multipart_different_file_name():
    record_test("request-bodies-put-different-file-name")

    s = SDK()
    assert s is not None

    f = open(os.path.dirname(__file__) + "/testUpload.json", mode="rb")
    data = f.read()

    res = s.request_bodies.request_body_put_multipart_different_file_name(
        request=RequestBodyPutMultipartDifferentFileNameRequestBody(
            different_file_name=DifferentFileName(
                content=data, file_name="testUpload.json"
            )
        )
    )

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert res.res.files == {"differentFileName": data.decode("utf-8")}


def test_request_body_put_bytes():
    record_test("request-bodies-put-bytes")

    s = SDK()
    assert s is not None

    f = open(os.path.dirname(__file__) + "/testUpload.json", mode="rb")
    data = f.read()
    res = s.request_bodies.request_body_put_bytes(request=data)

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert res.res.data == data.decode("utf-8")


def test_request_body_put_bytes_streaming():
    record_test("request-bodies-put-bytes-streaming")

    s = SDK()
    assert s is not None

    f = open(os.path.dirname(__file__) + "/testUpload.json", mode="rb")
    data = f.read()
    f.close()

    res = s.request_bodies.request_body_put_bytes(
        request=open(os.path.dirname(__file__) + "/testUpload.json", mode="rb")
    )

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert res.res.data == data.decode("utf-8")


def test_request_body_put_bytes_with_params():
    record_test("request-bodies-put-bytes-with-params")

    s = SDK()
    assert s is not None

    f = open(os.path.dirname(__file__) + "/testUpload.json", mode="rb")
    data = f.read()
    res = s.request_bodies.request_body_put_bytes_with_params(
        request_body=data, query_string_param="test param"
    )

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert res.res.data == data.decode("utf-8")
    assert res.res.args.query_string_param == "test param"


def test_request_body_post_nullable_required_string_body():
    record_test("request-bodies-post-nullable-required-string-body")

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_nullable_required_string_body(request=None)

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.object is not None
    assert res.object.data == "null"


def test_request_body_post_nullable_not_required_string_body():
    record_test("request-bodies-post-nullable-not-required-string-body")

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_nullable_not_required_string_body(
        request=None
    )

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.object is not None
    assert res.object.data == "null"


def test_request_body_post_not_nullable_not_required_string_body():
    record_test("request-bodies-post-not-nullable-not-required-string-body")

    s = SDK()
    assert s is not None

    res = s.request_bodies.request_body_post_not_nullable_not_required_string_body(
        request=None
    )

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.object is not None
    assert res.object.data == ""


def test_request_body_post_nullable_optional_fields():
    record_test("request-bodies-post-nullable-optional-fields")

    s = SDK()
    assert s is not None

    res = s.request_bodies.nullable_optional_fields_post(nullable_required=None)

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.object is not None
    assert res.object.json_ is not None
    assert res.object.json_.nullable_required is None
    assert res.object.json_.nullable_optional == UNSET
    assert res.object.json_.optional is None
