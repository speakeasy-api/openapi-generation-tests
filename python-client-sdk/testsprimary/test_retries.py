"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import uuid

import httpx
import pytest
from openapi import SDK
from openapi.models import errors
from openapi.models.operations import *
from openapi.utils import BackoffStrategy, RetryConfig

from .common_helpers import *
from .test_helpers import *


def test_retries_succeeds():
    record_test("retries-succeeds")

    s = SDK()
    assert s is not None

    res = s.retries.retries_get(request_id=str(uuid.uuid4()))
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.retries is not None
    assert res.retries.retries == 3


@pytest.mark.asyncio()
async def test_retries_succeeds_async():
    s = SDK()
    assert s is not None

    res = await s.retries.retries_get_async(request_id=str(uuid.uuid4()))
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.retries is not None
    assert res.retries.retries == 3


def test_retries_request_timeout():
    record_test("retries-request-timeout")

    s = SDK()
    assert s is not None

    with pytest.raises(
        Exception,
    ) as exc_info:
        s.retries.retries_get(
            request_id=str(uuid.uuid4()),
            num_retries=10,
            timeout_ms=1,
        )


def test_retries_timeout():
    record_test("retries-timeout")

    s = SDK()
    assert s is not None

    with pytest.raises(
        errors.SDKError, match="API error occurred: Status 503"
    ) as exc_info:
        s.retries.retries_get(
            request_id=str(uuid.uuid4()),
            num_retries=1000000000,
            retries=RetryConfig("backoff", BackoffStrategy(1, 50, 1.1, 100), False),
        )

    assert exc_info.value.status_code == 503


@pytest.mark.asyncio()
async def test_retries_timeout_async():
    s = SDK()
    assert s is not None

    with pytest.raises(
        errors.SDKError, match="API error occurred: Status 503"
    ) as exc_info:
        await s.retries.retries_get_async(
            request_id=str(uuid.uuid4()),
            num_retries=1000000000,
            retries=RetryConfig("backoff", BackoffStrategy(1, 50, 1.1, 100), False),
        )

    assert exc_info.value.status_code == 503


def test_global_retry_config_disable():
    record_test("retries-global-config-disable")

    s = SDK(retry_config=None)

    with pytest.raises(
        errors.SDKError, match="API error occurred: Status 503"
    ) as exc_info:
        res = s.retries.retries_get(request_id=str(uuid.uuid4()), num_retries=2)

    assert exc_info.value.status_code == 503


@pytest.mark.asyncio()
async def test_global_retry_config_disable_async():
    s = SDK(retry_config=None)

    with pytest.raises(
        errors.SDKError, match="API error occurred: Status 503"
    ) as exc_info:
        await s.retries.retries_get_async(request_id=str(uuid.uuid4()), num_retries=2)

    assert exc_info.value.status_code == 503


def test_global_retry_config_success():
    record_test("retries-global-config-success")

    s = SDK(
        retry_config=RetryConfig("backoff", BackoffStrategy(1, 50, 1.1, 1000), False)
    )

    res = s.retries.retries_get(request_id=str(uuid.uuid4()), num_retries=10)
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.retries is not None
    assert res.retries.retries == 10


@pytest.mark.asyncio()
async def test_global_retry_config_success_async():
    s = SDK(
        retry_config=RetryConfig("backoff", BackoffStrategy(1, 50, 1.1, 1000), False)
    )

    res = await s.retries.retries_get_async(
        request_id=str(uuid.uuid4()), num_retries=10
    )
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.retries is not None
    assert res.retries.retries == 10


def test_global_retry_config_timeout():
    record_test("retries-global-config-timeout")

    s = SDK(
        retry_config=RetryConfig("backoff", BackoffStrategy(1, 50, 1.1, 100), False)
    )

    with pytest.raises(
        errors.SDKError, match="API error occurred: Status 503"
    ) as exc_info:
        s.retries.retries_get(request_id=str(uuid.uuid4()), num_retries=30)

    assert exc_info.value.status_code == 503


@pytest.mark.asyncio()
async def test_global_retry_config_timeout_async():
    s = SDK(
        retry_config=RetryConfig("backoff", BackoffStrategy(1, 50, 1.1, 100), False)
    )

    with pytest.raises(
        errors.SDKError, match="API error occurred: Status 503"
    ) as exc_info:
        await s.retries.retries_get_async(request_id=str(uuid.uuid4()), num_retries=30)

    assert exc_info.value.status_code == 503


def test_retries_connect_error():
    record_test("retries-connect-error")

    s = SDK(
        retry_config=RetryConfig("backoff", BackoffStrategy(1, 50, 1.1, 1000), False)
    )
    assert s is not None

    with pytest.raises(httpx.ConnectError, match="Connection refused"):
        s.retries.retries_connect_error_get()


def test_retries_header():
    record_test("retries-header")

    s = SDK()
    assert s is not None

    res = s.retries.retries_after(
        request_id=str(uuid.uuid4()),
        num_retries=3,
        retries=RetryConfig("backoff", BackoffStrategy(5000, 10000, 1.1, 10000), False),
    )

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.retries is not None
    assert res.retries.retries == 3


def test_retries_succeeds_with_body():
    record_test("retries-succeeds-with-body")

    s = SDK()
    assert s is not None

    res = s.retries.retries_post(
        request_id=str(uuid.uuid4()), request_body={"field_one": "one"}
    )
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.retries is not None
    assert res.retries.retries == 3
