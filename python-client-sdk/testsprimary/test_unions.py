"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from datetime import datetime

import re
import pytest
from openapi import SDK

from openapi.models.shared.oneofoverlappingobjects import Obj1, Obj2
import openapi.utils as utils

from .common_helpers import *
from .test_helpers import *


def test_strongly_typed_one_of_post_basic():
    record_test("unions-strongly-typed-one-of-post-basic")

    s = SDK()
    assert s is not None

    obj = create_simple_object_with_type()

    res = s.unions.strongly_typed_one_of_post(request=obj)
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert type(res.res.json_) == shared.SimpleObjectWithType
    compare_simple_object_with_type(res.res.json_, obj)


def test_collection_one_of_post():
    record_test("unions-collections-one-of-post")
    s = SDK()
    assert s is not None

    req = ["one", "two"]

    res = s.unions.collection_one_of_post(request=req)
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert res.res.json_ == req

    req2 = {"1": "one", "2": "two"}

    res2 = s.unions.collection_one_of_post(request=req2)
    assert res2 is not None
    assert res2.http_meta is not None
    assert res2.http_meta.response is not None
    assert res2.http_meta.response.status_code == 200
    assert res2.res is not None
    assert res2.res.json_ == req2


def test_strongly_typed_one_of_post_with_non_standard_discriminator_name():
    record_test(
        "unions-strongly-typed-one-of-post-with-non-standard-discriminator-name"
    )

    s = SDK()
    assert s is not None

    obj = create_simple_object_with_non_standard_type_name()

    res = s.unions.strongly_typed_one_of_post_with_non_standard_discriminator_name(
        request=obj
    )
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert type(res.res.json_) == shared.SimpleObjectWithNonStandardTypeName
    compare_simple_object_with_non_standard_type_name(res.res.json_, obj)


def test_strongly_typed_one_of_post_deep():
    record_test("unions-strongly-typed-one-of-post-deep")
    s = SDK()
    assert s is not None

    obj = create_deep_object_with_type()

    res = s.unions.strongly_typed_one_of_post(request=obj)
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert type(res.res.json_) == shared.DeepObjectWithType
    compare_deep_object_with_type(res.res.json_, obj)


def test_weakly_typed_one_of_post_basic():
    record_test("unions-weakly-typed-one-of-post-basic")
    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.unions.weakly_typed_one_of_post(request=obj)
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert type(res.res.json_) == shared.SimpleObject


def test_weakly_typed_one_of_post_deep():
    record_test("unions-weakly-typed-one-of-post-deep")
    s = SDK()
    assert s is not None

    obj = create_deep_object()

    res = s.unions.weakly_typed_one_of_post(request=obj)
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert type(res.res.json_) == shared.DeepObject


def test_typed_object_one_of_post_obj1():
    record_test("unions-typed-object-one-of-post-obj1")
    s = SDK()
    assert s is not None

    obj = shared.TypedObject1(value="obj1", type="obj1")

    res = s.unions.typed_object_one_of_post(request=obj)
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert type(res.res.json_) == shared.TypedObject1
    assert res.res.json_.value == "obj1"


def test_typed_object_one_of_post_obj2():
    record_test("unions-typed-object-one-of-post-obj2")
    s = SDK()
    assert s is not None

    obj = shared.TypedObject2(value="obj2", type="obj2")

    res = s.unions.typed_object_one_of_post(request=obj)
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert type(res.res.json_) == shared.TypedObject2
    assert res.res.json_.value == "obj2"


def test_typed_object_one_of_post_obj3():
    record_test("unions-typed-object-one-of-post-obj3")
    s = SDK()
    assert s is not None

    obj = shared.TypedObject3(value="obj3", type="obj3")

    res = s.unions.typed_object_one_of_post(request=obj)
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert type(res.res.json_) == shared.TypedObject3
    assert res.res.json_.value == "obj3"


def test_typed_object_one_of_post_null():
    record_test("unions-typed-object-one-of-post-null")

    s = SDK()
    with pytest.raises(
        ValueError,
        match=re.escape(
            "3 validation errors for Unmarshaller\nbody.TypedObject1\n  Input should be a valid dictionary or instance of TypedObject1 [type=model_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.8/v/model_type\nbody.TypedObject2\n  Input should be a valid dictionary or instance of TypedObject2 [type=model_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.8/v/model_type\nbody.TypedObject3\n  Input should be a valid dictionary or instance of TypedObject3 [type=model_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.8/v/model_type"
        ),
    ):
        s.unions.typed_object_one_of_post(
            request=None  # pyright: ignore[reportArgumentType]
        )


def test_typed_object_nullable_one_of_post_obj1():
    record_test("unions-typed-object-nullable-one-of-post-obj1")

    s = SDK()

    obj = shared.TypedObject1(value="one", type="obj1")

    res = s.unions.typed_object_nullable_one_of_post(request=obj)
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert type(res.res.json_) == shared.TypedObject1
    assert res.res.json_.value == "one"


def test_typed_object_nullable_one_of_post_obj2():
    record_test("unions-typed-object-nullable-one-of-post-obj2")

    s = SDK()

    obj = shared.TypedObject2(value="two", type="obj2")

    res = s.unions.typed_object_nullable_one_of_post(request=obj)
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert type(res.res.json_) == shared.TypedObject2
    assert res.res.json_.value == "two"


def test_typed_object_nullable_one_of_post_null():
    record_test("unions-typed-object-nullable-one-of-post-null")

    s = SDK()

    res = s.unions.typed_object_nullable_one_of_post(request=None)
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert res.res.json_ is None


def test_flattened_typed_object_post_obj1():
    record_test("unions-flattened-typed-object-post-obj1")

    s = SDK()

    obj = shared.TypedObject1(value="one", type="obj1")

    res = s.unions.flattened_typed_object_post(request=obj)
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert res.res.json_.value == "one"


def test_unions_nullable_typed_object_post_obj1():
    record_test("unions-nullable-typed-object-post-obj1")

    s = SDK()

    obj = shared.TypedObject1(value="one", type="obj1")

    res = s.unions.nullable_typed_object_post(request=obj)
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert res.res.json_ == obj


def test_unions_nullable_typed_object_post_null():
    record_test("unions-nullable-typed-object-post-null")

    s = SDK()

    res = s.unions.nullable_typed_object_post(request=None)
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert res.res.json_ is None


def test_nullable_one_of_schema_post_obj1():
    record_test("unions-nullable-oneof-schema-post-obj1")

    s = SDK()

    obj = shared.TypedObject1(value="one", type="obj1")

    res = s.unions.nullable_one_of_schema_post(request=obj)
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert res.res.json_ == obj


def test_nullable_one_of_schema_post_obj2():
    record_test("unions-nullable-oneof-schema-post-obj2")

    s = SDK()

    obj = shared.TypedObject2(value="two", type="obj2")

    res = s.unions.nullable_one_of_schema_post(request=obj)
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert res.res.json_ == obj


def test_nullable_one_of_schema_post_null():
    record_test("unions-nullable-oneof-schema-post-null")

    s = SDK()

    res = s.unions.nullable_one_of_schema_post(request=None)
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert res.res.json_ is None


class MicroMock(object):
    def __init__(self, name, obj, typ, want_json):
        self.name = name
        self.obj = obj
        self.typ = typ
        self.want_json = want_json


def test_nullable_one_of_type_in_object_post():
    record_test("unions-nullable-oneof-type-in-object-post")
    tests = [
        MicroMock(
            name="Nullable fields set to null",
            obj=shared.NullableOneOfTypeInObject(
                nullable_one_of_one=None, nullable_one_of_two=None, one_of_one=True
            ),
            typ=shared.NullableOneOfTypeInObject,
            want_json='{"NullableOneOfOne":null,"NullableOneOfTwo":null,"OneOfOne":true}',
        ),
        MicroMock(
            name="All fields set to non-null values",
            obj=shared.NullableOneOfTypeInObject(
                nullable_one_of_one=True, nullable_one_of_two=2, one_of_one=True
            ),
            typ=shared.NullableOneOfTypeInObject,
            want_json='{"NullableOneOfOne":true,"NullableOneOfTwo":2,"OneOfOne":true}',
        ),
    ]

    s = SDK()
    for tt in tests:
        body = utils.serialize_request_body(tt.obj, False, False, "json", tt.typ)
        assert body is not None
        assert body.content == tt.want_json
        res = s.unions.nullable_one_of_type_in_object_post(request=tt.obj)
        assert res is not None
        assert res.http_meta is not None
        assert res.http_meta.response is not None
        assert res.http_meta.response.status_code == 200
        assert res.res is not None
        assert res.res.json_ == tt.obj


def test_nullable_one_of_ref_in_object_post():
    record_test("unions-nullable-oneof-ref-in-object-post")

    tests = [
        MicroMock(
            name="Nullable fields set to null",
            obj=shared.NullableOneOfRefInObject(
                nullable_one_of_one=None,
                nullable_one_of_two=None,
                one_of_one=shared.TypedObject1(value="one", type="obj1"),
            ),
            typ=shared.NullableOneOfRefInObject,
            want_json='{"NullableOneOfOne":null,"NullableOneOfTwo":null,"OneOfOne":{"type":"obj1","value":"one"}}',
        ),
        MicroMock(
            name="All fields set to non-null values",
            obj=shared.NullableOneOfRefInObject(
                nullable_one_of_one=shared.TypedObject1(value="one", type="obj1"),
                nullable_one_of_two=shared.TypedObject2(value="two", type="obj2"),
                one_of_one=shared.TypedObject1(value="", type="obj1"),
            ),
            typ=shared.NullableOneOfRefInObject,
            want_json='{"NullableOneOfOne":{"type":"obj1","value":"one"},"NullableOneOfTwo":{"type":"obj2","value":"two"},"OneOfOne":{"type":"obj1","value":""}}',
        ),
    ]

    s = SDK()
    for tt in tests:
        body = utils.serialize_request_body(tt.obj, False, False, "json", tt.typ)
        assert body is not None
        assert body.content == tt.want_json
        res = s.unions.nullable_one_of_ref_in_object_post(request=tt.obj)
        assert res is not None
        assert res.http_meta is not None
        assert res.http_meta.response is not None
        assert res.http_meta.response.status_code == 200
        assert res.res is not None
        assert res.res.json_ == tt.obj


def test_primitive_type_one_of_post_string():
    record_test("unions-primitive-type-one-of-post-string")
    s = SDK()
    assert s is not None

    res = s.unions.primitive_type_one_of_post(request="test")
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert res.res.json_ == "test"


def test_primitive_type_one_of_post_integer():
    record_test("unions-primitive-type-one-of-post-integer")
    s = SDK()
    assert s is not None

    res = s.unions.primitive_type_one_of_post(request=1)
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert res.res.json_ == 1


def test_primitive_type_one_of_post_number():
    record_test("unions-primitive-type-one-of-post-number")
    s = SDK()
    assert s is not None

    res = s.unions.primitive_type_one_of_post(request=1.1)
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert res.res.json_ == 1.1


def test_primitive_type_one_of_post_boolean():
    record_test("unions-primitive-type-one-of-post-boolean")
    s = SDK()
    assert s is not None

    res = s.unions.primitive_type_one_of_post(request=True)
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert res.res.json_ == True


def test_mixed_type_one_of_post_string():
    record_test("unions-mixed-type-one-of-post-string")
    s = SDK()
    assert s is not None

    res = s.unions.mixed_type_one_of_post(request="str")
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert res.res.json_ == "str"


def test_mixed_type_one_of_post_integer():
    record_test("unions-mixed-type-one-of-post-integer")
    s = SDK()
    assert s is not None

    res = s.unions.mixed_type_one_of_post(request=1)
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert res.res.json_ == 1


def test_mixed_type_one_of_post_object():
    record_test("unions-mixed-type-one-of-post-object")
    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.unions.mixed_type_one_of_post(request=obj)
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert type(res.res.json_) == shared.SimpleObject
    compare_simple_object(res.res.json_, obj)


def test_date_null_union():
    record_test("unions-date-null")
    s = SDK()
    assert s is not None

    res = s.unions.union_date_null(request=datetime.now().date())
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert type(res.res.json_) == date


def test_date_time_null_union():
    record_test("unions-datetime-null")
    s = SDK()
    assert s is not None

    res = s.unions.union_date_time_null(request=datetime.now())
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert type(res.res.json_) == datetime


def test_date_time_bigint_union():
    record_test("unions-datetime-bigint")
    s = SDK()
    assert s is not None

    res = s.unions.union_date_time_big_int(request=datetime.now())
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert type(res.res.json_) == datetime

    res = s.unions.union_date_time_big_int(request=9007199254740991)
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert type(res.res.json_) == int


def test_union_map():
    record_test("unions-union-map")
    s = SDK()
    assert s is not None

    res = s.unions.union_map(request={"input": {"str": "test", "bool": True}})
    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert res.res.json_.input["str"] == "test"
    assert res.res.json_.input["bool"] == True


def test_unions_extra_json_properties():
    record_test("unions-extra-json-properties")
    s = SDK()
    assert s is not None

    res = s.unions.one_of_overlapping_objects(
        request={
            "field1": "test1",
            "field3": 1,
        }
    )

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert isinstance(res.res.json_, Obj1)
    assert res.res.json_.field1 == "test1"

    res = s.unions.one_of_overlapping_objects(
        request={"field1": "test2", "field2": True, "field3": 1}
    )

    assert res is not None
    assert res.http_meta is not None
    assert res.http_meta.response is not None
    assert res.http_meta.response.status_code == 200
    assert res.res is not None
    assert isinstance(res.res.json_, Obj2)
    assert res.res.json_.field1 == "test2"
    assert res.res.json_.field2 == True


def test_unions_nested_enums_form():
    record_test("unions-nested-enums-form")

    s = SDK()

    res1 = s.unions.union_nested_enums_form(
        request={
            "enums": [
                "one",
                "two",
            ],
            "tags": "one,two",
        }
    )

    assert res1 is not None
    assert res1.http_meta is not None
    assert res1.http_meta.response is not None
    assert res1.http_meta.response.status_code == 200
    assert res1.res is not None
    assert res1.res.form == {"enums": ["one", "two"], "tags": "one,two"}

    res2 = s.unions.union_nested_enums_form(
        request={
            "enums": {
                "key2": "two",
                "key3": "three",
            },
        }
    )

    assert res2 is not None
    assert res2.http_meta is not None
    assert res2.http_meta.response is not None
    assert res2.http_meta.response.status_code == 200
    assert res2.res is not None
    assert res2.res.form == {"enums": '{"key2":"two","key3":"three"}'}


def test_unions_nested_enums_multipart():
    record_test("unions-nested-enums-multipart")

    s = SDK()

    res1 = s.unions.union_nested_enums_multipart(
        request={
            "enums": [
                "one",
                "two",
            ],
        }
    )

    assert res1 is not None
    assert res1.http_meta is not None
    assert res1.http_meta.response is not None
    assert res1.http_meta.response.status_code == 200
    assert res1.res is not None
    assert res1.res.form == {"enums": '["one","two"]'}

    res2 = s.unions.union_nested_enums_multipart(
        request={
            "enums": {
                "key2": "two",
                "key3": "three",
            },
        }
    )

    assert res2 is not None
    assert res2.http_meta is not None
    assert res2.http_meta.response is not None
    assert res2.http_meta.response.status_code == 200
    assert res2.res is not None
    assert res2.res.form == {"enums": '{"key2":"two","key3":"three"}'}


# Currently disabled due to this pydantic bug https://github.com/pydantic/pydantic/issues/6830
# def test_bigint_str_decimal_union():
#     record_test("unions-bigint-str-decimal")
#     s = SDK()
#     assert s is not None

#     res = s.unions.union_big_int_str_decimal(request=Decimal("3.141592653589793"))
#     assert res is not None
#     assert res.http_meta is not None
#     assert res.http_meta.response is not None
#     assert res.http_meta.response.status_code == 200
#     assert res.res is not None
#     assert type(res.res.json_) == Decimal

#     res = s.unions.union_big_int_str_decimal(request=9223372036854775807)
#     assert res is not None
#     assert res.http_meta is not None
#     assert res.http_meta.response is not None
#     assert res.http_meta.response.status_code == 200
#     assert res.res is not None
#     assert type(res.res.json_) == int
