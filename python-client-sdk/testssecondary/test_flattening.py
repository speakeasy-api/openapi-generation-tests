"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

import pytest
from pydantic import ValidationError

from openapi import SDK
from openapi.models.operations import *
from openapi.models.shared import *
from openapi.utils import *

from .common_helpers import *
from .test_helpers import *


def test_component_body_and_param_no_conflict():
    record_test("flattening-component-body-and-param-no-conflict")

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.flattening.component_body_and_param_no_conflict(
        param_str="param test",
        simple_object=obj,
    )
    assert res is not None
    assert res.args["paramStr"] == "param test"
    compare_simple_object(res.json_, obj)


def test_component_body_and_param_conflict():
    record_test("flattening-component-body-and-param-conflict")

    s = SDK()
    assert s is not None

    obj = create_simple_object()

    res = s.flattening.component_body_and_param_conflict(
        str_="param test",
        simple_object=obj,
    )

    assert res is not None
    assert res.args["str"] == "param test"
    compare_simple_object(res.json_, obj)


def test_inline_body_and_param_conflict():
    record_test("flattening-inline-body-and-param-conflict")

    s = SDK()
    assert s is not None

    res = s.flattening.inline_body_and_param_conflict(
        str_="param test",
        request_body=InlineBodyAndParamConflictRequestBody(
            str_="body test",
        ),
    )

    assert res is not None
    assert res.args["str"] == "param test"
    assert res.json_.str_ == "body test"


def test_inline_body_and_param_no_conflict():
    record_test("flattening-inline-body-and-param-no-conflict")

    s = SDK()
    assert s is not None

    res = s.flattening.inline_body_and_param_no_conflict(
        param_str="param test",
        request_body=InlineBodyAndParamNoConflictRequestBody(
            body_str="body test",
        ),
    )

    assert res is not None
    assert res.args["paramStr"] == "param test"
    assert res.json_.body_str == "body test"


def test_conflicting_params():
    record_test("flattening-conflicting-params")

    s = SDK()
    assert s is not None

    res = s.flattening.conflicting_params(
        str_path_parameter="pathParam", str_query_parameter="queryParam"
    )

    assert res is not None
    assert "/pathParam?" in res.url
    assert res.args["str"] == "queryParam"


def test_required_body_all_optional():
    record_test("flattening-required-body-all-optional")

    s = SDK()
    assert s is not None

    res = s.flattening.required_body_all_optional(
        request=ObjWithOptionalProperties(
            opt_str="body test",
            opt_int=1,
        )
    )

    assert res is not None
    assert res.json_.opt_str == "body test"
    assert res.json_.opt_int == 1

    with pytest.raises(ValidationError) as exc_info:
        s.flattening.required_body_all_optional(request=None)
    assert exc_info is not None
    assert "Input should be a valid dictionary or instance of ObjWithOptionalProperties" in str(exc_info.value)
