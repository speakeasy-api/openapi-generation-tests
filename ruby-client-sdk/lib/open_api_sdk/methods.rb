# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module OpenApiSDK
  extend T::Sig
  class Methods
    extend T::Sig
    
    # METHOD_DELETE_SERVERS contains the list of server urls available to the SDK.
    METHOD_DELETE_SERVERS = [
      'http://localhost:35456', 
    ].freeze
    
    # METHOD_GET_SERVERS contains the list of server urls available to the SDK.
    METHOD_GET_SERVERS = [
      'http://localhost:35456', 
    ].freeze
    
    # METHOD_HEAD_SERVERS contains the list of server urls available to the SDK.
    METHOD_HEAD_SERVERS = [
      'http://localhost:35456', 
    ].freeze
    
    # METHOD_OPTIONS_SERVERS contains the list of server urls available to the SDK.
    METHOD_OPTIONS_SERVERS = [
      'http://localhost:35456', 
    ].freeze
    
    # METHOD_PATCH_SERVERS contains the list of server urls available to the SDK.
    METHOD_PATCH_SERVERS = [
      'http://localhost:35456', 
    ].freeze
    
    # METHOD_POST_SERVERS contains the list of server urls available to the SDK.
    METHOD_POST_SERVERS = [
      'http://localhost:35456', 
    ].freeze
    
    # METHOD_PUT_SERVERS contains the list of server urls available to the SDK.
    METHOD_PUT_SERVERS = [
      'http://localhost:35456', 
    ].freeze
    
    # METHOD_TRACE_SERVERS contains the list of server urls available to the SDK.
    METHOD_TRACE_SERVERS = [
      'http://localhost:35456', 
    ].freeze
    # Endpoints for testing HTTP methods.

    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end


    sig { params(request: ::OpenApiSDK::Operations::MethodDeleteRequestBody, server_url: T.nilable(String)).returns(::OpenApiSDK::Operations::MethodDeleteResponse) }
    def method_delete(request, server_url = nil)

      base_url = Utils.template_url(METHOD_DELETE_SERVERS[0], {
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/method/delete"
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.delete(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::MethodDeleteResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::MethodDeleteResponseBody)
          res.object = out
        end
      end
      res
    end


    sig { params(server_url: T.nilable(String)).returns(::OpenApiSDK::Operations::MethodGetResponse) }
    def method_get(server_url = nil)

      base_url = Utils.template_url(METHOD_GET_SERVERS[0], {
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/method/get"
      headers = {}
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::MethodGetResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::MethodGetResponseBody)
          res.object = out
        end
      end
      res
    end


    sig { params(server_url: T.nilable(String)).returns(::OpenApiSDK::Operations::MethodHeadResponse) }
    def method_head(server_url = nil)

      base_url = Utils.template_url(METHOD_HEAD_SERVERS[0], {
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/method/head"
      headers = {}
      headers['Accept'] = '*/*'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.head(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::MethodHeadResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      
      res
    end


    sig { params(server_url: T.nilable(String)).returns(::OpenApiSDK::Operations::MethodOptionsResponse) }
    def method_options(server_url = nil)

      base_url = Utils.template_url(METHOD_OPTIONS_SERVERS[0], {
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/method/options"
      headers = {}
      headers['Accept'] = '*/*'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.options(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::MethodOptionsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        res.headers = r.headers
      end
      res
    end


    sig { params(request: ::OpenApiSDK::Operations::MethodPatchRequestBody, server_url: T.nilable(String)).returns(::OpenApiSDK::Operations::MethodPatchResponse) }
    def method_patch(request, server_url = nil)

      base_url = Utils.template_url(METHOD_PATCH_SERVERS[0], {
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/method/patch"
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.patch(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::MethodPatchResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::MethodPatchResponseBody)
          res.object = out
        end
      end
      res
    end


    sig { params(request: ::OpenApiSDK::Operations::MethodPostRequestBody, server_url: T.nilable(String)).returns(::OpenApiSDK::Operations::MethodPostResponse) }
    def method_post(request, server_url = nil)

      base_url = Utils.template_url(METHOD_POST_SERVERS[0], {
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/method/post"
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::MethodPostResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::MethodPostResponseBody)
          res.object = out
        end
      end
      res
    end


    sig { params(request: ::OpenApiSDK::Operations::MethodPutRequestBody, server_url: T.nilable(String)).returns(::OpenApiSDK::Operations::MethodPutResponse) }
    def method_put(request, server_url = nil)

      base_url = Utils.template_url(METHOD_PUT_SERVERS[0], {
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/method/put"
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::MethodPutResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::MethodPutResponseBody)
          res.object = out
        end
      end
      res
    end


    sig { params(server_url: T.nilable(String)).returns(::OpenApiSDK::Operations::MethodTraceResponse) }
    def method_trace(server_url = nil)

      base_url = Utils.template_url(METHOD_TRACE_SERVERS[0], {
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/method/trace"
      headers = {}
      headers['Accept'] = 'message/http'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.trace(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::MethodTraceResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        res.res = r.env.response_body if Utils.match_content_type(content_type, 'message/http')
      
      end
      res
    end
  end
end
