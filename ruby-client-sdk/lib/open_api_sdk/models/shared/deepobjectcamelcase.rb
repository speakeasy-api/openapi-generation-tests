# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Shared
  

    class DeepObjectCamelCase < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :any_val, ::Object, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('any_val') } }

      field :arr_val, T::Array[::OpenApiSDK::Shared::SimpleObjectCamelCase], { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('arr_val') } }

      field :bool_val, T::Boolean, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('bool_val') } }

      field :int_val, ::Integer, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('int_val') } }

      field :map_val, T::Hash[Symbol, ::OpenApiSDK::Shared::SimpleObjectCamelCase], { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('map_val') } }

      field :num_val, ::Float, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('num_val') } }
      # A simple object that uses all our supported primitive types and enums and has optional properties.
      # https://docs.speakeasyapi.dev - A link to the external docs.
      field :obj_val, ::OpenApiSDK::Shared::SimpleObjectCamelCase, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('obj_val') } }

      field :str_val, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('str_val') } }

      field :type, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('type') } }


      sig { params(any_val: ::Object, arr_val: T::Array[::OpenApiSDK::Shared::SimpleObjectCamelCase], bool_val: T::Boolean, int_val: ::Integer, map_val: T::Hash[Symbol, ::OpenApiSDK::Shared::SimpleObjectCamelCase], num_val: ::Float, obj_val: ::OpenApiSDK::Shared::SimpleObjectCamelCase, str_val: ::String, type: T.nilable(::String)).void }
      def initialize(any_val: nil, arr_val: nil, bool_val: nil, int_val: nil, map_val: nil, num_val: nil, obj_val: nil, str_val: nil, type: nil)
        @any_val = any_val
        @arr_val = arr_val
        @bool_val = bool_val
        @int_val = int_val
        @map_val = map_val
        @num_val = num_val
        @obj_val = obj_val
        @str_val = str_val
        @type = type
      end
    end
  end
end
