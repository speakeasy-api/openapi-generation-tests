# Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Shared
  

    class ExampleResource < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :chocolates, T::Array[::OpenApiSDK::Shared::Chocolates], { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('chocolates') } }

      field :id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id') } }

      field :name, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('name') } }

      field :vehicle, ::Object, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('vehicle') } }

      field :array_of_number, T.nilable(T::Array[::Float]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('arrayOfNumber') } }

      field :array_of_string, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('arrayOfString') } }

      field :created_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('createdAt'), 'decoder': Utils.datetime_from_iso_format(true) } }

      field :enum_number, T.nilable(::OpenApiSDK::Shared::EnumNumber), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('enumNumber'), 'decoder': Utils.enum_from_string(::OpenApiSDK::Shared::EnumNumber, true) } }

      field :enum_str, T.nilable(::OpenApiSDK::Shared::EnumStr), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('enumStr'), 'decoder': Utils.enum_from_string(::OpenApiSDK::Shared::EnumStr, true) } }

      field :inline_object, T.nilable(::OpenApiSDK::Shared::InlineObject), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('inlineObject') } }

      field :map_of_integer, T.nilable(T::Hash[Symbol, ::Integer]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('mapOfInteger') } }

      field :map_of_string, T.nilable(T::Hash[Symbol, ::String]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('mapOfString') } }

      field :name_prefix, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('name_prefix') } }

      field :updated_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('updatedAt'), 'decoder': Utils.datetime_from_iso_format(true) } }


      sig { params(chocolates: T::Array[::OpenApiSDK::Shared::Chocolates], id: ::String, name: ::String, vehicle: ::Object, array_of_number: T.nilable(T::Array[::Float]), array_of_string: T.nilable(T::Array[::String]), created_at: T.nilable(::DateTime), enum_number: T.nilable(::OpenApiSDK::Shared::EnumNumber), enum_str: T.nilable(::OpenApiSDK::Shared::EnumStr), inline_object: T.nilable(::OpenApiSDK::Shared::InlineObject), map_of_integer: T.nilable(T::Hash[Symbol, ::Integer]), map_of_string: T.nilable(T::Hash[Symbol, ::String]), name_prefix: T.nilable(::String), updated_at: T.nilable(::DateTime)).void }
      def initialize(chocolates: nil, id: nil, name: nil, vehicle: nil, array_of_number: nil, array_of_string: nil, created_at: nil, enum_number: nil, enum_str: nil, inline_object: nil, map_of_integer: nil, map_of_string: nil, name_prefix: nil, updated_at: nil)
        @chocolates = chocolates
        @id = id
        @name = name
        @vehicle = vehicle
        @array_of_number = array_of_number
        @array_of_string = array_of_string
        @created_at = created_at
        @enum_number = enum_number
        @enum_str = enum_str
        @inline_object = inline_object
        @map_of_integer = map_of_integer
        @map_of_string = map_of_string
        @name_prefix = name_prefix
        @updated_at = updated_at
      end
    end
  end
end
