# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module OpenApiSDK
  extend T::Sig
  class Pagination
    extend T::Sig
    
    # PAGINATION_CURSOR_BODY_SERVERS contains the list of server urls available to the SDK.
    PAGINATION_CURSOR_BODY_SERVERS = [
      'http://localhost:35456', 
    ].freeze
    
    # PAGINATION_CURSOR_NON_NUMERIC_SERVERS contains the list of server urls available to the SDK.
    PAGINATION_CURSOR_NON_NUMERIC_SERVERS = [
      'http://localhost:35456', 
    ].freeze
    
    # PAGINATION_CURSOR_PARAMS_SERVERS contains the list of server urls available to the SDK.
    PAGINATION_CURSOR_PARAMS_SERVERS = [
      'http://localhost:35456', 
    ].freeze
    
    # PAGINATION_LIMIT_OFFSET_DEEP_OUTPUTS_PAGE_BODY_SERVERS contains the list of server urls available to the SDK.
    PAGINATION_LIMIT_OFFSET_DEEP_OUTPUTS_PAGE_BODY_SERVERS = [
      'http://localhost:35456', 
    ].freeze
    
    # PAGINATION_LIMIT_OFFSET_OFFSET_BODY_SERVERS contains the list of server urls available to the SDK.
    PAGINATION_LIMIT_OFFSET_OFFSET_BODY_SERVERS = [
      'http://localhost:35456', 
    ].freeze
    
    # PAGINATION_LIMIT_OFFSET_OFFSET_PARAMS_SERVERS contains the list of server urls available to the SDK.
    PAGINATION_LIMIT_OFFSET_OFFSET_PARAMS_SERVERS = [
      'http://localhost:35456', 
    ].freeze
    
    # PAGINATION_LIMIT_OFFSET_PAGE_BODY_SERVERS contains the list of server urls available to the SDK.
    PAGINATION_LIMIT_OFFSET_PAGE_BODY_SERVERS = [
      'http://localhost:35456', 
    ].freeze
    
    # PAGINATION_LIMIT_OFFSET_PAGE_PARAMS_SERVERS contains the list of server urls available to the SDK.
    PAGINATION_LIMIT_OFFSET_PAGE_PARAMS_SERVERS = [
      'http://localhost:35456', 
    ].freeze
    
    # PAGINATION_URL_PARAMS_SERVERS contains the list of server urls available to the SDK.
    PAGINATION_URL_PARAMS_SERVERS = [
      'http://localhost:35456', 
    ].freeze
    
    # PAGINATION_WITH_RETRIES_SERVERS contains the list of server urls available to the SDK.
    PAGINATION_WITH_RETRIES_SERVERS = [
      'http://localhost:35456', 
    ].freeze
    # Endpoints for testing the pagination extension

    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end


    sig { params(request: ::OpenApiSDK::Operations::PaginationCursorBodyRequestBody, server_url: T.nilable(String)).returns(::OpenApiSDK::Operations::PaginationCursorBodyResponse) }
    def pagination_cursor_body(request, server_url = nil)

      base_url = Utils.template_url(PAGINATION_CURSOR_BODY_SERVERS[0], {
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/pagination/cursor"
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PaginationCursorBodyResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::PaginationCursorBodyRes)
          res.res = out
        end
      end
      res
    end


    sig { params(cursor: T.nilable(::String), server_url: T.nilable(String)).returns(::OpenApiSDK::Operations::PaginationCursorNonNumericResponse) }
    def pagination_cursor_non_numeric(cursor = nil, server_url = nil)

      request = ::OpenApiSDK::Operations::PaginationCursorNonNumericRequest.new(
        
        cursor: cursor
      )
      base_url = Utils.template_url(PAGINATION_CURSOR_NON_NUMERIC_SERVERS[0], {
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/pagination/cursor_non_numeric"
      headers = {}
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::PaginationCursorNonNumericRequest, request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PaginationCursorNonNumericResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::PaginationCursorNonNumericRes)
          res.res = out
        end
      end
      res
    end


    sig { params(cursor: ::Integer, server_url: T.nilable(String)).returns(::OpenApiSDK::Operations::PaginationCursorParamsResponse) }
    def pagination_cursor_params(cursor, server_url = nil)

      request = ::OpenApiSDK::Operations::PaginationCursorParamsRequest.new(
        
        cursor: cursor
      )
      base_url = Utils.template_url(PAGINATION_CURSOR_PARAMS_SERVERS[0], {
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/pagination/cursor"
      headers = {}
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::PaginationCursorParamsRequest, request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PaginationCursorParamsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::PaginationCursorParamsRes)
          res.res = out
        end
      end
      res
    end


    sig { params(request: ::OpenApiSDK::Shared::LimitOffsetConfig, server_url: T.nilable(String)).returns(::OpenApiSDK::Operations::PaginationLimitOffsetDeepOutputsPageBodyResponse) }
    def pagination_limit_offset_deep_outputs_page_body(request, server_url = nil)

      base_url = Utils.template_url(PAGINATION_LIMIT_OFFSET_DEEP_OUTPUTS_PAGE_BODY_SERVERS[0], {
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/pagination/limitoffset/deep_outputs/page"
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PaginationLimitOffsetDeepOutputsPageBodyResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::PaginationLimitOffsetDeepOutputsPageBodyRes)
          res.res = out
        end
      end
      res
    end


    sig { params(request: ::OpenApiSDK::Shared::LimitOffsetConfig, server_url: T.nilable(String)).returns(::OpenApiSDK::Operations::PaginationLimitOffsetOffsetBodyResponse) }
    def pagination_limit_offset_offset_body(request, server_url = nil)

      base_url = Utils.template_url(PAGINATION_LIMIT_OFFSET_OFFSET_BODY_SERVERS[0], {
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/pagination/limitoffset/offset"
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PaginationLimitOffsetOffsetBodyResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::PaginationLimitOffsetOffsetBodyRes)
          res.res = out
        end
      end
      res
    end


    sig { params(limit: T.nilable(::Integer), offset: T.nilable(::Integer), server_url: T.nilable(String)).returns(::OpenApiSDK::Operations::PaginationLimitOffsetOffsetParamsResponse) }
    def pagination_limit_offset_offset_params(limit = nil, offset = nil, server_url = nil)

      request = ::OpenApiSDK::Operations::PaginationLimitOffsetOffsetParamsRequest.new(
        
        limit: limit,
        offset: offset
      )
      base_url = Utils.template_url(PAGINATION_LIMIT_OFFSET_OFFSET_PARAMS_SERVERS[0], {
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/pagination/limitoffset/offset"
      headers = {}
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::PaginationLimitOffsetOffsetParamsRequest, request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PaginationLimitOffsetOffsetParamsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::PaginationLimitOffsetOffsetParamsRes)
          res.res = out
        end
      end
      res
    end


    sig { params(request: ::OpenApiSDK::Shared::LimitOffsetConfig, server_url: T.nilable(String)).returns(::OpenApiSDK::Operations::PaginationLimitOffsetPageBodyResponse) }
    def pagination_limit_offset_page_body(request, server_url = nil)

      base_url = Utils.template_url(PAGINATION_LIMIT_OFFSET_PAGE_BODY_SERVERS[0], {
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/pagination/limitoffset/page"
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PaginationLimitOffsetPageBodyResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::PaginationLimitOffsetPageBodyRes)
          res.res = out
        end
      end
      res
    end


    sig { params(page: ::Integer, server_url: T.nilable(String)).returns(::OpenApiSDK::Operations::PaginationLimitOffsetPageParamsResponse) }
    def pagination_limit_offset_page_params(page, server_url = nil)

      request = ::OpenApiSDK::Operations::PaginationLimitOffsetPageParamsRequest.new(
        
        page: page
      )
      base_url = Utils.template_url(PAGINATION_LIMIT_OFFSET_PAGE_PARAMS_SERVERS[0], {
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/pagination/limitoffset/page"
      headers = {}
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::PaginationLimitOffsetPageParamsRequest, request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PaginationLimitOffsetPageParamsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::PaginationLimitOffsetPageParamsRes)
          res.res = out
        end
      end
      res
    end


    sig { params(attempts: ::Integer, is_reference_path: T.nilable(::String), server_url: T.nilable(String)).returns(::OpenApiSDK::Operations::PaginationURLParamsResponse) }
    def pagination_url_params(attempts, is_reference_path = nil, server_url = nil)

      request = ::OpenApiSDK::Operations::PaginationURLParamsRequest.new(
        
        attempts: attempts,
        is_reference_path: is_reference_path
      )
      base_url = Utils.template_url(PAGINATION_URL_PARAMS_SERVERS[0], {
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/pagination/url"
      headers = {}
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::PaginationURLParamsRequest, request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PaginationURLParamsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::PaginationURLParamsRes)
          res.res = out
        end
      end
      res
    end


    sig { params(cursor: T.nilable(::String), fault_settings: T.nilable(::String), request_id: T.nilable(::String), server_url: T.nilable(String)).returns(::OpenApiSDK::Operations::PaginationWithRetriesResponse) }
    def pagination_with_retries(cursor = nil, fault_settings = nil, request_id = nil, server_url = nil)

      request = ::OpenApiSDK::Operations::PaginationWithRetriesRequest.new(
        
        cursor: cursor,
        fault_settings: fault_settings,
        request_id: request_id
      )
      base_url = Utils.template_url(PAGINATION_WITH_RETRIES_SERVERS[0], {
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/pagination/cursor_non_numeric#withRetries"
      headers = Utils.get_headers(request, @sdk_configuration.globals)
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::PaginationWithRetriesRequest, request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PaginationWithRetriesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::PaginationWithRetriesRes)
          res.res = out
        end
      end
      res
    end
  end
end
