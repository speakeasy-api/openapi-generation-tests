# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module OpenApiSDK
  extend T::Sig
  class Parameters
    extend T::Sig
    # Endpoints for testing parameters.

    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end


    sig { params(map_param: T::Hash[Symbol, ::String], map_arr_param: T.nilable(T::Hash[Symbol, T::Array[::String]])).returns(::OpenApiSDK::Operations::DeepObjectQueryParamsMapResponse) }
    def deep_object_query_params_map(map_param, map_arr_param = nil)

      request = ::OpenApiSDK::Operations::DeepObjectQueryParamsMapRequest.new(
        
        map_param: map_param,
        map_arr_param: map_arr_param
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/anything/queryParams/deepObject/map"
      headers = {}
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::DeepObjectQueryParamsMapRequest, request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::DeepObjectQueryParamsMapResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::DeepObjectQueryParamsMapRes)
          res.res = out
        end
      end

      res
    end


    sig { params(obj_param: ::OpenApiSDK::Shared::SimpleObject, obj_arr_param: T.nilable(::OpenApiSDK::Operations::ObjArrParam)).returns(::OpenApiSDK::Operations::DeepObjectQueryParamsObjectResponse) }
    def deep_object_query_params_object(obj_param, obj_arr_param = nil)

      request = ::OpenApiSDK::Operations::DeepObjectQueryParamsObjectRequest.new(
        
        obj_param: obj_param,
        obj_arr_param: obj_arr_param
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/anything/queryParams/deepObject/obj"
      headers = {}
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::DeepObjectQueryParamsObjectRequest, request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::DeepObjectQueryParamsObjectResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::DeepObjectQueryParamsObjectRes)
          res.res = out
        end
      end

      res
    end


    sig { params(duplicate_param_request: ::String).returns(::OpenApiSDK::Operations::DuplicateParamResponse) }
    def duplicate_param(duplicate_param_request)

      request = ::OpenApiSDK::Operations::DuplicateParamRequest.new(
        
        duplicate_param_request: duplicate_param_request
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::DuplicateParamRequest,
        base_url,
        '/anything/params/{duplicateParamRequest}',
        request,
        @sdk_configuration.globals
      )
      headers = {}
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::DuplicateParamResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::DuplicateParamDuplicateParamResponse)
          res.duplicate_param_response = out
        end
      end

      res
    end


    sig { params(arr_param: T.nilable(T::Array[::String]), arr_param_exploded: T.nilable(T::Array[::Integer])).returns(::OpenApiSDK::Operations::FormQueryParamsArrayResponse) }
    def form_query_params_array(arr_param = nil, arr_param_exploded = nil)

      request = ::OpenApiSDK::Operations::FormQueryParamsArrayRequest.new(
        
        arr_param: arr_param,
        arr_param_exploded: arr_param_exploded
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/anything/queryParams/form/array"
      headers = {}
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::FormQueryParamsArrayRequest, request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::FormQueryParamsArrayResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::FormQueryParamsArrayRes)
          res.res = out
        end
      end

      res
    end


    sig { params(obj_param_exploded: ::OpenApiSDK::Operations::ObjParamExploded, obj_param: T.nilable(::OpenApiSDK::Operations::ObjParam)).returns(::OpenApiSDK::Operations::FormQueryParamsCamelObjectResponse) }
    def form_query_params_camel_object(obj_param_exploded, obj_param = nil)

      request = ::OpenApiSDK::Operations::FormQueryParamsCamelObjectRequest.new(
        
        obj_param_exploded: obj_param_exploded,
        obj_param: obj_param
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/anything/queryParams/form/camelObj"
      headers = {}
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::FormQueryParamsCamelObjectRequest, request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::FormQueryParamsCamelObjectResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::FormQueryParamsCamelObjectRes)
          res.res = out
        end
      end

      res
    end


    sig { params(map_param: T.nilable(T::Hash[Symbol, ::String]), map_param_exploded: T.nilable(T::Hash[Symbol, ::Integer])).returns(::OpenApiSDK::Operations::FormQueryParamsMapResponse) }
    def form_query_params_map(map_param = nil, map_param_exploded = nil)

      request = ::OpenApiSDK::Operations::FormQueryParamsMapRequest.new(
        
        map_param: map_param,
        map_param_exploded: map_param_exploded
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/anything/queryParams/form/map"
      headers = {}
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::FormQueryParamsMapRequest, request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::FormQueryParamsMapResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::FormQueryParamsMapRes)
          res.res = out
        end
      end

      res
    end


    sig { params(obj_param_exploded: ::OpenApiSDK::Shared::SimpleObject, obj_param: T.nilable(::OpenApiSDK::Shared::SimpleObject)).returns(::OpenApiSDK::Operations::FormQueryParamsObjectResponse) }
    def form_query_params_object(obj_param_exploded, obj_param = nil)

      request = ::OpenApiSDK::Operations::FormQueryParamsObjectRequest.new(
        
        obj_param_exploded: obj_param_exploded,
        obj_param: obj_param
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/anything/queryParams/form/obj"
      headers = {}
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::FormQueryParamsObjectRequest, request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::FormQueryParamsObjectResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::FormQueryParamsObjectRes)
          res.res = out
        end
      end

      res
    end


    sig { params(bool_param: T::Boolean, int_param: ::Integer, num_param: ::Float, str_param: ::String).returns(::OpenApiSDK::Operations::FormQueryParamsPrimitiveResponse) }
    def form_query_params_primitive(bool_param, int_param, num_param, str_param)

      request = ::OpenApiSDK::Operations::FormQueryParamsPrimitiveRequest.new(
        
        bool_param: bool_param,
        int_param: int_param,
        num_param: num_param,
        str_param: str_param
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/anything/queryParams/form/primitive"
      headers = {}
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::FormQueryParamsPrimitiveRequest, request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::FormQueryParamsPrimitiveResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::FormQueryParamsPrimitiveRes)
          res.res = out
        end
      end

      res
    end


    sig { params(ref_obj_param: T.nilable(::OpenApiSDK::Shared::RefQueryParamObj), ref_obj_param_exploded: T.nilable(::OpenApiSDK::Shared::RefQueryParamObjExploded)).returns(::OpenApiSDK::Operations::FormQueryParamsRefParamObjectResponse) }
    def form_query_params_ref_param_object(ref_obj_param = nil, ref_obj_param_exploded = nil)

      request = ::OpenApiSDK::Operations::FormQueryParamsRefParamObjectRequest.new(
        
        ref_obj_param: ref_obj_param,
        ref_obj_param_exploded: ref_obj_param_exploded
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/anything/queryParams/form/refParamObject"
      headers = {}
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::FormQueryParamsRefParamObjectRequest, request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::FormQueryParamsRefParamObjectResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::FormQueryParamsRefParamObjectRes)
          res.res = out
        end
      end

      res
    end


    sig { params(x_header_array: T::Array[::String]).returns(::OpenApiSDK::Operations::HeaderParamsArrayResponse) }
    def header_params_array(x_header_array)

      request = ::OpenApiSDK::Operations::HeaderParamsArrayRequest.new(
        
        x_header_array: x_header_array
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/anything/headers/array"
      headers = Utils.get_headers(request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::HeaderParamsArrayResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::HeaderParamsArrayRes)
          res.res = out
        end
      end

      res
    end


    sig { params(x_header_map: T::Hash[Symbol, ::String], x_header_map_explode: T::Hash[Symbol, ::String]).returns(::OpenApiSDK::Operations::HeaderParamsMapResponse) }
    def header_params_map(x_header_map, x_header_map_explode)

      request = ::OpenApiSDK::Operations::HeaderParamsMapRequest.new(
        
        x_header_map: x_header_map,
        x_header_map_explode: x_header_map_explode
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/anything/headers/map"
      headers = Utils.get_headers(request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::HeaderParamsMapResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::HeaderParamsMapRes)
          res.res = out
        end
      end

      res
    end


    sig { params(nullable_header: ::String, optional_header: T.nilable(::String), optional_nullable_header: T.nilable(::String)).returns(::OpenApiSDK::Operations::HeaderParamsNilResponse) }
    def header_params_nil(nullable_header, optional_header = nil, optional_nullable_header = nil)

      request = ::OpenApiSDK::Operations::HeaderParamsNilRequest.new(
        
        nullable_header: nullable_header,
        optional_header: optional_header,
        optional_nullable_header: optional_nullable_header
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/anything/headers/nil"
      headers = Utils.get_headers(request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::HeaderParamsNilResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::HeaderParamsNilRes)
          res.res = out
        end
      end

      res
    end


    sig { params(x_header_obj: ::OpenApiSDK::Shared::SimpleObject, x_header_obj_explode: ::OpenApiSDK::Shared::SimpleObject).returns(::OpenApiSDK::Operations::HeaderParamsObjectResponse) }
    def header_params_object(x_header_obj, x_header_obj_explode)

      request = ::OpenApiSDK::Operations::HeaderParamsObjectRequest.new(
        
        x_header_obj: x_header_obj,
        x_header_obj_explode: x_header_obj_explode
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/anything/headers/obj"
      headers = Utils.get_headers(request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::HeaderParamsObjectResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::HeaderParamsObjectRes)
          res.res = out
        end
      end

      res
    end


    sig { params(x_header_boolean: T::Boolean, x_header_integer: ::Integer, x_header_number: ::Float, x_header_string: ::String).returns(::OpenApiSDK::Operations::HeaderParamsPrimitiveResponse) }
    def header_params_primitive(x_header_boolean, x_header_integer, x_header_number, x_header_string)

      request = ::OpenApiSDK::Operations::HeaderParamsPrimitiveRequest.new(
        
        x_header_boolean: x_header_boolean,
        x_header_integer: x_header_integer,
        x_header_number: x_header_number,
        x_header_string: x_header_string
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/anything/headers/primitive"
      headers = Utils.get_headers(request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::HeaderParamsPrimitiveResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::HeaderParamsPrimitiveRes)
          res.res = out
        end
      end

      res
    end


    sig { params(deep_obj_param: ::OpenApiSDK::Shared::DeepObject, simple_obj_param: ::OpenApiSDK::Shared::SimpleObject).returns(::OpenApiSDK::Operations::JsonQueryParamsObjectResponse) }
    def json_query_params_object(deep_obj_param, simple_obj_param)

      request = ::OpenApiSDK::Operations::JsonQueryParamsObjectRequest.new(
        
        deep_obj_param: deep_obj_param,
        simple_obj_param: simple_obj_param
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/anything/queryParams/json/obj"
      headers = {}
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::JsonQueryParamsObjectRequest, request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::JsonQueryParamsObjectResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::JsonQueryParamsObjectRes)
          res.res = out
        end
      end

      res
    end


    sig { params(deep_obj_param: ::OpenApiSDK::Shared::DeepObjectSmaller, simple_obj_param: ::OpenApiSDK::Shared::SimpleObject).returns(::OpenApiSDK::Operations::JsonQueryParamsObjectSmallerResponse) }
    def json_query_params_object_smaller(deep_obj_param, simple_obj_param)

      request = ::OpenApiSDK::Operations::JsonQueryParamsObjectSmallerRequest.new(
        
        deep_obj_param: deep_obj_param,
        simple_obj_param: simple_obj_param
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/anything/queryParams/json/objsmaller"
      headers = {}
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::JsonQueryParamsObjectSmallerRequest, request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::JsonQueryParamsObjectSmallerResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::JsonQueryParamsObjectSmallerRes)
          res.res = out
        end
      end

      res
    end


    sig { params(header_param: ::String, path_param: ::String, query_string_param: ::String).returns(::OpenApiSDK::Operations::MixedParametersCamelCaseResponse) }
    def mixed_parameters_camel_case(header_param, path_param, query_string_param)

      request = ::OpenApiSDK::Operations::MixedParametersCamelCaseRequest.new(
        
        header_param: header_param,
        path_param: path_param,
        query_string_param: query_string_param
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::MixedParametersCamelCaseRequest,
        base_url,
        '/anything/mixedParams/path/{path_param}/camelcase',
        request,
        @sdk_configuration.globals
      )
      headers = Utils.get_headers(request, @sdk_configuration.globals)
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::MixedParametersCamelCaseRequest, request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::MixedParametersCamelCaseResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::MixedParametersCamelCaseRes)
          res.res = out
        end
      end

      res
    end


    sig { params(header_param: ::String, path_param: ::String, query_string_param: ::String).returns(::OpenApiSDK::Operations::MixedParametersPrimitivesResponse) }
    def mixed_parameters_primitives(header_param, path_param, query_string_param)

      request = ::OpenApiSDK::Operations::MixedParametersPrimitivesRequest.new(
        
        header_param: header_param,
        path_param: path_param,
        query_string_param: query_string_param
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::MixedParametersPrimitivesRequest,
        base_url,
        '/anything/mixedParams/path/{pathParam}',
        request,
        @sdk_configuration.globals
      )
      headers = Utils.get_headers(request, @sdk_configuration.globals)
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::MixedParametersPrimitivesRequest, request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::MixedParametersPrimitivesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::MixedParametersPrimitivesRes)
          res.res = out
        end
      end

      res
    end


    sig { params(deep_object_param: ::OpenApiSDK::Shared::SimpleObject, form_param: ::OpenApiSDK::Shared::SimpleObject, json_param: ::OpenApiSDK::Shared::SimpleObject).returns(::OpenApiSDK::Operations::MixedQueryParamsResponse) }
    def mixed_query_params(deep_object_param, form_param, json_param)

      request = ::OpenApiSDK::Operations::MixedQueryParamsRequest.new(
        
        deep_object_param: deep_object_param,
        form_param: form_param,
        json_param: json_param
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/anything/queryParams/mixed"
      headers = {}
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::MixedQueryParamsRequest, request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::MixedQueryParamsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::MixedQueryParamsRes)
          res.res = out
        end
      end

      res
    end


    sig { params(json_obj: ::OpenApiSDK::Shared::SimpleObject).returns(::OpenApiSDK::Operations::PathParameterJsonResponse) }
    def path_parameter_json(json_obj)

      request = ::OpenApiSDK::Operations::PathParameterJsonRequest.new(
        
        json_obj: json_obj
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PathParameterJsonRequest,
        base_url,
        '/anything/pathParams/json/{jsonObj}',
        request,
        @sdk_configuration.globals
      )
      headers = {}
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PathParameterJsonResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::PathParameterJsonRes)
          res.res = out
        end
      end

      res
    end


    sig { params(arr_param: T.nilable(T::Array[::String]), arr_param_exploded: T.nilable(T::Array[::Integer]), map_param: T.nilable(T::Hash[Symbol, ::String]), obj_param: T.nilable(::OpenApiSDK::Shared::SimpleObject)).returns(::OpenApiSDK::Operations::PipeDelimitedQueryParamsArrayResponse) }
    def pipe_delimited_query_params_array(arr_param = nil, arr_param_exploded = nil, map_param = nil, obj_param = nil)

      request = ::OpenApiSDK::Operations::PipeDelimitedQueryParamsArrayRequest.new(
        
        arr_param: arr_param,
        arr_param_exploded: arr_param_exploded,
        map_param: map_param,
        obj_param: obj_param
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/anything/queryParams/pipe/array"
      headers = {}
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::PipeDelimitedQueryParamsArrayRequest, request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PipeDelimitedQueryParamsArrayResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::PipeDelimitedQueryParamsArrayRes)
          res.res = out
        end
      end

      res
    end


    sig { params(arr_param: T::Array[::String]).returns(::OpenApiSDK::Operations::SimplePathParameterArraysResponse) }
    def simple_path_parameter_arrays(arr_param)

      request = ::OpenApiSDK::Operations::SimplePathParameterArraysRequest.new(
        
        arr_param: arr_param
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::SimplePathParameterArraysRequest,
        base_url,
        '/anything/pathParams/arr/{arrParam}',
        request,
        @sdk_configuration.globals
      )
      headers = {}
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::SimplePathParameterArraysResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::SimplePathParameterArraysRes)
          res.res = out
        end
      end

      res
    end


    sig { params(map_param: T::Hash[Symbol, ::String], map_param_exploded: T::Hash[Symbol, ::Integer]).returns(::OpenApiSDK::Operations::SimplePathParameterMapsResponse) }
    def simple_path_parameter_maps(map_param, map_param_exploded)

      request = ::OpenApiSDK::Operations::SimplePathParameterMapsRequest.new(
        
        map_param: map_param,
        map_param_exploded: map_param_exploded
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::SimplePathParameterMapsRequest,
        base_url,
        '/anything/pathParams/map/{mapParam}/mapExploded/{mapParamExploded}',
        request,
        @sdk_configuration.globals
      )
      headers = {}
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::SimplePathParameterMapsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::SimplePathParameterMapsRes)
          res.res = out
        end
      end

      res
    end


    sig { params(obj_param: ::OpenApiSDK::Shared::SimpleObject, obj_param_exploded: ::OpenApiSDK::Shared::SimpleObject).returns(::OpenApiSDK::Operations::SimplePathParameterObjectsResponse) }
    def simple_path_parameter_objects(obj_param, obj_param_exploded)

      request = ::OpenApiSDK::Operations::SimplePathParameterObjectsRequest.new(
        
        obj_param: obj_param,
        obj_param_exploded: obj_param_exploded
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::SimplePathParameterObjectsRequest,
        base_url,
        '/anything/pathParams/obj/{objParam}/objExploded/{objParamExploded}',
        request,
        @sdk_configuration.globals
      )
      headers = {}
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::SimplePathParameterObjectsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::SimplePathParameterObjectsRes)
          res.res = out
        end
      end

      res
    end


    sig { params(bool_param: T::Boolean, int_param: ::Integer, num_param: ::Float, str_param: ::String).returns(::OpenApiSDK::Operations::SimplePathParameterPrimitivesResponse) }
    def simple_path_parameter_primitives(bool_param, int_param, num_param, str_param)

      request = ::OpenApiSDK::Operations::SimplePathParameterPrimitivesRequest.new(
        
        bool_param: bool_param,
        int_param: int_param,
        num_param: num_param,
        str_param: str_param
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::SimplePathParameterPrimitivesRequest,
        base_url,
        '/anything/pathParams/str/{strParam}/bool/{boolParam}/int/{intParam}/num/{numParam}',
        request,
        @sdk_configuration.globals
      )
      headers = {}
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::SimplePathParameterPrimitivesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::SimplePathParameterPrimitivesRes)
          res.res = out
        end
      end

      res
    end
  end
end
