# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module OpenApiSDK
  extend T::Sig
  class Retries
    extend T::Sig
    
    # RETRIES_AFTER_SERVERS contains the list of server urls available to the SDK.
    RETRIES_AFTER_SERVERS = [
      'http://localhost:35456',
    ].freeze
    
    # RETRIES_CONNECT_ERROR_GET_SERVERS contains the list of server urls available to the SDK.
    RETRIES_CONNECT_ERROR_GET_SERVERS = [
      'http://localhost:33333',
    ].freeze
    
    # RETRIES_GET_SERVERS contains the list of server urls available to the SDK.
    RETRIES_GET_SERVERS = [
      'http://localhost:35456',
    ].freeze
    
    # RETRIES_POST_SERVERS contains the list of server urls available to the SDK.
    RETRIES_POST_SERVERS = [
      'http://localhost:35456',
    ].freeze
    # Endpoints for testing retries.

    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end


    sig { params(request_id: ::String, num_retries: T.nilable(::Integer), retry_after_val: T.nilable(::Integer), server_url: T.nilable(String)).returns(::OpenApiSDK::Operations::RetriesAfterResponse) }
    def retries_after(request_id, num_retries = nil, retry_after_val = nil, server_url = nil)

      request = ::OpenApiSDK::Operations::RetriesAfterRequest.new(
        
        request_id: request_id,
        num_retries: num_retries,
        retry_after_val: retry_after_val
      )
      base_url = Utils.template_url(RETRIES_AFTER_SERVERS[0], {
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/retries/after"
      headers = {}
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::RetriesAfterRequest, request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::RetriesAfterResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::RetriesAfterRetries)
          res.retries = out
        end
      end
      res
    end


    sig { params(server_url: T.nilable(String)).returns(::OpenApiSDK::Operations::RetriesConnectErrorGetResponse) }
    def retries_connect_error_get(server_url = nil)
      # retries_connect_error_get - A request to a non-valid port to test connection errors
      base_url = Utils.template_url(RETRIES_CONNECT_ERROR_GET_SERVERS[0], {
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/retriesConnectError"
      headers = {}
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::RetriesConnectErrorGetResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::RetriesConnectErrorGetRetries)
          res.retries = out
        end
      end
      res
    end


    sig { params(request_id: ::String, num_retries: T.nilable(::Integer), server_url: T.nilable(String)).returns(::OpenApiSDK::Operations::RetriesGetResponse) }
    def retries_get(request_id, num_retries = nil, server_url = nil)

      request = ::OpenApiSDK::Operations::RetriesGetRequest.new(
        
        request_id: request_id,
        num_retries: num_retries
      )
      base_url = Utils.template_url(RETRIES_GET_SERVERS[0], {
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/retries"
      headers = {}
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::RetriesGetRequest, request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::RetriesGetResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::RetriesGetRetries)
          res.retries = out
        end
      end
      res
    end


    sig { params(request_id: ::String, request_body: T.nilable(::OpenApiSDK::Operations::RetriesPostRequestBody), num_retries: T.nilable(::Integer), server_url: T.nilable(String)).returns(::OpenApiSDK::Operations::RetriesPostResponse) }
    def retries_post(request_id, request_body = nil, num_retries = nil, server_url = nil)

      request = ::OpenApiSDK::Operations::RetriesPostRequest.new(
        
        request_id: request_id,
        request_body: request_body,
        num_retries: num_retries
      )
      base_url = Utils.template_url(RETRIES_POST_SERVERS[0], {
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/retries"
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::RetriesPostRequest, request, @sdk_configuration.globals)
      headers['Accept'] = 'application/json'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::RetriesPostResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::RetriesPostRetries)
          res.retries = out
        end
      end
      res
    end
  end
end
