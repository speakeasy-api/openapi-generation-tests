# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module OpenApiSDK
  extend T::Sig
  class Servers
    extend T::Sig
    # SelectServerWithIDServers contains identifiers for the servers available to the SDK.
    # SELECT_SERVER_WITH_ID_SERVERS_VALID - The default server.
    SELECT_SERVER_WITH_ID_SERVERS_VALID = :valid
    # SELECT_SERVER_WITH_ID_SERVERS_BROKEN - A server url to a non-existent server.
    SELECT_SERVER_WITH_ID_SERVERS_BROKEN = :broken
    # SELECT_SERVER_WITH_ID_SERVERS contains the list of server urls available to the SDK.
    SELECT_SERVER_WITH_ID_SERVERS = {
      valid: 'http://localhost:35123',
      broken: 'http://broken',
    }.freeze
    # ServerWithProtocolTemplateServers contains identifiers for the servers available to the SDK.

    SERVER_WITH_PROTOCOL_TEMPLATE_SERVERS_MAIN = :main
    # SERVER_WITH_PROTOCOL_TEMPLATE_SERVERS contains the list of server urls available to the SDK.
    SERVER_WITH_PROTOCOL_TEMPLATE_SERVERS = {
      main: '{protocol}://{hostname}:{port}',
    }.freeze
    
    # SERVER_WITH_TEMPLATES_SERVERS contains the list of server urls available to the SDK.
    SERVER_WITH_TEMPLATES_SERVERS = [
      'http://{hostname}:{port}', 
    ].freeze
    # ServersByIDWithTemplatesServers contains identifiers for the servers available to the SDK.

    SERVERS_BY_ID_WITH_TEMPLATES_SERVERS_MAIN = :main
    # SERVERS_BY_ID_WITH_TEMPLATES_SERVERS contains the list of server urls available to the SDK.
    SERVERS_BY_ID_WITH_TEMPLATES_SERVERS = {
      main: 'http://{hostname}:{port}',
    }.freeze
    # Endpoints for testing servers.

    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end


    sig { returns(::OpenApiSDK::Operations::SelectGlobalServerResponse) }
    def select_global_server

      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/anything/selectGlobalServer"
      headers = {}
      headers['Accept'] = '*/*'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::SelectGlobalServerResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )

      res.headers = r.headers
      if r.status == 200
      end

      res
    end


    sig { params(server_url: T.nilable(String)).returns(::OpenApiSDK::Operations::SelectServerWithIDResponse) }
    def select_server_with_id(server_url = nil)
      # select_server_with_id - Select a server by ID.
      base_url = Utils.template_url(SELECT_SERVER_WITH_ID_SERVERS[SELECT_SERVER_WITH_ID_SERVERS_VALID], {
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/anything/selectServerWithID"
      headers = {}
      headers['Accept'] = '*/*'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::SelectServerWithIDResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )

      res
    end


    sig { params(server_url: T.nilable(String)).returns(::OpenApiSDK::Operations::ServerWithProtocolTemplateResponse) }
    def server_with_protocol_template(server_url = nil)

      base_url = Utils.template_url(SERVER_WITH_PROTOCOL_TEMPLATE_SERVERS[SERVER_WITH_PROTOCOL_TEMPLATE_SERVERS_MAIN], {
            'hostname': 'localhost',
            'port': '35123',
            'protocol': 'http',
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/anything/serverWithProtocolTemplate"
      headers = {}
      headers['Accept'] = '*/*'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::ServerWithProtocolTemplateResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )

      res
    end


    sig { params(server_url: T.nilable(String)).returns(::OpenApiSDK::Operations::ServerWithTemplatesResponse) }
    def server_with_templates(server_url = nil)

      base_url = Utils.template_url(SERVER_WITH_TEMPLATES_SERVERS[0], {
          'hostname': 'localhost',
          'port': '35123',
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/anything/serverWithTemplates"
      headers = {}
      headers['Accept'] = '*/*'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::ServerWithTemplatesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )

      res
    end


    sig { returns(::OpenApiSDK::Operations::ServerWithTemplatesGlobalResponse) }
    def server_with_templates_global

      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/anything/serverWithTemplatesGlobal"
      headers = {}
      headers['Accept'] = '*/*'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::ServerWithTemplatesGlobalResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )

      res
    end


    sig { params(server_url: T.nilable(String)).returns(::OpenApiSDK::Operations::ServersByIDWithTemplatesResponse) }
    def servers_by_id_with_templates(server_url = nil)

      base_url = Utils.template_url(SERVERS_BY_ID_WITH_TEMPLATES_SERVERS[SERVERS_BY_ID_WITH_TEMPLATES_SERVERS_MAIN], {
            'hostname': 'localhost',
            'port': '35123',
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/anything/serversByIDWithTemplates"
      headers = {}
      headers['Accept'] = '*/*'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::ServersByIDWithTemplatesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )

      res
    end
  end
end
