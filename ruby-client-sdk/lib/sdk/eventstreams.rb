# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module OpenApiSDK
  extend T::Sig
  class Eventstreams
    # Endpoints for testing server-sent events streaming
    extend T::Sig
    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end

    sig { params(request: Operations::ChatRequestBody, server_url: T.nilable(String)).returns(Utils::FieldAugmented) }
    def chat(request, server_url = nil)

      base_url = Utils.template_url(Operations::CHAT_SERVERS[0], {
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/eventstreams/chat"
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json;q=1, text/event-stream;q=0'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::ChatResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[Object])
          res.chat_completion_result = out
        end
        res.body = r.env.response_body if Utils.match_content_type(content_type, 'text/event-stream')
      
      end
      res
    end

    sig { params(server_url: T.nilable(String)).returns(Utils::FieldAugmented) }
    def json(server_url = nil)

      base_url = Utils.template_url(Operations::JSON_SERVERS[0], {
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/eventstreams/json"
      headers = {}
      headers['Accept'] = 'text/event-stream'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::JsonResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        res.body = r.env.response_body if Utils.match_content_type(content_type, 'text/event-stream')
      
      end
      res
    end

    sig { params(server_url: T.nilable(String)).returns(Utils::FieldAugmented) }
    def multiline(server_url = nil)

      base_url = Utils.template_url(Operations::MULTILINE_SERVERS[0], {
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/eventstreams/multiline"
      headers = {}
      headers['Accept'] = 'text/event-stream'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::MultilineResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        res.body = r.env.response_body if Utils.match_content_type(content_type, 'text/event-stream')
      
      end
      res
    end

    sig { params(server_url: T.nilable(String)).returns(Utils::FieldAugmented) }
    def rich(server_url = nil)

      base_url = Utils.template_url(Operations::RICH_SERVERS[0], {
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/eventstreams/rich"
      headers = {}
      headers['Accept'] = 'text/event-stream'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::RichResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        res.body = r.env.response_body if Utils.match_content_type(content_type, 'text/event-stream')
      
      end
      res
    end

    sig { params(server_url: T.nilable(String)).returns(Utils::FieldAugmented) }
    def text(server_url = nil)

      base_url = Utils.template_url(Operations::TEXT_SERVERS[0], {
      })
      base_url = server_url if !server_url.nil?
      url = "#{base_url}/eventstreams/text"
      headers = {}
      headers['Accept'] = 'text/event-stream'
      headers['x-speakeasy-user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::TextResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        res.body = r.env.response_body if Utils.match_content_type(content_type, 'text/event-stream')
      
      end
      res
    end
  end
end
