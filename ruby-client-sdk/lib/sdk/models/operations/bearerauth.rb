# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module OpenApiSDK
  module Operations

    class BearerAuthSecurity < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :bearer_auth, String, { 'security': { 'scheme': true, 'type': 'http', 'sub_type': 'bearer', 'field_name': 'Authorization' } }


      sig { params(bearer_auth: String).void }
      def initialize(bearer_auth: nil)
        @bearer_auth = bearer_auth
      end
    end

    # Successful authentication.
    class BearerAuthToken < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :authenticated, T::Boolean, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('authenticated') } }

      field :token, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('token') } }


      sig { params(authenticated: T::Boolean, token: String).void }
      def initialize(authenticated: nil, token: nil)
        @authenticated = authenticated
        @token = token
      end
    end


    class BearerAuthResponse < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # HTTP response content type for this operation
      field :content_type, String
      # Raw HTTP response; suitable for custom response parsing
      field :raw_response, Faraday::Response
      # HTTP response status code for this operation
      field :status_code, Integer
      # Successful authentication.
      field :token, T.nilable(Operations::BearerAuthToken)


      sig { params(content_type: String, raw_response: Faraday::Response, status_code: Integer, token: T.nilable(Operations::BearerAuthToken)).void }
      def initialize(content_type: nil, raw_response: nil, status_code: nil, token: nil)
        @content_type = content_type
        @raw_response = raw_response
        @status_code = status_code
        @token = token
      end
    end
  end
end
