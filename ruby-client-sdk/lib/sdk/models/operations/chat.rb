# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module OpenApiSDK
  module Operations
    CHAT_SERVERS = [
      'http://localhost:35456'
    ].freeze

    class ChatRequestBody < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :prompt, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('prompt') } }

      field :stream, T.nilable(T::Boolean), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('stream') } }


      sig { params(prompt: String, stream: T.nilable(T::Boolean)).void }
      def initialize(prompt: nil, stream: nil)
        @prompt = prompt
        @stream = stream
      end
    end


    class ChatResponse < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # HTTP response content type for this operation
      field :content_type, String
      # Raw HTTP response; suitable for custom response parsing
      field :raw_response, Faraday::Response
      # HTTP response status code for this operation
      field :status_code, Integer

      field :body, T.nilable(String)
      # Ok
      field :chat_completion_result, T.nilable(T::Array[Object])


      sig { params(content_type: String, raw_response: Faraday::Response, status_code: Integer, body: T.nilable(String), chat_completion_result: T.nilable(T::Array[Object])).void }
      def initialize(content_type: nil, raw_response: nil, status_code: nil, body: nil, chat_completion_result: nil)
        @content_type = content_type
        @raw_response = raw_response
        @status_code = status_code
        @body = body
        @chat_completion_result = chat_completion_result
      end
    end
  end
end
