# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'
require_relative '../shared/simpleobject'

module OpenApiSDK
  module Operations

    class ComponentBodyAndParamNoConflictRequest < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :param_str, String, { 'query_param': { 'field_name': 'paramStr', 'style': 'form', 'explode': true } }

      field :simple_object, Shared::SimpleObject, { 'request': { 'media_type': 'application/json' } }


      sig { params(param_str: String, simple_object: Shared::SimpleObject).void }
      def initialize(param_str: nil, simple_object: nil)
        @param_str = param_str
        @simple_object = simple_object
      end
    end

    # OK
    class ComponentBodyAndParamNoConflictRes < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :args, T::Hash[Symbol, String], { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('args') } }
      # A simple object that uses all our supported primitive types and enums and has optional properties.
      # https://docs.speakeasyapi.dev - A link to the external docs.
      field :json, Shared::SimpleObject, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('json') } }


      sig { params(args: T::Hash[Symbol, String], json: Shared::SimpleObject).void }
      def initialize(args: nil, json: nil)
        @args = args
        @json = json
      end
    end


    class ComponentBodyAndParamNoConflictResponse < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # HTTP response content type for this operation
      field :content_type, String
      # Raw HTTP response; suitable for custom response parsing
      field :raw_response, Faraday::Response
      # HTTP response status code for this operation
      field :status_code, Integer
      # OK
      field :res, T.nilable(Operations::ComponentBodyAndParamNoConflictRes)


      sig { params(content_type: String, raw_response: Faraday::Response, status_code: Integer, res: T.nilable(Operations::ComponentBodyAndParamNoConflictRes)).void }
      def initialize(content_type: nil, raw_response: nil, status_code: nil, res: nil)
        @content_type = content_type
        @raw_response = raw_response
        @status_code = status_code
        @res = res
      end
    end
  end
end
