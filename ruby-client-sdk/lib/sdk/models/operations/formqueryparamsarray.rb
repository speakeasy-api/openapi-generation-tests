# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module OpenApiSDK
  module Operations

    class FormQueryParamsArrayRequest < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :arr_param, T.nilable(T::Array[String]), { 'query_param': { 'field_name': 'arrParam', 'style': 'form', 'explode': false } }

      field :arr_param_exploded, T.nilable(T::Array[Integer]), { 'query_param': { 'field_name': 'arrParamExploded', 'style': 'form', 'explode': true } }


      sig { params(arr_param: T.nilable(T::Array[String]), arr_param_exploded: T.nilable(T::Array[Integer])).void }
      def initialize(arr_param: nil, arr_param_exploded: nil)
        @arr_param = arr_param
        @arr_param_exploded = arr_param_exploded
      end
    end


    class FormQueryParamsArrayArgs < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :arr_param, String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('arrParam') } }

      field :arr_param_exploded, T::Array[String], { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('arrParamExploded') } }


      sig { params(arr_param: String, arr_param_exploded: T::Array[String]).void }
      def initialize(arr_param: nil, arr_param_exploded: nil)
        @arr_param = arr_param
        @arr_param_exploded = arr_param_exploded
      end
    end

    # OK
    class FormQueryParamsArrayRes < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :args, Operations::FormQueryParamsArrayArgs, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('args') } }

      field :url, String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('url') } }


      sig { params(args: Operations::FormQueryParamsArrayArgs, url: String).void }
      def initialize(args: nil, url: nil)
        @args = args
        @url = url
      end
    end


    class FormQueryParamsArrayResponse < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # HTTP response content type for this operation
      field :content_type, String
      # Raw HTTP response; suitable for custom response parsing
      field :raw_response, Faraday::Response
      # HTTP response status code for this operation
      field :status_code, Integer
      # OK
      field :res, T.nilable(Operations::FormQueryParamsArrayRes)


      sig { params(content_type: String, raw_response: Faraday::Response, status_code: Integer, res: T.nilable(Operations::FormQueryParamsArrayRes)).void }
      def initialize(content_type: nil, raw_response: nil, status_code: nil, res: nil)
        @content_type = content_type
        @raw_response = raw_response
        @status_code = status_code
        @res = res
      end
    end
  end
end
