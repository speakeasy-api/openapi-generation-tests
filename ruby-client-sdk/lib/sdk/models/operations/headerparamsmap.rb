# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module OpenApiSDK
  module Operations

    class HeaderParamsMapRequest < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :x_header_map, T::Hash[Symbol, String], { 'header': { 'field_name': 'X-Header-Map', 'style': 'simple', 'explode': false } }

      field :x_header_map_explode, T::Hash[Symbol, String], { 'header': { 'field_name': 'X-Header-Map-Explode', 'style': 'simple', 'explode': true } }


      sig { params(x_header_map: T::Hash[Symbol, String], x_header_map_explode: T::Hash[Symbol, String]).void }
      def initialize(x_header_map: nil, x_header_map_explode: nil)
        @x_header_map = x_header_map
        @x_header_map_explode = x_header_map_explode
      end
    end


    class HeaderParamsMapResHeaders < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :x_header_map, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('X-Header-Map') } }

      field :x_header_map_explode, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('X-Header-Map-Explode') } }


      sig { params(x_header_map: String, x_header_map_explode: String).void }
      def initialize(x_header_map: nil, x_header_map_explode: nil)
        @x_header_map = x_header_map
        @x_header_map_explode = x_header_map_explode
      end
    end

    # OK
    class HeaderParamsMapRes < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :headers, Operations::HeaderParamsMapResHeaders, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('headers') } }


      sig { params(headers: Operations::HeaderParamsMapResHeaders).void }
      def initialize(headers: nil)
        @headers = headers
      end
    end


    class HeaderParamsMapResponse < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :content_type, String

      field :status_code, Integer

      field :raw_response, T.nilable(Faraday::Response)
      # OK
      field :res, T.nilable(Operations::HeaderParamsMapRes)


      sig { params(content_type: String, status_code: Integer, raw_response: T.nilable(Faraday::Response), res: T.nilable(Operations::HeaderParamsMapRes)).void }
      def initialize(content_type: nil, status_code: nil, raw_response: nil, res: nil)
        @content_type = content_type
        @status_code = status_code
        @raw_response = raw_response
        @res = res
      end
    end
  end
end
