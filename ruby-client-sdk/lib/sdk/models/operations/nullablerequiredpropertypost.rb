# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module OpenApiSDK
  module Operations

    class NullableRequiredEnum < T::Enum
      enums do
        FIRST = new('first')
        SECOND = new('second')
      end
    end



    class NullableRequiredPropertyPostRequestBody < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :nullable_required_array, T::Array[Float], { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('NullableRequiredArray') } }

      field :nullable_required_enum, Operations::NullableRequiredEnum, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('NullableRequiredEnum'), 'decoder': Utils.enum_from_string(Operations::NullableRequiredEnum, false) } }

      field :nullable_required_int, Integer, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('NullableRequiredInt') } }

      field :nullable_optional_int, T.nilable(Integer), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('NullableOptionalInt') } }


      sig { params(nullable_required_array: T::Array[Float], nullable_required_enum: Operations::NullableRequiredEnum, nullable_required_int: Integer, nullable_optional_int: T.nilable(Integer)).void }
      def initialize(nullable_required_array: nil, nullable_required_enum: nil, nullable_required_int: nil, nullable_optional_int: nil)
        @nullable_required_array = nullable_required_array
        @nullable_required_enum = nullable_required_enum
        @nullable_required_int = nullable_required_int
        @nullable_optional_int = nullable_optional_int
      end
    end


    class NullableRequiredPropertyPostResponse < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # HTTP response content type for this operation
      field :content_type, String
      # Raw HTTP response; suitable for custom response parsing
      field :raw_response, Faraday::Response
      # HTTP response status code for this operation
      field :status_code, Integer
      # OK
      field :res, T.nilable(String)


      sig { params(content_type: String, raw_response: Faraday::Response, status_code: Integer, res: T.nilable(String)).void }
      def initialize(content_type: nil, raw_response: nil, status_code: nil, res: nil)
        @content_type = content_type
        @raw_response = raw_response
        @status_code = status_code
        @res = res
      end
    end
  end
end
