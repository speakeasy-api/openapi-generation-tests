# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module OpenApiSDK
  module Operations

    class DifferentFileName < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :content, String, { 'multipart_form': { 'content': true } }

      field :file_name, String, { 'multipart_form': { 'field_name': 'differentFileName' } }


      sig { params(content: String, file_name: String).void }
      def initialize(content: nil, file_name: nil)
        @content = content
        @file_name = file_name
      end
    end


    class RequestBodyPutMultipartDifferentFileNameRequestBody < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :different_file_name, T.nilable(Operations::DifferentFileName), { 'multipart_form': { 'file': true } }


      sig { params(different_file_name: T.nilable(Operations::DifferentFileName)).void }
      def initialize(different_file_name: nil)
        @different_file_name = different_file_name
      end
    end

    # OK
    class RequestBodyPutMultipartDifferentFileNameRes < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :files, T::Hash[Symbol, String], { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('files') } }


      sig { params(files: T::Hash[Symbol, String]).void }
      def initialize(files: nil)
        @files = files
      end
    end


    class RequestBodyPutMultipartDifferentFileNameResponse < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # HTTP response content type for this operation
      field :content_type, String
      # Raw HTTP response; suitable for custom response parsing
      field :raw_response, Faraday::Response
      # HTTP response status code for this operation
      field :status_code, Integer
      # OK
      field :res, T.nilable(Operations::RequestBodyPutMultipartDifferentFileNameRes)


      sig { params(content_type: String, raw_response: Faraday::Response, status_code: Integer, res: T.nilable(Operations::RequestBodyPutMultipartDifferentFileNameRes)).void }
      def initialize(content_type: nil, raw_response: nil, status_code: nil, res: nil)
        @content_type = content_type
        @raw_response = raw_response
        @status_code = status_code
        @res = res
      end
    end
  end
end
