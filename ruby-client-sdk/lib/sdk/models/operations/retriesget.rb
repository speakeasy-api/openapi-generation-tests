# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module OpenApiSDK
  module Operations
    RETRIES_GET_SERVERS = [
      'http://localhost:35456'
    ].freeze

    class RetriesGetRequest < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :request_id, String, { 'query_param': { 'field_name': 'request-id', 'style': 'form', 'explode': true } }

      field :num_retries, T.nilable(Integer), { 'query_param': { 'field_name': 'num-retries', 'style': 'form', 'explode': true } }


      sig { params(request_id: String, num_retries: T.nilable(Integer)).void }
      def initialize(request_id: nil, num_retries: nil)
        @request_id = request_id
        @num_retries = num_retries
      end
    end

    # OK
    class RetriesGetRetries < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :retries, Integer, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('retries') } }


      sig { params(retries: Integer).void }
      def initialize(retries: nil)
        @retries = retries
      end
    end


    class RetriesGetResponse < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # HTTP response content type for this operation
      field :content_type, String
      # Raw HTTP response; suitable for custom response parsing
      field :raw_response, Faraday::Response
      # HTTP response status code for this operation
      field :status_code, Integer
      # OK
      field :retries, T.nilable(Operations::RetriesGetRetries)


      sig { params(content_type: String, raw_response: Faraday::Response, status_code: Integer, retries: T.nilable(Operations::RetriesGetRetries)).void }
      def initialize(content_type: nil, raw_response: nil, status_code: nil, retries: nil)
        @content_type = content_type
        @raw_response = raw_response
        @status_code = status_code
        @retries = retries
      end
    end
  end
end
