# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'
require_relative '../shared/errortype'
require_relative '../shared/error'

module OpenApiSDK
  module Operations
    STATUS_GET_X_SPEAKEASY_ERRORS_SERVERS = [
      'http://localhost:35456'
    ].freeze

    class StatusGetXSpeakeasyErrorsRequest < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :status_code, Integer, { 'path_param': { 'field_name': 'statusCode', 'style': 'simple', 'explode': false } }


      sig { params(status_code: Integer).void }
      def initialize(status_code: nil)
        @status_code = status_code
      end
    end

    # Not Implemented
    class StatusGetXSpeakeasyErrorsResponseBody < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :code, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('code') } }

      field :message, T.nilable(String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('message') } }

      field :type, T.nilable(Shared::ErrorType), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('type'), 'decoder': Utils.enum_from_string(Shared::ErrorType, true) } }


      sig { params(code: T.nilable(String), message: T.nilable(String), type: T.nilable(Shared::ErrorType)).void }
      def initialize(code: nil, message: nil, type: nil)
        @code = code
        @message = message
        @type = type
      end
    end


    class StatusGetXSpeakeasyErrorsResponse < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # HTTP response content type for this operation
      field :content_type, String
      # Raw HTTP response; suitable for custom response parsing
      field :raw_response, Faraday::Response
      # HTTP response status code for this operation
      field :status_code, Integer
      # Internal Server Error
      field :error, T.nilable(Shared::Error)
      # Not Implemented
      field :object, T.nilable(Operations::StatusGetXSpeakeasyErrorsResponseBody)


      sig { params(content_type: String, raw_response: Faraday::Response, status_code: Integer, error: T.nilable(Shared::Error), object: T.nilable(Operations::StatusGetXSpeakeasyErrorsResponseBody)).void }
      def initialize(content_type: nil, raw_response: nil, status_code: nil, error: nil, object: nil)
        @content_type = content_type
        @raw_response = raw_response
        @status_code = status_code
        @error = error
        @object = object
      end
    end
  end
end
