# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module OpenApiSDK
  module Shared

    class AuthServiceRequestBodyBasicAuth < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :password, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('password') } }

      field :username, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('username') } }


      sig { params(password: String, username: String).void }
      def initialize(password: nil, username: nil)
        @password = password
        @username = username
      end
    end


    class AuthServiceRequestBodyHeaderAuth < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :expected_value, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('expectedValue') } }

      field :header_name, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('headerName') } }


      sig { params(expected_value: String, header_name: String).void }
      def initialize(expected_value: nil, header_name: nil)
        @expected_value = expected_value
        @header_name = header_name
      end
    end


    class AuthServiceRequestBody < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :basic_auth, T.nilable(Shared::AuthServiceRequestBodyBasicAuth), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('basicAuth') } }

      field :header_auth, T.nilable(T::Array[Shared::AuthServiceRequestBodyHeaderAuth]), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('headerAuth') } }


      sig { params(basic_auth: T.nilable(Shared::AuthServiceRequestBodyBasicAuth), header_auth: T.nilable(T::Array[Shared::AuthServiceRequestBodyHeaderAuth])).void }
      def initialize(basic_auth: nil, header_auth: nil)
        @basic_auth = basic_auth
        @header_auth = header_auth
      end
    end
  end
end
