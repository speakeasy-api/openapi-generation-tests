# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module OpenApiSDK
  module Shared

    class DefaultsAndConstsOutputConstEnumInt < T::Enum
      enums do
        ONE = new(1)
        TWO = new(2)
        THREE = new(3)
      end
    end



    class DefaultsAndConstsOutputConstEnumStr < T::Enum
      enums do
        ONE = new('one')
        TWO = new('two')
        THREE = new('three')
      end
    end



    class DefaultsAndConstsOutputDefaultEnumInt < T::Enum
      enums do
        ONE = new(1)
        TWO = new(2)
        THREE = new(3)
      end
    end



    class DefaultsAndConstsOutputDefaultEnumStr < T::Enum
      enums do
        ONE = new('one')
        TWO = new('two')
        THREE = new('three')
      end
    end



    class DefaultsAndConstsOutput < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :const_big_int, Integer, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('constBigInt') } }

      field :const_big_int_str, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('constBigIntStr') } }

      field :const_bool, T::Boolean, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('constBool') } }

      field :const_date, Date, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('constDate'), 'decoder': Utils.date_from_iso_format(false) } }

      field :const_date_time, DateTime, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('constDateTime'), 'decoder': Utils.datetime_from_iso_format(false) } }

      field :const_decimal, Float, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('constDecimal') } }

      field :const_decimal_str, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('constDecimalStr') } }

      field :const_enum_int, Shared::DefaultsAndConstsOutputConstEnumInt, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('constEnumInt'), 'decoder': Utils.enum_from_string(Shared::DefaultsAndConstsOutputConstEnumInt, false) } }

      field :const_enum_str, Shared::DefaultsAndConstsOutputConstEnumStr, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('constEnumStr'), 'decoder': Utils.enum_from_string(Shared::DefaultsAndConstsOutputConstEnumStr, false) } }

      field :const_int, Integer, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('constInt') } }

      field :const_num, Float, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('constNum') } }

      field :const_str, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('constStr') } }

      field :const_str_null, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('constStrNull') } }

      field :default_big_int, Integer, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('defaultBigInt') } }

      field :default_big_int_str, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('defaultBigIntStr') } }

      field :default_bool, T::Boolean, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('defaultBool') } }

      field :default_date, Date, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('defaultDate'), 'decoder': Utils.date_from_iso_format(false) } }

      field :default_date_time, DateTime, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('defaultDateTime'), 'decoder': Utils.datetime_from_iso_format(false) } }

      field :default_decimal, Float, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('defaultDecimal') } }

      field :default_decimal_str, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('defaultDecimalStr') } }

      field :default_enum_int, Shared::DefaultsAndConstsOutputDefaultEnumInt, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('defaultEnumInt'), 'decoder': Utils.enum_from_string(Shared::DefaultsAndConstsOutputDefaultEnumInt, false) } }

      field :default_enum_str, Shared::DefaultsAndConstsOutputDefaultEnumStr, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('defaultEnumStr'), 'decoder': Utils.enum_from_string(Shared::DefaultsAndConstsOutputDefaultEnumStr, false) } }

      field :default_int, Integer, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('defaultInt') } }

      field :default_num, Float, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('defaultNum') } }

      field :default_str, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('defaultStr') } }

      field :default_str_nullable, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('defaultStrNullable') } }

      field :normal_field, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('normalField') } }

      field :single_enum_const_bool, T::Boolean, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('singleEnumConstBool') } }

      field :single_enum_const_str, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('singleEnumConstStr') } }

      field :default_str_optional, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('defaultStrOptional') } }


      sig { params(const_big_int: Integer, const_big_int_str: String, const_bool: T::Boolean, const_date: Date, const_date_time: DateTime, const_decimal: Float, const_decimal_str: String, const_enum_int: Shared::DefaultsAndConstsOutputConstEnumInt, const_enum_str: Shared::DefaultsAndConstsOutputConstEnumStr, const_int: Integer, const_num: Float, const_str: String, const_str_null: String, default_big_int: Integer, default_big_int_str: String, default_bool: T::Boolean, default_date: Date, default_date_time: DateTime, default_decimal: Float, default_decimal_str: String, default_enum_int: Shared::DefaultsAndConstsOutputDefaultEnumInt, default_enum_str: Shared::DefaultsAndConstsOutputDefaultEnumStr, default_int: Integer, default_num: Float, default_str: String, default_str_nullable: String, normal_field: String, single_enum_const_bool: T::Boolean, single_enum_const_str: String, default_str_optional: T.nilable(String)).void }
      def initialize(const_big_int: nil, const_big_int_str: nil, const_bool: nil, const_date: nil, const_date_time: nil, const_decimal: nil, const_decimal_str: nil, const_enum_int: nil, const_enum_str: nil, const_int: nil, const_num: nil, const_str: nil, const_str_null: nil, default_big_int: nil, default_big_int_str: nil, default_bool: nil, default_date: nil, default_date_time: nil, default_decimal: nil, default_decimal_str: nil, default_enum_int: nil, default_enum_str: nil, default_int: nil, default_num: nil, default_str: nil, default_str_nullable: nil, normal_field: nil, single_enum_const_bool: nil, single_enum_const_str: nil, default_str_optional: nil)
        @const_big_int = const_big_int
        @const_big_int_str = const_big_int_str
        @const_bool = const_bool
        @const_date = const_date
        @const_date_time = const_date_time
        @const_decimal = const_decimal
        @const_decimal_str = const_decimal_str
        @const_enum_int = const_enum_int
        @const_enum_str = const_enum_str
        @const_int = const_int
        @const_num = const_num
        @const_str = const_str
        @const_str_null = const_str_null
        @default_big_int = default_big_int
        @default_big_int_str = default_big_int_str
        @default_bool = default_bool
        @default_date = default_date
        @default_date_time = default_date_time
        @default_decimal = default_decimal
        @default_decimal_str = default_decimal_str
        @default_enum_int = default_enum_int
        @default_enum_str = default_enum_str
        @default_int = default_int
        @default_num = default_num
        @default_str = default_str
        @default_str_nullable = default_str_nullable
        @normal_field = normal_field
        @single_enum_const_bool = single_enum_const_bool
        @single_enum_const_str = single_enum_const_str
        @default_str_optional = default_str_optional
      end
    end
  end
end
