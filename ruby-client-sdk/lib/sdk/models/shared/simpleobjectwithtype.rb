# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'
require_relative '../shared/enum'

module OpenApiSDK
  module Shared
    # SimpleObjectWithTypeInt32Enum - An int32 enum property.
    class SimpleObjectWithTypeInt32Enum < T::Enum
      enums do
        FIFTY_FIVE = new(55)
        SIXTY_NINE = new(69)
        ONE_HUNDRED_AND_EIGHTY_ONE = new(181)
      end
    end


    # SimpleObjectWithTypeIntEnum - An integer enum property.
    class SimpleObjectWithTypeIntEnum < T::Enum
      enums do
        FIRST = new(1)
        SECOND = new(2)
        THIRD = new(3)
      end
    end


    # A simple object that uses all our supported primitive types and enums and has optional properties.
    # https://docs.speakeasyapi.dev - A link to the external docs.
    class SimpleObjectWithType < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # An any property.
      field :any, Object, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('any') } }
      # A boolean property.
      field :bool, T::Boolean, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('bool') } }
      # A date property.
      field :date, Date, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('date'), 'decoder': Utils.date_from_iso_format(false) } }
      # A date-time property.
      field :date_time, DateTime, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('dateTime'), 'decoder': Utils.datetime_from_iso_format(false) } }
      # A string based enum
      field :enum, Shared::Enum, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('enum'), 'decoder': Utils.enum_from_string(Shared::Enum, false) } }
      # A float32 property.
      field :float32, Float, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('float32') } }
      # An integer property.
      field :int, Integer, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('int') } }
      # An int32 property.
      field :int32, Integer, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('int32') } }
      # An int32 enum property.
      field :int32_enum, Shared::SimpleObjectWithTypeInt32Enum, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('int32Enum'), 'decoder': Utils.enum_from_string(Shared::SimpleObjectWithTypeInt32Enum, false) } }
      # An integer enum property.
      field :int_enum, Shared::SimpleObjectWithTypeIntEnum, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('intEnum'), 'decoder': Utils.enum_from_string(Shared::SimpleObjectWithTypeIntEnum, false) } }
      # A number property.
      field :num, Float, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('num') } }
      # A string property.
      field :str_, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('str') } }

      field :type, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('type') } }

      field :bigint, T.nilable(Integer), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('bigint') } }

      field :bigint_str, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('bigintStr') } }
      # An optional boolean property.
      field :bool_opt, T.nilable(T::Boolean), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('boolOpt') } }

      field :decimal, T.nilable(Float), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('decimal') } }
      # An optional integer property will be null for tests.
      field :int_opt_null, T.nilable(Integer), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('intOptNull') } }
      # An optional number property will be null for tests.
      field :num_opt_null, T.nilable(Float), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('numOptNull') } }
      # An optional string property.
      field :str_opt, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('strOpt') } }


      sig { params(any: Object, bool: T::Boolean, date: Date, date_time: DateTime, enum: Shared::Enum, float32: Float, int: Integer, int32: Integer, int32_enum: Shared::SimpleObjectWithTypeInt32Enum, int_enum: Shared::SimpleObjectWithTypeIntEnum, num: Float, str_: String, type: String, bigint: T.nilable(Integer), bigint_str: T.nilable(String), bool_opt: T.nilable(T::Boolean), decimal: T.nilable(Float), int_opt_null: T.nilable(Integer), num_opt_null: T.nilable(Float), str_opt: T.nilable(String)).void }
      def initialize(any: nil, bool: nil, date: nil, date_time: nil, enum: nil, float32: nil, int: nil, int32: nil, int32_enum: nil, int_enum: nil, num: nil, str_: nil, type: nil, bigint: nil, bigint_str: nil, bool_opt: nil, decimal: nil, int_opt_null: nil, num_opt_null: nil, str_opt: nil)
        @any = any
        @bool = bool
        @date = date
        @date_time = date_time
        @enum = enum
        @float32 = float32
        @int = int
        @int32 = int32
        @int32_enum = int32_enum
        @int_enum = int_enum
        @num = num
        @str_ = str_
        @type = type
        @bigint = bigint
        @bigint_str = bigint_str
        @bool_opt = bool_opt
        @decimal = decimal
        @int_opt_null = int_opt_null
        @num_opt_null = num_opt_null
        @str_opt = str_opt
      end
    end
  end
end
