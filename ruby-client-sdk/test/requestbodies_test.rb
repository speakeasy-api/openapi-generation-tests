# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

require_relative '../lib/openapi'
require 'rack'
module OpenApiSDK
  class TestRequestBody < Minitest::Test
    def setup
      @sdk = OpenApiSDK::SDK.new
    end

    def test_request_body_post_application_json_simple
      record_test('request-bodies-post-application-json-simple')

      obj = create_simple_object

      res = @sdk.request_bodies.request_body_post_application_json_simple(request=obj)
      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.res)
      compare_simple_object(obj, res.res.json)
    end

    def test_request_body_post_application_json_array
      record_test('request-bodies-post-application-json-array')

      obj = create_simple_object
  
      res = @sdk.request_bodies.request_body_post_application_json_array(request=[obj])
  
      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.simple_objects)
      compare_simple_object(obj, res.simple_objects[0])
    end
  
  
    def test_request_body_post_application_json_array_of_array
      record_test('request-bodies-post-application-json-array-of-array')

      obj = create_simple_object
    
      res = @sdk.request_bodies.request_body_post_application_json_array_of_array(request=[[obj], [obj]])

      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.arrs)
      compare_simple_object(obj, res.arrs[0][0])
      compare_simple_object(obj, res.arrs[1][0])
    end
  
  
    def test_request_body_post_application_json_map
      record_test('request-bodies-post-application-json-map')

      obj = create_simple_object
      
      res = @sdk.request_bodies.request_body_post_application_json_map(request={
            "mapElem1": obj,
            "mapElem2": obj,
        })
    
      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.res)
      compare_simple_object(obj, res.res["mapElem1"])
      compare_simple_object(obj, res.res["mapElem2"])
    end

    def test_request_body_post_application_json_map_of_map
      record_test('request-bodies-post-application-json-map-of-map')

      obj = create_simple_object
      
      res = @sdk.request_bodies.request_body_post_application_json_map_of_map(request={
        "mapElem1": {
          "subMapElem1": obj,
          "subMapElem2": obj,
        },
        "mapElem2": {
            "subMapElem1": obj,
            "subMapElem2": obj,
        },
      })
    
      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.res)
      compare_simple_object(obj, res.res["mapElem1"]["subMapElem1"])
      compare_simple_object(obj, res.res["mapElem1"]["subMapElem2"])
      compare_simple_object(obj, res.res["mapElem2"]["subMapElem1"])
      compare_simple_object(obj, res.res["mapElem2"]["subMapElem2"])
    end
  
    def test_request_body_post_application_json_map_of_array
      record_test('request-bodies-post-application-json-map-of-array')

      obj = create_simple_object
      
      res = @sdk.request_bodies.request_body_post_application_json_map_of_array(request={
        "mapElem1": [obj, obj],
        "mapElem2": [obj, obj],
      })
    
      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.res)
      compare_simple_object(obj, res.res["mapElem1"][0])
      compare_simple_object(obj, res.res["mapElem1"][1])
      compare_simple_object(obj, res.res["mapElem2"][0])
      compare_simple_object(obj, res.res["mapElem2"][1])
    end

    def test_request_body_post_application_json_array_of_map
      record_test('request-bodies-post-application-json-array-of-map')

      obj = create_simple_object
      
      res = @sdk.request_bodies.request_body_post_application_json_array_of_map(request=[
        {
            "mapElem1": obj,
            "mapElem2": obj,
        },
        {
            "mapElem1": obj,
            "mapElem2": obj,
        },
      ])
    
      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.maps)
      compare_simple_object(obj, res.maps[0]["mapElem1"])
      compare_simple_object(obj, res.maps[0]["mapElem1"])
      compare_simple_object(obj, res.maps[1]["mapElem2"])
      compare_simple_object(obj, res.maps[1]["mapElem2"])
    end

    def test_request_body_post_application_json_map_of_primitive
      record_test('request-bodies-post-application-json-map-of-primitive')

      res = @sdk.request_bodies.request_body_post_application_json_map_of_primitive(request={
        "mapElem1": "hello",
        "mapElem2": "world",
    })
    
      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.res)
      assert_equal("hello", res.res["mapElem1"])
      assert_equal("world", res.res["mapElem2"])
    end

    def test_request_body_post_application_json_array_of_primitive
      record_test('request-bodies-post-application-json-array-of-primitive')

      res = @sdk.request_bodies.request_body_post_application_json_array_of_primitive(request=["hello", "world"])
    
      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.strings)
      assert_equal(["hello", "world"], res.strings)
    end

    def test_request_body_post_application_json_map_of_map_of_primitive
      record_test('request-bodies-post-application-json-map-of-map-of-primitive')

      res = @sdk.request_bodies.request_body_post_application_json_map_of_map_of_primitive(request={
        "mapElem1": {
            "subMapElem1": "foo",
            "subMapElem2": "bar",
        },
        "mapElem2": {
            "subMapElem1": "buzz",
            "subMapElem2": "bazz",
        },
      })
    
      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.res)
      assert_equal("foo", res.res["mapElem1"]["subMapElem1"])
      assert_equal("bar", res.res["mapElem1"]["subMapElem2"])
      assert_equal("buzz", res.res["mapElem2"]["subMapElem1"])
      assert_equal("bazz", res.res["mapElem2"]["subMapElem2"])
    end

    def test_request_body_post_application_json_array_of_array_of_primitive
      record_test('request-bodies-post-application-json-array-of-array-of-primitive')

      res = @sdk.request_bodies.request_body_post_application_json_array_of_array_of_primitive(request=[
        ["foo", "bar"],
        ["buzz", "bazz"],
    ])
    
      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.arrs)
      assert_equal([["foo", "bar"],["buzz", "bazz"]], res.arrs)
    end

    def test_request_body_post_application_json_array_object
      record_test('request-bodies-post-application-json-array-object')

      obj = create_simple_object

      res = @sdk.request_bodies.request_body_post_application_json_array_obj(request=[obj, obj])

      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.arr_obj_value)
      assert_equal(2, res.arr_obj_value.json.length)
      compare_simple_object(obj, res.arr_obj_value.json[0])
      compare_simple_object(obj, res.arr_obj_value.json[1])
    end

    def test_request_body_post_application_json_map_object
      record_test('request-bodies-post-application-json-map-object')

      obj = create_simple_object

      res = @sdk.request_bodies.request_body_post_application_json_map_obj(request={
        "mapElem1": obj,
        "mapElem2": obj,
      })

      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.map_obj_value)
      assert_equal(2, res.map_obj_value.json.length)
      compare_simple_object(obj, res.map_obj_value.json["mapElem1"])
      compare_simple_object(obj, res.map_obj_value.json["mapElem2"])
    end  

    def test_request_body_post_application_json_deep
      record_test('request-bodies-post-application-json-deep')

      obj = create_deep_object

      res = @sdk.request_bodies.request_body_post_application_json_deep(request=obj)
      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.res)
      any = res.res.json.any
      res.res.json.any = nil
      obj.any = nil

      compare_deep_object(res.res.json, obj)
      compare_hashes(any, {
        "any" => "any",
        "bool" => true,
        "boolOpt" => true,
        "date" => "2020-01-01",
        "dateTime" => "2020-01-01T00:00:00.000000001Z",
        "enum" => "one",
        "float32" => 1.1,
        "int" => 1,
        "int32" => 1,
        "int32Enum" => 55,
        "intEnum" => 2,
        "num" => 1.1,
        "str" => "test",
        "strOpt" => "testOptional"
      })
    end

    def test_request_body_post_application_json_multiple_json_filtered
      record_test('request-bodies-post-application-json-multiple-json-filtered')

      obj = create_simple_object
      res = @sdk.request_bodies.request_body_post_application_json_multiple_json_filtered(request=obj)

      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.res)
      compare_simple_object(res.res.json, obj)
    end


    def test_request_body_post_multiple_content_types_component_filtered
      record_test('request-bodies-post-multiple-content-types-component-filtered')

      obj = create_simple_object
      res = @sdk.request_bodies.request_body_post_multiple_content_types_component_filtered(request=obj)

      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.res)
      compare_simple_object(res.res.json, obj)
    end


    def test_request_body_post_multiple_content_types_inline_filtered
      record_test('request-bodies-post-multiple-content-types-inline-filtered')

      res = @sdk.request_bodies.request_body_post_multiple_content_types_inline_filtered(request=Operations::RequestBodyPostMultipleContentTypesInlineFilteredApplicationJSON.new(
        bool: true,
        num: 1.1,
        str_: 'test'
      ))

      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.res)
      assert_equal(res.res.json, {
        "bool" => true,
        "num" => 1.1,
        "str" => 'test'
      })
    end  


    def test_request_body_post_multiple_content_types_split_json
      record_test('request-bodies-post-multiple-content-types-split-json')

      res = @sdk.request_bodies.request_body_post_multiple_content_types_split_json(request=Operations::RequestBodyPostMultipleContentTypesSplitApplicationJSON.new(
        bool: true,
        num: 1.1,
        str_: 'test'
      ))

      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.res)
      assert_equal(res.res.json, {
        "bool" => true,
        "num" => 1.1,
        "str" => 'test'
      })
    end

    def test_request_body_post_multiple_content_types_split_multipart
      record_test('request-bodies-post-multiple-content-types-split-multipart')

      res = @sdk.request_bodies.request_body_post_multiple_content_types_split_multipart(request=Operations::RequestBodyPostMultipleContentTypesSplitMultipartFormData.new(
        bool2: true,
        num2: 1.1,
        str2: 'test'
      ))

      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.res)
      assert_equal(res.res.form, {
        "bool2" => true,
        "num2" => 1.1,
        "str2" => 'test'
      })
    end

    def test_request_body_post_multiple_content_types_split_form
      record_test('request-bodies-post-multiple-content-types-split-form')

      res = @sdk.request_bodies.request_body_post_multiple_content_types_split_form(request=Operations::RequestBodyPostMultipleContentTypesSplitApplicationXWwwFormUrlencoded.new(
        bool3: true,
        num3: 1.1,
        str3: 'test'
      ))

      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.res)
      assert_equal(res.res.form, {
        "bool3" => true,
        "num3" => 1.1,
        "str3" => 'test'
      })
    end

    def test_request_body_post_multiple_content_types_split_json_param
      record_test('request-bodies-post-multiple-content-types-split-json-with-param')

      res = @sdk.request_bodies.request_body_post_multiple_content_types_split_param_json(
        request_body=Operations::RequestBodyPostMultipleContentTypesSplitParamApplicationJSON.new(
          bool: true,
          num: 1.1,
          str_: 'test body'
        ), 
        param_str='test param'
      )

      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.res)
      assert_equal(res.res.json, {
        'bool' => true,
        'num' => 1.1,
        'str' => 'test body'
        }
      )
      assert_equal(res.res.args, {'paramStr' => 'test param'})

    end
  
    def test_request_body_post_multiple_content_types_split_multipart_param
      record_test('request-bodies-post-multiple-content-types-split-multipart-with-param')

      res = @sdk.request_bodies.request_body_post_multiple_content_types_split_param_multipart(
        request_body=Operations::RequestBodyPostMultipleContentTypesSplitParamMultipartFormData.new(
          bool2: true,
          num2: 1.1,
          str2: 'test body'
        ), 
        param_str='test param'
      )


      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.res)
      assert_equal(res.res.form, {
        'bool2' => true,
        'num2' => 1.1,
        'str2' => 'test body'
        }
      )
      assert_equal(res.res.args, {'paramStr' => 'test param'})

    end  
  
    def test_request_body_post_multiple_content_types_split_form_param
      record_test('request-bodies-post-multiple-content-types-split-form-with-param')

      res = @sdk.request_bodies.request_body_post_multiple_content_types_split_param_form(
        request_body=Operations::RequestBodyPostMultipleContentTypesSplitParamApplicationXWwwFormUrlencoded.new(
          bool3: true,
          num3: 1.1,
          str3: 'test body'
        ), 
        param_str='test param'
        )
      assert_equal(res.res.form, {
        'bool3' => true,
        'num3' => 1.1,
        'str3' => 'test body'
        }
      )
      assert_equal(res.res.args, {'paramStr' => 'test param'})

    end  

    def test_request_body_put_multipart_simple
      record_test('request-bodies-put-multipart-simple')

      obj = create_simple_object

      res = @sdk.request_bodies.request_body_put_multipart_simple(request=obj)
      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.res)
      
      assert_equal("any", res.res.form.any)
      assert_equal("true", res.res.form.bool_opt)
      assert_equal("true", res.res.form.bool)
      assert_equal("2020-01-01T00:00:00.000000001Z", res.res.form.date_time)
      assert_equal("2020-01-01", res.res.form.date)
      assert_equal("one", res.res.form.enum)
      assert_equal("1.1", res.res.form.float32)
      assert_equal("1", res.res.form.int)
      assert_equal("1", res.res.form.int32)
      assert_equal("1.1", res.res.form.num)
      assert_equal("testOptional", res.res.form.str_opt)
      assert_equal("test", res.res.form.str_)
    end

    def test_request_body_put_multipart_deep
      record_test('request-bodies-put-multipart-deep')

      obj = create_deep_object

      res = @sdk.request_bodies.request_body_put_multipart_deep(request=obj)

      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.res)

      assert_equal(OpenApiSDK::Utils::marshal_json_complex(obj.arr), JSON.load(res.res.form.arr))
      assert_equal("true", res.res.form.bool)
      assert_equal("1", res.res.form.int)
      assert_equal(OpenApiSDK::Utils::marshal_json_complex(obj.map), JSON.load(res.res.form.map))
      assert_equal("1.1", res.res.form.num)
      assert_equal(OpenApiSDK::Utils::marshal_json_complex(obj.obj), JSON.load(res.res.form.obj))
      assert_equal("test", res.res.form.str_)
    end

    def test_request_body_put_multipart_file
      record_test('request-bodies-put-multipart-file')

      data = File.open("test/testdata/testUpload.json").read

      res = @sdk.request_bodies.request_body_put_multipart_file(request=Operations::RequestBodyPutMultipartFileRequestBody.new(
          file: Operations::RequestBodyPutMultipartFileRequestBodyFile.new(
            content: data,
            file:    "test/testdata/testUpload.json",
          )
        )
      )
      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.res)
      assert_equal({"file" => data.to_s}, res.res.files)
    end

    def test_request_body_post_form_simple
      record_test('request-bodies-post-form-simple')

      obj = create_simple_object

      res = @sdk.request_bodies.request_body_post_form_simple(request=obj)
      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.res)

      assert_equal("any", res.res.form.any)
      assert_equal("true", res.res.form.bool)
      assert_equal("true", res.res.form.bool_opt)
      assert_equal("2020-01-01", res.res.form.date)
      assert_equal("2020-01-01T00:00:00.000000001Z", res.res.form.date_time)
      assert_equal("one", res.res.form.enum)
      assert_equal("1.1", res.res.form.float32)
      assert_equal("1", res.res.form.int)
      assert_equal("1", res.res.form.int32)
      assert_equal("1.1", res.res.form.num)
      assert_equal("test", res.res.form.str_)
      assert_equal("testOptional", res.res.form.str_opt)

    end

    def test_request_body_post_form_deep
      record_test('request-bodies-post-form-deep')

      obj = create_deep_object

      res = @sdk.request_bodies.request_body_post_form_deep(request=obj)
      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.res)

      assert_equal(OpenApiSDK::Utils::marshal_json_complex(obj.arr), res.res.form.arr)
      assert_equal("true", res.res.form.bool)
      assert_equal("1", res.res.form.int)
      assert_equal(OpenApiSDK::Utils::marshal_json_complex(obj.map), res.res.form.map)
      assert_equal("1.1", res.res.form.num)
      assert_equal(OpenApiSDK::Utils::marshal_json_complex(obj.obj), res.res.form.obj)
      assert_equal("test", res.res.form.str_)

    end

    def test_request_body_post_form_map_primitive
      record_test('request-bodies-post-form-map-primitive')

      m = {
        "key1" => "value1",
        "key2" => "value2",
        "key3" => "value3",
      }
      res = @sdk.request_bodies.request_body_post_form_map_primitive(request=m)
      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.res)
      compare_hashes(m, res.res.form)
    end

    def test_request_body_put_string
      record_test('request-bodies-put-string')

      str = "Hello World"
      res = @sdk.request_bodies.request_body_put_string(str)
      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.res)
      assert_equal(str, res.res.data)
    end


    def test_request_body_put_bytes
      record_test('request-bodies-put-bytes')

      data = File.open("test/testdata/testUpload.json").read

      res = @sdk.request_bodies.request_body_put_bytes(data)
      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.res)
      assert_equal(data.to_s, res.res.data)
    end


    def test_request_body_put_string_with_params
      record_test('request-bodies-put-string-with-params')

      str = "Hello World"
      res = @sdk.request_bodies.request_body_put_string_with_params(str, "test param")
      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.res)
      assert_equal(str, res.res.data)
      assert_equal("test param", res.res.args.query_string_param)
    end


    def test_request_body_put_bytes_with_params
      record_test('request-bodies-put-bytes-with-params')

      data = File.open("test/testdata/testUpload.json").read

      res = @sdk.request_bodies.request_body_put_bytes_with_params(data, "test param")
      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      refute_nil(res.res)
      assert_equal(data.to_s, res.res.data)
      assert_equal("test param", res.res.args.query_string_param)
    end

    def test_request_body_post_empty_object
      record_test('request-bodies-post-empty-object')

      res = @sdk.request_bodies.request_body_post_empty_object(request=Operations::RequestBodyPostEmptyObjectRequestBody.new(
        empty: Operations::RequestBodyPostEmptyObjectRequestBodyEmpty.new(),
        empty_with_empty_properties: Operations::RequestBodyPostEmptyObjectRequestBodyEmptyWithEmptyProperties.new(),
      ))
      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
    end
  end
end
