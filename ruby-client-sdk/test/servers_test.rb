# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

require_relative '../lib/openapi'
require 'rack'

module OpenApiSDK
  class TestResponseBody < Minitest::Test

    def test_select_global_server
      record_test('servers-select-global-server-valid')

      sdk = SDK.new(server_url: SERVERS[0])
      
      refute_nil sdk

      res =  sdk.servers.select_global_server
      refute_nil res
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)

    end

    def test_select_global_server_broken
      record_test('servers-select-global-server-broken')

      sdk = SDK.new(server_idx: 1)
      refute_nil sdk

      error = nil
      begin
        res = sdk.servers.select_global_server
      rescue => err
        error = err
      end

      refute_nil error
      assert_nil res
    end


    def test_select_server_with_id_default
      record_test('servers-select-server-with-id-default')

      sdk = SDK.new(server_url: SERVERS[0])
      
      refute_nil sdk

      res = sdk.servers.select_server_with_id()
      refute_nil res
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
    end


    def test_select_server_with_id_valid
      record_test('servers-select-server-with-id-valid')

      sdk = SDK.new(server_url: SERVERS[0])
      
      refute_nil sdk

      res = sdk.servers.select_server_with_id(server_url=Operations::SELECT_SERVER_WITH_ID_SERVERS[:SELECT_SERVER_WITH_ID_SERVER_VALID])

      refute_nil res
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
    end

    def test_select_server_with_id_broken
      record_test('servers-select-server-with-id-broken')

      sdk = OpenApiSDK::SDK.new(server_url: SERVERS[0])
      
      refute_nil sdk

      error = nil
      begin
        res = sdk.servers.select_server_with_id(server_url=Operations::SELECT_SERVER_WITH_ID_SERVERS[:SELECT_SERVER_WITH_ID_SERVER_BROKEN])
      rescue => e
        error = e
      end
      refute_nil error
      assert_nil res
    end

    def test_server_with_templates_global
      record_test('servers-server-with-templates-global')

      sdk = SDK.new(server_idx: 2, hostname: "localhost", port: "35123")

      refute_nil sdk

      res = sdk.servers.server_with_templates_global
      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
    end

    def test_server_with_templates_global_defaults
      record_test('servers-server-with-templates-global-defaults')
  
      sdk = SDK.new(server_idx: 2)
  
      res = sdk.servers.server_with_templates_global

      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
    end

    def test_server_with_templates_global_enum
      record_test('servers-server-with-templates-global-enum')
  
      sdk = SDK.new(server_idx:3, something: ServerSomething::SOMETHING_ELSE_AGAIN)

      res = sdk.servers.server_with_templates_global

      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
    end

    def test_server_with_templates
      record_test('servers-server-with-templates')

      sdk = SDK.new

      res = sdk.servers.server_with_templates(server_url=Utils::template_url(Operations::SERVER_WITH_TEMPLATES_SERVERS[0], {
        :hostname => "localhost",
        :port =>     "35123"
      }))
      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
    end

    def test_server_with_templates_defaults
      record_test('servers-server-with-templates-defaults')
  
      sdk = SDK.new
  
      res = sdk.servers.server_with_templates
  
      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
    end
  
    def test_servers_by_id_with_templates
      record_test('servers-server-by-id-with-templates')
  
      sdk = SDK.new
  
      res = sdk.servers.servers_by_id_with_templates()
  
      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
    end

  end
end
