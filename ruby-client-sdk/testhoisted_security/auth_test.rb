# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# frozen_string_literal: true

require_relative '../lib/openapi'
require 'rack'
module OpenApiSDK
  class TestAuth < Minitest::Test
    def setup
      @sdk = OpenApiSDK::SDK.new
    end

    def test_no_auth
      record_test('auth-no-auth')

      res = @sdk.auth.no_auth

      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)

    end

    def test_basic_auth
      record_test('auth-basic-auth')

      res = @sdk.auth.basic_auth(
        Operations::BasicAuthSecurity.new(
          username: 'testUser',
          password: 'testPass'
        ),
        'testPass',
        'testUser'
      )

      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      assert_equal(res.user.authenticated, true)

    end

    def test_api_key_auth_global
      record_test('auth-api-key-auth-global')

      @sdk.config_security(
        Shared::Security.new(
          api_key_auth: 'Bearer testToken'
        )
      )

      res = @sdk.auth.api_key_auth_hoisted

      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      assert_equal(res.token.authenticated, true)
      assert_equal('testToken', res.token.token)
    end

    def test_api_key_auth_operation
      record_test('auth-api-key-auth-operation')

      res = @sdk.auth.api_key_or_bearer_auth(
        Operations::ApiKeyOrBearerAuthSecurity.new(
          api_key_auth: 'Bearer testToken'
        )
      )
      refute_nil(res)
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
      assert_equal(res.token.authenticated, true)
      assert_equal('testToken', res.token.token)
    end
  end
end
