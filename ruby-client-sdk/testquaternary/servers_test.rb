# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# frozen_string_literal: true

require_relative '../lib/openapi'
require 'rack'

module OpenApiSDK
  class TestServers < Minitest::Test
    def setup
      @sdk = OpenApiSDK::SDK.new
    end

    def test_select_global_server_by_name_default
      record_test('servers-select-global-server-by-name-default')

      res = @sdk.servers.select_global_server
      refute_nil res
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
    end

    def test_select_global_server_by_name_invalid
      record_test('servers-select-global-server-by-name-invalid')

      error = nil
      begin
        SDK.new(server: :unknown)
      rescue StandardError => e
        error = e
      end
      refute_nil error
      assert_equal('Invalid server "unknown"', error.message)

      error = nil
      begin
        @sdk.config_server(:unknown, nil)
      rescue StandardError => e
        error = e
      end
      refute_nil error
      assert_equal('Invalid server "unknown"', error.message)
    end

    def test_select_global_server_by_name_with_templates_defaults
      record_test('servers-select-global-server-by-name-with-templates-defaults')

      assert_equal(:templated, OpenApiSDK::SERVER_TEMPLATED)
      sdk = SDK.new(server: OpenApiSDK::SERVER_TEMPLATED)
      res = sdk.servers.select_global_server
      refute_nil res
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)

      @sdk.config_server(OpenApiSDK::SERVER_TEMPLATED, nil)
      res = @sdk.servers.select_global_server
      refute_nil res
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
    end

    def test_select_global_server_by_name_with_templates_valid
      record_test('servers-select-global-server-by-name-with-templates-valid')

      sdk = SDK.new(server: :templated, hostname: '127.0.0.1', port: '35123')
      refute_nil sdk
      res = sdk.servers.select_global_server
      refute_nil res
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)

      @sdk.config_server(:templated, { hostname: '127.0.0.1', port: '35123' })
      res = @sdk.servers.select_global_server
      refute_nil res
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
    end

    def test_select_global_server_by_name_with_templates_broken
      record_test('servers-select-global-server-by-name-with-templates-broken')

      sdk = SDK.new(server: OpenApiSDK::SERVER_TEMPLATED, hostname: 'broken', port: '12345')
      refute_nil sdk
      error = nil
      begin
        sdk.servers.select_global_server
      rescue Faraday::ConnectionFailed => e
        error = e
      end
      refute_nil error
      assert error.message.include?('broken:12345')

      @sdk.config_server(OpenApiSDK::SERVER_TEMPLATED, { hostname: 'broken', port: '12345' })
      error = nil
      begin
        @sdk.servers.select_global_server
      rescue Faraday::ConnectionFailed => e
        error = e
      end
      refute_nil error
      assert error.message.include?('broken:12345')
    end
  end
end
