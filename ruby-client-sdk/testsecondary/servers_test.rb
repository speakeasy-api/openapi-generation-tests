# Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.

# frozen_string_literal: true

require_relative '../lib/openapi'
require 'rack'

module OpenApiSDK
  class TestServers < Minitest::Test
    def setup
      @sdk = OpenApiSDK::SDK.new
    end

    def test_select_global_server_valid
      record_test('servers-select-global-server-valid')

      @sdk.config_server_url('http://localhost:35123')
      res = @sdk.servers.select_global_server
      refute_nil res
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
    end

    def test_select_global_server_broken
      record_test('servers-select-global-server-broken')

      @sdk.config_server_url('http://broken:12345')

      error = nil
      begin
        res = @sdk.servers.select_global_server
      rescue Faraday::ConnectionFailed => e
        error = e
      end
      refute_nil error
      assert_nil res
    end

    def test_select_global_server_by_name_default
      record_test('servers-select-global-server-by-name-default')
      sdk = SDK.new(server: nil)
      res = sdk.servers.select_global_server
      refute_nil res
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
    end

    def test_select_global_server_by_name_valid
      record_test('servers-select-global-server-by-name-valid')

      assert_equal(:default_server, OpenApiSDK::SERVER_DEFAULT_SERVER)
      sdk = SDK.new(server: OpenApiSDK::SERVER_DEFAULT_SERVER)
      refute_nil sdk
      res = sdk.servers.select_global_server
      refute_nil res
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)

      @sdk.config_server(OpenApiSDK::SERVER_DEFAULT_SERVER)
      res = @sdk.servers.select_global_server
      refute_nil res
      assert_equal(Rack::Utils.status_code(:ok), res.status_code)
    end

    def test_select_global_server_by_name_invalid
      record_test('servers-select-global-server-by-name-invalid')

      error = nil
      begin
        SDK.new(server: :unknown_server)
      rescue StandardError => e
        error = e
      end
      refute_nil error
      assert_equal('Invalid server "unknown_server"', error.message)

      error = nil
      begin
        @sdk.config_server(:unknown_server)
      rescue StandardError => e
        error = e
      end
      refute_nil error
      assert_equal('Invalid server "unknown_server"', error.message)
    end

    def test_select_global_server_by_name_broken
      record_test('servers-select-global-server-by-name-broken')

      assert_equal(:broken_server, OpenApiSDK::SERVER_BROKEN_SERVER)
      sdk = SDK.new(server: OpenApiSDK::SERVER_BROKEN_SERVER)
      refute_nil sdk

      error = nil
      begin
        res = sdk.servers.select_global_server
      rescue Faraday::ConnectionFailed => e
        error = e
      end
      refute_nil error
      assert_nil res
    end
  end
end
