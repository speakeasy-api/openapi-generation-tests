// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

import Foundation

/// Defines the operations supported by the API.
///
/// This protocol defines all of the operations supported by the API. It is implemented by ``Client`` which can be used to make these API requests and handle their responses.
///
/// ## Topics
///
/// ### API calls
///
/// These methods allow you to make requests to the API.
///
/// - ``ambiguousQueryParam(request:)``
/// - ``authenticatedRequest(request:security:)``
/// - ``conflictingEnum(request:)``
/// - ``ignoredGenerationPut(request:)``
/// - ``multilineExample(request:)``
/// - ``postAdditionalPropertiesWithNullableFields(request:)``
/// - ``responseBodyJsonGet()``
///
/// ### Scoped API calls
///
/// These properties logically group other parts of the API.
///
/// - ``generation``
/// - ``unions``
/// - ``errors``
/// - ``customClient``
/// - ``responseBodies``
/// - ``flattening``
/// - ``globals``
/// - ``parameters``
/// - ``hooks``
/// - ``nestFirst``
/// - ``nested``
/// - ``nestedFirst``
/// - ``nestedSecond``
/// - ``auth``
/// - ``openEnums``
/// - ``requestBodies``
/// - ``servers``
/// - ``telemetry``
/// - ``authNew``
/// - ``resource``
/// - ``documentation``
/// - ``first``
/// - ``second``
/// - ``methods``
/// - ``pagination``
/// - ``retries``
///
public protocol OpenAPI {
    /// Tests conflict with C# System namespace
    /// 
    /// - Parameter request: A ``Operations/AmbiguousQueryParamRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/AmbiguousQueryParamResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``OpenAPIError``
    func ambiguousQueryParam(request: Operations.AmbiguousQueryParamRequest) async throws -> Response<Operations.AmbiguousQueryParamResponse>
    func authenticatedRequest(request: Operations.AuthenticatedRequestRequestBody, security: Operations.AuthenticatedRequestSecurity) async throws -> Response<Operations.AuthenticatedRequestResponse>
    /// Test potential namespace conflicts with java.lang.Object
    /// 
    /// - Parameter request: A ``Shared/ConflictingEnum`` object describing the input to the API operation
    /// - Returns: A ``Operations/ConflictingEnumResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``OpenAPIError``
    func conflictingEnum(request: Shared.ConflictingEnum) async throws -> Response<Operations.ConflictingEnumResponse>
    func ignoredGenerationPut(request: String) async throws -> Response<Operations.IgnoredGenerationPutResponse>
    func multilineExample(request: Operations.MultilineExampleRequestBody) async throws -> Response<Operations.MultilineExampleResponse>
    func postAdditionalPropertiesWithNullableFields(request: [String: AnyValue]) async throws -> Response<Operations.PostAdditionalPropertiesWithNullableFieldsResponse>
    func responseBodyJsonGet() async throws -> Response<Operations.ResponseBodyJsonGetResponse>

    // MARK: - Scoped APIs
    /// Endpoints for purely testing valid generation behavior.
    var generation: GenerationAPI { get }
    /// Endpoints for testing union types.
    var unions: UnionsAPI { get }
    /// Endpoints for testing error responses.
    var errors: ErrorsAPI { get }
    /// Endpoints for testing custom HTTP clients
    var customClient: CustomClientAPI { get }
    /// Endpoints for testing response bodies.
    var responseBodies: ResponseBodiesAPI { get }
    /// Endpoints for testing flattening through request body and parameter combinations.
    var flattening: FlatteningAPI { get }
    /// Endpoints for testing global parameters.
    var globals: GlobalsAPI { get }
    /// Endpoints for testing parameters.
    var parameters: ParametersAPI { get }
    /// Endpoints for testing hooks
    var hooks: HooksAPI { get }
    var nestFirst: NestFirstAPI { get }
    var nested: NestedAPI { get }
    var nestedFirst: NestedFirstAPI { get }
    var nestedSecond: NestedSecondAPI { get }
    /// Endpoints for testing authentication.
    var auth: AuthAPI { get }
    /// Endpoints for testing open/closed enums
    var openEnums: OpenEnumsAPI { get }
    /// Endpoints for testing request bodies.
    var requestBodies: RequestBodiesAPI { get }
    /// Endpoints for testing servers.
    var servers: ServersAPI { get }
    /// Endpoints for testing telemetry.
    var telemetry: TelemetryAPI { get }
    /// Endpoints for testing authentication.
    var authNew: AuthNewAPI { get }
    var resource: ResourceAPI { get }
    /// Testing for documentation extensions and tooling.
    var documentation: DocumentationAPI { get }
    var first: FirstAPI { get }
    var second: SecondAPI { get }
    /// Endpoints for testing HTTP methods.
    var methods: MethodsAPI { get }
    /// Endpoints for testing the pagination extension
    var pagination: PaginationAPI { get }
    /// Endpoints for testing retries.
    var retries: RetriesAPI { get }
}

// MARK: - GenerationAPI

/// Endpoints for purely testing valid generation behavior.
///
/// ## Topics
///
/// ### API calls
///
/// - ``anchorTypesGet()``
/// - ``arrayCircularReferenceGet()``
/// - ``circularReferenceGet()``
/// - ``dateParamWithDefault(request:)``
/// - ``dateTimeParamWithDefault(request:)``
/// - ``decimalParamWithDefault(request:)``
/// - ``deprecatedFieldInSchemaPost(request:)``
/// - ``deprecatedObjectInSchemaGet()``
/// - ``deprecatedOperationNoCommentsGet(request:)``
/// - ``deprecatedOperationWithCommentsGet(request:)``
/// - ``emptyObjectGet(request:)``
/// - ``emptyResponseObjectWithCommentGet()``
/// - ``getGlobalNameOverride(request:)``
/// - ``ignoredGenerationGet()``
/// - ``ignoresPost(request:)``
/// - ``nameOverrideGet(request:)``
/// - ``objectCircularReferenceGet()``
/// - ``oneOfCircularReferenceGet()``
/// - ``typedParameterGenerationGet(request:)``
/// - ``usageExamplePost(request:security:)``
///
public protocol GenerationAPI {
    func anchorTypesGet() async throws -> Response<Operations.AnchorTypesGetResponse>

    func arrayCircularReferenceGet() async throws -> Response<Operations.ArrayCircularReferenceGetResponse>

    func circularReferenceGet() async throws -> Response<Operations.CircularReferenceGetResponse>

    func dateParamWithDefault(request: Operations.DateParamWithDefaultRequest) async throws -> Response<Operations.DateParamWithDefaultResponse>

    func dateTimeParamWithDefault(request: Operations.DateTimeParamWithDefaultRequest) async throws -> Response<Operations.DateTimeParamWithDefaultResponse>

    func decimalParamWithDefault(request: Operations.DecimalParamWithDefaultRequest) async throws -> Response<Operations.DecimalParamWithDefaultResponse>

    func deprecatedFieldInSchemaPost(request: Shared.DeprecatedFieldInObject) async throws -> Response<Operations.DeprecatedFieldInSchemaPostResponse>

    func deprecatedObjectInSchemaGet() async throws -> Response<Operations.DeprecatedObjectInSchemaGetResponse>

    /// 
    /// - Parameter request: A ``Operations/DeprecatedOperationNoCommentsGetRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/DeprecatedOperationNoCommentsGetResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``OpenAPIError``
    @available(*, deprecated, message: "This will be removed in a future release, please migrate away from it as soon as possible")
    func deprecatedOperationNoCommentsGet(request: Operations.DeprecatedOperationNoCommentsGetRequest) async throws -> Response<Operations.DeprecatedOperationNoCommentsGetResponse>

    /// This is an endpoint setup to test deprecation with comments
    /// 
    /// - Parameter request: A ``Operations/DeprecatedOperationWithCommentsGetRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/DeprecatedOperationWithCommentsGetResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``OpenAPIError``
    @available(*, deprecated, renamed: "simplePathParameterObjects", message: "This operation is deprecated")
    func deprecatedOperationWithCommentsGet(request: Operations.DeprecatedOperationWithCommentsGetRequest) async throws -> Response<Operations.DeprecatedOperationWithCommentsGetResponse>

    func emptyObjectGet(request: Operations.EmptyObjectGetRequest) async throws -> Response<Operations.EmptyObjectGetResponse>

    func emptyResponseObjectWithCommentGet() async throws -> Response<Operations.EmptyResponseObjectWithCommentGetResponse>

    func getGlobalNameOverride(request: Shared.SimpleObject) async throws -> Response<Operations.GetGlobalNameOverrideResponse>

    func ignoredGenerationGet() async throws -> Response<Operations.IgnoredGenerationGetResponse>

    func ignoresPost(request: Operations.IgnoresPostRequest) async throws -> Response<Operations.IgnoresPostResponse>

    func nameOverrideGet(request: Operations.NameOverrideGetRequest) async throws -> Response<Operations.NameOverrideGetResponse>

    func objectCircularReferenceGet() async throws -> Response<Operations.ObjectCircularReferenceGetResponse>

    func oneOfCircularReferenceGet() async throws -> Response<Operations.OneOfCircularReferenceGetResponse>

    func typedParameterGenerationGet(request: Operations.TypedParameterGenerationGetRequest) async throws -> Response<Operations.TypedParameterGenerationGetResponse>

    /// An operation used for testing usage examples that includes a large array of parameters and input types to ensure that all are handled correctly
    /// 
    /// - Parameter request: A ``Operations/UsageExamplePostRequest`` object describing the input to the API operation
    /// - Parameter security: An authentication object used to authenticate this request
    /// - Returns: A ``Operations/UsageExamplePostResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``OpenAPIError``
    func usageExamplePost(request: Operations.UsageExamplePostRequest, security: Operations.UsageExamplePostSecurity) async throws -> Response<Operations.UsageExamplePostResponse>
}

// MARK: - UnionsAPI

/// Endpoints for testing union types.
///
/// ## Topics
///
/// ### API calls
///
/// - ``collectionOneOfPost(request:)``
/// - ``constDiscriminatedOneOf(request:)``
/// - ``discriminatedOneMultipleMemberships(request:)``
/// - ``discriminatedOneMultipleMembershipsHasWheels(request:)``
/// - ``flattenedTypedObjectPost(request:)``
/// - ``infectedWithAny(request:)``
/// - ``mixedTypeOneOfPost(request:)``
/// - ``mixedUnionTypes(request:)``
/// - ``multiMatchAnyOf(request:)``
/// - ``nullableOneOfRefInObjectPost(request:)``
/// - ``nullableOneOfSchemaPost(request:)``
/// - ``nullableOneOfTypeInObjectPost(request:)``
/// - ``nullableTypedObjectPost(request:)``
/// - ``oneOfOverlappingObjects(request:)``
/// - ``primitiveTypeOneOfPost(request:)``
/// - ``stronglyTypedOneOfDiscriminatedPost(request:)``
/// - ``stronglyTypedOneOfPost(request:)``
/// - ``stronglyTypedOneOfPostWithNonStandardDiscriminatorName(request:)``
/// - ``typedObjectNullableOneOfPost(request:)``
/// - ``typedObjectOneOfPost(request:)``
/// - ``unionBigIntStrDecimal(request:)``
/// - ``unionDateNull(request:)``
/// - ``unionDateTimeBigInt(request:)``
/// - ``unionDateTimeNull(request:)``
/// - ``unionMap(request:)``
/// - ``unionMapOptional(request:)``
/// - ``unionNestedEnumsForm(request:)``
/// - ``unionNestedEnumsMultipart(request:)``
/// - ``unionOfArraysPost(request:)``
/// - ``weaklyTypedOneOfNullEnumPost(request:)``
/// - ``weaklyTypedOneOfPost(request:)``
///
public protocol UnionsAPI {
    func collectionOneOfPost(request: Shared.CollectionOneOfObject) async throws -> Response<Operations.CollectionOneOfPostResponse>

    func constDiscriminatedOneOf(request: Shared.ConstDiscriminatedOneOf) async throws -> Response<Operations.ConstDiscriminatedOneOfResponse>

    func discriminatedOneMultipleMemberships(request: Shared.Vehicle) async throws -> Response<Operations.DiscriminatedOneMultipleMembershipsResponse>

    func discriminatedOneMultipleMembershipsHasWheels(request: Shared.HasWheels) async throws -> Response<Operations.DiscriminatedOneMultipleMembershipsHasWheelsResponse>

    func flattenedTypedObjectPost(request: Shared.FlattenedTypedObject1) async throws -> Response<Operations.FlattenedTypedObjectPostResponse>

    func infectedWithAny(request: Shared.InfectedWithAny) async throws -> Response<Operations.InfectedWithAnyResponse>

    func mixedTypeOneOfPost(request: Operations.MixedTypeOneOfPostRequestBody) async throws -> Response<Operations.MixedTypeOneOfPostResponse>

    func mixedUnionTypes(request: Shared.MixedUnionTypes) async throws -> Response<Operations.MixedUnionTypesResponse>

    func multiMatchAnyOf(request: Shared.AnyOfMultiMatch) async throws -> Response<Operations.MultiMatchAnyOfResponse>

    func nullableOneOfRefInObjectPost(request: Shared.NullableOneOfRefInObject) async throws -> Response<Operations.NullableOneOfRefInObjectPostResponse>

    func nullableOneOfSchemaPost(request: Operations.NullableOneOfSchemaPostRequestBody) async throws -> Response<Operations.NullableOneOfSchemaPostResponse>

    func nullableOneOfTypeInObjectPost(request: Shared.NullableOneOfTypeInObject) async throws -> Response<Operations.NullableOneOfTypeInObjectPostResponse>

    func nullableTypedObjectPost(request: Shared.TypedObject1) async throws -> Response<Operations.NullableTypedObjectPostResponse>

    func oneOfOverlappingObjects(request: Operations.OneOfOverlappingObjectsRequestBody) async throws -> Response<Operations.OneOfOverlappingObjectsResponse>

    func primitiveTypeOneOfPost(request: Operations.PrimitiveTypeOneOfPostRequestBody) async throws -> Response<Operations.PrimitiveTypeOneOfPostResponse>

    func stronglyTypedOneOfDiscriminatedPost(request: Shared.StronglyTypedOneOfDiscriminatedObject) async throws -> Response<Operations.StronglyTypedOneOfDiscriminatedPostResponse>

    func stronglyTypedOneOfPost(request: Shared.StronglyTypedOneOfObject) async throws -> Response<Operations.StronglyTypedOneOfPostResponse>

    func stronglyTypedOneOfPostWithNonStandardDiscriminatorName(request: Shared.StronglyTypedOneOfObjectWithNonStandardDiscriminatorName) async throws -> Response<Operations.StronglyTypedOneOfPostWithNonStandardDiscriminatorNameResponse>

    func typedObjectNullableOneOfPost(request: Shared.TypedObjectNullableOneOf) async throws -> Response<Operations.TypedObjectNullableOneOfPostResponse>

    func typedObjectOneOfPost(request: Shared.TypedObjectOneOf) async throws -> Response<Operations.TypedObjectOneOfPostResponse>

    func unionBigIntStrDecimal(request: Operations.UnionBigIntStrDecimalRequestBody) async throws -> Response<Operations.UnionBigIntStrDecimalResponse>

    func unionDateNull(request: Date) async throws -> Response<Operations.UnionDateNullResponse>

    func unionDateTimeBigInt(request: Operations.UnionDateTimeBigIntRequestBody) async throws -> Response<Operations.UnionDateTimeBigIntResponse>

    func unionDateTimeNull(request: Date) async throws -> Response<Operations.UnionDateTimeNullResponse>

    func unionMap(request: Operations.UnionMapRequestBody) async throws -> Response<Operations.UnionMapResponse>

    func unionMapOptional(request: Operations.UnionMapOptionalRequestBody) async throws -> Response<Operations.UnionMapOptionalResponse>

    func unionNestedEnumsForm(request: Operations.UnionNestedEnumsFormRequestBody) async throws -> Response<Operations.UnionNestedEnumsFormResponse>

    func unionNestedEnumsMultipart(request: Operations.UnionNestedEnumsMultipartRequestBody) async throws -> Response<Operations.UnionNestedEnumsMultipartResponse>

    func unionOfArraysPost(request: [Shared.UnionOfArrays]) async throws -> Response<Operations.UnionOfArraysPostResponse>

    func weaklyTypedOneOfNullEnumPost(request: Shared.WeaklyTypedOneOfNullEnumObject) async throws -> Response<Operations.WeaklyTypedOneOfNullEnumPostResponse>

    func weaklyTypedOneOfPost(request: Shared.WeaklyTypedOneOfObject) async throws -> Response<Operations.WeaklyTypedOneOfPostResponse>
}

// MARK: - ErrorsAPI
public enum ErrorsServers {

/// Describes the available servers that can be used when making 'connectionErrorGet' requests.
///
/// Use this type when making calls to ``ErrorsAPI/connectionErrorGet(server:)`` to customize the server which is used.
    public enum ConnectionErrorGet: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://somebrokenapi.broken`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://somebrokenapi.broken"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://somebrokenapi.broken"
        ]

        static func `default`() throws -> Server {
            return try ErrorsServers.ConnectionErrorGet.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'errorUnionDiscriminatedPost' requests.
///
/// Use this type when making calls to ``ErrorsAPI/errorUnionDiscriminatedPost(request:server:)`` to customize the server which is used.
    public enum ErrorUnionDiscriminatedPost: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try ErrorsServers.ErrorUnionDiscriminatedPost.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'errorUnionPost' requests.
///
/// Use this type when making calls to ``ErrorsAPI/errorUnionPost(request:server:)`` to customize the server which is used.
    public enum ErrorUnionPost: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try ErrorsServers.ErrorUnionPost.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'statusGetXSpeakeasyErrors' requests.
///
/// Use this type when making calls to ``ErrorsAPI/statusGetXSpeakeasyErrors(request:server:)`` to customize the server which is used.
    public enum StatusGetXSpeakeasyErrors: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try ErrorsServers.StatusGetXSpeakeasyErrors.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }
}

/// Endpoints for testing error responses.
///
/// ## Topics
///
/// ### API calls
///
/// - ``connectionErrorGet(server:)``
/// - ``errorUnionDiscriminatedPost(request:server:)``
/// - ``errorUnionPost(request:server:)``
/// - ``statusGetError(request:)``
/// - ``statusGetXSpeakeasyErrors(request:server:)``
///
public protocol ErrorsAPI {
    func connectionErrorGet(server: ErrorsServers.ConnectionErrorGet?) async throws -> Response<Operations.ConnectionErrorGetResponse>

    func errorUnionDiscriminatedPost(request: Operations.ErrorUnionDiscriminatedPostRequestBody, server: ErrorsServers.ErrorUnionDiscriminatedPost?) async throws -> Response<Operations.ErrorUnionDiscriminatedPostResponse>

    func errorUnionPost(request: Operations.ErrorUnionPostRequestBody, server: ErrorsServers.ErrorUnionPost?) async throws -> Response<Operations.ErrorUnionPostResponse>

    func statusGetError(request: Operations.StatusGetErrorRequest) async throws -> Response<Operations.StatusGetErrorResponse>

    func statusGetXSpeakeasyErrors(request: Operations.StatusGetXSpeakeasyErrorsRequest, server: ErrorsServers.StatusGetXSpeakeasyErrors?) async throws -> Response<Operations.StatusGetXSpeakeasyErrorsResponse>
}

// MARK: - CustomClientAPI

/// Endpoints for testing custom HTTP clients
///
/// ## Topics
///
/// ### API calls
///
/// - ``customClientPost(request:)``
///
public protocol CustomClientAPI {
    func customClientPost(request: Operations.CustomClientPostRequest) async throws -> Response<Operations.CustomClientPostResponse>
}

// MARK: - ResponseBodiesAPI
public enum ResponseBodiesServers {

/// Describes the available servers that can be used when making 'responseBodyDecimalStr' requests.
///
/// Use this type when making calls to ``ResponseBodiesAPI/responseBodyDecimalStr(request:server:)`` to customize the server which is used.
    public enum ResponseBodyDecimalStr: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try ResponseBodiesServers.ResponseBodyDecimalStr.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'responseBodyOptionalGet' requests.
///
/// Use this type when making calls to ``ResponseBodiesAPI/responseBodyOptionalGet(server:)`` to customize the server which is used.
    public enum ResponseBodyOptionalGet: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try ResponseBodiesServers.ResponseBodyOptionalGet.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'responseBodyReadOnly' requests.
///
/// Use this type when making calls to ``ResponseBodiesAPI/responseBodyReadOnly(server:)`` to customize the server which is used.
    public enum ResponseBodyReadOnly: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try ResponseBodiesServers.ResponseBodyReadOnly.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }
}

/// Endpoints for testing response bodies.
///
/// ## Topics
///
/// ### API calls
///
/// - ``flattenedEnvelopePaginationResponse(request:)``
/// - ``flattenedEnvelopeResponse()``
/// - ``flattenedEnvelopeUnionResponse()``
/// - ``flattenedUnionResponse()``
/// - ``overriddenFieldNamesPost(request:)``
/// - ``responseBodyAdditionalPropertiesAnyPost(request:)``
/// - ``responseBodyAdditionalPropertiesComplexNumbersPost(request:)``
/// - ``responseBodyAdditionalPropertiesDatePost(request:)``
/// - ``responseBodyAdditionalPropertiesObjectPost(request:)``
/// - ``responseBodyAdditionalPropertiesPost(request:)``
/// - ``responseBodyBytesGet(request:)``
/// - ``responseBodyDecimalStr(request:server:)``
/// - ``responseBodyEmptyWithHeaders(request:)``
/// - ``responseBodyMissing2xxOr3xxGet()``
/// - ``responseBodyMultilineStringPost(request:)``
/// - ``responseBodyOptionalGet(server:)``
/// - ``responseBodyReadOnly(server:)``
/// - ``responseBodyStringGet()``
/// - ``responseBodyXmlGet()``
///
public protocol ResponseBodiesAPI {
    func flattenedEnvelopePaginationResponse(request: Operations.FlattenedEnvelopePaginationResponseRequest) async throws -> Response<Operations.FlattenedEnvelopePaginationResponseResponse>

    func flattenedEnvelopeResponse() async throws -> ResponseWithHeaders<Operations.FlattenedEnvelopeResponseResponse>

    func flattenedEnvelopeUnionResponse() async throws -> ResponseWithHeaders<Operations.FlattenedEnvelopeUnionResponseResponse>

    func flattenedUnionResponse() async throws -> Response<Operations.FlattenedUnionResponseResponse>

    func overriddenFieldNamesPost(request: Operations.OverriddenFieldNamesPostRequestBody) async throws -> Response<Operations.OverriddenFieldNamesPostResponse>

    func responseBodyAdditionalPropertiesAnyPost(request: [String: AnyValue]) async throws -> Response<Operations.ResponseBodyAdditionalPropertiesAnyPostResponse>

    func responseBodyAdditionalPropertiesComplexNumbersPost(request: [String: String]) async throws -> Response<Operations.ResponseBodyAdditionalPropertiesComplexNumbersPostResponse>

    func responseBodyAdditionalPropertiesDatePost(request: [String: Date]) async throws -> Response<Operations.ResponseBodyAdditionalPropertiesDatePostResponse>

    func responseBodyAdditionalPropertiesObjectPost(request: [String: Shared.SimpleObject]) async throws -> Response<Operations.ResponseBodyAdditionalPropertiesObjectPostResponse>

    func responseBodyAdditionalPropertiesPost(request: [String: String]) async throws -> Response<Operations.ResponseBodyAdditionalPropertiesPostResponse>

    func responseBodyBytesGet(request: Operations.ResponseBodyBytesGetRequest) async throws -> Response<Operations.ResponseBodyBytesGetResponse>

    func responseBodyDecimalStr(request: String, server: ResponseBodiesServers.ResponseBodyDecimalStr?) async throws -> Response<Operations.ResponseBodyDecimalStrResponse>

    func responseBodyEmptyWithHeaders(request: Operations.ResponseBodyEmptyWithHeadersRequest) async throws -> ResponseWithHeaders<Operations.ResponseBodyEmptyWithHeadersResponse>

    func responseBodyMissing2xxOr3xxGet() async throws -> Response<Operations.ResponseBodyMissing2xxOr3xxGetResponse>

    func responseBodyMultilineStringPost(request: Operations.ResponseBodyMultilineStringPostRequestBody) async throws -> Response<Operations.ResponseBodyMultilineStringPostResponse>

    func responseBodyOptionalGet(server: ResponseBodiesServers.ResponseBodyOptionalGet?) async throws -> Response<Operations.ResponseBodyOptionalGetResponse>

    func responseBodyReadOnly(server: ResponseBodiesServers.ResponseBodyReadOnly?) async throws -> Response<Operations.ResponseBodyReadOnlyResponse>

    func responseBodyStringGet() async throws -> Response<Operations.ResponseBodyStringGetResponse>

    func responseBodyXmlGet() async throws -> Response<Operations.ResponseBodyXmlGetResponse>
}

// MARK: - FlatteningAPI

/// Endpoints for testing flattening through request body and parameter combinations.
///
/// ## Topics
///
/// ### API calls
///
/// - ``componentBodyAndParamConflict(request:)``
/// - ``componentBodyAndParamNoConflict(request:)``
/// - ``conflictingParams(request:)``
/// - ``inlineBodyAndParamConflict(request:)``
/// - ``inlineBodyAndParamNoConflict(request:)``
///
public protocol FlatteningAPI {
    func componentBodyAndParamConflict(request: Operations.ComponentBodyAndParamConflictRequest) async throws -> Response<Operations.ComponentBodyAndParamConflictResponse>

    func componentBodyAndParamNoConflict(request: Operations.ComponentBodyAndParamNoConflictRequest) async throws -> Response<Operations.ComponentBodyAndParamNoConflictResponse>

    func conflictingParams(request: Operations.ConflictingParamsRequest) async throws -> Response<Operations.ConflictingParamsResponse>

    func inlineBodyAndParamConflict(request: Operations.InlineBodyAndParamConflictRequest) async throws -> Response<Operations.InlineBodyAndParamConflictResponse>

    func inlineBodyAndParamNoConflict(request: Operations.InlineBodyAndParamNoConflictRequest) async throws -> Response<Operations.InlineBodyAndParamNoConflictResponse>
}

// MARK: - GlobalsAPI

/// Endpoints for testing global parameters.
///
/// ## Topics
///
/// ### API calls
///
/// - ``globalPathParameterGet(request:)``
/// - ``globalsHeaderGet(request:)``
/// - ``globalsHiddenPost(request:)``
/// - ``globalsQueryParameterGet(request:)``
///
public protocol GlobalsAPI {
    func globalPathParameterGet(request: Operations.GlobalPathParameterGetRequest) async throws -> Response<Operations.GlobalPathParameterGetResponse>

    func globalsHeaderGet(request: Operations.GlobalsHeaderGetRequest) async throws -> Response<Operations.GlobalsHeaderGetResponse>

    func globalsHiddenPost(request: Operations.GlobalsHiddenPostRequest) async throws -> Response<Operations.GlobalsHiddenPostResponse>

    func globalsQueryParameterGet(request: Operations.GlobalsQueryParameterGetRequest) async throws -> Response<Operations.GlobalsQueryParameterGetResponse>
}

// MARK: - ParametersAPI

/// Endpoints for testing parameters.
///
/// ## Topics
///
/// ### API calls
///
/// - ``deepObjectQueryParamsMap(request:)``
/// - ``deepObjectQueryParamsObject(request:)``
/// - ``duplicateParam(request:)``
/// - ``formQueryParamsArray(request:)``
/// - ``formQueryParamsCamelObject(request:)``
/// - ``formQueryParamsMap(request:)``
/// - ``formQueryParamsObject(request:)``
/// - ``formQueryParamsPrimitive(request:)``
/// - ``formQueryParamsRefParamObject(request:)``
/// - ``headerParamsArray(request:)``
/// - ``headerParamsMap(request:)``
/// - ``headerParamsObject(request:)``
/// - ``headerParamsPrimitive(request:)``
/// - ``jsonQueryParamsObject(request:)``
/// - ``jsonQueryParamsObjectSmaller(request:)``
/// - ``mixedParametersCamelCase(request:)``
/// - ``mixedParametersPrimitives(request:)``
/// - ``mixedQueryParams(request:)``
/// - ``pathParameterJson(request:)``
/// - ``pipeDelimitedQueryParamsArray(request:)``
/// - ``simplePathParameterArrays(request:)``
/// - ``simplePathParameterMaps(request:)``
/// - ``simplePathParameterObjects(request:)``
/// - ``simplePathParameterPrimitives(request:)``
///
public protocol ParametersAPI {
    func deepObjectQueryParamsMap(request: Operations.DeepObjectQueryParamsMapRequest) async throws -> Response<Operations.DeepObjectQueryParamsMapResponse>

    func deepObjectQueryParamsObject(request: Operations.DeepObjectQueryParamsObjectRequest) async throws -> Response<Operations.DeepObjectQueryParamsObjectResponse>

    func duplicateParam(request: Operations.DuplicateParamRequest) async throws -> Response<Operations.DuplicateParamResponse>

    func formQueryParamsArray(request: Operations.FormQueryParamsArrayRequest) async throws -> Response<Operations.FormQueryParamsArrayResponse>

    func formQueryParamsCamelObject(request: Operations.FormQueryParamsCamelObjectRequest) async throws -> Response<Operations.FormQueryParamsCamelObjectResponse>

    func formQueryParamsMap(request: Operations.FormQueryParamsMapRequest) async throws -> Response<Operations.FormQueryParamsMapResponse>

    func formQueryParamsObject(request: Operations.FormQueryParamsObjectRequest) async throws -> Response<Operations.FormQueryParamsObjectResponse>

    func formQueryParamsPrimitive(request: Operations.FormQueryParamsPrimitiveRequest) async throws -> Response<Operations.FormQueryParamsPrimitiveResponse>

    func formQueryParamsRefParamObject(request: Operations.FormQueryParamsRefParamObjectRequest) async throws -> Response<Operations.FormQueryParamsRefParamObjectResponse>

    func headerParamsArray(request: Operations.HeaderParamsArrayRequest) async throws -> Response<Operations.HeaderParamsArrayResponse>

    func headerParamsMap(request: Operations.HeaderParamsMapRequest) async throws -> Response<Operations.HeaderParamsMapResponse>

    func headerParamsObject(request: Operations.HeaderParamsObjectRequest) async throws -> Response<Operations.HeaderParamsObjectResponse>

    func headerParamsPrimitive(request: Operations.HeaderParamsPrimitiveRequest) async throws -> Response<Operations.HeaderParamsPrimitiveResponse>

    func jsonQueryParamsObject(request: Operations.JsonQueryParamsObjectRequest) async throws -> Response<Operations.JsonQueryParamsObjectResponse>

    func jsonQueryParamsObjectSmaller(request: Operations.JsonQueryParamsObjectSmallerRequest) async throws -> Response<Operations.JsonQueryParamsObjectSmallerResponse>

    func mixedParametersCamelCase(request: Operations.MixedParametersCamelCaseRequest) async throws -> Response<Operations.MixedParametersCamelCaseResponse>

    func mixedParametersPrimitives(request: Operations.MixedParametersPrimitivesRequest) async throws -> Response<Operations.MixedParametersPrimitivesResponse>

    func mixedQueryParams(request: Operations.MixedQueryParamsRequest) async throws -> Response<Operations.MixedQueryParamsResponse>

    func pathParameterJson(request: Operations.PathParameterJsonRequest) async throws -> Response<Operations.PathParameterJsonResponse>

    func pipeDelimitedQueryParamsArray(request: Operations.PipeDelimitedQueryParamsArrayRequest) async throws -> Response<Operations.PipeDelimitedQueryParamsArrayResponse>

    func simplePathParameterArrays(request: Operations.SimplePathParameterArraysRequest) async throws -> Response<Operations.SimplePathParameterArraysResponse>

    func simplePathParameterMaps(request: Operations.SimplePathParameterMapsRequest) async throws -> Response<Operations.SimplePathParameterMapsResponse>

    func simplePathParameterObjects(request: Operations.SimplePathParameterObjectsRequest) async throws -> Response<Operations.SimplePathParameterObjectsResponse>

    func simplePathParameterPrimitives(request: Operations.SimplePathParameterPrimitivesRequest) async throws -> Response<Operations.SimplePathParameterPrimitivesResponse>
}

// MARK: - HooksAPI

/// Endpoints for testing hooks
///
/// ## Topics
///
/// ### API calls
///
/// - ``authorizationHeaderModification()``
/// - ``testHooks(request:)``
/// - ``testHooksAfterResponse()``
/// - ``testHooksBeforeCreateRequestPaths(request:)``
/// - ``testHooksError()``
///
public protocol HooksAPI {
    func authorizationHeaderModification() async throws -> Response<Operations.AuthorizationHeaderModificationResponse>

    func testHooks(request: Operations.TestHooksRequest) async throws -> Response<Operations.TestHooksResponse>

    func testHooksAfterResponse() async throws -> Response<Operations.TestHooksAfterResponseResponse>

    func testHooksBeforeCreateRequestPaths(request: Operations.TestHooksBeforeCreateRequestPathsRequest) async throws -> Response<Operations.TestHooksBeforeCreateRequestPathsResponse>

    func testHooksError() async throws -> Response<Operations.TestHooksErrorResponse>
}

// MARK: - NestFirstAPI
/// ## Topics
///
/// ### API calls
///
/// - ``nestFirstGet()``
///
public protocol NestFirstAPI {
    func nestFirstGet() async throws -> Response<Operations.NestFirstGetResponse>
}

// MARK: - NestedAPI
/// ## Topics
///
/// ### API calls
///
/// - ``nestedGet()``
///
public protocol NestedAPI {
    func nestedGet() async throws -> Response<Operations.NestedGetResponse>
}

// MARK: - NestedFirstAPI
/// ## Topics
///
/// ### API calls
///
/// - ``nestedFirstGet()``
///
public protocol NestedFirstAPI {
    func nestedFirstGet() async throws -> Response<Operations.NestedFirstGetResponse>
}

// MARK: - NestedSecondAPI
/// ## Topics
///
/// ### API calls
///
/// - ``nestedSecondGet()``
///
public protocol NestedSecondAPI {
    func nestedSecondGet() async throws -> Response<Operations.NestedSecondGetResponse>
}

// MARK: - AuthAPI

/// Endpoints for testing authentication.
///
/// ## Topics
///
/// ### API calls
///
/// - ``apiKeyAuth()``
/// - ``apiKeyAuthGlobal()``
/// - ``basicAuth(request:security:)``
/// - ``bearerAuth(security:)``
/// - ``globalBearerAuth()``
/// - ``noAuth()``
/// - ``oauth2Auth()``
/// - ``oauth2Override()``
/// - ``openIdConnectAuth(security:)``
///
public protocol AuthAPI {
    func apiKeyAuth() async throws -> Response<Operations.ApiKeyAuthResponse>

    func apiKeyAuthGlobal() async throws -> Response<Operations.ApiKeyAuthGlobalResponse>

    func basicAuth(request: Operations.BasicAuthRequest, security: Operations.BasicAuthSecurity) async throws -> Response<Operations.BasicAuthResponse>

    func bearerAuth(security: Operations.BearerAuthSecurity) async throws -> Response<Operations.BearerAuthResponse>

    func globalBearerAuth() async throws -> Response<Operations.GlobalBearerAuthResponse>

    func noAuth() async throws -> Response<Operations.NoAuthResponse>

    func oauth2Auth() async throws -> Response<Operations.Oauth2AuthResponse>

    func oauth2Override() async throws -> Response<Operations.Oauth2OverrideResponse>

    func openIdConnectAuth(security: Operations.OpenIdConnectAuthSecurity) async throws -> Response<Operations.OpenIdConnectAuthResponse>
}

// MARK: - OpenEnumsAPI

/// Endpoints for testing open/closed enums
///
/// ## Topics
///
/// ### API calls
///
/// - ``openEnumsPostUnrecognized(request:)``
///
public protocol OpenEnumsAPI {
    func openEnumsPostUnrecognized(request: Shared.ThemeRequestOpaque) async throws -> Response<Operations.OpenEnumsPostUnrecognizedResponse>
}

// MARK: - RequestBodiesAPI
public enum RequestBodiesServers {

/// Describes the available servers that can be used when making 'requestBodyPostApplicationJsonArray' requests.
///
/// Use this type when making calls to ``RequestBodiesAPI/requestBodyPostApplicationJsonArray(request:server:)`` to customize the server which is used.
    public enum RequestBodyPostApplicationJsonArray: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try RequestBodiesServers.RequestBodyPostApplicationJsonArray.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'requestBodyPostApplicationJsonArrayCamelCase' requests.
///
/// Use this type when making calls to ``RequestBodiesAPI/requestBodyPostApplicationJsonArrayCamelCase(request:server:)`` to customize the server which is used.
    public enum RequestBodyPostApplicationJsonArrayCamelCase: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try RequestBodiesServers.RequestBodyPostApplicationJsonArrayCamelCase.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'requestBodyPostApplicationJsonArrayOfArray' requests.
///
/// Use this type when making calls to ``RequestBodiesAPI/requestBodyPostApplicationJsonArrayOfArray(request:server:)`` to customize the server which is used.
    public enum RequestBodyPostApplicationJsonArrayOfArray: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try RequestBodiesServers.RequestBodyPostApplicationJsonArrayOfArray.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'requestBodyPostApplicationJsonArrayOfArrayCamelCase' requests.
///
/// Use this type when making calls to ``RequestBodiesAPI/requestBodyPostApplicationJsonArrayOfArrayCamelCase(request:server:)`` to customize the server which is used.
    public enum RequestBodyPostApplicationJsonArrayOfArrayCamelCase: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try RequestBodiesServers.RequestBodyPostApplicationJsonArrayOfArrayCamelCase.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'requestBodyPostApplicationJsonArrayOfArrayOfPrimitive' requests.
///
/// Use this type when making calls to ``RequestBodiesAPI/requestBodyPostApplicationJsonArrayOfArrayOfPrimitive(request:server:)`` to customize the server which is used.
    public enum RequestBodyPostApplicationJsonArrayOfArrayOfPrimitive: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try RequestBodiesServers.RequestBodyPostApplicationJsonArrayOfArrayOfPrimitive.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'requestBodyPostApplicationJsonArrayOfMap' requests.
///
/// Use this type when making calls to ``RequestBodiesAPI/requestBodyPostApplicationJsonArrayOfMap(request:server:)`` to customize the server which is used.
    public enum RequestBodyPostApplicationJsonArrayOfMap: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try RequestBodiesServers.RequestBodyPostApplicationJsonArrayOfMap.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'requestBodyPostApplicationJsonArrayOfMapCamelCase' requests.
///
/// Use this type when making calls to ``RequestBodiesAPI/requestBodyPostApplicationJsonArrayOfMapCamelCase(request:server:)`` to customize the server which is used.
    public enum RequestBodyPostApplicationJsonArrayOfMapCamelCase: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try RequestBodiesServers.RequestBodyPostApplicationJsonArrayOfMapCamelCase.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'requestBodyPostApplicationJsonArrayOfPrimitive' requests.
///
/// Use this type when making calls to ``RequestBodiesAPI/requestBodyPostApplicationJsonArrayOfPrimitive(request:server:)`` to customize the server which is used.
    public enum RequestBodyPostApplicationJsonArrayOfPrimitive: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try RequestBodiesServers.RequestBodyPostApplicationJsonArrayOfPrimitive.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'requestBodyPostApplicationJsonArrayOfUnions' requests.
///
/// Use this type when making calls to ``RequestBodiesAPI/requestBodyPostApplicationJsonArrayOfUnions(request:server:)`` to customize the server which is used.
    public enum RequestBodyPostApplicationJsonArrayOfUnions: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try RequestBodiesServers.RequestBodyPostApplicationJsonArrayOfUnions.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'requestBodyPostApplicationJsonMap' requests.
///
/// Use this type when making calls to ``RequestBodiesAPI/requestBodyPostApplicationJsonMap(request:server:)`` to customize the server which is used.
    public enum RequestBodyPostApplicationJsonMap: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try RequestBodiesServers.RequestBodyPostApplicationJsonMap.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'requestBodyPostApplicationJsonMapCamelCase' requests.
///
/// Use this type when making calls to ``RequestBodiesAPI/requestBodyPostApplicationJsonMapCamelCase(request:server:)`` to customize the server which is used.
    public enum RequestBodyPostApplicationJsonMapCamelCase: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try RequestBodiesServers.RequestBodyPostApplicationJsonMapCamelCase.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'requestBodyPostApplicationJsonMapOfArray' requests.
///
/// Use this type when making calls to ``RequestBodiesAPI/requestBodyPostApplicationJsonMapOfArray(request:server:)`` to customize the server which is used.
    public enum RequestBodyPostApplicationJsonMapOfArray: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try RequestBodiesServers.RequestBodyPostApplicationJsonMapOfArray.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'requestBodyPostApplicationJsonMapOfArrayCamelCase' requests.
///
/// Use this type when making calls to ``RequestBodiesAPI/requestBodyPostApplicationJsonMapOfArrayCamelCase(request:server:)`` to customize the server which is used.
    public enum RequestBodyPostApplicationJsonMapOfArrayCamelCase: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try RequestBodiesServers.RequestBodyPostApplicationJsonMapOfArrayCamelCase.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'requestBodyPostApplicationJsonMapOfMap' requests.
///
/// Use this type when making calls to ``RequestBodiesAPI/requestBodyPostApplicationJsonMapOfMap(request:server:)`` to customize the server which is used.
    public enum RequestBodyPostApplicationJsonMapOfMap: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try RequestBodiesServers.RequestBodyPostApplicationJsonMapOfMap.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'requestBodyPostApplicationJsonMapOfMapCamelCase' requests.
///
/// Use this type when making calls to ``RequestBodiesAPI/requestBodyPostApplicationJsonMapOfMapCamelCase(request:server:)`` to customize the server which is used.
    public enum RequestBodyPostApplicationJsonMapOfMapCamelCase: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try RequestBodiesServers.RequestBodyPostApplicationJsonMapOfMapCamelCase.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'requestBodyPostApplicationJsonMapOfMapOfPrimitive' requests.
///
/// Use this type when making calls to ``RequestBodiesAPI/requestBodyPostApplicationJsonMapOfMapOfPrimitive(request:server:)`` to customize the server which is used.
    public enum RequestBodyPostApplicationJsonMapOfMapOfPrimitive: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try RequestBodiesServers.RequestBodyPostApplicationJsonMapOfMapOfPrimitive.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'requestBodyPostApplicationJsonMapOfPrimitive' requests.
///
/// Use this type when making calls to ``RequestBodiesAPI/requestBodyPostApplicationJsonMapOfPrimitive(request:server:)`` to customize the server which is used.
    public enum RequestBodyPostApplicationJsonMapOfPrimitive: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try RequestBodiesServers.RequestBodyPostApplicationJsonMapOfPrimitive.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'requestBodyReadAndWrite' requests.
///
/// Use this type when making calls to ``RequestBodiesAPI/requestBodyReadAndWrite(request:server:)`` to customize the server which is used.
    public enum RequestBodyReadAndWrite: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try RequestBodiesServers.RequestBodyReadAndWrite.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'requestBodyReadOnlyInput' requests.
///
/// Use this type when making calls to ``RequestBodiesAPI/requestBodyReadOnlyInput(request:server:)`` to customize the server which is used.
    public enum RequestBodyReadOnlyInput: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try RequestBodiesServers.RequestBodyReadOnlyInput.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'requestBodyReadOnlyUnion' requests.
///
/// Use this type when making calls to ``RequestBodiesAPI/requestBodyReadOnlyUnion(request:server:)`` to customize the server which is used.
    public enum RequestBodyReadOnlyUnion: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try RequestBodiesServers.RequestBodyReadOnlyUnion.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'requestBodyReadWriteOnlyUnion' requests.
///
/// Use this type when making calls to ``RequestBodiesAPI/requestBodyReadWriteOnlyUnion(request:server:)`` to customize the server which is used.
    public enum RequestBodyReadWriteOnlyUnion: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try RequestBodiesServers.RequestBodyReadWriteOnlyUnion.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'requestBodyWriteOnly' requests.
///
/// Use this type when making calls to ``RequestBodiesAPI/requestBodyWriteOnly(request:server:)`` to customize the server which is used.
    public enum RequestBodyWriteOnly: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try RequestBodiesServers.RequestBodyWriteOnly.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'requestBodyWriteOnlyOutput' requests.
///
/// Use this type when making calls to ``RequestBodiesAPI/requestBodyWriteOnlyOutput(request:server:)`` to customize the server which is used.
    public enum RequestBodyWriteOnlyOutput: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try RequestBodiesServers.RequestBodyWriteOnlyOutput.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'requestBodyWriteOnlyUnion' requests.
///
/// Use this type when making calls to ``RequestBodiesAPI/requestBodyWriteOnlyUnion(request:server:)`` to customize the server which is used.
    public enum RequestBodyWriteOnlyUnion: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try RequestBodiesServers.RequestBodyWriteOnlyUnion.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }
}

/// Endpoints for testing request bodies.
///
/// ## Topics
///
/// ### API calls
///
/// - ``nullEnumPost(request:)``
/// - ``nullableObjectPost(request:)``
/// - ``nullableOptionalFieldsPost(request:)``
/// - ``nullableRequiredEmptyObjectPost(request:)``
/// - ``nullableRequiredPropertyPost(request:)``
/// - ``nullableRequiredSharedObjectPost(request:)``
/// - ``requestBodyDeprecatedRequestBodyRefPost(request:)``
/// - ``requestBodyPostApplicationJsonArray(request:server:)``
/// - ``requestBodyPostApplicationJsonArrayCamelCase(request:server:)``
/// - ``requestBodyPostApplicationJsonArrayObj(request:)``
/// - ``requestBodyPostApplicationJsonArrayObjCamelCase(request:)``
/// - ``requestBodyPostApplicationJsonArrayOfArray(request:server:)``
/// - ``requestBodyPostApplicationJsonArrayOfArrayCamelCase(request:server:)``
/// - ``requestBodyPostApplicationJsonArrayOfArrayOfPrimitive(request:server:)``
/// - ``requestBodyPostApplicationJsonArrayOfMap(request:server:)``
/// - ``requestBodyPostApplicationJsonArrayOfMapCamelCase(request:server:)``
/// - ``requestBodyPostApplicationJsonArrayOfPrimitive(request:server:)``
/// - ``requestBodyPostApplicationJsonArrayOfUnions(request:server:)``
/// - ``requestBodyPostApplicationJsonDeep(request:)``
/// - ``requestBodyPostApplicationJsonDeepCamelCase(request:)``
/// - ``requestBodyPostApplicationJsonMap(request:server:)``
/// - ``requestBodyPostApplicationJsonMapCamelCase(request:server:)``
/// - ``requestBodyPostApplicationJsonMapObj(request:)``
/// - ``requestBodyPostApplicationJsonMapObjCamelCase(request:)``
/// - ``requestBodyPostApplicationJsonMapOfArray(request:server:)``
/// - ``requestBodyPostApplicationJsonMapOfArrayCamelCase(request:server:)``
/// - ``requestBodyPostApplicationJsonMapOfMap(request:server:)``
/// - ``requestBodyPostApplicationJsonMapOfMapCamelCase(request:server:)``
/// - ``requestBodyPostApplicationJsonMapOfMapOfPrimitive(request:server:)``
/// - ``requestBodyPostApplicationJsonMapOfPrimitive(request:server:)``
/// - ``requestBodyPostApplicationJsonMultipleJsonFiltered(request:)``
/// - ``requestBodyPostApplicationJsonSimple(request:)``
/// - ``requestBodyPostApplicationJsonSimpleCamelCase(request:)``
/// - ``requestBodyPostComplexNumberTypes(request:)``
/// - ``requestBodyPostDefaultsAndConsts(request:)``
/// - ``requestBodyPostEmptyBodyRetainedWithAllOptionalFields(request:)``
/// - ``requestBodyPostEmptyObject(request:)``
/// - ``requestBodyPostFormDeep(request:)``
/// - ``requestBodyPostFormMapPrimitive(request:)``
/// - ``requestBodyPostFormSimple(request:)``
/// - ``requestBodyPostJsonDataTypesArrayBigInt(request:)``
/// - ``requestBodyPostJsonDataTypesArrayDate(request:)``
/// - ``requestBodyPostJsonDataTypesArrayDecimalStr(request:)``
/// - ``requestBodyPostJsonDataTypesBigInt(request:)``
/// - ``requestBodyPostJsonDataTypesBigIntStr(request:)``
/// - ``requestBodyPostJsonDataTypesBoolean(request:)``
/// - ``requestBodyPostJsonDataTypesComplexNumberArrays(request:)``
/// - ``requestBodyPostJsonDataTypesComplexNumberMaps(request:)``
/// - ``requestBodyPostJsonDataTypesDate(request:)``
/// - ``requestBodyPostJsonDataTypesDateTime(request:)``
/// - ``requestBodyPostJsonDataTypesDecimal(request:)``
/// - ``requestBodyPostJsonDataTypesDecimalStr(request:)``
/// - ``requestBodyPostJsonDataTypesFloat32(request:)``
/// - ``requestBodyPostJsonDataTypesInt32(request:)``
/// - ``requestBodyPostJsonDataTypesInteger(request:)``
/// - ``requestBodyPostJsonDataTypesMapBigIntStr(request:)``
/// - ``requestBodyPostJsonDataTypesMapDateTime(request:)``
/// - ``requestBodyPostJsonDataTypesMapDecimal(request:)``
/// - ``requestBodyPostJsonDataTypesNumber(request:)``
/// - ``requestBodyPostJsonDataTypesString(request:)``
/// - ``requestBodyPostMultipleContentTypesComponentFiltered(request:)``
/// - ``requestBodyPostMultipleContentTypesComponentFilteredDefaultTest(request:)``
/// - ``requestBodyPostMultipleContentTypesInlineFiltered(request:)``
/// - ``requestBodyPostMultipleContentTypesSplitParamForm(request:)``
/// - ``requestBodyPostMultipleContentTypesSplitParamJson(request:)``
/// - ``requestBodyPostMultipleContentTypesSplitParamMultipart(request:)``
/// - ``requestBodyPostMultipleContentTypesSplitForm(request:)``
/// - ``requestBodyPostMultipleContentTypesSplitJson(request:)``
/// - ``requestBodyPostMultipleContentTypesSplitMultipart(request:)``
/// - ``requestBodyPostNotNullableNotRequiredStringBody(request:)``
/// - ``requestBodyPostNullArray(request:)``
/// - ``requestBodyPostNullDictionary(request:)``
/// - ``requestBodyPostNullableNotRequiredStringBody(request:)``
/// - ``requestBodyPostNullableRequiredStringBody(request:)``
/// - ``requestBodyPutBytes(request:)``
/// - ``requestBodyPutBytesWithParams(request:)``
/// - ``requestBodyPutMultipartDeep(request:)``
/// - ``requestBodyPutMultipartDifferentFileName(request:)``
/// - ``requestBodyPutMultipartFile(request:)``
/// - ``requestBodyPutMultipartOptionalRequestBody(request:)``
/// - ``requestBodyPutMultipartSimple(request:)``
/// - ``requestBodyPutString(request:)``
/// - ``requestBodyPutStringWithParams(request:)``
/// - ``requestBodyReadAndWrite(request:server:)``
/// - ``requestBodyReadOnlyInput(request:server:)``
/// - ``requestBodyReadOnlyUnion(request:server:)``
/// - ``requestBodyReadWriteOnlyUnion(request:server:)``
/// - ``requestBodyWriteOnly(request:server:)``
/// - ``requestBodyWriteOnlyOutput(request:server:)``
/// - ``requestBodyWriteOnlyUnion(request:server:)``
///
public protocol RequestBodiesAPI {
    func nullEnumPost(request: Shared.ObjectWithNullEnums) async throws -> Response<Operations.NullEnumPostResponse>

    func nullableObjectPost(request: Shared.NullableObject) async throws -> Response<Operations.NullableObjectPostResponse>

    func nullableOptionalFieldsPost(request: Operations.NullableOptionalFieldsPostRequestBody) async throws -> Response<Operations.NullableOptionalFieldsPostResponse>

    func nullableRequiredEmptyObjectPost(request: Operations.NullableRequiredEmptyObjectPostRequestBody) async throws -> Response<Operations.NullableRequiredEmptyObjectPostResponse>

    func nullableRequiredPropertyPost(request: Operations.NullableRequiredPropertyPostRequestBody) async throws -> Response<Operations.NullableRequiredPropertyPostResponse>

    func nullableRequiredSharedObjectPost(request: Operations.NullableRequiredSharedObjectPostRequestBody) async throws -> Response<Operations.NullableRequiredSharedObjectPostResponse>

    @available(*, deprecated, message: "This will be removed in a future release, please migrate away from it as soon as possible")
    func requestBodyDeprecatedRequestBodyRefPost(request: Shared.DeprecatedObjectWithExample) async throws -> Response<Operations.RequestBodyDeprecatedRequestBodyRefPostResponse>

    func requestBodyPostApplicationJsonArray(request: [Shared.SimpleObject], server: RequestBodiesServers.RequestBodyPostApplicationJsonArray?) async throws -> Response<Operations.RequestBodyPostApplicationJsonArrayResponse>

    func requestBodyPostApplicationJsonArrayCamelCase(request: [Shared.SimpleObjectCamelCase], server: RequestBodiesServers.RequestBodyPostApplicationJsonArrayCamelCase?) async throws -> Response<Operations.RequestBodyPostApplicationJsonArrayCamelCaseResponse>

    func requestBodyPostApplicationJsonArrayObj(request: [Shared.SimpleObject]) async throws -> Response<Operations.RequestBodyPostApplicationJsonArrayObjResponse>

    func requestBodyPostApplicationJsonArrayObjCamelCase(request: [Shared.SimpleObjectCamelCase]) async throws -> Response<Operations.RequestBodyPostApplicationJsonArrayObjCamelCaseResponse>

    func requestBodyPostApplicationJsonArrayOfArray(request: [[Shared.SimpleObject]], server: RequestBodiesServers.RequestBodyPostApplicationJsonArrayOfArray?) async throws -> Response<Operations.RequestBodyPostApplicationJsonArrayOfArrayResponse>

    func requestBodyPostApplicationJsonArrayOfArrayCamelCase(request: [[Shared.SimpleObjectCamelCase]], server: RequestBodiesServers.RequestBodyPostApplicationJsonArrayOfArrayCamelCase?) async throws -> Response<Operations.RequestBodyPostApplicationJsonArrayOfArrayCamelCaseResponse>

    func requestBodyPostApplicationJsonArrayOfArrayOfPrimitive(request: [[String]], server: RequestBodiesServers.RequestBodyPostApplicationJsonArrayOfArrayOfPrimitive?) async throws -> Response<Operations.RequestBodyPostApplicationJsonArrayOfArrayOfPrimitiveResponse>

    func requestBodyPostApplicationJsonArrayOfMap(request: [[String: Shared.SimpleObject]], server: RequestBodiesServers.RequestBodyPostApplicationJsonArrayOfMap?) async throws -> Response<Operations.RequestBodyPostApplicationJsonArrayOfMapResponse>

    func requestBodyPostApplicationJsonArrayOfMapCamelCase(request: [[String: Shared.SimpleObjectCamelCase]], server: RequestBodiesServers.RequestBodyPostApplicationJsonArrayOfMapCamelCase?) async throws -> Response<Operations.RequestBodyPostApplicationJsonArrayOfMapCamelCaseResponse>

    func requestBodyPostApplicationJsonArrayOfPrimitive(request: [String], server: RequestBodiesServers.RequestBodyPostApplicationJsonArrayOfPrimitive?) async throws -> Response<Operations.RequestBodyPostApplicationJsonArrayOfPrimitiveResponse>

    func requestBodyPostApplicationJsonArrayOfUnions(request: Operations.RequestBodyPostApplicationJsonArrayOfUnionsRequestBody, server: RequestBodiesServers.RequestBodyPostApplicationJsonArrayOfUnions?) async throws -> Response<Operations.RequestBodyPostApplicationJsonArrayOfUnionsResponse>

    func requestBodyPostApplicationJsonDeep(request: Shared.DeepObject) async throws -> Response<Operations.RequestBodyPostApplicationJsonDeepResponse>

    func requestBodyPostApplicationJsonDeepCamelCase(request: Shared.DeepObjectCamelCase) async throws -> Response<Operations.RequestBodyPostApplicationJsonDeepCamelCaseResponse>

    func requestBodyPostApplicationJsonMap(request: [String: Shared.SimpleObject], server: RequestBodiesServers.RequestBodyPostApplicationJsonMap?) async throws -> Response<Operations.RequestBodyPostApplicationJsonMapResponse>

    func requestBodyPostApplicationJsonMapCamelCase(request: [String: Shared.SimpleObjectCamelCase], server: RequestBodiesServers.RequestBodyPostApplicationJsonMapCamelCase?) async throws -> Response<Operations.RequestBodyPostApplicationJsonMapCamelCaseResponse>

    func requestBodyPostApplicationJsonMapObj(request: [String: Shared.SimpleObject]) async throws -> Response<Operations.RequestBodyPostApplicationJsonMapObjResponse>

    func requestBodyPostApplicationJsonMapObjCamelCase(request: [String: Shared.SimpleObjectCamelCase]) async throws -> Response<Operations.RequestBodyPostApplicationJsonMapObjCamelCaseResponse>

    func requestBodyPostApplicationJsonMapOfArray(request: [String: [Shared.SimpleObject]], server: RequestBodiesServers.RequestBodyPostApplicationJsonMapOfArray?) async throws -> Response<Operations.RequestBodyPostApplicationJsonMapOfArrayResponse>

    func requestBodyPostApplicationJsonMapOfArrayCamelCase(request: [String: [Shared.SimpleObjectCamelCase]], server: RequestBodiesServers.RequestBodyPostApplicationJsonMapOfArrayCamelCase?) async throws -> Response<Operations.RequestBodyPostApplicationJsonMapOfArrayCamelCaseResponse>

    func requestBodyPostApplicationJsonMapOfMap(request: [String: [String: Shared.SimpleObject]], server: RequestBodiesServers.RequestBodyPostApplicationJsonMapOfMap?) async throws -> Response<Operations.RequestBodyPostApplicationJsonMapOfMapResponse>

    func requestBodyPostApplicationJsonMapOfMapCamelCase(request: [String: [String: Shared.SimpleObjectCamelCase]], server: RequestBodiesServers.RequestBodyPostApplicationJsonMapOfMapCamelCase?) async throws -> Response<Operations.RequestBodyPostApplicationJsonMapOfMapCamelCaseResponse>

    func requestBodyPostApplicationJsonMapOfMapOfPrimitive(request: [String: [String: String]], server: RequestBodiesServers.RequestBodyPostApplicationJsonMapOfMapOfPrimitive?) async throws -> Response<Operations.RequestBodyPostApplicationJsonMapOfMapOfPrimitiveResponse>

    func requestBodyPostApplicationJsonMapOfPrimitive(request: [String: String], server: RequestBodiesServers.RequestBodyPostApplicationJsonMapOfPrimitive?) async throws -> Response<Operations.RequestBodyPostApplicationJsonMapOfPrimitiveResponse>

    func requestBodyPostApplicationJsonMultipleJsonFiltered(request: Shared.SimpleObject) async throws -> Response<Operations.RequestBodyPostApplicationJsonMultipleJsonFilteredResponse>

    func requestBodyPostApplicationJsonSimple(request: Shared.SimpleObject) async throws -> Response<Operations.RequestBodyPostApplicationJsonSimpleResponse>

    func requestBodyPostApplicationJsonSimpleCamelCase(request: Shared.SimpleObjectCamelCase) async throws -> Response<Operations.RequestBodyPostApplicationJsonSimpleCamelCaseResponse>

    func requestBodyPostComplexNumberTypes(request: Operations.RequestBodyPostComplexNumberTypesRequest) async throws -> Response<Operations.RequestBodyPostComplexNumberTypesResponse>

    func requestBodyPostDefaultsAndConsts(request: Shared.DefaultsAndConsts) async throws -> Response<Operations.RequestBodyPostDefaultsAndConstsResponse>

    func requestBodyPostEmptyBodyRetainedWithAllOptionalFields(request: Operations.RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody) async throws -> Response<Operations.RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsResponse>

    func requestBodyPostEmptyObject(request: Operations.RequestBodyPostEmptyObjectRequestBody) async throws -> Response<Operations.RequestBodyPostEmptyObjectResponse>

    func requestBodyPostFormDeep(request: Shared.DeepObject) async throws -> Response<Operations.RequestBodyPostFormDeepResponse>

    func requestBodyPostFormMapPrimitive(request: [String: String]) async throws -> Response<Operations.RequestBodyPostFormMapPrimitiveResponse>

    func requestBodyPostFormSimple(request: Shared.SimpleObject) async throws -> Response<Operations.RequestBodyPostFormSimpleResponse>

    func requestBodyPostJsonDataTypesArrayBigInt(request: [Int]) async throws -> Response<Operations.RequestBodyPostJsonDataTypesArrayBigIntResponse>

    func requestBodyPostJsonDataTypesArrayDate(request: [Date]) async throws -> Response<Operations.RequestBodyPostJsonDataTypesArrayDateResponse>

    func requestBodyPostJsonDataTypesArrayDecimalStr(request: [String]) async throws -> Response<Operations.RequestBodyPostJsonDataTypesArrayDecimalStrResponse>

    func requestBodyPostJsonDataTypesBigInt(request: Int) async throws -> Response<Operations.RequestBodyPostJsonDataTypesBigIntResponse>

    func requestBodyPostJsonDataTypesBigIntStr(request: String) async throws -> Response<Operations.RequestBodyPostJsonDataTypesBigIntStrResponse>

    func requestBodyPostJsonDataTypesBoolean(request: Bool) async throws -> Response<Operations.RequestBodyPostJsonDataTypesBooleanResponse>

    func requestBodyPostJsonDataTypesComplexNumberArrays(request: Shared.ComplexNumberArrays) async throws -> Response<Operations.RequestBodyPostJsonDataTypesComplexNumberArraysResponse>

    func requestBodyPostJsonDataTypesComplexNumberMaps(request: Shared.ComplexNumberMaps) async throws -> Response<Operations.RequestBodyPostJsonDataTypesComplexNumberMapsResponse>

    func requestBodyPostJsonDataTypesDate(request: Date) async throws -> Response<Operations.RequestBodyPostJsonDataTypesDateResponse>

    func requestBodyPostJsonDataTypesDateTime(request: Date) async throws -> Response<Operations.RequestBodyPostJsonDataTypesDateTimeResponse>

    func requestBodyPostJsonDataTypesDecimal(request: Double) async throws -> Response<Operations.RequestBodyPostJsonDataTypesDecimalResponse>

    func requestBodyPostJsonDataTypesDecimalStr(request: String) async throws -> Response<Operations.RequestBodyPostJsonDataTypesDecimalStrResponse>

    func requestBodyPostJsonDataTypesFloat32(request: Double) async throws -> Response<Operations.RequestBodyPostJsonDataTypesFloat32Response>

    func requestBodyPostJsonDataTypesInt32(request: Int) async throws -> Response<Operations.RequestBodyPostJsonDataTypesInt32Response>

    func requestBodyPostJsonDataTypesInteger(request: Int) async throws -> Response<Operations.RequestBodyPostJsonDataTypesIntegerResponse>

    func requestBodyPostJsonDataTypesMapBigIntStr(request: [String: String]) async throws -> Response<Operations.RequestBodyPostJsonDataTypesMapBigIntStrResponse>

    func requestBodyPostJsonDataTypesMapDateTime(request: [String: Date]) async throws -> Response<Operations.RequestBodyPostJsonDataTypesMapDateTimeResponse>

    func requestBodyPostJsonDataTypesMapDecimal(request: [String: Double]) async throws -> Response<Operations.RequestBodyPostJsonDataTypesMapDecimalResponse>

    func requestBodyPostJsonDataTypesNumber(request: Double) async throws -> Response<Operations.RequestBodyPostJsonDataTypesNumberResponse>

    func requestBodyPostJsonDataTypesString(request: String) async throws -> Response<Operations.RequestBodyPostJsonDataTypesStringResponse>

    func requestBodyPostMultipleContentTypesComponentFiltered(request: Shared.SimpleObject) async throws -> Response<Operations.RequestBodyPostMultipleContentTypesComponentFilteredResponse>

    func requestBodyPostMultipleContentTypesComponentFilteredDefaultTest(request: Shared.SimpleObject) async throws -> Response<Operations.RequestBodyPostMultipleContentTypesComponentFilteredDefaultTestResponse>

    func requestBodyPostMultipleContentTypesInlineFiltered(request: Operations.RequestBodyPostMultipleContentTypesInlineFilteredRequestBody) async throws -> Response<Operations.RequestBodyPostMultipleContentTypesInlineFilteredResponse>

    func requestBodyPostMultipleContentTypesSplitParamForm(request: Operations.RequestBodyPostMultipleContentTypesSplitParamFormRequest) async throws -> Response<Operations.RequestBodyPostMultipleContentTypesSplitParamFormResponse>

    func requestBodyPostMultipleContentTypesSplitParamJson(request: Operations.RequestBodyPostMultipleContentTypesSplitParamJsonRequest) async throws -> Response<Operations.RequestBodyPostMultipleContentTypesSplitParamJsonResponse>

    func requestBodyPostMultipleContentTypesSplitParamMultipart(request: Operations.RequestBodyPostMultipleContentTypesSplitParamMultipartRequest) async throws -> Response<Operations.RequestBodyPostMultipleContentTypesSplitParamMultipartResponse>

    func requestBodyPostMultipleContentTypesSplitForm(request: Operations.RequestBodyPostMultipleContentTypesSplitFormRequestBody) async throws -> Response<Operations.RequestBodyPostMultipleContentTypesSplitFormResponse>

    func requestBodyPostMultipleContentTypesSplitJson(request: Operations.RequestBodyPostMultipleContentTypesSplitJsonRequestBody) async throws -> Response<Operations.RequestBodyPostMultipleContentTypesSplitJsonResponse>

    func requestBodyPostMultipleContentTypesSplitMultipart(request: Operations.RequestBodyPostMultipleContentTypesSplitMultipartRequestBody) async throws -> Response<Operations.RequestBodyPostMultipleContentTypesSplitMultipartResponse>

    func requestBodyPostNotNullableNotRequiredStringBody(request: String) async throws -> Response<Operations.RequestBodyPostNotNullableNotRequiredStringBodyResponse>

    func requestBodyPostNullArray(request: [String]) async throws -> Response<Operations.RequestBodyPostNullArrayResponse>

    func requestBodyPostNullDictionary(request: [String: String]) async throws -> Response<Operations.RequestBodyPostNullDictionaryResponse>

    func requestBodyPostNullableNotRequiredStringBody(request: String) async throws -> Response<Operations.RequestBodyPostNullableNotRequiredStringBodyResponse>

    func requestBodyPostNullableRequiredStringBody(request: String) async throws -> Response<Operations.RequestBodyPostNullableRequiredStringBodyResponse>

    func requestBodyPutBytes(request: Data) async throws -> Response<Operations.RequestBodyPutBytesResponse>

    func requestBodyPutBytesWithParams(request: Operations.RequestBodyPutBytesWithParamsRequest) async throws -> Response<Operations.RequestBodyPutBytesWithParamsResponse>

    func requestBodyPutMultipartDeep(request: Shared.DeepObject) async throws -> Response<Operations.RequestBodyPutMultipartDeepResponse>

    func requestBodyPutMultipartDifferentFileName(request: Operations.RequestBodyPutMultipartDifferentFileNameRequestBody) async throws -> Response<Operations.RequestBodyPutMultipartDifferentFileNameResponse>

    func requestBodyPutMultipartFile(request: Operations.RequestBodyPutMultipartFileRequestBody) async throws -> Response<Operations.RequestBodyPutMultipartFileResponse>

    func requestBodyPutMultipartOptionalRequestBody(request: Operations.RequestBodyPutMultipartOptionalRequestBodyRequestBody) async throws -> Response<Operations.RequestBodyPutMultipartOptionalRequestBodyResponse>

    func requestBodyPutMultipartSimple(request: Shared.SimpleObject) async throws -> Response<Operations.RequestBodyPutMultipartSimpleResponse>

    func requestBodyPutString(request: String) async throws -> Response<Operations.RequestBodyPutStringResponse>

    func requestBodyPutStringWithParams(request: Operations.RequestBodyPutStringWithParamsRequest) async throws -> Response<Operations.RequestBodyPutStringWithParamsResponse>

    func requestBodyReadAndWrite(request: Shared.ReadWriteObject, server: RequestBodiesServers.RequestBodyReadAndWrite?) async throws -> Response<Operations.RequestBodyReadAndWriteResponse>

    func requestBodyReadOnlyInput(request: Shared.ReadOnlyObjectInput, server: RequestBodiesServers.RequestBodyReadOnlyInput?) async throws -> Response<Operations.RequestBodyReadOnlyInputResponse>

    func requestBodyReadOnlyUnion(request: Shared.WeaklyTypedOneOfReadOnlyObjectInput, server: RequestBodiesServers.RequestBodyReadOnlyUnion?) async throws -> Response<Operations.RequestBodyReadOnlyUnionResponse>

    func requestBodyReadWriteOnlyUnion(request: Shared.WeaklyTypedOneOfReadWriteObject, server: RequestBodiesServers.RequestBodyReadWriteOnlyUnion?) async throws -> Response<Operations.RequestBodyReadWriteOnlyUnionResponse>

    func requestBodyWriteOnly(request: Shared.WriteOnlyObject, server: RequestBodiesServers.RequestBodyWriteOnly?) async throws -> Response<Operations.RequestBodyWriteOnlyResponse>

    func requestBodyWriteOnlyOutput(request: Shared.WriteOnlyObject, server: RequestBodiesServers.RequestBodyWriteOnlyOutput?) async throws -> Response<Operations.RequestBodyWriteOnlyOutputResponse>

    func requestBodyWriteOnlyUnion(request: Shared.WeaklyTypedOneOfWriteOnlyObject, server: RequestBodiesServers.RequestBodyWriteOnlyUnion?) async throws -> Response<Operations.RequestBodyWriteOnlyUnionResponse>
}

// MARK: - ServersAPI
public enum ServersServers {

/// Describes the available servers that can be used when making 'selectServerWithID' requests.
///
/// Use this type when making calls to ``ServersAPI/selectServerWithID(server:)`` to customize the server which is used.
    public enum SelectServerWithID: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35123`
        case valid
        /// Supported server value.
        ///
        /// Corresponds to `http://broken`
        case broken

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35123",
        ///     "http://broken"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35123",
            "http://broken"
        ]

        static func `default`() throws -> Server {
            return try ServersServers.SelectServerWithID.valid.server()
        }

        func server() throws -> Server {
            switch self {
            case .valid:
                return try type(of: self).server(at: 0, substituting: nil)
            case .broken:
                return try type(of: self).server(at: 1, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'serverWithProtocolTemplate' requests.
///
/// Use this type when making calls to ``ServersAPI/serverWithProtocolTemplate(server:)`` to customize the server which is used.
    public enum ServerWithProtocolTemplate: Servers, ServerConvertible {
        /// Supported server value with substituted variables
        ///
        /// Corresponds to `{protocol}://{hostname}:{port}`
        case main(hostname: String = "localhost", port: String = "35123", `protocol`: String = "http")

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "{protocol}://{hostname}:{port}"
        /// ]
        /// ```
        public static let urlStrings = [
            "{protocol}://{hostname}:{port}"
        ]

        static func `default`() throws -> Server {
            return try ServersServers.ServerWithProtocolTemplate.main().server()
        }

        func server() throws -> Server {
            switch self {
            case .main(let hostname, let port, let `protocol`):
                return try type(of: self).server(at: 0, substituting: ["hostname": hostname, "port": port, "protocol": `protocol`])
            }
        }
    }

/// Describes the available servers that can be used when making 'serverWithTemplates' requests.
///
/// Use this type when making calls to ``ServersAPI/serverWithTemplates(server:)`` to customize the server which is used.
    public enum ServerWithTemplates: Servers, ServerConvertible {
        /// Supported server value with substituted variables
        ///
        /// Corresponds to `http://{hostname}:{port}`
        case server1(hostname: String = "localhost", port: String = "35123")

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://{hostname}:{port}"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://{hostname}:{port}"
        ]

        static func `default`() throws -> Server {
            return try ServersServers.ServerWithTemplates.server1().server()
        }

        func server() throws -> Server {
            switch self {
            case .server1(let hostname, let port):
                return try type(of: self).server(at: 0, substituting: ["hostname": hostname, "port": port])
            }
        }
    }

/// Describes the available servers that can be used when making 'serversByIDWithTemplates' requests.
///
/// Use this type when making calls to ``ServersAPI/serversByIDWithTemplates(server:)`` to customize the server which is used.
    public enum ServersByIDWithTemplates: Servers, ServerConvertible {
        /// Supported server value with substituted variables
        ///
        /// Corresponds to `http://{hostname}:{port}`
        case main(hostname: String = "localhost", port: String = "35123")

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://{hostname}:{port}"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://{hostname}:{port}"
        ]

        static func `default`() throws -> Server {
            return try ServersServers.ServersByIDWithTemplates.main().server()
        }

        func server() throws -> Server {
            switch self {
            case .main(let hostname, let port):
                return try type(of: self).server(at: 0, substituting: ["hostname": hostname, "port": port])
            }
        }
    }
}

/// Endpoints for testing servers.
///
/// ## Topics
///
/// ### API calls
///
/// - ``selectGlobalServer()``
/// - ``selectServerWithID(server:)``
/// - ``serverWithProtocolTemplate(server:)``
/// - ``serverWithTemplates(server:)``
/// - ``serverWithTemplatesGlobal()``
/// - ``serversByIDWithTemplates(server:)``
///
public protocol ServersAPI {
    func selectGlobalServer() async throws -> ResponseWithHeaders<Operations.SelectGlobalServerResponse>

    /// Select a server by ID.
    /// 
    /// - Parameter server: An optional server override to use for this operation
    /// - Returns: A ``Operations/SelectServerWithIDResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``OpenAPIError``
    func selectServerWithID(server: ServersServers.SelectServerWithID?) async throws -> Response<Operations.SelectServerWithIDResponse>

    func serverWithProtocolTemplate(server: ServersServers.ServerWithProtocolTemplate?) async throws -> Response<Operations.ServerWithProtocolTemplateResponse>

    func serverWithTemplates(server: ServersServers.ServerWithTemplates?) async throws -> Response<Operations.ServerWithTemplatesResponse>

    func serverWithTemplatesGlobal() async throws -> Response<Operations.ServerWithTemplatesGlobalResponse>

    func serversByIDWithTemplates(server: ServersServers.ServersByIDWithTemplates?) async throws -> Response<Operations.ServersByIDWithTemplatesResponse>
}

// MARK: - TelemetryAPI

/// Endpoints for testing telemetry.
///
/// ## Topics
///
/// ### API calls
///
/// - ``telemetrySpeakeasyUserAgentGet(request:)``
/// - ``telemetryUserAgentGet()``
///
public protocol TelemetryAPI {
    func telemetrySpeakeasyUserAgentGet(request: Operations.TelemetrySpeakeasyUserAgentGetRequest) async throws -> Response<Operations.TelemetrySpeakeasyUserAgentGetResponse>

    func telemetryUserAgentGet() async throws -> Response<Operations.TelemetryUserAgentGetResponse>
}

// MARK: - AuthNewAPI
public enum AuthNewServers {

/// Describes the available servers that can be used when making 'authGlobal' requests.
///
/// Use this type when making calls to ``AuthNewAPI/authGlobal(request:server:)`` to customize the server which is used.
    public enum AuthGlobal: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try AuthNewServers.AuthGlobal.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'basicAuthNew' requests.
///
/// Use this type when making calls to ``AuthNewAPI/basicAuthNew(request:security:server:)`` to customize the server which is used.
    public enum BasicAuthNew: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try AuthNewServers.BasicAuthNew.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'customSchemeAppId' requests.
///
/// Use this type when making calls to ``AuthNewAPI/customSchemeAppId(security:server:)`` to customize the server which is used.
    public enum CustomSchemeAppId: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try AuthNewServers.CustomSchemeAppId.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'multipleMixedOptionsAuth' requests.
///
/// Use this type when making calls to ``AuthNewAPI/multipleMixedOptionsAuth(request:security:server:)`` to customize the server which is used.
    public enum MultipleMixedOptionsAuth: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try AuthNewServers.MultipleMixedOptionsAuth.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'multipleMixedSchemeAuth' requests.
///
/// Use this type when making calls to ``AuthNewAPI/multipleMixedSchemeAuth(request:security:server:)`` to customize the server which is used.
    public enum MultipleMixedSchemeAuth: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try AuthNewServers.MultipleMixedSchemeAuth.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'multipleOptionsWithMixedSchemesAuth' requests.
///
/// Use this type when making calls to ``AuthNewAPI/multipleOptionsWithMixedSchemesAuth(request:security:server:)`` to customize the server which is used.
    public enum MultipleOptionsWithMixedSchemesAuth: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try AuthNewServers.MultipleOptionsWithMixedSchemesAuth.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'multipleOptionsWithSimpleSchemesAuth' requests.
///
/// Use this type when making calls to ``AuthNewAPI/multipleOptionsWithSimpleSchemesAuth(request:security:server:)`` to customize the server which is used.
    public enum MultipleOptionsWithSimpleSchemesAuth: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try AuthNewServers.MultipleOptionsWithSimpleSchemesAuth.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'multipleSimpleOptionsAuth' requests.
///
/// Use this type when making calls to ``AuthNewAPI/multipleSimpleOptionsAuth(request:security:server:)`` to customize the server which is used.
    public enum MultipleSimpleOptionsAuth: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try AuthNewServers.MultipleSimpleOptionsAuth.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'multipleSimpleSchemeAuth' requests.
///
/// Use this type when making calls to ``AuthNewAPI/multipleSimpleSchemeAuth(request:security:server:)`` to customize the server which is used.
    public enum MultipleSimpleSchemeAuth: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try AuthNewServers.MultipleSimpleSchemeAuth.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'oauth2AuthNew' requests.
///
/// Use this type when making calls to ``AuthNewAPI/oauth2AuthNew(request:server:)`` to customize the server which is used.
    public enum Oauth2AuthNew: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try AuthNewServers.Oauth2AuthNew.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'openIdConnectAuthNew' requests.
///
/// Use this type when making calls to ``AuthNewAPI/openIdConnectAuthNew(request:security:server:)`` to customize the server which is used.
    public enum OpenIdConnectAuthNew: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try AuthNewServers.OpenIdConnectAuthNew.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }
}

/// Endpoints for testing authentication.
///
/// ## Topics
///
/// ### API calls
///
/// - ``authGlobal(request:server:)``
/// - ``basicAuthNew(request:security:server:)``
/// - ``customSchemeAppId(security:server:)``
/// - ``multipleMixedOptionsAuth(request:security:server:)``
/// - ``multipleMixedSchemeAuth(request:security:server:)``
/// - ``multipleOptionsWithMixedSchemesAuth(request:security:server:)``
/// - ``multipleOptionsWithSimpleSchemesAuth(request:security:server:)``
/// - ``multipleSimpleOptionsAuth(request:security:server:)``
/// - ``multipleSimpleSchemeAuth(request:security:server:)``
/// - ``oauth2AuthNew(request:server:)``
/// - ``openIdConnectAuthNew(request:security:server:)``
///
public protocol AuthNewAPI {
    func authGlobal(request: Shared.AuthServiceRequestBody, server: AuthNewServers.AuthGlobal?) async throws -> Response<Operations.AuthGlobalResponse>

    func basicAuthNew(request: Shared.AuthServiceRequestBody, security: Operations.BasicAuthNewSecurity, server: AuthNewServers.BasicAuthNew?) async throws -> Response<Operations.BasicAuthNewResponse>

    func customSchemeAppId(security: Operations.CustomSchemeAppIdSecurity, server: AuthNewServers.CustomSchemeAppId?) async throws -> Response<Operations.CustomSchemeAppIdResponse>

    func multipleMixedOptionsAuth(request: Shared.AuthServiceRequestBody, security: Operations.MultipleMixedOptionsAuthSecurity, server: AuthNewServers.MultipleMixedOptionsAuth?) async throws -> Response<Operations.MultipleMixedOptionsAuthResponse>

    func multipleMixedSchemeAuth(request: Shared.AuthServiceRequestBody, security: Operations.MultipleMixedSchemeAuthSecurity, server: AuthNewServers.MultipleMixedSchemeAuth?) async throws -> Response<Operations.MultipleMixedSchemeAuthResponse>

    func multipleOptionsWithMixedSchemesAuth(request: Shared.AuthServiceRequestBody, security: Operations.MultipleOptionsWithMixedSchemesAuthSecurity, server: AuthNewServers.MultipleOptionsWithMixedSchemesAuth?) async throws -> Response<Operations.MultipleOptionsWithMixedSchemesAuthResponse>

    func multipleOptionsWithSimpleSchemesAuth(request: Shared.AuthServiceRequestBody, security: Operations.MultipleOptionsWithSimpleSchemesAuthSecurity, server: AuthNewServers.MultipleOptionsWithSimpleSchemesAuth?) async throws -> Response<Operations.MultipleOptionsWithSimpleSchemesAuthResponse>

    func multipleSimpleOptionsAuth(request: Shared.AuthServiceRequestBody, security: Operations.MultipleSimpleOptionsAuthSecurity, server: AuthNewServers.MultipleSimpleOptionsAuth?) async throws -> Response<Operations.MultipleSimpleOptionsAuthResponse>

    func multipleSimpleSchemeAuth(request: Shared.AuthServiceRequestBody, security: Operations.MultipleSimpleSchemeAuthSecurity, server: AuthNewServers.MultipleSimpleSchemeAuth?) async throws -> Response<Operations.MultipleSimpleSchemeAuthResponse>

    func oauth2AuthNew(request: Shared.AuthServiceRequestBody, server: AuthNewServers.Oauth2AuthNew?) async throws -> Response<Operations.Oauth2AuthNewResponse>

    func openIdConnectAuthNew(request: Shared.AuthServiceRequestBody, security: Operations.OpenIdConnectAuthNewSecurity, server: AuthNewServers.OpenIdConnectAuthNew?) async throws -> Response<Operations.OpenIdConnectAuthNewResponse>
}

// MARK: - ResourceAPI
/// ## Topics
///
/// ### API calls
///
/// - ``createFile(request:)``
/// - ``createResource(request:)``
/// - ``deleteResource(request:)``
/// - ``getArrayDataSource(request:)``
/// - ``getResource(request:)``
/// - ``updateResource(request:)``
///
public protocol ResourceAPI {
    func createFile(request: Operations.CreateFileRequestBody) async throws -> Response<Operations.CreateFileResponse>

    func createResource(request: Shared.ExampleResource) async throws -> Response<Operations.CreateResourceResponse>

    func deleteResource(request: Operations.DeleteResourceRequest) async throws -> Response<Operations.DeleteResourceResponse>

    func getArrayDataSource(request: Operations.GetArrayDataSourceRequest) async throws -> Response<Operations.GetArrayDataSourceResponse>

    func getResource(request: Operations.GetResourceRequest) async throws -> Response<Operations.GetResourceResponse>

    func updateResource(request: Operations.UpdateResourceRequest) async throws -> Response<Operations.UpdateResourceResponse>
}

// MARK: - DocumentationAPI

/// Testing for documentation extensions and tooling.
///
/// ## Topics
///
/// ### API calls
///
/// - ``getDocumentationPerLanguage(request:)``
///
public protocol DocumentationAPI {
    /// Gets documentation for some language, I guess.
    /// 
    /// - Parameter request: A ``Operations/GetDocumentationPerLanguageRequest`` object describing the input to the API operation
    /// - Returns: A ``Operations/GetDocumentationPerLanguageResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``OpenAPIError``
    func getDocumentationPerLanguage(request: Operations.GetDocumentationPerLanguageRequest) async throws -> Response<Operations.GetDocumentationPerLanguageResponse>
}

// MARK: - FirstAPI
/// ## Topics
///
/// ### API calls
///
/// - ``groupFirstGet()``
///
public protocol FirstAPI {
    func groupFirstGet() async throws -> Response<Operations.GroupFirstGetResponse>
}

// MARK: - SecondAPI
/// ## Topics
///
/// ### API calls
///
/// - ``groupSecondGet()``
///
public protocol SecondAPI {
    func groupSecondGet() async throws -> Response<Operations.GroupSecondGetResponse>
}

// MARK: - MethodsAPI
public enum MethodsServers {

/// Describes the available servers that can be used when making 'methodDelete' requests.
///
/// Use this type when making calls to ``MethodsAPI/methodDelete(request:server:)`` to customize the server which is used.
    public enum MethodDelete: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try MethodsServers.MethodDelete.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'methodGet' requests.
///
/// Use this type when making calls to ``MethodsAPI/methodGet(server:)`` to customize the server which is used.
    public enum MethodGet: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try MethodsServers.MethodGet.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'methodHead' requests.
///
/// Use this type when making calls to ``MethodsAPI/methodHead(server:)`` to customize the server which is used.
    public enum MethodHead: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try MethodsServers.MethodHead.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'methodOptions' requests.
///
/// Use this type when making calls to ``MethodsAPI/methodOptions(server:)`` to customize the server which is used.
    public enum MethodOptions: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try MethodsServers.MethodOptions.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'methodPatch' requests.
///
/// Use this type when making calls to ``MethodsAPI/methodPatch(request:server:)`` to customize the server which is used.
    public enum MethodPatch: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try MethodsServers.MethodPatch.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'methodPost' requests.
///
/// Use this type when making calls to ``MethodsAPI/methodPost(request:server:)`` to customize the server which is used.
    public enum MethodPost: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try MethodsServers.MethodPost.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'methodPut' requests.
///
/// Use this type when making calls to ``MethodsAPI/methodPut(request:server:)`` to customize the server which is used.
    public enum MethodPut: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try MethodsServers.MethodPut.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'methodTrace' requests.
///
/// Use this type when making calls to ``MethodsAPI/methodTrace(server:)`` to customize the server which is used.
    public enum MethodTrace: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try MethodsServers.MethodTrace.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }
}

/// Endpoints for testing HTTP methods.
///
/// ## Topics
///
/// ### API calls
///
/// - ``methodDelete(request:server:)``
/// - ``methodGet(server:)``
/// - ``methodHead(server:)``
/// - ``methodOptions(server:)``
/// - ``methodPatch(request:server:)``
/// - ``methodPost(request:server:)``
/// - ``methodPut(request:server:)``
/// - ``methodTrace(server:)``
///
public protocol MethodsAPI {
    func methodDelete(request: Operations.MethodDeleteRequestBody, server: MethodsServers.MethodDelete?) async throws -> Response<Operations.MethodDeleteResponse>

    func methodGet(server: MethodsServers.MethodGet?) async throws -> Response<Operations.MethodGetResponse>

    func methodHead(server: MethodsServers.MethodHead?) async throws -> Response<Operations.MethodHeadResponse>

    func methodOptions(server: MethodsServers.MethodOptions?) async throws -> ResponseWithHeaders<Operations.MethodOptionsResponse>

    func methodPatch(request: Operations.MethodPatchRequestBody, server: MethodsServers.MethodPatch?) async throws -> Response<Operations.MethodPatchResponse>

    func methodPost(request: Operations.MethodPostRequestBody, server: MethodsServers.MethodPost?) async throws -> Response<Operations.MethodPostResponse>

    func methodPut(request: Operations.MethodPutRequestBody, server: MethodsServers.MethodPut?) async throws -> Response<Operations.MethodPutResponse>

    func methodTrace(server: MethodsServers.MethodTrace?) async throws -> Response<Operations.MethodTraceResponse>
}

// MARK: - PaginationAPI
public enum PaginationServers {

/// Describes the available servers that can be used when making 'paginationCursorBody' requests.
///
/// Use this type when making calls to ``PaginationAPI/paginationCursorBody(request:server:)`` to customize the server which is used.
    public enum PaginationCursorBody: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try PaginationServers.PaginationCursorBody.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'paginationCursorNonNumeric' requests.
///
/// Use this type when making calls to ``PaginationAPI/paginationCursorNonNumeric(request:server:)`` to customize the server which is used.
    public enum PaginationCursorNonNumeric: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try PaginationServers.PaginationCursorNonNumeric.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'paginationCursorParams' requests.
///
/// Use this type when making calls to ``PaginationAPI/paginationCursorParams(request:server:)`` to customize the server which is used.
    public enum PaginationCursorParams: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try PaginationServers.PaginationCursorParams.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'paginationLimitOffsetDeepOutputsPageBody' requests.
///
/// Use this type when making calls to ``PaginationAPI/paginationLimitOffsetDeepOutputsPageBody(request:server:)`` to customize the server which is used.
    public enum PaginationLimitOffsetDeepOutputsPageBody: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try PaginationServers.PaginationLimitOffsetDeepOutputsPageBody.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'paginationLimitOffsetOffsetBody' requests.
///
/// Use this type when making calls to ``PaginationAPI/paginationLimitOffsetOffsetBody(request:server:)`` to customize the server which is used.
    public enum PaginationLimitOffsetOffsetBody: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try PaginationServers.PaginationLimitOffsetOffsetBody.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'paginationLimitOffsetOffsetParams' requests.
///
/// Use this type when making calls to ``PaginationAPI/paginationLimitOffsetOffsetParams(request:server:)`` to customize the server which is used.
    public enum PaginationLimitOffsetOffsetParams: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try PaginationServers.PaginationLimitOffsetOffsetParams.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'paginationLimitOffsetPageBody' requests.
///
/// Use this type when making calls to ``PaginationAPI/paginationLimitOffsetPageBody(request:server:)`` to customize the server which is used.
    public enum PaginationLimitOffsetPageBody: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try PaginationServers.PaginationLimitOffsetPageBody.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'paginationLimitOffsetPageParams' requests.
///
/// Use this type when making calls to ``PaginationAPI/paginationLimitOffsetPageParams(request:server:)`` to customize the server which is used.
    public enum PaginationLimitOffsetPageParams: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try PaginationServers.PaginationLimitOffsetPageParams.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'paginationURLParams' requests.
///
/// Use this type when making calls to ``PaginationAPI/paginationURLParams(request:server:)`` to customize the server which is used.
    public enum PaginationURLParams: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try PaginationServers.PaginationURLParams.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'paginationWithRetries' requests.
///
/// Use this type when making calls to ``PaginationAPI/paginationWithRetries(request:server:)`` to customize the server which is used.
    public enum PaginationWithRetries: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try PaginationServers.PaginationWithRetries.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }
}

/// Endpoints for testing the pagination extension
///
/// ## Topics
///
/// ### API calls
///
/// - ``paginationCursorBody(request:server:)``
/// - ``paginationCursorNonNumeric(request:server:)``
/// - ``paginationCursorParams(request:server:)``
/// - ``paginationLimitOffsetDeepOutputsPageBody(request:server:)``
/// - ``paginationLimitOffsetOffsetBody(request:server:)``
/// - ``paginationLimitOffsetOffsetParams(request:server:)``
/// - ``paginationLimitOffsetPageBody(request:server:)``
/// - ``paginationLimitOffsetPageParams(request:server:)``
/// - ``paginationURLParams(request:server:)``
/// - ``paginationWithRetries(request:server:)``
///
public protocol PaginationAPI {
    func paginationCursorBody(request: Operations.PaginationCursorBodyRequestBody, server: PaginationServers.PaginationCursorBody?) async throws -> Response<Operations.PaginationCursorBodyResponse>

    func paginationCursorNonNumeric(request: Operations.PaginationCursorNonNumericRequest, server: PaginationServers.PaginationCursorNonNumeric?) async throws -> Response<Operations.PaginationCursorNonNumericResponse>

    func paginationCursorParams(request: Operations.PaginationCursorParamsRequest, server: PaginationServers.PaginationCursorParams?) async throws -> Response<Operations.PaginationCursorParamsResponse>

    func paginationLimitOffsetDeepOutputsPageBody(request: Shared.LimitOffsetConfig, server: PaginationServers.PaginationLimitOffsetDeepOutputsPageBody?) async throws -> Response<Operations.PaginationLimitOffsetDeepOutputsPageBodyResponse>

    func paginationLimitOffsetOffsetBody(request: Shared.LimitOffsetConfig, server: PaginationServers.PaginationLimitOffsetOffsetBody?) async throws -> Response<Operations.PaginationLimitOffsetOffsetBodyResponse>

    func paginationLimitOffsetOffsetParams(request: Operations.PaginationLimitOffsetOffsetParamsRequest, server: PaginationServers.PaginationLimitOffsetOffsetParams?) async throws -> Response<Operations.PaginationLimitOffsetOffsetParamsResponse>

    func paginationLimitOffsetPageBody(request: Shared.LimitOffsetConfig, server: PaginationServers.PaginationLimitOffsetPageBody?) async throws -> Response<Operations.PaginationLimitOffsetPageBodyResponse>

    func paginationLimitOffsetPageParams(request: Operations.PaginationLimitOffsetPageParamsRequest, server: PaginationServers.PaginationLimitOffsetPageParams?) async throws -> Response<Operations.PaginationLimitOffsetPageParamsResponse>

    func paginationURLParams(request: Operations.PaginationURLParamsRequest, server: PaginationServers.PaginationURLParams?) async throws -> Response<Operations.PaginationURLParamsResponse>

    func paginationWithRetries(request: Operations.PaginationWithRetriesRequest, server: PaginationServers.PaginationWithRetries?) async throws -> Response<Operations.PaginationWithRetriesResponse>
}

// MARK: - RetriesAPI
public enum RetriesServers {

/// Describes the available servers that can be used when making 'retriesAfter' requests.
///
/// Use this type when making calls to ``RetriesAPI/retriesAfter(request:server:)`` to customize the server which is used.
    public enum RetriesAfter: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try RetriesServers.RetriesAfter.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'retriesConnectErrorGet' requests.
///
/// Use this type when making calls to ``RetriesAPI/retriesConnectErrorGet(server:)`` to customize the server which is used.
    public enum RetriesConnectErrorGet: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:33333`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:33333"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:33333"
        ]

        static func `default`() throws -> Server {
            return try RetriesServers.RetriesConnectErrorGet.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'retriesFlatEmptyResponsePost' requests.
///
/// Use this type when making calls to ``RetriesAPI/retriesFlatEmptyResponsePost(request:server:)`` to customize the server which is used.
    public enum RetriesFlatEmptyResponsePost: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try RetriesServers.RetriesFlatEmptyResponsePost.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'retriesGet' requests.
///
/// Use this type when making calls to ``RetriesAPI/retriesGet(request:server:)`` to customize the server which is used.
    public enum RetriesGet: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try RetriesServers.RetriesGet.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }

/// Describes the available servers that can be used when making 'retriesPost' requests.
///
/// Use this type when making calls to ``RetriesAPI/retriesPost(request:server:)`` to customize the server which is used.
    public enum RetriesPost: Servers, ServerConvertible {
        /// Supported server value.
        ///
        /// Corresponds to `http://localhost:35456`
        case server1

        /// Defines the raw URL strings for each server option.
        ///
        /// > Note: You do not need to use these values directly.
        ///
        /// The available URL strings are defined as:
        /// ```swift
        /// public static let urlStrings = [
        ///     "http://localhost:35456"
        /// ]
        /// ```
        public static let urlStrings = [
            "http://localhost:35456"
        ]

        static func `default`() throws -> Server {
            return try RetriesServers.RetriesPost.server1.server()
        }

        func server() throws -> Server {
            switch self {
            case .server1:
                return try type(of: self).server(at: 0, substituting: nil)
            }
        }
    }
}

/// Endpoints for testing retries.
///
/// ## Topics
///
/// ### API calls
///
/// - ``retriesAfter(request:server:)``
/// - ``retriesConnectErrorGet(server:)``
/// - ``retriesFlatEmptyResponsePost(request:server:)``
/// - ``retriesGet(request:server:)``
/// - ``retriesPost(request:server:)``
///
public protocol RetriesAPI {
    func retriesAfter(request: Operations.RetriesAfterRequest, server: RetriesServers.RetriesAfter?) async throws -> Response<Operations.RetriesAfterResponse>

    /// A request to a non-valid port to test connection errors
    /// 
    /// - Parameter server: An optional server override to use for this operation
    /// - Returns: A ``Operations/RetriesConnectErrorGetResponse`` object describing the result of the API operation
    /// - Throws: An error of type ``OpenAPIError``
    func retriesConnectErrorGet(server: RetriesServers.RetriesConnectErrorGet?) async throws -> Response<Operations.RetriesConnectErrorGetResponse>

    func retriesFlatEmptyResponsePost(request: Operations.RetriesFlatEmptyResponsePostRequest, server: RetriesServers.RetriesFlatEmptyResponsePost?) async throws -> Response<Operations.RetriesFlatEmptyResponsePostResponse>

    func retriesGet(request: Operations.RetriesGetRequest, server: RetriesServers.RetriesGet?) async throws -> Response<Operations.RetriesGetResponse>

    func retriesPost(request: Operations.RetriesPostRequest, server: RetriesServers.RetriesPost?) async throws -> Response<Operations.RetriesPostResponse>
}
