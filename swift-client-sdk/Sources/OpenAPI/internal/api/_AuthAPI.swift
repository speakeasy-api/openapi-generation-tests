// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

class _AuthAPI: AuthAPI {
    private let client: Client

    init(client: Client) {
        self.client = client
    }
    
    public func apiKeyAuth(security: Operations.ApiKeyAuthSecurity) async throws -> Response<Operations.ApiKeyAuthResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureApiKeyAuthRequest(with: configuration, security: security)
            },
            handleResponse: handleApiKeyAuthResponse
        )
    }
    
    public func apiKeyAuthGlobal() async throws -> Response<Operations.ApiKeyAuthGlobalResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureApiKeyAuthGlobalRequest(with: configuration)
            },
            handleResponse: handleApiKeyAuthGlobalResponse
        )
    }
    
    public func basicAuth(request: Operations.BasicAuthRequest, security: Operations.BasicAuthSecurity) async throws -> Response<Operations.BasicAuthResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureBasicAuthRequest(with: configuration, request: request, security: security)
            },
            handleResponse: handleBasicAuthResponse
        )
    }
    
    public func bearerAuth(security: Operations.BearerAuthSecurity) async throws -> Response<Operations.BearerAuthResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureBearerAuthRequest(with: configuration, security: security)
            },
            handleResponse: handleBearerAuthResponse
        )
    }
    
    public func globalBearerAuth() async throws -> Response<Operations.GlobalBearerAuthResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureGlobalBearerAuthRequest(with: configuration)
            },
            handleResponse: handleGlobalBearerAuthResponse
        )
    }
    
    public func oauth2Auth(security: Operations.Oauth2AuthSecurity) async throws -> Response<Operations.Oauth2AuthResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureOauth2AuthRequest(with: configuration, security: security)
            },
            handleResponse: handleOauth2AuthResponse
        )
    }
    
    public func oauth2Override(request: Operations.Oauth2OverrideRequest, security: Operations.Oauth2OverrideSecurity) async throws -> Response<Operations.Oauth2OverrideResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureOauth2OverrideRequest(with: configuration, request: request, security: security)
            },
            handleResponse: handleOauth2OverrideResponse
        )
    }
    
    public func openIdConnectAuth(security: Operations.OpenIdConnectAuthSecurity) async throws -> Response<Operations.OpenIdConnectAuthResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureOpenIdConnectAuthRequest(with: configuration, security: security)
            },
            handleResponse: handleOpenIdConnectAuthResponse
        )
    }

}

// MARK: - Request Configuration

private func configureApiKeyAuthRequest(with configuration: URLRequestConfiguration, security: Operations.ApiKeyAuthSecurity) throws {
    configuration.path = "/bearer#operation"
    configuration.method = .get
    configuration.securityParameterProviding = security
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureApiKeyAuthGlobalRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/bearer"
    configuration.method = .get
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureBasicAuthRequest(with configuration: URLRequestConfiguration, request: Operations.BasicAuthRequest, security: Operations.BasicAuthSecurity) throws {
    configuration.path = "/basic-auth/{user}/{passwd}"
    configuration.method = .get
    configuration.securityParameterProviding = security
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureBearerAuthRequest(with configuration: URLRequestConfiguration, security: Operations.BearerAuthSecurity) throws {
    configuration.path = "/bearer#bearer"
    configuration.method = .get
    configuration.securityParameterProviding = security
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureGlobalBearerAuthRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/bearer#global"
    configuration.method = .get
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureOauth2AuthRequest(with configuration: URLRequestConfiguration, security: Operations.Oauth2AuthSecurity) throws {
    configuration.path = "/bearer#oauth2"
    configuration.method = .get
    configuration.securityParameterProviding = security
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureOauth2OverrideRequest(with configuration: URLRequestConfiguration, request: Operations.Oauth2OverrideRequest, security: Operations.Oauth2OverrideSecurity) throws {
    configuration.path = "/bearer#oauth2AuthOverride"
    configuration.method = .get
    configuration.securityParameterProviding = security
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureOpenIdConnectAuthRequest(with configuration: URLRequestConfiguration, security: Operations.OpenIdConnectAuthSecurity) throws {
    configuration.path = "/bearer#openIdConnect"
    configuration.method = .get
    configuration.securityParameterProviding = security
    configuration.telemetryHeader = .speakeasyUserAgent
}

// MARK: - Response Handlers

private func handleApiKeyAuthResponse(response: Client.APIResponse) throws -> Operations.ApiKeyAuthResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .token(try JSONDecoder().decode(Operations.ApiKeyAuthToken.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if httpResponse.statusCode == 401 { 
        return .empty
    }

    return .empty
}

private func handleApiKeyAuthGlobalResponse(response: Client.APIResponse) throws -> Operations.ApiKeyAuthGlobalResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .token(try JSONDecoder().decode(Operations.ApiKeyAuthGlobalToken.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if httpResponse.statusCode == 401 { 
        return .empty
    }

    return .empty
}

private func handleBasicAuthResponse(response: Client.APIResponse) throws -> Operations.BasicAuthResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .user(try JSONDecoder().decode(Operations.BasicAuthUser.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if httpResponse.statusCode == 401 { 
        return .empty
    }

    return .empty
}

private func handleBearerAuthResponse(response: Client.APIResponse) throws -> Operations.BearerAuthResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .token(try JSONDecoder().decode(Operations.BearerAuthToken.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if httpResponse.statusCode == 401 { 
        return .empty
    }

    return .empty
}

private func handleGlobalBearerAuthResponse(response: Client.APIResponse) throws -> Operations.GlobalBearerAuthResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .token(try JSONDecoder().decode(Operations.GlobalBearerAuthToken.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if httpResponse.statusCode == 401 { 
        return .empty
    }

    return .empty
}

private func handleOauth2AuthResponse(response: Client.APIResponse) throws -> Operations.Oauth2AuthResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .token(try JSONDecoder().decode(Operations.Oauth2AuthToken.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if httpResponse.statusCode == 401 { 
        return .empty
    }

    return .empty
}

private func handleOauth2OverrideResponse(response: Client.APIResponse) throws -> Operations.Oauth2OverrideResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .token(try JSONDecoder().decode(Operations.Oauth2OverrideToken.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if httpResponse.statusCode == 401 { 
        return .empty
    }

    return .empty
}

private func handleOpenIdConnectAuthResponse(response: Client.APIResponse) throws -> Operations.OpenIdConnectAuthResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .token(try JSONDecoder().decode(Operations.OpenIdConnectAuthToken.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if httpResponse.statusCode == 401 { 
        return .empty
    }

    return .empty
}

