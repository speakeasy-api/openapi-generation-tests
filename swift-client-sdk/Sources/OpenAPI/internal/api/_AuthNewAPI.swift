// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

class _AuthNewAPI: AuthNewAPI {
    private let client: Client

    init(client: Client) {
        self.client = client
    }
    
    public func apiKeyAuthGlobalNew(request: Shared.AuthServiceRequestBody, server: AuthNewServers.ApiKeyAuthGlobalNew?) async throws -> Response<Operations.ApiKeyAuthGlobalNewResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? AuthNewServers.ApiKeyAuthGlobalNew.default(),
            configureRequest: { configuration in
                try configureApiKeyAuthGlobalNewRequest(with: configuration, request: request)
            },
            handleResponse: handleApiKeyAuthGlobalNewResponse
        )
    }
    
    public func authGlobal(request: Shared.AuthServiceRequestBody, server: AuthNewServers.AuthGlobal?) async throws -> Response<Operations.AuthGlobalResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? AuthNewServers.AuthGlobal.default(),
            configureRequest: { configuration in
                try configureAuthGlobalRequest(with: configuration, request: request)
            },
            handleResponse: handleAuthGlobalResponse
        )
    }
    
    public func basicAuthNew(request: Shared.AuthServiceRequestBody, security: Operations.BasicAuthNewSecurity, server: AuthNewServers.BasicAuthNew?) async throws -> Response<Operations.BasicAuthNewResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? AuthNewServers.BasicAuthNew.default(),
            configureRequest: { configuration in
                try configureBasicAuthNewRequest(with: configuration, request: request, security: security)
            },
            handleResponse: handleBasicAuthNewResponse
        )
    }
    
    public func multipleMixedOptionsAuth(request: Shared.AuthServiceRequestBody, security: Operations.MultipleMixedOptionsAuthSecurity, server: AuthNewServers.MultipleMixedOptionsAuth?) async throws -> Response<Operations.MultipleMixedOptionsAuthResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? AuthNewServers.MultipleMixedOptionsAuth.default(),
            configureRequest: { configuration in
                try configureMultipleMixedOptionsAuthRequest(with: configuration, request: request, security: security)
            },
            handleResponse: handleMultipleMixedOptionsAuthResponse
        )
    }
    
    public func multipleMixedSchemeAuth(request: Shared.AuthServiceRequestBody, security: Operations.MultipleMixedSchemeAuthSecurity, server: AuthNewServers.MultipleMixedSchemeAuth?) async throws -> Response<Operations.MultipleMixedSchemeAuthResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? AuthNewServers.MultipleMixedSchemeAuth.default(),
            configureRequest: { configuration in
                try configureMultipleMixedSchemeAuthRequest(with: configuration, request: request, security: security)
            },
            handleResponse: handleMultipleMixedSchemeAuthResponse
        )
    }
    
    public func multipleOptionsWithMixedSchemesAuth(request: Shared.AuthServiceRequestBody, security: Operations.MultipleOptionsWithMixedSchemesAuthSecurity, server: AuthNewServers.MultipleOptionsWithMixedSchemesAuth?) async throws -> Response<Operations.MultipleOptionsWithMixedSchemesAuthResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? AuthNewServers.MultipleOptionsWithMixedSchemesAuth.default(),
            configureRequest: { configuration in
                try configureMultipleOptionsWithMixedSchemesAuthRequest(with: configuration, request: request, security: security)
            },
            handleResponse: handleMultipleOptionsWithMixedSchemesAuthResponse
        )
    }
    
    public func multipleOptionsWithSimpleSchemesAuth(request: Shared.AuthServiceRequestBody, security: Operations.MultipleOptionsWithSimpleSchemesAuthSecurity, server: AuthNewServers.MultipleOptionsWithSimpleSchemesAuth?) async throws -> Response<Operations.MultipleOptionsWithSimpleSchemesAuthResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? AuthNewServers.MultipleOptionsWithSimpleSchemesAuth.default(),
            configureRequest: { configuration in
                try configureMultipleOptionsWithSimpleSchemesAuthRequest(with: configuration, request: request, security: security)
            },
            handleResponse: handleMultipleOptionsWithSimpleSchemesAuthResponse
        )
    }
    
    public func multipleSimpleOptionsAuth(request: Shared.AuthServiceRequestBody, security: Operations.MultipleSimpleOptionsAuthSecurity, server: AuthNewServers.MultipleSimpleOptionsAuth?) async throws -> Response<Operations.MultipleSimpleOptionsAuthResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? AuthNewServers.MultipleSimpleOptionsAuth.default(),
            configureRequest: { configuration in
                try configureMultipleSimpleOptionsAuthRequest(with: configuration, request: request, security: security)
            },
            handleResponse: handleMultipleSimpleOptionsAuthResponse
        )
    }
    
    public func multipleSimpleSchemeAuth(request: Shared.AuthServiceRequestBody, security: Operations.MultipleSimpleSchemeAuthSecurity, server: AuthNewServers.MultipleSimpleSchemeAuth?) async throws -> Response<Operations.MultipleSimpleSchemeAuthResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? AuthNewServers.MultipleSimpleSchemeAuth.default(),
            configureRequest: { configuration in
                try configureMultipleSimpleSchemeAuthRequest(with: configuration, request: request, security: security)
            },
            handleResponse: handleMultipleSimpleSchemeAuthResponse
        )
    }
    
    public func oauth2AuthNew(request: Shared.AuthServiceRequestBody, security: Operations.Oauth2AuthNewSecurity, server: AuthNewServers.Oauth2AuthNew?) async throws -> Response<Operations.Oauth2AuthNewResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? AuthNewServers.Oauth2AuthNew.default(),
            configureRequest: { configuration in
                try configureOauth2AuthNewRequest(with: configuration, request: request, security: security)
            },
            handleResponse: handleOauth2AuthNewResponse
        )
    }
    
    public func openIdConnectAuthNew(request: Shared.AuthServiceRequestBody, security: Operations.OpenIdConnectAuthNewSecurity, server: AuthNewServers.OpenIdConnectAuthNew?) async throws -> Response<Operations.OpenIdConnectAuthNewResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? AuthNewServers.OpenIdConnectAuthNew.default(),
            configureRequest: { configuration in
                try configureOpenIdConnectAuthNewRequest(with: configuration, request: request, security: security)
            },
            handleResponse: handleOpenIdConnectAuthNewResponse
        )
    }

}

// MARK: - Request Configuration

private func configureApiKeyAuthGlobalNewRequest(with configuration: URLRequestConfiguration, request: Shared.AuthServiceRequestBody) throws {
    configuration.path = "/auth#apiKeyAuthGlobal"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureAuthGlobalRequest(with configuration: URLRequestConfiguration, request: Shared.AuthServiceRequestBody) throws {
    configuration.path = "/auth#authGlobal"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureBasicAuthNewRequest(with configuration: URLRequestConfiguration, request: Shared.AuthServiceRequestBody, security: Operations.BasicAuthNewSecurity) throws {
    configuration.path = "/auth#basicAuth"
    configuration.method = .post
    configuration.securityParameterProviding = security
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureMultipleMixedOptionsAuthRequest(with configuration: URLRequestConfiguration, request: Shared.AuthServiceRequestBody, security: Operations.MultipleMixedOptionsAuthSecurity) throws {
    configuration.path = "/auth#multipleMixedOptionsAuth"
    configuration.method = .post
    configuration.securityParameterProviding = security
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureMultipleMixedSchemeAuthRequest(with configuration: URLRequestConfiguration, request: Shared.AuthServiceRequestBody, security: Operations.MultipleMixedSchemeAuthSecurity) throws {
    configuration.path = "/auth#multipleMixedSchemeAuth"
    configuration.method = .post
    configuration.securityParameterProviding = security
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureMultipleOptionsWithMixedSchemesAuthRequest(with configuration: URLRequestConfiguration, request: Shared.AuthServiceRequestBody, security: Operations.MultipleOptionsWithMixedSchemesAuthSecurity) throws {
    configuration.path = "/auth#multipleOptionsWithMixedSchemesAuth"
    configuration.method = .post
    configuration.securityParameterProviding = security
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureMultipleOptionsWithSimpleSchemesAuthRequest(with configuration: URLRequestConfiguration, request: Shared.AuthServiceRequestBody, security: Operations.MultipleOptionsWithSimpleSchemesAuthSecurity) throws {
    configuration.path = "/auth#multipleOptionsWithSimpleSchemesAuth"
    configuration.method = .post
    configuration.securityParameterProviding = security
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureMultipleSimpleOptionsAuthRequest(with configuration: URLRequestConfiguration, request: Shared.AuthServiceRequestBody, security: Operations.MultipleSimpleOptionsAuthSecurity) throws {
    configuration.path = "/auth#multipleSimpleOptionsAuth"
    configuration.method = .post
    configuration.securityParameterProviding = security
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureMultipleSimpleSchemeAuthRequest(with configuration: URLRequestConfiguration, request: Shared.AuthServiceRequestBody, security: Operations.MultipleSimpleSchemeAuthSecurity) throws {
    configuration.path = "/auth#multipleSimpleSchemeAuth"
    configuration.method = .post
    configuration.securityParameterProviding = security
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureOauth2AuthNewRequest(with configuration: URLRequestConfiguration, request: Shared.AuthServiceRequestBody, security: Operations.Oauth2AuthNewSecurity) throws {
    configuration.path = "/auth#oauth2Auth"
    configuration.method = .post
    configuration.securityParameterProviding = security
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureOpenIdConnectAuthNewRequest(with configuration: URLRequestConfiguration, request: Shared.AuthServiceRequestBody, security: Operations.OpenIdConnectAuthNewSecurity) throws {
    configuration.path = "/auth#openIdConnectAuth"
    configuration.method = .post
    configuration.securityParameterProviding = security
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

// MARK: - Response Handlers

private func handleApiKeyAuthGlobalNewResponse(response: Client.APIResponse) throws -> Operations.ApiKeyAuthGlobalNewResponse {
    let httpResponse = response.httpResponse
    
    if [200, 401].contains(httpResponse.statusCode) { 
        return .empty
    }

    return .empty
}

private func handleAuthGlobalResponse(response: Client.APIResponse) throws -> Operations.AuthGlobalResponse {
    let httpResponse = response.httpResponse
    
    if [200, 401].contains(httpResponse.statusCode) { 
        return .empty
    }

    return .empty
}

private func handleBasicAuthNewResponse(response: Client.APIResponse) throws -> Operations.BasicAuthNewResponse {
    let httpResponse = response.httpResponse
    
    if [200, 401].contains(httpResponse.statusCode) { 
        return .empty
    }

    return .empty
}

private func handleMultipleMixedOptionsAuthResponse(response: Client.APIResponse) throws -> Operations.MultipleMixedOptionsAuthResponse {
    let httpResponse = response.httpResponse
    
    if [200, 401].contains(httpResponse.statusCode) { 
        return .empty
    }

    return .empty
}

private func handleMultipleMixedSchemeAuthResponse(response: Client.APIResponse) throws -> Operations.MultipleMixedSchemeAuthResponse {
    let httpResponse = response.httpResponse
    
    if [200, 401].contains(httpResponse.statusCode) { 
        return .empty
    }

    return .empty
}

private func handleMultipleOptionsWithMixedSchemesAuthResponse(response: Client.APIResponse) throws -> Operations.MultipleOptionsWithMixedSchemesAuthResponse {
    let httpResponse = response.httpResponse
    
    if [200, 401].contains(httpResponse.statusCode) { 
        return .empty
    }

    return .empty
}

private func handleMultipleOptionsWithSimpleSchemesAuthResponse(response: Client.APIResponse) throws -> Operations.MultipleOptionsWithSimpleSchemesAuthResponse {
    let httpResponse = response.httpResponse
    
    if [200, 401].contains(httpResponse.statusCode) { 
        return .empty
    }

    return .empty
}

private func handleMultipleSimpleOptionsAuthResponse(response: Client.APIResponse) throws -> Operations.MultipleSimpleOptionsAuthResponse {
    let httpResponse = response.httpResponse
    
    if [200, 401].contains(httpResponse.statusCode) { 
        return .empty
    }

    return .empty
}

private func handleMultipleSimpleSchemeAuthResponse(response: Client.APIResponse) throws -> Operations.MultipleSimpleSchemeAuthResponse {
    let httpResponse = response.httpResponse
    
    if [200, 401].contains(httpResponse.statusCode) { 
        return .empty
    }

    return .empty
}

private func handleOauth2AuthNewResponse(response: Client.APIResponse) throws -> Operations.Oauth2AuthNewResponse {
    let httpResponse = response.httpResponse
    
    if [200, 401].contains(httpResponse.statusCode) { 
        return .empty
    }

    return .empty
}

private func handleOpenIdConnectAuthNewResponse(response: Client.APIResponse) throws -> Operations.OpenIdConnectAuthNewResponse {
    let httpResponse = response.httpResponse
    
    if [200, 401].contains(httpResponse.statusCode) { 
        return .empty
    }

    return .empty
}

