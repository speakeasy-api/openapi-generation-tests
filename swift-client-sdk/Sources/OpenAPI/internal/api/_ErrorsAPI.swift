// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

class _ErrorsAPI: ErrorsAPI {
    private let client: Client

    init(client: Client) {
        self.client = client
    }
    
    public func connectionErrorGet(server: ErrorsServers.ConnectionErrorGet?) async throws -> Response<Operations.ConnectionErrorGetResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? ErrorsServers.ConnectionErrorGet.default(),
            configureRequest: { configuration in
                try configureConnectionErrorGetRequest(with: configuration)
            },
            handleResponse: handleConnectionErrorGetResponse
        )
    }
    
    public func errorUnionDiscriminatedPost(request: Operations.ErrorUnionDiscriminatedPostRequestBody, server: ErrorsServers.ErrorUnionDiscriminatedPost?) async throws -> Response<Operations.ErrorUnionDiscriminatedPostResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? ErrorsServers.ErrorUnionDiscriminatedPost.default(),
            configureRequest: { configuration in
                try configureErrorUnionDiscriminatedPostRequest(with: configuration, request: request)
            },
            handleResponse: handleErrorUnionDiscriminatedPostResponse
        )
    }
    
    public func errorUnionPost(request: Operations.ErrorUnionPostRequestBody, server: ErrorsServers.ErrorUnionPost?) async throws -> Response<Operations.ErrorUnionPostResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? ErrorsServers.ErrorUnionPost.default(),
            configureRequest: { configuration in
                try configureErrorUnionPostRequest(with: configuration, request: request)
            },
            handleResponse: handleErrorUnionPostResponse
        )
    }
    
    public func statusGetError(request: Operations.StatusGetErrorRequest) async throws -> Response<Operations.StatusGetErrorResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureStatusGetErrorRequest(with: configuration, request: request)
            },
            handleResponse: handleStatusGetErrorResponse
        )
    }
    
    public func statusGetXSpeakeasyErrors(request: Operations.StatusGetXSpeakeasyErrorsRequest, server: ErrorsServers.StatusGetXSpeakeasyErrors?) async throws -> Response<Operations.StatusGetXSpeakeasyErrorsResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? ErrorsServers.StatusGetXSpeakeasyErrors.default(),
            configureRequest: { configuration in
                try configureStatusGetXSpeakeasyErrorsRequest(with: configuration, request: request)
            },
            handleResponse: handleStatusGetXSpeakeasyErrorsResponse
        )
    }

}

// MARK: - Request Configuration

private func configureConnectionErrorGetRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/anything/connectionError"
    configuration.method = .get
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureErrorUnionDiscriminatedPostRequest(with configuration: URLRequestConfiguration, request: Operations.ErrorUnionDiscriminatedPostRequestBody) throws {
    configuration.path = "/errors/400#errorUnionDiscriminated"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureErrorUnionPostRequest(with configuration: URLRequestConfiguration, request: Operations.ErrorUnionPostRequestBody) throws {
    configuration.path = "/errors/500#errorUnion"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureStatusGetErrorRequest(with configuration: URLRequestConfiguration, request: Operations.StatusGetErrorRequest) throws {
    configuration.path = "/status/{statusCode}"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureStatusGetXSpeakeasyErrorsRequest(with configuration: URLRequestConfiguration, request: Operations.StatusGetXSpeakeasyErrorsRequest) throws {
    configuration.path = "/errors/{statusCode}"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

// MARK: - Response Handlers

private func handleConnectionErrorGetResponse(response: Client.APIResponse) throws -> Operations.ConnectionErrorGetResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        return .empty
    }

    return .empty
}

private func handleErrorUnionDiscriminatedPostResponse(response: Client.APIResponse) throws -> Operations.ErrorUnionDiscriminatedPostResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        return .empty
    } else if httpResponse.statusCode >= 400 && httpResponse.statusCode < 500 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .oneOf(try JSONDecoder().decode(Operations.ErrorUnionDiscriminatedPostResponseBody.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleErrorUnionPostResponse(response: Client.APIResponse) throws -> Operations.ErrorUnionPostResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        return .empty
    } else if httpResponse.statusCode == 500 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .oneOf(try JSONDecoder().decode(Operations.ErrorUnionPostResponseBody.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleStatusGetErrorResponse(response: Client.APIResponse) throws -> Operations.StatusGetErrorResponse {
    let httpResponse = response.httpResponse
    
    if [200, 300, 400, 500].contains(httpResponse.statusCode) { 
        return .empty
    }

    return .empty
}

private func handleStatusGetXSpeakeasyErrorsResponse(response: Client.APIResponse) throws -> Operations.StatusGetXSpeakeasyErrorsResponse {
    let httpResponse = response.httpResponse
    
    if [200, 300, 400].contains(httpResponse.statusCode) { 
        return .empty
    } else if httpResponse.statusCode == 500 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .error(try JSONDecoder().decode(Shared.Error.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    } else if httpResponse.statusCode == 501 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .object(try JSONDecoder().decode(Operations.StatusGetXSpeakeasyErrorsResponseBody.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

