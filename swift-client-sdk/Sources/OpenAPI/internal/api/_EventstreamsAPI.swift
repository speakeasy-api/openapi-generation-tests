// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

class _EventstreamsAPI: EventstreamsAPI {
    private let client: Client

    init(client: Client) {
        self.client = client
    }
    
    public func chat(request: Operations.ChatRequestBody, server: EventstreamsServers.Chat?) async throws -> Response<Operations.ChatResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? EventstreamsServers.Chat.default(),
            configureRequest: { configuration in
                try configureChatRequest(with: configuration, request: request)
            },
            handleResponse: handleChatResponse
        )
    }
    
    public func json(server: EventstreamsServers.Json?) async throws -> Response<Operations.JsonResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? EventstreamsServers.Json.default(),
            configureRequest: { configuration in
                try configureJsonRequest(with: configuration)
            },
            handleResponse: handleJsonResponse
        )
    }
    
    public func multiline(server: EventstreamsServers.Multiline?) async throws -> Response<Operations.MultilineResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? EventstreamsServers.Multiline.default(),
            configureRequest: { configuration in
                try configureMultilineRequest(with: configuration)
            },
            handleResponse: handleMultilineResponse
        )
    }
    
    public func rich(server: EventstreamsServers.Rich?) async throws -> Response<Operations.RichResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? EventstreamsServers.Rich.default(),
            configureRequest: { configuration in
                try configureRichRequest(with: configuration)
            },
            handleResponse: handleRichResponse
        )
    }
    
    public func text(server: EventstreamsServers.Text?) async throws -> Response<Operations.TextResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? EventstreamsServers.Text.default(),
            configureRequest: { configuration in
                try configureTextRequest(with: configuration)
            },
            handleResponse: handleTextResponse
        )
    }

}

// MARK: - Request Configuration

private func configureChatRequest(with configuration: URLRequestConfiguration, request: Operations.ChatRequestBody) throws {
    configuration.path = "/eventstreams/chat"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureJsonRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/eventstreams/json"
    configuration.method = .post
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureMultilineRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/eventstreams/multiline"
    configuration.method = .post
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRichRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/eventstreams/rich"
    configuration.method = .post
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureTextRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/eventstreams/text"
    configuration.method = .post
    configuration.telemetryHeader = .speakeasyUserAgent
}

// MARK: - Response Handlers

private func handleChatResponse(response: Client.APIResponse) throws -> Operations.ChatResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .chatCompletionResult(try JSONDecoder().decode([Shared.ChatCompletionResult].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
        if httpResponse.contentType.matchContentType(pattern: "text/event-stream"), let data = response.data {
            return .body(data)
        }
    }

    return .empty
}

private func handleJsonResponse(response: Client.APIResponse) throws -> Operations.JsonResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "text/event-stream"), let data = response.data {
            return .body(data)
        }
    }

    return .empty
}

private func handleMultilineResponse(response: Client.APIResponse) throws -> Operations.MultilineResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "text/event-stream"), let data = response.data {
            return .body(data)
        }
    }

    return .empty
}

private func handleRichResponse(response: Client.APIResponse) throws -> Operations.RichResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "text/event-stream"), let data = response.data {
            return .body(data)
        }
    }

    return .empty
}

private func handleTextResponse(response: Client.APIResponse) throws -> Operations.TextResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "text/event-stream"), let data = response.data {
            return .body(data)
        }
    }

    return .empty
}

