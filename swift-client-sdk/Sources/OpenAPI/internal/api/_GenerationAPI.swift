// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

class _GenerationAPI: GenerationAPI {
    private let client: Client

    init(client: Client) {
        self.client = client
    }
    
    public func anchorTypesGet() async throws -> Response<Operations.AnchorTypesGetResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureAnchorTypesGetRequest(with: configuration)
            },
            handleResponse: handleAnchorTypesGetResponse
        )
    }
    
    public func arrayCircularReferenceGet() async throws -> Response<Operations.ArrayCircularReferenceGetResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureArrayCircularReferenceGetRequest(with: configuration)
            },
            handleResponse: handleArrayCircularReferenceGetResponse
        )
    }
    
    public func circularReferenceGet() async throws -> Response<Operations.CircularReferenceGetResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureCircularReferenceGetRequest(with: configuration)
            },
            handleResponse: handleCircularReferenceGetResponse
        )
    }
    
    public func dateParamWithDefault(request: Operations.DateParamWithDefaultRequest) async throws -> Response<Operations.DateParamWithDefaultResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureDateParamWithDefaultRequest(with: configuration, request: request)
            },
            handleResponse: handleDateParamWithDefaultResponse
        )
    }
    
    public func dateTimeParamWithDefault(request: Operations.DateTimeParamWithDefaultRequest) async throws -> Response<Operations.DateTimeParamWithDefaultResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureDateTimeParamWithDefaultRequest(with: configuration, request: request)
            },
            handleResponse: handleDateTimeParamWithDefaultResponse
        )
    }
    
    public func decimalParamWithDefault(request: Operations.DecimalParamWithDefaultRequest) async throws -> Response<Operations.DecimalParamWithDefaultResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureDecimalParamWithDefaultRequest(with: configuration, request: request)
            },
            handleResponse: handleDecimalParamWithDefaultResponse
        )
    }
    
    public func deprecatedFieldInSchemaPost(request: Shared.DeprecatedFieldInObject) async throws -> Response<Operations.DeprecatedFieldInSchemaPostResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureDeprecatedFieldInSchemaPostRequest(with: configuration, request: request)
            },
            handleResponse: handleDeprecatedFieldInSchemaPostResponse
        )
    }
    
    public func deprecatedObjectInSchemaGet() async throws -> Response<Operations.DeprecatedObjectInSchemaGetResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureDeprecatedObjectInSchemaGetRequest(with: configuration)
            },
            handleResponse: handleDeprecatedObjectInSchemaGetResponse
        )
    }
    
    public func deprecatedOperationNoCommentsGet(request: Operations.DeprecatedOperationNoCommentsGetRequest) async throws -> Response<Operations.DeprecatedOperationNoCommentsGetResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureDeprecatedOperationNoCommentsGetRequest(with: configuration, request: request)
            },
            handleResponse: handleDeprecatedOperationNoCommentsGetResponse
        )
    }
    
    public func deprecatedOperationWithCommentsGet(request: Operations.DeprecatedOperationWithCommentsGetRequest) async throws -> Response<Operations.DeprecatedOperationWithCommentsGetResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureDeprecatedOperationWithCommentsGetRequest(with: configuration, request: request)
            },
            handleResponse: handleDeprecatedOperationWithCommentsGetResponse
        )
    }
    
    public func emptyObjectGet(request: Operations.EmptyObjectGetRequest) async throws -> Response<Operations.EmptyObjectGetResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureEmptyObjectGetRequest(with: configuration, request: request)
            },
            handleResponse: handleEmptyObjectGetResponse
        )
    }
    
    public func emptyResponseObjectWithCommentGet() async throws -> Response<Operations.EmptyResponseObjectWithCommentGetResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureEmptyResponseObjectWithCommentGetRequest(with: configuration)
            },
            handleResponse: handleEmptyResponseObjectWithCommentGetResponse
        )
    }
    
    public func getGlobalNameOverride() async throws -> Response<Operations.GetGlobalNameOverrideResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureGetGlobalNameOverrideRequest(with: configuration)
            },
            handleResponse: handleGetGlobalNameOverrideResponse
        )
    }
    
    public func ignoredGenerationGet() async throws -> Response<Operations.IgnoredGenerationGetResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureIgnoredGenerationGetRequest(with: configuration)
            },
            handleResponse: handleIgnoredGenerationGetResponse
        )
    }
    
    public func ignoresPost(request: Operations.IgnoresPostRequest) async throws -> Response<Operations.IgnoresPostResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureIgnoresPostRequest(with: configuration, request: request)
            },
            handleResponse: handleIgnoresPostResponse
        )
    }
    
    public func nameOverrideGet(request: Operations.NameOverrideGetRequest) async throws -> Response<Operations.NameOverrideGetResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureNameOverrideGetRequest(with: configuration, request: request)
            },
            handleResponse: handleNameOverrideGetResponse
        )
    }
    
    public func objectCircularReferenceGet() async throws -> Response<Operations.ObjectCircularReferenceGetResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureObjectCircularReferenceGetRequest(with: configuration)
            },
            handleResponse: handleObjectCircularReferenceGetResponse
        )
    }
    
    public func oneOfCircularReferenceGet() async throws -> Response<Operations.OneOfCircularReferenceGetResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureOneOfCircularReferenceGetRequest(with: configuration)
            },
            handleResponse: handleOneOfCircularReferenceGetResponse
        )
    }
    
    public func typedParameterGenerationGet(request: Operations.TypedParameterGenerationGetRequest) async throws -> Response<Operations.TypedParameterGenerationGetResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureTypedParameterGenerationGetRequest(with: configuration, request: request)
            },
            handleResponse: handleTypedParameterGenerationGetResponse
        )
    }
    
    public func usageExamplePost(request: Operations.UsageExamplePostRequest, security: Operations.UsageExamplePostSecurity) async throws -> Response<Operations.UsageExamplePostResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureUsageExamplePostRequest(with: configuration, request: request, security: security)
            },
            handleResponse: handleUsageExamplePostResponse
        )
    }

}

// MARK: - Request Configuration

private func configureAnchorTypesGetRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/anything/anchorTypes"
    configuration.method = .get
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureArrayCircularReferenceGetRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/anything/arrayCircularReference"
    configuration.method = .get
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureCircularReferenceGetRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/anything/circularReference"
    configuration.method = .get
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureDateParamWithDefaultRequest(with configuration: URLRequestConfiguration, request: Operations.DateParamWithDefaultRequest) throws {
    configuration.path = "/anything/dateParamWithDefault"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureDateTimeParamWithDefaultRequest(with configuration: URLRequestConfiguration, request: Operations.DateTimeParamWithDefaultRequest) throws {
    configuration.path = "/anything/dateTimeParamWithDefault"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureDecimalParamWithDefaultRequest(with configuration: URLRequestConfiguration, request: Operations.DecimalParamWithDefaultRequest) throws {
    configuration.path = "/anything/decimalParamWithDefault"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureDeprecatedFieldInSchemaPostRequest(with configuration: URLRequestConfiguration, request: Shared.DeprecatedFieldInObject) throws {
    configuration.path = "/anything/deprecatedFieldInSchema"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureDeprecatedObjectInSchemaGetRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/anything/deprecatedObjectInSchema"
    configuration.method = .get
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureDeprecatedOperationNoCommentsGetRequest(with configuration: URLRequestConfiguration, request: Operations.DeprecatedOperationNoCommentsGetRequest) throws {
    configuration.path = "/anything/deprecatedOperationNoComments"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureDeprecatedOperationWithCommentsGetRequest(with configuration: URLRequestConfiguration, request: Operations.DeprecatedOperationWithCommentsGetRequest) throws {
    configuration.path = "/anything/deprecatedOperationWithComments"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureEmptyObjectGetRequest(with configuration: URLRequestConfiguration, request: Operations.EmptyObjectGetRequest) throws {
    configuration.path = "/anything/{emptyObject}"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureEmptyResponseObjectWithCommentGetRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/anything/emptyResponseObjectWithComment"
    configuration.method = .get
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureGetGlobalNameOverrideRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/anything/globalNameOverride"
    configuration.method = .get
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureIgnoredGenerationGetRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/anything/ignoredGeneration"
    configuration.method = .get
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureIgnoresPostRequest(with configuration: URLRequestConfiguration, request: Operations.IgnoresPostRequest) throws {
    configuration.path = "/anything/ignores"
    configuration.method = .post
    configuration.queryParameterSerializable = request
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request.requestBody)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureNameOverrideGetRequest(with configuration: URLRequestConfiguration, request: Operations.NameOverrideGetRequest) throws {
    configuration.path = "/anything/nameOverride"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureObjectCircularReferenceGetRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/anything/objectCircularReference"
    configuration.method = .get
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureOneOfCircularReferenceGetRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/anything/oneOfCircularReference"
    configuration.method = .get
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureTypedParameterGenerationGetRequest(with configuration: URLRequestConfiguration, request: Operations.TypedParameterGenerationGetRequest) throws {
    configuration.path = "/anything/typedParameterGeneration"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureUsageExamplePostRequest(with configuration: URLRequestConfiguration, request: Operations.UsageExamplePostRequest, security: Operations.UsageExamplePostSecurity) throws {
    configuration.path = "/anything/usageExample"
    configuration.method = .post
    configuration.securityParameterProviding = security
    configuration.queryParameterSerializable = request
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request.requestBody)
    configuration.telemetryHeader = .speakeasyUserAgent
}

// MARK: - Response Handlers

private func handleAnchorTypesGetResponse(response: Client.APIResponse) throws -> Operations.AnchorTypesGetResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .typeFromAnchor(try JSONDecoder().decode(Operations.TypeFromAnchor.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleArrayCircularReferenceGetResponse(response: Client.APIResponse) throws -> Operations.ArrayCircularReferenceGetResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .arrayCircularReferenceObject(try JSONDecoder().decode([Shared.ArrayCircularReferenceObject].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleCircularReferenceGetResponse(response: Client.APIResponse) throws -> Operations.CircularReferenceGetResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .validCircularReferenceObject(try JSONDecoder().decode(Shared.ValidCircularReferenceObject.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleDateParamWithDefaultResponse(response: Client.APIResponse) throws -> Operations.DateParamWithDefaultResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 204 { 
        return .empty
    }

    return .empty
}

private func handleDateTimeParamWithDefaultResponse(response: Client.APIResponse) throws -> Operations.DateTimeParamWithDefaultResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 204 { 
        return .empty
    }

    return .empty
}

private func handleDecimalParamWithDefaultResponse(response: Client.APIResponse) throws -> Operations.DecimalParamWithDefaultResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 204 { 
        return .empty
    }

    return .empty
}

private func handleDeprecatedFieldInSchemaPostResponse(response: Client.APIResponse) throws -> Operations.DeprecatedFieldInSchemaPostResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        return .empty
    }

    return .empty
}

private func handleDeprecatedObjectInSchemaGetResponse(response: Client.APIResponse) throws -> Operations.DeprecatedObjectInSchemaGetResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .deprecatedObjectInSchemaGet200ApplicationJSONObject(try JSONDecoder().decode(Operations.DeprecatedObjectInSchemaGet200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleDeprecatedOperationNoCommentsGetResponse(response: Client.APIResponse) throws -> Operations.DeprecatedOperationNoCommentsGetResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        return .empty
    }

    return .empty
}

private func handleDeprecatedOperationWithCommentsGetResponse(response: Client.APIResponse) throws -> Operations.DeprecatedOperationWithCommentsGetResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        return .empty
    }

    return .empty
}

private func handleEmptyObjectGetResponse(response: Client.APIResponse) throws -> Operations.EmptyObjectGetResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        return .empty
    }

    return .empty
}

private func handleEmptyResponseObjectWithCommentGetResponse(response: Client.APIResponse) throws -> Operations.EmptyResponseObjectWithCommentGetResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/octet-stream"), let data = response.data {
            return .body(data)
        }
    }

    return .empty
}

private func handleGetGlobalNameOverrideResponse(response: Client.APIResponse) throws -> Operations.GetGlobalNameOverrideResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .getGlobalNameOverride200ApplicationJSONObject(try JSONDecoder().decode(Operations.GetGlobalNameOverride200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleIgnoredGenerationGetResponse(response: Client.APIResponse) throws -> Operations.IgnoredGenerationGetResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .ignoredGenerationGet200ApplicationJSONObject(try JSONDecoder().decode(Operations.IgnoredGenerationGet200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleIgnoresPostResponse(response: Client.APIResponse) throws -> Operations.IgnoresPostResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .httpBinSimpleJsonObject(try JSONDecoder().decode(Shared.HttpBinSimpleJsonObject.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleNameOverrideGetResponse(response: Client.APIResponse) throws -> Operations.NameOverrideGetResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .overriddenResponse(try JSONDecoder().decode(Operations.OverriddenResponse.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleObjectCircularReferenceGetResponse(response: Client.APIResponse) throws -> Operations.ObjectCircularReferenceGetResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .objectCircularReferenceObject(try JSONDecoder().decode(Shared.ObjectCircularReferenceObject.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleOneOfCircularReferenceGetResponse(response: Client.APIResponse) throws -> Operations.OneOfCircularReferenceGetResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .oneOfCircularReferenceObject(try JSONDecoder().decode(Shared.OneOfCircularReferenceObject.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleTypedParameterGenerationGetResponse(response: Client.APIResponse) throws -> Operations.TypedParameterGenerationGetResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        return .empty
    }

    return .empty
}

private func handleUsageExamplePostResponse(response: Client.APIResponse) throws -> Operations.UsageExamplePostResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .usageExamplePost200ApplicationJSONObject(try JSONDecoder().decode(Operations.UsageExamplePost200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

