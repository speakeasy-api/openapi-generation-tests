// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.


import Foundation

class _GlobalsAPI: GlobalsAPI {
    private let client: Client

    init(client: Client) {
        self.client = client
    }
    
    public func globalPathParameterGet(request: Operations.GlobalPathParameterGetRequest) async throws -> Response<Operations.GlobalPathParameterGetResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureGlobalPathParameterGetRequest(with: configuration, request: request)
            },
            handleResponse: handleGlobalPathParameterGetResponse
        )
    }
    
    public func globalsHeaderGet(request: Operations.GlobalsHeaderGetRequest) async throws -> Response<Operations.GlobalsHeaderGetResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureGlobalsHeaderGetRequest(with: configuration, request: request)
            },
            handleResponse: handleGlobalsHeaderGetResponse
        )
    }
    
    public func globalsHiddenPost(request: Operations.GlobalsHiddenPostRequest) async throws -> Response<Operations.GlobalsHiddenPostResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureGlobalsHiddenPostRequest(with: configuration, request: request)
            },
            handleResponse: handleGlobalsHiddenPostResponse
        )
    }
    
    public func globalsOptionalHiddenPathParameterOperationRequired(request: Operations.GlobalsOptionalHiddenPathParameterOperationRequiredRequest) async throws -> Response<Operations.GlobalsOptionalHiddenPathParameterOperationRequiredResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureGlobalsOptionalHiddenPathParameterOperationRequiredRequest(with: configuration, request: request)
            },
            handleResponse: handleGlobalsOptionalHiddenPathParameterOperationRequiredResponse
        )
    }
    
    public func globalsOptionalHiddenPathParameterPathRequired(request: Operations.GlobalsOptionalHiddenPathParameterPathRequiredRequest) async throws -> Response<Operations.GlobalsOptionalHiddenPathParameterPathRequiredResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureGlobalsOptionalHiddenPathParameterPathRequiredRequest(with: configuration, request: request)
            },
            handleResponse: handleGlobalsOptionalHiddenPathParameterPathRequiredResponse
        )
    }
    
    public func globalsOptionalPathParameterOperationRequired(request: Operations.GlobalsOptionalPathParameterOperationRequiredRequest) async throws -> Response<Operations.GlobalsOptionalPathParameterOperationRequiredResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureGlobalsOptionalPathParameterOperationRequiredRequest(with: configuration, request: request)
            },
            handleResponse: handleGlobalsOptionalPathParameterOperationRequiredResponse
        )
    }
    
    public func globalsOptionalPathParameterPathRequired(request: Operations.GlobalsOptionalPathParameterPathRequiredRequest) async throws -> Response<Operations.GlobalsOptionalPathParameterPathRequiredResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureGlobalsOptionalPathParameterPathRequiredRequest(with: configuration, request: request)
            },
            handleResponse: handleGlobalsOptionalPathParameterPathRequiredResponse
        )
    }
    
    public func globalsQueryParameterGet(request: Operations.GlobalsQueryParameterGetRequest) async throws -> Response<Operations.GlobalsQueryParameterGetResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureGlobalsQueryParameterGetRequest(with: configuration, request: request)
            },
            handleResponse: handleGlobalsQueryParameterGetResponse
        )
    }

}

// MARK: - Request Configuration

private func configureGlobalPathParameterGetRequest(with configuration: URLRequestConfiguration, request: Operations.GlobalPathParameterGetRequest) throws {
    configuration.path = "/anything/globals/pathParameter/{globalPathParam}"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureGlobalsHeaderGetRequest(with configuration: URLRequestConfiguration, request: Operations.GlobalsHeaderGetRequest) throws {
    configuration.path = "/anything/globals/header"
    configuration.method = .get
    configuration.headerParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureGlobalsHiddenPostRequest(with configuration: URLRequestConfiguration, request: Operations.GlobalsHiddenPostRequest) throws {
    configuration.path = "/anything/globals/hidden/{globalHiddenPathParam}"
    configuration.method = .post
    configuration.pathParameterSerializable = request
    configuration.queryParameterSerializable = request
    configuration.headerParameterSerializable = request
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request.requestBody)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureGlobalsOptionalHiddenPathParameterOperationRequiredRequest(with configuration: URLRequestConfiguration, request: Operations.GlobalsOptionalHiddenPathParameterOperationRequiredRequest) throws {
    configuration.path = "/anything/globals/hidden/{globalOptionalHiddenPathParam}/operation/required"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureGlobalsOptionalHiddenPathParameterPathRequiredRequest(with configuration: URLRequestConfiguration, request: Operations.GlobalsOptionalHiddenPathParameterPathRequiredRequest) throws {
    configuration.path = "/anything/globals/hidden/{globalOptionalHiddenPathParam}/path/required"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureGlobalsOptionalPathParameterOperationRequiredRequest(with configuration: URLRequestConfiguration, request: Operations.GlobalsOptionalPathParameterOperationRequiredRequest) throws {
    configuration.path = "/anything/globals/{globalOptionalPathParam}/operation/required"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureGlobalsOptionalPathParameterPathRequiredRequest(with configuration: URLRequestConfiguration, request: Operations.GlobalsOptionalPathParameterPathRequiredRequest) throws {
    configuration.path = "/anything/globals/{globalOptionalPathParam}/path/required"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureGlobalsQueryParameterGetRequest(with configuration: URLRequestConfiguration, request: Operations.GlobalsQueryParameterGetRequest) throws {
    configuration.path = "/anything/globals/queryParameter"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

// MARK: - Response Handlers

private func handleGlobalPathParameterGetResponse(response: Client.APIResponse) throws -> Operations.GlobalPathParameterGetResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.GlobalPathParameterGetRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleGlobalsHeaderGetResponse(response: Client.APIResponse) throws -> Operations.GlobalsHeaderGetResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.GlobalsHeaderGetRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleGlobalsHiddenPostResponse(response: Client.APIResponse) throws -> Operations.GlobalsHiddenPostResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.GlobalsHiddenPostRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleGlobalsOptionalHiddenPathParameterOperationRequiredResponse(response: Client.APIResponse) throws -> Operations.GlobalsOptionalHiddenPathParameterOperationRequiredResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode >= 200 && httpResponse.statusCode < 300 { 
        return .empty
    }

    return .empty
}

private func handleGlobalsOptionalHiddenPathParameterPathRequiredResponse(response: Client.APIResponse) throws -> Operations.GlobalsOptionalHiddenPathParameterPathRequiredResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode >= 200 && httpResponse.statusCode < 300 { 
        return .empty
    }

    return .empty
}

private func handleGlobalsOptionalPathParameterOperationRequiredResponse(response: Client.APIResponse) throws -> Operations.GlobalsOptionalPathParameterOperationRequiredResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode >= 200 && httpResponse.statusCode < 300 { 
        return .empty
    }

    return .empty
}

private func handleGlobalsOptionalPathParameterPathRequiredResponse(response: Client.APIResponse) throws -> Operations.GlobalsOptionalPathParameterPathRequiredResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode >= 200 && httpResponse.statusCode < 300 { 
        return .empty
    }

    return .empty
}

private func handleGlobalsQueryParameterGetResponse(response: Client.APIResponse) throws -> Operations.GlobalsQueryParameterGetResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.GlobalsQueryParameterGetRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

