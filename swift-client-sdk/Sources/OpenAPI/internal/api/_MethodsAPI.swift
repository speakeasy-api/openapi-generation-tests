// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.


import Foundation

class _MethodsAPI: MethodsAPI {
    private let client: Client

    init(client: Client) {
        self.client = client
    }
    
    public func methodDelete(request: Operations.MethodDeleteRequestBody, server: MethodsServers.MethodDelete?) async throws -> Response<Operations.MethodDeleteResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? MethodsServers.MethodDelete.default(),
            configureRequest: { configuration in
                try configureMethodDeleteRequest(with: configuration, request: request)
            },
            handleResponse: handleMethodDeleteResponse
        )
    }
    
    public func methodGet(server: MethodsServers.MethodGet?) async throws -> Response<Operations.MethodGetResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? MethodsServers.MethodGet.default(),
            configureRequest: { configuration in
                try configureMethodGetRequest(with: configuration)
            },
            handleResponse: handleMethodGetResponse
        )
    }
    
    public func methodHead(server: MethodsServers.MethodHead?) async throws -> Response<Operations.MethodHeadResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? MethodsServers.MethodHead.default(),
            configureRequest: { configuration in
                try configureMethodHeadRequest(with: configuration)
            },
            handleResponse: handleMethodHeadResponse
        )
    }
    
    public func methodOptions(server: MethodsServers.MethodOptions?) async throws -> ResponseWithHeaders<Operations.MethodOptionsResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? MethodsServers.MethodOptions.default(),
            configureRequest: { configuration in
                try configureMethodOptionsRequest(with: configuration)
            },
            handleResponse: handleMethodOptionsResponse
        )
    }
    
    public func methodPatch(request: Operations.MethodPatchRequestBody, server: MethodsServers.MethodPatch?) async throws -> Response<Operations.MethodPatchResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? MethodsServers.MethodPatch.default(),
            configureRequest: { configuration in
                try configureMethodPatchRequest(with: configuration, request: request)
            },
            handleResponse: handleMethodPatchResponse
        )
    }
    
    public func methodPost(request: Operations.MethodPostRequestBody, server: MethodsServers.MethodPost?) async throws -> Response<Operations.MethodPostResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? MethodsServers.MethodPost.default(),
            configureRequest: { configuration in
                try configureMethodPostRequest(with: configuration, request: request)
            },
            handleResponse: handleMethodPostResponse
        )
    }
    
    public func methodPut(request: Operations.MethodPutRequestBody, server: MethodsServers.MethodPut?) async throws -> Response<Operations.MethodPutResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? MethodsServers.MethodPut.default(),
            configureRequest: { configuration in
                try configureMethodPutRequest(with: configuration, request: request)
            },
            handleResponse: handleMethodPutResponse
        )
    }
    
    public func methodTrace(server: MethodsServers.MethodTrace?) async throws -> Response<Operations.MethodTraceResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? MethodsServers.MethodTrace.default(),
            configureRequest: { configuration in
                try configureMethodTraceRequest(with: configuration)
            },
            handleResponse: handleMethodTraceResponse
        )
    }

}

// MARK: - Request Configuration

private func configureMethodDeleteRequest(with configuration: URLRequestConfiguration, request: Operations.MethodDeleteRequestBody) throws {
    configuration.path = "/method/delete"
    configuration.method = .delete
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureMethodGetRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/method/get"
    configuration.method = .get
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureMethodHeadRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/method/head"
    configuration.method = .head
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureMethodOptionsRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/method/options"
    configuration.method = .options
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureMethodPatchRequest(with configuration: URLRequestConfiguration, request: Operations.MethodPatchRequestBody) throws {
    configuration.path = "/method/patch"
    configuration.method = .patch
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureMethodPostRequest(with configuration: URLRequestConfiguration, request: Operations.MethodPostRequestBody) throws {
    configuration.path = "/method/post"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureMethodPutRequest(with configuration: URLRequestConfiguration, request: Operations.MethodPutRequestBody) throws {
    configuration.path = "/method/put"
    configuration.method = .put
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureMethodTraceRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/method/trace"
    configuration.method = .trace
    configuration.telemetryHeader = .speakeasyUserAgent
}

// MARK: - Response Handlers

private func handleMethodDeleteResponse(response: Client.APIResponse) throws -> Operations.MethodDeleteResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .object(try JSONDecoder().decode(Operations.MethodDeleteResponseBody.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleMethodGetResponse(response: Client.APIResponse) throws -> Operations.MethodGetResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .object(try JSONDecoder().decode(Operations.MethodGetResponseBody.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleMethodHeadResponse(response: Client.APIResponse) throws -> Operations.MethodHeadResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        return .empty
    }

    return .empty
}

private func handleMethodOptionsResponse(response: Client.APIResponse) throws -> Operations.MethodOptionsResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        return .empty
    }

    return .empty
}

private func handleMethodPatchResponse(response: Client.APIResponse) throws -> Operations.MethodPatchResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .object(try JSONDecoder().decode(Operations.MethodPatchResponseBody.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleMethodPostResponse(response: Client.APIResponse) throws -> Operations.MethodPostResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .object(try JSONDecoder().decode(Operations.MethodPostResponseBody.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleMethodPutResponse(response: Client.APIResponse) throws -> Operations.MethodPutResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .object(try JSONDecoder().decode(Operations.MethodPutResponseBody.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleMethodTraceResponse(response: Client.APIResponse) throws -> Operations.MethodTraceResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "message/http"), let data = response.data {
            guard let string = String(data: data, encoding: .utf8) else {
                throw ResponseHandlerError.failedToDecodeResponse
            }
            return .res(string)
        }
    }

    return .empty
}

