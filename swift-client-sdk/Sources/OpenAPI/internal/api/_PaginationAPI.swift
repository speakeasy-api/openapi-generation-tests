// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

class _PaginationAPI: PaginationAPI {
    private let client: Client

    init(client: Client) {
        self.client = client
    }
    
    public func paginationCursorBody(request: Operations.PaginationCursorBodyRequestBody, server: PaginationServers.PaginationCursorBody?) async throws -> Response<Operations.PaginationCursorBodyResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? PaginationServers.PaginationCursorBody.default(),
            configureRequest: { configuration in
                try configurePaginationCursorBodyRequest(with: configuration, request: request)
            },
            handleResponse: handlePaginationCursorBodyResponse
        )
    }
    
    public func paginationCursorParams(request: Operations.PaginationCursorParamsRequest, server: PaginationServers.PaginationCursorParams?) async throws -> Response<Operations.PaginationCursorParamsResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? PaginationServers.PaginationCursorParams.default(),
            configureRequest: { configuration in
                try configurePaginationCursorParamsRequest(with: configuration, request: request)
            },
            handleResponse: handlePaginationCursorParamsResponse
        )
    }
    
    public func paginationLimitOffsetOffsetBody(request: Shared.LimitOffsetConfig, server: PaginationServers.PaginationLimitOffsetOffsetBody?) async throws -> Response<Operations.PaginationLimitOffsetOffsetBodyResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? PaginationServers.PaginationLimitOffsetOffsetBody.default(),
            configureRequest: { configuration in
                try configurePaginationLimitOffsetOffsetBodyRequest(with: configuration, request: request)
            },
            handleResponse: handlePaginationLimitOffsetOffsetBodyResponse
        )
    }
    
    public func paginationLimitOffsetOffsetParams(request: Operations.PaginationLimitOffsetOffsetParamsRequest, server: PaginationServers.PaginationLimitOffsetOffsetParams?) async throws -> Response<Operations.PaginationLimitOffsetOffsetParamsResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? PaginationServers.PaginationLimitOffsetOffsetParams.default(),
            configureRequest: { configuration in
                try configurePaginationLimitOffsetOffsetParamsRequest(with: configuration, request: request)
            },
            handleResponse: handlePaginationLimitOffsetOffsetParamsResponse
        )
    }
    
    public func paginationLimitOffsetPageBody(request: Shared.LimitOffsetConfig, server: PaginationServers.PaginationLimitOffsetPageBody?) async throws -> Response<Operations.PaginationLimitOffsetPageBodyResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? PaginationServers.PaginationLimitOffsetPageBody.default(),
            configureRequest: { configuration in
                try configurePaginationLimitOffsetPageBodyRequest(with: configuration, request: request)
            },
            handleResponse: handlePaginationLimitOffsetPageBodyResponse
        )
    }
    
    public func paginationLimitOffsetPageParams(request: Operations.PaginationLimitOffsetPageParamsRequest, server: PaginationServers.PaginationLimitOffsetPageParams?) async throws -> Response<Operations.PaginationLimitOffsetPageParamsResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? PaginationServers.PaginationLimitOffsetPageParams.default(),
            configureRequest: { configuration in
                try configurePaginationLimitOffsetPageParamsRequest(with: configuration, request: request)
            },
            handleResponse: handlePaginationLimitOffsetPageParamsResponse
        )
    }

}

// MARK: - Request Configuration

private func configurePaginationCursorBodyRequest(with configuration: URLRequestConfiguration, request: Operations.PaginationCursorBodyRequestBody) throws {
    configuration.path = "/pagination/cursor"
    configuration.method = .put
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configurePaginationCursorParamsRequest(with configuration: URLRequestConfiguration, request: Operations.PaginationCursorParamsRequest) throws {
    configuration.path = "/pagination/cursor"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configurePaginationLimitOffsetOffsetBodyRequest(with configuration: URLRequestConfiguration, request: Shared.LimitOffsetConfig) throws {
    configuration.path = "/pagination/limitoffset/offset"
    configuration.method = .put
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configurePaginationLimitOffsetOffsetParamsRequest(with configuration: URLRequestConfiguration, request: Operations.PaginationLimitOffsetOffsetParamsRequest) throws {
    configuration.path = "/pagination/limitoffset/offset"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configurePaginationLimitOffsetPageBodyRequest(with configuration: URLRequestConfiguration, request: Shared.LimitOffsetConfig) throws {
    configuration.path = "/pagination/limitoffset/page"
    configuration.method = .put
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configurePaginationLimitOffsetPageParamsRequest(with configuration: URLRequestConfiguration, request: Operations.PaginationLimitOffsetPageParamsRequest) throws {
    configuration.path = "/pagination/limitoffset/page"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

// MARK: - Response Handlers

private func handlePaginationCursorBodyResponse(response: Client.APIResponse) throws -> Operations.PaginationCursorBodyResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.PaginationCursorBodyRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handlePaginationCursorParamsResponse(response: Client.APIResponse) throws -> Operations.PaginationCursorParamsResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.PaginationCursorParamsRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handlePaginationLimitOffsetOffsetBodyResponse(response: Client.APIResponse) throws -> Operations.PaginationLimitOffsetOffsetBodyResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.PaginationLimitOffsetOffsetBodyRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handlePaginationLimitOffsetOffsetParamsResponse(response: Client.APIResponse) throws -> Operations.PaginationLimitOffsetOffsetParamsResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.PaginationLimitOffsetOffsetParamsRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handlePaginationLimitOffsetPageBodyResponse(response: Client.APIResponse) throws -> Operations.PaginationLimitOffsetPageBodyResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.PaginationLimitOffsetPageBodyRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handlePaginationLimitOffsetPageParamsResponse(response: Client.APIResponse) throws -> Operations.PaginationLimitOffsetPageParamsResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.PaginationLimitOffsetPageParamsRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

