// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

class _ParametersAPI: ParametersAPI {
    private let client: Client

    init(client: Client) {
        self.client = client
    }
    
    public func deepObjectQueryParamsMap(request: Operations.DeepObjectQueryParamsMapRequest) async throws -> Response<Operations.DeepObjectQueryParamsMapResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureDeepObjectQueryParamsMapRequest(with: configuration, request: request)
            },
            handleResponse: handleDeepObjectQueryParamsMapResponse
        )
    }
    
    public func deepObjectQueryParamsObject(request: Operations.DeepObjectQueryParamsObjectRequest) async throws -> Response<Operations.DeepObjectQueryParamsObjectResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureDeepObjectQueryParamsObjectRequest(with: configuration, request: request)
            },
            handleResponse: handleDeepObjectQueryParamsObjectResponse
        )
    }
    
    public func duplicateParam(request: Operations.DuplicateParamRequest) async throws -> Response<Operations.DuplicateParamResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureDuplicateParamRequest(with: configuration, request: request)
            },
            handleResponse: handleDuplicateParamResponse
        )
    }
    
    public func formQueryParamsArray(request: Operations.FormQueryParamsArrayRequest) async throws -> Response<Operations.FormQueryParamsArrayResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureFormQueryParamsArrayRequest(with: configuration, request: request)
            },
            handleResponse: handleFormQueryParamsArrayResponse
        )
    }
    
    public func formQueryParamsCamelObject(request: Operations.FormQueryParamsCamelObjectRequest) async throws -> Response<Operations.FormQueryParamsCamelObjectResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureFormQueryParamsCamelObjectRequest(with: configuration, request: request)
            },
            handleResponse: handleFormQueryParamsCamelObjectResponse
        )
    }
    
    public func formQueryParamsMap(request: Operations.FormQueryParamsMapRequest) async throws -> Response<Operations.FormQueryParamsMapResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureFormQueryParamsMapRequest(with: configuration, request: request)
            },
            handleResponse: handleFormQueryParamsMapResponse
        )
    }
    
    public func formQueryParamsObject(request: Operations.FormQueryParamsObjectRequest) async throws -> Response<Operations.FormQueryParamsObjectResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureFormQueryParamsObjectRequest(with: configuration, request: request)
            },
            handleResponse: handleFormQueryParamsObjectResponse
        )
    }
    
    public func formQueryParamsPrimitive(request: Operations.FormQueryParamsPrimitiveRequest) async throws -> Response<Operations.FormQueryParamsPrimitiveResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureFormQueryParamsPrimitiveRequest(with: configuration, request: request)
            },
            handleResponse: handleFormQueryParamsPrimitiveResponse
        )
    }
    
    public func formQueryParamsRefParamObject(request: Operations.FormQueryParamsRefParamObjectRequest) async throws -> Response<Operations.FormQueryParamsRefParamObjectResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureFormQueryParamsRefParamObjectRequest(with: configuration, request: request)
            },
            handleResponse: handleFormQueryParamsRefParamObjectResponse
        )
    }
    
    public func headerParamsArray(request: Operations.HeaderParamsArrayRequest) async throws -> Response<Operations.HeaderParamsArrayResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureHeaderParamsArrayRequest(with: configuration, request: request)
            },
            handleResponse: handleHeaderParamsArrayResponse
        )
    }
    
    public func headerParamsMap(request: Operations.HeaderParamsMapRequest) async throws -> Response<Operations.HeaderParamsMapResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureHeaderParamsMapRequest(with: configuration, request: request)
            },
            handleResponse: handleHeaderParamsMapResponse
        )
    }
    
    public func headerParamsObject(request: Operations.HeaderParamsObjectRequest) async throws -> Response<Operations.HeaderParamsObjectResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureHeaderParamsObjectRequest(with: configuration, request: request)
            },
            handleResponse: handleHeaderParamsObjectResponse
        )
    }
    
    public func headerParamsPrimitive(request: Operations.HeaderParamsPrimitiveRequest) async throws -> Response<Operations.HeaderParamsPrimitiveResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureHeaderParamsPrimitiveRequest(with: configuration, request: request)
            },
            handleResponse: handleHeaderParamsPrimitiveResponse
        )
    }
    
    public func jsonQueryParamsObject(request: Operations.JsonQueryParamsObjectRequest) async throws -> Response<Operations.JsonQueryParamsObjectResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureJsonQueryParamsObjectRequest(with: configuration, request: request)
            },
            handleResponse: handleJsonQueryParamsObjectResponse
        )
    }
    
    public func mixedParametersCamelCase(request: Operations.MixedParametersCamelCaseRequest) async throws -> Response<Operations.MixedParametersCamelCaseResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureMixedParametersCamelCaseRequest(with: configuration, request: request)
            },
            handleResponse: handleMixedParametersCamelCaseResponse
        )
    }
    
    public func mixedParametersPrimitives(request: Operations.MixedParametersPrimitivesRequest) async throws -> Response<Operations.MixedParametersPrimitivesResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureMixedParametersPrimitivesRequest(with: configuration, request: request)
            },
            handleResponse: handleMixedParametersPrimitivesResponse
        )
    }
    
    public func mixedQueryParams(request: Operations.MixedQueryParamsRequest) async throws -> Response<Operations.MixedQueryParamsResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureMixedQueryParamsRequest(with: configuration, request: request)
            },
            handleResponse: handleMixedQueryParamsResponse
        )
    }
    
    public func pathParameterJson(request: Operations.PathParameterJsonRequest) async throws -> Response<Operations.PathParameterJsonResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configurePathParameterJsonRequest(with: configuration, request: request)
            },
            handleResponse: handlePathParameterJsonResponse
        )
    }
    
    public func pipeDelimitedQueryParamsArray(request: Operations.PipeDelimitedQueryParamsArrayRequest) async throws -> Response<Operations.PipeDelimitedQueryParamsArrayResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configurePipeDelimitedQueryParamsArrayRequest(with: configuration, request: request)
            },
            handleResponse: handlePipeDelimitedQueryParamsArrayResponse
        )
    }
    
    public func simplePathParameterArrays(request: Operations.SimplePathParameterArraysRequest) async throws -> Response<Operations.SimplePathParameterArraysResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureSimplePathParameterArraysRequest(with: configuration, request: request)
            },
            handleResponse: handleSimplePathParameterArraysResponse
        )
    }
    
    public func simplePathParameterMaps(request: Operations.SimplePathParameterMapsRequest) async throws -> Response<Operations.SimplePathParameterMapsResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureSimplePathParameterMapsRequest(with: configuration, request: request)
            },
            handleResponse: handleSimplePathParameterMapsResponse
        )
    }
    
    public func simplePathParameterObjects(request: Operations.SimplePathParameterObjectsRequest) async throws -> Response<Operations.SimplePathParameterObjectsResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureSimplePathParameterObjectsRequest(with: configuration, request: request)
            },
            handleResponse: handleSimplePathParameterObjectsResponse
        )
    }
    
    public func simplePathParameterPrimitives(request: Operations.SimplePathParameterPrimitivesRequest) async throws -> Response<Operations.SimplePathParameterPrimitivesResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureSimplePathParameterPrimitivesRequest(with: configuration, request: request)
            },
            handleResponse: handleSimplePathParameterPrimitivesResponse
        )
    }

}

// MARK: - Request Configuration

private func configureDeepObjectQueryParamsMapRequest(with configuration: URLRequestConfiguration, request: Operations.DeepObjectQueryParamsMapRequest) throws {
    configuration.path = "/anything/queryParams/deepObject/map"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureDeepObjectQueryParamsObjectRequest(with configuration: URLRequestConfiguration, request: Operations.DeepObjectQueryParamsObjectRequest) throws {
    configuration.path = "/anything/queryParams/deepObject/obj"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureDuplicateParamRequest(with configuration: URLRequestConfiguration, request: Operations.DuplicateParamRequest) throws {
    configuration.path = "/anything/params/{duplicateParamRequest}"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureFormQueryParamsArrayRequest(with configuration: URLRequestConfiguration, request: Operations.FormQueryParamsArrayRequest) throws {
    configuration.path = "/anything/queryParams/form/array"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureFormQueryParamsCamelObjectRequest(with configuration: URLRequestConfiguration, request: Operations.FormQueryParamsCamelObjectRequest) throws {
    configuration.path = "/anything/queryParams/form/camelObj"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureFormQueryParamsMapRequest(with configuration: URLRequestConfiguration, request: Operations.FormQueryParamsMapRequest) throws {
    configuration.path = "/anything/queryParams/form/map"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureFormQueryParamsObjectRequest(with configuration: URLRequestConfiguration, request: Operations.FormQueryParamsObjectRequest) throws {
    configuration.path = "/anything/queryParams/form/obj"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureFormQueryParamsPrimitiveRequest(with configuration: URLRequestConfiguration, request: Operations.FormQueryParamsPrimitiveRequest) throws {
    configuration.path = "/anything/queryParams/form/primitive"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureFormQueryParamsRefParamObjectRequest(with configuration: URLRequestConfiguration, request: Operations.FormQueryParamsRefParamObjectRequest) throws {
    configuration.path = "/anything/queryParams/form/refParamObject"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureHeaderParamsArrayRequest(with configuration: URLRequestConfiguration, request: Operations.HeaderParamsArrayRequest) throws {
    configuration.path = "/anything/headers/array"
    configuration.method = .get
    configuration.headerParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureHeaderParamsMapRequest(with configuration: URLRequestConfiguration, request: Operations.HeaderParamsMapRequest) throws {
    configuration.path = "/anything/headers/map"
    configuration.method = .get
    configuration.headerParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureHeaderParamsObjectRequest(with configuration: URLRequestConfiguration, request: Operations.HeaderParamsObjectRequest) throws {
    configuration.path = "/anything/headers/obj"
    configuration.method = .get
    configuration.headerParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureHeaderParamsPrimitiveRequest(with configuration: URLRequestConfiguration, request: Operations.HeaderParamsPrimitiveRequest) throws {
    configuration.path = "/anything/headers/primitive"
    configuration.method = .get
    configuration.headerParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureJsonQueryParamsObjectRequest(with configuration: URLRequestConfiguration, request: Operations.JsonQueryParamsObjectRequest) throws {
    configuration.path = "/anything/queryParams/json/obj"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureMixedParametersCamelCaseRequest(with configuration: URLRequestConfiguration, request: Operations.MixedParametersCamelCaseRequest) throws {
    configuration.path = "/anything/mixedParams/path/{path_param}/camelcase"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.queryParameterSerializable = request
    configuration.headerParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureMixedParametersPrimitivesRequest(with configuration: URLRequestConfiguration, request: Operations.MixedParametersPrimitivesRequest) throws {
    configuration.path = "/anything/mixedParams/path/{pathParam}"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.queryParameterSerializable = request
    configuration.headerParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureMixedQueryParamsRequest(with configuration: URLRequestConfiguration, request: Operations.MixedQueryParamsRequest) throws {
    configuration.path = "/anything/queryParams/mixed"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configurePathParameterJsonRequest(with configuration: URLRequestConfiguration, request: Operations.PathParameterJsonRequest) throws {
    configuration.path = "/anything/pathParams/json/{jsonObj}"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configurePipeDelimitedQueryParamsArrayRequest(with configuration: URLRequestConfiguration, request: Operations.PipeDelimitedQueryParamsArrayRequest) throws {
    configuration.path = "/anything/queryParams/pipe/array"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureSimplePathParameterArraysRequest(with configuration: URLRequestConfiguration, request: Operations.SimplePathParameterArraysRequest) throws {
    configuration.path = "/anything/pathParams/arr/{arrParam}"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureSimplePathParameterMapsRequest(with configuration: URLRequestConfiguration, request: Operations.SimplePathParameterMapsRequest) throws {
    configuration.path = "/anything/pathParams/map/{mapParam}/mapExploded/{mapParamExploded}"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureSimplePathParameterObjectsRequest(with configuration: URLRequestConfiguration, request: Operations.SimplePathParameterObjectsRequest) throws {
    configuration.path = "/anything/pathParams/obj/{objParam}/objExploded/{objParamExploded}"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureSimplePathParameterPrimitivesRequest(with configuration: URLRequestConfiguration, request: Operations.SimplePathParameterPrimitivesRequest) throws {
    configuration.path = "/anything/pathParams/str/{strParam}/bool/{boolParam}/int/{intParam}/num/{numParam}"
    configuration.method = .get
    configuration.pathParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

// MARK: - Response Handlers

private func handleDeepObjectQueryParamsMapResponse(response: Client.APIResponse) throws -> Operations.DeepObjectQueryParamsMapResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.DeepObjectQueryParamsMapRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleDeepObjectQueryParamsObjectResponse(response: Client.APIResponse) throws -> Operations.DeepObjectQueryParamsObjectResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.DeepObjectQueryParamsObjectRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleDuplicateParamResponse(response: Client.APIResponse) throws -> Operations.DuplicateParamResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .duplicateParamResponse(try JSONDecoder().decode(Operations.DuplicateParamDuplicateParamResponse.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleFormQueryParamsArrayResponse(response: Client.APIResponse) throws -> Operations.FormQueryParamsArrayResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.FormQueryParamsArrayRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleFormQueryParamsCamelObjectResponse(response: Client.APIResponse) throws -> Operations.FormQueryParamsCamelObjectResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.FormQueryParamsCamelObjectRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleFormQueryParamsMapResponse(response: Client.APIResponse) throws -> Operations.FormQueryParamsMapResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.FormQueryParamsMapRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleFormQueryParamsObjectResponse(response: Client.APIResponse) throws -> Operations.FormQueryParamsObjectResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.FormQueryParamsObjectRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleFormQueryParamsPrimitiveResponse(response: Client.APIResponse) throws -> Operations.FormQueryParamsPrimitiveResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.FormQueryParamsPrimitiveRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleFormQueryParamsRefParamObjectResponse(response: Client.APIResponse) throws -> Operations.FormQueryParamsRefParamObjectResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.FormQueryParamsRefParamObjectRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleHeaderParamsArrayResponse(response: Client.APIResponse) throws -> Operations.HeaderParamsArrayResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.HeaderParamsArrayRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleHeaderParamsMapResponse(response: Client.APIResponse) throws -> Operations.HeaderParamsMapResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.HeaderParamsMapRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleHeaderParamsObjectResponse(response: Client.APIResponse) throws -> Operations.HeaderParamsObjectResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.HeaderParamsObjectRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleHeaderParamsPrimitiveResponse(response: Client.APIResponse) throws -> Operations.HeaderParamsPrimitiveResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.HeaderParamsPrimitiveRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleJsonQueryParamsObjectResponse(response: Client.APIResponse) throws -> Operations.JsonQueryParamsObjectResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.JsonQueryParamsObjectRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleMixedParametersCamelCaseResponse(response: Client.APIResponse) throws -> Operations.MixedParametersCamelCaseResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.MixedParametersCamelCaseRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleMixedParametersPrimitivesResponse(response: Client.APIResponse) throws -> Operations.MixedParametersPrimitivesResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.MixedParametersPrimitivesRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleMixedQueryParamsResponse(response: Client.APIResponse) throws -> Operations.MixedQueryParamsResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.MixedQueryParamsRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handlePathParameterJsonResponse(response: Client.APIResponse) throws -> Operations.PathParameterJsonResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.PathParameterJsonRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handlePipeDelimitedQueryParamsArrayResponse(response: Client.APIResponse) throws -> Operations.PipeDelimitedQueryParamsArrayResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.PipeDelimitedQueryParamsArrayRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleSimplePathParameterArraysResponse(response: Client.APIResponse) throws -> Operations.SimplePathParameterArraysResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.SimplePathParameterArraysRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleSimplePathParameterMapsResponse(response: Client.APIResponse) throws -> Operations.SimplePathParameterMapsResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.SimplePathParameterMapsRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleSimplePathParameterObjectsResponse(response: Client.APIResponse) throws -> Operations.SimplePathParameterObjectsResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.SimplePathParameterObjectsRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleSimplePathParameterPrimitivesResponse(response: Client.APIResponse) throws -> Operations.SimplePathParameterPrimitivesResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.SimplePathParameterPrimitivesRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

