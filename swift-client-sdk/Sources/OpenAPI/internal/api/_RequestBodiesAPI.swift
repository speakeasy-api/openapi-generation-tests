// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

class _RequestBodiesAPI: RequestBodiesAPI {
    private let client: Client

    init(client: Client) {
        self.client = client
    }
    
    public func nullableObjectPost(request: Shared.NullableObject) async throws -> Response<Operations.NullableObjectPostResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureNullableObjectPostRequest(with: configuration, request: request)
            },
            handleResponse: handleNullableObjectPostResponse
        )
    }
    
    public func nullableRequiredEmptyObjectPost(request: Operations.NullableRequiredEmptyObjectPostRequestBody) async throws -> Response<Operations.NullableRequiredEmptyObjectPostResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureNullableRequiredEmptyObjectPostRequest(with: configuration, request: request)
            },
            handleResponse: handleNullableRequiredEmptyObjectPostResponse
        )
    }
    
    public func nullableRequiredPropertyPost(request: Operations.NullableRequiredPropertyPostRequestBody) async throws -> Response<Operations.NullableRequiredPropertyPostResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureNullableRequiredPropertyPostRequest(with: configuration, request: request)
            },
            handleResponse: handleNullableRequiredPropertyPostResponse
        )
    }
    
    public func nullableRequiredSharedObjectPost(request: Operations.NullableRequiredSharedObjectPostRequestBody) async throws -> Response<Operations.NullableRequiredSharedObjectPostResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureNullableRequiredSharedObjectPostRequest(with: configuration, request: request)
            },
            handleResponse: handleNullableRequiredSharedObjectPostResponse
        )
    }
    
    public func requestBodyPostApplicationJsonArray(request: [Shared.SimpleObject], server: RequestBodiesServers.RequestBodyPostApplicationJsonArray?) async throws -> Response<Operations.RequestBodyPostApplicationJsonArrayResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RequestBodiesServers.RequestBodyPostApplicationJsonArray.default(),
            configureRequest: { configuration in
                try configureRequestBodyPostApplicationJsonArrayRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostApplicationJsonArrayResponse
        )
    }
    
    public func requestBodyPostApplicationJsonArrayCamelCase(request: [Shared.SimpleObjectCamelCase], server: RequestBodiesServers.RequestBodyPostApplicationJsonArrayCamelCase?) async throws -> Response<Operations.RequestBodyPostApplicationJsonArrayCamelCaseResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RequestBodiesServers.RequestBodyPostApplicationJsonArrayCamelCase.default(),
            configureRequest: { configuration in
                try configureRequestBodyPostApplicationJsonArrayCamelCaseRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostApplicationJsonArrayCamelCaseResponse
        )
    }
    
    public func requestBodyPostApplicationJsonArrayObj(request: [Shared.SimpleObject]) async throws -> Response<Operations.RequestBodyPostApplicationJsonArrayObjResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostApplicationJsonArrayObjRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostApplicationJsonArrayObjResponse
        )
    }
    
    public func requestBodyPostApplicationJsonArrayObjCamelCase(request: [Shared.SimpleObjectCamelCase]) async throws -> Response<Operations.RequestBodyPostApplicationJsonArrayObjCamelCaseResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostApplicationJsonArrayObjCamelCaseRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostApplicationJsonArrayObjCamelCaseResponse
        )
    }
    
    public func requestBodyPostApplicationJsonArrayOfArray(request: [[Shared.SimpleObject]], server: RequestBodiesServers.RequestBodyPostApplicationJsonArrayOfArray?) async throws -> Response<Operations.RequestBodyPostApplicationJsonArrayOfArrayResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RequestBodiesServers.RequestBodyPostApplicationJsonArrayOfArray.default(),
            configureRequest: { configuration in
                try configureRequestBodyPostApplicationJsonArrayOfArrayRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostApplicationJsonArrayOfArrayResponse
        )
    }
    
    public func requestBodyPostApplicationJsonArrayOfArrayCamelCase(request: [[Shared.SimpleObjectCamelCase]], server: RequestBodiesServers.RequestBodyPostApplicationJsonArrayOfArrayCamelCase?) async throws -> Response<Operations.RequestBodyPostApplicationJsonArrayOfArrayCamelCaseResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RequestBodiesServers.RequestBodyPostApplicationJsonArrayOfArrayCamelCase.default(),
            configureRequest: { configuration in
                try configureRequestBodyPostApplicationJsonArrayOfArrayCamelCaseRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostApplicationJsonArrayOfArrayCamelCaseResponse
        )
    }
    
    public func requestBodyPostApplicationJsonArrayOfArrayOfPrimitive(request: [[String]], server: RequestBodiesServers.RequestBodyPostApplicationJsonArrayOfArrayOfPrimitive?) async throws -> Response<Operations.RequestBodyPostApplicationJsonArrayOfArrayOfPrimitiveResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RequestBodiesServers.RequestBodyPostApplicationJsonArrayOfArrayOfPrimitive.default(),
            configureRequest: { configuration in
                try configureRequestBodyPostApplicationJsonArrayOfArrayOfPrimitiveRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostApplicationJsonArrayOfArrayOfPrimitiveResponse
        )
    }
    
    public func requestBodyPostApplicationJsonArrayOfMap(request: [[String: Shared.SimpleObject]], server: RequestBodiesServers.RequestBodyPostApplicationJsonArrayOfMap?) async throws -> Response<Operations.RequestBodyPostApplicationJsonArrayOfMapResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RequestBodiesServers.RequestBodyPostApplicationJsonArrayOfMap.default(),
            configureRequest: { configuration in
                try configureRequestBodyPostApplicationJsonArrayOfMapRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostApplicationJsonArrayOfMapResponse
        )
    }
    
    public func requestBodyPostApplicationJsonArrayOfMapCamelCase(request: [[String: Shared.SimpleObjectCamelCase]], server: RequestBodiesServers.RequestBodyPostApplicationJsonArrayOfMapCamelCase?) async throws -> Response<Operations.RequestBodyPostApplicationJsonArrayOfMapCamelCaseResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RequestBodiesServers.RequestBodyPostApplicationJsonArrayOfMapCamelCase.default(),
            configureRequest: { configuration in
                try configureRequestBodyPostApplicationJsonArrayOfMapCamelCaseRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostApplicationJsonArrayOfMapCamelCaseResponse
        )
    }
    
    public func requestBodyPostApplicationJsonArrayOfPrimitive(request: [String], server: RequestBodiesServers.RequestBodyPostApplicationJsonArrayOfPrimitive?) async throws -> Response<Operations.RequestBodyPostApplicationJsonArrayOfPrimitiveResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RequestBodiesServers.RequestBodyPostApplicationJsonArrayOfPrimitive.default(),
            configureRequest: { configuration in
                try configureRequestBodyPostApplicationJsonArrayOfPrimitiveRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostApplicationJsonArrayOfPrimitiveResponse
        )
    }
    
    public func requestBodyPostApplicationJsonDeep(request: Shared.DeepObject) async throws -> Response<Operations.RequestBodyPostApplicationJsonDeepResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostApplicationJsonDeepRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostApplicationJsonDeepResponse
        )
    }
    
    public func requestBodyPostApplicationJsonDeepCamelCase(request: Shared.DeepObjectCamelCase) async throws -> Response<Operations.RequestBodyPostApplicationJsonDeepCamelCaseResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostApplicationJsonDeepCamelCaseRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostApplicationJsonDeepCamelCaseResponse
        )
    }
    
    public func requestBodyPostApplicationJsonMap(request: [String: Shared.SimpleObject], server: RequestBodiesServers.RequestBodyPostApplicationJsonMap?) async throws -> Response<Operations.RequestBodyPostApplicationJsonMapResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RequestBodiesServers.RequestBodyPostApplicationJsonMap.default(),
            configureRequest: { configuration in
                try configureRequestBodyPostApplicationJsonMapRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostApplicationJsonMapResponse
        )
    }
    
    public func requestBodyPostApplicationJsonMapCamelCase(request: [String: Shared.SimpleObjectCamelCase], server: RequestBodiesServers.RequestBodyPostApplicationJsonMapCamelCase?) async throws -> Response<Operations.RequestBodyPostApplicationJsonMapCamelCaseResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RequestBodiesServers.RequestBodyPostApplicationJsonMapCamelCase.default(),
            configureRequest: { configuration in
                try configureRequestBodyPostApplicationJsonMapCamelCaseRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostApplicationJsonMapCamelCaseResponse
        )
    }
    
    public func requestBodyPostApplicationJsonMapObj(request: [String: Shared.SimpleObject]) async throws -> Response<Operations.RequestBodyPostApplicationJsonMapObjResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostApplicationJsonMapObjRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostApplicationJsonMapObjResponse
        )
    }
    
    public func requestBodyPostApplicationJsonMapObjCamelCase(request: [String: Shared.SimpleObjectCamelCase]) async throws -> Response<Operations.RequestBodyPostApplicationJsonMapObjCamelCaseResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostApplicationJsonMapObjCamelCaseRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostApplicationJsonMapObjCamelCaseResponse
        )
    }
    
    public func requestBodyPostApplicationJsonMapOfArray(request: [String: [Shared.SimpleObject]], server: RequestBodiesServers.RequestBodyPostApplicationJsonMapOfArray?) async throws -> Response<Operations.RequestBodyPostApplicationJsonMapOfArrayResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RequestBodiesServers.RequestBodyPostApplicationJsonMapOfArray.default(),
            configureRequest: { configuration in
                try configureRequestBodyPostApplicationJsonMapOfArrayRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostApplicationJsonMapOfArrayResponse
        )
    }
    
    public func requestBodyPostApplicationJsonMapOfArrayCamelCase(request: [String: [Shared.SimpleObjectCamelCase]], server: RequestBodiesServers.RequestBodyPostApplicationJsonMapOfArrayCamelCase?) async throws -> Response<Operations.RequestBodyPostApplicationJsonMapOfArrayCamelCaseResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RequestBodiesServers.RequestBodyPostApplicationJsonMapOfArrayCamelCase.default(),
            configureRequest: { configuration in
                try configureRequestBodyPostApplicationJsonMapOfArrayCamelCaseRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostApplicationJsonMapOfArrayCamelCaseResponse
        )
    }
    
    public func requestBodyPostApplicationJsonMapOfMap(request: [String: [String: Shared.SimpleObject]], server: RequestBodiesServers.RequestBodyPostApplicationJsonMapOfMap?) async throws -> Response<Operations.RequestBodyPostApplicationJsonMapOfMapResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RequestBodiesServers.RequestBodyPostApplicationJsonMapOfMap.default(),
            configureRequest: { configuration in
                try configureRequestBodyPostApplicationJsonMapOfMapRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostApplicationJsonMapOfMapResponse
        )
    }
    
    public func requestBodyPostApplicationJsonMapOfMapCamelCase(request: [String: [String: Shared.SimpleObjectCamelCase]], server: RequestBodiesServers.RequestBodyPostApplicationJsonMapOfMapCamelCase?) async throws -> Response<Operations.RequestBodyPostApplicationJsonMapOfMapCamelCaseResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RequestBodiesServers.RequestBodyPostApplicationJsonMapOfMapCamelCase.default(),
            configureRequest: { configuration in
                try configureRequestBodyPostApplicationJsonMapOfMapCamelCaseRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostApplicationJsonMapOfMapCamelCaseResponse
        )
    }
    
    public func requestBodyPostApplicationJsonMapOfMapOfPrimitive(request: [String: [String: String]], server: RequestBodiesServers.RequestBodyPostApplicationJsonMapOfMapOfPrimitive?) async throws -> Response<Operations.RequestBodyPostApplicationJsonMapOfMapOfPrimitiveResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RequestBodiesServers.RequestBodyPostApplicationJsonMapOfMapOfPrimitive.default(),
            configureRequest: { configuration in
                try configureRequestBodyPostApplicationJsonMapOfMapOfPrimitiveRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostApplicationJsonMapOfMapOfPrimitiveResponse
        )
    }
    
    public func requestBodyPostApplicationJsonMapOfPrimitive(request: [String: String], server: RequestBodiesServers.RequestBodyPostApplicationJsonMapOfPrimitive?) async throws -> Response<Operations.RequestBodyPostApplicationJsonMapOfPrimitiveResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RequestBodiesServers.RequestBodyPostApplicationJsonMapOfPrimitive.default(),
            configureRequest: { configuration in
                try configureRequestBodyPostApplicationJsonMapOfPrimitiveRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostApplicationJsonMapOfPrimitiveResponse
        )
    }
    
    public func requestBodyPostApplicationJsonMultipleJsonFiltered(request: Shared.SimpleObject) async throws -> Response<Operations.RequestBodyPostApplicationJsonMultipleJsonFilteredResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostApplicationJsonMultipleJsonFilteredRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostApplicationJsonMultipleJsonFilteredResponse
        )
    }
    
    public func requestBodyPostApplicationJsonSimple(request: Shared.SimpleObject) async throws -> Response<Operations.RequestBodyPostApplicationJsonSimpleResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostApplicationJsonSimpleRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostApplicationJsonSimpleResponse
        )
    }
    
    public func requestBodyPostApplicationJsonSimpleCamelCase(request: Shared.SimpleObjectCamelCase) async throws -> Response<Operations.RequestBodyPostApplicationJsonSimpleCamelCaseResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostApplicationJsonSimpleCamelCaseRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostApplicationJsonSimpleCamelCaseResponse
        )
    }
    
    public func requestBodyPostComplexNumberTypes(request: Operations.RequestBodyPostComplexNumberTypesRequest) async throws -> Response<Operations.RequestBodyPostComplexNumberTypesResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostComplexNumberTypesRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostComplexNumberTypesResponse
        )
    }
    
    public func requestBodyPostDefaultsAndConsts(request: Shared.DefaultsAndConsts) async throws -> Response<Operations.RequestBodyPostDefaultsAndConstsResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostDefaultsAndConstsRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostDefaultsAndConstsResponse
        )
    }
    
    public func requestBodyPostEmptyObject(request: Operations.RequestBodyPostEmptyObjectRequestBody) async throws -> Response<Operations.RequestBodyPostEmptyObjectResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostEmptyObjectRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostEmptyObjectResponse
        )
    }
    
    public func requestBodyPostFormDeep(request: Shared.DeepObject) async throws -> Response<Operations.RequestBodyPostFormDeepResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostFormDeepRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostFormDeepResponse
        )
    }
    
    public func requestBodyPostFormMapPrimitive(request: [String: String]) async throws -> Response<Operations.RequestBodyPostFormMapPrimitiveResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostFormMapPrimitiveRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostFormMapPrimitiveResponse
        )
    }
    
    public func requestBodyPostFormSimple(request: Shared.SimpleObject) async throws -> Response<Operations.RequestBodyPostFormSimpleResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostFormSimpleRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostFormSimpleResponse
        )
    }
    
    public func requestBodyPostJsonDataTypesArrayBigInt(request: [Int]) async throws -> Response<Operations.RequestBodyPostJsonDataTypesArrayBigIntResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostJsonDataTypesArrayBigIntRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostJsonDataTypesArrayBigIntResponse
        )
    }
    
    public func requestBodyPostJsonDataTypesArrayDate(request: [Date]) async throws -> Response<Operations.RequestBodyPostJsonDataTypesArrayDateResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostJsonDataTypesArrayDateRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostJsonDataTypesArrayDateResponse
        )
    }
    
    public func requestBodyPostJsonDataTypesArrayDecimalStr(request: [String]) async throws -> Response<Operations.RequestBodyPostJsonDataTypesArrayDecimalStrResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostJsonDataTypesArrayDecimalStrRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostJsonDataTypesArrayDecimalStrResponse
        )
    }
    
    public func requestBodyPostJsonDataTypesBigInt(request: Int) async throws -> Response<Operations.RequestBodyPostJsonDataTypesBigIntResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostJsonDataTypesBigIntRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostJsonDataTypesBigIntResponse
        )
    }
    
    public func requestBodyPostJsonDataTypesBigIntStr(request: String) async throws -> Response<Operations.RequestBodyPostJsonDataTypesBigIntStrResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostJsonDataTypesBigIntStrRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostJsonDataTypesBigIntStrResponse
        )
    }
    
    public func requestBodyPostJsonDataTypesBoolean(request: Bool) async throws -> Response<Operations.RequestBodyPostJsonDataTypesBooleanResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostJsonDataTypesBooleanRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostJsonDataTypesBooleanResponse
        )
    }
    
    public func requestBodyPostJsonDataTypesDate(request: Date) async throws -> Response<Operations.RequestBodyPostJsonDataTypesDateResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostJsonDataTypesDateRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostJsonDataTypesDateResponse
        )
    }
    
    public func requestBodyPostJsonDataTypesDateTime(request: Date) async throws -> Response<Operations.RequestBodyPostJsonDataTypesDateTimeResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostJsonDataTypesDateTimeRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostJsonDataTypesDateTimeResponse
        )
    }
    
    public func requestBodyPostJsonDataTypesDecimal(request: Double) async throws -> Response<Operations.RequestBodyPostJsonDataTypesDecimalResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostJsonDataTypesDecimalRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostJsonDataTypesDecimalResponse
        )
    }
    
    public func requestBodyPostJsonDataTypesDecimalStr(request: String) async throws -> Response<Operations.RequestBodyPostJsonDataTypesDecimalStrResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostJsonDataTypesDecimalStrRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostJsonDataTypesDecimalStrResponse
        )
    }
    
    public func requestBodyPostJsonDataTypesFloat32(request: Double) async throws -> Response<Operations.RequestBodyPostJsonDataTypesFloat32Response> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostJsonDataTypesFloat32Request(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostJsonDataTypesFloat32Response
        )
    }
    
    public func requestBodyPostJsonDataTypesInt32(request: Int) async throws -> Response<Operations.RequestBodyPostJsonDataTypesInt32Response> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostJsonDataTypesInt32Request(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostJsonDataTypesInt32Response
        )
    }
    
    public func requestBodyPostJsonDataTypesInteger(request: Int) async throws -> Response<Operations.RequestBodyPostJsonDataTypesIntegerResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostJsonDataTypesIntegerRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostJsonDataTypesIntegerResponse
        )
    }
    
    public func requestBodyPostJsonDataTypesMapBigIntStr(request: [String: String]) async throws -> Response<Operations.RequestBodyPostJsonDataTypesMapBigIntStrResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostJsonDataTypesMapBigIntStrRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostJsonDataTypesMapBigIntStrResponse
        )
    }
    
    public func requestBodyPostJsonDataTypesMapDateTime(request: [String: Date]) async throws -> Response<Operations.RequestBodyPostJsonDataTypesMapDateTimeResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostJsonDataTypesMapDateTimeRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostJsonDataTypesMapDateTimeResponse
        )
    }
    
    public func requestBodyPostJsonDataTypesMapDecimal(request: [String: Double]) async throws -> Response<Operations.RequestBodyPostJsonDataTypesMapDecimalResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostJsonDataTypesMapDecimalRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostJsonDataTypesMapDecimalResponse
        )
    }
    
    public func requestBodyPostJsonDataTypesNumber(request: Double) async throws -> Response<Operations.RequestBodyPostJsonDataTypesNumberResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostJsonDataTypesNumberRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostJsonDataTypesNumberResponse
        )
    }
    
    public func requestBodyPostJsonDataTypesString(request: String) async throws -> Response<Operations.RequestBodyPostJsonDataTypesStringResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostJsonDataTypesStringRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostJsonDataTypesStringResponse
        )
    }
    
    public func requestBodyPostMultipleContentTypesComponentFiltered(request: Shared.SimpleObject) async throws -> Response<Operations.RequestBodyPostMultipleContentTypesComponentFilteredResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostMultipleContentTypesComponentFilteredRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostMultipleContentTypesComponentFilteredResponse
        )
    }
    
    public func requestBodyPostMultipleContentTypesInlineFiltered(request: Operations.RequestBodyPostMultipleContentTypesInlineFilteredApplicationJSON) async throws -> Response<Operations.RequestBodyPostMultipleContentTypesInlineFilteredResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostMultipleContentTypesInlineFilteredRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostMultipleContentTypesInlineFilteredResponse
        )
    }
    
    public func requestBodyPostMultipleContentTypesSplitParamForm(request: Operations.RequestBodyPostMultipleContentTypesSplitParamFormRequest) async throws -> Response<Operations.RequestBodyPostMultipleContentTypesSplitParamFormResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostMultipleContentTypesSplitParamFormRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostMultipleContentTypesSplitParamFormResponse
        )
    }
    
    public func requestBodyPostMultipleContentTypesSplitParamJson(request: Operations.RequestBodyPostMultipleContentTypesSplitParamJsonRequest) async throws -> Response<Operations.RequestBodyPostMultipleContentTypesSplitParamJsonResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostMultipleContentTypesSplitParamJsonRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostMultipleContentTypesSplitParamJsonResponse
        )
    }
    
    public func requestBodyPostMultipleContentTypesSplitParamMultipart(request: Operations.RequestBodyPostMultipleContentTypesSplitParamMultipartRequest) async throws -> Response<Operations.RequestBodyPostMultipleContentTypesSplitParamMultipartResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostMultipleContentTypesSplitParamMultipartRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostMultipleContentTypesSplitParamMultipartResponse
        )
    }
    
    public func requestBodyPostMultipleContentTypesSplitForm(request: Operations.RequestBodyPostMultipleContentTypesSplitApplicationXWwwFormUrlencoded) async throws -> Response<Operations.RequestBodyPostMultipleContentTypesSplitFormResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostMultipleContentTypesSplitFormRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostMultipleContentTypesSplitFormResponse
        )
    }
    
    public func requestBodyPostMultipleContentTypesSplitJson(request: Operations.RequestBodyPostMultipleContentTypesSplitApplicationJSON) async throws -> Response<Operations.RequestBodyPostMultipleContentTypesSplitJsonResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostMultipleContentTypesSplitJsonRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostMultipleContentTypesSplitJsonResponse
        )
    }
    
    public func requestBodyPostMultipleContentTypesSplitMultipart(request: Operations.RequestBodyPostMultipleContentTypesSplitMultipartFormData) async throws -> Response<Operations.RequestBodyPostMultipleContentTypesSplitMultipartResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostMultipleContentTypesSplitMultipartRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostMultipleContentTypesSplitMultipartResponse
        )
    }
    
    public func requestBodyPostNotNullableNotRequiredStringBody(request: String) async throws -> Response<Operations.RequestBodyPostNotNullableNotRequiredStringBodyResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostNotNullableNotRequiredStringBodyRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostNotNullableNotRequiredStringBodyResponse
        )
    }
    
    public func requestBodyPostNullArray(request: [String]) async throws -> Response<Operations.RequestBodyPostNullArrayResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostNullArrayRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostNullArrayResponse
        )
    }
    
    public func requestBodyPostNullDictionary(request: [String: String]) async throws -> Response<Operations.RequestBodyPostNullDictionaryResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostNullDictionaryRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostNullDictionaryResponse
        )
    }
    
    public func requestBodyPostNullableNotRequiredStringBody(request: String) async throws -> Response<Operations.RequestBodyPostNullableNotRequiredStringBodyResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostNullableNotRequiredStringBodyRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostNullableNotRequiredStringBodyResponse
        )
    }
    
    public func requestBodyPostNullableRequiredStringBody(request: String) async throws -> Response<Operations.RequestBodyPostNullableRequiredStringBodyResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPostNullableRequiredStringBodyRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPostNullableRequiredStringBodyResponse
        )
    }
    
    public func requestBodyPutBytes(request: Data) async throws -> Response<Operations.RequestBodyPutBytesResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPutBytesRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPutBytesResponse
        )
    }
    
    public func requestBodyPutBytesWithParams(request: Operations.RequestBodyPutBytesWithParamsRequest) async throws -> Response<Operations.RequestBodyPutBytesWithParamsResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPutBytesWithParamsRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPutBytesWithParamsResponse
        )
    }
    
    public func requestBodyPutMultipartDeep(request: Shared.DeepObject) async throws -> Response<Operations.RequestBodyPutMultipartDeepResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPutMultipartDeepRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPutMultipartDeepResponse
        )
    }
    
    public func requestBodyPutMultipartDifferentFileName(request: Operations.RequestBodyPutMultipartDifferentFileNameRequestBody) async throws -> Response<Operations.RequestBodyPutMultipartDifferentFileNameResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPutMultipartDifferentFileNameRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPutMultipartDifferentFileNameResponse
        )
    }
    
    public func requestBodyPutMultipartFile(request: Operations.RequestBodyPutMultipartFileRequestBody) async throws -> Response<Operations.RequestBodyPutMultipartFileResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPutMultipartFileRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPutMultipartFileResponse
        )
    }
    
    public func requestBodyPutMultipartSimple(request: Shared.SimpleObject) async throws -> Response<Operations.RequestBodyPutMultipartSimpleResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPutMultipartSimpleRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPutMultipartSimpleResponse
        )
    }
    
    public func requestBodyPutString(request: String) async throws -> Response<Operations.RequestBodyPutStringResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPutStringRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPutStringResponse
        )
    }
    
    public func requestBodyPutStringWithParams(request: Operations.RequestBodyPutStringWithParamsRequest) async throws -> Response<Operations.RequestBodyPutStringWithParamsResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureRequestBodyPutStringWithParamsRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyPutStringWithParamsResponse
        )
    }
    
    public func requestBodyReadAndWrite(request: Shared.ReadWriteObjectInput, server: RequestBodiesServers.RequestBodyReadAndWrite?) async throws -> Response<Operations.RequestBodyReadAndWriteResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RequestBodiesServers.RequestBodyReadAndWrite.default(),
            configureRequest: { configuration in
                try configureRequestBodyReadAndWriteRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyReadAndWriteResponse
        )
    }
    
    public func requestBodyReadOnlyInput(request: Shared.ReadOnlyObjectInput, server: RequestBodiesServers.RequestBodyReadOnlyInput?) async throws -> Response<Operations.RequestBodyReadOnlyInputResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RequestBodiesServers.RequestBodyReadOnlyInput.default(),
            configureRequest: { configuration in
                try configureRequestBodyReadOnlyInputRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyReadOnlyInputResponse
        )
    }
    
    public func requestBodyReadOnlyUnion(request: Shared.WeaklyTypedOneOfReadOnlyObjectInput, server: RequestBodiesServers.RequestBodyReadOnlyUnion?) async throws -> Response<Operations.RequestBodyReadOnlyUnionResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RequestBodiesServers.RequestBodyReadOnlyUnion.default(),
            configureRequest: { configuration in
                try configureRequestBodyReadOnlyUnionRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyReadOnlyUnionResponse
        )
    }
    
    public func requestBodyReadWriteOnlyUnion(request: Shared.WeaklyTypedOneOfReadWriteObjectInput, server: RequestBodiesServers.RequestBodyReadWriteOnlyUnion?) async throws -> Response<Operations.RequestBodyReadWriteOnlyUnionResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RequestBodiesServers.RequestBodyReadWriteOnlyUnion.default(),
            configureRequest: { configuration in
                try configureRequestBodyReadWriteOnlyUnionRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyReadWriteOnlyUnionResponse
        )
    }
    
    public func requestBodyWriteOnly(request: Shared.WriteOnlyObject, server: RequestBodiesServers.RequestBodyWriteOnly?) async throws -> Response<Operations.RequestBodyWriteOnlyResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RequestBodiesServers.RequestBodyWriteOnly.default(),
            configureRequest: { configuration in
                try configureRequestBodyWriteOnlyRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyWriteOnlyResponse
        )
    }
    
    public func requestBodyWriteOnlyOutput(request: Shared.WriteOnlyObject, server: RequestBodiesServers.RequestBodyWriteOnlyOutput?) async throws -> Response<Operations.RequestBodyWriteOnlyOutputResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RequestBodiesServers.RequestBodyWriteOnlyOutput.default(),
            configureRequest: { configuration in
                try configureRequestBodyWriteOnlyOutputRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyWriteOnlyOutputResponse
        )
    }
    
    public func requestBodyWriteOnlyUnion(request: Shared.WeaklyTypedOneOfWriteOnlyObject, server: RequestBodiesServers.RequestBodyWriteOnlyUnion?) async throws -> Response<Operations.RequestBodyWriteOnlyUnionResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RequestBodiesServers.RequestBodyWriteOnlyUnion.default(),
            configureRequest: { configuration in
                try configureRequestBodyWriteOnlyUnionRequest(with: configuration, request: request)
            },
            handleResponse: handleRequestBodyWriteOnlyUnionResponse
        )
    }

}

// MARK: - Request Configuration

private func configureNullableObjectPostRequest(with configuration: URLRequestConfiguration, request: Shared.NullableObject) throws {
    configuration.path = "/anything/requestBodies/post/nullableRequiredObject"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureNullableRequiredEmptyObjectPostRequest(with configuration: URLRequestConfiguration, request: Operations.NullableRequiredEmptyObjectPostRequestBody) throws {
    configuration.path = "/anything/requestBodies/post/nullableRequiredEmptyObject"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureNullableRequiredPropertyPostRequest(with configuration: URLRequestConfiguration, request: Operations.NullableRequiredPropertyPostRequestBody) throws {
    configuration.path = "/anything/requestBodies/post/nullableRequiredProperty"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureNullableRequiredSharedObjectPostRequest(with configuration: URLRequestConfiguration, request: Operations.NullableRequiredSharedObjectPostRequestBody) throws {
    configuration.path = "/anything/requestBodies/post/nullableRequiredSharedObject"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostApplicationJsonArrayRequest(with configuration: URLRequestConfiguration, request: [Shared.SimpleObject]) throws {
    configuration.path = "/requestbody#array"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostApplicationJsonArrayCamelCaseRequest(with configuration: URLRequestConfiguration, request: [Shared.SimpleObjectCamelCase]) throws {
    configuration.path = "/requestbody#arrayCamelCase"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostApplicationJsonArrayObjRequest(with configuration: URLRequestConfiguration, request: [Shared.SimpleObject]) throws {
    configuration.path = "/anything/requestBodies/post/application/json/array/objResponse"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostApplicationJsonArrayObjCamelCaseRequest(with configuration: URLRequestConfiguration, request: [Shared.SimpleObjectCamelCase]) throws {
    configuration.path = "/anything/requestBodies/post/application/json/array/objResponseCamelCase"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostApplicationJsonArrayOfArrayRequest(with configuration: URLRequestConfiguration, request: [[Shared.SimpleObject]]) throws {
    configuration.path = "/requestbody#arrayOfArrays"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostApplicationJsonArrayOfArrayCamelCaseRequest(with configuration: URLRequestConfiguration, request: [[Shared.SimpleObjectCamelCase]]) throws {
    configuration.path = "/requestbody#arrayOfArraysCamelCase"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostApplicationJsonArrayOfArrayOfPrimitiveRequest(with configuration: URLRequestConfiguration, request: [[String]]) throws {
    configuration.path = "/requestbody#arrayOfArraysOfPrimitives"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostApplicationJsonArrayOfMapRequest(with configuration: URLRequestConfiguration, request: [[String: Shared.SimpleObject]]) throws {
    configuration.path = "/requestbody#arrayOfMaps"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostApplicationJsonArrayOfMapCamelCaseRequest(with configuration: URLRequestConfiguration, request: [[String: Shared.SimpleObjectCamelCase]]) throws {
    configuration.path = "/requestbody#arrayOfMapsCamelCase"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostApplicationJsonArrayOfPrimitiveRequest(with configuration: URLRequestConfiguration, request: [String]) throws {
    configuration.path = "/requestbody#arrayOfPrimitives"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostApplicationJsonDeepRequest(with configuration: URLRequestConfiguration, request: Shared.DeepObject) throws {
    configuration.path = "/anything/requestBodies/post/application/json/deep"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostApplicationJsonDeepCamelCaseRequest(with configuration: URLRequestConfiguration, request: Shared.DeepObjectCamelCase) throws {
    configuration.path = "/anything/requestBodies/post/application/json/deep/camelcase"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostApplicationJsonMapRequest(with configuration: URLRequestConfiguration, request: [String: Shared.SimpleObject]) throws {
    configuration.path = "/requestbody#map"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostApplicationJsonMapCamelCaseRequest(with configuration: URLRequestConfiguration, request: [String: Shared.SimpleObjectCamelCase]) throws {
    configuration.path = "/requestbody#mapCamelCase"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostApplicationJsonMapObjRequest(with configuration: URLRequestConfiguration, request: [String: Shared.SimpleObject]) throws {
    configuration.path = "/anything/requestBodies/post/application/json/map/objResponse"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostApplicationJsonMapObjCamelCaseRequest(with configuration: URLRequestConfiguration, request: [String: Shared.SimpleObjectCamelCase]) throws {
    configuration.path = "/anything/requestBodies/post/application/json/map/objResponseCamelCase"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostApplicationJsonMapOfArrayRequest(with configuration: URLRequestConfiguration, request: [String: [Shared.SimpleObject]]) throws {
    configuration.path = "/requestbody#mapOfArrays"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostApplicationJsonMapOfArrayCamelCaseRequest(with configuration: URLRequestConfiguration, request: [String: [Shared.SimpleObjectCamelCase]]) throws {
    configuration.path = "/requestbody#mapOfArraysCamelCase"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostApplicationJsonMapOfMapRequest(with configuration: URLRequestConfiguration, request: [String: [String: Shared.SimpleObject]]) throws {
    configuration.path = "/requestbody#mapOfMaps"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostApplicationJsonMapOfMapCamelCaseRequest(with configuration: URLRequestConfiguration, request: [String: [String: Shared.SimpleObjectCamelCase]]) throws {
    configuration.path = "/requestbody#mapOfMapsCamelCase"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostApplicationJsonMapOfMapOfPrimitiveRequest(with configuration: URLRequestConfiguration, request: [String: [String: String]]) throws {
    configuration.path = "/requestbody#mapOfMapsOfPrimitives"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostApplicationJsonMapOfPrimitiveRequest(with configuration: URLRequestConfiguration, request: [String: String]) throws {
    configuration.path = "/requestbody#mapOfPrimitives"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostApplicationJsonMultipleJsonFilteredRequest(with configuration: URLRequestConfiguration, request: Shared.SimpleObject) throws {
    configuration.path = "/anything/requestBodies/post/application/json/multiple/json/filtered"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostApplicationJsonSimpleRequest(with configuration: URLRequestConfiguration, request: Shared.SimpleObject) throws {
    configuration.path = "/anything/requestBodies/post/application/json/simple"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostApplicationJsonSimpleCamelCaseRequest(with configuration: URLRequestConfiguration, request: Shared.SimpleObjectCamelCase) throws {
    configuration.path = "/anything/requestBodies/post/application/json/camelcase"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostComplexNumberTypesRequest(with configuration: URLRequestConfiguration, request: Operations.RequestBodyPostComplexNumberTypesRequest) throws {
    configuration.path = "/anything/requestBodies/post/{pathBigInt}/{pathBigIntStr}/{pathDecimal}/{pathDecimalStr}/complex-number-types"
    configuration.method = .post
    configuration.pathParameterSerializable = request
    configuration.queryParameterSerializable = request
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request.complexNumberTypes)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostDefaultsAndConstsRequest(with configuration: URLRequestConfiguration, request: Shared.DefaultsAndConsts) throws {
    configuration.path = "/anything/requestBodies/post/defaultsAndConsts"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostEmptyObjectRequest(with configuration: URLRequestConfiguration, request: Operations.RequestBodyPostEmptyObjectRequestBody) throws {
    configuration.path = "/anything/requestBodies/post/empty-object"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostFormDeepRequest(with configuration: URLRequestConfiguration, request: Shared.DeepObject) throws {
    configuration.path = "/anything/requestBodies/post/form/deep"
    configuration.method = .post
    configuration.contentType = "application/x-www-form-urlencoded"
    configuration.body = try serializeFormData(with: request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostFormMapPrimitiveRequest(with configuration: URLRequestConfiguration, request: [String: String]) throws {
    configuration.path = "/anything/requestBodies/post/form/map/primitive"
    configuration.method = .post
    configuration.contentType = "application/x-www-form-urlencoded"
    configuration.body = try serializeFormData(with: request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostFormSimpleRequest(with configuration: URLRequestConfiguration, request: Shared.SimpleObject) throws {
    configuration.path = "/anything/requestBodies/post/form/simple"
    configuration.method = .post
    configuration.contentType = "application/x-www-form-urlencoded"
    configuration.body = try serializeFormData(with: request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostJsonDataTypesArrayBigIntRequest(with configuration: URLRequestConfiguration, request: [Int]) throws {
    configuration.path = "/anything/requestBodies/post/jsonDataTypes/array/bigInt"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostJsonDataTypesArrayDateRequest(with configuration: URLRequestConfiguration, request: [Date]) throws {
    configuration.path = "/anything/requestBodies/post/jsonDataTypes/array/date"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostJsonDataTypesArrayDecimalStrRequest(with configuration: URLRequestConfiguration, request: [String]) throws {
    configuration.path = "/anything/requestBodies/post/jsonDataTypes/array/decimalStr"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostJsonDataTypesBigIntRequest(with configuration: URLRequestConfiguration, request: Int) throws {
    configuration.path = "/anything/requestBodies/post/jsonDataTypes/bigint"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostJsonDataTypesBigIntStrRequest(with configuration: URLRequestConfiguration, request: String) throws {
    configuration.path = "/anything/requestBodies/post/jsonDataTypes/bigintStr"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostJsonDataTypesBooleanRequest(with configuration: URLRequestConfiguration, request: Bool) throws {
    configuration.path = "/anything/requestBodies/post/jsonDataTypes/boolean"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostJsonDataTypesDateRequest(with configuration: URLRequestConfiguration, request: Date) throws {
    configuration.path = "/anything/requestBodies/post/jsonDataTypes/date"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostJsonDataTypesDateTimeRequest(with configuration: URLRequestConfiguration, request: Date) throws {
    configuration.path = "/anything/requestBodies/post/jsonDataTypes/dateTime"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostJsonDataTypesDecimalRequest(with configuration: URLRequestConfiguration, request: Double) throws {
    configuration.path = "/anything/requestBodies/post/jsonDataTypes/decimal"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostJsonDataTypesDecimalStrRequest(with configuration: URLRequestConfiguration, request: String) throws {
    configuration.path = "/anything/requestBodies/post/jsonDataTypes/decimalStr"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostJsonDataTypesFloat32Request(with configuration: URLRequestConfiguration, request: Double) throws {
    configuration.path = "/anything/requestBodies/post/jsonDataTypes/float32"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostJsonDataTypesInt32Request(with configuration: URLRequestConfiguration, request: Int) throws {
    configuration.path = "/anything/requestBodies/post/jsonDataTypes/int32"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostJsonDataTypesIntegerRequest(with configuration: URLRequestConfiguration, request: Int) throws {
    configuration.path = "/anything/requestBodies/post/jsonDataTypes/integer"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostJsonDataTypesMapBigIntStrRequest(with configuration: URLRequestConfiguration, request: [String: String]) throws {
    configuration.path = "/anything/requestBodies/post/jsonDataTypes/map/bigIntStr"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostJsonDataTypesMapDateTimeRequest(with configuration: URLRequestConfiguration, request: [String: Date]) throws {
    configuration.path = "/anything/requestBodies/post/jsonDataTypes/map/dateTime"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostJsonDataTypesMapDecimalRequest(with configuration: URLRequestConfiguration, request: [String: Double]) throws {
    configuration.path = "/anything/requestBodies/post/jsonDataTypes/map/decimal"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostJsonDataTypesNumberRequest(with configuration: URLRequestConfiguration, request: Double) throws {
    configuration.path = "/anything/requestBodies/post/jsonDataTypes/number"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostJsonDataTypesStringRequest(with configuration: URLRequestConfiguration, request: String) throws {
    configuration.path = "/anything/requestBodies/post/jsonDataTypes/string"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostMultipleContentTypesComponentFilteredRequest(with configuration: URLRequestConfiguration, request: Shared.SimpleObject) throws {
    configuration.path = "/anything/requestBodies/post/multiple/contentTypes/component/filtered"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostMultipleContentTypesInlineFilteredRequest(with configuration: URLRequestConfiguration, request: Operations.RequestBodyPostMultipleContentTypesInlineFilteredApplicationJSON) throws {
    configuration.path = "/anything/requestBodies/post/multiple/contentTypes/inline/filtered"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostMultipleContentTypesSplitParamFormRequest(with configuration: URLRequestConfiguration, request: Operations.RequestBodyPostMultipleContentTypesSplitParamFormRequest) throws {
    configuration.path = "/anything/requestBodies/post/multiple/contentTypes/split/param"
    configuration.method = .post
    configuration.queryParameterSerializable = request
    configuration.contentType = "application/x-www-form-urlencoded"
    configuration.body = try serializeFormData(with: request.requestBody)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostMultipleContentTypesSplitParamJsonRequest(with configuration: URLRequestConfiguration, request: Operations.RequestBodyPostMultipleContentTypesSplitParamJsonRequest) throws {
    configuration.path = "/anything/requestBodies/post/multiple/contentTypes/split/param"
    configuration.method = .post
    configuration.queryParameterSerializable = request
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request.requestBody)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostMultipleContentTypesSplitParamMultipartRequest(with configuration: URLRequestConfiguration, request: Operations.RequestBodyPostMultipleContentTypesSplitParamMultipartRequest) throws {
    configuration.path = "/anything/requestBodies/post/multiple/contentTypes/split/param"
    configuration.method = .post
    configuration.queryParameterSerializable = request
    let (boundary, formData) = try serializeMultipartFormData(with: request.requestBody)
    configuration.contentType = multipartContentType(with: boundary)
    configuration.body = formData
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostMultipleContentTypesSplitFormRequest(with configuration: URLRequestConfiguration, request: Operations.RequestBodyPostMultipleContentTypesSplitApplicationXWwwFormUrlencoded) throws {
    configuration.path = "/anything/requestBodies/post/multiple/contentTypes/split"
    configuration.method = .post
    configuration.contentType = "application/x-www-form-urlencoded"
    configuration.body = try serializeFormData(with: request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostMultipleContentTypesSplitJsonRequest(with configuration: URLRequestConfiguration, request: Operations.RequestBodyPostMultipleContentTypesSplitApplicationJSON) throws {
    configuration.path = "/anything/requestBodies/post/multiple/contentTypes/split"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostMultipleContentTypesSplitMultipartRequest(with configuration: URLRequestConfiguration, request: Operations.RequestBodyPostMultipleContentTypesSplitMultipartFormData) throws {
    configuration.path = "/anything/requestBodies/post/multiple/contentTypes/split"
    configuration.method = .post
    let (boundary, formData) = try serializeMultipartFormData(with: request)
    configuration.contentType = multipartContentType(with: boundary)
    configuration.body = formData
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostNotNullableNotRequiredStringBodyRequest(with configuration: URLRequestConfiguration, request: String) throws {
    configuration.path = "/anything/requestBodies/post/notnullable/notrequired/string"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostNullArrayRequest(with configuration: URLRequestConfiguration, request: [String]) throws {
    configuration.path = "/anything/requestBodies/post/null-array"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostNullDictionaryRequest(with configuration: URLRequestConfiguration, request: [String: String]) throws {
    configuration.path = "/anything/requestBodies/post/null-dictionary"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostNullableNotRequiredStringBodyRequest(with configuration: URLRequestConfiguration, request: String) throws {
    configuration.path = "/anything/requestBodies/post/nullable/notrequired/string"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPostNullableRequiredStringBodyRequest(with configuration: URLRequestConfiguration, request: String) throws {
    configuration.path = "/anything/requestBodies/post/nullable/required/string"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPutBytesRequest(with configuration: URLRequestConfiguration, request: Data) throws {
    configuration.path = "/anything/requestBodies/put/bytes"
    configuration.method = .put
    configuration.contentType = "application/octet-stream"
    configuration.body = request
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPutBytesWithParamsRequest(with configuration: URLRequestConfiguration, request: Operations.RequestBodyPutBytesWithParamsRequest) throws {
    configuration.path = "/anything/requestBodies/put/bytesWithParams"
    configuration.method = .put
    configuration.queryParameterSerializable = request
    configuration.contentType = "application/octet-stream"
    configuration.body = request.requestBody
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPutMultipartDeepRequest(with configuration: URLRequestConfiguration, request: Shared.DeepObject) throws {
    configuration.path = "/anything/requestBodies/put/multipart/deep"
    configuration.method = .put
    let (boundary, formData) = try serializeMultipartFormData(with: request)
    configuration.contentType = multipartContentType(with: boundary)
    configuration.body = formData
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPutMultipartDifferentFileNameRequest(with configuration: URLRequestConfiguration, request: Operations.RequestBodyPutMultipartDifferentFileNameRequestBody) throws {
    configuration.path = "/anything/requestBodies/put/multipart/differentFileName"
    configuration.method = .put
    let (boundary, formData) = try serializeMultipartFormData(with: request)
    configuration.contentType = multipartContentType(with: boundary)
    configuration.body = formData
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPutMultipartFileRequest(with configuration: URLRequestConfiguration, request: Operations.RequestBodyPutMultipartFileRequestBody) throws {
    configuration.path = "/anything/requestBodies/put/multipart/file"
    configuration.method = .put
    let (boundary, formData) = try serializeMultipartFormData(with: request)
    configuration.contentType = multipartContentType(with: boundary)
    configuration.body = formData
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPutMultipartSimpleRequest(with configuration: URLRequestConfiguration, request: Shared.SimpleObject) throws {
    configuration.path = "/anything/requestBodies/put/multipart/simple"
    configuration.method = .put
    let (boundary, formData) = try serializeMultipartFormData(with: request)
    configuration.contentType = multipartContentType(with: boundary)
    configuration.body = formData
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPutStringRequest(with configuration: URLRequestConfiguration, request: String) throws {
    configuration.path = "/anything/requestBodies/put/string"
    configuration.method = .put
    configuration.contentType = "text/plain"
    configuration.body = request.data(using: .utf8)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyPutStringWithParamsRequest(with configuration: URLRequestConfiguration, request: Operations.RequestBodyPutStringWithParamsRequest) throws {
    configuration.path = "/anything/requestBodies/put/stringWithParams"
    configuration.method = .put
    configuration.queryParameterSerializable = request
    configuration.contentType = "text/plain"
    configuration.body = request.requestBody.data(using: .utf8)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyReadAndWriteRequest(with configuration: URLRequestConfiguration, request: Shared.ReadWriteObjectInput) throws {
    configuration.path = "/readonlyandwriteonly"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyReadOnlyInputRequest(with configuration: URLRequestConfiguration, request: Shared.ReadOnlyObjectInput) throws {
    configuration.path = "/readonlyorwriteonly#readOnlyInput"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyReadOnlyUnionRequest(with configuration: URLRequestConfiguration, request: Shared.WeaklyTypedOneOfReadOnlyObjectInput) throws {
    configuration.path = "/readonlyorwriteonly#readOnlyUnion"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyReadWriteOnlyUnionRequest(with configuration: URLRequestConfiguration, request: Shared.WeaklyTypedOneOfReadWriteObjectInput) throws {
    configuration.path = "/readonlyandwriteonly#readWriteOnlyUnion"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyWriteOnlyRequest(with configuration: URLRequestConfiguration, request: Shared.WriteOnlyObject) throws {
    configuration.path = "/readonlyorwriteonly#writeOnly"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyWriteOnlyOutputRequest(with configuration: URLRequestConfiguration, request: Shared.WriteOnlyObject) throws {
    configuration.path = "/writeonlyoutput#writeOnlyOutput"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRequestBodyWriteOnlyUnionRequest(with configuration: URLRequestConfiguration, request: Shared.WeaklyTypedOneOfWriteOnlyObject) throws {
    configuration.path = "/writeonlyoutput#writeOnlyUnion"
    configuration.method = .post
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request)
    if configuration.body == nil {
        throw SerializationError.missingRequiredRequestBody
    }
    configuration.telemetryHeader = .speakeasyUserAgent
}

// MARK: - Response Handlers

private func handleNullableObjectPostResponse(response: Client.APIResponse) throws -> Operations.NullableObjectPostResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.NullableObjectPostRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleNullableRequiredEmptyObjectPostResponse(response: Client.APIResponse) throws -> Operations.NullableRequiredEmptyObjectPostResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            guard let string = String(data: data, encoding: .utf8) else {
                throw ResponseHandlerError.failedToDecodeResponse
            }
            return .nullableRequiredEmptyObjectPost200ApplicationJSONString(string)
        }
    }

    return .empty
}

private func handleNullableRequiredPropertyPostResponse(response: Client.APIResponse) throws -> Operations.NullableRequiredPropertyPostResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            guard let string = String(data: data, encoding: .utf8) else {
                throw ResponseHandlerError.failedToDecodeResponse
            }
            return .nullableRequiredPropertyPost200ApplicationJSONString(string)
        }
    }

    return .empty
}

private func handleNullableRequiredSharedObjectPostResponse(response: Client.APIResponse) throws -> Operations.NullableRequiredSharedObjectPostResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            guard let string = String(data: data, encoding: .utf8) else {
                throw ResponseHandlerError.failedToDecodeResponse
            }
            return .nullableRequiredSharedObjectPost200ApplicationJSONString(string)
        }
    }

    return .empty
}

private func handleRequestBodyPostApplicationJsonArrayResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostApplicationJsonArrayResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .simpleObjects(try JSONDecoder().decode([Shared.SimpleObject].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostApplicationJsonArrayCamelCaseResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostApplicationJsonArrayCamelCaseResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .simpleObjectCamelCases(try JSONDecoder().decode([Shared.SimpleObjectCamelCase].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostApplicationJsonArrayObjResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostApplicationJsonArrayObjResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .arrObjValue(try JSONDecoder().decode(Shared.ArrObjValue.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostApplicationJsonArrayObjCamelCaseResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostApplicationJsonArrayObjCamelCaseResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .arrObjValueCamelCase(try JSONDecoder().decode(Shared.ArrObjValueCamelCase.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostApplicationJsonArrayOfArrayResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostApplicationJsonArrayOfArrayResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .arrs(try JSONDecoder().decode([[Shared.SimpleObject]].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostApplicationJsonArrayOfArrayCamelCaseResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostApplicationJsonArrayOfArrayCamelCaseResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .arrs(try JSONDecoder().decode([[Shared.SimpleObjectCamelCase]].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostApplicationJsonArrayOfArrayOfPrimitiveResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostApplicationJsonArrayOfArrayOfPrimitiveResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .arrs(try JSONDecoder().decode([[String]].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostApplicationJsonArrayOfMapResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostApplicationJsonArrayOfMapResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .maps(try JSONDecoder().decode([[String: Shared.SimpleObject]].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostApplicationJsonArrayOfMapCamelCaseResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostApplicationJsonArrayOfMapCamelCaseResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .maps(try JSONDecoder().decode([[String: Shared.SimpleObjectCamelCase]].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostApplicationJsonArrayOfPrimitiveResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostApplicationJsonArrayOfPrimitiveResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .strings(try JSONDecoder().decode([String].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostApplicationJsonDeepResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostApplicationJsonDeepResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.RequestBodyPostApplicationJsonDeepRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostApplicationJsonDeepCamelCaseResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostApplicationJsonDeepCamelCaseResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.RequestBodyPostApplicationJsonDeepCamelCaseRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostApplicationJsonMapResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostApplicationJsonMapResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode([String: Shared.SimpleObject].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostApplicationJsonMapCamelCaseResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostApplicationJsonMapCamelCaseResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode([String: Shared.SimpleObjectCamelCase].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostApplicationJsonMapObjResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostApplicationJsonMapObjResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .mapObjValue(try JSONDecoder().decode(Shared.MapObjValue.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostApplicationJsonMapObjCamelCaseResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostApplicationJsonMapObjCamelCaseResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .mapObjValueCamelCase(try JSONDecoder().decode(Shared.MapObjValueCamelCase.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostApplicationJsonMapOfArrayResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostApplicationJsonMapOfArrayResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode([String: [Shared.SimpleObject]].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostApplicationJsonMapOfArrayCamelCaseResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostApplicationJsonMapOfArrayCamelCaseResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode([String: [Shared.SimpleObjectCamelCase]].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostApplicationJsonMapOfMapResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostApplicationJsonMapOfMapResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode([String: [String: Shared.SimpleObject]].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostApplicationJsonMapOfMapCamelCaseResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostApplicationJsonMapOfMapCamelCaseResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode([String: [String: Shared.SimpleObjectCamelCase]].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostApplicationJsonMapOfMapOfPrimitiveResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostApplicationJsonMapOfMapOfPrimitiveResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode([String: [String: String]].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostApplicationJsonMapOfPrimitiveResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostApplicationJsonMapOfPrimitiveResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode([String: String].self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostApplicationJsonMultipleJsonFilteredResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostApplicationJsonMultipleJsonFilteredResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.RequestBodyPostApplicationJsonMultipleJsonFilteredRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostApplicationJsonSimpleResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostApplicationJsonSimpleResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.RequestBodyPostApplicationJsonSimpleRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostApplicationJsonSimpleCamelCaseResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostApplicationJsonSimpleCamelCaseResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.RequestBodyPostApplicationJsonSimpleCamelCaseRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostComplexNumberTypesResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostComplexNumberTypesResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .requestBodyPostComplexNumberTypes200ApplicationJSONObject(try JSONDecoder().decode(Operations.RequestBodyPostComplexNumberTypes200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostDefaultsAndConstsResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostDefaultsAndConstsResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .requestBodyPostDefaultsAndConsts200ApplicationJSONObject(try JSONDecoder().decode(Operations.RequestBodyPostDefaultsAndConsts200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostEmptyObjectResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostEmptyObjectResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .requestBodyPostEmptyObject200ApplicationJSONObject(try JSONDecoder().decode(Operations.RequestBodyPostEmptyObject200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostFormDeepResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostFormDeepResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.RequestBodyPostFormDeepRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostFormMapPrimitiveResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostFormMapPrimitiveResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.RequestBodyPostFormMapPrimitiveRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostFormSimpleResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostFormSimpleResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.RequestBodyPostFormSimpleRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostJsonDataTypesArrayBigIntResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostJsonDataTypesArrayBigIntResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .requestBodyPostJSONDataTypesArrayBigInt200ApplicationJSONObject(try JSONDecoder().decode(Operations.RequestBodyPostJSONDataTypesArrayBigInt200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostJsonDataTypesArrayDateResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostJsonDataTypesArrayDateResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .requestBodyPostJSONDataTypesArrayDate200ApplicationJSONObject(try JSONDecoder().decode(Operations.RequestBodyPostJSONDataTypesArrayDate200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostJsonDataTypesArrayDecimalStrResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostJsonDataTypesArrayDecimalStrResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .requestBodyPostJSONDataTypesArrayDecimalStr200ApplicationJSONObject(try JSONDecoder().decode(Operations.RequestBodyPostJSONDataTypesArrayDecimalStr200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostJsonDataTypesBigIntResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostJsonDataTypesBigIntResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .requestBodyPostJSONDataTypesBigInt200ApplicationJSONObject(try JSONDecoder().decode(Operations.RequestBodyPostJSONDataTypesBigInt200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostJsonDataTypesBigIntStrResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostJsonDataTypesBigIntStrResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .requestBodyPostJSONDataTypesBigIntStr200ApplicationJSONObject(try JSONDecoder().decode(Operations.RequestBodyPostJSONDataTypesBigIntStr200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostJsonDataTypesBooleanResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostJsonDataTypesBooleanResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .requestBodyPostJSONDataTypesBoolean200ApplicationJSONObject(try JSONDecoder().decode(Operations.RequestBodyPostJSONDataTypesBoolean200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostJsonDataTypesDateResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostJsonDataTypesDateResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .requestBodyPostJSONDataTypesDate200ApplicationJSONObject(try JSONDecoder().decode(Operations.RequestBodyPostJSONDataTypesDate200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostJsonDataTypesDateTimeResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostJsonDataTypesDateTimeResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .requestBodyPostJSONDataTypesDateTime200ApplicationJSONObject(try JSONDecoder().decode(Operations.RequestBodyPostJSONDataTypesDateTime200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostJsonDataTypesDecimalResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostJsonDataTypesDecimalResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .requestBodyPostJSONDataTypesDecimal200ApplicationJSONObject(try JSONDecoder().decode(Operations.RequestBodyPostJSONDataTypesDecimal200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostJsonDataTypesDecimalStrResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostJsonDataTypesDecimalStrResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .requestBodyPostJSONDataTypesDecimalStr200ApplicationJSONObject(try JSONDecoder().decode(Operations.RequestBodyPostJSONDataTypesDecimalStr200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostJsonDataTypesFloat32Response(response: Client.APIResponse) throws -> Operations.RequestBodyPostJsonDataTypesFloat32Response {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .requestBodyPostJSONDataTypesFloat32200ApplicationJSONObject(try JSONDecoder().decode(Operations.RequestBodyPostJSONDataTypesFloat32200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostJsonDataTypesInt32Response(response: Client.APIResponse) throws -> Operations.RequestBodyPostJsonDataTypesInt32Response {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .requestBodyPostJSONDataTypesInt32200ApplicationJSONObject(try JSONDecoder().decode(Operations.RequestBodyPostJSONDataTypesInt32200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostJsonDataTypesIntegerResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostJsonDataTypesIntegerResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .requestBodyPostJSONDataTypesInteger200ApplicationJSONObject(try JSONDecoder().decode(Operations.RequestBodyPostJSONDataTypesInteger200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostJsonDataTypesMapBigIntStrResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostJsonDataTypesMapBigIntStrResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .requestBodyPostJSONDataTypesMapBigIntStr200ApplicationJSONObject(try JSONDecoder().decode(Operations.RequestBodyPostJSONDataTypesMapBigIntStr200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostJsonDataTypesMapDateTimeResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostJsonDataTypesMapDateTimeResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .requestBodyPostJSONDataTypesMapDateTime200ApplicationJSONObject(try JSONDecoder().decode(Operations.RequestBodyPostJSONDataTypesMapDateTime200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostJsonDataTypesMapDecimalResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostJsonDataTypesMapDecimalResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .requestBodyPostJSONDataTypesMapDecimal200ApplicationJSONObject(try JSONDecoder().decode(Operations.RequestBodyPostJSONDataTypesMapDecimal200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostJsonDataTypesNumberResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostJsonDataTypesNumberResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .requestBodyPostJSONDataTypesNumber200ApplicationJSONObject(try JSONDecoder().decode(Operations.RequestBodyPostJSONDataTypesNumber200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostJsonDataTypesStringResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostJsonDataTypesStringResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .requestBodyPostJSONDataTypesString200ApplicationJSONObject(try JSONDecoder().decode(Operations.RequestBodyPostJSONDataTypesString200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostMultipleContentTypesComponentFilteredResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostMultipleContentTypesComponentFilteredResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.RequestBodyPostMultipleContentTypesComponentFilteredRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostMultipleContentTypesInlineFilteredResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostMultipleContentTypesInlineFilteredResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.RequestBodyPostMultipleContentTypesInlineFilteredRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostMultipleContentTypesSplitParamFormResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostMultipleContentTypesSplitParamFormResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.RequestBodyPostMultipleContentTypesSplitParamFormRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostMultipleContentTypesSplitParamJsonResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostMultipleContentTypesSplitParamJsonResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.RequestBodyPostMultipleContentTypesSplitParamJsonRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostMultipleContentTypesSplitParamMultipartResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostMultipleContentTypesSplitParamMultipartResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.RequestBodyPostMultipleContentTypesSplitParamMultipartRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostMultipleContentTypesSplitFormResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostMultipleContentTypesSplitFormResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.RequestBodyPostMultipleContentTypesSplitFormRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostMultipleContentTypesSplitJsonResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostMultipleContentTypesSplitJsonResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.RequestBodyPostMultipleContentTypesSplitJsonRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostMultipleContentTypesSplitMultipartResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostMultipleContentTypesSplitMultipartResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.RequestBodyPostMultipleContentTypesSplitMultipartRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostNotNullableNotRequiredStringBodyResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostNotNullableNotRequiredStringBodyResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .requestBodyPostNotNullableNotRequiredStringBody200ApplicationJSONObject(try JSONDecoder().decode(Operations.RequestBodyPostNotNullableNotRequiredStringBody200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostNullArrayResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostNullArrayResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .requestBodyPostNullArray200ApplicationJSONObject(try JSONDecoder().decode(Operations.RequestBodyPostNullArray200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostNullDictionaryResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostNullDictionaryResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .requestBodyPostNullDictionary200ApplicationJSONObject(try JSONDecoder().decode(Operations.RequestBodyPostNullDictionary200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostNullableNotRequiredStringBodyResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostNullableNotRequiredStringBodyResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .requestBodyPostNullableNotRequiredStringBody200ApplicationJSONObject(try JSONDecoder().decode(Operations.RequestBodyPostNullableNotRequiredStringBody200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPostNullableRequiredStringBodyResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPostNullableRequiredStringBodyResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .requestBodyPostNullableRequiredStringBody200ApplicationJSONObject(try JSONDecoder().decode(Operations.RequestBodyPostNullableRequiredStringBody200ApplicationJSON.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPutBytesResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPutBytesResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.RequestBodyPutBytesRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPutBytesWithParamsResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPutBytesWithParamsResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.RequestBodyPutBytesWithParamsRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPutMultipartDeepResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPutMultipartDeepResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.RequestBodyPutMultipartDeepRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPutMultipartDifferentFileNameResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPutMultipartDifferentFileNameResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.RequestBodyPutMultipartDifferentFileNameRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPutMultipartFileResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPutMultipartFileResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.RequestBodyPutMultipartFileRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPutMultipartSimpleResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPutMultipartSimpleResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.RequestBodyPutMultipartSimpleRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPutStringResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPutStringResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.RequestBodyPutStringRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyPutStringWithParamsResponse(response: Client.APIResponse) throws -> Operations.RequestBodyPutStringWithParamsResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .res(try JSONDecoder().decode(Operations.RequestBodyPutStringWithParamsRes.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyReadAndWriteResponse(response: Client.APIResponse) throws -> Operations.RequestBodyReadAndWriteResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .readWriteObject(try JSONDecoder().decode(Shared.ReadWriteObjectOutput.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyReadOnlyInputResponse(response: Client.APIResponse) throws -> Operations.RequestBodyReadOnlyInputResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .readOnlyObject(try JSONDecoder().decode(Shared.ReadOnlyObject.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyReadOnlyUnionResponse(response: Client.APIResponse) throws -> Operations.RequestBodyReadOnlyUnionResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .weaklyTypedOneOfReadOnlyObject(try JSONDecoder().decode(Shared.WeaklyTypedOneOfReadOnlyObject.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyReadWriteOnlyUnionResponse(response: Client.APIResponse) throws -> Operations.RequestBodyReadWriteOnlyUnionResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .weaklyTypedOneOfReadWriteObject(try JSONDecoder().decode(Shared.WeaklyTypedOneOfReadWriteObjectOutput.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyWriteOnlyResponse(response: Client.APIResponse) throws -> Operations.RequestBodyWriteOnlyResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .readOnlyObject(try JSONDecoder().decode(Shared.ReadOnlyObject.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyWriteOnlyOutputResponse(response: Client.APIResponse) throws -> Operations.RequestBodyWriteOnlyOutputResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .writeOnlyObject(try JSONDecoder().decode(Shared.WriteOnlyObjectOutput.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRequestBodyWriteOnlyUnionResponse(response: Client.APIResponse) throws -> Operations.RequestBodyWriteOnlyUnionResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .weaklyTypedOneOfWriteOnlyObject(try JSONDecoder().decode(Shared.WeaklyTypedOneOfWriteOnlyObjectOutput.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

