// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

class _RetriesAPI: RetriesAPI {
    private let client: Client

    init(client: Client) {
        self.client = client
    }
    
    public func retriesGet(request: Operations.RetriesGetRequest, server: RetriesServers.RetriesGet?) async throws -> Response<Operations.RetriesGetResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RetriesServers.RetriesGet.default(),
            configureRequest: { configuration in
                try configureRetriesGetRequest(with: configuration, request: request)
            },
            handleResponse: handleRetriesGetResponse
        )
    }

}

// MARK: - Request Configuration

private func configureRetriesGetRequest(with configuration: URLRequestConfiguration, request: Operations.RetriesGetRequest) throws {
    configuration.path = "/retries"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

// MARK: - Response Handlers

private func handleRetriesGetResponse(response: Client.APIResponse) throws -> Operations.RetriesGetResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .retries(try JSONDecoder().decode(Operations.RetriesGetRetries.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

