// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

class _RetriesAPI: RetriesAPI {
    private let client: Client

    init(client: Client) {
        self.client = client
    }
    
    public func retriesAfter(request: Operations.RetriesAfterRequest, server: RetriesServers.RetriesAfter?) async throws -> Response<Operations.RetriesAfterResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RetriesServers.RetriesAfter.default(),
            configureRequest: { configuration in
                try configureRetriesAfterRequest(with: configuration, request: request)
            },
            handleResponse: handleRetriesAfterResponse
        )
    }
    
    public func retriesConnectErrorGet(server: RetriesServers.RetriesConnectErrorGet?) async throws -> Response<Operations.RetriesConnectErrorGetResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RetriesServers.RetriesConnectErrorGet.default(),
            configureRequest: { configuration in
                try configureRetriesConnectErrorGetRequest(with: configuration)
            },
            handleResponse: handleRetriesConnectErrorGetResponse
        )
    }
    
    public func retriesFlatEmptyResponsePost(request: Operations.RetriesFlatEmptyResponsePostRequest, server: RetriesServers.RetriesFlatEmptyResponsePost?) async throws -> Response<Operations.RetriesFlatEmptyResponsePostResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RetriesServers.RetriesFlatEmptyResponsePost.default(),
            configureRequest: { configuration in
                try configureRetriesFlatEmptyResponsePostRequest(with: configuration, request: request)
            },
            handleResponse: handleRetriesFlatEmptyResponsePostResponse
        )
    }
    
    public func retriesGet(request: Operations.RetriesGetRequest, server: RetriesServers.RetriesGet?) async throws -> Response<Operations.RetriesGetResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RetriesServers.RetriesGet.default(),
            configureRequest: { configuration in
                try configureRetriesGetRequest(with: configuration, request: request)
            },
            handleResponse: handleRetriesGetResponse
        )
    }
    
    public func retriesPost(request: Operations.RetriesPostRequest, server: RetriesServers.RetriesPost?) async throws -> Response<Operations.RetriesPostResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? RetriesServers.RetriesPost.default(),
            configureRequest: { configuration in
                try configureRetriesPostRequest(with: configuration, request: request)
            },
            handleResponse: handleRetriesPostResponse
        )
    }

}

// MARK: - Request Configuration

private func configureRetriesAfterRequest(with configuration: URLRequestConfiguration, request: Operations.RetriesAfterRequest) throws {
    configuration.path = "/retries/after"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRetriesConnectErrorGetRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/retriesConnectError"
    configuration.method = .get
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRetriesFlatEmptyResponsePostRequest(with configuration: URLRequestConfiguration, request: Operations.RetriesFlatEmptyResponsePostRequest) throws {
    configuration.path = "/retriesFlatEmptyResponse"
    configuration.method = .post
    configuration.queryParameterSerializable = request
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request.requestBody)
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRetriesGetRequest(with configuration: URLRequestConfiguration, request: Operations.RetriesGetRequest) throws {
    configuration.path = "/retries"
    configuration.method = .get
    configuration.queryParameterSerializable = request
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureRetriesPostRequest(with configuration: URLRequestConfiguration, request: Operations.RetriesPostRequest) throws {
    configuration.path = "/retries"
    configuration.method = .post
    configuration.queryParameterSerializable = request
    configuration.contentType = "application/json"
    configuration.body = try jsonEncoder().encode(request.requestBody)
    configuration.telemetryHeader = .speakeasyUserAgent
}

// MARK: - Response Handlers

private func handleRetriesAfterResponse(response: Client.APIResponse) throws -> Operations.RetriesAfterResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .retries(try JSONDecoder().decode(Operations.RetriesAfterRetries.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRetriesConnectErrorGetResponse(response: Client.APIResponse) throws -> Operations.RetriesConnectErrorGetResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .retries(try JSONDecoder().decode(Operations.RetriesConnectErrorGetRetries.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRetriesFlatEmptyResponsePostResponse(response: Client.APIResponse) throws -> Operations.RetriesFlatEmptyResponsePostResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        return .empty
    }

    return .empty
}

private func handleRetriesGetResponse(response: Client.APIResponse) throws -> Operations.RetriesGetResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .retries(try JSONDecoder().decode(Operations.RetriesGetRetries.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

private func handleRetriesPostResponse(response: Client.APIResponse) throws -> Operations.RetriesPostResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        if httpResponse.contentType.matchContentType(pattern: "application/json"), let data = response.data {
            do {
                return .retries(try JSONDecoder().decode(Operations.RetriesPostRetries.self, from: data))
            } catch {
                throw ResponseHandlerError.failedToDecodeJSON(error)
            }
        }
    }

    return .empty
}

