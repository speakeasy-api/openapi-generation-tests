// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.


import Foundation

class _ServersAPI: ServersAPI {
    private let client: Client

    init(client: Client) {
        self.client = client
    }
    
    public func selectGlobalServer() async throws -> ResponseWithHeaders<Operations.SelectGlobalServerResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureSelectGlobalServerRequest(with: configuration)
            },
            handleResponse: handleSelectGlobalServerResponse
        )
    }
    
    public func selectServerWithID(server: ServersServers.SelectServerWithID?) async throws -> Response<Operations.SelectServerWithIDResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? ServersServers.SelectServerWithID.default(),
            configureRequest: { configuration in
                try configureSelectServerWithIDRequest(with: configuration)
            },
            handleResponse: handleSelectServerWithIDResponse
        )
    }
    
    public func serverWithProtocolTemplate(server: ServersServers.ServerWithProtocolTemplate?) async throws -> Response<Operations.ServerWithProtocolTemplateResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? ServersServers.ServerWithProtocolTemplate.default(),
            configureRequest: { configuration in
                try configureServerWithProtocolTemplateRequest(with: configuration)
            },
            handleResponse: handleServerWithProtocolTemplateResponse
        )
    }
    
    public func serverWithTemplates(server: ServersServers.ServerWithTemplates?) async throws -> Response<Operations.ServerWithTemplatesResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? ServersServers.ServerWithTemplates.default(),
            configureRequest: { configuration in
                try configureServerWithTemplatesRequest(with: configuration)
            },
            handleResponse: handleServerWithTemplatesResponse
        )
    }
    
    public func serverWithTemplatesGlobal() async throws -> Response<Operations.ServerWithTemplatesGlobalResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureServerWithTemplatesGlobalRequest(with: configuration)
            },
            handleResponse: handleServerWithTemplatesGlobalResponse
        )
    }
    
    public func serversByIDWithTemplates(server: ServersServers.ServersByIDWithTemplates?) async throws -> Response<Operations.ServersByIDWithTemplatesResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? ServersServers.ServersByIDWithTemplates.default(),
            configureRequest: { configuration in
                try configureServersByIDWithTemplatesRequest(with: configuration)
            },
            handleResponse: handleServersByIDWithTemplatesResponse
        )
    }
    
    public func serversOverrideGlobalServerURL() async throws -> Response<Operations.ServersOverrideGlobalServerURLResponse> {
        return try await client.makeRequest(
            configureRequest: { configuration in
                try configureServersOverrideGlobalServerURLRequest(with: configuration)
            },
            handleResponse: handleServersOverrideGlobalServerURLResponse
        )
    }
    
    public func serversOverrideOperationServerURL(server: ServersServers.ServersOverrideOperationServerURL?) async throws -> Response<Operations.ServersOverrideOperationServerURLResponse> {
        return try await client.makeRequest(
            with: try server?.server() ?? ServersServers.ServersOverrideOperationServerURL.default(),
            configureRequest: { configuration in
                try configureServersOverrideOperationServerURLRequest(with: configuration)
            },
            handleResponse: handleServersOverrideOperationServerURLResponse
        )
    }

}

// MARK: - Request Configuration

private func configureSelectGlobalServerRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/anything/selectGlobalServer"
    configuration.method = .get
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureSelectServerWithIDRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/anything/selectServerWithID"
    configuration.method = .get
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureServerWithProtocolTemplateRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/anything/serverWithProtocolTemplate"
    configuration.method = .get
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureServerWithTemplatesRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/anything/serverWithTemplates"
    configuration.method = .get
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureServerWithTemplatesGlobalRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/anything/serverWithTemplatesGlobal"
    configuration.method = .get
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureServersByIDWithTemplatesRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/anything/serversByIDWithTemplates"
    configuration.method = .get
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureServersOverrideGlobalServerURLRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/ping#serversOverrideGlobalServerURL"
    configuration.method = .get
    configuration.telemetryHeader = .speakeasyUserAgent
}

private func configureServersOverrideOperationServerURLRequest(with configuration: URLRequestConfiguration) throws {
    configuration.path = "/ping#serversOverrideOperationServerURL"
    configuration.method = .get
    configuration.telemetryHeader = .speakeasyUserAgent
}

// MARK: - Response Handlers

private func handleSelectGlobalServerResponse(response: Client.APIResponse) throws -> Operations.SelectGlobalServerResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        return .empty
    }

    return .empty
}

private func handleSelectServerWithIDResponse(response: Client.APIResponse) throws -> Operations.SelectServerWithIDResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        return .empty
    }

    return .empty
}

private func handleServerWithProtocolTemplateResponse(response: Client.APIResponse) throws -> Operations.ServerWithProtocolTemplateResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        return .empty
    }

    return .empty
}

private func handleServerWithTemplatesResponse(response: Client.APIResponse) throws -> Operations.ServerWithTemplatesResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        return .empty
    }

    return .empty
}

private func handleServerWithTemplatesGlobalResponse(response: Client.APIResponse) throws -> Operations.ServerWithTemplatesGlobalResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        return .empty
    }

    return .empty
}

private func handleServersByIDWithTemplatesResponse(response: Client.APIResponse) throws -> Operations.ServersByIDWithTemplatesResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        return .empty
    }

    return .empty
}

private func handleServersOverrideGlobalServerURLResponse(response: Client.APIResponse) throws -> Operations.ServersOverrideGlobalServerURLResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        return .empty
    }

    return .empty
}

private func handleServersOverrideOperationServerURLResponse(response: Client.APIResponse) throws -> Operations.ServersOverrideOperationServerURLResponse {
    let httpResponse = response.httpResponse
    
    if httpResponse.statusCode == 200 { 
        return .empty
    }

    return .empty
}

