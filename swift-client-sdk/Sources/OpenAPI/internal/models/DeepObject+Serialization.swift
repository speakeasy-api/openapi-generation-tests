// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

extension Shared.DeepObject: Serializable {
    func serialize(with format: SerializableFormat) throws -> String {
        switch format {
        case .multipart:
            // Deep, non-JSON encoded multipart serialization is not supported.
            throw SerializationError.invalidSerializationParameter(type: "Shared.DeepObject", format: format.formatDescription)
        case .form:
            return serializeModel(with: try serializedFormParameters(formatOverride: format), format: format)
        case .path, .query, .header:
            throw SerializationError.invalidSerializationParameter(type: "Shared.DeepObject", format: format.formatDescription)
        }
    }
}

extension Shared.DeepObject: MultipartFormBodySerializable {
    func serializedMultipartFormParameters(formatOverride: SerializableFormat?) throws -> [MultipartFormParameter] {
        return [
            .value(name: "any", serialized: try serializeEncodable(any)),
            .value(name: "arr", serialized: try serializeEncodable(arr)),
            .value(name: "bool", serialized: try bool.serialize(with: .multipart)),
            .value(name: "int", serialized: try int.serialize(with: .multipart)),
            .value(name: "map", serialized: try serializeEncodable(map)),
            .value(name: "num", serialized: try numWrapper.serialize(with: .multipart)),
            .value(name: "obj", serialized: try serializeEncodable(obj)),
            .value(name: "str", serialized: try str.serialize(with: .multipart)),
            .value(name: "type", serialized: try type?.serialize(with: .multipart))
        ]
    }
}

extension Shared.DeepObject: FormBodySerializable {
    func serializedFormParameters(formatOverride: SerializableFormat?) throws -> [SerializedParameter] {
        return [
            SerializedParameter(name: "any", serialized: try serializeEncodable(any)),
            SerializedParameter(name: "arr", serialized: try serializeEncodable(arr)),
            SerializedParameter(name: "bool", serialized: try bool.serialize(with: .form(explode: true))),
            SerializedParameter(name: "int", serialized: try int.serialize(with: .form(explode: true))),
            SerializedParameter(name: "map", serialized: try serializeEncodable(map)),
            SerializedParameter(name: "num", serialized: try numWrapper.serialize(with: .form(explode: true))),
            SerializedParameter(name: "obj", serialized: try serializeEncodable(obj)),
            SerializedParameter(name: "str", serialized: try str.serialize(with: .form(explode: true))),
            SerializedParameter(name: "type", serialized: try type?.serialize(with: .form(explode: true)))
        ]
    }
}
