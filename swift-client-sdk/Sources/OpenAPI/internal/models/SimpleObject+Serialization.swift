// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.


import Foundation

extension Shared.SimpleObject: Serializable {
    func serialize(with format: SerializableFormat) throws -> String {
        switch format {
        case .path:
            return try serializePathParameterSerializable(self, with: format)
        case .query:
            return try serializeQueryParameterSerializable(self, with: format)
        case .header:
            return serializeModel(with: try serializedHeaderParameters(), format: format)
        case .multipart:
            // Deep, non-JSON encoded multipart serialization is not supported.
            throw SerializationError.invalidSerializationParameter(type: "Shared.SimpleObject", format: format.formatDescription)
        case .form:
            return serializeModel(with: try serializedFormParameters(formatOverride: format), format: format)
        }
    }

    func serializeQueryParameters(with format: SerializableFormat) throws -> [QueryParameter] {
        return try serializedQueryParameters(with: nil, formatOverride: format)
    }
}

extension Shared.SimpleObject: PathParameterSerializable {
    func serializedPathParameters(formatOverride: SerializableFormat?) throws -> [String: String] {
        return [
            "any": try any.serialize(with: formatOverride ?? .path(explode: false)),
            "bigint": try bigint?.serialize(with: formatOverride ?? .path(explode: false)),
            "bigintStr": try bigintStr?.serialize(with: formatOverride ?? .path(explode: false)),
            "bool": try bool.serialize(with: formatOverride ?? .path(explode: false)),
            "boolOpt": try boolOpt?.serialize(with: formatOverride ?? .path(explode: false)),
            "date": try dateWrapper.serialize(with: formatOverride ?? .path(explode: false)),
            "dateTime": try dateTimeWrapper.serialize(with: formatOverride ?? .path(explode: false)),
            "decimal": try decimal != nil ? decimalWrapper.serialize(with: formatOverride ?? .path(explode: false)) : nil,
            "decimalStr": try decimalStr?.serialize(with: formatOverride ?? .path(explode: false)),
            "enum": try `enum`.serialize(with: formatOverride ?? .path(explode: false)),
            "float32": try float32Wrapper.serialize(with: formatOverride ?? .path(explode: false)),
            "int": try int.serialize(with: formatOverride ?? .path(explode: false)),
            "int32": try int32.serialize(with: formatOverride ?? .path(explode: false)),
            "int32Enum": try int32Enum.serialize(with: formatOverride ?? .path(explode: false)),
            "intEnum": try intEnum.serialize(with: formatOverride ?? .path(explode: false)),
            "intOptNull": try intOptNull?.serialize(with: formatOverride ?? .path(explode: false)),
            "num": try numWrapper.serialize(with: formatOverride ?? .path(explode: false)),
            "numOptNull": try numOptNull != nil ? numOptNullWrapper.serialize(with: formatOverride ?? .path(explode: false)) : nil,
            "str": try str.serialize(with: formatOverride ?? .path(explode: false)),
            "strOpt": try strOpt?.serialize(with: formatOverride ?? .path(explode: false)),
        ].compactMapValues { $0 }
    }
}

extension Shared.SimpleObject: QueryParameterSerializable {
    func serializedQueryParameters(with parameterDefaults: ParameterDefaults?, formatOverride: SerializableFormat?) throws -> [QueryParameter] {
        let builder = QueryParameterBuilder()
        try builder.addQueryParameters(from: any, named: "any", format: formatOverride ?? .query(style: .form, explode: false), parameterDefaults: parameterDefaults)
        try builder.addQueryParameters(from: bool, named: "bool", format: formatOverride ?? .query(style: .form, explode: false), parameterDefaults: parameterDefaults)
        try builder.addQueryParameters(from: dateWrapper, named: "date", format: formatOverride ?? .query(style: .form, explode: false), parameterDefaults: parameterDefaults)
        try builder.addQueryParameters(from: dateTimeWrapper, named: "dateTime", format: formatOverride ?? .query(style: .form, explode: false), parameterDefaults: parameterDefaults)
        try builder.addQueryParameters(from: `enum`, named: "enum", format: formatOverride ?? .query(style: .form, explode: false), parameterDefaults: parameterDefaults)
        try builder.addQueryParameters(from: float32Wrapper, named: "float32", format: formatOverride ?? .query(style: .form, explode: false), parameterDefaults: parameterDefaults)
        try builder.addQueryParameters(from: int, named: "int", format: formatOverride ?? .query(style: .form, explode: false), parameterDefaults: parameterDefaults)
        try builder.addQueryParameters(from: int32, named: "int32", format: formatOverride ?? .query(style: .form, explode: false), parameterDefaults: parameterDefaults)
        try builder.addQueryParameters(from: int32Enum, named: "int32Enum", format: formatOverride ?? .query(style: .form, explode: false), parameterDefaults: parameterDefaults)
        try builder.addQueryParameters(from: intEnum, named: "intEnum", format: formatOverride ?? .query(style: .form, explode: false), parameterDefaults: parameterDefaults)
        try builder.addQueryParameters(from: numWrapper, named: "num", format: formatOverride ?? .query(style: .form, explode: false), parameterDefaults: parameterDefaults)
        try builder.addQueryParameters(from: str, named: "str", format: formatOverride ?? .query(style: .form, explode: false), parameterDefaults: parameterDefaults)
        try builder.addQueryParameters(from: bigint, named: "bigint", format: formatOverride ?? .query(style: .form, explode: false), parameterDefaults: parameterDefaults)
        try builder.addQueryParameters(from: bigintStr, named: "bigintStr", format: formatOverride ?? .query(style: .form, explode: false), parameterDefaults: parameterDefaults)
        try builder.addQueryParameters(from: boolOpt, named: "boolOpt", format: formatOverride ?? .query(style: .form, explode: false), parameterDefaults: parameterDefaults)
        if decimal != nil {
            try builder.addQueryParameters(from: decimalWrapper, named: "decimal", format: formatOverride ?? .query(style: .form, explode: false), parameterDefaults: parameterDefaults)
        }
        try builder.addQueryParameters(from: decimalStr, named: "decimalStr", format: formatOverride ?? .query(style: .form, explode: false), parameterDefaults: parameterDefaults)
        try builder.addQueryParameters(from: intOptNull, named: "intOptNull", format: formatOverride ?? .query(style: .form, explode: false), parameterDefaults: parameterDefaults)
        if numOptNull != nil {
            try builder.addQueryParameters(from: numOptNullWrapper, named: "numOptNull", format: formatOverride ?? .query(style: .form, explode: false), parameterDefaults: parameterDefaults)
        }
        try builder.addQueryParameters(from: strOpt, named: "strOpt", format: formatOverride ?? .query(style: .form, explode: false), parameterDefaults: parameterDefaults)
        return builder.build()
    }
}

extension Shared.SimpleObject: HeaderParameterSerializable {
    func serializedHeaderParameters() throws -> [SerializedParameter] {
        return [
            SerializedParameter(name: "any", serialized: try any.serialize(with: .header(explode: false))),
            SerializedParameter(name: "bool", serialized: try bool.serialize(with: .header(explode: false))),
            SerializedParameter(name: "date", serialized: try dateWrapper.serialize(with: .header(explode: false))),
            SerializedParameter(name: "dateTime", serialized: try dateTimeWrapper.serialize(with: .header(explode: false))),
            SerializedParameter(name: "enum", serialized: try `enum`.serialize(with: .header(explode: false))),
            SerializedParameter(name: "float32", serialized: try float32Wrapper.serialize(with: .header(explode: false))),
            SerializedParameter(name: "int", serialized: try int.serialize(with: .header(explode: false))),
            SerializedParameter(name: "int32", serialized: try int32.serialize(with: .header(explode: false))),
            SerializedParameter(name: "int32Enum", serialized: try int32Enum.serialize(with: .header(explode: false))),
            SerializedParameter(name: "intEnum", serialized: try intEnum.serialize(with: .header(explode: false))),
            SerializedParameter(name: "num", serialized: try numWrapper.serialize(with: .header(explode: false))),
            SerializedParameter(name: "str", serialized: try str.serialize(with: .header(explode: false))),
            SerializedParameter(name: "bigint", serialized: try bigint?.serialize(with: .header(explode: false))),
            SerializedParameter(name: "bigintStr", serialized: try bigintStr?.serialize(with: .header(explode: false))),
            SerializedParameter(name: "boolOpt", serialized: try boolOpt?.serialize(with: .header(explode: false))),
            SerializedParameter(name: "decimal", serialized: try decimal != nil ? decimalWrapper.serialize(with: .header(explode: false)) : nil),
            SerializedParameter(name: "decimalStr", serialized: try decimalStr?.serialize(with: .header(explode: false))),
            SerializedParameter(name: "intOptNull", serialized: try intOptNull?.serialize(with: .header(explode: false))),
            SerializedParameter(name: "numOptNull", serialized: try numOptNull != nil ? numOptNullWrapper.serialize(with: .header(explode: false)) : nil),
            SerializedParameter(name: "strOpt", serialized: try strOpt?.serialize(with: .header(explode: false)))
        ]
    }
}

extension Shared.SimpleObject: MultipartFormBodySerializable {
    func serializedMultipartFormParameters(formatOverride: SerializableFormat?) throws -> [MultipartFormParameter] {
        return [
            .value(name: "any", serialized: try any.serialize(with: .multipart)),
            .value(name: "bool", serialized: try bool.serialize(with: .multipart)),
            .value(name: "date", serialized: try dateWrapper.serialize(with: .multipart)),
            .value(name: "dateTime", serialized: try dateTimeWrapper.serialize(with: .multipart)),
            .value(name: "enum", serialized: try `enum`.serialize(with: .multipart)),
            .value(name: "float32", serialized: try float32Wrapper.serialize(with: .multipart)),
            .value(name: "int", serialized: try int.serialize(with: .multipart)),
            .value(name: "int32", serialized: try int32.serialize(with: .multipart)),
            .value(name: "int32Enum", serialized: try int32Enum.serialize(with: .multipart)),
            .value(name: "intEnum", serialized: try intEnum.serialize(with: .multipart)),
            .value(name: "num", serialized: try numWrapper.serialize(with: .multipart)),
            .value(name: "str", serialized: try str.serialize(with: .multipart)),
            .value(name: "bigint", serialized: try bigint?.serialize(with: .multipart)),
            .value(name: "bigintStr", serialized: try bigintStr?.serialize(with: .multipart)),
            .value(name: "boolOpt", serialized: try boolOpt?.serialize(with: .multipart)),
            .value(name: "decimal", serialized: try decimal != nil ? decimalWrapper.serialize(with: .multipart) : nil),
            .value(name: "decimalStr", serialized: try decimalStr?.serialize(with: .multipart)),
            .value(name: "intOptNull", serialized: try intOptNull?.serialize(with: .multipart)),
            .value(name: "numOptNull", serialized: try numOptNull != nil ? numOptNullWrapper.serialize(with: .multipart) : nil),
            .value(name: "strOpt", serialized: try strOpt?.serialize(with: .multipart))
        ]
    }
}

extension Shared.SimpleObject: FormBodySerializable {
    func serializedFormParameters(formatOverride: SerializableFormat?) throws -> [SerializedParameter] {
        return [
            SerializedParameter(name: "any", serialized: try any.serialize(with: .form(explode: true))),
            SerializedParameter(name: "bool", serialized: try bool.serialize(with: .form(explode: true))),
            SerializedParameter(name: "date", serialized: try dateWrapper.serialize(with: .form(explode: true))),
            SerializedParameter(name: "dateTime", serialized: try dateTimeWrapper.serialize(with: .form(explode: true))),
            SerializedParameter(name: "enum", serialized: try `enum`.serialize(with: .form(explode: true))),
            SerializedParameter(name: "float32", serialized: try float32Wrapper.serialize(with: .form(explode: true))),
            SerializedParameter(name: "int", serialized: try int.serialize(with: .form(explode: true))),
            SerializedParameter(name: "int32", serialized: try int32.serialize(with: .form(explode: true))),
            SerializedParameter(name: "int32Enum", serialized: try int32Enum.serialize(with: .form(explode: true))),
            SerializedParameter(name: "intEnum", serialized: try intEnum.serialize(with: .form(explode: true))),
            SerializedParameter(name: "num", serialized: try numWrapper.serialize(with: .form(explode: true))),
            SerializedParameter(name: "str", serialized: try str.serialize(with: .form(explode: true))),
            SerializedParameter(name: "bigint", serialized: try bigint?.serialize(with: .form(explode: true))),
            SerializedParameter(name: "bigintStr", serialized: try bigintStr?.serialize(with: .form(explode: true))),
            SerializedParameter(name: "boolOpt", serialized: try boolOpt?.serialize(with: .form(explode: true))),
            SerializedParameter(name: "decimal", serialized: try decimal != nil ? decimalWrapper.serialize(with: .form(explode: true)) : nil),
            SerializedParameter(name: "decimalStr", serialized: try decimalStr?.serialize(with: .form(explode: true))),
            SerializedParameter(name: "intOptNull", serialized: try intOptNull?.serialize(with: .form(explode: true))),
            SerializedParameter(name: "numOptNull", serialized: try numOptNull != nil ? numOptNullWrapper.serialize(with: .form(explode: true)) : nil),
            SerializedParameter(name: "strOpt", serialized: try strOpt?.serialize(with: .form(explode: true)))
        ]
    }
}
