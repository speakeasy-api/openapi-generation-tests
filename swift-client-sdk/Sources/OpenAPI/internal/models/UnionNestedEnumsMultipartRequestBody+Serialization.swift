// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.


import Foundation

extension Operations.UnionNestedEnumsMultipartRequestBody: Serializable {
    func serialize(with format: SerializableFormat) throws -> String {
        switch format {
        case .multipart:
            // Deep, non-JSON encoded multipart serialization is not supported.
            throw SerializationError.invalidSerializationParameter(type: "Operations.UnionNestedEnumsMultipartRequestBody", format: format.formatDescription)
        case .path, .query, .header, .form:
            throw SerializationError.invalidSerializationParameter(type: "Operations.UnionNestedEnumsMultipartRequestBody", format: format.formatDescription)
        }
    }
}

extension Operations.UnionNestedEnumsMultipartRequestBody: MultipartFormBodySerializable {
    func serializedMultipartFormParameters(formatOverride: SerializableFormat?) throws -> [MultipartFormParameter] {
        return [
            .value(name: "enums", serialized: try serializeEncodable(enums))
        ]
    }
}
