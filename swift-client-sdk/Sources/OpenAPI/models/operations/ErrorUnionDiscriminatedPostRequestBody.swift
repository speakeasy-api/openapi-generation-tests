// Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.

import Foundation

extension Operations {
    /// A model object
    public enum ErrorUnionDiscriminatedPostRequestBody {
        case taggedError1RequestBody(Operations.TaggedError1RequestBody)
        case taggedError2RequestBody(Operations.TaggedError2RequestBody)
    }
}

extension Operations.ErrorUnionDiscriminatedPostRequestBody: Codable {
    public init(from decoder: Decoder) throws {
        if let value = try? Operations.TaggedError1RequestBody(from: decoder) {
            self = .taggedError1RequestBody(value)
        } else if let value = try? Operations.TaggedError2RequestBody(from: decoder) {
            self = .taggedError2RequestBody(value)
        } else {
            throw OpenAPIError.failedToHandleResponse(.failedToDecodeResponse)
        }
    }

    public func encode(to encoder: Encoder) throws {
        switch self {
        case .taggedError1RequestBody(let value):
            try value.encode(to: encoder)
        case .taggedError2RequestBody(let value):
            try value.encode(to: encoder)
        }
    }
}

