// Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.

import Foundation

extension Operations {
    /// Internal Server Error
    public enum ErrorUnionDiscriminatedPostResponseBody {
        case taggedError1(Shared.TaggedError1)
        case taggedError2(Shared.TaggedError2)
    }
}

extension Operations.ErrorUnionDiscriminatedPostResponseBody: Codable {
    enum DiscriminatorKey: CodingKey {
        case tag
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: DiscriminatorKey.self)
        let discriminator = try container.decode(String.self, forKey: .tag)

        switch discriminator {
        case "tag1":
            let value = try Shared.TaggedError1(from: decoder)
            self = .taggedError1(value)
        case "tag2":
            let value = try Shared.TaggedError2(from: decoder)
            self = .taggedError2(value)
        default:
            throw OpenAPIError.failedToHandleResponse(.failedToDecodeResponse)
        }
    }

    public func encode(to encoder: Encoder) throws {
        switch self {
        case .taggedError1(let value):
            try value.encode(to: encoder)
        case .taggedError2(let value):
            try value.encode(to: encoder)
        }
    }
}

