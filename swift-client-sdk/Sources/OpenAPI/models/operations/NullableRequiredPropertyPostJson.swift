// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Operations {
    /// A model object
    public struct NullableRequiredPropertyPostJson {
        public let nullableRequiredArray: [Double]
        public let nullableRequiredBigIntStr: String
        @DateTime
        public private(set) var nullableRequiredDateTime: Date
        public let nullableRequiredDecimalStr: String
        public let nullableRequiredEnum: Operations.NullableRequiredPropertyPostNullableRequiredEnum
        public let nullableRequiredInt: Int
        public let nullableOptionalInt: Int?
        public let xSpeakeasyTestInternalDirectives: AnyValue?

        /// Creates an object with the specified parameters
        ///
        ///
        public init(nullableRequiredArray: [Double], nullableRequiredBigIntStr: String, nullableRequiredDateTime: Date, nullableRequiredDecimalStr: String, nullableRequiredEnum: Operations.NullableRequiredPropertyPostNullableRequiredEnum, nullableRequiredInt: Int, nullableOptionalInt: Int? = nil, xSpeakeasyTestInternalDirectives: AnyValue? = nil) {
            self.nullableRequiredArray = nullableRequiredArray
            self.nullableRequiredBigIntStr = nullableRequiredBigIntStr
            self._nullableRequiredDateTime = DateTime<Date>(wrappedValue: nullableRequiredDateTime)
            self.nullableRequiredDecimalStr = nullableRequiredDecimalStr
            self.nullableRequiredEnum = nullableRequiredEnum
            self.nullableRequiredInt = nullableRequiredInt
            self.nullableOptionalInt = nullableOptionalInt
            self.xSpeakeasyTestInternalDirectives = xSpeakeasyTestInternalDirectives
        }
    }
}

extension Operations.NullableRequiredPropertyPostJson: Codable {
    enum CodingKeys: String, CodingKey {
        case nullableRequiredArray = "NullableRequiredArray"
        case nullableRequiredBigIntStr = "NullableRequiredBigIntStr"
        case nullableRequiredDateTime = "NullableRequiredDateTime"
        case nullableRequiredDecimalStr = "NullableRequiredDecimalStr"
        case nullableRequiredEnum = "NullableRequiredEnum"
        case nullableRequiredInt = "NullableRequiredInt"
        case nullableOptionalInt = "NullableOptionalInt"
        case xSpeakeasyTestInternalDirectives = "x-speakeasy-test-internal-directives"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.nullableRequiredArray = try container.decode([Double].self, forKey: .nullableRequiredArray)
        self.nullableRequiredBigIntStr = try container.decode(String.self, forKey: .nullableRequiredBigIntStr)
        self._nullableRequiredDateTime = try container.decode(DateTime<Date>.self, forKey: .nullableRequiredDateTime)
        self.nullableRequiredDecimalStr = try container.decode(String.self, forKey: .nullableRequiredDecimalStr)
        self.nullableRequiredEnum = try container.decode(Operations.NullableRequiredPropertyPostNullableRequiredEnum.self, forKey: .nullableRequiredEnum)
        self.nullableRequiredInt = try container.decode(Int.self, forKey: .nullableRequiredInt)
        self.nullableOptionalInt = try container.decodeIfPresent(Int.self, forKey: .nullableOptionalInt)
        self.xSpeakeasyTestInternalDirectives = try container.decodeIfPresent(AnyValue.self, forKey: .xSpeakeasyTestInternalDirectives)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.nullableRequiredArray, forKey: .nullableRequiredArray)
        try container.encode(self.nullableRequiredBigIntStr, forKey: .nullableRequiredBigIntStr)
        try container.encode(self._nullableRequiredDateTime, forKey: .nullableRequiredDateTime)
        try container.encode(self.nullableRequiredDecimalStr, forKey: .nullableRequiredDecimalStr)
        try container.encode(self.nullableRequiredEnum, forKey: .nullableRequiredEnum)
        try container.encode(self.nullableRequiredInt, forKey: .nullableRequiredInt)
        try container.encodeIfPresent(self.nullableOptionalInt, forKey: .nullableOptionalInt)
        try container.encodeIfPresent(self.xSpeakeasyTestInternalDirectives, forKey: .xSpeakeasyTestInternalDirectives)
    }
}

extension Operations.NullableRequiredPropertyPostJson {
    var nullableRequiredDateTimeWrapper: DateTime<Date> {
        return _nullableRequiredDateTime
    }
}
