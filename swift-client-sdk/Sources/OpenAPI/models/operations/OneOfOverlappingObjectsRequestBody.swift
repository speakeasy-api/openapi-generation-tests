// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Operations {
    /// A model object
    public struct OneOfOverlappingObjectsRequestBody {
        public let field1: String
        public let field2: Bool?
        @DecimalSerialized
        public private(set) var field3: Double?

        /// Creates an object with the specified parameters
        ///
        ///
        public init(field1: String, field2: Bool? = nil, field3: Double? = nil) {
            self.field1 = field1
            self.field2 = field2
            self._field3 = DecimalSerialized<Double?>(wrappedValue: field3)
        }
    }
}

extension Operations.OneOfOverlappingObjectsRequestBody: Codable {
    enum CodingKeys: String, CodingKey {
        case field1
        case field2
        case field3
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.field1 = try container.decode(String.self, forKey: .field1)
        self.field2 = try container.decodeIfPresent(Bool.self, forKey: .field2)
        self._field3 = try container.decodeIfPresent(DecimalSerialized<Double?>.self, forKey: .field3) ?? DecimalSerialized<Double?>(wrappedValue: nil)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.field1, forKey: .field1)
        try container.encodeIfPresent(self.field2, forKey: .field2)
        if self.field3 != nil {
            try container.encode(self._field3, forKey: .field3)
        }
    }
}

extension Operations.OneOfOverlappingObjectsRequestBody {
    var field3Wrapper: DecimalSerialized<Double?> {
        return _field3
    }
}
