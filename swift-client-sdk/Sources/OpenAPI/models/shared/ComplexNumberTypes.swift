// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A model object
    public struct ComplexNumberTypes {
        public let bigint: Int
        public let bigintStr: String
        @DecimalSerialized
        public private(set) var decimal: Double
        public let decimalStr: String

        /// Creates an object with the specified parameters
        ///
        ///
        public init(bigint: Int, bigintStr: String, decimal: Double, decimalStr: String) {
            self.bigint = bigint
            self.bigintStr = bigintStr
            self._decimal = DecimalSerialized<Double>(wrappedValue: decimal)
            self.decimalStr = decimalStr
        }
    }
}

extension Shared.ComplexNumberTypes: Codable {
    enum CodingKeys: String, CodingKey {
        case bigint
        case bigintStr
        case decimal
        case decimalStr
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.bigint = try container.decode(Int.self, forKey: .bigint)
        self.bigintStr = try container.decode(String.self, forKey: .bigintStr)
        self._decimal = try container.decode(DecimalSerialized<Double>.self, forKey: .decimal)
        self.decimalStr = try container.decode(String.self, forKey: .decimalStr)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.bigint, forKey: .bigint)
        try container.encode(self.bigintStr, forKey: .bigintStr)
        try container.encode(self._decimal, forKey: .decimal)
        try container.encode(self.decimalStr, forKey: .decimalStr)
    }
}

extension Shared.ComplexNumberTypes {
    var decimalWrapper: DecimalSerialized<Double> {
        return _decimal
    }
}
