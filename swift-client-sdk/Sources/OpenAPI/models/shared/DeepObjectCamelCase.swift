// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A model object
    public struct DeepObjectCamelCase {
        public let anyVal: Shared.DeepObjectCamelCaseAnyVal
        public let arrVal: [Shared.SimpleObjectCamelCase]
        public let boolVal: Bool
        public let intVal: Int
        public let mapVal: [String: Shared.SimpleObjectCamelCase]
        @DecimalSerialized
        public private(set) var numVal: Double
        /// A simple object that uses all our supported primitive types and enums and has optional properties.
        public let objVal: Shared.SimpleObjectCamelCase
        public let strVal: String
        public let type: String?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter objVal: A simple object that uses all our supported primitive types and enums and has optional properties.
        ///
        public init(anyVal: Shared.DeepObjectCamelCaseAnyVal, arrVal: [Shared.SimpleObjectCamelCase], boolVal: Bool, intVal: Int, mapVal: [String: Shared.SimpleObjectCamelCase], numVal: Double, objVal: Shared.SimpleObjectCamelCase, strVal: String, type: String? = nil) {
            self.anyVal = anyVal
            self.arrVal = arrVal
            self.boolVal = boolVal
            self.intVal = intVal
            self.mapVal = mapVal
            self._numVal = DecimalSerialized<Double>(wrappedValue: numVal)
            self.objVal = objVal
            self.strVal = strVal
            self.type = type
        }
    }
}

extension Shared.DeepObjectCamelCase: Codable {
    enum CodingKeys: String, CodingKey {
        case anyVal = "any_val"
        case arrVal = "arr_val"
        case boolVal = "bool_val"
        case intVal = "int_val"
        case mapVal = "map_val"
        case numVal = "num_val"
        case objVal = "obj_val"
        case strVal = "str_val"
        case type
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.anyVal = try container.decode(Shared.DeepObjectCamelCaseAnyVal.self, forKey: .anyVal)
        self.arrVal = try container.decode([Shared.SimpleObjectCamelCase].self, forKey: .arrVal)
        self.boolVal = try container.decode(Bool.self, forKey: .boolVal)
        self.intVal = try container.decode(Int.self, forKey: .intVal)
        self.mapVal = try container.decode([String: Shared.SimpleObjectCamelCase].self, forKey: .mapVal)
        self._numVal = try container.decode(DecimalSerialized<Double>.self, forKey: .numVal)
        self.objVal = try container.decode(Shared.SimpleObjectCamelCase.self, forKey: .objVal)
        self.strVal = try container.decode(String.self, forKey: .strVal)
        self.type = try container.decodeIfPresent(String.self, forKey: .type)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.anyVal, forKey: .anyVal)
        try container.encode(self.arrVal, forKey: .arrVal)
        try container.encode(self.boolVal, forKey: .boolVal)
        try container.encode(self.intVal, forKey: .intVal)
        try container.encode(self.mapVal, forKey: .mapVal)
        try container.encode(self._numVal, forKey: .numVal)
        try container.encode(self.objVal, forKey: .objVal)
        try container.encode(self.strVal, forKey: .strVal)
        try container.encodeIfPresent(self.type, forKey: .type)
    }
}

extension Shared.DeepObjectCamelCase {
    var numValWrapper: DecimalSerialized<Double> {
        return _numVal
    }
}
