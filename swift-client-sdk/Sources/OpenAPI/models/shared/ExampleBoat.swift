// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A model object
    public struct ExampleBoat {
        @DecimalSerialized
        public private(set) var length: Double
        public let name: String
        public let type: Shared.ExampleBoatType
        @DateTime
        public private(set) var createdAt: Date?
        @DateTime
        public private(set) var updatedAt: Date?

        /// Creates an object with the specified parameters
        ///
        ///
        public init(length: Double, name: String, type: Shared.ExampleBoatType, createdAt: Date? = nil, updatedAt: Date? = nil) {
            self._length = DecimalSerialized<Double>(wrappedValue: length)
            self.name = name
            self.type = type
            self._createdAt = DateTime<Date?>(wrappedValue: createdAt)
            self._updatedAt = DateTime<Date?>(wrappedValue: updatedAt)
        }
    }
}

extension Shared.ExampleBoat: Codable {
    enum CodingKeys: String, CodingKey {
        case length
        case name
        case type
        case createdAt
        case updatedAt
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self._length = try container.decode(DecimalSerialized<Double>.self, forKey: .length)
        self.name = try container.decode(String.self, forKey: .name)
        self.type = try container.decode(Shared.ExampleBoatType.self, forKey: .type)
        self._createdAt = try container.decodeIfPresent(DateTime<Date?>.self, forKey: .createdAt) ?? DateTime<Date?>(wrappedValue: nil)
        self._updatedAt = try container.decodeIfPresent(DateTime<Date?>.self, forKey: .updatedAt) ?? DateTime<Date?>(wrappedValue: nil)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self._length, forKey: .length)
        try container.encode(self.name, forKey: .name)
        try container.encode(self.type, forKey: .type)
        if self.createdAt != nil {
            try container.encode(self._createdAt, forKey: .createdAt)
        }
        if self.updatedAt != nil {
            try container.encode(self._updatedAt, forKey: .updatedAt)
        }
    }
}

extension Shared.ExampleBoat {
    var createdAtWrapper: DateTime<Date?> {
        return _createdAt
    }
    var lengthWrapper: DecimalSerialized<Double> {
        return _length
    }
    var updatedAtWrapper: DateTime<Date?> {
        return _updatedAt
    }
}
