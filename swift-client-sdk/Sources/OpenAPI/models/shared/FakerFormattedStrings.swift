// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A set of strings with format values that lead to relevant examples being generated for them
    public struct FakerFormattedStrings {
        /// A field that will have an address generated as example
        public let addressFormat: String?
        /// A field that will have a directory path generated as example
        public let directoryFormat: String?
        /// A field that will have a domain name generated as example
        public let domainFormat: String?
        /// A field that will have an email address generated as example
        public let emailFormat: String?
        /// A field that will have a filename generated as example
        public let filenameFormat: String?
        /// A field that will have a file path generated as example
        public let filepathFormat: String?
        /// A field that will have a image url generated as example
        public let imageFormat: String?
        /// A field that will have an IPv4 address generated as example
        public let ipv4Format: String?
        /// A field that will have an IPv6 address generated as example
        public let ipv6Format: String?
        /// A field that will have a JSON generated as example
        public let jsonFormat: String?
        /// A field that will have a MAC address generated as example
        public let macFormat: String?
        /// A field that will have a fake password generated as example
        public let passwordFormat: String?
        /// A field that will have a phone number generated as example
        public let phoneFormat: String?
        /// A field that will have a timezone generated as example
        public let timezoneFormat: String?
        /// A field that will have random words generated as example
        public let unknownFormat: String?
        /// A field that will have a URL generated as example
        public let urlFormat: String?
        /// A field that will have a UUID generated as example
        public let uuidFormat: String?
        /// A field that will have a postal code generated as example
        public let zipcodeFormat: String?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter addressFormat: A field that will have an address generated as example
        /// - Parameter directoryFormat: A field that will have a directory path generated as example
        /// - Parameter domainFormat: A field that will have a domain name generated as example
        /// - Parameter emailFormat: A field that will have an email address generated as example
        /// - Parameter filenameFormat: A field that will have a filename generated as example
        /// - Parameter filepathFormat: A field that will have a file path generated as example
        /// - Parameter imageFormat: A field that will have a image url generated as example
        /// - Parameter ipv4Format: A field that will have an IPv4 address generated as example
        /// - Parameter ipv6Format: A field that will have an IPv6 address generated as example
        /// - Parameter jsonFormat: A field that will have a JSON generated as example
        /// - Parameter macFormat: A field that will have a MAC address generated as example
        /// - Parameter passwordFormat: A field that will have a fake password generated as example
        /// - Parameter phoneFormat: A field that will have a phone number generated as example
        /// - Parameter timezoneFormat: A field that will have a timezone generated as example
        /// - Parameter unknownFormat: A field that will have random words generated as example
        /// - Parameter urlFormat: A field that will have a URL generated as example
        /// - Parameter uuidFormat: A field that will have a UUID generated as example
        /// - Parameter zipcodeFormat: A field that will have a postal code generated as example
        ///
        public init(addressFormat: String? = nil, directoryFormat: String? = nil, domainFormat: String? = nil, emailFormat: String? = nil, filenameFormat: String? = nil, filepathFormat: String? = nil, imageFormat: String? = nil, ipv4Format: String? = nil, ipv6Format: String? = nil, jsonFormat: String? = nil, macFormat: String? = nil, passwordFormat: String? = nil, phoneFormat: String? = nil, timezoneFormat: String? = nil, unknownFormat: String? = nil, urlFormat: String? = nil, uuidFormat: String? = nil, zipcodeFormat: String? = nil) {
            self.addressFormat = addressFormat
            self.directoryFormat = directoryFormat
            self.domainFormat = domainFormat
            self.emailFormat = emailFormat
            self.filenameFormat = filenameFormat
            self.filepathFormat = filepathFormat
            self.imageFormat = imageFormat
            self.ipv4Format = ipv4Format
            self.ipv6Format = ipv6Format
            self.jsonFormat = jsonFormat
            self.macFormat = macFormat
            self.passwordFormat = passwordFormat
            self.phoneFormat = phoneFormat
            self.timezoneFormat = timezoneFormat
            self.unknownFormat = unknownFormat
            self.urlFormat = urlFormat
            self.uuidFormat = uuidFormat
            self.zipcodeFormat = zipcodeFormat
        }
    }
}

extension Shared.FakerFormattedStrings: Codable {
    enum CodingKeys: String, CodingKey {
        case addressFormat
        case directoryFormat
        case domainFormat
        case emailFormat
        case filenameFormat
        case filepathFormat
        case imageFormat
        case ipv4Format
        case ipv6Format
        case jsonFormat
        case macFormat
        case passwordFormat
        case phoneFormat
        case timezoneFormat
        case unknownFormat
        case urlFormat
        case uuidFormat
        case zipcodeFormat
    }
}

