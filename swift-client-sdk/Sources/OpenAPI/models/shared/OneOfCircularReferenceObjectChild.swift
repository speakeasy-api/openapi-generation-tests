// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A model object
    public enum OneOfCircularReferenceObjectChild {
        case oneOfCircularReferenceObject(Shared.OneOfCircularReferenceObject)
        case simpleObject(Shared.SimpleObject)
    }
}

extension Shared.OneOfCircularReferenceObjectChild: Codable {
    public init(from decoder: Decoder) throws {
        if let value = try? Shared.OneOfCircularReferenceObject(from: decoder) {
            self = .oneOfCircularReferenceObject(value)
        } else if let value = try? Shared.SimpleObject(from: decoder) {
            self = .simpleObject(value)
        } else {
            throw OpenAPIError.failedToHandleResponse(.failedToDecodeResponse)
        }
    }

    public func encode(to encoder: Encoder) throws {
        switch self {
        case .oneOfCircularReferenceObject(let value):
            try value.encode(to: encoder)
        case .simpleObject(let value):
            try value.encode(to: encoder)
        }
    }
}

