// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

import Foundation

extension Shared {
    /// A model object
    public enum OneOfOverlappingObjects {
        case obj1(Shared.Obj1)
        case obj2(Shared.Obj2)
    }}

extension Shared.OneOfOverlappingObjects: Codable {
    public init(from decoder: Decoder) throws {
        if let value = try? Shared.Obj1(from: decoder) {
            self = .obj1(value)
        } else if let value = try? Shared.Obj2(from: decoder) {
            self = .obj2(value)
        } else {
            throw OpenAPIError.failedToHandleResponse(.failedToDecodeResponse)
        }
    }

    public func encode(to encoder: Encoder) throws {
        switch self {
        case .obj1(let value):
            try value.encode(to: encoder)
        case .obj2(let value):
            try value.encode(to: encoder)
        }
    }
}

