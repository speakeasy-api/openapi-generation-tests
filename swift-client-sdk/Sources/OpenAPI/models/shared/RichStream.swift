// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A model object
    public enum RichStream {
        case richCompletionEvent(Shared.RichCompletionEvent)
        case heartbeatEvent(Shared.HeartbeatEvent)
    }
}

extension Shared.RichStream: Codable {
    enum DiscriminatorKey: CodingKey {
        case event
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: DiscriminatorKey.self)
        let discriminator = try container.decode(String.self, forKey: .event)

        switch discriminator {
        case "completion":
            let value = try Shared.RichCompletionEvent(from: decoder)
            self = .richCompletionEvent(value)
        case "heartbeat":
            let value = try Shared.HeartbeatEvent(from: decoder)
            self = .heartbeatEvent(value)
        default:
            throw OpenAPIError.failedToHandleResponse(.failedToDecodeResponse)
        }
    }

    public func encode(to encoder: Encoder) throws {
        switch self {
        case .richCompletionEvent(let value):
            try value.encode(to: encoder)
        case .heartbeatEvent(let value):
            try value.encode(to: encoder)
        }
    }
}

