// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A simple object that uses all our supported primitive types and enums and has optional properties.
    public struct SimpleObjectCamelCase {
        /// An any property.
        public let anyVal: AnyValue
        /// A boolean property.
        public let boolVal: Bool
        /// A date-time property.
        @DateTime
        public private(set) var dateTimeVal: Date
        /// A date property.
        @DateOnly
        public private(set) var dateVal: Date
        /// A string based enum
        public let enumVal: Shared.Enum
        /// A float32 property.
        @DecimalSerialized
        public private(set) var float32Val: Double
        /// An integer enum property.
        public let intEnumVal: Shared.SimpleObjectCamelCaseIntEnumVal
        /// An integer property.
        public let intVal: Int
        /// An int32 enum property.
        public let int32EnumVal: Shared.SimpleObjectCamelCaseInt32EnumVal
        /// An int32 property.
        public let int32Val: Int
        /// A number property.
        @DecimalSerialized
        public private(set) var numVal: Double
        /// A string property.
        public let strVal: String
        public let bigintStrVal: String?
        public let bigintVal: Int?
        /// An optional boolean property.
        public let boolOptVal: Bool?
        @DecimalSerialized
        public private(set) var decimalVal: Double?
        /// An optional integer property will be null for tests.
        public let intOptNullVal: Int?
        /// An optional number property will be null for tests.
        @DecimalSerialized
        public private(set) var numOptNullVal: Double?
        /// An optional string property.
        public let strOptVal: String?

        /// Creates an object with the specified parameters
        ///
        /// - Parameter anyVal: An any property.
        /// - Parameter boolVal: A boolean property.
        /// - Parameter dateTimeVal: A date-time property.
        /// - Parameter dateVal: A date property.
        /// - Parameter enumVal: A string based enum
        /// - Parameter float32Val: A float32 property.
        /// - Parameter intEnumVal: An integer enum property.
        /// - Parameter intVal: An integer property.
        /// - Parameter int32EnumVal: An int32 enum property.
        /// - Parameter int32Val: An int32 property.
        /// - Parameter numVal: A number property.
        /// - Parameter strVal: A string property.
        /// - Parameter boolOptVal: An optional boolean property.
        /// - Parameter intOptNullVal: An optional integer property will be null for tests.
        /// - Parameter numOptNullVal: An optional number property will be null for tests.
        /// - Parameter strOptVal: An optional string property.
        ///
        public init(anyVal: AnyValue, boolVal: Bool, dateTimeVal: Date, dateVal: Date, enumVal: Shared.Enum, float32Val: Double, intEnumVal: Shared.SimpleObjectCamelCaseIntEnumVal, intVal: Int, int32EnumVal: Shared.SimpleObjectCamelCaseInt32EnumVal, int32Val: Int, numVal: Double, strVal: String, bigintStrVal: String? = nil, bigintVal: Int? = nil, boolOptVal: Bool? = nil, decimalVal: Double? = nil, intOptNullVal: Int? = nil, numOptNullVal: Double? = nil, strOptVal: String? = nil) {
            self.anyVal = anyVal
            self.boolVal = boolVal
            self._dateTimeVal = DateTime<Date>(wrappedValue: dateTimeVal)
            self._dateVal = DateOnly<Date>(wrappedValue: dateVal)
            self.enumVal = enumVal
            self._float32Val = DecimalSerialized<Double>(wrappedValue: float32Val)
            self.intEnumVal = intEnumVal
            self.intVal = intVal
            self.int32EnumVal = int32EnumVal
            self.int32Val = int32Val
            self._numVal = DecimalSerialized<Double>(wrappedValue: numVal)
            self.strVal = strVal
            self.bigintStrVal = bigintStrVal
            self.bigintVal = bigintVal
            self.boolOptVal = boolOptVal
            self._decimalVal = DecimalSerialized<Double?>(wrappedValue: decimalVal)
            self.intOptNullVal = intOptNullVal
            self._numOptNullVal = DecimalSerialized<Double?>(wrappedValue: numOptNullVal)
            self.strOptVal = strOptVal
        }
    }
}

extension Shared.SimpleObjectCamelCase: Codable {
    enum CodingKeys: String, CodingKey {
        case anyVal = "any_val"
        case boolVal = "bool_val"
        case dateTimeVal = "date_time_val"
        case dateVal = "date_val"
        case enumVal = "enum_val"
        case float32Val = "float32_val"
        case intEnumVal = "int_enum_val"
        case intVal = "int_val"
        case int32EnumVal = "int32_enum_val"
        case int32Val = "int32_val"
        case numVal = "num_val"
        case strVal = "str_val"
        case bigintStrVal = "bigint_str_val"
        case bigintVal = "bigint_val"
        case boolOptVal = "bool_opt_val"
        case decimalVal = "decimal_val"
        case intOptNullVal = "int_opt_null_val"
        case numOptNullVal = "num_opt_null_val"
        case strOptVal = "str_opt_val"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.anyVal = try container.decode(AnyValue.self, forKey: .anyVal)
        self.boolVal = try container.decode(Bool.self, forKey: .boolVal)
        self._dateTimeVal = try container.decode(DateTime<Date>.self, forKey: .dateTimeVal)
        self._dateVal = try container.decode(DateOnly<Date>.self, forKey: .dateVal)
        self.enumVal = try container.decode(Shared.Enum.self, forKey: .enumVal)
        self._float32Val = try container.decode(DecimalSerialized<Double>.self, forKey: .float32Val)
        self.intEnumVal = try container.decode(Shared.SimpleObjectCamelCaseIntEnumVal.self, forKey: .intEnumVal)
        self.intVal = try container.decode(Int.self, forKey: .intVal)
        self.int32EnumVal = try container.decode(Shared.SimpleObjectCamelCaseInt32EnumVal.self, forKey: .int32EnumVal)
        self.int32Val = try container.decode(Int.self, forKey: .int32Val)
        self._numVal = try container.decode(DecimalSerialized<Double>.self, forKey: .numVal)
        self.strVal = try container.decode(String.self, forKey: .strVal)
        self.bigintStrVal = try container.decodeIfPresent(String.self, forKey: .bigintStrVal)
        self.bigintVal = try container.decodeIfPresent(Int.self, forKey: .bigintVal)
        self.boolOptVal = try container.decodeIfPresent(Bool.self, forKey: .boolOptVal)
        self._decimalVal = try container.decodeIfPresent(DecimalSerialized<Double?>.self, forKey: .decimalVal) ?? DecimalSerialized<Double?>(wrappedValue: nil)
        self.intOptNullVal = try container.decodeIfPresent(Int.self, forKey: .intOptNullVal)
        self._numOptNullVal = try container.decodeIfPresent(DecimalSerialized<Double?>.self, forKey: .numOptNullVal) ?? DecimalSerialized<Double?>(wrappedValue: nil)
        self.strOptVal = try container.decodeIfPresent(String.self, forKey: .strOptVal)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.anyVal, forKey: .anyVal)
        try container.encode(self.boolVal, forKey: .boolVal)
        try container.encode(self._dateTimeVal, forKey: .dateTimeVal)
        try container.encode(self._dateVal, forKey: .dateVal)
        try container.encode(self.enumVal, forKey: .enumVal)
        try container.encode(self._float32Val, forKey: .float32Val)
        try container.encode(self.intEnumVal, forKey: .intEnumVal)
        try container.encode(self.intVal, forKey: .intVal)
        try container.encode(self.int32EnumVal, forKey: .int32EnumVal)
        try container.encode(self.int32Val, forKey: .int32Val)
        try container.encode(self._numVal, forKey: .numVal)
        try container.encode(self.strVal, forKey: .strVal)
        try container.encodeIfPresent(self.bigintStrVal, forKey: .bigintStrVal)
        try container.encodeIfPresent(self.bigintVal, forKey: .bigintVal)
        try container.encodeIfPresent(self.boolOptVal, forKey: .boolOptVal)
        if self.decimalVal != nil {
            try container.encode(self._decimalVal, forKey: .decimalVal)
        }
        try container.encodeIfPresent(self.intOptNullVal, forKey: .intOptNullVal)
        if self.numOptNullVal != nil {
            try container.encode(self._numOptNullVal, forKey: .numOptNullVal)
        }
        try container.encodeIfPresent(self.strOptVal, forKey: .strOptVal)
    }
}

extension Shared.SimpleObjectCamelCase {
    var dateTimeValWrapper: DateTime<Date> {
        return _dateTimeVal
    }
    var dateValWrapper: DateOnly<Date> {
        return _dateVal
    }
    var decimalValWrapper: DecimalSerialized<Double?> {
        return _decimalVal
    }
    var float32ValWrapper: DecimalSerialized<Double> {
        return _float32Val
    }
    var numOptNullValWrapper: DecimalSerialized<Double?> {
        return _numOptNullVal
    }
    var numValWrapper: DecimalSerialized<Double> {
        return _numVal
    }
}
