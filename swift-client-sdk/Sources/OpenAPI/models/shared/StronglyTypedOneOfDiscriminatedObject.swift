// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

import Foundation

extension Shared {
    /// A model object
    public enum StronglyTypedOneOfDiscriminatedObject {
        case taggedObject1(Shared.TaggedObject1)
        case taggedObject2(Shared.TaggedObject2)
        case taggedObject3(Shared.TaggedObject3)
    }}

extension Shared.StronglyTypedOneOfDiscriminatedObject: Codable {
    enum DiscriminatorKey: CodingKey {
        case tag
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: DiscriminatorKey.self)
        let discriminator = try container.decode(String.self, forKey: .tag)

        switch discriminator {
        case "tag1":
            let value = try Shared.TaggedObject1(from: decoder)
            self = .taggedObject1(value)
        case "tag2":
            let value = try Shared.TaggedObject2(from: decoder)
            self = .taggedObject2(value)
        case "tag3":
            let value = try Shared.TaggedObject3(from: decoder)
            self = .taggedObject3(value)
        default:
            throw OpenAPIError.failedToHandleResponse(.failedToDecodeResponse)
        }
    }

    public func encode(to encoder: Encoder) throws {
        switch self {
        case .taggedObject1(let value):
            try value.encode(to: encoder)
        case .taggedObject2(let value):
            try value.encode(to: encoder)
        case .taggedObject3(let value):
            try value.encode(to: encoder)
        }
    }
}

