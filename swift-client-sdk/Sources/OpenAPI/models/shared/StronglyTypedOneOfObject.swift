// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A model object
    public enum StronglyTypedOneOfObject {
        case simpleObjectWithType(Shared.SimpleObjectWithType)
        case deepObjectWithType(Shared.DeepObjectWithType)
    }
}

extension Shared.StronglyTypedOneOfObject: Codable {
    enum DiscriminatorKey: CodingKey {
        case type
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: DiscriminatorKey.self)
        let discriminator = try container.decode(String.self, forKey: .type)

        switch discriminator {
        case "simpleObjectWithType":
            let value = try Shared.SimpleObjectWithType(from: decoder)
            self = .simpleObjectWithType(value)
        case "deepObjectWithType":
            let value = try Shared.DeepObjectWithType(from: decoder)
            self = .deepObjectWithType(value)
        default:
            throw OpenAPIError.failedToHandleResponse(.failedToDecodeResponse)
        }
    }

    public func encode(to encoder: Encoder) throws {
        switch self {
        case .simpleObjectWithType(let value):
            try value.encode(to: encoder)
        case .deepObjectWithType(let value):
            try value.encode(to: encoder)
        }
    }
}

