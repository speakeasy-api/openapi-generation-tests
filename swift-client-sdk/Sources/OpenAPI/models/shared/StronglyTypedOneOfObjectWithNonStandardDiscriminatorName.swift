// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A model object
    public enum StronglyTypedOneOfObjectWithNonStandardDiscriminatorName {
        case simpleObjectWithNonStandardTypeName(Shared.SimpleObjectWithNonStandardTypeName)
        case deepObjectWithNonStandardTypeName(Shared.DeepObjectWithNonStandardTypeName)
    }
}

extension Shared.StronglyTypedOneOfObjectWithNonStandardDiscriminatorName: Codable {
    enum DiscriminatorKey: CodingKey {
        case objType
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: DiscriminatorKey.self)
        let discriminator = try container.decode(String.self, forKey: .objType)

        switch discriminator {
        case "simpleObjectWithNonStandardTypeName":
            let value = try Shared.SimpleObjectWithNonStandardTypeName(from: decoder)
            self = .simpleObjectWithNonStandardTypeName(value)
        case "deepObjectWithNonStandardTypeName":
            let value = try Shared.DeepObjectWithNonStandardTypeName(from: decoder)
            self = .deepObjectWithNonStandardTypeName(value)
        default:
            throw OpenAPIError.failedToHandleResponse(.failedToDecodeResponse)
        }
    }

    public func encode(to encoder: Encoder) throws {
        switch self {
        case .simpleObjectWithNonStandardTypeName(let value):
            try value.encode(to: encoder)
        case .deepObjectWithNonStandardTypeName(let value):
            try value.encode(to: encoder)
        }
    }
}

