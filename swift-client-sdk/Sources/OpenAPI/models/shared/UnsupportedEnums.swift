// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A model object
    public struct UnsupportedEnums {
        public let booleanEnum: Bool
        @DecimalSerialized
        public private(set) var numberEnum: Double

        /// Creates an object with the specified parameters
        ///
        ///
        public init(booleanEnum: Bool, numberEnum: Double) {
            self.booleanEnum = booleanEnum
            self._numberEnum = DecimalSerialized<Double>(wrappedValue: numberEnum)
        }
    }
}

extension Shared.UnsupportedEnums: Codable {
    enum CodingKeys: String, CodingKey {
        case booleanEnum
        case numberEnum
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.booleanEnum = try container.decode(Bool.self, forKey: .booleanEnum)
        self._numberEnum = try container.decode(DecimalSerialized<Double>.self, forKey: .numberEnum)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.booleanEnum, forKey: .booleanEnum)
        try container.encode(self._numberEnum, forKey: .numberEnum)
    }
}

extension Shared.UnsupportedEnums {
    var numberEnumWrapper: DecimalSerialized<Double> {
        return _numberEnum
    }
}
