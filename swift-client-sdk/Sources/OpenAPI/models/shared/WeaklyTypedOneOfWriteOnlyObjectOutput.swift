// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

extension Shared {
    /// A model object
    public enum WeaklyTypedOneOfWriteOnlyObjectOutput {
        case simpleObject(Shared.SimpleObject)
        case writeOnlyObjectOutput(Shared.WriteOnlyObjectOutput)
    }
}

extension Shared.WeaklyTypedOneOfWriteOnlyObjectOutput: Codable {
    public init(from decoder: Decoder) throws {
        if let value = try? Shared.SimpleObject(from: decoder) {
            self = .simpleObject(value)
        } else if let value = try? Shared.WriteOnlyObjectOutput(from: decoder) {
            self = .writeOnlyObjectOutput(value)
        } else {
            throw OpenAPIError.failedToHandleResponse(.failedToDecodeResponse)
        }
    }

    public func encode(to encoder: Encoder) throws {
        switch self {
        case .simpleObject(let value):
            try value.encode(to: encoder)
        case .writeOnlyObjectOutput(let value):
            try value.encode(to: encoder)
        }
    }
}

