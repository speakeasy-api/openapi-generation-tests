// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import XCTest
@testable import OpenAPI

class AuthTests: XCTestCase {
    // Bit of a hack but do this once in a class-based test setup function so this is run once for the entire test suite.
    // Doesn't work if only single test classes are run.
    override class func setUp() {
        do {
            try resetTestRecords()
        } catch {
            print("Couldn't reset test record file")
        }
    }

    func testNoAuth() async throws {
        try recordTest(named: "auth-no-auth")

        let client = Client(security: nil)
        let response = try await client.auth.noAuth()
        XCTAssertEqual(response.statusCode, 200, "Request should succeed")
    }

    func testBasicAuth() async throws {
        try recordTest(named: "auth-basic-auth")

        let client = Client(security: nil)
        let response = try await client.auth.basicAuth(
          request: .init(passwd: "testPass", user: "testUser"),
          security: .init(username: "testUser", password: "testPass")
        )
        XCTAssertEqual(response.statusCode, 200, "Request should succeed")
        XCTAssertEqual(try response.data.user().authenticated, true, "User should be authenticated")
    }

    func testAPIKeyAuthGlobal() async throws {
        try recordTest(named: "auth-api-key-auth-global")

        let client = Client(security: .apiKeyAuth("Bearer testToken"))
        let response = try await client.auth.apiKeyAuthHoisted()
        XCTAssertEqual(response.statusCode, 200, "Request should succeed")
        XCTAssertEqual(try response.data.token().authenticated, true)
        XCTAssertEqual(try response.data.token().token, "testToken")
    }

    func testAPIKeyAuthOperation() async throws {
        try recordTest(named: "auth-api-key-auth-operation")

        let client = Client(security: nil)
        let response = try await client.auth.apiKeyOrBearerAuth(
            security: .apiKeyAuth("Bearer testToken")
        )
        XCTAssertEqual(response.statusCode, 200, "Request should succeed")
        XCTAssertEqual(try response.data.token().authenticated, true)
        XCTAssertEqual(try response.data.token().token, "testToken")
    }
}
