// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import XCTest
@testable import OpenAPI

class AuthTests: XCTestCase {
    // Bit of a hack but do this once in a class-based test setup function so this is run once for the entire test suite.
    // Doesn't work if only single test classes are run.
    override class func setUp() {
        do {
            try resetTestRecords()
        } catch {
            print("Couldn't reset test record file")
        }
    }

    func testBasicAuth() async throws {
        try recordTest(named: "auth-basic-auth")

        let client = Client(security: .apiKeyAuth(""))
        let response = try await client.authNew.basicAuthNew(
            request: .init(
                basicAuth: .init(
                    username: "testUser",
                    password: "testPass"
                ),
                headerAuth: nil
            ),
            security: .init(
                username: "testUser",
                password: "testPass"
            ),
            server: nil
        )
        XCTAssertEqual(response.statusCode, 200, "Request should succeed")
    }

    func testAPIKeyAuthGlobal() async throws {
        try recordTest(named: "auth-api-key-auth-global")

        let client = Client(security: .apiKeyAuthNew("test_api_key"))
        let response = try await client.authNew.apiKeyAuthGlobalNew(
            request: .init(
                basicAuth: nil,
                headerAuth: [
                    .init(expectedValue: "test_api_key", headerName: "x-api-key")
                ]
            ),
            server: nil
        )
        XCTAssertEqual(response.statusCode, 200, "Request should succeed")
    }

    func testAPIKeyAuthOperation() async throws {
        try recordTest(named: "auth-api-key-auth-operation")

        let client = Client(security: .apiKeyAuth(""))
        let response = try await client.auth.apiKeyAuth(
            security: .apiKeyAuth("Bearer testToken")
        )
        XCTAssertEqual(response.statusCode, 200, "Request should succeed")
        XCTAssertEqual(try response.data.token().authenticated, true)
        XCTAssertEqual(try response.data.token().token, "testToken")
    }

    func testBearerAuthOperationWithPrefix() async throws {
        try recordTest(named: "auth-bearer-auth-operation-with-prefix")

        let client = Client(security: .apiKeyAuth(""))
        let response = try await client.auth.bearerAuth(
            security: .bearerAuth("Bearer testToken")
        )
        XCTAssertEqual(response.statusCode, 200, "Request should succeed")
        XCTAssertEqual(try response.data.token().authenticated, true)
        XCTAssertEqual(try response.data.token().token, "testToken")
    }

    func testBearerAuthOperationWithoutPrefix() async throws {
        try recordTest(named: "auth-bearer-auth-operation-without-prefix")

        let client = Client(security: .apiKeyAuth(""))
        let response = try await client.auth.bearerAuth(
            security: .bearerAuth("testToken")
        )
        XCTAssertEqual(response.statusCode, 200, "Request should succeed")
        XCTAssertEqual(try response.data.token().authenticated, true)
        XCTAssertEqual(try response.data.token().token, "testToken")
    }

    func testOAuth2Auth() async throws {
        try recordTest(named: "auth-oauth2-auth")

        let client = Client(security: .apiKeyAuth(""))
        let response = try await client.authNew.oauth2AuthNew(
            request: .init(
                basicAuth: nil,
                headerAuth: [
                    .init(
                        expectedValue: "Bearer testToken",
                        headerName: "Authorization"
                    )
                ]
            ),
            security: .oauth2("Bearer testToken"),
            server: nil
        )
        XCTAssertEqual(response.statusCode, 200, "Request should succeed")
    }

    func testOpenIDConnectAuth() async throws {
        try recordTest(named: "auth-open-id-connect-auth")

        let client = Client(security: .apiKeyAuth(""))
        let response = try await client.authNew.openIdConnectAuthNew(
            request: .init(
                basicAuth: nil,
                headerAuth: [
                    .init(
                        expectedValue: "Bearer testToken",
                        headerName: "Authorization"
                    )
                ]
            ),
            security: .openIdConnect("Bearer testToken"),
            server: nil
        )
        XCTAssertEqual(response.statusCode, 200, "Request should succeed")
    }

    func testMultipleSimpleSchemeAuth() async throws {
        try recordTest(named: "auth-multiple-simple-scheme-auth")

        let client = Client(security: .apiKeyAuth(""))
        let response = try await client.authNew.multipleSimpleSchemeAuth(
            request: .init(
                basicAuth: nil,
                headerAuth: [
                    .init(
                        expectedValue: "test_api_key",
                        headerName: "x-api-key"
                    ),
                    .init(
                        expectedValue: "Bearer testToken",
                        headerName: "Authorization"
                    ),
                ]
            ),
            security: .init(
                apiKeyAuthNew: "test_api_key",
                oauth2: "Bearer testToken"
            ),
            server: nil
        )
        XCTAssertEqual(response.statusCode, 200, "Request should succeed")
    }

    func testMultipleMixedSchemeAuth() async throws {
        try recordTest(named: "auth-multiple-mixed-scheme-auth")

        let client = Client(security: .apiKeyAuth(""))
        let response = try await client.authNew.multipleMixedSchemeAuth(
            request: .init(
                basicAuth: .init(
                    username: "testUser",
                    password: "testPass"
                ),
                headerAuth: [
                    .init(
                        expectedValue: "test_api_key",
                        headerName: "x-api-key"
                    )
                ]
            ),
            security: .init(
                apiKeyAuthNew: "test_api_key",
                basicAuth: .init(
                    username: "testUser",
                    password: "testPass"
                )
            ),
            server: nil
        )
        XCTAssertEqual(response.statusCode, 200, "Request should succeed")
    }

    func testMultipleSimpleOptionsAuthFirstOption() async throws {
        try recordTest(named: "auth-multiple-simple-options-auth-first-option")

        let client = Client(security: .apiKeyAuth(""))
        let response = try await client.authNew.multipleSimpleOptionsAuth(
            request: .init(
                basicAuth: nil,
                headerAuth: [
                    .init(
                        expectedValue: "test_api_key",
                        headerName: "x-api-key"
                    )
                ]
            ),
            security: .apiKeyAuthNew("test_api_key"),
            server: nil
        )
        XCTAssertEqual(response.statusCode, 200, "Request should succeed")
    }

    func testMultipleSimpleOptionsAuthSecondOption() async throws {
        try recordTest(named: "auth-multiple-simple-options-auth-second-option")

        let client = Client(security: .apiKeyAuth(""))
        let response = try await client.authNew.multipleSimpleOptionsAuth(
            request: .init(
                basicAuth: nil,
                headerAuth: [
                    .init(
                        expectedValue: "Bearer testToken",
                        headerName: "Authorization"
                    )
                ]
            ),
            security: .oauth2("Bearer testToken"),
            server: nil
        )
        XCTAssertEqual(response.statusCode, 200, "Request should succeed")
    }

    func testMultipleMixedOptionsAuthFirstOption() async throws {
        try recordTest(named: "auth-multiple-mixed-options-auth-first-option")

        let client = Client(security: .apiKeyAuth(""))
        let response = try await client.authNew.multipleMixedOptionsAuth(
            request: .init(
                basicAuth: nil,
                headerAuth: [
                    .init(
                        expectedValue: "test_api_key",
                        headerName: "x-api-key"
                    )
                ]
            ),
            security: .apiKeyAuthNew("test_api_key"),
            server: nil
        )
        XCTAssertEqual(response.statusCode, 200, "Request should succeed")
    }

    func testMultipleMixedOptionsAuthSecondOption() async throws {
        try recordTest(named: "auth-multiple-mixed-options-auth-second-option")

        let client = Client(security: .apiKeyAuth(""))
        let response = try await client.authNew.multipleMixedOptionsAuth(
            request: .init(
                basicAuth: .init(
                    username: "testUser",
                    password: "testPass"
                ),
                headerAuth: nil
            ),
            security: .basic(
                .init(
                    username: "testUser",
                    password: "testPass"
                )
            ),
            server: nil
        )
        XCTAssertEqual(response.statusCode, 200, "Request should succeed")
    }

    func testMultipleMixedOptionsWithSimpleSchemesAuthFirstOption() async throws {
        try recordTest(named: "auth-multiple-options-with-simple-schemes-auth-first-option")

        let client = Client(security: .apiKeyAuth(""))
        let response = try await client.authNew.multipleOptionsWithSimpleSchemesAuth(
            request: .init(
                basicAuth: nil,
                headerAuth: [
                    .init(
                        expectedValue: "test_api_key",
                        headerName: "x-api-key"
                    ),
                    .init(
                        expectedValue: "Bearer testToken",
                        headerName: "Authorization"
                    ),
                ]
            ),
            security: .option1(
                .init(
                    apiKeyAuthNew: "test_api_key",
                    oauth2: "Bearer testToken"
                )
            ),
            server: nil
        )
        XCTAssertEqual(response.statusCode, 200, "Request should succeed")
    }

    func testMultipleMixedOptionsWithSimpleSchemesAuthSecondOption() async throws {
        try recordTest(named: "auth-multiple-options-with-simple-schemes-auth-second-option")

        let client = Client(security: .apiKeyAuth(""))
        let response = try await client.authNew.multipleOptionsWithSimpleSchemesAuth(
            request: .init(
                basicAuth: nil,
                headerAuth: [
                    .init(
                        expectedValue: "test_api_key",
                        headerName: "x-api-key"
                    ),
                    .init(
                        expectedValue: "Bearer testToken",
                        headerName: "Authorization"
                    ),
                ]
            ),
            security: .option2(
                .init(
                    apiKeyAuthNew: "test_api_key",
                    openIdConnect: "Bearer testToken"
                )
            ),
            server: nil
        )
        XCTAssertEqual(response.statusCode, 200, "Request should succeed")
    }

    func testMultipleMixedOptionsWithMixedSchemesAuthFirstOption() async throws {
        try recordTest(named: "auth-multiple-options-with-mixed-schemes-auth-first-option")

        let client = Client(security: .apiKeyAuth(""))
        let response = try await client.authNew.multipleOptionsWithMixedSchemesAuth(
            request: .init(
                basicAuth: nil,
                headerAuth: [
                    .init(
                        expectedValue: "test_api_key",
                        headerName: "x-api-key"
                    ),
                    .init(
                        expectedValue: "Bearer testToken",
                        headerName: "Authorization"
                    ),
                ]
            ),
            security: .option1(
                .init(
                    apiKeyAuthNew: "test_api_key",
                    oauth2: "Bearer testToken"
                )
            ),
            server: nil
        )
        XCTAssertEqual(response.statusCode, 200, "Request should succeed")
    }

    func testMultipleMixedOptionsWithMixedSchemesAuthSecondOption() async throws {
        try recordTest(named: "auth-multiple-options-with-mixed-schemes-auth-second-option")

        let client = Client(security: .apiKeyAuth(""))
        let response = try await client.authNew.multipleOptionsWithMixedSchemesAuth(
            request: .init(
                basicAuth: .init(
                    username: "testUser",
                    password: "testPass"
                ),
                headerAuth: [
                    .init(
                        expectedValue: "test_api_key",
                        headerName: "x-api-key"
                    ),
                ]
            ),
            security: .option2(
                .init(
                    apiKeyAuthNew: "test_api_key",
                    basicAuth: .init(
                        username: "testUser",
                        password: "testPass"
                    )
                )
            ),
            server: nil
        )
        XCTAssertEqual(response.statusCode, 200, "Request should succeed")
    }
}