// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

import Foundation

import XCTest
@testable import OpenAPI

class FlatteningTests: XCTestCase {
    var client: Client!

    override func setUp() {
        client = Client(security: .apiKeyAuth("api_key_here"))
    }

    func testComponentBodyAndParamNoConflict() async throws {
        try recordTest(named: "flattening-component-body-and-param-no-conflict")

        let object = createSimpleObject()
        let response = try await client.flattening.componentBodyAndParamNoConflict(
            request: .init(
                paramStr: "param test",
                simpleObject: object
            )
        )
        XCTAssertEqual(response.statusCode, 200, "Request should succeed")
        XCTAssertEqual(try response.data.res().args["paramStr"], "param test")
        XCTAssertEqual(try response.data.res().json, object)
    }

    func testComponentBodyAndParamConflict() async throws {
        try recordTest(named: "flattening-component-body-and-param-conflict")

        let object = createSimpleObject()
        let response = try await client.flattening.componentBodyAndParamConflict(
            request: .init(
                simpleObject: object,
                str: "param test"
            )
        )
        XCTAssertEqual(response.statusCode, 200, "Request should succeed")
        XCTAssertEqual(try response.data.res().args["str"], "param test")
        XCTAssertEqual(try response.data.res().json, object)
    }

    func testInlineBodyAndParamConflict() async throws {
        try recordTest(named: "flattening-inline-body-and-param-conflict")

        let response = try await client.flattening.inlineBodyAndParamConflict(
            request: .init(
                requestBody: .init(
                    str: "body test"
                ),
                str: "param test"
            )
        )
        XCTAssertEqual(response.statusCode, 200, "Request should succeed")
        XCTAssertEqual(try response.data.res().args["str"], "param test")
        XCTAssertEqual(try response.data.res().json.str, "body test")
    }

    func testInlineBodyAndParamNoConflict() async throws {
        try recordTest(named: "flattening-inline-body-and-param-no-conflict")

        let response = try await client.flattening.inlineBodyAndParamNoConflict(
            request: .init(
                paramStr: "param test",
                requestBody: .init(
                    bodyStr: "body test"
                )
            )
        )
        XCTAssertEqual(response.statusCode, 200, "Request should succeed")
        XCTAssertEqual(try response.data.res().args["paramStr"], "param test")
        XCTAssertEqual(try response.data.res().json.bodyStr, "body test")
    }

    func testConflictingParams() async throws {
        try recordTest(named: "flattening-conflicting-params")

        let response = try await client.flattening.conflictingParams(
            request: .init(
                strPathParameter: "pathParam",
                strQueryParameter: "queryParam"
            )
        )
        XCTAssertEqual(response.statusCode, 200, "Request should succeed")
        XCTAssertEqual(try response.data.res().url, "http://localhost:35123/anything/flattening/conflictingParams/pathParam?str=queryParam")
        XCTAssertEqual(try response.data.res().args["str"], "queryParam")
    }
}