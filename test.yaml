# TODO: add test for multipart with any (both simple and complex) type serialization/deserialization
# TODO: add test for different byte serialization/deserialization
# TODO: test any type in JSON serialization/deserialization
# TODO: have tests for generation methods to ensure generated code is valid
openapi: 3.1.0
info:
  title: Speakeasy's Uber Test Spec
  version: 0.1.0
  summary: Contains a wide array of different operation types and schema to try and cover enough ground to ensure good coverage of our support of OpenAPI
  description: |-
    Some test description.
    About our test document.
x-speakeasy-extension-rewrite:
  x-speakeasy-ignore: x-my-ignore
externalDocs:
  url: https://speakeasyapi.dev/docs/home
  description: Speakeasy Docs
servers:
  - url: http://localhost:35123
    description: The default server.
  - url: http://broken
    description: A server url to a non-existent server.
  - url: http://{hostname}:{port}
    description: A server url with templated variables.
    variables:
      port:
        default: "35123"
        description: The port on which the server is running.
      hostname:
        default: localhost
        description: The hostname of the server.
  - url: http://localhost:35123/anything/{something}
    description: A server url with templated variables.
    variables:
      something:
        default: something
        description: Something is a variable for changing the root path
        enum:
          - something
          - somethingElse
          - somethingElseAgain
  - url: "{protocol}://{hostname}:{port}"
    description: A server url with templated variables (including the protocol).
    variables:
      protocol:
        default: http
        description: The networking protocol to use when making requests.
      port:
        default: "35123"
        description: The port on which the server is running.
      hostname:
        default: localhost
        description: The hostname of the server.
x-speakeasy-globals:
  parameters:
    - name: globalQueryParam
      in: query
      required: true
      schema:
        type: string
        example: "some example global query param"
    - name: globalPathParam
      in: path
      required: true
      schema:
        type: integer
        example: 100
    - name: globalHeaderParam
      in: header
      required: true
      schema:
        type: boolean
        example: true
    - $ref: "components.yaml#/components/parameters/globalHiddenQueryParam"
    - name: globalHiddenHeaderParam
      in: header
      required: true
      schema:
        type: string
    - name: globalHiddenPathParam
      in: path
      required: true
      schema:
        type: string
      x-speakeasy-globals-hidden: true
x-speakeasy-name-override:
  - operationId: getGlobalNameOverride
    methodNameOverride: globalNameOverridden
tags:
  - name: auth
    description: Endpoints for testing authentication.
  - name: authNew
    description: Endpoints for testing authentication.
  - name: servers
    description: Endpoints for testing servers.
  - name: parameters
    description: Endpoints for testing parameters.
  - name: requestBodies
    description: Endpoints for testing request bodies.
  - name: responseBodies
    description: Endpoints for testing response bodies.
  - name: retries
    description: Endpoints for testing retries.
  - name: generation
    description: Endpoints for purely testing valid generation behavior.
  - name: flattening
    description: Endpoints for testing flattening through request body and parameter combinations.
  - name: globals
    description: Endpoints for testing global parameters.
  - name: unions
    description: Endpoints for testing union types.
  - name: errors
    description: Endpoints for testing error responses.
  - name: telemetry
    description: Endpoints for testing telemetry.
  - name: pagination
    description: Endpoints for testing the pagination extension
  - name: eventstreams
    description: Endpoints for testing server-sent events streaming
  - name: documentation
    description: Testing for documentation extensions and tooling.
    x-speakeasy-docs:
      go:
        description: Testing for documentation extensions in Go.
      python:
        description: Testing for documentation extensions in Python.
      typescript:
        description: Testing for documentation extensions in TypeScript.
  - name: hooks
    description: Endpoints for testing hooks
  - name: openEnums
    description: Endpoints for testing open/closed enums
  - name: customClient
    description: Endpoints for testing custom HTTP clients
security:
  - apiKeyAuth: []
  - oauth2: []
  - {}
paths:
  /anything/selectGlobalServer:
    get:
      operationId: selectGlobalServer
      x-speakeasy-usage-example:
        tags:
          - usage
      tags:
        - servers
      responses:
        "200":
          description: OK
          headers:
            X-Optional-Header:
              schema:
                type: string
  /anything/selectServerWithID:
    get:
      operationId: selectServerWithID
      description: Select a server by ID.
      tags:
        - servers
      servers:
        - url: http://localhost:35123
          description: The default server.
          x-speakeasy-server-id: valid
        - url: http://broken
          description: A server url to a non-existent server.
          x-speakeasy-server-id: broken
      responses:
        "200":
          description: OK
  /anything/serverWithTemplates:
    get:
      operationId: serverWithTemplates
      tags:
        - servers
      servers:
        - url: http://{hostname}:{port}
          variables:
            port:
              default: "35123"
              description: The port on which the server is running.
            hostname:
              default: localhost
              description: The hostname of the server.
      responses:
        "200":
          description: OK
  /anything/serversByIDWithTemplates:
    get:
      operationId: serversByIDWithTemplates
      tags:
        - servers
      servers:
        - url: http://{hostname}:{port}
          variables:
            port:
              default: "35123"
              description: The port on which the server is running.
            hostname:
              default: localhost
              description: The hostname of the server.
          x-speakeasy-server-id: main
      responses:
        "200":
          description: OK
  /anything/serverWithTemplatesGlobal:
    get:
      operationId: serverWithTemplatesGlobal
      tags:
        - servers
      responses:
        "200":
          description: OK
  /anything/serverWithProtocolTemplate:
    get:
      operationId: serverWithProtocolTemplate
      tags:
        - servers
      servers:
        - url: "{protocol}://{hostname}:{port}"
          variables:
            protocol:
              default: http
              description: The protocol to use when making the network request.
            port:
              default: "35123"
              description: The port on which the server is running.
            hostname:
              default: localhost
              description: The hostname of the server.
          x-speakeasy-server-id: main
      responses:
        "200":
          description: OK
  /anything/no-auth:
    get:
      operationId: noAuth
      tags:
        - auth
      security:
        - {}
      responses:
        "200":
          description: OK
  /basic-auth/{user}/{passwd}:
    get:
      operationId: basicAuth
      tags:
        - auth
      security:
        - basicAuth: []
      parameters:
        - name: user
          in: path
          required: true
          schema:
            type: string
        - name: passwd
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful authentication.
          content:
            application/json:
              schema:
                title: user
                type: object
                properties:
                  authenticated:
                    type: boolean
                  user:
                    type: string
                required:
                  - authenticated
                  - user
        "401":
          description: Unsuccessful authentication.
  /bearer:
    get:
      operationId: apiKeyAuthGlobal
      tags:
        - auth
      responses:
        "200":
          $ref: "components.yaml#/components/responses/tokenAuthResponse"
        "401":
          description: Unsuccessful authentication.
  /bearer#operation:
    get:
      operationId: apiKeyAuth
      tags:
        - auth
      security:
        - apiKeyAuth: []
      responses:
        "200":
          $ref: "components.yaml#/components/responses/tokenAuthResponse"
        "401":
          description: Unsuccessful authentication.
  /bearer#oauth2:
    get:
      operationId: oauth2Auth
      tags:
        - auth
      security:
        - oauth2: []
      responses:
        "200":
          $ref: "components.yaml#/components/responses/tokenAuthResponse"
        "401":
          description: Unsuccessful authentication.
  /bearer#global:
    get:
      operationId: globalBearerAuth
      tags:
        - auth
      responses:
        "200":
          $ref: "components.yaml#/components/responses/tokenAuthResponse"
        "401":
          description: Unsuccessful authentication.
  /bearer#openIdConnect:
    get:
      operationId: openIdConnectAuth
      tags:
        - auth
      security:
        - openIdConnect: []
      responses:
        "200":
          $ref: "components.yaml#/components/responses/tokenAuthResponse"
        "401":
          description: Unsuccessful authentication.
  /bearer#bearer:
    get:
      operationId: bearerAuth
      tags:
        - auth
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "components.yaml#/components/responses/tokenAuthResponse"
        "401":
          description: Unsuccessful authentication.
  /bearer#oauth2AuthOverride:
    get:
      operationId: oauth2Override
      tags:
        - auth
      security:
        - oauth2: []
      responses:
        "200":
          $ref: "components.yaml#/components/responses/tokenAuthResponse"
        "401":
          description: Unsuccessful authentication.
  /auth#basicAuth:
    post:
      operationId: basicAuthNew
      tags:
        - authNew
      security:
        - basicAuth: []
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/authServiceRequestBody"
        required: true
      responses:
        "200":
          description: OK
        "401":
          description: Unsuccessful authentication.
  /auth#oauth2Auth:
    post:
      operationId: oauth2AuthNew
      tags:
        - authNew
      security:
        - oauth2: []
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/authServiceRequestBody"
        required: true
      responses:
        "200":
          description: OK
        "401":
          description: Unsuccessful authentication.
  /auth#authGlobal:
    post:
      operationId: authGlobal
      tags:
        - authNew
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/authServiceRequestBody"
        required: true
      responses:
        "200":
          description: OK
        "401":
          description: Unsuccessful authentication.
  /auth#openIdConnectAuth:
    post:
      operationId: openIdConnectAuthNew
      tags:
        - authNew
      security:
        - openIdConnect: []
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/authServiceRequestBody"
        required: true
      responses:
        "200":
          description: OK
        "401":
          description: Unsuccessful authentication.
  /auth#multipleSimpleSchemeAuth:
    post:
      operationId: multipleSimpleSchemeAuth
      tags:
        - authNew
      security:
        - apiKeyAuthNew: []
          oauth2: []
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/authServiceRequestBody"
        required: true
      responses:
        "200":
          description: OK
        "401":
          description: Unsuccessful authentication.
  /auth#multipleMixedSchemeAuth:
    post:
      operationId: multipleMixedSchemeAuth
      tags:
        - authNew
      security:
        - apiKeyAuthNew: []
          basicAuth: []
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/authServiceRequestBody"
        required: true
      responses:
        "200":
          description: OK
        "401":
          description: Unsuccessful authentication.
  /auth#multipleSimpleOptionsAuth:
    post:
      operationId: multipleSimpleOptionsAuth
      tags:
        - authNew
      security:
        - apiKeyAuthNew: []
        - oauth2: []
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/authServiceRequestBody"
        required: true
      responses:
        "200":
          description: OK
        "401":
          description: Unsuccessful authentication.
  /auth#multipleMixedOptionsAuth:
    post:
      operationId: multipleMixedOptionsAuth
      tags:
        - authNew
      security:
        - apiKeyAuthNew: []
        - basicAuth: []
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/authServiceRequestBody"
        required: true
      responses:
        "200":
          description: OK
        "401":
          description: Unsuccessful authentication.
  /auth#multipleOptionsWithSimpleSchemesAuth:
    post:
      operationId: multipleOptionsWithSimpleSchemesAuth
      tags:
        - authNew
      security:
        - apiKeyAuthNew: []
          oauth2: []
        - apiKeyAuthNew: []
          openIdConnect: []
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/authServiceRequestBody"
        required: true
      responses:
        "200":
          description: OK
        "401":
          description: Unsuccessful authentication.
  /auth#multipleOptionsWithMixedSchemesAuth:
    post:
      operationId: multipleOptionsWithMixedSchemesAuth
      tags:
        - authNew
      security:
        - apiKeyAuthNew: []
          oauth2: []
        - basicAuth: []
          apiKeyAuthNew: []
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/authServiceRequestBody"
        required: true
      responses:
        "200":
          description: OK
        "401":
          description: Unsuccessful authentication.
  /anything/mixedParams/path/{pathParam}:
    get:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: parameters-mixed-primitives
      operationId: mixedParametersPrimitives
      tags:
        - parameters
      parameters:
        - name: pathParam
          in: path
          schema:
            type: string
            example: pathValue
          required: true
        - name: queryStringParam
          in: query
          schema:
            type: string
            example: queryValue
          required: true
        - name: headerParam
          in: header
          schema:
            type: string
            example: headerValue
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  url:
                    type: string
                    example: http://localhost:35123/anything/mixedParams/path/pathValue?queryStringParam=queryValue
                  args:
                    type: object
                    properties:
                      queryStringParam:
                        type: string
                        example: queryValue
                    required:
                      - queryStringParam
                  headers:
                    type: object
                    properties:
                      Headerparam:
                        type: string
                        example: headerValue
                    required:
                      - Headerparam
                required:
                  - url
                  - args
                  - headers
  /anything/params/{duplicateParamRequest}:
    get:
      operationId: duplicateParam
      tags:
        - parameters
      parameters:
        - name: duplicateParamRequest
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: duplicateParamResponse
                type: object
                properties:
                  url:
                    type: string
  /anything/mixedParams/path/{path_param}/camelcase:
    get:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: parameters-camel-case
      operationId: mixedParametersCamelCase
      tags:
        - parameters
      parameters:
        - name: path_param
          in: path
          schema:
            type: string
            example: pathValue
          required: true
        - name: query_string_param
          in: query
          schema:
            type: string
            example: queryValue
          required: true
        - name: header_param
          in: header
          schema:
            type: string
            example: headerValue
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  url:
                    type: string
                    example: http://localhost:35123/anything/mixedParams/path/pathValue/camelcase?query_string_param=queryValue
                  args:
                    type: object
                    properties:
                      query_string_param:
                        type: string
                        example: queryValue
                    required:
                      - query_string_param
                  headers:
                    type: object
                    properties:
                      Header-Param:
                        type: string
                        example: headerValue
                    required:
                      - Header-Param
                required:
                  - url
                  - args
                  - headers
  /anything/pathParams/str/{strParam}/bool/{boolParam}/int/{intParam}/num/{numParam}:
    get:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: parameters-simple-path-parameter-primitives
      operationId: simplePathParameterPrimitives
      tags:
        - parameters
      parameters:
        - $ref: "components.yaml#/components/parameters/strPathParam"
        - $ref: "components.yaml#/components/parameters/boolPathParam"
        - $ref: "components.yaml#/components/parameters/intPathParam"
        - $ref: "components.yaml#/components/parameters/numPathParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  url:
                    type: string
                    example: http://localhost:35123/anything/pathParams/str/test/bool/true/int/1/num/1.1
                required:
                  - url
  /anything/pathParams/obj/{objParam}/objExploded/{objParamExploded}:
    get:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: parameters-simple-path-parameter-objects
      operationId: simplePathParameterObjects
      tags:
        - parameters
      parameters:
        - name: objParam
          in: path
          required: true
          schema:
            $ref: "components.yaml#/components/schemas/simpleObject"
        - name: objParamExploded
          in: path
          required: true
          explode: true
          schema:
            $ref: "components.yaml#/components/schemas/simpleObject"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  url:
                    type: string
                    example: 'http://localhost:35123/anything/pathParams/obj/any,any,bigint,8821239038968084,bigintStr,9223372036854775808,bool,true,boolOpt,true,date,2020-01-01,dateTime,2020-01-01T00:00:00.001Z,decimal,3.141592653589793,decimalStr,3.14159265358979344719667586,enum,one,float32,1.1,float64Str,1.1,int,1,int32,1,int32Enum,55,int64Str,100,intEnum,2,num,1.1,str,test,strOpt,testOptional/objExploded/any=any,bigint=8821239038968084,bigintStr=9223372036854775808,bool=true,boolOpt=true,date=2020-01-01,dateTime=2020-01-01T00:00:00.001Z,decimal=3.141592653589793,decimalStr=3.14159265358979344719667586,enum=one,float32=1.1,float64Str=1.1,int=1,int32=1,int32Enum=55,int64Str=100,intEnum=2,num=1.1,str=test,strOpt=testOptional'
                    x-speakeasy-test-internal-directives:
                      - sortSerializedMaps:
                          { "regex": "(?:obj|objExploded)\\/(.*?)(?:\\/|$)", "delim": "," }
                      - sanitizeTimestamp: {}
                required:
                  - url
  /anything/pathParams/arr/{arrParam}:
    get:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: parameters-simple-path-parameter-arrays
      operationId: simplePathParameterArrays
      tags:
        - parameters
      parameters:
        - name: arrParam
          in: path
          required: true
          schema:
            type: array
            items:
              type: string
              examples:
                - test
                - test2
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  url:
                    type: string
                    example: http://localhost:35123/anything/pathParams/arr/test,test2
                required:
                  - url
  /anything/pathParams/map/{mapParam}/mapExploded/{mapParamExploded}:
    get:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: parameters-simple-path-parameter-maps
      operationId: simplePathParameterMaps
      tags:
        - parameters
      parameters:
        - name: mapParam
          in: path
          required: true
          schema:
            type: object
            additionalProperties:
              type: string
            example: { "test": "value", "test2": "value2" }
        - name: mapParamExploded
          in: path
          required: true
          explode: true
          schema:
            type: object
            additionalProperties:
              type: integer
            example: { "test": 1, "test2": 2 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  url:
                    type: string
                    example: http://localhost:35123/anything/pathParams/map/test,value,test2,value2/mapExploded/test=1,test2=2
                    x-speakeasy-test-internal-directives:
                      - sortSerializedMaps:
                          {
                            "regex": ".*?\\/map\\/(.*?)\\/mapExploded\\/(.*)",
                            "delim": ",",
                          }
                required:
                  - url
  /anything/pathParams/json/{jsonObj}:
    get:
      x-speakeasy-test: ["go", "python", "pythonv2"]
      x-speakeasy-test-internal-id: parameters-path-parameter-json
      operationId: pathParameterJson
      tags:
        - parameters
      parameters:
        - name: jsonObj
          in: path
          required: true
          content:
            application/json:
              schema:
                $ref: "components.yaml#/components/schemas/simpleObject"
      responses:
        "200":
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  url:
                    type: string
                    example: 'http://localhost:35123/anything/pathParams/json/{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"}'
                    x-speakeasy-test-internal-directives:
                      - sanitizeTimestamp: {}
                required:
                  - url
          description: OK
  /anything/queryParams/form/primitive:
    get:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: parameters-form-query-params-primitive
      operationId: formQueryParamsPrimitive
      tags:
        - parameters
      parameters:
        - name: strParam
          in: query
          schema:
            type: string
            example: test
          required: true
        - name: boolParam
          in: query
          schema:
            type: boolean
            example: true
          required: true
        - name: intParam
          in: query
          schema:
            type: integer
            example: 1
          required: true
        - name: numParam
          in: query
          schema:
            type: number
            example: 1.1
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  args:
                    type: object
                    properties:
                      strParam:
                        type: string
                        example: "test"
                      boolParam:
                        type: string
                        example: "true"
                      intParam:
                        type: string
                        example: "1"
                      numParam:
                        type: string
                        example: "1.1"
                    required:
                      - strParam
                      - boolParam
                      - intParam
                      - numParam
                  url:
                    type: string
                    example: http://localhost:35123/anything/queryParams/form/primitive?boolParam=true&intParam=1&numParam=1.1&strParam=test
                    x-speakeasy-test-internal-directives:
                      - sortQueryParameters: {}
                required:
                  - args
                  - url
  /anything/queryParams/form/obj:
    get:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: parameters-form-query-params-object
      operationId: formQueryParamsObject
      tags:
        - parameters
      parameters:
        - name: objParamExploded
          in: query
          explode: true
          schema:
            $ref: "components.yaml#/components/schemas/simpleObject"
          required: true
        - name: objParam
          in: query
          explode: false
          schema:
            $ref: "components.yaml#/components/schemas/simpleObject"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  url:
                    type: string
                    example: http://localhost:35123/anything/queryParams/form/obj?any=any&bigint=8821239038968084&bigintStr=9223372036854775808&bool=true&boolOpt=true&date=2020-01-01&dateTime=2020-01-01T00%3A00%3A00.001Z&decimal=3.141592653589793&decimalStr=3.14159265358979344719667586&enum=one&float32=1.1&float64Str=1.1&int=1&int32=1&int32Enum=55&int64Str=100&intEnum=2&num=1.1&objParam=any%2Cany%2Cbigint%2C8821239038968084%2CbigintStr%2C9223372036854775808%2Cbool%2Ctrue%2CboolOpt%2Ctrue%2Cdate%2C2020-01-01%2CdateTime%2C2020-01-01T00%3A00%3A00.001Z%2Cdecimal%2C3.141592653589793%2CdecimalStr%2C3.14159265358979344719667586%2Cenum%2Cone%2Cfloat32%2C1.1%2Cfloat64Str%2C1.1%2Cint%2C1%2Cint32%2C1%2Cint32Enum%2C55%2Cint64Str%2C100%2CintEnum%2C2%2Cnum%2C1.1%2Cstr%2Ctest%2CstrOpt%2CtestOptional&str=test&strOpt=testOptional
                    x-speakeasy-test-internal-directives:
                      - sortQueryParameters: {}
                      - sortSerializedMaps:
                          { "regex": "objParam=(.*?)&", "delim": "%2C" }
                      - sanitizeTimestamp: {}
                  args:
                    type: object
                    properties:
                      str:
                        type: string
                        example: "test"
                      bool:
                        type: string
                        example: "true"
                      int:
                        type: string
                        example: "1"
                      int32:
                        type: string
                        example: "1"
                      num:
                        type: string
                        example: "1.1"
                      float32:
                        type: string
                        example: "1.1"
                      float64Str:
                        type: string
                        example: "1.1"
                      enum:
                        type: string
                        example: "one"
                      any:
                        type: string
                        example: "any"
                      date:
                        type: string
                        example: "2020-01-01"
                      dateTime:
                        type: string
                        example: "2020-01-01T00:00:00.001Z"
                        x-speakeasy-test-internal-directives:
                          - sanitizeTimestamp: {}
                      boolOpt:
                        type: string
                        example: "true"
                      strOpt:
                        type: string
                        example: "testOptional"
                      intOptNull:
                        type: string
                      numOptNull:
                        type: string
                      objParam:
                        type: string
                        example: "any,any,bigint,8821239038968084,bigintStr,9223372036854775808,bool,true,boolOpt,true,date,2020-01-01,dateTime,2020-01-01T00:00:00.001Z,decimal,3.141592653589793,decimalStr,3.14159265358979344719667586,enum,one,float32,1.1,float64Str,1.1,int,1,int32,1,int32Enum,55,int64Str,100,intEnum,2,num,1.1,str,test,strOpt,testOptional"
                        x-speakeasy-test-internal-directives:
                          - sortSerializedMaps:
                              { "regex": "(.*)", "delim": "," }
                          - sanitizeTimestamp: {}
                      intEnum:
                        type: string
                        example: "2"
                      int32Enum:
                        type: string
                        example: "55"
                      int64Str:
                        type: string
                        example: "100"
                      bigint:
                        type: string
                        example: "8821239038968084"
                      bigintStr:
                        type: string
                        example: "9223372036854775808"
                      decimal:
                        type: string
                        example: "3.141592653589793"
                      decimalStr:
                        type: string
                        example: "3.14159265358979344719667586"
                    required:
                      - str
                      - bool
                      - int
                      - int32
                      - num
                      - float32
                      - enum
                      - any
                      - date
                      - dateTime
                      - objParam
                      - intEnum
                      - int32Enum
                required:
                  - url
                  - args
  /anything/queryParams/form/camelObj:
    get:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: parameters-form-query-params-camel-object
      operationId: formQueryParamsCamelObject
      tags:
        - parameters
      parameters:
        - name: obj_param_exploded
          in: query
          explode: true
          schema:
            type: object
            properties:
              search_term:
                type: string
                example: foo
              item_count:
                type: string
                example: "10"
          required: true
        - name: obj_param
          in: query
          explode: false
          schema:
            type: object
            properties:
              encoded_term:
                type: string
                example: bar
              encoded_count:
                type: string
                example: "11"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  url:
                    type: string
                    example: http://localhost:35123/anything/queryParams/form/camelObj?item_count=10&obj_param=encoded_count%2C11%2Cencoded_term%2Cbar&search_term=foo
                    x-speakeasy-test-internal-directives:
                      - sortQueryParameters: {}
                  args:
                    type: object
                    properties:
                      search_term:
                        type: string
                        example: "foo"
                      item_count:
                        type: string
                        example: "10"
                    required:
                      - search_term
                      - item_count
                required:
                  - url
                  - args
  /anything/queryParams/form/refParamObject:
    get:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: parameters-form-query-params-ref-param-object
      operationId: formQueryParamsRefParamObject
      tags:
        - parameters
      parameters:
        - $ref: "components.yaml#/components/parameters/refQueryParamObjExploded"
        - $ref: "components.yaml#/components/parameters/refQueryParamObj"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  url:
                    type: string
                    example: http://localhost:35123/anything/queryParams/form/refParamObject?bool=true&int=1&num=1.1&refObjParam=bool%2Ctrue%2Cint%2C1%2Cnum%2C1.1%2Cstr%2Ctest&str=test
                    x-speakeasy-test-internal-directives:
                      - sortQueryParameters: {}
                  args:
                    type: object
                    properties:
                      str:
                        type: string
                        example: "test"
                      bool:
                        type: string
                        example: "true"
                      int:
                        type: string
                        example: "1"
                      num:
                        type: string
                        example: "1.1"
                      refObjParam:
                        type: string
                        example: "bool,true,int,1,num,1.1,str,test"
                    required:
                      - str
                      - bool
                      - int
                      - num
                      - refObjParam
                required:
                  - url
                  - args
  /anything/queryParams/form/array:
    get:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: parameters-form-query-params-array
      operationId: formQueryParamsArray
      tags:
        - parameters
      parameters:
        - name: arrParam
          in: query
          explode: false
          schema:
            type: array
            items:
              type: string
              examples:
                - test
                - test2
        - name: arrParamExploded
          in: query
          explode: true
          schema:
            type: array
            items:
              type: integer
              examples:
                - 1
                - 2
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  url:
                    type: string
                    example: http://localhost:35123/anything/queryParams/form/array?arrParam=test%2Ctest2&arrParamExploded=1&arrParamExploded=2
                    x-speakeasy-test-internal-directives:
                      - sortQueryParameters: {}
                  args:
                    type: object
                    properties:
                      arrParam:
                        type: string
                        example: "test,test2"
                      arrParamExploded:
                        type: array
                        items:
                          type: string
                          examples:
                            - "1"
                            - "2"
                    required:
                      - arrParam
                      - arrParamExploded
                required:
                  - url
                  - args
  /anything/queryParams/pipe/array:
    get:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: parameters-pipe-query-params-array
      operationId: pipeDelimitedQueryParamsArray
      tags:
        - parameters
      parameters:
        - name: arrParam
          style: pipeDelimited
          in: query
          explode: false
          schema:
            type: array
            items:
              type: string
              examples:
                - test
                - test2
        - name: arrParamExploded
          style: pipeDelimited
          in: query
          explode: true
          schema:
            type: array
            items:
              type: integer
              examples:
                - 1
                - 2
        - name: objParam
          style: pipeDelimited
          in: query
          explode: false
          schema:
            $ref: "components.yaml#/components/schemas/simpleObject"
        - name: mapParam
          style: pipeDelimited
          in: query
          explode: false
          schema:
            type: object
            additionalProperties:
              type: string
            example: { "key1": "val1", "key2": "val2" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  url:
                    type: string
                    example: "http://localhost:35123/anything/queryParams/pipe/array?arrParam=test|test2&arrParamExploded=1&arrParamExploded=2&mapParam=key1|val1|key2|val2&objParam=any|any|bigint|8821239038968084|bigintStr|9223372036854775808|bool|true|boolOpt|true|date|2020-01-01|dateTime|2020-01-01T00%3A00%3A00.001Z|decimal|3.141592653589793|decimalStr|3.14159265358979344719667586|enum|one|float32|1.1|float64Str|1.1|int|1|int32|1|int32Enum|55|int64Str|100|intEnum|2|num|1.1|str|test|strOpt|testOptional"
                    x-speakeasy-test-internal-directives:
                      - sortSerializedMaps:
                          { "regex": "(?:map|obj)Param=(.*?)(?:&|$)", "delim": "|" }
                      - sortQueryParameters: {}
                      - sanitizeTimestamp: {}
                  args:
                    type: object
                    properties:
                      arrParam:
                        type: string
                        example: "test|test2"
                      arrParamExploded:
                        type: array
                        items:
                          type: string
                          examples:
                            - "1"
                            - "2"
                    required:
                      - arrParam
                      - arrParamExploded
                required:
                  - url
                  - args
  /anything/queryParams/form/map:
    get:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: parameters-form-query-params-map
      operationId: formQueryParamsMap
      tags:
        - parameters
      parameters:
        - name: mapParam
          in: query
          explode: false
          schema:
            type: object
            additionalProperties:
              type: string
            example: { "test": "value", "test2": "value2" }
        - name: mapParamExploded
          in: query
          explode: true
          schema:
            type: object
            additionalProperties:
              type: integer
            example: { "test": 1, "test2": 2 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  url:
                    type: string
                    example: http://localhost:35123/anything/queryParams/form/map?mapParam=test%2Cvalue%2Ctest2%2Cvalue2&test=1&test2=2
                    x-speakeasy-test-internal-directives:
                      - sortQueryParameters: {}
                      - sortSerializedMaps:
                          {
                            "regex": ".*?\\?mapParam=(.*?)&(.*)",
                            "delim": "%2C",
                          }
                  args:
                    type: object
                    additionalProperties:
                      type: string
                    example:
                      {
                        "mapParam": "test,value,test2,value2",
                        "test": "1",
                        "test2": "2",
                      }
                    x-speakeasy-test-internal-directives:
                      - sortSerializedMaps: { "regex": "(.*)", "delim": "," }
                required:
                  - url
                  - args
  /anything/queryParams/deepObject/obj:
    get:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: parameters-deep-object-query-params-object
      operationId: deepObjectQueryParamsObject
      tags:
        - parameters
      parameters:
        - name: objParam
          in: query
          style: deepObject
          schema:
            $ref: "components.yaml#/components/schemas/simpleObject"
          required: true
        - name: objArrParam
          in: query
          style: deepObject
          schema:
            type: object
            properties:
              arr:
                type: array
                items:
                  type: string
                example: ["test", "test2"]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  url:
                    type: string
                    example: http://localhost:35123/anything/queryParams/deepObject/obj?objArrParam[arr]=test&objArrParam[arr]=test2&objParam[any]=any&objParam[bigintStr]=9223372036854775808&objParam[bigint]=8821239038968084&objParam[boolOpt]=true&objParam[bool]=true&objParam[dateTime]=2020-01-01T00%3A00%3A00.001Z&objParam[date]=2020-01-01&objParam[decimalStr]=3.14159265358979344719667586&objParam[decimal]=3.141592653589793&objParam[enum]=one&objParam[float32]=1.1&objParam[float64Str]=1.1&objParam[int32Enum]=55&objParam[int32]=1&objParam[int64Str]=100&objParam[intEnum]=2&objParam[int]=1&objParam[num]=1.1&objParam[strOpt]=testOptional&objParam[str]=test
                    x-speakeasy-test-internal-directives:
                      - sortQueryParameters: {}
                      - sanitizeTimestamp: {}
                  args:
                    type: object
                    properties:
                      objArrParam[arr]:
                        type: array
                        items:
                          type: string
                          examples:
                            - test
                            - test2
                      objParam[any]:
                        type: string
                        example: "any"
                      objParam[boolOpt]:
                        type: string
                        example: "true"
                      objParam[bool]:
                        type: string
                        example: "true"
                      objParam[dateTime]:
                        type: string
                        example: "2020-01-01T00:00:00.001Z"
                      objParam[date]:
                        type: string
                        example: "2020-01-01"
                      objParam[enum]:
                        type: string
                        example: "one"
                      objParam[float32]:
                        type: string
                        example: "1.1"
                      objParam[float64Str]:
                        type: string
                        example: "1.1"
                      objParam[int32]:
                        type: string
                        example: "1"
                      objParam[int]:
                        type: string
                        example: "1"
                      objParam[num]:
                        type: string
                        example: "1.1"
                      objParam[strOpt]:
                        type: string
                        example: "testOptional"
                      objParam[str]:
                        type: string
                        example: "test"
                      objParam[intEnum]:
                        type: string
                        example: "2"
                      objParam[int32Enum]:
                        type: string
                        example: "55"
                      objParam[int64Str]:
                        type: string
                        example: "100"
                      objParam[bigint]:
                        type: string
                        example: "8821239038968084"
                      objParam[bigintStr]:
                        type: string
                        example: "9223372036854775808"
                      objParam[decimal]:
                        type: string
                        example: "3.141592653589793"
                      objParam[decimalStr]:
                        type: string
                        example: "3.14159265358979344719667586"
                    required:
                      - objArrParam[arr]
                      - objParam[any]
                      - objParam[boolOpt]
                      - objParam[bool]
                      - objParam[dateTime]
                      - objParam[date]
                      - objParam[enum]
                      - objParam[float32]
                      - objParam[int32]
                      - objParam[int]
                      - objParam[num]
                      - objParam[strOpt]
                      - objParam[str]
                      - objParam[intEnum]
                      - objParam[int32Enum]
                    x-speakeasy-test-internal-directives:
                      - sanitizeTimestamp: {}
                required:
                  - url
                  - args
  /anything/queryParams/deepObject/map:
    get:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: parameters-deep-object-query-params-map
      operationId: deepObjectQueryParamsMap
      tags:
        - parameters
      parameters:
        - name: mapParam
          in: query
          style: deepObject
          schema:
            type: object
            additionalProperties:
              type: string
            example: { "test": "value", "test2": "value2" }
          required: true
        - name: mapArrParam
          in: query
          style: deepObject
          schema:
            type: object
            additionalProperties:
              type: array
              items:
                type: string
            example: { "test": ["test", "test2"], "test2": ["test3", "test4"] }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  url:
                    type: string
                    example: http://localhost:35123/anything/queryParams/deepObject/map?mapArrParam[test2]=test3&mapArrParam[test2]=test4&mapArrParam[test]=test&mapArrParam[test]=test2&mapParam[test2]=value2&mapParam[test]=value
                    x-speakeasy-test-internal-directives:
                      - sortQueryParameters: {}
                  args:
                    type: object
                    additionalProperties:
                      anyOf:
                        - type: string
                        - type: array
                          items:
                            type: string
                    example:
                      {
                        "mapArrParam[test]": ["test", "test2"],
                        "mapArrParam[test2]": ["test3", "test4"],
                        "mapParam[test]": "value",
                        "mapParam[test2]": "value2",
                      }
                required:
                  - url
                  - args
  /anything/queryParams/json/obj:
    get:
      operationId: jsonQueryParamsObject
      tags:
        - parameters
      parameters:
        - name: simpleObjParam
          in: query
          content:
            application/json:
              schema:
                $ref: "components.yaml#/components/schemas/simpleObject"
          required: true
        - name: deepObjParam
          in: query
          content:
            application/json:
              schema:
                $ref: "components.yaml#/components/schemas/deepObject"
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  url:
                    type: string
                    example: "http://localhost:35123/anything/queryParams/json/obj?deepObjParam={\"any\"%3A{\"any\"%3A\"any\"%2C\"bigint\"%3A8821239038968084%2C\"bigintStr\"%3A\"9223372036854775808\"%2C\"bool\"%3Atrue%2C\"boolOpt\"%3Atrue%2C\"date\"%3A\"2020-01-01\"%2C\"dateTime\"%3A\"2020-01-01T00%3A00%3A00.001Z\"%2C\"decimal\"%3A3.141592653589793%2C\"decimalStr\"%3A\"3.14159265358979344719667586\"%2C\"enum\"%3A\"one\"%2C\"float32\"%3A1.1%2C\"float64Str\"%3A\"1.1\"%2C\"int\"%3A1%2C\"int32\"%3A1%2C\"int32Enum\"%3A55%2C\"int64Str\"%3A\"100\"%2C\"intEnum\"%3A2%2C\"num\"%3A1.1%2C\"str\"%3A\"test\"%2C\"strOpt\"%3A\"testOptional\"}%2C\"arr\"%3A[{\"any\"%3A\"any\"%2C\"bigint\"%3A8821239038968084%2C\"bigintStr\"%3A\"9223372036854775808\"%2C\"bool\"%3Atrue%2C\"boolOpt\"%3Atrue%2C\"date\"%3A\"2020-01-01\"%2C\"dateTime\"%3A\"2020-01-01T00%3A00%3A00.001Z\"%2C\"decimal\"%3A3.141592653589793%2C\"decimalStr\"%3A\"3.14159265358979344719667586\"%2C\"enum\"%3A\"one\"%2C\"float32\"%3A1.1%2C\"float64Str\"%3A\"1.1\"%2C\"int\"%3A1%2C\"int32\"%3A1%2C\"int32Enum\"%3A55%2C\"int64Str\"%3A\"100\"%2C\"intEnum\"%3A2%2C\"num\"%3A1.1%2C\"str\"%3A\"test\"%2C\"strOpt\"%3A\"testOptional\"}%2C{\"any\"%3A\"any\"%2C\"bigint\"%3A8821239038968084%2C\"bigintStr\"%3A\"9223372036854775808\"%2C\"bool\"%3Atrue%2C\"boolOpt\"%3Atrue%2C\"date\"%3A\"2020-01-01\"%2C\"dateTime\"%3A\"2020-01-01T00%3A00%3A00.001Z\"%2C\"decimal\"%3A3.141592653589793%2C\"decimalStr\"%3A\"3.14159265358979344719667586\"%2C\"enum\"%3A\"one\"%2C\"float32\"%3A1.1%2C\"float64Str\"%3A\"1.1\"%2C\"int\"%3A1%2C\"int32\"%3A1%2C\"int32Enum\"%3A55%2C\"int64Str\"%3A\"100\"%2C\"intEnum\"%3A2%2C\"num\"%3A1.1%2C\"str\"%3A\"test\"%2C\"strOpt\"%3A\"testOptional\"}]%2C\"bool\"%3Atrue%2C\"int\"%3A1%2C\"map\"%3A{\"key\"%3A{\"any\"%3A\"any\"%2C\"bigint\"%3A8821239038968084%2C\"bigintStr\"%3A\"9223372036854775808\"%2C\"bool\"%3Atrue%2C\"boolOpt\"%3Atrue%2C\"date\"%3A\"2020-01-01\"%2C\"dateTime\"%3A\"2020-01-01T00%3A00%3A00.001Z\"%2C\"decimal\"%3A3.141592653589793%2C\"decimalStr\"%3A\"3.14159265358979344719667586\"%2C\"enum\"%3A\"one\"%2C\"float32\"%3A1.1%2C\"float64Str\"%3A\"1.1\"%2C\"int\"%3A1%2C\"int32\"%3A1%2C\"int32Enum\"%3A55%2C\"int64Str\"%3A\"100\"%2C\"intEnum\"%3A2%2C\"num\"%3A1.1%2C\"str\"%3A\"test\"%2C\"strOpt\"%3A\"testOptional\"}%2C\"key2\"%3A{\"any\"%3A\"any\"%2C\"bigint\"%3A8821239038968084%2C\"bigintStr\"%3A\"9223372036854775808\"%2C\"bool\"%3Atrue%2C\"boolOpt\"%3Atrue%2C\"date\"%3A\"2020-01-01\"%2C\"dateTime\"%3A\"2020-01-01T00%3A00%3A00.001Z\"%2C\"decimal\"%3A3.141592653589793%2C\"decimalStr\"%3A\"3.14159265358979344719667586\"%2C\"enum\"%3A\"one\"%2C\"float32\"%3A1.1%2C\"float64Str\"%3A\"1.1\"%2C\"int\"%3A1%2C\"int32\"%3A1%2C\"int32Enum\"%3A55%2C\"int64Str\"%3A\"100\"%2C\"intEnum\"%3A2%2C\"num\"%3A1.1%2C\"str\"%3A\"test\"%2C\"strOpt\"%3A\"testOptional\"}}%2C\"num\"%3A1.1%2C\"obj\"%3A{\"any\"%3A\"any\"%2C\"bigint\"%3A8821239038968084%2C\"bigintStr\"%3A\"9223372036854775808\"%2C\"bool\"%3Atrue%2C\"boolOpt\"%3Atrue%2C\"date\"%3A\"2020-01-01\"%2C\"dateTime\"%3A\"2020-01-01T00%3A00%3A00.001Z\"%2C\"decimal\"%3A3.141592653589793%2C\"decimalStr\"%3A\"3.14159265358979344719667586\"%2C\"enum\"%3A\"one\"%2C\"float32\"%3A1.1%2C\"float64Str\"%3A\"1.1\"%2C\"int\"%3A1%2C\"int32\"%3A1%2C\"int32Enum\"%3A55%2C\"int64Str\"%3A\"100\"%2C\"intEnum\"%3A2%2C\"num\"%3A1.1%2C\"str\"%3A\"test\"%2C\"strOpt\"%3A\"testOptional\"}%2C\"str\"%3A\"test\"}&simpleObjParam={\"any\"%3A\"any\"%2C\"bigint\"%3A8821239038968084%2C\"bigintStr\"%3A\"9223372036854775808\"%2C\"bool\"%3Atrue%2C\"boolOpt\"%3Atrue%2C\"date\"%3A\"2020-01-01\"%2C\"dateTime\"%3A\"2020-01-01T00%3A00%3A00.001Z\"%2C\"decimal\"%3A3.141592653589793%2C\"decimalStr\"%3A\"3.14159265358979344719667586\"%2C\"enum\"%3A\"one\"%2C\"float32\"%3A1.1%2C\"float64Str\"%3A\"1.1\"%2C\"int\"%3A1%2C\"int32\"%3A1%2C\"int32Enum\"%3A55%2C\"int64Str\"%3A\"100\"%2C\"intEnum\"%3A2%2C\"num\"%3A1.1%2C\"str\"%3A\"test\"%2C\"strOpt\"%3A\"testOptional\"}"
                    x-speakeasy-test-internal-directives:
                      - sanitizeTimestamp: {}
                  args:
                    type: object
                    properties:
                      simpleObjParam:
                        type: string
                        example: '{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"}'
                        x-speakeasy-test-internal-directives:
                          - sanitizeTimestamp: {}
                      deepObjParam:
                        type: string
                        example: '{"any":{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"},"arr":[{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"},{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"}],"bool":true,"int":1,"map":{"key":{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"},"key2":{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"}},"num":1.1,"obj":{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"},"str":"test"}'
                        x-speakeasy-test-internal-directives:
                          - sanitizeTimestamp: {}
                    required:
                      - simpleObjParam
                      - deepObjParam
                required:
                  - url
                  - args

  /anything/queryParams/json/objsmaller:
    get:
      x-speakeasy-test: ["go", "python", "pythonv2"]
      x-speakeasy-test-internal-id: parameters-json-query-params-object
      operationId: jsonQueryParamsObjectSmaller
      tags:
        - parameters
      parameters:
        - name: simpleObjParam
          in: query
          content:
            application/json:
              schema:
                $ref: "components.yaml#/components/schemas/simpleObject"
          required: true
        - name: deepObjParam
          in: query
          content:
            application/json:
              schema:
                $ref: "components.yaml#/components/schemas/deepObjectSmaller"
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  url:
                    type: string
                    example: "http://localhost:35123/anything/queryParams/json/objsmaller?deepObjParam={\"any\"%3A{\"any\"%3A\"any\"%2C\"bigint\"%3A8821239038968084%2C\"bigintStr\"%3A\"9223372036854775808\"%2C\"bool\"%3Atrue%2C\"boolOpt\"%3Atrue%2C\"date\"%3A\"2020-01-01\"%2C\"dateTime\"%3A\"2020-01-01T00%3A00%3A00.001Z\"%2C\"decimal\"%3A3.141592653589793%2C\"decimalStr\"%3A\"3.14159265358979344719667586\"%2C\"enum\"%3A\"one\"%2C\"float32\"%3A1.1%2C\"float64Str\"%3A\"1.1\"%2C\"int\"%3A1%2C\"int32\"%3A1%2C\"int32Enum\"%3A55%2C\"int64Str\"%3A\"100\"%2C\"intEnum\"%3A2%2C\"num\"%3A1.1%2C\"str\"%3A\"test\"%2C\"strOpt\"%3A\"testOptional\"}%2C\"arr\"%3A[{\"any\"%3A\"any\"%2C\"bigint\"%3A8821239038968084%2C\"bigintStr\"%3A\"9223372036854775808\"%2C\"bool\"%3Atrue%2C\"boolOpt\"%3Atrue%2C\"date\"%3A\"2020-01-01\"%2C\"dateTime\"%3A\"2020-01-01T00%3A00%3A00.001Z\"%2C\"decimal\"%3A3.141592653589793%2C\"decimalStr\"%3A\"3.14159265358979344719667586\"%2C\"enum\"%3A\"one\"%2C\"float32\"%3A1.1%2C\"float64Str\"%3A\"1.1\"%2C\"int\"%3A1%2C\"int32\"%3A1%2C\"int32Enum\"%3A55%2C\"int64Str\"%3A\"100\"%2C\"intEnum\"%3A2%2C\"num\"%3A1.1%2C\"str\"%3A\"test\"%2C\"strOpt\"%3A\"testOptional\"}%2C{\"any\"%3A\"any\"%2C\"bigint\"%3A8821239038968084%2C\"bigintStr\"%3A\"9223372036854775808\"%2C\"bool\"%3Atrue%2C\"boolOpt\"%3Atrue%2C\"date\"%3A\"2020-01-01\"%2C\"dateTime\"%3A\"2020-01-01T00%3A00%3A00.001Z\"%2C\"decimal\"%3A3.141592653589793%2C\"decimalStr\"%3A\"3.14159265358979344719667586\"%2C\"enum\"%3A\"one\"%2C\"float32\"%3A1.1%2C\"float64Str\"%3A\"1.1\"%2C\"int\"%3A1%2C\"int32\"%3A1%2C\"int32Enum\"%3A55%2C\"int64Str\"%3A\"100\"%2C\"intEnum\"%3A2%2C\"num\"%3A1.1%2C\"str\"%3A\"test\"%2C\"strOpt\"%3A\"testOptional\"}]%2C\"bool\"%3Atrue%2C\"int\"%3A1%2C\"map\"%3A{\"key\"%3A{\"any\"%3A\"any\"%2C\"bigint\"%3A8821239038968084%2C\"bigintStr\"%3A\"9223372036854775808\"%2C\"bool\"%3Atrue%2C\"boolOpt\"%3Atrue%2C\"date\"%3A\"2020-01-01\"%2C\"dateTime\"%3A\"2020-01-01T00%3A00%3A00.001Z\"%2C\"decimal\"%3A3.141592653589793%2C\"decimalStr\"%3A\"3.14159265358979344719667586\"%2C\"enum\"%3A\"one\"%2C\"float32\"%3A1.1%2C\"float64Str\"%3A\"1.1\"%2C\"int\"%3A1%2C\"int32\"%3A1%2C\"int32Enum\"%3A55%2C\"int64Str\"%3A\"100\"%2C\"intEnum\"%3A2%2C\"num\"%3A1.1%2C\"str\"%3A\"test\"%2C\"strOpt\"%3A\"testOptional\"}}%2C\"num\"%3A1.1%2C\"obj\"%3A{\"any\"%3A\"any\"%2C\"bigint\"%3A8821239038968084%2C\"bigintStr\"%3A\"9223372036854775808\"%2C\"bool\"%3Atrue%2C\"boolOpt\"%3Atrue%2C\"date\"%3A\"2020-01-01\"%2C\"dateTime\"%3A\"2020-01-01T00%3A00%3A00.001Z\"%2C\"decimal\"%3A3.141592653589793%2C\"decimalStr\"%3A\"3.14159265358979344719667586\"%2C\"enum\"%3A\"one\"%2C\"float32\"%3A1.1%2C\"float64Str\"%3A\"1.1\"%2C\"int\"%3A1%2C\"int32\"%3A1%2C\"int32Enum\"%3A55%2C\"int64Str\"%3A\"100\"%2C\"intEnum\"%3A2%2C\"num\"%3A1.1%2C\"str\"%3A\"test\"%2C\"strOpt\"%3A\"testOptional\"}%2C\"str\"%3A\"test\"}&simpleObjParam={\"any\"%3A\"any\"%2C\"bigint\"%3A8821239038968084%2C\"bigintStr\"%3A\"9223372036854775808\"%2C\"bool\"%3Atrue%2C\"boolOpt\"%3Atrue%2C\"date\"%3A\"2020-01-01\"%2C\"dateTime\"%3A\"2020-01-01T00%3A00%3A00.001Z\"%2C\"decimal\"%3A3.141592653589793%2C\"decimalStr\"%3A\"3.14159265358979344719667586\"%2C\"enum\"%3A\"one\"%2C\"float32\"%3A1.1%2C\"float64Str\"%3A\"1.1\"%2C\"int\"%3A1%2C\"int32\"%3A1%2C\"int32Enum\"%3A55%2C\"int64Str\"%3A\"100\"%2C\"intEnum\"%3A2%2C\"num\"%3A1.1%2C\"str\"%3A\"test\"%2C\"strOpt\"%3A\"testOptional\"}"
                    x-speakeasy-test-internal-directives:
                      - sanitizeTimestamp: {}
                  args:
                    type: object
                    properties:
                      simpleObjParam:
                        type: string
                        example: '{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"}'
                        x-speakeasy-test-internal-directives:
                          - sanitizeTimestamp: {}
                      deepObjParam:
                        type: string
                        example: '{"any":{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"},"arr":[{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"},{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"}],"bool":true,"int":1,"map":{"key":{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"}},"num":1.1,"obj":{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"},"str":"test"}'
                        x-speakeasy-test-internal-directives:
                          - sanitizeTimestamp: {}
                    required:
                      - simpleObjParam
                      - deepObjParam
                required:
                  - url
                  - args
  /anything/queryParams/mixed:
    get:
      x-speakeasy-test: ["go", "python", "pythonv2"]
      x-speakeasy-test-internal-id: parameters-mixed-query-params
      operationId: mixedQueryParams
      tags:
        - parameters
      parameters:
        - name: jsonParam
          in: query
          content:
            application/json:
              schema:
                $ref: "components.yaml#/components/schemas/simpleObject"
          required: true
        - name: formParam
          in: query
          style: form
          schema:
            $ref: "components.yaml#/components/schemas/simpleObject"
          required: true
        - name: deepObjectParam
          in: query
          style: deepObject
          schema:
            $ref: "components.yaml#/components/schemas/simpleObject"
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  url:
                    type: string
                    example: 'http://localhost:35123/anything/queryParams/mixed?any=any&bigint=8821239038968084&bigintStr=9223372036854775808&bool=true&boolOpt=true&date=2020-01-01&dateTime=2020-01-01T00%3A00%3A00.001Z&decimal=3.141592653589793&decimalStr=3.14159265358979344719667586&deepObjectParam[any]=any&deepObjectParam[bigintStr]=9223372036854775808&deepObjectParam[bigint]=8821239038968084&deepObjectParam[boolOpt]=true&deepObjectParam[bool]=true&deepObjectParam[dateTime]=2020-01-01T00%3A00%3A00.001Z&deepObjectParam[date]=2020-01-01&deepObjectParam[decimalStr]=3.14159265358979344719667586&deepObjectParam[decimal]=3.141592653589793&deepObjectParam[enum]=one&deepObjectParam[float32]=1.1&deepObjectParam[float64Str]=1.1&deepObjectParam[int32Enum]=55&deepObjectParam[int32]=1&deepObjectParam[int64Str]=100&deepObjectParam[intEnum]=2&deepObjectParam[int]=1&deepObjectParam[num]=1.1&deepObjectParam[strOpt]=testOptional&deepObjectParam[str]=test&enum=one&float32=1.1&float64Str=1.1&int=1&int32=1&int32Enum=55&int64Str=100&intEnum=2&jsonParam={"any"%3A"any"%2C"bigint"%3A8821239038968084%2C"bigintStr"%3A"9223372036854775808"%2C"bool"%3Atrue%2C"boolOpt"%3Atrue%2C"date"%3A"2020-01-01"%2C"dateTime"%3A"2020-01-01T00%3A00%3A00.001Z"%2C"decimal"%3A3.141592653589793%2C"decimalStr"%3A"3.14159265358979344719667586"%2C"enum"%3A"one"%2C"float32"%3A1.1%2C"float64Str"%3A"1.1"%2C"int"%3A1%2C"int32"%3A1%2C"int32Enum"%3A55%2C"int64Str"%3A"100"%2C"intEnum"%3A2%2C"num"%3A1.1%2C"str"%3A"test"%2C"strOpt"%3A"testOptional"}&num=1.1&str=test&strOpt=testOptional'
                    x-speakeasy-test-internal-directives:
                      - sortQueryParameters: {}
                      - sanitizeTimestamp: {}
                  args:
                    type: object
                    additionalProperties:
                      type: string
                    example:
                      {
                        "any": "any",
                        "bigint": "8821239038968084",
                        "bigintStr": "9223372036854775808",
                        "bool": "true",
                        "boolOpt": "true",
                        "date": "2020-01-01",
                        "dateTime": "2020-01-01T00:00:00.001Z",
                        "deepObjectParam[any]": "any",
                        "deepObjectParam[bigint]": "8821239038968084",
                        "deepObjectParam[bigintStr]": "9223372036854775808",
                        "deepObjectParam[boolOpt]": "true",
                        "deepObjectParam[bool]": "true",
                        "deepObjectParam[dateTime]": "2020-01-01T00:00:00.001Z",
                        "deepObjectParam[date]": "2020-01-01",
                        "deepObjectParam[enum]": "one",
                        "deepObjectParam[float32]": "1.1",
                        "deepObjectParam[float64Str]": "1.1",
                        "deepObjectParam[int32]": "1",
                        "deepObjectParam[int]": "1",
                        "deepObjectParam[intEnum]": "2",
                        "deepObjectParam[int32Enum]": "55",
                        "deepObjectParam[int64Str]": "100",
                        "deepObjectParam[num]": "1.1",
                        "deepObjectParam[decimal]": "3.141592653589793",
                        "deepObjectParam[decimalStr]": "3.14159265358979344719667586",
                        "deepObjectParam[strOpt]": "testOptional",
                        "deepObjectParam[str]": "test",
                        "enum": "one",
                        "float32": "1.1",
                        "float64Str": "1.1",
                        "int": "1",
                        "int32": "1",
                        "intEnum": "2",
                        "int32Enum": "55",
                        "int64Str": "100",
                        "jsonParam": '{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"}',
                        "num": "1.1",
                        "decimal": "3.141592653589793",
                        "decimalStr": "3.14159265358979344719667586",
                        "str": "test",
                        "strOpt": "testOptional",
                      }
                    x-speakeasy-test-internal-directives:
                      - sanitizeTimestamp: {}
                required:
                  - url
                  - args
  /anything/headers/primitive:
    get:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: parameters-header-params-primitive
      operationId: headerParamsPrimitive
      tags:
        - parameters
      parameters:
        - name: X-Header-String
          in: header
          schema:
            type: string
            example: "test"
          required: true
        - name: X-Header-Boolean
          in: header
          schema:
            type: boolean
            example: true
          required: true
        - name: X-Header-Integer
          in: header
          schema:
            type: integer
            example: 1
          required: true
        - name: X-Header-Number
          in: header
          schema:
            type: number
            example: 1.1
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  headers:
                    type: object
                    properties:
                      X-Header-String:
                        type: string
                        example: "test"
                      X-Header-Boolean:
                        type: string
                        example: "true"
                      X-Header-Integer:
                        type: string
                        example: "1"
                      X-Header-Number:
                        type: string
                        example: "1.1"
                    required:
                      - X-Header-String
                      - X-Header-Boolean
                      - X-Header-Integer
                      - X-Header-Number
                required:
                  - headers
  /anything/headers/obj:
    get:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: parameters-header-params-object
      operationId: headerParamsObject
      tags:
        - parameters
      parameters:
        - name: X-Header-Obj
          in: header
          schema:
            $ref: "components.yaml#/components/schemas/simpleObject"
          required: true
        - name: X-Header-Obj-Explode
          in: header
          explode: true
          schema:
            $ref: "components.yaml#/components/schemas/simpleObject"
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  headers:
                    type: object
                    properties:
                      X-Header-Obj:
                        type: string
                        example: any,any,bigint,8821239038968084,bigintStr,9223372036854775808,bool,true,boolOpt,true,date,2020-01-01,dateTime,2020-01-01T00:00:00.001Z,decimal,3.141592653589793,decimalStr,3.14159265358979344719667586,enum,one,float32,1.1,float64Str,1.1,int,1,int32,1,int32Enum,55,int64Str,100,intEnum,2,num,1.1,str,test,strOpt,testOptional
                        x-speakeasy-test-internal-directives:
                          - sortSerializedMaps:
                              { "regex": "(.*)", "delim": "," }
                          - sanitizeTimestamp: {}
                      X-Header-Obj-Explode:
                        type: string
                        example: any=any,bigint=8821239038968084,bigintStr=9223372036854775808,bool=true,boolOpt=true,date=2020-01-01,dateTime=2020-01-01T00:00:00.001Z,decimal=3.141592653589793,decimalStr=3.14159265358979344719667586,enum=one,float32=1.1,float64Str=1.1,int=1,int32=1,int32Enum=55,int64Str=100,intEnum=2,num=1.1,str=test,strOpt=testOptional
                        x-speakeasy-test-internal-directives:
                          - sortSerializedMaps:
                              { "regex": "(.*)", "delim": "," }
                          - sanitizeTimestamp: {}
                    required:
                      - X-Header-Obj
                      - X-Header-Obj-Explode
                required:
                  - headers
  /anything/headers/map:
    get:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: parameters-header-params-map
      operationId: headerParamsMap
      tags:
        - parameters
      parameters:
        - name: X-Header-Map
          in: header
          schema:
            type: object
            additionalProperties:
              type: string
            example: { "key1": "value1", "key2": "value2" }
          required: true
        - name: X-Header-Map-Explode
          in: header
          explode: true
          schema:
            type: object
            additionalProperties:
              type: string
            example: { "test1": "val1", "test2": "val2" }
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  headers:
                    type: object
                    properties:
                      X-Header-Map:
                        type: string
                        example: "key1,value1,key2,value2"
                        x-speakeasy-test-internal-directives:
                          - sortSerializedMaps:
                              { "regex": "(.*)", "delim": "," }
                      X-Header-Map-Explode:
                        type: string
                        example: "test1=val1,test2=val2"
                        x-speakeasy-test-internal-directives:
                          - sortSerializedMaps:
                              { "regex": "(.*)", "delim": "," }
                    required:
                      - X-Header-Map
                      - X-Header-Map-Explode
                required:
                  - headers
  /anything/headers/array:
    get:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: parameters-header-params-array
      operationId: headerParamsArray
      tags:
        - parameters
      parameters:
        - name: X-Header-Array
          in: header
          schema:
            type: array
            items:
              type: string
              examples:
                - test1
                - test2
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  headers:
                    type: object
                    properties:
                      X-Header-Array:
                        type: string
                        example: "test1,test2"
                    required:
                      - X-Header-Array
                required:
                  - headers
  /readonlyorwriteonly#readOnlyInput:
    post:
      operationId: requestBodyReadOnlyInput
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-read-only-input
      servers:
        - url: http://localhost:35456
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/readOnlyObject"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "components.yaml#/components/schemas/readOnlyObject"
  /writeonlyoutput#writeOnlyOutput:
    post:
      operationId: requestBodyWriteOnlyOutput
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-write-only-output
      servers:
        - url: http://localhost:35456
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/writeOnlyObject"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "components.yaml#/components/schemas/writeOnlyObject"
  /readonlyorwriteonly#writeOnly:
    post:
      operationId: requestBodyWriteOnly
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-write-only
      servers:
        - url: http://localhost:35456
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/writeOnlyObject"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "components.yaml#/components/schemas/readOnlyObject"
  /readonlyandwriteonly:
    post:
      operationId: requestBodyReadAndWrite
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-read-and-write
      servers:
        - url: http://localhost:35456
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/readWriteObject"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "components.yaml#/components/schemas/readWriteObject"
  /readonlyorwriteonly#readOnlyUnion:
    post:
      operationId: requestBodyReadOnlyUnion
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-read-only-union
      servers:
        - url: http://localhost:35456
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/weaklyTypedOneOfReadOnlyObject"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "components.yaml#/components/schemas/weaklyTypedOneOfReadOnlyObject"
  /writeonlyoutput#writeOnlyUnion:
    post:
      operationId: requestBodyWriteOnlyUnion
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-write-only-union
      servers:
        - url: http://localhost:35456
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/weaklyTypedOneOfWriteOnlyObject"
            examples:
              writeOnlyObject: 
                value: "oneOf[1]"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "components.yaml#/components/schemas/weaklyTypedOneOfWriteOnlyObject"
              examples:
                writeOnlyObject:
                  value: "oneOf[1]"
  /readonlyandwriteonly#readWriteOnlyUnion:
    post:
      operationId: requestBodyReadWriteOnlyUnion
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-read-write-only-union
      servers:
        - url: http://localhost:35456
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/weaklyTypedOneOfReadWriteObject"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "components.yaml#/components/schemas/weaklyTypedOneOfReadWriteObject"
  /anything/requestBodies/post/application/json/simple:
    post:
      operationId: requestBodyPostApplicationJsonSimple
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-application-json-simple
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/simpleObject"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/simpleObject"
                required:
                  - json
  /anything/requestBodies/post/application/json/camelcase:
    post:
      operationId: requestBodyPostApplicationJsonSimpleCamelCase
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-application-json-simple-camel-case
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/simpleObjectCamelCase"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/simpleObjectCamelCase"
                required:
                  - json
  /requestbody#array:
    post:
      operationId: requestBodyPostApplicationJsonArray
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-application-json-array
      tags:
        - requestBodies
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/arrValue"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: array
                items:
                  $ref: "components.yaml#/components/schemas/simpleObject"
  /requestbody#arrayCamelCase:
    post:
      operationId: requestBodyPostApplicationJsonArrayCamelCase
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-application-json-array-camel-case
      tags:
        - requestBodies
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/arrValueCamelCase"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: array
                items:
                  $ref: "components.yaml#/components/schemas/simpleObjectCamelCase"
  /requestbody#arrayOfArrays:
    post:
      operationId: requestBodyPostApplicationJsonArrayOfArray
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-application-json-array-of-array
      tags:
        - requestBodies
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/arrArrValue"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: array
                items:
                  type: array
                  title: arr
                  items:
                    $ref: "components.yaml#/components/schemas/simpleObject"
  /requestbody#arrayOfArraysCamelCase:
    post:
      operationId: requestBodyPostApplicationJsonArrayOfArrayCamelCase
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-application-json-array-of-array-camel-case
      tags:
        - requestBodies
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/arrArrValueCamelCase"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: array
                items:
                  type: array
                  title: arr
                  items:
                    $ref: "components.yaml#/components/schemas/simpleObjectCamelCase"
  /requestbody#map:
    post:
      operationId: requestBodyPostApplicationJsonMap
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-application-json-map
      tags:
        - requestBodies
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/mapValue"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                additionalProperties:
                  $ref: "components.yaml#/components/schemas/simpleObject"
                example: { "mapElem1": "...", "mapElem2": "..." }
  /requestbody#mapCamelCase:
    post:
      operationId: requestBodyPostApplicationJsonMapCamelCase
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-application-json-map-camel-case
      tags:
        - requestBodies
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/mapValueCamelCase"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                additionalProperties:
                  $ref: "components.yaml#/components/schemas/simpleObjectCamelCase"
                example: { "mapElem1": "...", "mapElem2": "..." }
  /requestbody#mapOfMaps:
    post:
      operationId: requestBodyPostApplicationJsonMapOfMap
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-application-json-map-of-map
      tags:
        - requestBodies
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/mapMapValue"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    $ref: "components.yaml#/components/schemas/simpleObject"
                example: { "mapElem1" : {"subMapElem1": "...", "subMapElem2": "..."}, "mapElem2" : {"subMapElem1": "...", "subMapElem2": "..."}}
  /requestbody#mapOfMapsCamelCase:
    post:
      operationId: requestBodyPostApplicationJsonMapOfMapCamelCase
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-application-json-map-of-map-camel-case
      tags:
        - requestBodies
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/mapMapValueCamelCase"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    $ref: "components.yaml#/components/schemas/simpleObjectCamelCase"
                example: { "mapElem1" : {"subMapElem1": "...", "subMapElem2": "..."}, "mapElem2" : {"subMapElem1": "...", "subMapElem2": "..."}}
  /requestbody#mapOfArrays:
    post:
      operationId: requestBodyPostApplicationJsonMapOfArray
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-application-json-map-of-array
      tags:
        - requestBodies
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/mapArrValue"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                additionalProperties:
                  type: array
                  items:
                    $ref: "components.yaml#/components/schemas/simpleObject"
                example: { "mapElem1": ["...", "..."], "mapElem2": ["...", "..."] }
  /requestbody#mapOfArraysCamelCase:
    post:
      operationId: requestBodyPostApplicationJsonMapOfArrayCamelCase
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-application-json-map-of-array-camel-case
      tags:
        - requestBodies
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/mapArrValueCamelCase"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                additionalProperties:
                  type: array
                  items:
                    $ref: "components.yaml#/components/schemas/simpleObjectCamelCase"
                example: { "mapElem1": ["...", "..."], "mapElem2": ["...", "..."] }
  /requestbody#arrayOfMaps:
    post:
      operationId: requestBodyPostApplicationJsonArrayOfMap
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-application-json-array-of-map
      tags:
        - requestBodies
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/arrMapValue"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: array
                items:
                  title: map
                  type: object
                  additionalProperties:
                    $ref: "components.yaml#/components/schemas/simpleObject"
                example: [{"mapElem1": "...", "mapElem2": "..."}, {"mapElem1": "...", "mapElem2": "..."}]    
  /requestbody#arrayOfMapsCamelCase:
    post:
      operationId: requestBodyPostApplicationJsonArrayOfMapCamelCase
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-application-json-array-of-map-camel-case
      tags:
        - requestBodies
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/arrMapValueCamelCase"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: array
                items:
                  title: map
                  type: object
                  additionalProperties:
                    $ref: "components.yaml#/components/schemas/simpleObjectCamelCase"
                example: [{"mapElem1": "...", "mapElem2": "..."}, {"mapElem1": "...", "mapElem2": "..."}]
  /requestbody#mapOfPrimitives:
    post:
      operationId: requestBodyPostApplicationJsonMapOfPrimitive
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-application-json-map-of-primitive
      tags:
        - requestBodies
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/mapPrimitiveValue"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                additionalProperties:
                  type: string
                example: { "mapElem1": "hello", "mapElem2": "world" }
  /requestbody#arrayOfPrimitives:
    post:
      operationId: requestBodyPostApplicationJsonArrayOfPrimitive
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-application-json-array-of-primitive
      tags:
        - requestBodies
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/arrPrimitiveValue"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: array
                items:
                  title: string
                  type: string
                example: ["hello", "world"]
  /requestbody#arrayOfArraysOfPrimitives:
    post:
      operationId: requestBodyPostApplicationJsonArrayOfArrayOfPrimitive
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-application-json-array-of-array-of-primitive
      tags:
        - requestBodies
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/arrArrPrimitiveValue"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: array
                items:
                  title: arr
                  type: array
                  items:
                    title: string
                    type: string
                example: [["foo", "bar"], ["buzz", "bazz"]]
  /requestbody#mapOfMapsOfPrimitives:
    post:
      operationId: requestBodyPostApplicationJsonMapOfMapOfPrimitive
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-application-json-map-of-map-of-primitive
      tags:
        - requestBodies
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/mapMapPrimitiveValue"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    type: string
                example: { "mapElem1" : {"subMapElem1": "foo", "subMapElem2": "bar"}, "mapElem2" : {"subMapElem1": "buzz", "subMapElem2": "bazz"}}
  /anything/requestBodies/post/application/json/array/objResponse:
    post:
      operationId: requestBodyPostApplicationJsonArrayObj
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-application-json-array-object
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "components.yaml#/components/schemas/simpleObject"
              example: ["...", "..."]
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "components.yaml#/components/schemas/arrObjValue"
  /anything/requestBodies/post/application/json/array/objResponseCamelCase:
    post:
      operationId: requestBodyPostApplicationJsonArrayObjCamelCase
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-application-json-array-object-camel-case
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "components.yaml#/components/schemas/simpleObjectCamelCase"
              example: ["...", "..."]
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "components.yaml#/components/schemas/arrObjValueCamelCase"
  /anything/requestBodies/post/application/json/map/objResponse:
    post:
      operationId: requestBodyPostApplicationJsonMapObj
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-application-json-map-object
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                $ref: "components.yaml#/components/schemas/simpleObject"
              example: { "mapElem1": "...", "mapElem2": "..." }
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "components.yaml#/components/schemas/mapObjValue"
  /anything/requestBodies/post/application/json/map/objResponseCamelCase:
    post:
      operationId: requestBodyPostApplicationJsonMapObjCamelCase
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-application-json-map-object-camel-case
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                $ref: "components.yaml#/components/schemas/simpleObjectCamelCase"
              example: { "mapElem1": "...", "mapElem2": "..." }
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "components.yaml#/components/schemas/mapObjValueCamelCase"
  /anything/requestBodies/post/application/json/deep:
    post:
      operationId: requestBodyPostApplicationJsonDeep
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-application-json-deep
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/deepObject"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/deepObject"
                example: {"json": "..."}
  /anything/requestBodies/post/application/json/deep/camelcase:
    post:
      operationId: requestBodyPostApplicationJsonDeepCamelCase
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-application-json-deep-camel-case
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/deepObjectCamelCase"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/deepObjectCamelCase"
                example: {"json": "..."}
  /anything/requestBodies/post/application/json/multiple/json/filtered:
    post:
      operationId: requestBodyPostApplicationJsonMultipleJsonFiltered
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-application-json-multiple-json-filtered
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/simpleObject"
          text/json:
            schema:
              $ref: "components.yaml#/components/schemas/simpleObject"
          application/test+json:
            schema:
              $ref: "components.yaml#/components/schemas/simpleObject"
          text/json.test:
            schema:
              $ref: "components.yaml#/components/schemas/simpleObject"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/simpleObject"
                required:
                  - json
  /anything/requestBodies/post/multiple/contentTypes/component/filtered:
    post:
      operationId: requestBodyPostMultipleContentTypesComponentFiltered
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-multiple-content-types-component-filtered
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/simpleObject"
          multipart/form-data:
            schema:
              $ref: "components.yaml#/components/schemas/simpleObject"
          application/x-www-form-urlencoded:
            schema:
              $ref: "components.yaml#/components/schemas/simpleObject"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/simpleObject"
                required:
                  - json
  /anything/requestBodies/post/multiple/contentTypes/inline/filtered:
    post:
      operationId: requestBodyPostMultipleContentTypesInlineFiltered
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-multiple-content-types-inline-filtered
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                str:
                  type: string
                  example: "test"
                num:
                  type: number
                  example: 1.1
                bool:
                  type: boolean
                  example: true
              required:
                - str
                - num
                - bool
          multipart/form-data:
            schema:
              type: object
              properties:
                str:
                  type: string
                  example: "test"
                num:
                  type: number
                  example: 1.1
                bool:
                  type: boolean
                  example: true
              required:
                - str
                - num
                - bool
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                str:
                  type: string
                  example: "test"
                num:
                  type: number
                  example: 1.1
                bool:
                  type: boolean
                  example: true
              required:
                - str
                - num
                - bool
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    type: object
                    additionalProperties: true
                    example: {"bool": true, "num": 1.1, "str": "test"}
  /anything/requestBodies/post/multiple/contentTypes/split:
    post:
      operationId: requestBodyPostMultipleContentTypesSplit
      # x-speakeasy-test: true - can't enable until we find a way to match input examples to output examples
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                str:
                  type: string
                num:
                  type: number
                bool:
                  type: boolean
              required:
                - str
                - num
                - bool
          multipart/form-data:
            schema:
              type: object
              properties:
                str2:
                  type: string
                num2:
                  type: number
                bool2:
                  type: boolean
              required:
                - str2
                - num2
                - bool2
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                str3:
                  type: string
                num3:
                  type: number
                bool3:
                  type: boolean
              required:
                - str3
                - num3
                - bool3
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    type: [object, "null"]
                    additionalProperties: true
                  form:
                    type: object
                    additionalProperties: true
  /anything/requestBodies/post/multiple/contentTypes/split/param:
    post:
      operationId: requestBodyPostMultipleContentTypesSplitParam
      # x-speakeasy-test: true - can't enable until we find a way to match input examples to output examples
      tags:
        - requestBodies
      parameters:
        - name: paramStr
          in: query
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                str:
                  type: string
                num:
                  type: number
                bool:
                  type: boolean
              required:
                - str
                - num
                - bool
          multipart/form-data:
            schema:
              type: object
              properties:
                str2:
                  type: string
                num2:
                  type: number
                bool2:
                  type: boolean
              required:
                - str2
                - num2
                - bool2
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                str3:
                  type: string
                num3:
                  type: number
                bool3:
                  type: boolean
              required:
                - str3
                - num3
                - bool3
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    type: [object, "null"]
                    additionalProperties: true
                  form:
                    type: object
                    additionalProperties: true
                  args:
                    type: object
                    additionalProperties:
                      type: string
  /anything/requestBodies/put/multipart/simple:
    put:
      operationId: requestBodyPutMultipartSimple
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-put-multipart-simple
      tags:
        - requestBodies
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "components.yaml#/components/schemas/simpleObject"
        required: true
      responses:
        "200":
          $ref: "components.yaml#/components/responses/simpleObjectFormResponse"
  /anything/requestBodies/put/multipart/deep:
    put:
      operationId: requestBodyPutMultipartDeep
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-put-multipart-deep
      tags:
        - requestBodies
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "components.yaml#/components/schemas/deepObject"
        required: true
      responses:
        "200":
          $ref: "components.yaml#/components/responses/deepObjectFormResponse"
  /anything/requestBodies/put/multipart/file:
    put:
      operationId: requestBodyPutMultipartFile
      # x-speakeasy-test: true - can't enable until we find a way to control file upload for tests
      tags:
        - requestBodies
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  files:
                    type: object
                    additionalProperties:
                      type: string
                required:
                  - files
  /anything/requestBodies/put/multipart/differentFileName:
    put:
      operationId: requestBodyPutMultipartDifferentFileName
      # x-speakeasy-test: true - can't enable until we find a way to control file upload for tests
      tags:
        - requestBodies
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                differentFileName:
                  type: string
                  format: binary
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  files:
                    type: object
                    additionalProperties:
                      type: string
                required:
                  - files
  /anything/requestBodies/put/multipart/optionalRequestBody:
    put:
      operationId: requestBodyPutMultipartOptionalRequestBody
      tags:
        - requestBodies
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                sampleField:
                  type: string
                sampleFile:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  form:
                    type: object
                    properties:
                      sampleField:
                        type: string
                  files:
                    type: object
                    additionalProperties:
                      type: string
                required:
                  - files
  /anything/requestBodies/post/form/simple:
    post:
      operationId: requestBodyPostFormSimple
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-form-simple
      tags:
        - requestBodies
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "components.yaml#/components/schemas/simpleObject"
        required: true
      responses:
        "200":
          $ref: "components.yaml#/components/responses/simpleObjectFormResponse"
  /anything/requestBodies/post/form/deep:
    post:
      operationId: requestBodyPostFormDeep
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-form-deep
      tags:
        - requestBodies
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "components.yaml#/components/schemas/deepObject"
        required: true
      responses:
        "200":
          $ref: "components.yaml#/components/responses/deepObjectFormResponse"
  /anything/requestBodies/post/form/map/primitive:
    post:
      operationId: requestBodyPostFormMapPrimitive
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-form-map-primitive
      tags:
        - requestBodies
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties:
                type: string
              example: { "key1": "value1", "key2": "value2", "key3": "value3" }
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  form:
                    type: object
                    additionalProperties:
                      type: string
                    example: { "key1": "value1", "key2": "value2", "key3": "value3" }
                required:
                  - form
  /anything/requestBodies/put/string:
    put:
      operationId: requestBodyPutString
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-put-string
      tags:
        - requestBodies
      requestBody:
        content:
          text/plain:
            schema:
              type: string
              example: "Hello World"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  data:
                    type: string
                    example: "Hello World"
                required:
                  - data
  /anything/requestBodies/put/bytes:
    put:
      operationId: requestBodyPutBytes
      # x-speakeasy-test: true - can't enable until we find a way to control file upload for tests
      tags:
        - requestBodies
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  data:
                    type: string
                required:
                  - data
  /anything/requestBodies/put/stringWithParams:
    put:
      operationId: requestBodyPutStringWithParams
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-put-string-with-params
      tags:
        - requestBodies
      parameters:
        - name: queryStringParam
          in: query
          required: true
          schema:
            type: string
            example: "test param"
      requestBody:
        content:
          text/plain:
            schema:
              type: string
              example: "Hello world"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  data:
                    type: string
                    example: "Hello world"
                  args:
                    type: object
                    properties:
                      queryStringParam:
                        type: string
                        example: "test param"
                    required:
                      - queryStringParam
                required:
                  - data
                  - args
  /anything/requestBodies/put/bytesWithParams:
    put:
      operationId: requestBodyPutBytesWithParams
      # x-speakeasy-test: true - can't enable until we find a way to control file upload for tests
      tags:
        - requestBodies
      parameters:
        - name: queryStringParam
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  data:
                    type: string
                  args:
                    type: object
                    properties:
                      queryStringParam:
                        type: string
                    required:
                      - queryStringParam
                required:
                  - data
                  - args
  /anything/requestBodies/post/empty-object:
    post:
      operationId: requestBodyPostEmptyObject
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-empty-object
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                empty:
                  type: object
                emptyWithEmptyProperties:
                  type: object
                  properties: {}
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  empty:
                    type: object
                  emptyRespWithEmptyProperies:
                    type: object
                    properties: {}
  /anything/requestBodies/post/null-dictionary:
    post:
      operationId: requestBodyPostNullDictionary
      x-speakeasy-test: true
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
              example: { "key1": "value1", "key2": "value2", "key3": "value3" }
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: "{\"key1\":\"value1\",\"key2\":\"value2\",\"key3\":\"value3\"}"
                required:
                  - data
  /anything/requestBodies/post/null-array:
    post:
      operationId: requestBodyPostNullArray
      x-speakeasy-test: true
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              example: ["value1", "value2", "value3"]
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: "[\"value1\",\"value2\",\"value3\"]"
                required:
                  - data
  /anything/requestBodies/post/nullableRequiredObject:
    post:
      operationId: nullableObjectPost
      x-speakeasy-test: true
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/nullableObject"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    $ref: "#/components/schemas/nullableObject"
                required:
                  - json
  /anything/requestBodies/post/nullableRequiredProperty:
    post:
      operationId: nullableRequiredPropertyPost
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-nullable-required-property
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - NullableRequiredInt
                - NullableRequiredArray
                - NullableRequiredEnum
                - NullableRequiredDateTime
                - NullableRequiredBigIntStr
                - NullableRequiredDecimalStr
              properties:
                NullableOptionalInt:
                  type: integer
                  nullable: true
                NullableRequiredInt:
                  type:
                    - integer
                    - "null"
                NullableRequiredArray:
                  type: [array, "null"]
                  items:
                    type: number
                NullableRequiredEnum:
                  type: ["string", "null"]
                  enum:
                    - first
                    - second
                    - "null"
                NullableRequiredDateTime:
                  nullable: true
                  type: string
                  format: date-time
                NullableRequiredBigIntStr:
                  nullable: true
                  type: string
                  format: bigint
                NullableRequiredDecimalStr:
                  nullable: true
                  type: string
                  format: decimal
            examples:
              allSet: {
                value: {
                  "NullableOptionalInt": 0,
                  "NullableRequiredInt": 1,
                  "NullableRequiredArray": [ 1.1, 2.2, 3.3 ],
                  "NullableRequiredEnum": "second",
                  "NullableRequiredDateTime": "2020-01-01T00:00:00Z",
                  "NullableRequiredBigIntStr": "9223372036854775807",
                  "NullableRequiredDecimalStr": "3.141592653589793238462643383279"
                }
              }
              allNull:
                value: {
                  "NullableOptionalInt": null,
                  "NullableRequiredInt": null,
                  "NullableRequiredArray": null,
                  "NullableRequiredEnum": null,
                  "NullableRequiredDateTime": null,
                  "NullableRequiredBigIntStr": null,
                  "NullableRequiredDecimalStr": null
                }
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    x-speakeasy-test-ignore: true
                  json:
                    type: object
                    required:
                      - NullableRequiredInt
                      - NullableRequiredArray
                      - NullableRequiredEnum
                      - NullableRequiredDateTime
                      - NullableRequiredBigIntStr
                      - NullableRequiredDecimalStr
                    properties:
                      NullableOptionalInt:
                        type: integer
                        nullable: true
                      NullableRequiredInt:
                        type:
                          - integer
                          - "null"
                      NullableRequiredArray:
                        type: [array, "null"]
                        items:
                          type: number
                      NullableRequiredEnum:
                        type: ["string", "null"]
                        enum:
                          - first
                          - second
                          - "null"
                      NullableRequiredDateTime:
                        nullable: true
                        type: string
                        format: date-time
                      NullableRequiredBigIntStr:
                        nullable: true
                        type: string
                        format: bigint
                      NullableRequiredDecimalStr:
                        nullable: true
                        type: string
                        format: decimal
                      x-speakeasy-test-internal-directives:
                        - sanitizeTimestamp: {}
              examples:
                allSet: {
                  value: {
                    "json": {
                      "NullableOptionalInt": 0,
                      "NullableRequiredInt": 1,
                      "NullableRequiredArray": [ 1.1, 2.2, 3.3 ],
                      "NullableRequiredEnum": "second",
                      "NullableRequiredDateTime": "2020-01-01T00:00:00Z",
                      "NullableRequiredBigIntStr": "9223372036854775807",
                      "NullableRequiredDecimalStr": "3.141592653589793238462643383279"
                    }
                  }
                }
                allNull:
                  value: {
                    "json": {
                      "NullableOptionalInt": null,
                      "NullableRequiredInt": null,
                      "NullableRequiredArray": null,
                      "NullableRequiredEnum": null,
                      "NullableRequiredDateTime": null,
                      "NullableRequiredBigIntStr": null,
                      "NullableRequiredDecimalStr": null
                    }
                  }

  /anything/requestBodies/post/nullableRequiredSharedObject:
    post:
      operationId: nullableRequiredSharedObjectPost
      x-speakeasy-test: ["go", "pythonv2", "typescriptv2"]
      x-speakeasy-test-internal-id: request-bodies-post-nullable-required-shared-object
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - NullableRequiredObj
              properties:
                NullableOptionalObj:
                  $ref: "#/components/schemas/nullableOptionalObject"
                NullableRequiredObj:
                  $ref: "#/components/schemas/nullableObject"
            examples:
              requiredNull:
                value: {
                  "NullableRequiredObj": null
                }
              allNull:
                value: {
                  "NullableOptionalObj": null,
                  "NullableRequiredObj": null
                }
              optionalNonNull:
                value: {
                  "NullableOptionalObj": {
                    "required": 1
                  },
                  "NullableRequiredObj": null
                }
              allSet:
                value: {
                  "NullableOptionalObj": {
                    "required": 1,
                    "optional": "test"
                  },
                  "NullableRequiredObj": {
                    "required": 1
                  }
                }
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    x-speakeasy-test-ignore: true
                  json:
                    type: object
                    required:
                      - NullableRequiredObj
                    properties:
                      NullableOptionalObj:
                        $ref: "#/components/schemas/nullableOptionalObject"
                      NullableRequiredObj:
                        $ref: "#/components/schemas/nullableObject"
              examples:
                requiredNull:
                  value: {
                    "json": {
                      "NullableRequiredObj": null
                    }
                  }
                allNull:
                  value: {
                    "json": {
                      "NullableOptionalObj": null,
                      "NullableRequiredObj": null
                    }
                  }
                optionalNonNull:
                  value: {
                    "json": {
                      "NullableOptionalObj": {
                        "required": 1
                      },
                      "NullableRequiredObj": null
                    }
                  }
                allSet:
                  value: {
                    "json": {
                      "NullableOptionalObj": {
                        "required": 1,
                        "optional": "test"
                      },
                      "NullableRequiredObj": {
                        "required": 1
                      }
                    }
                  }
  /anything/requestBodies/post/nullableRequiredEmptyObject:
    post:
      operationId: nullableRequiredEmptyObjectPost
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-nullable-required-empty-object
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - RequiredObj
                - NullableRequiredObj
              properties:
                RequiredObj:
                  type: ["object"]
                NullableOptionalObj:
                  type: ["object", "null"]
                NullableRequiredObj:
                  type: ["object", "null"]
            examples:
              nullable-set:
                value: {
                  "RequiredObj": {},
                  "NullableRequiredObj": null,
                  "NullableOptionalObj": null
                }
              optional-set:
                value: {
                  "RequiredObj": {},
                  "NullableRequiredObj": null,
                  "NullableOptionalObj": {}
                }
              all-set:
                value: {
                  "RequiredObj": {},
                  "NullableRequiredObj": {},
                  "NullableOptionalObj": {}
                }
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    x-speakeasy-test-ignore: true
                  json:
                    type: object
                    required:
                      - RequiredObj
                      - NullableRequiredObj
                    properties:
                      RequiredObj:
                        type: ["object"]
                      NullableOptionalObj:
                        type: ["object", "null"]
                      NullableRequiredObj:
                        type: ["object", "null"]
              examples:
                nullable-set:
                  value: {
                    "json": {
                      "RequiredObj": {},
                      "NullableRequiredObj": null,
                      "NullableOptionalObj": null
                    }
                  }
                optional-set:
                  value: {
                    "json": {
                      "RequiredObj": {},
                      "NullableRequiredObj": null,
                      "NullableOptionalObj": {}
                    }
                  }
                all-set:
                  value: {
                    "json": {
                      "RequiredObj": {},
                      "NullableRequiredObj": {},
                      "NullableOptionalObj": {}
                    }
                  }
  /anything/requestBodies/post/nullableOptionalFields:
    post:
      operationId: nullableOptionalFieldsPost
      tags:
        - requestBodies
      x-speakeasy-flatten-request: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nullableRequired:
                  type: string
                  nullable: true
                optional:
                  type: string
                nullableOptional:
                  type: string
                  nullable: true
              required:
                - nullableRequired
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    type: object
                    properties:
                      nullableRequired:
                        type: string
                        nullable: true
                      optional:
                        type: string
                      nullableOptional:
                        type: string
                        nullable: true
                    required:
                      - nullableRequired
                required:
                  - json
  /anything/requestBodies/post/{pathBigInt}/{pathBigIntStr}/{pathDecimal}/{pathDecimalStr}/complex-number-types:
    post:
      operationId: requestBodyPostComplexNumberTypes
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-complex-number-types
      tags:
        - requestBodies
      parameters:
        - name: pathBigInt
          in: path
          schema:
            type: integer
            format: bigint
            example: 8821239038968084
          required: true
        - name: pathBigIntStr
          in: path
          schema:
            type: string
            format: bigint
            example: "9223372036854775808"
          required: true
        - name: pathDecimal
          in: path
          schema:
            type: number
            format: decimal
            example: 3.141592653589793
          required: true
        - name: pathDecimalStr
          in: path
          schema:
            type: string
            format: decimal
            example: "3.14159265358979344719667586"
          required: true
        - name: queryBigInt
          in: query
          schema:
            type: integer
            format: bigint
            example: 8821239038968084
          required: true
        - name: queryBigIntStr
          in: query
          schema:
            type: string
            format: bigint
            example: "9223372036854775808"
          required: true
        - name: queryDecimal
          in: query
          schema:
            type: number
            format: decimal
            example: 3.141592653589793
          required: true
        - name: queryDecimalStr
          in: query
          schema:
            type: string
            format: decimal
            example: "3.14159265358979344719667586"
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/complexNumberTypes"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/complexNumberTypes"
                  url:
                    type: string
                    example: "http://localhost:35123/anything/requestBodies/post/8821239038968084/9223372036854775808/3.141592653589793/3.14159265358979344719667586/complex-number-types?queryBigInt=8821239038968084&queryBigIntStr=9223372036854775808&queryDecimal=3.141592653589793&queryDecimalStr=3.14159265358979344719667586"
                    x-speakeasy-test-internal-directives:
                      - sortQueryParameters: {}
                required:
                  - json
                  - url
  /anything/requestBodies/post/defaultsAndConsts:
    post:
      operationId: requestBodyPostDefaultsAndConsts
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-defaults-and-consts
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/defaultsAndConsts"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/defaultsAndConstsOutput"
                required:
                  - json
  /anything/requestBodies/post/nullEnum:
    post:
      operationId: nullEnumPost
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/objectWithNullEnums"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/objectWithNullEnums"
                required:
                  - json
  /anything/requestBodies/post/jsonDataTypes/string:
    post:
      operationId: requestBodyPostJsonDataTypesString
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-json-data-types-string
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "test"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    type: string
                    example: "test"
                required:
                  - json
  /anything/requestBodies/post/jsonDataTypes/integer:
    post:
      operationId: requestBodyPostJsonDataTypesInteger
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-json-data-types-integer
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              example: 1
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    type: integer
                    example: 1
                required:
                  - json
  /anything/requestBodies/post/jsonDataTypes/int32:
    post:
      operationId: requestBodyPostJsonDataTypesInt32
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-json-data-types-int32
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              format: int32
              example: 1
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    type: integer
                    format: int32
                    example: 1
                required:
                  - json
  /anything/requestBodies/post/jsonDataTypes/bigint:
    post:
      operationId: requestBodyPostJsonDataTypesBigInt
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-json-data-types-bigint
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              format: bigint
              example: 1
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    type: integer
                    format: bigint
                    example: 1
                  data:
                    type: string
                    example: "1"
                required:
                  - json
                  - data
  /anything/requestBodies/post/jsonDataTypes/bigintStr:
    post:
      operationId: requestBodyPostJsonDataTypesBigIntStr
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-json-data-types-bigint-str
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: string
              format: bigint
              example: "1"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    type: string
                    format: bigint
                    example: "1"
                  data:
                    type: string
                    example: '"1"'
                required:
                  - json
                  - data
  /anything/requestBodies/post/jsonDataTypes/number:
    post:
      operationId: requestBodyPostJsonDataTypesNumber
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-json-data-types-number
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: number
              example: 1.1
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    type: number
                    example: 1.1
                required:
                  - json
  /anything/requestBodies/post/jsonDataTypes/float32:
    post:
      operationId: requestBodyPostJsonDataTypesFloat32
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-json-data-types-float32
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: number
              format: float32
              example: 1.1
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    type: number
                    format: float32
                    example: 1.1
                required:
                  - json
  /anything/requestBodies/post/jsonDataTypes/decimal:
    post:
      operationId: requestBodyPostJsonDataTypesDecimal
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-json-data-types-decimal
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: number
              format: decimal
              example: 1.1
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    type: number
                    format: decimal
                    example: 1.1
                  data:
                    type: string
                    example: "1.1"
                required:
                  - json
                  - data
  /anything/requestBodies/post/jsonDataTypes/decimalStr:
    post:
      operationId: requestBodyPostJsonDataTypesDecimalStr
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-json-data-types-decimal-str
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: string
              format: decimal
              example: "1.1"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    type: string
                    format: decimal
                    example: "1.1"
                  data:
                    type: string
                    example: '"1.1"'
                required:
                  - json
                  - data
  /anything/requestBodies/post/jsonDataTypes/boolean:
    post:
      operationId: requestBodyPostJsonDataTypesBoolean
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-json-data-types-boolean
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
              example: true
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    type: boolean
                    example: true
                required:
                  - json
  /anything/requestBodies/post/jsonDataTypes/date:
    post:
      operationId: requestBodyPostJsonDataTypesDate
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-json-data-types-date
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: string
              format: date
              example: "2020-01-01"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    type: string
                    format: date
                    example: "2020-01-01"
                  data:
                    type: string
                    example: '"2020-01-01"'
                required:
                  - json
                  - data
  /anything/requestBodies/post/jsonDataTypes/dateTime:
    post:
      operationId: requestBodyPostJsonDataTypesDateTime
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-json-data-types-date-time
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: string
              format: date-time
              example: "2020-01-01T00:00:00.001Z"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    type: string
                    format: date-time
                    example: "2020-01-01T00:00:00.001Z"
                  data:
                    type: string
                    example: '"2020-01-01T00:00:00.001Z"'
                    x-speakeasy-test-internal-directives:
                      - sanitizeTimestamp: {}
                required:
                  - json
                  - data
  /anything/requestBodies/post/jsonDataTypes/map/dateTime:
    post:
      operationId: requestBodyPostJsonDataTypesMapDateTime
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-json-data-types-map-date-time
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
                format: date-time
                example: "2020-01-01T00:00:00.001Z"
              example: {"test": "..."}
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    type: object
                    additionalProperties:
                      type: string
                      format: date-time
                      example: "2020-01-01T00:00:00.001Z"
                    example: {"test": "..."}
                  data:
                    type: string
                    example: '{"test":"2020-01-01T00:00:00.001Z"}'
                    x-speakeasy-test-internal-directives:
                      - sanitizeTimestamp: {}
                required:
                  - json
                  - data
  /anything/requestBodies/post/jsonDataTypes/map/bigIntStr:
    post:
      operationId: requestBodyPostJsonDataTypesMapBigIntStr
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-json-data-types-map-bigint-str
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
                format: bigint
              example: {"test": "1"}
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    type: object
                    additionalProperties:
                      type: string
                      format: bigint
                    example: {"test": "1"}
                  data:
                    type: string
                    example: '{"test":"1"}'
                required:
                  - json
                  - data
  /anything/requestBodies/post/jsonDataTypes/map/decimal:
    post:
      operationId: requestBodyPostJsonDataTypesMapDecimal
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-json-data-types-map-decimal
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: number
                format: decimal
              example: {"test": 3.141592653589793}
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    type: object
                    additionalProperties:
                      type: number
                      format: decimal
                    example: {"test": 3.141592653589793}
                  data:
                    type: string
                    example: '{"test":3.141592653589793}'
                required:
                  - json
                  - data
  /anything/requestBodies/post/jsonDataTypes/array/date:
    post:
      operationId: requestBodyPostJsonDataTypesArrayDate
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-json-data-types-array-date
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: date
              example: ["2020-01-01"]
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    type: array
                    items:
                      type: string
                      format: date
                    example: ["2020-01-01"]
                  data:
                    type: string
                    example: '["2020-01-01"]'
                required:
                  - json
                  - data
  /anything/requestBodies/post/jsonDataTypes/array/bigInt:
    post:
      operationId: requestBodyPostJsonDataTypesArrayBigInt
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-json-data-types-array-bigint
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: bigint
              example: [1]
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    type: array
                    items:
                      type: integer
                      format: bigint
                    example: [1]
                  data:
                    type: string
                    example: '[1]'
                required:
                  - json
                  - data
  /anything/requestBodies/post/jsonDataTypes/array/decimalStr:
    post:
      operationId: requestBodyPostJsonDataTypesArrayDecimalStr
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-json-data-types-array-decimal-str
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: decimal
              example: ["3.141592653589793438462643383279"]
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    type: array
                    items:
                      type: string
                      format: decimal
                    example: ["3.141592653589793438462643383279"]
                  data:
                    type: string
                    example: '["3.141592653589793438462643383279"]'
                required:
                  - json
                  - data
  /anything/requestBodies/post/jsonDataTypes/complexNumberArrays:
    post:
      operationId: requestBodyPostJsonDataTypesComplexNumberArrays
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-json-data-types-complex-number-arrays
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/complexNumberArrays"
            examples:
              test:
                value: {
                  "bigIntArray": [9007199254740991],
                  "bigIntStrArray": ["9223372036854775807"],
                  "decimalArray": [3.141592653589793],
                  "decimalStrArray": ["3.141592653589793238462643383279"]
                }
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/complexNumberArrays"
                required:
                  - json
              examples:
                test:
                  value: {
                    "json": {
                      "bigIntArray": [9007199254740991],
                      "bigIntStrArray": ["9223372036854775807"],
                      "decimalArray": [3.141592653589793],
                      "decimalStrArray": ["3.141592653589793238462643383279"]
                    }
                  }
  /anything/requestBodies/post/jsonDataTypes/complexNumberMaps:
    post:
      operationId: requestBodyPostJsonDataTypesComplexNumberMaps
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-json-data-types-complex-number-maps
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/complexNumberMaps"
            examples:
              test:
                value: {
                  "bigintMap": {
                    "bigint": 9007199254740991
                  },
                  "bigintStrMap": {
                    "bigint": "9223372036854775807"
                  },
                  "decimalMap": {
                    "decimal": 3.141592653589793
                  },
                  "decimalStrMap": {
                    "decimal": "3.141592653589793238462643383279"
                  }
                }
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/complexNumberMaps"
                required:
                  - json
              examples:
                test:
                  value: {
                    "json": {
                      "bigintMap": {
                        "bigint": 9007199254740991
                      },
                      "bigintStrMap": {
                        "bigint": "9223372036854775807"
                      },
                      "decimalMap": {
                        "decimal": 3.141592653589793
                      },
                      "decimalStrMap": {
                        "decimal": "3.141592653589793238462643383279"
                      }
                    }
                  }
  /anything/requestBodies/post/nullable/required/string:
    post:
      operationId: requestBodyPostNullableRequiredStringBody
      x-speakeasy-test: true
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: string
              nullable: true
              example: null
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type:
                      - string
                    example: "null"
                required:
                  - data
  /anything/requestBodies/post/nullable/notrequired/string:
    post:
      operationId: requestBodyPostNullableNotRequiredStringBody
      x-speakeasy-test: true
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: string
              nullable: true
              example: null
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type:
                      - string
                    example: "null"
                required:
                  - data
  /anything/requestBodies/post/notnullable/notrequired/string:
    post:
      operationId: requestBodyPostNotNullableNotRequiredStringBody
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: request-bodies-post-not-nullable-not-required-string-body
      tags:
        - requestBodies
      requestBody:
        content:
          application/json:
            schema:
              type: string
              x-speakeasy-example-unset: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type:
                      - string
                    example: ""
                required:
                  - data
  /anything/flattening/inlineBodyAndParamNoConflict:
    post:
      operationId: inlineBodyAndParamNoConflict
      tags:
        - flattening
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bodyStr:
                  type: string
              required:
                - bodyStr
        required: true
      parameters:
        - name: paramStr
          in: query
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    type: object
                    properties:
                      bodyStr:
                        type: string
                    required:
                      - bodyStr
                  args:
                    type: object
                    additionalProperties:
                      type: string
                required:
                  - json
                  - args
  /anything/flattening/componentBodyAndParamNoConflict:
    post:
      operationId: componentBodyAndParamNoConflict
      tags:
        - flattening
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/simpleObject"
        required: true
      parameters:
        - name: paramStr
          in: query
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/simpleObject"
                  args:
                    type: object
                    additionalProperties:
                      type: string
                required:
                  - json
                  - args
  /anything/flattening/inlineBodyAndParamConflict:
    post:
      operationId: inlineBodyAndParamConflict
      tags:
        - flattening
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                str:
                  type: string
              required:
                - str
        required: true
      parameters:
        - name: str
          in: query
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    type: object
                    properties:
                      str:
                        type: string
                    required:
                      - str
                  args:
                    type: object
                    additionalProperties:
                      type: string
                required:
                  - json
                  - args
  /anything/flattening/componentBodyAndParamConflict:
    post:
      operationId: componentBodyAndParamConflict
      tags:
        - flattening
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/simpleObject"
        required: true
      parameters:
        - name: str
          in: query
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/simpleObject"
                  args:
                    type: object
                    additionalProperties:
                      type: string
                required:
                  - json
                  - args
  /anything/flattening/conflictingParams/{str}:
    get:
      operationId: conflictingParams
      tags:
        - flattening
      parameters:
        - name: str
          in: path
          schema:
            type: string
          required: true
        - name: str
          in: query
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  url:
                    type: string
                  args:
                    type: object
                    additionalProperties:
                      type: string
                required:
                  - url
                  - args
  /anything/conflictingEnum/:
    post:
      operationId: conflictingEnum
      description: Test potential namespace conflicts with java.lang.Object
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/conflictingEnum"
      responses:
        "200":
          description: OK
  /json:
    get:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: response-bodies-json-get
      operationId: responseBodyJsonGet
      # No tag as we want this simple request in the root sdk for testing operations get generated there
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "components.yaml#/components/schemas/httpBinSimpleJsonObject"
              examples:
                test:
                  value: {"slideshow": {"author": "Yours Truly","date": "date of publication","title": "Sample Slide Show","slides": [{"title": "Wake up to WonderWidgets!","type": "all"},{"title": "Overview","type": "all","items": ["Why <em>WonderWidgets</em> are great","Who <em>buys</em> WonderWidgets"]}]}}
  /html:
    get:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: response-bodies-string-get
      operationId: responseBodyStringGet
      tags:
        - responseBodies
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                title: html
                type: string
              examples:
                test:
                  value: "<!DOCTYPE html>\\n<html>\\n  <head>\\n  </head>\\n  <body>\\n      <h1>Herman Melville - Moby-Dick</h1>\\n\\n      <div>\\n        <p>\\n          Availing himself of the mild, summer-cool weather that now reigned in these latitudes, and in preparation for the peculiarly active pursuits shortly to be anticipated, Perth, the begrimed, blistered old blacksmith, had not removed his portable forge to the hold again, after concluding his contributory work for Ahab's leg, but still retained it on deck, fast lashed to ringbolts by the foremast; being now almost incessantly invoked by the headsmen, and harpooneers, and bowsmen to do some little job for them; altering, or repairing, or new shaping their various weapons and boat furniture. Often he would be surrounded by an eager circle, all waiting to be served; holding boat-spades, pike-heads, harpoons, and lances, and jealously watching his every sooty movement, as he toiled. Nevertheless, this old man's was a patient hammer wielded by a patient arm. No murmur, no impatience, no petulance did come from him. Silent, slow, and solemn; bowing over still further his chronically broken back, he toiled away, as if toil were life itself, and the heavy beating of his hammer the heavy beating of his heart. And so it was.—Most miserable! A peculiar walk in this old man, a certain slight but painful appearing yawing in his gait, had at an early period of the voyage excited the curiosity of the mariners. And to the importunity of their persisted questionings he had finally given in; and so it came to pass that every one now knew the shameful story of his wretched fate. Belated, and not innocently, one bitter winter's midnight, on the road running between two country towns, the blacksmith half-stupidly felt the deadly numbness stealing over him, and sought refuge in a leaning, dilapidated barn. The issue was, the loss of the extremities of both feet. Out of this revelation, part by part, at last came out the four acts of the gladness, and the one long, and as yet uncatastrophied fifth act of the grief of his life's drama. He was an old man, who, at the age of nearly sixty, had postponedly encountered that thing in sorrow's technicals called ruin. He had been an artisan of famed excellence, and with plenty to do; owned a house and garden; embraced a youthful, daughter-like, loving wife, and three blithe, ruddy children; every Sunday went to a cheerful-looking church, planted in a grove. But one night, under cover of darkness, and further concealed in a most cunning disguisement, a desperate burglar slid into his happy home, and robbed them all of everything. And darker yet to tell, the blacksmith himself did ignorantly conduct this burglar into his family's heart. It was the Bottle Conjuror! Upon the opening of that fatal cork, forth flew the fiend, and shrivelled up his home. Now, for prudent, most wise, and economic reasons, the blacksmith's shop was in the basement of his dwelling, but with a separate entrance to it; so that always had the young and loving healthy wife listened with no unhappy nervousness, but with vigorous pleasure, to the stout ringing of her young-armed old husband's hammer; whose reverberations, muffled by passing through the floors and walls, came up to her, not unsweetly, in her nursery; and so, to stout Labor's iron lullaby, the blacksmith's infants were rocked to slumber. Oh, woe on woe! Oh, Death, why canst thou not sometimes be timely? Hadst thou taken this old blacksmith to thyself ere his full ruin came upon him, then had the young widow had a delicious grief, and her orphans a truly venerable, legendary sire to dream of in their after years; and all of them a care-killing competency.\\n        </p>\\n      </div>\\n  </body>\\n</html>"
  /xml:
    get:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: response-bodies-xml-get
      operationId: responseBodyXmlGet
      tags:
        - responseBodies
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                title: xml
                type: string
              examples:
                test:
                  value: "<?xml version='1.0' encoding='us-ascii'?>\\n\\n<!--  A SAMPLE set of slides  -->\\n\\n<slideshow \\n    title=\"Sample Slide Show\"\\n    date=\"Date of publication\"\\n    author=\"Yours Truly\"\\n    >\\n\\n    <!-- TITLE SLIDE -->\\n    <slide type=\"all\">\\n      <title>Wake up to WonderWidgets!</title>\\n    </slide>\\n\\n    <!-- OVERVIEW -->\\n    <slide type=\"all\">\\n        <title>Overview</title>\\n        <item>Why <em>WonderWidgets</em> are great</item>\\n        <item/>\\n        <item>Who <em>buys</em> WonderWidgets</item>\\n    </slide>\\n\\n</slideshow>"
  /bytes/100:
    get:
      operationId: responseBodyBytesGet
      tags:
        - responseBodies
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                title: bytes
                type: string
                format: binary
  /optional:
    get:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: response-bodies-accept-header
      operationId: responseBodyOptionalGet
      tags:
        - responseBodies
      servers:
        - url: http://localhost:35456
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "components.yaml#/components/schemas/typedObject1"
              examples:
                default:
                  value: {"type": "obj1", "value": "JSON"}
            text/plain:
              schema:
                type: string
              examples:
                override:
                  value: "Success"
  /readonlyorwriteonly#readOnly:
    post:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: response-bodies-read-only
      operationId: responseBodyReadOnly
      servers:
        - url: http://localhost:35456
      tags:
        - responseBodies
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "components.yaml#/components/schemas/readOnlyObject"
              examples:
                test:
                  value: "..."
  /response-headers:
    post:
      operationId: responseBodyEmptyWithHeaders
      tags:
        - responseBodies
      parameters:
        - name: X-String-Header
          in: query
          schema:
            type: string
          required: true
        - name: X-Number-Header
          in: query
          schema:
            type: number
          required: true
      responses:
        "200":
          description: OK
          headers:
            X-String-Header:
              schema:
                type: string
            X-Number-Header:
              schema:
                type: number
  /anything/responseBodies/additionalProperties:
    post:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: response-bodies-additional-properties-string
      operationId: responseBodyAdditionalPropertiesPost
      tags:
        - responseBodies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/objWithStringAdditionalProperties"
            examples:
              string:
                value: {
                  "normalField": "normal",
                  "key1": "value1"
                }
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/objWithStringAdditionalProperties"
                required:
                  - json
              examples:
                string:
                  value: {
                    "json": {
                      "normalField": "normal",
                      "key1": "value1"
                    }
                  }
  /anything/responseBodies/additionalPropertiesAny:
    post:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: response-bodies-additional-properties-any-values
      operationId: responseBodyAdditionalPropertiesAnyPost
      tags:
        - responseBodies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/objWithAnyAdditionalProperties"
            examples:
              test:
                value: {
                  "key1": "value2",
                  "key2": null,
                  "key3": {
                    "foo": "bar",
                    "subkey1": {
                      "foo": "bar"
                    }
                  },
                  "key4": [ "foo", "bar" ],
                  "normalField": "normal"
                }
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/objWithAnyAdditionalProperties"
                required:
                  - json
              examples:
                test:
                  value: {
                    "json": {
                      "key1": "value2",
                      "key2": null,
                      "key3": {
                        "foo": "bar",
                        "subkey1": {
                          "foo": "bar"
                        }
                      },
                      "key4": [ "foo", "bar" ],
                      "normalField": "normal"
                    }
                  }
  /anything/responseBodies/additionalPropertiesComplexNumbers:
    post:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: response-bodies-additional-properties-complex-numbers
      operationId: responseBodyAdditionalPropertiesComplexNumbersPost
      tags:
        - responseBodies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/objWithComplexNumbersAdditionalProperties"
            examples:
              test:
                value: {
                  "normalField": "normal",
                  "key1": 1
                }
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/objWithComplexNumbersAdditionalProperties"
                required:
                  - json
              examples:
                test:
                  value: {
                    "json": {
                      "normalField": "normal",
                      "key1": 1
                    }
                  }
  /anything/responseBodies/additionalPropertiesDate:
    post:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: response-bodies-additional-properties-date
      operationId: responseBodyAdditionalPropertiesDatePost
      tags:
        - responseBodies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/objWithDateAdditionalProperties"
            examples:
              test:
                value: {
                  "normalField": "normal",
                  "key1": "2020-01-01"
                }
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/objWithDateAdditionalProperties"
                required:
                  - json
              examples:
                test:
                  value: {
                    "json": {
                      "normalField": "normal",
                      "key1": "2020-01-01"
                    }
                  }
  /anything/responseBodies/additionalPropertiesObject:
    post:
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: response-bodies-additional-properties-object
      operationId: responseBodyAdditionalPropertiesObjectPost
      tags:
        - responseBodies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/objWithObjAdditionalProperties"
            examples:
              test:
                value: {
                  "datetime": "2020-01-01T00:00:00.001Z",
                  "AdditionalProperties": [1,2,3],
                  "key1": "..."
                }
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/objWithObjAdditionalProperties"
                required:
                  - json
              examples:
                test:
                  value: {
                    "json": {
                      "datetime": "2020-01-01T00:00:00.001Z",
                      "AdditionalProperties": [1,2,3],
                      "key1": "..."
                    }
                  }
  /anything/responseBodies/missing2xxOr3xx:
    get:
      operationId: responseBodyMissing2xxOr3xxGet
      tags:
        - responseBodies
      responses:
        "500":
          description: Internal Server Error
  /reflect#decimalStr:
    post:
      operationId: responseBodyDecimalStr
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: response-bodies-decimal-string
      tags:
        - responseBodies
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              type: string
              format: decimal
            examples:
              test:
                value: 3.141592653589793
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: decimal
              examples:
                test:
                  value: 3.141592653589793
  /anything/{emptyObject}:
    get:
      operationId: emptyObjectGet
      tags:
        - generation
      parameters:
        - $ref: "components.yaml#/components/parameters/emptyObjectParam"
      responses:
        "200":
          description: OK
  /anything/circularReference:
    get:
      operationId: circularReferenceGet
      tags:
        - generation
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "components.yaml#/components/schemas/validCircularReferenceObject"
  /anything/arrayCircularReference:
    get:
      operationId: arrayCircularReferenceGet
      tags:
        - generation
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "components.yaml#/components/schemas/arrayCircularReferenceObject"
  /anything/objectCircularReference:
    get:
      operationId: objectCircularReferenceGet
      tags:
        - generation
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "components.yaml#/components/schemas/objectCircularReferenceObject"
  /anything/oneOfCircularReference:
    get:
      operationId: oneOfCircularReferenceGet
      tags:
        - generation
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "components.yaml#/components/schemas/oneOfCircularReferenceObject"
  /anything/emptyResponseObjectWithComment:
    get:
      operationId: emptyResponseObjectWithCommentGet
      tags:
        - generation
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                type: object
  /anything/ignores:
    post:
      operationId: ignoresPost
      tags:
        - generation
      parameters:
        - name: testParam
          in: query
          schema:
            type: string
        - name: test_param
          in: query
          x-my-ignore: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                testProp:
                  type: string
                test_prop:
                  x-my-ignore: true
                  type: string
                callbackUrl:
                  type: string
                  format: uri
          application/xml:
            x-my-ignore: true
            schema:
              type: object
              properties:
                testProp:
                  type: string
        required: true
      callbacks:
        cb:
          "{$request.bodycomponents.yaml#/callbackUrl}":
            x-my-ignore: true
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        testProp:
                          type: string
                required: true
              responses:
                "200":
                  description: OK
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "components.yaml#/components/schemas/httpBinSimpleJsonObject"
            application/xml:
              x-my-ignore: true
              schema:
                $ref: "components.yaml#/components/schemas/httpBinSimpleJsonObject"
            text/plain:
              x-my-ignore: true
              schema:
                $ref: "components.yaml#/components/schemas/httpBinSimpleJsonObject"
        "201":
          x-my-ignore: true
          description: Created
    get:
      x-my-ignore: true
      operationId: ignoresGet
      tags:
        - generation
      responses:
        "200":
          description: OK
  /anything/ignoreAll:
    x-my-ignore: true
    get:
      operationId: ignoreAllGet
      tags:
        - generation
      responses:
        "200":
          description: OK
  /anything/usageExample:
    post:
      operationId: usageExamplePost
      summary: An operation used for testing usage examples
      description: An operation used for testing usage examples that includes a large array of parameters and input types to ensure that all are handled correctly
      externalDocs:
        description: Usage example docs
        url: https://docs.example.com
      x-speakeasy-usage-example:
        title: "Second"
        description: "Do this second"
        position: 2
      tags:
        - generation
      security:
        - basicAuth: []
      parameters:
        - name: strParameter
          in: query
          required: true
          description: A string parameter
          schema:
            type: string
            description: A string type
            examples:
              - "example 1"
              - "example 2"
              - "example 3"
        - name: intParameter
          in: query
          required: true
          description: An integer parameter
          schema:
            type: integer
            format: int32
            description: An int32 type
        - name: int64Parameter
          in: query
          required: true
          description: An int64 parameter
          schema:
            type: integer
            format: int64
            description: An int64 type
        - name: int64StringParameter
          in: query
          required: true
          description: An int64 parameter
          schema:
            type: string
            format: int64
            description: An int64 string
        - name: float64StringParameter
          in: query
          required: true
          description: A float64 parameter
          schema:
            type: string
            format: float64
            description: A float64 string
        - name: bigintParameter
          in: query
          required: true
          description: An bigint parameter
          schema:
            type: integer
            format: bigint
            description: An bigint type
        - name: bigintParameterOptional
          in: query
          description: An bigint parameter
          schema:
            type: integer
            format: bigint
            description: An bigint type
        - name: bigintStrParameter
          in: query
          required: true
          description: An bigint parameter
          schema:
            type: string
            format: bigint
            description: An bigint type
        - name: bigintStrParameterOptional
          in: query
          description: An bigint parameter
          schema:
            type: string
            format: bigint
            description: An bigint type
        - name: floatParameter
          in: query
          required: true
          description: A float parameter
          schema:
            type: number
            description: A float type
        - name: float32Parameter
          in: query
          required: true
          description: A float32 parameter
          schema:
            type: number
            format: float
            description: A float32 type
        - name: decimalParameter
          in: query
          required: true
          description: A decimal parameter
          schema:
            type: number
            format: decimal
            description: A decimal type
        - name: decimalParameterOptional
          in: query
          required: false
          description: A decimal parameter
          schema:
            type: number
            format: decimal
            description: A decimal type
        - name: decimalStrParameter
          in: query
          required: true
          description: A decimal parameter
          schema:
            type: string
            format: decimal
            description: A decimal type
        - name: decimalStrParameterOptional
          in: query
          required: false
          description: A decimal parameter
          schema:
            type: string
            format: decimal
            description: A decimal type
        - name: doubleParameter
          in: query
          required: true
          description: A double parameter
          schema:
            type: number
            format: double
            description: A double type
        - name: boolParameter
          in: query
          required: true
          description: A boolean parameter
          schema:
            type: boolean
            description: A boolean type
        - name: dateParameter
          in: query
          required: true
          description: A date parameter
          schema:
            type: string
            format: date
            description: A date type
        - name: dateTimeParameter
          in: query
          required: true
          description: A date time parameter
          schema:
            type: string
            format: date-time
            description: A date time type
        - name: dateTimeDefaultParameter
          in: query
          required: true
          description: A date time parameter with a default value
          schema:
            type: string
            format: date-time
            description: A date time type
        - name: enumParameter
          in: query
          required: true
          description: An enum parameter
          schema:
            type: string
            description: An enum type
            enum:
              - "value1"
              - "value2"
              - "value3"
        - name: optEnumParameter
          in: query
          description: An enum parameter
          schema:
            type: string
            description: An enum type
            enum:
              - "value1"
              - "value2"
              - "value3"
            example: "value3"
        - name: falseyNumberParameter
          in: query
          required: true
          description: A number parameter that contains a falsey example value
          schema:
            type: number
            description: A number type
            example: 0
      requestBody:
        description: A request body that contains fields with different formats for testing example generation
        content:
          application/json:
            schema:
              type: object
              properties:
                simpleObject:
                  $ref: "components.yaml#/components/schemas/simpleObject"
                fakerStrings:
                  $ref: "components.yaml#/components/schemas/fakerStrings"
                fakerFormattedStrings:
                  $ref: "components.yaml#/components/schemas/fakerFormattedStrings"
      responses:
        "200":
          description: A successful response that contains the simpleObject sent in the request body
          content:
            application/json:
              schema:
                type: object
                description: A response body that contains the simpleObject sent in the request body
                properties:
                  json:
                    type: [object, "null"]
                    properties:
                      simpleObject:
                        $ref: "components.yaml#/components/schemas/simpleObject"
                      fakerStrings:
                        $ref: "components.yaml#/components/schemas/fakerStrings"
                      fakerFormattedStrings:
                        $ref: "components.yaml#/components/schemas/fakerFormattedStrings"
                required:
                  - json
  /anything/dateParamWithDefault:
    get:
      tags:
        - generation
      operationId: dateParamWithDefault
      parameters:
        - name: dateInput
          in: query
          required: true
          description: A date parameter with a default value
          schema:
            type: string
            format: date
            description: A date type
            default: "2023-10-13"
      responses:
        "204":
          description: OK
  /anything/dateTimeParamWithDefault:
    get:
      tags:
        - generation
      operationId: dateTimeParamWithDefault
      parameters:
        - name: dateTimeInput
          in: query
          required: true
          description: A date time parameter with a default value
          schema:
            type: string
            format: date-time
            description: A date time type
            default: "2023-10-13T12:42:42.999+00:00"
      responses:
        "204":
          description: OK
  /anything/decimalParamWithDefault:
    get:
      tags:
        - generation
      operationId: decimalParamWithDefault
      parameters:
        - name: decimalInput
          in: query
          required: true
          description: A decimal parameter with a default value
          schema:
            type: number
            format: decimal
            description: A decimal type
            default: 903275809834567386763
      responses:
        "204":
          description: OK
  /anything/anchorTypes:
    get:
      operationId: anchorTypesGet
      tags:
        - generation
      responses:
        "200":
          description: A successful response that contains the simpleObject sent in the request body
          content:
            application/json:
              schema:
                type: object
                $anchor: TypeFromAnchor
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/simpleObject"
  /anything/nameOverride:
    get:
      operationId: nameOverrideGet
      x-speakeasy-name-override: nameOverride
      x-speakeasy-usage-example: false
      tags:
        - generation
      parameters:
        - name: nameOverride
          x-speakeasy-name-override: testQueryParam
          in: query
          required: true
          schema:
            type: string
            description: A string type
            example: "example"
        - name: enumNameOverride
          x-speakeasy-name-override: testEnumQueryParam
          in: query
          required: true
          schema:
            type: string
            description: An enum type
            enum:
              - "value1"
              - "value2"
              - "value3"
            example: "value3"
      responses:
        "200":
          description: A successful response that contains the simpleObject sent in the request body
          content:
            application/json:
              schema:
                type: object
                x-speakeasy-name-override: overriddenResponse
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/simpleObject"
                  normal:
                    type: object
                    x-speakeasy-name-override: overriddenNormal
                  allOf:
                    allOf:
                      - type: object
                      - x-speakeasy-name-override: overriddenAllOf
                  deepAllOf:
                    allOf:
                      - allOf:
                        - x-speakeasy-name-override: deepOverriddenAllOf
                        - type: object
  /anything/globalNameOverride:
    post:
      x-speakeasy-usage-example: true
      operationId: getGlobalNameOverride
      tags:
        - generation
      requestBody:
        description: A request body that contains fields with different formats for testing example generation
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/simpleObject"
      responses:
        "200":
          description: A successful response that contains the simpleObject sent in the request body
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/simpleObject"
  /anything/ignoredGeneration:
    get:
      operationId: ignoredGenerationGet
      tags:
        - generation
      parameters:
        - name: ignoredParameter
          in: query
          required: true
          x-my-ignore: true
          schema:
            type: string
            description: A string type
            example: "example"
      responses:
        "200":
          description: A successful response that contains the simpleObject sent in the request body
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/simpleObject"
                  ignoredProperty:
                    type: string
                    x-my-ignore: true
      callbacks:
        notIgnoredCallback:
          "/somecallback":
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        someProp:
                          type: string
                required: true
              responses:
                "200":
                  description: OK
        ignoredCallbackItem:
          "/someignoredcallback":
            x-my-ignore: true
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      type: string
                required: true
              responses:
                "200":
                  description: OK
        singledIgnoredCallbackOperation:
          "/someothercallback":
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        someProp:
                          type: string
                required: true
              responses:
                "200":
                  description: OK
            put:
              x-my-ignore: true
              requestBody:
                content:
                  application/json:
                    schema:
                      type: string
                required: true
              responses:
                "200":
                  description: OK
    put:
      operationId: ignoredGenerationPut
      requestBody:
        content:
          application/json:
            schema:
              type: string
          application/xml:
            x-my-ignore: true
            schema:
              type: object
              properties:
                xml:
                  type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    type: string
            application/xml:
              x-my-ignore: true
              schema:
                type: object
                properties:
                  xml:
                    type: string
        "201":
          description: Created
          x-my-ignore: true
    post:
      operationId: ignoredGenerationPost
      x-my-ignore: true
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
  /anything/deprecatedOperationWithComments:
    get:
      operationId: deprecatedOperationWithCommentsGet
      tags:
        - generation
      deprecated: true
      x-speakeasy-deprecation-replacement: simplePathParameterObjects
      x-speakeasy-deprecation-message: This operation is deprecated
      summary: This is an endpoint setup to test deprecation with comments
      parameters:
        - name: deprecatedParameter
          in: query
          schema:
            type: string
          deprecated: true
          x-speakeasy-deprecation-replacement: newParameter
          x-speakeasy-deprecation-message: This parameter is deprecated
          description: This is a string parameter
        - name: newParameter
          in: query
          schema:
            type: string
          description: This is a string parameter
      responses:
        "200":
          description: OK
  /anything/deprecatedOperationNoComments:
    get:
      operationId: deprecatedOperationNoCommentsGet
      tags:
        - generation
      deprecated: true
      parameters:
        - name: deprecatedParameter
          in: query
          schema:
            type: string
          deprecated: true
      responses:
        "200":
          description: OK
  /anything/deprecatedObjectInSchema:
    get:
      operationId: deprecatedObjectInSchemaGet
      tags:
        - generation
      responses:
        "200":
          description: A successful response that contains a deprecatedObject sent in the request body
          content:
            application/json:
              schema:
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/deprecatedObject"
  /anything/deprecatedFieldInSchema:
    post:
      operationId: deprecatedFieldInSchemaPost
      tags:
        - generation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/deprecatedFieldInObject"
        required: true
      responses:
        "200":
          description: OK
  /anything/typedParameterGeneration:
    get:
      operationId: typedParameterGenerationGet
      tags:
        - generation
      parameters:
        - name: date
          in: query
          schema:
            type: string
            format: date
        - name: bigint
          in: query
          schema:
            type: integer
            format: bigint
        - name: decimal
          in: query
          schema:
            type: number
            format: decimal
        - name: obj
          in: query
          schema:
            type: object
            properties:
              str:
                type: string
              num:
                type: number
              bool:
                type: boolean
            required:
              - str
              - num
              - bool
      responses:
        "200":
          description: OK
  /anything/ignoredPath:
    x-my-ignore: true
    get:
      operationId: ignoredPathGet
      responses:
        "200":
          description: OK
  /anything/globals/queryParameter:
    get:
      x-speakeasy-usage-example:
        tags:
          - global-parameters
      operationId: globalsQueryParameterGet
      tags:
        - globals
      parameters:
        - name: globalQueryParam
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  args:
                    type: object
                    properties:
                      globalQueryParam:
                        type: string
                    required:
                      - globalQueryParam
                required:
                  - args
  /anything/globals/pathParameter/{globalPathParam}:
    get:
      x-speakeasy-usage-example:
        tags:
          - global-parameters
      operationId: globalPathParameterGet
      tags:
        - globals
      parameters:
        - name: globalPathParam
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  url:
                    type: string
                required:
                  - url
  /anything/globals/header:
    get:
      operationId: globalsHeaderGet
      tags:
        - globals
      parameters:
        - name: globalHeaderParam
          in: header
          required: true
          schema:
            type: boolean
            example: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  headers:
                    type: object
                    additionalProperties:
                      type: string
  /anything/globals/hidden/{globalHiddenPathParam}:
    post:
      operationId: globalsHiddenPost
      x-speakeasy-max-method-params: 0
      tags:
        - globals
      parameters:
        - $ref: "components.yaml#/components/parameters/globalHiddenQueryParam"
        - name: globalHiddenHeaderParam
          in: header
          required: true
          schema:
            type: string
          x-speakeasy-globals-hidden: true
        - name: globalHiddenPathParam
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                test:
                  type: string
                  example: friend
                other:
                  type: integer
                  example: 37
              required:
                - test
                - other
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    type: object
                    properties:
                      test:
                        type: string
                        example: friend
                      other:
                        type: integer
                        example: 37
                    required:
                      - test
                      - other
                  args:
                    type: object
                    properties:
                      globalHiddenQueryParam:
                        type: string
                    required:
                      - globalHiddenQueryParam
                  url:
                    type: string
                  headers:
                    type: object
                    additionalProperties:
                      type: string
                required:
                  - json
                  - args
                  - url
                  - headers
  /anything/stronglyTypedOneOf:
    post:
      operationId: stronglyTypedOneOfPost
      tags:
        - unions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/stronglyTypedOneOfObject"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/stronglyTypedOneOfObject"
                required:
                  - json
  /anything/stronglyTypedOneOfWithNonStandardDiscriminatorName:
    post:
      operationId: stronglyTypedOneOfPostWithNonStandardDiscriminatorName
      tags:
        - unions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/stronglyTypedOneOfObjectWithNonStandardDiscriminatorName"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/stronglyTypedOneOfObjectWithNonStandardDiscriminatorName"
                required:
                  - json
  /anything/stronglyTypedOneOfDiscriminated:
    post:
      operationId: stronglyTypedOneOfDiscriminatedPost
      tags:
        - unions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/stronglyTypedOneOfDiscriminatedObject"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/stronglyTypedOneOfDiscriminatedObject"
                required:
                  - json
  /anything/weaklyTypedOneOf:
    post:
      operationId: weaklyTypedOneOfPost
      tags:
        - unions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/weaklyTypedOneOfObject"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/weaklyTypedOneOfObject"
                required:
                  - json
  /anything/weaklyTypedOneOfNullEnum:
    post:
      operationId: weaklyTypedOneOfNullEnumPost
      tags:
        - unions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/weaklyTypedOneOfNullEnumObject"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/weaklyTypedOneOfNullEnumObject"
                required:
                  - json
  /anything/oneOfOverlappingObjects:
    post:
      operationId: oneOfOverlappingObjects
      tags:
        - unions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - field1
              properties:
                field1:
                  type: string
                field2:
                  type: boolean
                field3:
                  type: number
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/oneOfOverlappingObjects"
                required:
                  - json
  /anything/typedObjectOneOf:
    post:
      operationId: typedObjectOneOfPost
      tags:
        - unions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/typedObjectOneOf"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/typedObjectOneOf"
                required:
                  - json
  /anything/typedObjectNullableOneOf:
    post:
      operationId: typedObjectNullableOneOfPost
      tags:
        - unions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/typedObjectNullableOneOf"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/typedObjectNullableOneOf"
                required:
                  - json
  /anything/collectionOneOf:
    post:
      operationId: collectionOneOfPost
      tags:
        - unions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/collectionOneOfObject"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/collectionOneOfObject"
                required:
                  - json
  /anything/flattenedTypedObject:
    post:
      operationId: flattenedTypedObjectPost
      tags:
        - unions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/flattenedTypedObject1"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/flattenedTypedObject1"
                required:
                  - json
  /anything/nullableTypedObject:
    post:
      operationId: nullableTypedObjectPost
      tags:
        - unions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/nullableTypedObject1"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    $ref: "components.yaml#/components/schemas/nullableTypedObject1"
                required:
                  - json
  /anything/nullableOneOfSchema:
    post:
      operationId: nullableOneOfSchemaPost
      tags:
        - unions
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "components.yaml#/components/schemas/typedObject1"
                - $ref: "components.yaml#/components/schemas/typedObject2"
                - type: "null"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    oneOf:
                      - $ref: "components.yaml#/components/schemas/typedObject1"
                      - $ref: "components.yaml#/components/schemas/typedObject2"
                      - type: "null"
                required:
                  - json
  /anything/nullableOneOfInObject:
    post:
      operationId: nullableOneOfTypeInObjectPost
      tags:
        - unions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/nullableOneOfTypeInObject"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    $ref: "#/components/schemas/nullableOneOfTypeInObject"
                required:
                  - json
  /anything/nullableOneOfRefInObject:
    post:
      operationId: nullableOneOfRefInObjectPost
      tags:
        - unions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/nullableOneOfRefInObject"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    $ref: "#/components/schemas/nullableOneOfRefInObject"
                required:
                  - json
  /anything/primitiveTypeOneOf:
    post:
      operationId: primitiveTypeOneOfPost
      tags:
        - unions
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: string
                - type: integer
                - type: number
                - type: boolean
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    oneOf:
                      - type: string
                      - type: integer
                      - type: number
                      - type: boolean
                required:
                  - json
  /anything/mixedTypeOneOf:
    post:
      operationId: mixedTypeOneOfPost
      tags:
        - unions
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: string
                - type: integer
                - $ref: "components.yaml#/components/schemas/simpleObject"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    oneOf:
                      - type: string
                      - type: integer
                      - $ref: "components.yaml#/components/schemas/simpleObject"
                required:
                  - json
  /anything/unionDateNull:
    post:
      operationId: unionDateNull
      tags:
        - unions
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: string
                  format: date
                - type: "null"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    oneOf:
                      - type: string
                        format: date
                      - type: "null"
                required:
                  - json
  /anything/unionDateTimeNull:
    post:
      operationId: unionDateTimeNull
      tags:
        - unions
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: string
                  format: date-time
                - type: "null"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    oneOf:
                      - type: string
                        format: date-time
                      - type: "null"
                required:
                  - json
  /anything/unionDateTimeBigInt:
    post:
      operationId: unionDateTimeBigInt
      tags:
        - unions
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: string
                  format: date-time
                - type: integer
                  format: bigint
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    oneOf:
                      - type: string
                        format: date-time
                      - type: integer
                        format: bigint
                required:
                  - json
  /anything/unionBigIntStrDecimal:
    post:
      operationId: unionBigIntStrDecimal
      tags:
        - unions
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: string
                  format: bigint
                - type: number
                  format: decimal
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    oneOf:
                      - type: string
                        format: bigint
                      - type: number
                        format: decimal
                required:
                  - json
  /anything/unionMap:
    post:
      operationId: unionMap
      tags:
        - unions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [input]
              properties:
                input:
                  type: object
                  additionalProperties:
                    $ref: "components.yaml#/components/schemas/oneOfPrimitives"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  json:
                    type: object
                    required: [input]
                    properties:
                      input:
                        type: object
                        additionalProperties:
                          $ref: "components.yaml#/components/schemas/oneOfPrimitives"
                required:
                  - json
  /status/{statusCode}:
    get:
      operationId: statusGetError
      tags:
        - errors
      parameters:
        - name: statusCode
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
        "300":
          description: Multiple Choices
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
  /errors/{statusCode}:
    servers:
      - url: http://localhost:35456
    get:
      x-speakeasy-errors:
        statusCodes:
          - "400"
          - "401"
          - "4XX"
          - "500"
          - "501"
      operationId: statusGetXSpeakeasyErrors
      tags:
        - errors
      parameters:
        - name: statusCode
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
        "300":
          description: Multiple Choices
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "components.yaml#/components/schemas/error"
        "501":
          description: Not Implemented
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  type:
                    $ref: "components.yaml#/components/schemas/errorType"
  /anything/connectionError:
    get:
      operationId: connectionErrorGet
      servers:
        - url: http://somebrokenapi.broken
      tags:
        - errors
      responses:
        "200":
          description: OK
  /errors/unionErrors:
    servers:
      - url: http://localhost:35456
    get:
      operationId: unionErrorsGet
      tags:
        - errors
      parameters:
        - name: errorType
          in: query
          required: true
          schema:
            type: string
            enum:
              - "type1"
              - "type2"
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "components.yaml#/components/schemas/errorType1"
                  - $ref: "components.yaml#/components/schemas/errorType2"
  /anything/telemetry/user-agent:
    get:
      operationId: telemetryUserAgentGet
      tags:
        - telemetry
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  headers:
                    type: object
                    additionalProperties:
                      type: string
                required:
                  - headers
  /anything/telemetry/speakeasy-user-agent:
    get:
      operationId: telemetrySpeakeasyUserAgentGet
      tags:
        - telemetry
      parameters:
        - name: User-Agent
          in: header
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  headers:
                    type: object
                    additionalProperties:
                      type: string
                required:
                  - headers
  /pagination/cursor_non_numeric:
    get:
      operationId: paginationCursorNonNumeric
      servers:
        - url: http://localhost:35456
      parameters:
        - name: cursor
          in: query
          description: The page token used to request a specific page of the search results
          schema:
            type: string
      responses:
        "200":
          $ref: "components.yaml#/components/responses/paginationResponseNonNumeric"
      tags:
        - pagination
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.resultArray[(@.length-1)]
  /pagination/cursor_non_numeric#withRetries:
    get:
      operationId: paginationWithRetries
      servers:
        - url: http://localhost:35456
      parameters:
        - name: cursor
          in: query
          description: The page token used to request a specific page of the search results
          schema:
            type: string
        - name: request-id
          in: header
          schema:
            type: string
            default: paginationWithRetries
        - name: fault-settings
          in: header
          schema:
            type: string
            default: '{"error_code": 503, "error_count": 3}'
      responses:
        "200":
          $ref: "components.yaml#/components/responses/paginationResponseNonNumeric"
      tags:
        - pagination
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.resultArray[(@.length-1)]
      x-speakeasy-retries:
        strategy: backoff
        backoff:
          initialInterval: 10 # 10 ms
          maxInterval: 100 # 100 ms
          maxElapsedTime: 1000 # 1 seconds
          exponent: 1.5
        statusCodes:
          - 503
        retryConnectionErrors: false
  /pagination/limitoffset/page:
    get:
      operationId: paginationLimitOffsetPageParams
      servers:
        - url: http://localhost:35456
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          required: true
      responses:
        "200":
          $ref: "components.yaml#/components/responses/paginationResponse"
      tags:
        - pagination
      x-speakeasy-pagination:
        type: offsetLimit
        inputs:
          - name: page
            in: parameters
            type: page
        outputs:
          results: $.resultArray
    put:
      operationId: paginationLimitOffsetPageBody
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/limitOffsetConfig"
        required: true
      responses:
        "200":
          $ref: "components.yaml#/components/responses/paginationResponse"
      tags:
        - pagination
      x-speakeasy-pagination:
        type: offsetLimit
        inputs:
          - name: limit
            in: requestBody
            type: limit
          - name: page
            in: requestBody
            type: page
        outputs:
          numPages: $.numPages
  /pagination/limitoffset/deep_outputs/page:
    put:
      operationId: paginationLimitOffsetDeepOutputsPageBody
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/limitOffsetConfig"
        required: true
      responses:
        "200":
          $ref: "components.yaml#/components/responses/paginationResponseDeep"
      tags:
        - pagination
      x-speakeasy-pagination:
        type: offsetLimit
        inputs:
          - name: limit
            in: requestBody
            type: limit
          - name: page
            in: requestBody
            type: page
        outputs:
          numPages: $.pageInfo.numPages
  /pagination/limitoffset/offset:
    get:
      operationId: paginationLimitOffsetOffsetParams
      servers:
        - url: http://localhost:35456
      parameters:
        - name: offset
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          $ref: "components.yaml#/components/responses/paginationResponse"
      tags:
        - pagination
      x-speakeasy-pagination:
        type: offsetLimit
        inputs:
          - name: limit
            in: parameters
            type: limit
          - name: offset
            in: parameters
            type: offset
        outputs:
          results: $.resultArray
    put:
      operationId: paginationLimitOffsetOffsetBody
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/limitOffsetConfig"
        required: true
      responses:
        "200":
          $ref: "components.yaml#/components/responses/paginationResponse"
      tags:
        - pagination
      x-speakeasy-pagination:
        type: offsetLimit
        inputs:
          - name: limit
            in: requestBody
            type: limit
          - name: offset
            in: requestBody
            type: offset
        outputs:
          results: $.resultArray
  /pagination/url:
    get:
      operationId: paginationURLParams
      servers:
        - url: http://localhost:35456
      parameters:
        - name: attempts
          in: query
          schema:
            type: integer
          required: true
        - name: is-reference-path
          in: query
          schema:
            type: string
      responses:
        "200":
          $ref: "components.yaml#/components/responses/paginationResponse"
      tags:
        - pagination
      x-speakeasy-pagination:
        type: url
        outputs:
          nextUrl: $.next
  /pagination/cursor:
    get:
      operationId: paginationCursorParams
      servers:
        - url: http://localhost:35456
      parameters:
        - name: cursor
          in: query
          schema:
            type: integer
          required: true
      responses:
        "200":
          $ref: "components.yaml#/components/responses/paginationResponse"
      tags:
        - pagination
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.resultArray[(@.length-1)]
    put:
      operationId: paginationCursorBody
      servers:
        - url: http://localhost:35456
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                cursor:
                  type: integer
              required:
                - cursor
        required: true
      responses:
        "200":
          $ref: "components.yaml#/components/responses/paginationResponse"
      tags:
        - pagination
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: requestBody
            type: cursor
        outputs:
          nextCursor: $.resultArray[(@.length-1)]
  /group/first:
    get:
      operationId: groupFirstGet
      x-speakeasy-name-override: get
      x-speakeasy-group: first
      responses:
        "200":
          description: OK
  /group/second:
    get:
      operationId: groupSecondGet
      x-speakeasy-name-override: get
      x-speakeasy-group: second
      responses:
        "200":
          description: OK
  /anything/nested:
    get:
      operationId: nestedGet
      x-speakeasy-name-override: get
      x-speakeasy-group: nested
      responses:
        "200":
          description: OK
  /anything/nested/first:
    get:
      operationId: nestedFirstGet
      x-speakeasy-name-override: get
      x-speakeasy-group: nested.first
      responses:
        "200":
          description: OK
  /anything/nested/second:
    get:
      operationId: nestedSecondGet
      x-speakeasy-name-override: get
      x-speakeasy-group: nested.second
      responses:
        "200":
          description: OK
  /anything/nest/first:
    get:
      operationId: nestFirstGet
      x-speakeasy-name-override: get
      x-speakeasy-group: nest.first
      responses:
        "200":
          description: OK
  /resource:
    post:
      x-speakeasy-entity-operation: ExampleResource#create
      operationId: createResource
      tags:
        - resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExampleResource"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExampleResource"
  /fileResource:
    post:
      x-speakeasy-entity-operation: File#create
      operationId: createFile
      tags:
        - resource
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileResource"
  /datasource/array:
    get:
      x-speakeasy-entity-operation: ArrayDataSource#read
      operationId: getArrayDataSource
      tags:
        - resource
      parameters:
        - name: filter
          in: query
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayDataSource"
  /resource/object/{resourceId}:
    get:
      x-speakeasy-entity-operation: ExampleResource#read
      operationId: getResource
      tags:
        - resource
      parameters:
        - name: resourceId
          in: path
          x-speakeasy-match: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExampleResource"
    post:
      x-speakeasy-entity-operation:
        - ExampleResource#create#2
        - ExampleResource#update
      operationId: updateResource
      tags:
        - resource
      parameters:
        - name: resourceId
          in: path
          x-speakeasy-match: id
          schema:
            type: string
          required: true
        - name: augment
          in: query
          schema:
            type: string
          required: true
      responses:
        "202":
          description: OK
    delete:
      x-speakeasy-entity-operation: ExampleResource#delete
      operationId: deleteResource
      tags:
        - resource
      parameters:
        - name: resourceId
          in: path
          x-speakeasy-match: id
          schema:
            type: string
          required: true
      responseBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExampleResource"
      responses:
        204:
          description: No Content
  /retries/after:
    get:
      operationId: retriesAfter
      servers:
        - url: http://localhost:35456
      parameters:
        - name: request-id
          in: query
          schema:
            type: string
          required: true
        - name: num-retries
          in: query
          schema:
            type: integer
        - name: retry-after-val
          in: query
          schema:
            type: integer
      tags:
        - retries
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: retries
                type: object
                properties:
                  retries:
                    type: integer
                required:
                  - retries
      x-speakeasy-retries:
        strategy: backoff
        backoff:
          initialInterval: 10 # 10 ms
          maxInterval: 200 # 200 ms
          maxElapsedTime: 1000 # 1 seconds
          exponent: 1.5
        statusCodes:
          - 503
        retryConnectionErrors: false
  /retries:
    get:
      operationId: retriesGet
      servers:
        - url: http://localhost:35456
      parameters:
        - name: request-id
          in: query
          schema:
            type: string
          required: true
        - name: num-retries
          in: query
          schema:
            type: integer
      tags:
        - retries
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: retries
                type: object
                properties:
                  retries:
                    type: integer
                required:
                  - retries
      x-speakeasy-retries:
        strategy: backoff
        backoff:
          initialInterval: 10 # 10 ms
          maxInterval: 200 # 200 ms
          maxElapsedTime: 1000 # 1 seconds
          exponent: 1.5
        statusCodes:
          - 503
        retryConnectionErrors: false
    post:
      operationId: retriesPost
      servers:
        - url: http://localhost:35456
      parameters:
        - name: request-id
          in: query
          schema:
            type: string
          required: true
        - name: num-retries
          in: query
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                field_one: # This is an example field, replace with your actual field names and types
                  type: string
              required:
                - field_one
      tags:
        - retries
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: retries
                type: object
                properties:
                  retries:
                    type: integer
                required:
                  - retries
      x-speakeasy-retries:
        strategy: backoff
        backoff:
          initialInterval: 10 # 10 ms
          maxInterval: 200 # 200 ms
          maxElapsedTime: 1000 # 1 seconds
          exponent: 1.5
        statusCodes:
          - 503
        retryConnectionErrors: false
  /retriesFlatEmptyResponse:
    post:
      operationId: retriesFlatEmptyResponsePost
      servers:
        - url: http://localhost:35456
      parameters:
        - name: request-id
          in: query
          schema:
            type: string
          required: true
        - name: num-retries
          in: query
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                field_one: # This is an example field, replace with your actual field names and types
                  type: string
              required:
                - field_one
      tags:
        - retries
      responses:
        "200":
          description: OK
      x-speakeasy-retries:
        strategy: backoff
        backoff:
          initialInterval: 10 # 10 ms
          maxInterval: 200 # 200 ms
          maxElapsedTime: 1000 # 1 seconds
          exponent: 1.5
        statusCodes:
          - 503
        retryConnectionErrors: false
  /retriesConnectError:
    get:
      operationId: retriesConnectErrorGet
      description: A request to a non-valid port to test connection errors
      servers:
        - url: http://localhost:33333
      tags:
        - retries
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: retries
                type: object
                properties:
                  retries:
                    type: integer
                required:
                  - retries
      x-speakeasy-retries:
        strategy: backoff
        # Using extension defaults
        statusCodes:
          - "5XX"
        retryConnectionErrors: false
  /eventstreams/json:
    post:
      tags:
        - eventstreams
      operationId: json
      servers:
        - url: http://localhost:35456
      responses:
        "200":
          description: Ok
          headers:
            Request-Id:
              schema:
                type: string
          content:
            text/event-stream:
              schema:
                $ref: "components.yaml#/components/schemas/jsonEvent"
  /eventstreams/text:
    post:
      tags:
        - eventstreams
      operationId: text
      servers:
        - url: http://localhost:35456
      responses:
        "200":
          description: Ok
          content:
            text/event-stream:
              schema:
                $ref: "components.yaml#/components/schemas/textEvent"
  /eventstreams/multiline:
    post:
      tags:
        - eventstreams
      operationId: multiline
      servers:
        - url: http://localhost:35456
      responses:
        "200":
          description: Ok
          content:
            text/event-stream:
              schema:
                $ref: "components.yaml#/components/schemas/textEvent"
  /eventstreams/rich:
    post:
      tags:
        - eventstreams
      operationId: rich
      servers:
        - url: http://localhost:35456
      responses:
        "200":
          description: Ok
          content:
            text/event-stream:
              schema:
                $ref: "components.yaml#/components/schemas/richStream"
  /eventstreams/differentdataschemas:
    post:
      tags:
        - eventstreams
      operationId: differentDataSchemas
      servers:
        - url: http://localhost:35456
      responses:
        "200":
          description: Ok
          content:
            text/event-stream:
              schema:
                $ref: "components.yaml#/components/schemas/differentDataSchemas"
  /eventstreams/chat:
    post:
      tags:
        - eventstreams
      operationId: chat
      servers:
        - url: http://localhost:35456
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [prompt]
              properties:
                stream:
                  type: boolean
                prompt:
                  type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "components.yaml#/components/schemas/chatCompletionResult"
            text/event-stream:
              schema:
                $ref: "components.yaml#/components/schemas/chatCompletionStream"

  /docs/per-language-docs:
    get:
      operationId: getDocumentationPerLanguage
      description: Gets documentation for some language, I guess.
      x-speakeasy-docs:
        go:
          description: Get stuff in Golang.
        python:
          description: Get stuff in Python.
        typescript:
          description: Get stuff in TypeScript.
      parameters:
        - name: language
          description: The language parameter for this endpoint.
          in: query
          required: true
          schema:
            type: string
          x-speakeasy-docs:
            go:
              description: The Golang language is uptight.
            python:
              description: The Python language is popular.
            typescript:
              description: THe TypeScript language is corporate.
      tags:
        - documentation
      responses:
        "200":
          description: OK
          x-speakeasy-docs:
            go:
              description: Golang is OK
            python:
              description: Python is OK
            typescript:
              description: TypeScript is OK
  /anything/hooks:
    get:
      operationId: testHooks
      x-speakeasy-test: true
      x-speakeasy-test-internal-id: test-hooks
      tags:
        - hooks
      parameters:
        - name: someParam
          in: query
          required: true
          schema:
            type: string
            example: someInitialValue
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  args:
                    type: object
                    properties:
                      someParam:
                        type: string
                        example: overriddenParam
                    required:
                      - someParam
                  headers:
                    type: object
                    properties:
                      Idempotency-Key:
                        type: string
                        example: "some-key"
                      Client-Level-Header:
                        type: string
                        example: "added by client"
                  url:
                    type: string
                    example: http://localhost:35123/anything/hooks?someParam=overriddenParam
                required:
                  - args
                  - headers
                  - url
  /anything/hooks/beforeCreateRequestPaths/{namespace}:
    get:
      operationId: testHooksBeforeCreateRequestPaths
      tags:
        - hooks
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                required: [url, headers]
                properties:
                  url:
                    type: string
                  headers:
                    type: object
                    properties:
                      Old-Pathname:
                        type: string
  /anything/hooks/afterResponseValidation:
    get:
      operationId: testHooksAfterResponse
      tags:
        - hooks
      responses:
        "200":
          description: OK
  /status/400#testHooksError:
    get:
      operationId: testHooksError
      tags:
        - hooks
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
  /bearer#authorizationHeaderModification:
    get:
      operationId: authorizationHeaderModification
      tags:
        - hooks
      security:
        - apiKeyAuth: []
      responses:
        "200":
          $ref: "components.yaml#/components/responses/tokenAuthResponse"
        "401":
          description: Unsuccessful authentication.
  /anything/openEnums/unrecognized:
    post:
      operationId: openEnumsPostUnrecognized
      tags:
        - openEnums
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/themeRequestOpaque"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "components.yaml#/components/schemas/themeResponse"
  /clientcredentials/authenticatedrequest:
    post:
      operationId: authenticatedRequest
      security:
        - clientCredentials: [write]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: OK
  /anything/flattenedUnionResponse:
    get:
      operationId: flattenedUnionResponse
      tags:
        - responseBodies
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
  /anything/flattenedEnvelopeResponse:
    get:
      operationId: flattenedEnvelopeResponse
      tags:
        - responseBodies
      responses:
        "200":
          description: OK
          headers:
            x-some-header:
              description: A header
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
  /anything/flattenedEnvelopeUnionResponse:
    get:
      operationId: flattenedEnvelopeUnionResponse
      tags:
        - responseBodies
      responses:
        "200":
          description: OK
          headers:
            x-some-header:
              description: A header
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
  /anything/flattenedEnvelopePaginationResponse:
    get:
      operationId: flattenedEnvelopePaginationResponse
      tags:
        - responseBodies
      parameters:
        - name: cursor
          in: query
          description: The page token used to request a specific page of the search results
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  numPages:
                    type: integer
                  next:
                    type: string
                  resultArray:
                    type: array
                    items:
                      type: string
                required:
                  - numPages
                  - resultArray
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.resultArray[(@.length-1)]
  /anything/customClient/{pathParam}:
    post:
      operationId: customClientPost
      tags:
        - customClient
      parameters:
        - name: pathParam
          in: path
          schema:
            type: string
            example: pathValue
          required: true
        - name: queryStringParam
          in: query
          schema:
            type: string
            example: queryValue
          required: true
        - name: headerParam
          in: header
          schema:
            type: string
            example: headerValue
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "components.yaml#/components/schemas/simpleObject"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                title: res
                type: object
                properties:
                  url:
                    type: string
                  args:
                    type: object
                    properties:
                      queryStringParam:
                        type: string
                    required:
                      - queryStringParam
                  headers:
                    type: object
                    additionalProperties:
                      type: string
                  json:
                    $ref: "components.yaml#/components/schemas/simpleObject"
                required:
                  - url
                  - args
                  - headers
components:
  schemas:
    ExampleVehicle:
      type: object
      oneOf:
        - $ref: "#/components/schemas/ExampleBoat"
        - $ref: "#/components/schemas/ExampleCar"
    ExampleBoat:
      type: object
      properties:
        type:
          type: string
          enum:
            - boat
        name:
          type: string
        length:
          type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - type
        - name
        - length
    ExampleCar:
      type: object
      properties:
        type:
          type: string
          enum:
            - car
        name:
          type: string
        make:
          type: string
        model:
          type: string
        year:
          type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - type
        - name
        - make
        - model
        - year
    FileResource:
      x-speakeasy-entity: File
      type: object
      properties:
        id:
          type: string
      required:
        - id
    ArrayDataSource:
      x-speakeasy-entity: ArrayDataSource
      type: array
      items:
        type: string
    ExampleResource:
      x-speakeasy-entity: ExampleResource
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          x-speakeasy-conflicts-with: name_prefix
        name_prefix:
          type: string
          x-speakeasy-conflicts-with:
            - name
            - id
        createdAt:
          type: string
          format: date-time
        inlineObject:
          type: object
          properties:
            inline_name:
              type: string
              x-speakeasy-conflicts-with: "../name"
        mapOfString:
          type: object
          additionalProperties:
            type: string
        mapOfInteger:
          type: object
          additionalProperties:
            type: integer
        arrayOfString:
          type: array
          items:
            type: string
        arrayOfNumber:
          type: array
          items:
            type: number
        enumStr:
          type: string
          enum:
            - one
            - two
            - three
        enumNumber:
          type: integer
          enum:
            - 1
            - 2
            - 3
        updatedAt:
          type: string
          format: date-time
        chocolates:
          type: array
          items:
            type: object
            properties:
              description:
                type: string
            required:
              - description
        vehicle:
          $ref: "#/components/schemas/ExampleVehicle"
      required:
        - id
        - name
        - chocolates
        - vehicle
    primitiveTypeUnion:
      x-speakeasy-include: true
      oneOf:
        - type: string
        - type: integer
        - type: integer
          format: int32
        - type: number
        - type: number
          format: float
        - type: boolean
    numericUnion:
      x-speakeasy-include: true
      oneOf:
        - type: integer
        - type: number
        - type: integer
          format: bigint
        - type: string
          format: decimal
    nullableTypes:
      type: object
      properties:
        nullableTypeArray:
          type:
            - null
            - string
        nullableType:
          type: string
          nullable: true
    nullableObject:
      type: ["object", "null"]
      required:
        - required
      properties:
        required:
          type: integer
        optional:
          type: string
      example: null
    nullableOptionalObject:
      type: ["object", "null"]
      required:
        - required
      properties:
        required:
          type: integer
        optional:
          type: string
    oneOfObjectOrArrayOfObjects:
      oneOf:
        - $ref: "components.yaml#/components/schemas/simpleObject"
        - type: "array"
          items:
            $ref: "components.yaml#/components/schemas/simpleObject"
    nullableOneOfTypeInObject:
      type: object
      required:
        - OneOfOne
        - NullableOneOfOne
        - NullableOneOfTwo
      properties:
        OneOfOne:
          oneOf:
            - type: boolean
        NullableOneOfOne:
          oneOf:
            - type: boolean
            - type: "null"
        NullableOneOfTwo:
          oneOf:
            - type: boolean
            - type: integer
            - type: "null"
    nullableOneOfRefInObject:
      type: object
      required:
        - OneOfOne
        - NullableOneOfOne
        - NullableOneOfTwo
      properties:
        OneOfOne:
          oneOf:
            - $ref: "components.yaml#/components/schemas/typedObject1"
        NullableOneOfOne:
          oneOf:
            - $ref: "components.yaml#/components/schemas/typedObject1"
            - type: "null"
        NullableOneOfTwo:
          oneOf:
            - $ref: "components.yaml#/components/schemas/typedObject1"
            - $ref: "components.yaml#/components/schemas/typedObject2"
            - type: "null"
    allOfToAllOf:
      x-speakeasy-include: true
      title: "allOf1"
      type: object
      allOf:
        - $ref: "#/components/schemas/allOf2"
    allOf2:
      type: object
      title: "allOf2"
      allOf:
        - $ref: "#/components/schemas/allOf3"
    allOf3:
      type: object
      title: "allOf3"
      allOf:
        - properties:
            id:
              type: string
          title: "allOf4"
    unsupportedEnums:
      type: object
      x-speakeasy-include: true
      properties:
        booleanEnum:
          type: boolean
          enum:
            - false
        numberEnum:
          type: number
          enum:
            - 1.5
            - 2.5
      required:
        - booleanEnum
        - numberEnum
    oneOfGenerationStressTest:
      x-speakeasy-include: true
      type: object
      properties:
        oneOfSameType:
          oneOf:
            - type: string
              minLength: 40
              maxLength: 40
            - type: string
              enum:
                - latest
            - type: "null"
        oneOfFromArrayOfTypes:
          type: [string, integer, "null"]
        nullableAny:
          type: "null"
        any: {}
      required:
        - oneOfSameType
        - oneOfFromArrayOfTypes
        - nullableAny
        - any
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      x-speakeasy-example: YOUR_USERNAME;YOUR_PASSWORD
    apiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Authenticate using an API Key generated via our platform.
      x-speakeasy-example: Token YOUR_API_KEY
    bearerAuth:
      type: http
      scheme: bearer
      x-speakeasy-example: YOUR_JWT
    apiKeyAuthNew:
      type: apiKey
      in: header
      name: x-api-key
      x-speakeasy-example: Token <YOUR_API_KEY>
    oauth2:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://localhost:35123/oauth2/authorize
          scopes: {}
      x-speakeasy-example: Bearer YOUR_OAUTH2_TOKEN
    openIdConnect:
      type: openIdConnect
      openIdConnectUrl: http://localhost:35123/.well-known/openid-configuration
      x-speakeasy-example: Bearer YOUR_OPENID_TOKEN
    clientCredentials:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: /clientcredentials/token
          scopes:
            read: Read access
            write: Write access
