/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK, ServerList } from "../src/sdk";
import {
  SelectServerWithIDServerBroken,
  SelectServerWithIDServerList,
  ServerWithTemplatesServerList,
} from "../src/sdk/models/operations";
import { expect, test } from "@jest/globals";

import { AxiosError } from "axios";
import { SelectServerWithIDServerValid } from "../src/sdk/models/operations";
import { recordTest } from "./helpers";
import { templateUrl } from "../src/internal/utils";

test("Test Select Global Server Valid", async () => {
  recordTest("servers-select-global-server-valid");

  const sdk = new SDK({ serverURL: ServerList[0] });
  const res = await sdk.servers.selectGlobalServer();
  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("Test Select Global Server Broken", async () => {
  recordTest("servers-select-global-server-broken");

  const sdk = new SDK({ serverURL: ServerList[1] });
  return sdk.servers.selectGlobalServer().catch((err: AxiosError) => {
    expect(err.code).toMatch(/^(ENOTFOUND|EAI_AGAIN)$/);
  });
});

test("Test Select Server With ID Default", async () => {
  recordTest("servers-select-server-with-id-default");

  const sdk = new SDK({ serverURL: ServerList[0] });
  const res = await sdk.servers.selectServerWithID();
  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("Test Select Server With ID Valid", async () => {
  recordTest("servers-select-server-with-id-valid");

  const sdk = new SDK({ serverURL: ServerList[0] });
  const res = await sdk.servers.selectServerWithID(
    SelectServerWithIDServerList[SelectServerWithIDServerValid]
  );
  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("Test Select Server With ID Broken", async () => {
  recordTest("servers-select-server-with-id-broken");

  const sdk = new SDK({ serverURL: ServerList[0] });
  return sdk.servers
    .selectServerWithID(
      SelectServerWithIDServerList[SelectServerWithIDServerBroken]
    )
    .catch((err: AxiosError) => {
      expect(err.code).toMatch(/^(ENOTFOUND|EAI_AGAIN)$/);
    });
});

test("Test Server with Templates Global", async () => {
  recordTest("servers-server-with-templates-global");

  const sdk = new SDK({
    serverURL: templateUrl(ServerList[2], {
      hostname: "localhost",
      port: "35123",
    }),
  });

  const res = await sdk.servers.serverWithTemplatesGlobal();
  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("Test Server with Templates", async () => {
  recordTest("servers-server-with-templates");

  const sdk = new SDK({});

  const serverURL = templateUrl(ServerWithTemplatesServerList[0], {
    hostname: "localhost",
    port: "35123",
  });

  const res = await sdk.servers.serverWithTemplates(serverURL);

  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});
