/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { expect, test, vi } from "vitest";
import { Fetcher, HTTPClient } from "../../lib/http";

test("makes requests", async () => {
  const fetcher: Fetcher = vi.fn(async (req) => {
    return new Response(JSON.stringify({ success: true, url: req }), {
      headers: { "content-type": "application/json" },
    });
  });

  const client = new HTTPClient({ fetcher });
  const res = await client.request(new Request("https://example.com/foo"));
  expect(res.ok).toBe(true);

  const body = await res.json();
  expect(body.success).toBe(true);
});

test("applies hooks to request lifecycle", async () => {
  const fetcher: Fetcher = vi.fn(async () => new Response("ok"));

  const client = new HTTPClient({ fetcher });

  const onRequest = vi.fn();
  const onError = vi.fn();
  const onResponse = vi.fn();

  client
    .addHook("beforeRequest", onRequest)
    .addHook("requestError", onError)
    .addHook("response", onResponse);

  const req = new Request("https://example.com/foo");
  const res = await client.request(req);
  expect(res.ok).toBe(true);

  expect(onRequest).toHaveBeenCalledWith(req);
  expect(onError).not.toHaveBeenCalledWith(req);
  expect(onResponse).toHaveBeenCalledWith(res, req);
});

test("allows request hooks to mutate requests", async () => {
  const fetcher: Fetcher = vi.fn(async (req) => {
    if (!(req instanceof Request)) {
      throw new Error("expected a Request object");
    }

    return new Response(req.headers.get("test-header"));
  });

  const client = new HTTPClient({ fetcher });
  // mutate request
  client.addHook("beforeRequest", (req) => {
    req.headers.append("test-header", "a");
  });
  // return new request
  client.addHook("beforeRequest", (req) => {
    const next = new Request(req);
    next.headers.append("test-header", "b");
    return next;
  });

  const res = await client.request(new Request("https://example.com/foo"));
  expect(res.ok).toBe(true);

  const body = await res.text();
  expect(body).toEqual("a, b");
});

test("applies error hooks", async () => {
  const err = new Error("simulated error");
  const fetcher: Fetcher = vi.fn(async () => {
    throw err;
  });

  const client = new HTTPClient({ fetcher });

  const hookA = vi.fn();

  client.addHook("requestError", hookA);

  const req = new Request("https://example.com/foo");
  await expect(client.request(req)).rejects.toEqual(err);

  expect(hookA).toHaveBeenCalledWith(err, req);
});

test("applies multiple hooks", async () => {
  const fetcher: Fetcher = vi.fn(async () => new Response("ok"));

  const client = new HTTPClient({ fetcher });

  const hookA = vi.fn();
  const hookB = vi.fn();

  client.addHook("response", hookA).addHook("response", hookB);

  const req = new Request("https://example.com/foo");
  const res = await client.request(req);
  expect(res.ok).toBe(true);

  expect(hookA).toHaveBeenCalledWith(res, req);
  expect(hookB).toHaveBeenCalledWith(res, req);
});

test("removes hooks", async () => {
  const fetcher: Fetcher = vi.fn(async () => new Response("ok"));

  const client = new HTTPClient({ fetcher });

  const hookA = vi.fn();
  const hookB = vi.fn();
  const hookC = vi.fn();

  client.addHook("response", hookA);
  client.addHook("response", hookB);
  client.addHook("response", hookC);

  client.removeHook("response", hookB);

  const req = new Request("https://example.com/foo");
  const res = await client.request(req);
  expect(res.ok).toBe(true);

  expect(hookA).toHaveBeenCalledWith(res, req);
  expect(hookB).not.toHaveBeenCalled();
  expect(hookC).toHaveBeenCalledWith(res, req);
});

test("clones into new client with no shared state", async () => {
  const fetcher: Fetcher = vi.fn(async () => new Response("ok"));

  const onResponseParent = vi.fn();
  const onResponseChild = vi.fn();

  const parent = new HTTPClient({ fetcher });
  parent.addHook("response", onResponseParent);

  const child = parent.clone();
  child.addHook("response", onResponseChild);

  // Check that child hooks aren't inadvertently added to parent internal hook
  // arrays.
  let req = new Request("https://example.com/foo");
  let res = await parent.request(req);
  expect(res.ok).toBe(true);

  expect(onResponseParent).toHaveBeenCalledWith(res, req);
  expect(onResponseChild).not.toHaveBeenCalled();

  onResponseParent.mockClear();

  // Check that child does take on the hooks registered on the parent.
  req = new Request("https://example.com/foo");
  res = await child.request(req);

  expect(onResponseParent).toHaveBeenCalledWith(res, req);
  expect(onResponseChild).toHaveBeenCalledWith(res, req);
});
