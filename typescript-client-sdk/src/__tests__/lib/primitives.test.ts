/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { test, expect } from "vitest";
import { abortSignalAny } from "../../lib/primitives.js";

test("abortSignalAny with one signal", () => {
  const sig = new AbortController().signal;

  const result = abortSignalAny([sig]);

  expect(result).toBe(sig);
});

test("abortSignalAny with one aborted signal", () => {
  const controller = new AbortController();
  const sig = controller.signal;
  controller.abort("simulated signal abort");

  const result = abortSignalAny([sig]);

  expect(result).toBe(sig);
  expect(result?.reason).toBe("simulated signal abort");
});

test("abortSignalAny short circuits on first aborted signal", () => {
  const sig1 = new AbortController().signal;
  const sig2 = new AbortController().signal;

  const controller = new AbortController();
  const sig3 = controller.signal;
  controller.abort("simulated signal abort");

  const result = abortSignalAny([sig1, sig2, sig3]);

  expect(result).toBe(sig3);
  expect(result?.reason).toBe("simulated signal abort");
});

test("abortSignalAny composes signals", () => {
  const sig1 = new AbortController().signal;

  const controller = new AbortController();
  const sig2 = controller.signal;

  const sig3 = new AbortController().signal;

  const result = abortSignalAny([sig1, sig2, sig3]);
  controller.abort("simulated signal abort");

  expect(result).not.toBe(sig1);
  expect(result).not.toBe(sig2);
  expect(result).not.toBe(sig3);
  expect(result?.reason).toBe("simulated signal abort");
});
