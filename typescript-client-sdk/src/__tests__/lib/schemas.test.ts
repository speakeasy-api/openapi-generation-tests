/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

import { expect, test } from "vitest";

import { collectExtraKeys } from "../../lib/schemas.js";

test("collectExtraKeys collects excess object keys", () => {
  const schema = z
    .object({
      name: z.string(),
      age: z.number(),
    })
    .catchall(z.unknown());

  const wrapped = collectExtraKeys(schema, "additional", true);

  const result = wrapped.parse({
    name: "John",
    age: 30,
    extranum: 42,
    extraobj: { cool: "beans" },
  });

  expect(result).toEqual({
    name: "John",
    age: 30,
    additional: { extranum: 42, extraobj: { cool: "beans" } },
  });
});

test("collectExtraKeys adds empty key when no excess props found and not optional", () => {
  const schema = z
    .object({
      name: z.string(),
      age: z.number(),
    })
    .catchall(z.unknown());

  const wrapped = collectExtraKeys(schema, "additional", false);

  const result = wrapped.parse({
    name: "John",
    age: 30,
  });

  expect(result).toEqual({
    name: "John",
    age: 30,
    additional: {},
  });
});

test("collectExtraKeys does not add empty key when no excess props found and optional", () => {
  const schema = z
    .object({
      name: z.string(),
      age: z.number(),
    })
    .catchall(z.unknown());

  const wrapped = collectExtraKeys(schema, "additional", true);

  const result = wrapped.parse({
    name: "John",
    age: 30,
  });

  expect(result).toEqual({
    name: "John",
    age: 30,
  });
});

test("collectExtraKeys adds empty key when catch all is not set", () => {
  const schema = z.object({
    name: z.string(),
    age: z.number(),
  });

  const wrapped = collectExtraKeys(schema, "additional", false);

  const result = wrapped.parse({
    name: "John",
    age: 30,
  });

  expect(result).toEqual({
    name: "John",
    age: 30,
    additional: {},
  });
});

test("collectExtraKeys does not clobber excess key name", () => {
  const schema = z
    .object({
      name: z.string(),
      age: z.number(),
    })
    .catchall(z.array(z.number()));

  const wrapped = collectExtraKeys(schema, "additional", true);

  const result = wrapped.parse({
    name: "John",
    age: 30,
    additional: [1, 2, 3],
    extranum: [4, 5, 6],
    extraobj: [7, 8, 9],
  });

  expect(result).toEqual({
    name: "John",
    age: 30,
    additional: {
      additional: [1, 2, 3],
      extranum: [4, 5, 6],
      extraobj: [7, 8, 9],
    },
  });
});
