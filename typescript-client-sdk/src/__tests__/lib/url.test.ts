/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import { test, expect } from "vitest";

import { pathToFunc } from "../../lib/url.js";

test.each<
  [
    title: string,
    pattern: string,
    args: Record<string, string | number>,
    output: string | Error,
  ]
>([
  ["no placeholders", "/sample/path", {}, "/sample/path"],
  ["one placeholder end", "/author/{id}", { id: 123 }, "/author/123"],
  [
    "one placeholder mid",
    "/author/{id}/likes",
    { id: "123" },
    "/author/123/likes",
  ],
  [
    "multiple placeholders",
    "/{a}/{b}/{c}",
    { a: "foo", b: "bar", c: "baz" },
    "/foo/bar/baz",
  ],
  [
    "infix placeholder",
    "/entity/user-{id}/",
    { id: "1893" },
    "/entity/user-1893/",
  ],
  [
    "insufficient params",
    "/blog/{slug}/comments/{commentId}",
    { slug: "hello-world" },
    new Error("Parameter 'commentId' is required"),
  ],
  [
    // This test covers javascript users that may pass opaque objects into the
    // path builder function.
    "invalid param type",
    "/blog/{slug}/comments/{commentId}",
    { slug: [] as unknown as string, commentId: 456 },
    new Error("Parameter 'slug' must be a string or number"),
  ],
])("pathToFunc: %s", (_, pattern, args, output) => {
  if (output instanceof Error) {
    expect(() => pathToFunc(pattern)(args)).toThrow(output);
  } else {
    expect(pathToFunc(pattern)(args)).toEqual(output);
  }
});

test("pathToFunc encodes param values", () => {
  const expected = "/channel/product%3Aupdates/entity/user-u%2F123/";
  const actual = pathToFunc("/channel/{cid}/entity/user-{uid}/", {
    charEncoding: "percent",
  })({
    cid: "product:updates",
    uid: "u/123",
  });

  expect(actual).toEqual(expected);
});
