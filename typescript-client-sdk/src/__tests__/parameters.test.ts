/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { SDK } from "../index.js";
import { IntEnum } from "../sdk/models/shared/index.js";
import { Decimal, RFCDate } from "../sdk/types/index.js";
import { recordTest } from "./common_helpers.js";
import { sortQueryParameters, sortSerializedMaps } from "./helpers.js";
import { createTestHTTPClient } from "./testclient.js";

test("Parameters Deep Object Query Params Deep Object", async () => {
  recordTest("parameters-deep-object-query-params-deep-object");
  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("deepObjectQueryParamsDeepObject"),
  });

  const result = await sdk.parameters.deepObjectQueryParamsDeepObject({
    arr: [
      "test1",
      "test2",
    ],
    bool: true,
    int: 1,
    map: {
      "testkey1": "testvalue1",
      "testkey2": "testvalue2",
    },
    num: 1.1,
    obj: {
      bool: true,
      date: new RFCDate("2020-01-01"),
      dateTime: new Date("2020-01-01T00:00:00.001Z"),
      enum: "one",
      float32: 1.1,
      int: 1,
      int32: 1,
      int32Enum: 55,
      intEnum: IntEnum.Second,
      num: 1.1,
      str: "test",
      any: "any",
      bigint: BigInt("8821239038968084"),
      bigintStr: BigInt("9223372036854775808"),
      boolOpt: true,
      decimal: new Decimal("3.141592653589793"),
      decimalStr: new Decimal("3.14159265358979344719667586"),
      float64Str: 1.1,
      int64Str: 100,
      strOpt: "testOptional",
    },
    oneof: "test",
    oneofnestedobject: {
      nested: "test",
    },
    str: "test",
  });
  expect(result).toBeDefined();
  expect(result?.args).toEqual({
    deepObjArr: [
      "test1",
      "test2",
    ],
    deepObjBool: "true",
    deepObjInt: "1",
    deepObjMapTestkey1: "testvalue1",
    deepObjMapTestkey2: "testvalue2",
    deepObjNum: "1.1",
    deepObjObjAny: "any",
    deepObjObjBigintStr: "9223372036854775808",
    deepObjObjBigint: "8821239038968084",
    deepObjObjBoolOpt: "true",
    deepObjObjBool: "true",
    deepObjObjDateTime: "2020-01-01T00:00:00.001Z",
    deepObjObjDate: "2020-01-01",
    deepObjObjDecimalStr: "3.14159265358979344719667586",
    deepObjObjDecimal: "3.141592653589793",
    deepObjObjEnum: "one",
    deepObjObjFloat32: "1.1",
    deepObjObjFloat64Str: "1.1",
    deepObjObjInt32Enum: "55",
    deepObjObjInt32: "1",
    deepObjObjInt64Str: "100",
    deepObjObjIntEnum: "2",
    deepObjObjInt: "1",
    deepObjObjNum: "1.1",
    deepObjObjStrOpt: "testOptional",
    deepObjObjStr: "test",
    deepObjOneof: "test",
    deepObjStr: "test",
  });
  expect(sortQueryParameters(result?.url)).toEqual(
    "http://localhost:35123/anything/queryParams/deepObject/deepObj?deepObj[arr]=test1&deepObj[arr]=test2&deepObj[bool]=true&deepObj[int]=1&deepObj[map][testkey1]=testvalue1&deepObj[map][testkey2]=testvalue2&deepObj[num]=1.1&deepObj[obj][any]=any&deepObj[obj][bigintStr]=9223372036854775808&deepObj[obj][bigint]=8821239038968084&deepObj[obj][boolOpt]=true&deepObj[obj][bool]=true&deepObj[obj][dateTime]=2020-01-01T00%3A00%3A00.001Z&deepObj[obj][date]=2020-01-01&deepObj[obj][decimalStr]=3.14159265358979344719667586&deepObj[obj][decimal]=3.141592653589793&deepObj[obj][enum]=one&deepObj[obj][float32]=1.1&deepObj[obj][float64Str]=1.1&deepObj[obj][int32Enum]=55&deepObj[obj][int32]=1&deepObj[obj][int64Str]=100&deepObj[obj][intEnum]=2&deepObj[obj][int]=1&deepObj[obj][num]=1.1&deepObj[obj][strOpt]=testOptional&deepObj[obj][str]=test&deepObj[oneof]=test&deepObj[oneofnestedobject][nested]=test&deepObj[str]=test",
  );
});

test("Parameters Deep Object Query Params Map", async () => {
  recordTest("parameters-deep-object-query-params-map");
  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("deepObjectQueryParamsMap"),
  });

  const result = await sdk.parameters.deepObjectQueryParamsMap({
    "test": "value",
    "test2": "value2",
  }, {
    "test": [
      "test",
      "test2",
    ],
    "test2": [
      "test3",
      "test4",
    ],
  });
  expect(result).toBeDefined();
  expect(result?.args).toEqual({
    "mapArrParam[test]": [
      "test",
      "test2",
    ],
    "mapArrParam[test2]": [
      "test3",
      "test4",
    ],
    "mapParam[test]": "value",
    "mapParam[test2]": "value2",
  });
  expect(sortQueryParameters(result?.url)).toEqual(
    "http://localhost:35123/anything/queryParams/deepObject/map?mapArrParam[test2]=test3&mapArrParam[test2]=test4&mapArrParam[test]=test&mapArrParam[test]=test2&mapParam[test2]=value2&mapParam[test]=value",
  );
});

test("Parameters Deep Object Query Params Object", async () => {
  recordTest("parameters-deep-object-query-params-object");
  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("deepObjectQueryParamsObject"),
  });

  const result = await sdk.parameters.deepObjectQueryParamsObject({
    bool: true,
    date: new RFCDate("2020-01-01"),
    dateTime: new Date("2020-01-01T00:00:00.001Z"),
    enum: "one",
    float32: 1.1,
    int: 1,
    int32: 1,
    int32Enum: 55,
    intEnum: IntEnum.Second,
    num: 1.1,
    str: "test",
    any: "any",
    bigint: BigInt("8821239038968084"),
    bigintStr: BigInt("9223372036854775808"),
    boolOpt: true,
    decimal: new Decimal("3.141592653589793"),
    decimalStr: new Decimal("3.14159265358979344719667586"),
    float64Str: 1.1,
    int64Str: 100,
    strOpt: "testOptional",
  }, {
    arr: [
      "test",
      "test2",
    ],
  });
  expect(result).toBeDefined();
  expect(result?.args).toEqual({
    objArrParamArr: [
      "test",
      "test2",
    ],
    objParamAny: "any",
    objParamBigintStr: "9223372036854775808",
    objParamBigint: "8821239038968084",
    objParamBoolOpt: "true",
    objParamBool: "true",
    objParamDateTime: "2020-01-01T00:00:00.001Z",
    objParamDate: "2020-01-01",
    objParamDecimalStr: "3.14159265358979344719667586",
    objParamDecimal: "3.141592653589793",
    objParamEnum: "one",
    objParamFloat32: "1.1",
    objParamFloat64Str: "1.1",
    objParamInt32Enum: "55",
    objParamInt32: "1",
    objParamInt64Str: "100",
    objParamIntEnum: "2",
    objParamInt: "1",
    objParamNum: "1.1",
    objParamStrOpt: "testOptional",
    objParamStr: "test",
  });
  expect(sortQueryParameters(result?.url)).toEqual(
    "http://localhost:35123/anything/queryParams/deepObject/obj?objArrParam[arr]=test&objArrParam[arr]=test2&objParam[any]=any&objParam[bigintStr]=9223372036854775808&objParam[bigint]=8821239038968084&objParam[boolOpt]=true&objParam[bool]=true&objParam[dateTime]=2020-01-01T00%3A00%3A00.001Z&objParam[date]=2020-01-01&objParam[decimalStr]=3.14159265358979344719667586&objParam[decimal]=3.141592653589793&objParam[enum]=one&objParam[float32]=1.1&objParam[float64Str]=1.1&objParam[int32Enum]=55&objParam[int32]=1&objParam[int64Str]=100&objParam[intEnum]=2&objParam[int]=1&objParam[num]=1.1&objParam[strOpt]=testOptional&objParam[str]=test",
  );
});

test("Parameters Form Query Params Array", async () => {
  recordTest("parameters-form-query-params-array");
  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("formQueryParamsArray"),
  });

  const result = await sdk.parameters.formQueryParamsArray([
    "test",
    "test2",
  ], [
    1,
    2,
  ]);
  expect(result).toBeDefined();
  expect(result?.args).toEqual({
    arrParam: "test,test2",
    arrParamExploded: [
      "1",
      "2",
    ],
  });
  expect(sortQueryParameters(result?.url)).toEqual(
    "http://localhost:35123/anything/queryParams/form/array?arrParam=test%2Ctest2&arrParamExploded=1&arrParamExploded=2",
  );
});

test("Parameters Form Query Params Camel Object", async () => {
  recordTest("parameters-form-query-params-camel-object");
  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("formQueryParamsCamelObject"),
  });

  const result = await sdk.parameters.formQueryParamsCamelObject({
    itemCount: "10",
    searchTerm: "foo",
  }, {
    encodedCount: "11",
    encodedTerm: "bar",
  });
  expect(result).toBeDefined();
  expect(result?.args).toEqual({
    itemCount: "10",
    searchTerm: "foo",
  });
  expect(sortQueryParameters(result?.url)).toEqual(
    "http://localhost:35123/anything/queryParams/form/camelObj?item_count=10&obj_param=encoded_count%2C11%2Cencoded_term%2Cbar&search_term=foo",
  );
});

test("Parameters Form Query Params Map", async () => {
  recordTest("parameters-form-query-params-map");
  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("formQueryParamsMap"),
  });

  const result = await sdk.parameters.formQueryParamsMap({
    "test": "value",
    "test2": "value2",
  }, {
    "test": 1,
    "test2": 2,
  });
  expect(result).toBeDefined();
  expect(sortSerializedMaps(result?.args, `(.*)`, ",")).toEqual({
    "mapParam": "test,value,test2,value2",
    "test": "1",
    "test2": "2",
  });
  expect(
    sortSerializedMaps(
      sortQueryParameters(result?.url),
      `.*?\\?mapParam=(.*?)&(.*)`,
      "%2C",
    ),
  ).toEqual(
    "http://localhost:35123/anything/queryParams/form/map?mapParam=test%2Cvalue%2Ctest2%2Cvalue2&test=1&test2=2",
  );
});

test("Parameters Form Query Params Object", async () => {
  recordTest("parameters-form-query-params-object");
  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("formQueryParamsObject"),
  });

  const result = await sdk.parameters.formQueryParamsObject({
    bool: true,
    date: new RFCDate("2020-01-01"),
    dateTime: new Date("2020-01-01T00:00:00.001Z"),
    enum: "one",
    float32: 1.1,
    int: 1,
    int32: 1,
    int32Enum: 55,
    intEnum: IntEnum.Second,
    num: 1.1,
    str: "test",
    any: "any",
    bigint: BigInt("8821239038968084"),
    bigintStr: BigInt("9223372036854775808"),
    boolOpt: true,
    decimal: new Decimal("3.141592653589793"),
    decimalStr: new Decimal("3.14159265358979344719667586"),
    float64Str: 1.1,
    int64Str: 100,
    strOpt: "testOptional",
  }, {
    bool: true,
    date: new RFCDate("2020-01-01"),
    dateTime: new Date("2020-01-01T00:00:00.001Z"),
    enum: "one",
    float32: 1.1,
    int: 1,
    int32: 1,
    int32Enum: 55,
    intEnum: IntEnum.Second,
    num: 1.1,
    str: "test",
    any: "any",
    bigint: BigInt("8821239038968084"),
    bigintStr: BigInt("9223372036854775808"),
    boolOpt: true,
    decimal: new Decimal("3.141592653589793"),
    decimalStr: new Decimal("3.14159265358979344719667586"),
    float64Str: 1.1,
    int64Str: 100,
    strOpt: "testOptional",
  });
  expect(result).toBeDefined();
  expect(result?.args.any).toEqual("any");
  expect(result?.args.bigint).toBeDefined();
  expect(result?.args.bigint).toEqual("8821239038968084");
  expect(result?.args.bigintStr).toBeDefined();
  expect(result?.args.bigintStr).toEqual("9223372036854775808");
  expect(result?.args.bool).toEqual("true");
  expect(result?.args.boolOpt).toBeDefined();
  expect(result?.args.boolOpt).toEqual("true");
  expect(result?.args.date).toEqual("2020-01-01");
  expect(result?.args.dateTime).toEqual("2020-01-01T00:00:00.001Z");
  expect(result?.args.decimal).toBeDefined();
  expect(result?.args.decimal).toEqual("3.141592653589793");
  expect(result?.args.decimalStr).toBeDefined();
  expect(result?.args.decimalStr).toEqual("3.14159265358979344719667586");
  expect(result?.args.enum).toEqual("one");
  expect(result?.args.float32).toEqual("1.1");
  expect(result?.args.float64Str).toBeDefined();
  expect(result?.args.float64Str).toEqual("1.1");
  expect(result?.args.int).toEqual("1");
  expect(result?.args.int32).toEqual("1");
  expect(result?.args.int32Enum).toEqual("55");
  expect(result?.args.int64Str).toBeDefined();
  expect(result?.args.int64Str).toEqual("100");
  expect(result?.args.intEnum).toEqual("2");
  expect(result?.args.intOptNull).toBeUndefined();
  expect(result?.args.num).toEqual("1.1");
  expect(result?.args.numOptNull).toBeUndefined();
  expect(sortSerializedMaps(result?.args.objParam, `(.*)`, ",")).toEqual(
    "any,any,bigint,8821239038968084,bigintStr,9223372036854775808,bool,true,boolOpt,true,date,2020-01-01,dateTime,2020-01-01T00:00:00.001Z,decimal,3.141592653589793,decimalStr,3.14159265358979344719667586,enum,one,float32,1.1,float64Str,1.1,int,1,int32,1,int32Enum,55,int64Str,100,intEnum,2,num,1.1,str,test,strOpt,testOptional",
  );
  expect(result?.args.str).toEqual("test");
  expect(result?.args.strOpt).toBeDefined();
  expect(result?.args.strOpt).toEqual("testOptional");
  expect(
    sortSerializedMaps(
      sortQueryParameters(result?.url),
      `objParam=(.*?)&`,
      "%2C",
    ),
  ).toEqual(
    "http://localhost:35123/anything/queryParams/form/obj?any=any&bigint=8821239038968084&bigintStr=9223372036854775808&bool=true&boolOpt=true&date=2020-01-01&dateTime=2020-01-01T00%3A00%3A00.001Z&decimal=3.141592653589793&decimalStr=3.14159265358979344719667586&enum=one&float32=1.1&float64Str=1.1&int=1&int32=1&int32Enum=55&int64Str=100&intEnum=2&num=1.1&objParam=any%2Cany%2Cbigint%2C8821239038968084%2CbigintStr%2C9223372036854775808%2Cbool%2Ctrue%2CboolOpt%2Ctrue%2Cdate%2C2020-01-01%2CdateTime%2C2020-01-01T00%3A00%3A00.001Z%2Cdecimal%2C3.141592653589793%2CdecimalStr%2C3.14159265358979344719667586%2Cenum%2Cone%2Cfloat32%2C1.1%2Cfloat64Str%2C1.1%2Cint%2C1%2Cint32%2C1%2Cint32Enum%2C55%2Cint64Str%2C100%2CintEnum%2C2%2Cnum%2C1.1%2Cstr%2Ctest%2CstrOpt%2CtestOptional&str=test&strOpt=testOptional",
  );
});

test("Parameters Form Query Params Primitive", async () => {
  recordTest("parameters-form-query-params-primitive");
  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("formQueryParamsPrimitive"),
  });

  const result = await sdk.parameters.formQueryParamsPrimitive(
    true,
    1,
    1.1,
    "test",
  );
  expect(result).toBeDefined();
  expect(result?.args).toEqual({
    boolParam: "true",
    intParam: "1",
    numParam: "1.1",
    strParam: "test",
  });
  expect(sortQueryParameters(result?.url)).toEqual(
    "http://localhost:35123/anything/queryParams/form/primitive?boolParam=true&intParam=1&numParam=1.1&strParam=test",
  );
});

test("Parameters Form Query Params Ref Param Object", async () => {
  recordTest("parameters-form-query-params-ref-param-object");
  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("formQueryParamsRefParamObject"),
  });

  const result = await sdk.parameters.formQueryParamsRefParamObject({
    bool: true,
    int: 1,
    num: 1.1,
    str: "test",
  }, {
    bool: true,
    int: 1,
    num: 1.1,
    str: "test",
  });
  expect(result).toBeDefined();
  expect(result?.args).toEqual({
    bool: "true",
    int: "1",
    num: "1.1",
    refObjParam: "bool,true,int,1,num,1.1,str,test",
    str: "test",
  });
  expect(sortQueryParameters(result?.url)).toEqual(
    "http://localhost:35123/anything/queryParams/form/refParamObject?bool=true&int=1&num=1.1&refObjParam=bool%2Ctrue%2Cint%2C1%2Cnum%2C1.1%2Cstr%2Ctest&str=test",
  );
});

test("Parameters Header Params Array", async () => {
  recordTest("parameters-header-params-array");
  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("headerParamsArray"),
  });

  const result = await sdk.parameters.headerParamsArray([
    "test1",
    "test2",
  ]);
  expect(result).toBeDefined();
  expect(result).toEqual({
    headers: {
      xHeaderArray: "test1,test2",
    },
  });
});

test("Parameters Header Params Map", async () => {
  recordTest("parameters-header-params-map");
  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("headerParamsMap"),
  });

  const result = await sdk.parameters.headerParamsMap({
    "key1": "value1",
    "key2": "value2",
  }, {
    "test1": "val1",
    "test2": "val2",
  });
  expect(result).toBeDefined();
  expect(sortSerializedMaps(result?.headers.xHeaderMap, `(.*)`, ",")).toEqual(
    "key1,value1,key2,value2",
  );
  expect(sortSerializedMaps(result?.headers.xHeaderMapExplode, `(.*)`, ","))
    .toEqual("test1=val1,test2=val2");
});

test("Parameters Header Params Object", async () => {
  recordTest("parameters-header-params-object");
  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("headerParamsObject"),
  });

  const result = await sdk.parameters.headerParamsObject({
    bool: true,
    date: new RFCDate("2020-01-01"),
    dateTime: new Date("2020-01-01T00:00:00.001Z"),
    enum: "one",
    float32: 1.1,
    int: 1,
    int32: 1,
    int32Enum: 55,
    intEnum: IntEnum.Second,
    num: 1.1,
    str: "test",
    any: "any",
    bigint: BigInt("8821239038968084"),
    bigintStr: BigInt("9223372036854775808"),
    boolOpt: true,
    decimal: new Decimal("3.141592653589793"),
    decimalStr: new Decimal("3.14159265358979344719667586"),
    float64Str: 1.1,
    int64Str: 100,
    strOpt: "testOptional",
  }, {
    bool: true,
    date: new RFCDate("2020-01-01"),
    dateTime: new Date("2020-01-01T00:00:00.001Z"),
    enum: "one",
    float32: 1.1,
    int: 1,
    int32: 1,
    int32Enum: 55,
    intEnum: IntEnum.Second,
    num: 1.1,
    str: "test",
    any: "any",
    bigint: BigInt("8821239038968084"),
    bigintStr: BigInt("9223372036854775808"),
    boolOpt: true,
    decimal: new Decimal("3.141592653589793"),
    decimalStr: new Decimal("3.14159265358979344719667586"),
    float64Str: 1.1,
    int64Str: 100,
    strOpt: "testOptional",
  });
  expect(result).toBeDefined();
  expect(sortSerializedMaps(result?.headers.xHeaderObj, `(.*)`, ",")).toEqual(
    "any,any,bigint,8821239038968084,bigintStr,9223372036854775808,bool,true,boolOpt,true,date,2020-01-01,dateTime,2020-01-01T00:00:00.001Z,decimal,3.141592653589793,decimalStr,3.14159265358979344719667586,enum,one,float32,1.1,float64Str,1.1,int,1,int32,1,int32Enum,55,int64Str,100,intEnum,2,num,1.1,str,test,strOpt,testOptional",
  );
  expect(sortSerializedMaps(result?.headers.xHeaderObjExplode, `(.*)`, ","))
    .toEqual(
      "any=any,bigint=8821239038968084,bigintStr=9223372036854775808,bool=true,boolOpt=true,date=2020-01-01,dateTime=2020-01-01T00:00:00.001Z,decimal=3.141592653589793,decimalStr=3.14159265358979344719667586,enum=one,float32=1.1,float64Str=1.1,int=1,int32=1,int32Enum=55,int64Str=100,intEnum=2,num=1.1,str=test,strOpt=testOptional",
    );
});

test("Parameters Header Params Primitive", async () => {
  recordTest("parameters-header-params-primitive");
  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("headerParamsPrimitive"),
  });

  const result = await sdk.parameters.headerParamsPrimitive(
    true,
    1,
    1.1,
    "test",
  );
  expect(result).toBeDefined();
  expect(result).toEqual({
    headers: {
      xHeaderBoolean: "true",
      xHeaderInteger: "1",
      xHeaderNumber: "1.1",
      xHeaderString: "test",
    },
  });
});

test("Parameters Mixed Parameters Camel Case", async () => {
  recordTest("parameters-camel-case");
  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("mixedParametersCamelCase"),
  });

  const result = await sdk.parameters.mixedParametersCamelCase(
    "headerValue",
    "pathValue",
    "queryValue",
  );
  expect(result).toBeDefined();
  expect(result).toEqual({
    args: {
      queryStringParam: "queryValue",
    },
    headers: {
      headerParam: "headerValue",
    },
    url:
      "http://localhost:35123/anything/mixedParams/path/pathValue/camelcase?query_string_param=queryValue",
  });
});

test("Parameters Mixed Parameters Primitives", async () => {
  recordTest("parameters-mixed-primitives");
  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("mixedParametersPrimitives"),
  });

  const result = await sdk.parameters.mixedParametersPrimitives(
    "headerValue",
    "pathValue",
    "queryValue",
  );
  expect(result).toBeDefined();
  expect(result).toEqual({
    args: {
      queryStringParam: "queryValue",
    },
    headers: {
      headerparam: "headerValue",
    },
    url:
      "http://localhost:35123/anything/mixedParams/path/pathValue?queryStringParam=queryValue",
  });
});

test("Parameters Pipe Delimited Query Params Array", async () => {
  recordTest("parameters-pipe-query-params-array");
  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("pipeDelimitedQueryParamsArray"),
  });

  const result = await sdk.parameters.pipeDelimitedQueryParamsArray([
    "test",
    "test2",
  ], [
    1,
    2,
  ], {
    "key1": "val1",
    "key2": "val2",
  }, {
    bool: true,
    date: new RFCDate("2020-01-01"),
    dateTime: new Date("2020-01-01T00:00:00.001Z"),
    enum: "one",
    float32: 1.1,
    int: 1,
    int32: 1,
    int32Enum: 55,
    intEnum: IntEnum.Second,
    num: 1.1,
    str: "test",
    any: "any",
    bigint: BigInt("8821239038968084"),
    bigintStr: BigInt("9223372036854775808"),
    boolOpt: true,
    decimal: new Decimal("3.141592653589793"),
    decimalStr: new Decimal("3.14159265358979344719667586"),
    float64Str: 1.1,
    int64Str: 100,
    strOpt: "testOptional",
  });
  expect(result).toBeDefined();
  expect(result?.args).toEqual({
    arrParam: "test|test2",
    arrParamExploded: [
      "1",
      "2",
    ],
  });
  expect(
    sortSerializedMaps(
      sortQueryParameters(result?.url),
      `(?:map|obj)Param=(.*?)(?:&|$)`,
      "|",
    ),
  ).toEqual(
    "http://localhost:35123/anything/queryParams/pipe/array?arrParam=test|test2&arrParamExploded=1&arrParamExploded=2&mapParam=key1|val1|key2|val2&objParam=any|any|bigint|8821239038968084|bigintStr|9223372036854775808|bool|true|boolOpt|true|date|2020-01-01|dateTime|2020-01-01T00%3A00%3A00.001Z|decimal|3.141592653589793|decimalStr|3.14159265358979344719667586|enum|one|float32|1.1|float64Str|1.1|int|1|int32|1|int32Enum|55|int64Str|100|intEnum|2|num|1.1|str|test|strOpt|testOptional",
  );
});

test("Parameters Simple Path Parameter Arrays", async () => {
  recordTest("parameters-simple-path-parameter-arrays");
  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("simplePathParameterArrays"),
  });

  const result = await sdk.parameters.simplePathParameterArrays([
    "test",
    "test2",
  ]);
  expect(result).toBeDefined();
  expect(result).toEqual({
    url: "http://localhost:35123/anything/pathParams/arr/test,test2",
  });
});

test("Parameters Simple Path Parameter Maps", async () => {
  recordTest("parameters-simple-path-parameter-maps");
  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("simplePathParameterMaps"),
  });

  const result = await sdk.parameters.simplePathParameterMaps({
    "test": "value",
    "test2": "value2",
  }, {
    "test": 1,
    "test2": 2,
  });
  expect(result).toBeDefined();
  expect(
    sortSerializedMaps(
      result?.url,
      `.*?\\/map\\/(.*?)\\/mapExploded\\/(.*)`,
      ",",
    ),
  ).toEqual(
    "http://localhost:35123/anything/pathParams/map/test,value,test2,value2/mapExploded/test=1,test2=2",
  );
});

test("Parameters Simple Path Parameter Objects", async () => {
  recordTest("parameters-simple-path-parameter-objects");
  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("simplePathParameterObjects"),
  });

  const result = await sdk.parameters.simplePathParameterObjects({
    bool: true,
    date: new RFCDate("2020-01-01"),
    dateTime: new Date("2020-01-01T00:00:00.001Z"),
    enum: "one",
    float32: 1.1,
    int: 1,
    int32: 1,
    int32Enum: 55,
    intEnum: IntEnum.Second,
    num: 1.1,
    str: "test",
    any: "any",
    bigint: BigInt("8821239038968084"),
    bigintStr: BigInt("9223372036854775808"),
    boolOpt: true,
    decimal: new Decimal("3.141592653589793"),
    decimalStr: new Decimal("3.14159265358979344719667586"),
    float64Str: 1.1,
    int64Str: 100,
    strOpt: "testOptional",
  }, {
    bool: true,
    date: new RFCDate("2020-01-01"),
    dateTime: new Date("2020-01-01T00:00:00.001Z"),
    enum: "one",
    float32: 1.1,
    int: 1,
    int32: 1,
    int32Enum: 55,
    intEnum: IntEnum.Second,
    num: 1.1,
    str: "test",
    any: "any",
    bigint: BigInt("8821239038968084"),
    bigintStr: BigInt("9223372036854775808"),
    boolOpt: true,
    decimal: new Decimal("3.141592653589793"),
    decimalStr: new Decimal("3.14159265358979344719667586"),
    float64Str: 1.1,
    int64Str: 100,
    strOpt: "testOptional",
  });
  expect(result).toBeDefined();
  expect(
    sortSerializedMaps(
      result?.url,
      `(?:obj|objExploded)\\/(.*?)(?:\\/|$)`,
      ",",
    ),
  ).toEqual(
    "http://localhost:35123/anything/pathParams/obj/any,any,bigint,8821239038968084,bigintStr,9223372036854775808,bool,true,boolOpt,true,date,2020-01-01,dateTime,2020-01-01T00:00:00.001Z,decimal,3.141592653589793,decimalStr,3.14159265358979344719667586,enum,one,float32,1.1,float64Str,1.1,int,1,int32,1,int32Enum,55,int64Str,100,intEnum,2,num,1.1,str,test,strOpt,testOptional/objExploded/any=any,bigint=8821239038968084,bigintStr=9223372036854775808,bool=true,boolOpt=true,date=2020-01-01,dateTime=2020-01-01T00:00:00.001Z,decimal=3.141592653589793,decimalStr=3.14159265358979344719667586,enum=one,float32=1.1,float64Str=1.1,int=1,int32=1,int32Enum=55,int64Str=100,intEnum=2,num=1.1,str=test,strOpt=testOptional",
  );
});

test("Parameters Simple Path Parameter Primitives", async () => {
  recordTest("parameters-simple-path-parameter-primitives");
  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("simplePathParameterPrimitives"),
  });

  const result = await sdk.parameters.simplePathParameterPrimitives(
    true,
    1,
    1.1,
    "test",
  );
  expect(result).toBeDefined();
  expect(result).toEqual({
    url:
      "http://localhost:35123/anything/pathParams/str/test/bool/true/int/1/num/1.1",
  });
});
