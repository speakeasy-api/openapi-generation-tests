/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SDK } from "../index.js";
import { IntEnum, IntEnumVal } from "../sdk/models/shared/index.js";
import { Decimal, RFCDate } from "../sdk/types/index.js";
import { recordTest } from "./common_helpers.js";
import { sortJSONObjectKeys, sortQueryParameters } from "./helpers.js";
import { expect, test } from "vitest";

test("Request Bodies Nullable Object Post", async () => {
    const sdk = new SDK();
    const result = await sdk.requestBodies.nullableObjectPost(null);
    expect(result).toEqual({
        json: null,
    });
});

test("Request Bodies Nullable Required Empty Object Post Nullable Set", async () => {
    recordTest("request-bodies-post-nullable-required-empty-object-nullable-set");

    const sdk = new SDK();
    const result = await sdk.requestBodies.nullableRequiredEmptyObjectPost({
        nullableOptionalObj: null,
        nullableRequiredObj: null,
        requiredObj: {},
    });
    expect(result?.json).toEqual({
        nullableOptionalObj: null,
        nullableRequiredObj: null,
        requiredObj: {},
    });
});

test("Request Bodies Nullable Required Empty Object Post Optional Set", async () => {
    recordTest("request-bodies-post-nullable-required-empty-object-optional-set");

    const sdk = new SDK();
    const result = await sdk.requestBodies.nullableRequiredEmptyObjectPost({
        nullableOptionalObj: {},
        nullableRequiredObj: null,
        requiredObj: {},
    });
    expect(result?.json).toEqual({
        nullableOptionalObj: {},
        nullableRequiredObj: null,
        requiredObj: {},
    });
});

test("Request Bodies Nullable Required Empty Object Post All Set", async () => {
    recordTest("request-bodies-post-nullable-required-empty-object-all-set");

    const sdk = new SDK();
    const result = await sdk.requestBodies.nullableRequiredEmptyObjectPost({
        nullableOptionalObj: {},
        nullableRequiredObj: {},
        requiredObj: {},
    });
    expect(result?.json).toEqual({
        nullableOptionalObj: {},
        nullableRequiredObj: {},
        requiredObj: {},
    });
});

test("Request Bodies Nullable Required Property Post All Set", async () => {
    recordTest("request-bodies-post-nullable-required-property-all-set");

    const sdk = new SDK();
    const result = await sdk.requestBodies.nullableRequiredPropertyPost({
        nullableOptionalInt: 0,
        nullableRequiredArray: [1.1, 2.2, 3.3],
        nullableRequiredBigIntStr: BigInt("9223372036854775807"),
        nullableRequiredDateTime: new Date("2020-01-01T00:00:00Z"),
        nullableRequiredDecimalStr: new Decimal("3.141592653589793238462643383279"),
        nullableRequiredEnum: "second",
        nullableRequiredInt: 1,
    });
    expect(result?.json).toEqual({
        nullableOptionalInt: 0,
        nullableRequiredArray: [1.1, 2.2, 3.3],
        nullableRequiredBigIntStr: BigInt("9223372036854775807"),
        nullableRequiredDateTime: new Date("2020-01-01T00:00:00Z"),
        nullableRequiredDecimalStr: new Decimal("3.141592653589793238462643383279"),
        nullableRequiredEnum: "second",
        nullableRequiredInt: 1,
    });
});

test("Request Bodies Nullable Required Property Post All Null", async () => {
    recordTest("request-bodies-post-nullable-required-property-all-null");

    const sdk = new SDK();
    const result = await sdk.requestBodies.nullableRequiredPropertyPost({
        nullableOptionalInt: null,
        nullableRequiredArray: null,
        nullableRequiredBigIntStr: null,
        nullableRequiredDateTime: null,
        nullableRequiredDecimalStr: null,
        nullableRequiredEnum: null,
        nullableRequiredInt: null,
    });
    expect(result?.json).toEqual({
        nullableOptionalInt: null,
        nullableRequiredArray: null,
        nullableRequiredBigIntStr: null,
        nullableRequiredDateTime: null,
        nullableRequiredDecimalStr: null,
        nullableRequiredEnum: null,
        nullableRequiredInt: null,
    });
});

test("Request Bodies Request Body Post Application Json Array", async () => {
    recordTest("request-bodies-post-application-json-array");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostApplicationJsonArray([
        {
            bool: true,
            date: new RFCDate("2020-01-01"),
            dateTime: new Date("2020-01-01T00:00:00.001Z"),
            enum: "one",
            float32: 1.1,
            int: 1,
            int32: 1,
            int32Enum: 55,
            intEnum: IntEnum.Second,
            num: 1.1,
            str: "test",
            any: "any",
            bigint: BigInt("8821239038968084"),
            bigintStr: BigInt("9223372036854775808"),
            boolOpt: true,
            decimal: new Decimal("3.141592653589793"),
            decimalStr: new Decimal("3.14159265358979344719667586"),
            float64Str: 1.1,
            int64Str: 100,
            strOpt: "testOptional",
        },
    ]);
    expect(result).toEqual([
        {
            bool: true,
            date: new RFCDate("2020-01-01"),
            dateTime: new Date("2020-01-01T00:00:00.001Z"),
            enum: "one",
            float32: 1.1,
            int: 1,
            int32: 1,
            int32Enum: 55,
            intEnum: IntEnum.Second,
            num: 1.1,
            str: "test",
            any: "any",
            bigint: BigInt("8821239038968084"),
            bigintStr: BigInt("9223372036854775808"),
            boolOpt: true,
            decimal: new Decimal("3.141592653589793"),
            decimalStr: new Decimal("3.14159265358979344719667586"),
            float64Str: 1.1,
            int64Str: 100,
            strOpt: "testOptional",
        },
    ]);
});

test("Request Bodies Request Body Post Application Json Array Camel Case", async () => {
    recordTest("request-bodies-post-application-json-array-camel-case");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostApplicationJsonArrayCamelCase([
        {
            anyVal: "any example",
            boolOptVal: true,
            boolVal: true,
            dateTimeVal: new Date("2020-01-01T00:00:00Z"),
            dateVal: new RFCDate("2020-01-01"),
            enumVal: "one",
            float32Val: 2.2222222,
            int32EnumVal: 69,
            int32Val: 1,
            intEnumVal: IntEnumVal.Third,
            intOptNullVal: 999999,
            intVal: 999999,
            numOptNullVal: 1.1,
            numVal: 1.1,
            strOptVal: "optional example",
            strVal: "example",
        },
    ]);
    expect(result).toEqual([
        {
            anyVal: "any example",
            boolOptVal: true,
            boolVal: true,
            dateTimeVal: new Date("2020-01-01T00:00:00Z"),
            dateVal: new RFCDate("2020-01-01"),
            enumVal: "one",
            float32Val: 2.2222222,
            int32EnumVal: 69,
            int32Val: 1,
            intEnumVal: IntEnumVal.Third,
            intOptNullVal: 999999,
            intVal: 999999,
            numOptNullVal: 1.1,
            numVal: 1.1,
            strOptVal: "optional example",
            strVal: "example",
        },
    ]);
});

test("Request Bodies Request Body Post Application Json Array Obj", async () => {
    recordTest("request-bodies-post-application-json-array-object");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostApplicationJsonArrayObj([
        {
            bool: true,
            date: new RFCDate("2020-01-01"),
            dateTime: new Date("2020-01-01T00:00:00.001Z"),
            enum: "one",
            float32: 1.1,
            int: 1,
            int32: 1,
            int32Enum: 55,
            intEnum: IntEnum.Second,
            num: 1.1,
            str: "test",
            any: "any",
            bigint: BigInt("8821239038968084"),
            bigintStr: BigInt("9223372036854775808"),
            boolOpt: true,
            decimal: new Decimal("3.141592653589793"),
            decimalStr: new Decimal("3.14159265358979344719667586"),
            float64Str: 1.1,
            int64Str: 100,
            strOpt: "testOptional",
        },
        {
            bool: true,
            date: new RFCDate("2020-01-01"),
            dateTime: new Date("2020-01-01T00:00:00.001Z"),
            enum: "one",
            float32: 1.1,
            int: 1,
            int32: 1,
            int32Enum: 55,
            intEnum: IntEnum.Second,
            num: 1.1,
            str: "test",
            any: "any",
            bigint: BigInt("8821239038968084"),
            bigintStr: BigInt("9223372036854775808"),
            boolOpt: true,
            decimal: new Decimal("3.141592653589793"),
            decimalStr: new Decimal("3.14159265358979344719667586"),
            float64Str: 1.1,
            int64Str: 100,
            strOpt: "testOptional",
        },
    ]);
    expect(result).toEqual({
        json: [
            {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
            {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
        ],
    });
});

test("Request Bodies Request Body Post Application Json Array Obj Camel Case", async () => {
    recordTest("request-bodies-post-application-json-array-object-camel-case");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostApplicationJsonArrayObjCamelCase([
        {
            anyVal: "any example",
            boolOptVal: true,
            boolVal: true,
            dateTimeVal: new Date("2020-01-01T00:00:00Z"),
            dateVal: new RFCDate("2020-01-01"),
            enumVal: "one",
            float32Val: 2.2222222,
            int32EnumVal: 69,
            int32Val: 1,
            intEnumVal: IntEnumVal.Third,
            intOptNullVal: 999999,
            intVal: 999999,
            numOptNullVal: 1.1,
            numVal: 1.1,
            strOptVal: "optional example",
            strVal: "example",
        },
        {
            anyVal: "any example",
            boolOptVal: true,
            boolVal: true,
            dateTimeVal: new Date("2020-01-01T00:00:00Z"),
            dateVal: new RFCDate("2020-01-01"),
            enumVal: "one",
            float32Val: 2.2222222,
            int32EnumVal: 69,
            int32Val: 1,
            intEnumVal: IntEnumVal.Third,
            intOptNullVal: 999999,
            intVal: 999999,
            numOptNullVal: 1.1,
            numVal: 1.1,
            strOptVal: "optional example",
            strVal: "example",
        },
    ]);
    expect(result).toEqual({
        json: [
            {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
            {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
        ],
    });
});

test("Request Bodies Request Body Post Application Json Array Of Array", async () => {
    recordTest("request-bodies-post-application-json-array-of-array");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostApplicationJsonArrayOfArray([
        [
            {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
        ],
    ]);
    expect(result).toEqual([
        [
            {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
        ],
    ]);
});

test("Request Bodies Request Body Post Application Json Array Of Array Camel Case", async () => {
    recordTest("request-bodies-post-application-json-array-of-array-camel-case");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostApplicationJsonArrayOfArrayCamelCase([
        [
            {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
        ],
    ]);
    expect(result).toEqual([
        [
            {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
        ],
    ]);
});

test("Request Bodies Request Body Post Application Json Array Of Array Of Primitive", async () => {
    recordTest("request-bodies-post-application-json-array-of-array-of-primitive");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostApplicationJsonArrayOfArrayOfPrimitive([
        ["foo", "bar"],
        ["buzz", "bazz"],
    ]);
    expect(result).toEqual([
        ["foo", "bar"],
        ["buzz", "bazz"],
    ]);
});

test("Request Bodies Request Body Post Application Json Array Of Map", async () => {
    recordTest("request-bodies-post-application-json-array-of-map");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostApplicationJsonArrayOfMap([
        {
            mapElem1: {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
            mapElem2: {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
        },
        {
            mapElem1: {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
            mapElem2: {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
        },
    ]);
    expect(result).toEqual([
        {
            mapElem1: {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
            mapElem2: {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
        },
        {
            mapElem1: {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
            mapElem2: {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
        },
    ]);
});

test("Request Bodies Request Body Post Application Json Array Of Map Camel Case", async () => {
    recordTest("request-bodies-post-application-json-array-of-map-camel-case");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostApplicationJsonArrayOfMapCamelCase([
        {
            mapElem1: {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
            mapElem2: {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
        },
        {
            mapElem1: {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
            mapElem2: {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
        },
    ]);
    expect(result).toEqual([
        {
            mapElem1: {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
            mapElem2: {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
        },
        {
            mapElem1: {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
            mapElem2: {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
        },
    ]);
});

test("Request Bodies Request Body Post Application Json Array Of Primitive", async () => {
    recordTest("request-bodies-post-application-json-array-of-primitive");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostApplicationJsonArrayOfPrimitive([
        "hello",
        "world",
    ]);
    expect(result).toEqual(["hello", "world"]);
});

test("Request Bodies Request Body Post Application Json Deep", async () => {
    recordTest("request-bodies-post-application-json-deep");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostApplicationJsonDeep({
        any: {
            bool: true,
            date: new RFCDate("2020-01-01"),
            dateTime: new Date("2020-01-01T00:00:00.001Z"),
            enum: "one",
            float32: 1.1,
            int: 1,
            int32: 1,
            int32Enum: 55,
            intEnum: IntEnum.Second,
            num: 1.1,
            str: "test",
            any: "any",
            bigint: BigInt("8821239038968084"),
            bigintStr: BigInt("9223372036854775808"),
            boolOpt: true,
            decimal: new Decimal("3.141592653589793"),
            decimalStr: new Decimal("3.14159265358979344719667586"),
            float64Str: 1.1,
            int64Str: 100,
            strOpt: "testOptional",
        },
        arr: [
            {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
            {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
        ],
        bool: true,
        int: 1,
        map: {
            key: {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
            key2: {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
        },
        num: 1.1,
        obj: {
            bool: true,
            date: new RFCDate("2020-01-01"),
            dateTime: new Date("2020-01-01T00:00:00.001Z"),
            enum: "one",
            float32: 1.1,
            int: 1,
            int32: 1,
            int32Enum: 55,
            intEnum: IntEnum.Second,
            num: 1.1,
            str: "test",
            any: "any",
            bigint: BigInt("8821239038968084"),
            bigintStr: BigInt("9223372036854775808"),
            boolOpt: true,
            decimal: new Decimal("3.141592653589793"),
            decimalStr: new Decimal("3.14159265358979344719667586"),
            float64Str: 1.1,
            int64Str: 100,
            strOpt: "testOptional",
        },
        str: "test",
    });
    expect(result).toEqual({
        json: {
            any: {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
            arr: [
                {
                    bool: true,
                    date: new RFCDate("2020-01-01"),
                    dateTime: new Date("2020-01-01T00:00:00.001Z"),
                    enum: "one",
                    float32: 1.1,
                    int: 1,
                    int32: 1,
                    int32Enum: 55,
                    intEnum: IntEnum.Second,
                    num: 1.1,
                    str: "test",
                    any: "any",
                    bigint: BigInt("8821239038968084"),
                    bigintStr: BigInt("9223372036854775808"),
                    boolOpt: true,
                    decimal: new Decimal("3.141592653589793"),
                    decimalStr: new Decimal("3.14159265358979344719667586"),
                    float64Str: 1.1,
                    int64Str: 100,
                    strOpt: "testOptional",
                },
                {
                    bool: true,
                    date: new RFCDate("2020-01-01"),
                    dateTime: new Date("2020-01-01T00:00:00.001Z"),
                    enum: "one",
                    float32: 1.1,
                    int: 1,
                    int32: 1,
                    int32Enum: 55,
                    intEnum: IntEnum.Second,
                    num: 1.1,
                    str: "test",
                    any: "any",
                    bigint: BigInt("8821239038968084"),
                    bigintStr: BigInt("9223372036854775808"),
                    boolOpt: true,
                    decimal: new Decimal("3.141592653589793"),
                    decimalStr: new Decimal("3.14159265358979344719667586"),
                    float64Str: 1.1,
                    int64Str: 100,
                    strOpt: "testOptional",
                },
            ],
            bool: true,
            int: 1,
            map: {
                key: {
                    bool: true,
                    date: new RFCDate("2020-01-01"),
                    dateTime: new Date("2020-01-01T00:00:00.001Z"),
                    enum: "one",
                    float32: 1.1,
                    int: 1,
                    int32: 1,
                    int32Enum: 55,
                    intEnum: IntEnum.Second,
                    num: 1.1,
                    str: "test",
                    any: "any",
                    bigint: BigInt("8821239038968084"),
                    bigintStr: BigInt("9223372036854775808"),
                    boolOpt: true,
                    decimal: new Decimal("3.141592653589793"),
                    decimalStr: new Decimal("3.14159265358979344719667586"),
                    float64Str: 1.1,
                    int64Str: 100,
                    strOpt: "testOptional",
                },
                key2: {
                    bool: true,
                    date: new RFCDate("2020-01-01"),
                    dateTime: new Date("2020-01-01T00:00:00.001Z"),
                    enum: "one",
                    float32: 1.1,
                    int: 1,
                    int32: 1,
                    int32Enum: 55,
                    intEnum: IntEnum.Second,
                    num: 1.1,
                    str: "test",
                    any: "any",
                    bigint: BigInt("8821239038968084"),
                    bigintStr: BigInt("9223372036854775808"),
                    boolOpt: true,
                    decimal: new Decimal("3.141592653589793"),
                    decimalStr: new Decimal("3.14159265358979344719667586"),
                    float64Str: 1.1,
                    int64Str: 100,
                    strOpt: "testOptional",
                },
            },
            num: 1.1,
            obj: {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
            str: "test",
        },
    });
});

test("Request Bodies Request Body Post Application Json Deep Camel Case", async () => {
    recordTest("request-bodies-post-application-json-deep-camel-case");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostApplicationJsonDeepCamelCase({
        anyVal: "<value>",
        arrVal: [
            {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
            {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
        ],
        boolVal: true,
        intVal: 1,
        mapVal: {
            key: {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
        },
        numVal: 1.1,
        objVal: {
            anyVal: "any example",
            boolOptVal: true,
            boolVal: true,
            dateTimeVal: new Date("2020-01-01T00:00:00Z"),
            dateVal: new RFCDate("2020-01-01"),
            enumVal: "one",
            float32Val: 2.2222222,
            int32EnumVal: 69,
            int32Val: 1,
            intEnumVal: IntEnumVal.Third,
            intOptNullVal: 999999,
            intVal: 999999,
            numOptNullVal: 1.1,
            numVal: 1.1,
            strOptVal: "optional example",
            strVal: "example",
        },
        strVal: "test",
    });
    expect(result).toEqual({
        json: {
            anyVal: "<value>",
            arrVal: [
                {
                    anyVal: "any example",
                    boolOptVal: true,
                    boolVal: true,
                    dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                    dateVal: new RFCDate("2020-01-01"),
                    enumVal: "one",
                    float32Val: 2.2222222,
                    int32EnumVal: 69,
                    int32Val: 1,
                    intEnumVal: IntEnumVal.Third,
                    intOptNullVal: 999999,
                    intVal: 999999,
                    numOptNullVal: 1.1,
                    numVal: 1.1,
                    strOptVal: "optional example",
                    strVal: "example",
                },
                {
                    anyVal: "any example",
                    boolOptVal: true,
                    boolVal: true,
                    dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                    dateVal: new RFCDate("2020-01-01"),
                    enumVal: "one",
                    float32Val: 2.2222222,
                    int32EnumVal: 69,
                    int32Val: 1,
                    intEnumVal: IntEnumVal.Third,
                    intOptNullVal: 999999,
                    intVal: 999999,
                    numOptNullVal: 1.1,
                    numVal: 1.1,
                    strOptVal: "optional example",
                    strVal: "example",
                },
            ],
            boolVal: true,
            intVal: 1,
            mapVal: {
                key: {
                    anyVal: "any example",
                    boolOptVal: true,
                    boolVal: true,
                    dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                    dateVal: new RFCDate("2020-01-01"),
                    enumVal: "one",
                    float32Val: 2.2222222,
                    int32EnumVal: 69,
                    int32Val: 1,
                    intEnumVal: IntEnumVal.Third,
                    intOptNullVal: 999999,
                    intVal: 999999,
                    numOptNullVal: 1.1,
                    numVal: 1.1,
                    strOptVal: "optional example",
                    strVal: "example",
                },
            },
            numVal: 1.1,
            objVal: {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
            strVal: "test",
        },
    });
});

test("Request Bodies Request Body Post Application Json Map", async () => {
    recordTest("request-bodies-post-application-json-map");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostApplicationJsonMap({
        mapElem1: {
            bool: true,
            date: new RFCDate("2020-01-01"),
            dateTime: new Date("2020-01-01T00:00:00.001Z"),
            enum: "one",
            float32: 1.1,
            int: 1,
            int32: 1,
            int32Enum: 55,
            intEnum: IntEnum.Second,
            num: 1.1,
            str: "test",
            any: "any",
            bigint: BigInt("8821239038968084"),
            bigintStr: BigInt("9223372036854775808"),
            boolOpt: true,
            decimal: new Decimal("3.141592653589793"),
            decimalStr: new Decimal("3.14159265358979344719667586"),
            float64Str: 1.1,
            int64Str: 100,
            strOpt: "testOptional",
        },
        mapElem2: {
            bool: true,
            date: new RFCDate("2020-01-01"),
            dateTime: new Date("2020-01-01T00:00:00.001Z"),
            enum: "one",
            float32: 1.1,
            int: 1,
            int32: 1,
            int32Enum: 55,
            intEnum: IntEnum.Second,
            num: 1.1,
            str: "test",
            any: "any",
            bigint: BigInt("8821239038968084"),
            bigintStr: BigInt("9223372036854775808"),
            boolOpt: true,
            decimal: new Decimal("3.141592653589793"),
            decimalStr: new Decimal("3.14159265358979344719667586"),
            float64Str: 1.1,
            int64Str: 100,
            strOpt: "testOptional",
        },
    });
    expect(result).toEqual({
        mapElem1: {
            bool: true,
            date: new RFCDate("2020-01-01"),
            dateTime: new Date("2020-01-01T00:00:00.001Z"),
            enum: "one",
            float32: 1.1,
            int: 1,
            int32: 1,
            int32Enum: 55,
            intEnum: IntEnum.Second,
            num: 1.1,
            str: "test",
            any: "any",
            bigint: BigInt("8821239038968084"),
            bigintStr: BigInt("9223372036854775808"),
            boolOpt: true,
            decimal: new Decimal("3.141592653589793"),
            decimalStr: new Decimal("3.14159265358979344719667586"),
            float64Str: 1.1,
            int64Str: 100,
            strOpt: "testOptional",
        },
        mapElem2: {
            bool: true,
            date: new RFCDate("2020-01-01"),
            dateTime: new Date("2020-01-01T00:00:00.001Z"),
            enum: "one",
            float32: 1.1,
            int: 1,
            int32: 1,
            int32Enum: 55,
            intEnum: IntEnum.Second,
            num: 1.1,
            str: "test",
            any: "any",
            bigint: BigInt("8821239038968084"),
            bigintStr: BigInt("9223372036854775808"),
            boolOpt: true,
            decimal: new Decimal("3.141592653589793"),
            decimalStr: new Decimal("3.14159265358979344719667586"),
            float64Str: 1.1,
            int64Str: 100,
            strOpt: "testOptional",
        },
    });
});

test("Request Bodies Request Body Post Application Json Map Camel Case", async () => {
    recordTest("request-bodies-post-application-json-map-camel-case");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostApplicationJsonMapCamelCase({
        mapElem1: {
            anyVal: "any example",
            boolOptVal: true,
            boolVal: true,
            dateTimeVal: new Date("2020-01-01T00:00:00Z"),
            dateVal: new RFCDate("2020-01-01"),
            enumVal: "one",
            float32Val: 2.2222222,
            int32EnumVal: 69,
            int32Val: 1,
            intEnumVal: IntEnumVal.Third,
            intOptNullVal: 999999,
            intVal: 999999,
            numOptNullVal: 1.1,
            numVal: 1.1,
            strOptVal: "optional example",
            strVal: "example",
        },
        mapElem2: {
            anyVal: "any example",
            boolOptVal: true,
            boolVal: true,
            dateTimeVal: new Date("2020-01-01T00:00:00Z"),
            dateVal: new RFCDate("2020-01-01"),
            enumVal: "one",
            float32Val: 2.2222222,
            int32EnumVal: 69,
            int32Val: 1,
            intEnumVal: IntEnumVal.Third,
            intOptNullVal: 999999,
            intVal: 999999,
            numOptNullVal: 1.1,
            numVal: 1.1,
            strOptVal: "optional example",
            strVal: "example",
        },
    });
    expect(result).toEqual({
        mapElem1: {
            anyVal: "any example",
            boolOptVal: true,
            boolVal: true,
            dateTimeVal: new Date("2020-01-01T00:00:00Z"),
            dateVal: new RFCDate("2020-01-01"),
            enumVal: "one",
            float32Val: 2.2222222,
            int32EnumVal: 69,
            int32Val: 1,
            intEnumVal: IntEnumVal.Third,
            intOptNullVal: 999999,
            intVal: 999999,
            numOptNullVal: 1.1,
            numVal: 1.1,
            strOptVal: "optional example",
            strVal: "example",
        },
        mapElem2: {
            anyVal: "any example",
            boolOptVal: true,
            boolVal: true,
            dateTimeVal: new Date("2020-01-01T00:00:00Z"),
            dateVal: new RFCDate("2020-01-01"),
            enumVal: "one",
            float32Val: 2.2222222,
            int32EnumVal: 69,
            int32Val: 1,
            intEnumVal: IntEnumVal.Third,
            intOptNullVal: 999999,
            intVal: 999999,
            numOptNullVal: 1.1,
            numVal: 1.1,
            strOptVal: "optional example",
            strVal: "example",
        },
    });
});

test("Request Bodies Request Body Post Application Json Map Obj", async () => {
    recordTest("request-bodies-post-application-json-map-object");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostApplicationJsonMapObj({
        mapElem1: {
            bool: true,
            date: new RFCDate("2020-01-01"),
            dateTime: new Date("2020-01-01T00:00:00.001Z"),
            enum: "one",
            float32: 1.1,
            int: 1,
            int32: 1,
            int32Enum: 55,
            intEnum: IntEnum.Second,
            num: 1.1,
            str: "test",
            any: "any",
            bigint: BigInt("8821239038968084"),
            bigintStr: BigInt("9223372036854775808"),
            boolOpt: true,
            decimal: new Decimal("3.141592653589793"),
            decimalStr: new Decimal("3.14159265358979344719667586"),
            float64Str: 1.1,
            int64Str: 100,
            strOpt: "testOptional",
        },
        mapElem2: {
            bool: true,
            date: new RFCDate("2020-01-01"),
            dateTime: new Date("2020-01-01T00:00:00.001Z"),
            enum: "one",
            float32: 1.1,
            int: 1,
            int32: 1,
            int32Enum: 55,
            intEnum: IntEnum.Second,
            num: 1.1,
            str: "test",
            any: "any",
            bigint: BigInt("8821239038968084"),
            bigintStr: BigInt("9223372036854775808"),
            boolOpt: true,
            decimal: new Decimal("3.141592653589793"),
            decimalStr: new Decimal("3.14159265358979344719667586"),
            float64Str: 1.1,
            int64Str: 100,
            strOpt: "testOptional",
        },
    });
    expect(result).toEqual({
        json: {
            mapElem1: {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
            mapElem2: {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
        },
    });
});

test("Request Bodies Request Body Post Application Json Map Obj Camel Case", async () => {
    recordTest("request-bodies-post-application-json-map-object-camel-case");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostApplicationJsonMapObjCamelCase({
        mapElem1: {
            anyVal: "any example",
            boolOptVal: true,
            boolVal: true,
            dateTimeVal: new Date("2020-01-01T00:00:00Z"),
            dateVal: new RFCDate("2020-01-01"),
            enumVal: "one",
            float32Val: 2.2222222,
            int32EnumVal: 69,
            int32Val: 1,
            intEnumVal: IntEnumVal.Third,
            intOptNullVal: 999999,
            intVal: 999999,
            numOptNullVal: 1.1,
            numVal: 1.1,
            strOptVal: "optional example",
            strVal: "example",
        },
        mapElem2: {
            anyVal: "any example",
            boolOptVal: true,
            boolVal: true,
            dateTimeVal: new Date("2020-01-01T00:00:00Z"),
            dateVal: new RFCDate("2020-01-01"),
            enumVal: "one",
            float32Val: 2.2222222,
            int32EnumVal: 69,
            int32Val: 1,
            intEnumVal: IntEnumVal.Third,
            intOptNullVal: 999999,
            intVal: 999999,
            numOptNullVal: 1.1,
            numVal: 1.1,
            strOptVal: "optional example",
            strVal: "example",
        },
    });
    expect(result).toEqual({
        json: {
            mapElem1: {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
            mapElem2: {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
        },
    });
});

test("Request Bodies Request Body Post Application Json Map Of Array", async () => {
    recordTest("request-bodies-post-application-json-map-of-array");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostApplicationJsonMapOfArray({
        mapElem1: [
            {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
            {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
        ],
        mapElem2: [
            {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
            {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
        ],
    });
    expect(result).toEqual({
        mapElem1: [
            {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
            {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
        ],
        mapElem2: [
            {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
            {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
        ],
    });
});

test("Request Bodies Request Body Post Application Json Map Of Array Camel Case", async () => {
    recordTest("request-bodies-post-application-json-map-of-array-camel-case");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostApplicationJsonMapOfArrayCamelCase({
        mapElem1: [
            {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
            {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
        ],
        mapElem2: [
            {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
            {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
        ],
    });
    expect(result).toEqual({
        mapElem1: [
            {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
            {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
        ],
        mapElem2: [
            {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
            {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
        ],
    });
});

test("Request Bodies Request Body Post Application Json Map Of Map", async () => {
    recordTest("request-bodies-post-application-json-map-of-map");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostApplicationJsonMapOfMap({
        mapElem1: {
            subMapElem1: {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
            subMapElem2: {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
        },
        mapElem2: {
            subMapElem1: {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
            subMapElem2: {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
        },
    });
    expect(result).toEqual({
        mapElem1: {
            subMapElem1: {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
            subMapElem2: {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
        },
        mapElem2: {
            subMapElem1: {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
            subMapElem2: {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
        },
    });
});

test("Request Bodies Request Body Post Application Json Map Of Map Camel Case", async () => {
    recordTest("request-bodies-post-application-json-map-of-map-camel-case");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostApplicationJsonMapOfMapCamelCase({
        mapElem1: {
            subMapElem1: {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
            subMapElem2: {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
        },
        mapElem2: {
            subMapElem1: {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
            subMapElem2: {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
        },
    });
    expect(result).toEqual({
        mapElem1: {
            subMapElem1: {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
            subMapElem2: {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
        },
        mapElem2: {
            subMapElem1: {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
            subMapElem2: {
                anyVal: "any example",
                boolOptVal: true,
                boolVal: true,
                dateTimeVal: new Date("2020-01-01T00:00:00Z"),
                dateVal: new RFCDate("2020-01-01"),
                enumVal: "one",
                float32Val: 2.2222222,
                int32EnumVal: 69,
                int32Val: 1,
                intEnumVal: IntEnumVal.Third,
                intOptNullVal: 999999,
                intVal: 999999,
                numOptNullVal: 1.1,
                numVal: 1.1,
                strOptVal: "optional example",
                strVal: "example",
            },
        },
    });
});

test("Request Bodies Request Body Post Application Json Map Of Map Of Primitive", async () => {
    recordTest("request-bodies-post-application-json-map-of-map-of-primitive");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostApplicationJsonMapOfMapOfPrimitive({
        mapElem1: {
            subMapElem1: "foo",
            subMapElem2: "bar",
        },
        mapElem2: {
            subMapElem1: "buzz",
            subMapElem2: "bazz",
        },
    });
    expect(result).toEqual({
        mapElem1: {
            subMapElem1: "foo",
            subMapElem2: "bar",
        },
        mapElem2: {
            subMapElem1: "buzz",
            subMapElem2: "bazz",
        },
    });
});

test("Request Bodies Request Body Post Application Json Map Of Primitive", async () => {
    recordTest("request-bodies-post-application-json-map-of-primitive");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostApplicationJsonMapOfPrimitive({
        mapElem1: "hello",
        mapElem2: "world",
    });
    expect(result).toEqual({
        mapElem1: "hello",
        mapElem2: "world",
    });
});

test("Request Bodies Request Body Post Application Json Multiple Json Filtered", async () => {
    recordTest("request-bodies-post-application-json-multiple-json-filtered");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostApplicationJsonMultipleJsonFiltered({
        bool: true,
        date: new RFCDate("2020-01-01"),
        dateTime: new Date("2020-01-01T00:00:00.001Z"),
        enum: "one",
        float32: 1.1,
        int: 1,
        int32: 1,
        int32Enum: 55,
        intEnum: IntEnum.Second,
        num: 1.1,
        str: "test",
        any: "any",
        bigint: BigInt("8821239038968084"),
        bigintStr: BigInt("9223372036854775808"),
        boolOpt: true,
        decimal: new Decimal("3.141592653589793"),
        decimalStr: new Decimal("3.14159265358979344719667586"),
        float64Str: 1.1,
        int64Str: 100,
        strOpt: "testOptional",
    });
    expect(result).toEqual({
        json: {
            bool: true,
            date: new RFCDate("2020-01-01"),
            dateTime: new Date("2020-01-01T00:00:00.001Z"),
            enum: "one",
            float32: 1.1,
            int: 1,
            int32: 1,
            int32Enum: 55,
            intEnum: IntEnum.Second,
            num: 1.1,
            str: "test",
            any: "any",
            bigint: BigInt("8821239038968084"),
            bigintStr: BigInt("9223372036854775808"),
            boolOpt: true,
            decimal: new Decimal("3.141592653589793"),
            decimalStr: new Decimal("3.14159265358979344719667586"),
            float64Str: 1.1,
            int64Str: 100,
            strOpt: "testOptional",
        },
    });
});

test("Request Bodies Request Body Post Application Json Simple", async () => {
    recordTest("request-bodies-post-application-json-simple");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostApplicationJsonSimple({
        bool: true,
        date: new RFCDate("2020-01-01"),
        dateTime: new Date("2020-01-01T00:00:00.001Z"),
        enum: "one",
        float32: 1.1,
        int: 1,
        int32: 1,
        int32Enum: 55,
        intEnum: IntEnum.Second,
        num: 1.1,
        str: "test",
        any: "any",
        bigint: BigInt("8821239038968084"),
        bigintStr: BigInt("9223372036854775808"),
        boolOpt: true,
        decimal: new Decimal("3.141592653589793"),
        decimalStr: new Decimal("3.14159265358979344719667586"),
        float64Str: 1.1,
        int64Str: 100,
        strOpt: "testOptional",
    });
    expect(result).toEqual({
        json: {
            bool: true,
            date: new RFCDate("2020-01-01"),
            dateTime: new Date("2020-01-01T00:00:00.001Z"),
            enum: "one",
            float32: 1.1,
            int: 1,
            int32: 1,
            int32Enum: 55,
            intEnum: IntEnum.Second,
            num: 1.1,
            str: "test",
            any: "any",
            bigint: BigInt("8821239038968084"),
            bigintStr: BigInt("9223372036854775808"),
            boolOpt: true,
            decimal: new Decimal("3.141592653589793"),
            decimalStr: new Decimal("3.14159265358979344719667586"),
            float64Str: 1.1,
            int64Str: 100,
            strOpt: "testOptional",
        },
    });
});

test("Request Bodies Request Body Post Application Json Simple Camel Case", async () => {
    recordTest("request-bodies-post-application-json-simple-camel-case");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostApplicationJsonSimpleCamelCase({
        anyVal: "any example",
        boolOptVal: true,
        boolVal: true,
        dateTimeVal: new Date("2020-01-01T00:00:00Z"),
        dateVal: new RFCDate("2020-01-01"),
        enumVal: "one",
        float32Val: 2.2222222,
        int32EnumVal: 69,
        int32Val: 1,
        intEnumVal: IntEnumVal.Third,
        intOptNullVal: 999999,
        intVal: 999999,
        numOptNullVal: 1.1,
        numVal: 1.1,
        strOptVal: "optional example",
        strVal: "example",
    });
    expect(result).toEqual({
        json: {
            anyVal: "any example",
            boolOptVal: true,
            boolVal: true,
            dateTimeVal: new Date("2020-01-01T00:00:00Z"),
            dateVal: new RFCDate("2020-01-01"),
            enumVal: "one",
            float32Val: 2.2222222,
            int32EnumVal: 69,
            int32Val: 1,
            intEnumVal: IntEnumVal.Third,
            intOptNullVal: 999999,
            intVal: 999999,
            numOptNullVal: 1.1,
            numVal: 1.1,
            strOptVal: "optional example",
            strVal: "example",
        },
    });
});

test("Request Bodies Request Body Post Complex Number Types", async () => {
    recordTest("request-bodies-complex-number-types");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostComplexNumberTypes({
        complexNumberTypes: {
            bigint: BigInt("8821239038968084"),
            bigintStr: BigInt("9223372036854775808"),
            decimal: new Decimal("3.141592653589793"),
            decimalStr: new Decimal("3.14159265358979344719667586"),
        },
        pathBigInt: BigInt("8821239038968084"),
        pathBigIntStr: BigInt("9223372036854775808"),
        pathDecimal: new Decimal("3.141592653589793"),
        pathDecimalStr: new Decimal("3.14159265358979344719667586"),
        queryBigInt: BigInt("8821239038968084"),
        queryBigIntStr: BigInt("9223372036854775808"),
        queryDecimal: new Decimal("3.141592653589793"),
        queryDecimalStr: new Decimal("3.14159265358979344719667586"),
    });
    expect(result?.json).toEqual({
        bigint: BigInt("8821239038968084"),
        bigintStr: BigInt("9223372036854775808"),
        decimal: new Decimal("3.141592653589793"),
        decimalStr: new Decimal("3.14159265358979344719667586"),
    });
    expect(sortQueryParameters(result?.url)).toEqual(
        "http://localhost:35123/anything/requestBodies/post/8821239038968084/9223372036854775808/3.141592653589793/3.14159265358979344719667586/complex-number-types?queryBigInt=8821239038968084&queryBigIntStr=9223372036854775808&queryDecimal=3.141592653589793&queryDecimalStr=3.14159265358979344719667586"
    );
});

test("Request Bodies Request Body Post Defaults And Consts", async () => {
    recordTest("request-bodies-defaults-and-consts");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostDefaultsAndConsts({
        normalField: "test",
    });
    expect(result).toEqual({
        json: {
            constBigInt: BigInt("9007199254740991"),
            constBigIntStr: BigInt("9223372036854775807"),
            constBool: true,
            constDate: new RFCDate("2020-01-01"),
            constDateTime: new Date("2020-01-01T00:00:00Z"),
            constDecimal: new Decimal("3.141592653589793"),
            constDecimalStr: new Decimal("3.141592653589793238462643383279"),
            constEnumInt: 2,
            constEnumStr: "two",
            constInt: 123,
            constNum: 123.456,
            constStr: "const",
            constStrDQuotes: 'const with "double quotes"',
            constStrNull: null,
            constStrSQuotes: "const with 'single quotes'",
            defaultBigInt: BigInt("9007199254740991"),
            defaultBigIntStr: BigInt("9223372036854775807"),
            defaultBool: true,
            defaultDate: new RFCDate("2020-01-01"),
            defaultDateTime: new Date("2020-01-01T00:00:00Z"),
            defaultDecimal: new Decimal("3.141592653589793"),
            defaultDecimalStr: new Decimal("3.141592653589793238462643383279"),
            defaultEnumInt: 2,
            defaultEnumStr: "two",
            defaultInt: 123,
            defaultNum: 123.456,
            defaultStr: "default",
            defaultStrDQuotes: 'default with "double quotes"',
            defaultStrNullable: null,
            defaultStrOptional: "default",
            defaultStrSQuotes: "default with 'single quotes'",
            normalField: "test",
        },
    });
});

test("Request Bodies Request Body Post Empty Object", async () => {
    recordTest("request-bodies-post-empty-object");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostEmptyObject({});
    expect(result).toEqual({});
});

test("Request Bodies Request Body Post Form Deep", async () => {
    recordTest("request-bodies-post-form-deep");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostFormDeep({
        any: {
            bool: true,
            date: new RFCDate("2020-01-01"),
            dateTime: new Date("2020-01-01T00:00:00.001Z"),
            enum: "one",
            float32: 1.1,
            int: 1,
            int32: 1,
            int32Enum: 55,
            intEnum: IntEnum.Second,
            num: 1.1,
            str: "test",
            any: "any",
            bigint: BigInt("8821239038968084"),
            bigintStr: BigInt("9223372036854775808"),
            boolOpt: true,
            decimal: new Decimal("3.141592653589793"),
            decimalStr: new Decimal("3.14159265358979344719667586"),
            float64Str: 1.1,
            int64Str: 100,
            strOpt: "testOptional",
        },
        arr: [
            {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
            {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
        ],
        bool: true,
        int: 1,
        map: {
            key: {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
            key2: {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
        },
        num: 1.1,
        obj: {
            bool: true,
            date: new RFCDate("2020-01-01"),
            dateTime: new Date("2020-01-01T00:00:00.001Z"),
            enum: "one",
            float32: 1.1,
            int: 1,
            int32: 1,
            int32Enum: 55,
            intEnum: IntEnum.Second,
            num: 1.1,
            str: "test",
            any: "any",
            bigint: BigInt("8821239038968084"),
            bigintStr: BigInt("9223372036854775808"),
            boolOpt: true,
            decimal: new Decimal("3.141592653589793"),
            decimalStr: new Decimal("3.14159265358979344719667586"),
            float64Str: 1.1,
            int64Str: 100,
            strOpt: "testOptional",
        },
        str: "test",
    });
    expect(sortJSONObjectKeys(result?.form.arr, [])).toEqual(
        '[{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"},{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"}]'
    );
    expect(result?.form.bool).toEqual("true");
    expect(result?.form.int).toEqual("1");
    expect(sortJSONObjectKeys(result?.form.map, [])).toEqual(
        '{"key":{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"},"key2":{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"}}'
    );
    expect(result?.form.num).toEqual("1.1");
    expect(sortJSONObjectKeys(result?.form.obj, [])).toEqual(
        '{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"}'
    );
    expect(result?.form.str).toEqual("test");
});

test("Request Bodies Request Body Post Form Map Primitive", async () => {
    recordTest("request-bodies-post-form-map-primitive");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostFormMapPrimitive({
        key1: "value1",
        key2: "value2",
        key3: "value3",
    });
    expect(result).toEqual({
        form: {
            key1: "value1",
            key2: "value2",
            key3: "value3",
        },
    });
});

test("Request Bodies Request Body Post Form Simple", async () => {
    recordTest("request-bodies-post-form-simple");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostFormSimple({
        bool: true,
        date: new RFCDate("2020-01-01"),
        dateTime: new Date("2020-01-01T00:00:00.001Z"),
        enum: "one",
        float32: 1.1,
        int: 1,
        int32: 1,
        int32Enum: 55,
        intEnum: IntEnum.Second,
        num: 1.1,
        str: "test",
        any: "any",
        bigint: BigInt("8821239038968084"),
        bigintStr: BigInt("9223372036854775808"),
        boolOpt: true,
        decimal: new Decimal("3.141592653589793"),
        decimalStr: new Decimal("3.14159265358979344719667586"),
        float64Str: 1.1,
        int64Str: 100,
        strOpt: "testOptional",
    });
    expect(result?.form.any).toEqual("any");
    expect(result?.form.bigint).toEqual("8821239038968084");
    expect(result?.form.bigintStr).toEqual("9223372036854775808");
    expect(result?.form.bool).toEqual("true");
    expect(result?.form.boolOpt).toEqual("true");
    expect(result?.form.date).toEqual("2020-01-01");
    expect(result?.form.dateTime).toEqual("2020-01-01T00:00:00.001Z");
    expect(result?.form.decimal).toEqual("3.141592653589793");
    expect(result?.form.decimalStr).toEqual("3.14159265358979344719667586");
    expect(result?.form.enum).toEqual("one");
    expect(result?.form.float32).toEqual("1.1");
    expect(result?.form.int).toEqual("1");
    expect(result?.form.int32).toEqual("1");
    expect(result?.form.int32Enum).toEqual("55");
    expect(result?.form.intEnum).toEqual("2");
    expect(result?.form.intOptNull).toBeUndefined();
    expect(result?.form.num).toEqual("1.1");
    expect(result?.form.numOptNull).toBeUndefined();
    expect(result?.form.str).toEqual("test");
    expect(result?.form.strOpt).toEqual("testOptional");
});

test("Request Bodies Request Body Post Json Data Types Array Big Int", async () => {
    recordTest("request-bodies-post-json-data-types-array-bigint");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostJsonDataTypesArrayBigInt([BigInt("1")]);
    expect(result).toEqual({
        data: "[1]",
        json: [BigInt("1")],
    });
});

test("Request Bodies Request Body Post Json Data Types Array Date", async () => {
    recordTest("request-bodies-post-json-data-types-array-date");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostJsonDataTypesArrayDate([
        new RFCDate("2020-01-01"),
    ]);
    expect(result).toEqual({
        data: '["2020-01-01"]',
        json: [new RFCDate("2020-01-01")],
    });
});

test("Request Bodies Request Body Post Json Data Types Array Decimal Str", async () => {
    recordTest("request-bodies-post-json-data-types-array-decimal-str");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostJsonDataTypesArrayDecimalStr([
        new Decimal("3.141592653589793438462643383279"),
    ]);
    expect(result).toEqual({
        data: '["3.141592653589793438462643383279"]',
        json: [new Decimal("3.141592653589793438462643383279")],
    });
});

test("Request Bodies Request Body Post Json Data Types Big Int", async () => {
    recordTest("request-bodies-post-json-data-types-bigint");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostJsonDataTypesBigInt(BigInt("1"));
    expect(result).toEqual({
        data: "1",
        json: BigInt("1"),
    });
});

test("Request Bodies Request Body Post Json Data Types Big Int Str", async () => {
    recordTest("request-bodies-post-json-data-types-bigint-str");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostJsonDataTypesBigIntStr(BigInt("1"));
    expect(result).toEqual({
        data: '"1"',
        json: BigInt("1"),
    });
});

test("Request Bodies Request Body Post Json Data Types Boolean", async () => {
    recordTest("request-bodies-post-json-data-types-boolean");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostJsonDataTypesBoolean(true);
    expect(result).toEqual({
        json: true,
    });
});

test("Request Bodies Request Body Post Json Data Types Complex Number Arrays Test", async () => {
    recordTest("request-bodies-post-json-data-types-complex-number-arrays");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostJsonDataTypesComplexNumberArrays({
        decimalArray: [new Decimal("3.141592653589793")],
        decimalStrArray: [new Decimal("3.141592653589793238462643383279")],
    });
    expect(result).toEqual({
        json: {
            decimalArray: [new Decimal("3.141592653589793")],
            decimalStrArray: [new Decimal("3.141592653589793238462643383279")],
        },
    });
});

test("Request Bodies Request Body Post Json Data Types Complex Number Maps Test", async () => {
    recordTest("request-bodies-post-json-data-types-complex-number-maps");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostJsonDataTypesComplexNumberMaps({
        bigintMap: {
            bigint: BigInt("9007199254740991"),
        },
        bigintStrMap: {
            bigint: BigInt("9223372036854775807"),
        },
        decimalMap: {
            decimal: new Decimal("3.141592653589793"),
        },
        decimalStrMap: {
            decimal: new Decimal("3.141592653589793238462643383279"),
        },
    });
    expect(result).toEqual({
        json: {
            bigintMap: {
                bigint: BigInt("9007199254740991"),
            },
            bigintStrMap: {
                bigint: BigInt("9223372036854775807"),
            },
            decimalMap: {
                decimal: new Decimal("3.141592653589793"),
            },
            decimalStrMap: {
                decimal: new Decimal("3.141592653589793238462643383279"),
            },
        },
    });
});

test("Request Bodies Request Body Post Json Data Types Date", async () => {
    recordTest("request-bodies-post-json-data-types-date");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostJsonDataTypesDate(
        new RFCDate("2020-01-01")
    );
    expect(result).toEqual({
        data: '"2020-01-01"',
        json: new RFCDate("2020-01-01"),
    });
});

test("Request Bodies Request Body Post Json Data Types Date Time", async () => {
    recordTest("request-bodies-post-json-data-types-date-time");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostJsonDataTypesDateTime(
        new Date("2020-01-01T00:00:00.001Z")
    );
    expect(result?.data).toEqual('"2020-01-01T00:00:00.001Z"');
    expect(result?.json).toEqual(new Date("2020-01-01T00:00:00.001Z"));
});

test("Request Bodies Request Body Post Json Data Types Decimal", async () => {
    recordTest("request-bodies-post-json-data-types-decimal");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostJsonDataTypesDecimal(new Decimal("1.1"));
    expect(result).toEqual({
        data: "1.1",
        json: new Decimal("1.1"),
    });
});

test("Request Bodies Request Body Post Json Data Types Decimal Str", async () => {
    recordTest("request-bodies-post-json-data-types-decimal-str");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostJsonDataTypesDecimalStr(
        new Decimal("1.1")
    );
    expect(result).toEqual({
        data: '"1.1"',
        json: new Decimal("1.1"),
    });
});

test("Request Bodies Request Body Post Json Data Types Float32", async () => {
    recordTest("request-bodies-post-json-data-types-float32");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostJsonDataTypesFloat32(1.1);
    expect(result).toEqual({
        json: 1.1,
    });
});

test("Request Bodies Request Body Post Json Data Types Int32", async () => {
    recordTest("request-bodies-post-json-data-types-int32");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostJsonDataTypesInt32(1);
    expect(result).toEqual({
        json: 1,
    });
});

test("Request Bodies Request Body Post Json Data Types Integer", async () => {
    recordTest("request-bodies-post-json-data-types-integer");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostJsonDataTypesInteger(1);
    expect(result).toEqual({
        json: 1,
    });
});

test("Request Bodies Request Body Post Json Data Types Map Big Int Str", async () => {
    recordTest("request-bodies-post-json-data-types-map-bigint-str");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostJsonDataTypesMapBigIntStr({
        test: BigInt("1"),
    });
    expect(result).toEqual({
        data: '{"test":"1"}',
        json: {
            test: BigInt("1"),
        },
    });
});

test("Request Bodies Request Body Post Json Data Types Map Date Time", async () => {
    recordTest("request-bodies-post-json-data-types-map-date-time");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostJsonDataTypesMapDateTime({
        test: new Date("2020-01-01T00:00:00.001Z"),
    });
    expect(result?.data).toEqual('{"test":"2020-01-01T00:00:00.001Z"}');
    expect(result?.json).toEqual({
        test: new Date("2020-01-01T00:00:00.001Z"),
    });
});

test("Request Bodies Request Body Post Json Data Types Map Decimal", async () => {
    recordTest("request-bodies-post-json-data-types-map-decimal");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostJsonDataTypesMapDecimal({
        test: new Decimal("3.141592653589793"),
    });
    expect(result).toEqual({
        data: '{"test":3.141592653589793}',
        json: {
            test: new Decimal("3.141592653589793"),
        },
    });
});

test("Request Bodies Request Body Post Json Data Types Number", async () => {
    recordTest("request-bodies-post-json-data-types-number");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostJsonDataTypesNumber(1.1);
    expect(result).toEqual({
        json: 1.1,
    });
});

test("Request Bodies Request Body Post Json Data Types String", async () => {
    recordTest("request-bodies-post-json-data-types-string");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostJsonDataTypesString("test");
    expect(result).toEqual({
        json: "test",
    });
});

test("Request Bodies Request Body Post Multiple Content Types Component Filtered", async () => {
    recordTest("request-bodies-post-multiple-content-types-component-filtered");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostMultipleContentTypesComponentFiltered({
        bool: true,
        date: new RFCDate("2020-01-01"),
        dateTime: new Date("2020-01-01T00:00:00.001Z"),
        enum: "one",
        float32: 1.1,
        int: 1,
        int32: 1,
        int32Enum: 55,
        intEnum: IntEnum.Second,
        num: 1.1,
        str: "test",
        any: "any",
        bigint: BigInt("8821239038968084"),
        bigintStr: BigInt("9223372036854775808"),
        boolOpt: true,
        decimal: new Decimal("3.141592653589793"),
        decimalStr: new Decimal("3.14159265358979344719667586"),
        float64Str: 1.1,
        int64Str: 100,
        strOpt: "testOptional",
    });
    expect(result).toEqual({
        json: {
            bool: true,
            date: new RFCDate("2020-01-01"),
            dateTime: new Date("2020-01-01T00:00:00.001Z"),
            enum: "one",
            float32: 1.1,
            int: 1,
            int32: 1,
            int32Enum: 55,
            intEnum: IntEnum.Second,
            num: 1.1,
            str: "test",
            any: "any",
            bigint: BigInt("8821239038968084"),
            bigintStr: BigInt("9223372036854775808"),
            boolOpt: true,
            decimal: new Decimal("3.141592653589793"),
            decimalStr: new Decimal("3.14159265358979344719667586"),
            float64Str: 1.1,
            int64Str: 100,
            strOpt: "testOptional",
        },
    });
});

test("Request Bodies Request Body Post Multiple Content Types Inline Filtered", async () => {
    recordTest("request-bodies-post-multiple-content-types-inline-filtered");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostMultipleContentTypesInlineFiltered({
        bool: true,
        num: 1.1,
        str: "test",
    });
    expect(result).toEqual({
        json: {
            bool: true,
            num: 1.1,
            str: "test",
        },
    });
});

test("Request Bodies Request Body Post Not Nullable Not Required String Body", async () => {
    recordTest("request-bodies-post-not-nullable-not-required-string-body");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostNotNullableNotRequiredStringBody();
    expect(result).toEqual({
        data: "",
    });
});

test("Request Bodies Request Body Post Null Array", async () => {
    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostNullArray(["value1", "value2", "value3"]);
    expect(result).toEqual({
        data: '["value1","value2","value3"]',
    });
});

test("Request Bodies Request Body Post Null Dictionary", async () => {
    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostNullDictionary({
        key1: "value1",
        key2: "value2",
        key3: "value3",
    });
    expect(result).toEqual({
        data: '{"key1":"value1","key2":"value2","key3":"value3"}',
    });
});

test("Request Bodies Request Body Post Nullable Not Required String Body", async () => {
    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostNullableNotRequiredStringBody(null);
    expect(result).toEqual({
        data: "null",
    });
});

test("Request Bodies Request Body Post Nullable Required String Body", async () => {
    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPostNullableRequiredStringBody(null);
    expect(result).toEqual({
        data: "null",
    });
});

test("Request Bodies Request Body Put Multipart Deep", async () => {
    recordTest("request-bodies-put-multipart-deep");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPutMultipartDeep({
        any: {
            bool: true,
            date: new RFCDate("2020-01-01"),
            dateTime: new Date("2020-01-01T00:00:00.001Z"),
            enum: "one",
            float32: 1.1,
            int: 1,
            int32: 1,
            int32Enum: 55,
            intEnum: IntEnum.Second,
            num: 1.1,
            str: "test",
            any: "any",
            bigint: BigInt("8821239038968084"),
            bigintStr: BigInt("9223372036854775808"),
            boolOpt: true,
            decimal: new Decimal("3.141592653589793"),
            decimalStr: new Decimal("3.14159265358979344719667586"),
            float64Str: 1.1,
            int64Str: 100,
            strOpt: "testOptional",
        },
        arr: [
            {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
            {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
        ],
        bool: true,
        int: 1,
        map: {
            key: {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
            key2: {
                bool: true,
                date: new RFCDate("2020-01-01"),
                dateTime: new Date("2020-01-01T00:00:00.001Z"),
                enum: "one",
                float32: 1.1,
                int: 1,
                int32: 1,
                int32Enum: 55,
                intEnum: IntEnum.Second,
                num: 1.1,
                str: "test",
                any: "any",
                bigint: BigInt("8821239038968084"),
                bigintStr: BigInt("9223372036854775808"),
                boolOpt: true,
                decimal: new Decimal("3.141592653589793"),
                decimalStr: new Decimal("3.14159265358979344719667586"),
                float64Str: 1.1,
                int64Str: 100,
                strOpt: "testOptional",
            },
        },
        num: 1.1,
        obj: {
            bool: true,
            date: new RFCDate("2020-01-01"),
            dateTime: new Date("2020-01-01T00:00:00.001Z"),
            enum: "one",
            float32: 1.1,
            int: 1,
            int32: 1,
            int32Enum: 55,
            intEnum: IntEnum.Second,
            num: 1.1,
            str: "test",
            any: "any",
            bigint: BigInt("8821239038968084"),
            bigintStr: BigInt("9223372036854775808"),
            boolOpt: true,
            decimal: new Decimal("3.141592653589793"),
            decimalStr: new Decimal("3.14159265358979344719667586"),
            float64Str: 1.1,
            int64Str: 100,
            strOpt: "testOptional",
        },
        str: "test",
    });
    expect(sortJSONObjectKeys(result?.form.arr, [])).toEqual(
        '[{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"},{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"}]'
    );
    expect(result?.form.bool).toEqual("true");
    expect(result?.form.int).toEqual("1");
    expect(sortJSONObjectKeys(result?.form.map, [])).toEqual(
        '{"key":{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"},"key2":{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"}}'
    );
    expect(result?.form.num).toEqual("1.1");
    expect(sortJSONObjectKeys(result?.form.obj, [])).toEqual(
        '{"any":"any","bigint":8821239038968084,"bigintStr":"9223372036854775808","bool":true,"boolOpt":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","decimal":3.141592653589793,"decimalStr":"3.14159265358979344719667586","enum":"one","float32":1.1,"float64Str":"1.1","int":1,"int32":1,"int32Enum":55,"int64Str":"100","intEnum":2,"num":1.1,"str":"test","strOpt":"testOptional"}'
    );
    expect(result?.form.str).toEqual("test");
});

test("Request Bodies Request Body Put Multipart Simple", async () => {
    recordTest("request-bodies-put-multipart-simple");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPutMultipartSimple({
        bool: true,
        date: new RFCDate("2020-01-01"),
        dateTime: new Date("2020-01-01T00:00:00.001Z"),
        enum: "one",
        float32: 1.1,
        int: 1,
        int32: 1,
        int32Enum: 55,
        intEnum: IntEnum.Second,
        num: 1.1,
        str: "test",
        any: "any",
        bigint: BigInt("8821239038968084"),
        bigintStr: BigInt("9223372036854775808"),
        boolOpt: true,
        decimal: new Decimal("3.141592653589793"),
        decimalStr: new Decimal("3.14159265358979344719667586"),
        float64Str: 1.1,
        int64Str: 100,
        strOpt: "testOptional",
    });
    expect(result?.form.any).toEqual("any");
    expect(result?.form.bigint).toEqual("8821239038968084");
    expect(result?.form.bigintStr).toEqual("9223372036854775808");
    expect(result?.form.bool).toEqual("true");
    expect(result?.form.boolOpt).toEqual("true");
    expect(result?.form.date).toEqual("2020-01-01");
    expect(result?.form.dateTime).toEqual("2020-01-01T00:00:00.001Z");
    expect(result?.form.decimal).toEqual("3.141592653589793");
    expect(result?.form.decimalStr).toEqual("3.14159265358979344719667586");
    expect(result?.form.enum).toEqual("one");
    expect(result?.form.float32).toEqual("1.1");
    expect(result?.form.int).toEqual("1");
    expect(result?.form.int32).toEqual("1");
    expect(result?.form.int32Enum).toEqual("55");
    expect(result?.form.intEnum).toEqual("2");
    expect(result?.form.intOptNull).toBeUndefined();
    expect(result?.form.num).toEqual("1.1");
    expect(result?.form.numOptNull).toBeUndefined();
    expect(result?.form.str).toEqual("test");
    expect(result?.form.strOpt).toEqual("testOptional");
});

test("Request Bodies Request Body Put String", async () => {
    recordTest("request-bodies-put-string");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPutString("Hello World");
    expect(result).toEqual({
        data: "Hello World",
    });
});

test("Request Bodies Request Body Put String With Params", async () => {
    recordTest("request-bodies-put-string-with-params");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyPutStringWithParams(
        "Hello world",
        "test param"
    );
    expect(result).toEqual({
        args: {
            queryStringParam: "test param",
        },
        data: "Hello world",
    });
});

test("Request Bodies Request Body Read And Write", async () => {
    recordTest("request-bodies-read-and-write");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyReadAndWrite({
        num1: 1,
        num2: 2,
        num3: 4,
    });
    expect(result).toEqual({
        num3: 4,
        sum: 7,
    });
});

test("Request Bodies Request Body Read Only Input", async () => {
    recordTest("request-bodies-read-only-input");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyReadOnlyInput({});
    expect(result).toEqual({
        bool: true,
        num: 1,
        string: "hello",
    });
});

test("Request Bodies Request Body Read Only Union", async () => {
    recordTest("request-bodies-read-only-union");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyReadOnlyUnion({});
    expect(result).toEqual({
        bool: true,
        num: 1,
        string: "hello",
    });
});

test("Request Bodies Request Body Read Write Only Union", async () => {
    recordTest("request-bodies-read-write-only-union");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyReadWriteOnlyUnion({
        num1: 1,
        num2: 2,
        num3: 4,
    });
    expect(result).toEqual({
        num3: 4,
        sum: 7,
    });
});

test("Request Bodies Request Body Write Only", async () => {
    recordTest("request-bodies-write-only");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyWriteOnly({
        bool: true,
        num: 1,
        string: "hello",
    });
    expect(result).toEqual({
        bool: true,
        num: 1,
        string: "hello",
    });
});

test("Request Bodies Request Body Write Only Output", async () => {
    recordTest("request-bodies-write-only-output");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyWriteOnlyOutput({
        bool: true,
        num: 1,
        string: "hello",
    });
    expect(result).toEqual({});
});

test("Request Bodies Request Body Write Only Union Write Only Object", async () => {
    recordTest("request-bodies-write-only-union");

    const sdk = new SDK();
    const result = await sdk.requestBodies.requestBodyWriteOnlyUnion({
        bool: true,
        num: 1,
        string: "hello",
    });
    expect(result).toEqual({});
});
