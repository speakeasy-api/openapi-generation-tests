/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { SDK } from "../index.js";
import { IntEnum } from "../sdk/models/shared/index.js";
import { Decimal, RFCDate } from "../sdk/types/index.js";
import { recordTest } from "./common_helpers.js";

test("Request Bodies Request Body Deprecated Request Body Ref Post", async () => {
  recordTest("request-bodies-deprecated-request-body-ref");
  const sdk = new SDK();
  const result = await sdk.requestBodies
    .requestBodyDeprecatedRequestBodyRefPost({
      str: "testvalue",
    });
  expect(result).toBeDefined();
  expect(result).toBeDefined();
  expect(result).toEqual({
    json: {
      str: "testvalue",
    },
  });
});

test("Request Bodies Request Body Post Multiple Content Types Component Filtered Application Json", async () => {
  recordTest(
    "request-bodies-post-multiple-content-types-component-filtered-application-json",
  );
  const sdk = new SDK();
  const result = await sdk.requestBodies
    .requestBodyPostMultipleContentTypesComponentFiltered({
      bool: true,
      date: new RFCDate("2020-01-01"),
      dateTime: new Date("2020-01-01T00:00:00.001Z"),
      enum: "one",
      float32: 1.1,
      int: 1,
      int32: 1,
      int32Enum: 55,
      intEnum: IntEnum.Second,
      num: 1.1,
      str: "test",
      any: "any",
      bigint: BigInt("8821239038968084"),
      bigintStr: BigInt("9223372036854775808"),
      boolOpt: true,
      decimal: new Decimal("3.141592653589793"),
      decimalStr: new Decimal("3.14159265358979344719667586"),
      float64Str: 1.1,
      int64Str: 100,
      strOpt: "testOptional",
    });
  expect(result).toBeDefined();
  expect(result).toBeDefined();
  expect(result).toEqual({
    json: {
      bool: true,
      date: new RFCDate("2020-01-01"),
      dateTime: new Date("2020-01-01T00:00:00.001Z"),
      enum: "one",
      float32: 1.1,
      int: 1,
      int32: 1,
      int32Enum: 55,
      intEnum: IntEnum.Second,
      num: 1.1,
      str: "test",
      any: "any",
      bigint: BigInt("8821239038968084"),
      bigintStr: BigInt("9223372036854775808"),
      boolOpt: true,
      decimal: new Decimal("3.141592653589793"),
      decimalStr: new Decimal("3.14159265358979344719667586"),
      float64Str: 1.1,
      int64Str: 100,
      strOpt: "testOptional",
    },
  });
});

test("Request Bodies Request Body Post Multiple Content Types Component Filtered Multipart Form Data", async () => {
  recordTest(
    "request-bodies-post-multiple-content-types-component-filtered-multipart-form-data",
  );
  const sdk = new SDK();
  const result = await sdk.requestBodies
    .requestBodyPostMultipleContentTypesComponentFiltered({
      bool: true,
      date: new RFCDate("2020-01-01"),
      dateTime: new Date("2020-01-01T00:00:00.001Z"),
      enum: "one",
      float32: 1.1,
      int: 1,
      int32: 1,
      int32Enum: 55,
      intEnum: IntEnum.Second,
      num: 1.1,
      str: "test",
      any: "any",
      bigint: BigInt("8821239038968084"),
      bigintStr: BigInt("9223372036854775808"),
      boolOpt: true,
      decimal: new Decimal("3.141592653589793"),
      decimalStr: new Decimal("3.14159265358979344719667586"),
      float64Str: 1.1,
      int64Str: 100,
      strOpt: "testOptional",
    });
  expect(result).toBeDefined();
  expect(result).toBeDefined();
  expect(result).toEqual({
    json: {
      bool: true,
      date: new RFCDate("2020-01-01"),
      dateTime: new Date("2020-01-01T00:00:00.001Z"),
      enum: "one",
      float32: 1.1,
      int: 1,
      int32: 1,
      int32Enum: 55,
      intEnum: IntEnum.Second,
      num: 1.1,
      str: "test",
      any: "any",
      bigint: BigInt("8821239038968084"),
      bigintStr: BigInt("9223372036854775808"),
      boolOpt: true,
      decimal: new Decimal("3.141592653589793"),
      decimalStr: new Decimal("3.14159265358979344719667586"),
      float64Str: 1.1,
      int64Str: 100,
      strOpt: "testOptional",
    },
  });
});

test("Request Bodies Request Body Post Multiple Content Types Component Filtered Default Test", async () => {
  const sdk = new SDK();
  const result = await sdk.requestBodies
    .requestBodyPostMultipleContentTypesComponentFilteredDefaultTest({
      bool: true,
      date: new RFCDate("2020-01-01"),
      dateTime: new Date("2020-01-01T00:00:00.001Z"),
      enum: "one",
      float32: 1.1,
      int: 1,
      int32: 1,
      int32Enum: 55,
      intEnum: IntEnum.Second,
      num: 1.1,
      str: "test",
      any: "any",
      bigint: BigInt("8821239038968084"),
      bigintStr: BigInt("9223372036854775808"),
      boolOpt: true,
      decimal: new Decimal("3.141592653589793"),
      decimalStr: new Decimal("3.14159265358979344719667586"),
      float64Str: 1.1,
      int64Str: 100,
      strOpt: "testOptional",
    });
  expect(result).toBeDefined();
  expect(result).toBeDefined();
  expect(result).toEqual({
    json: {
      bool: true,
      date: new RFCDate("2020-01-01"),
      dateTime: new Date("2020-01-01T00:00:00.001Z"),
      enum: "one",
      float32: 1.1,
      int: 1,
      int32: 1,
      int32Enum: 55,
      intEnum: IntEnum.Second,
      num: 1.1,
      str: "test",
      any: "any",
      bigint: BigInt("8821239038968084"),
      bigintStr: BigInt("9223372036854775808"),
      boolOpt: true,
      decimal: new Decimal("3.141592653589793"),
      decimalStr: new Decimal("3.14159265358979344719667586"),
      float64Str: 1.1,
      int64Str: 100,
      strOpt: "testOptional",
    },
  });
});

test("Request Bodies Request Body Post Not Nullable Not Required String Body", async () => {
  recordTest("request-bodies-post-not-nullable-not-required-string-body");
  const sdk = new SDK();
  const result = await sdk.requestBodies
    .requestBodyPostNotNullableNotRequiredStringBody();
  expect(result).toBeDefined();
  expect(result).toBeDefined();
  expect(result).toEqual({
    data: "",
  });
});
