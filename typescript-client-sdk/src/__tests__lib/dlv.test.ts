/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { dlv } from "../../lib/dlv.js";

const obj = {
  undef: undefined,
  zero: 0,
  one: 1,
  n: null,
  f: false,
  a: {
    two: 2,
    b: {
      three: 3,
      c: {
        four: 4,
      },
    },
  },
};

function check(path: string, expected: unknown, defaultValue?: unknown) {
  const out = dlv(obj, path, defaultValue);
  expect(out, `dlv(obj, "${path}")`).toStrictEqual(expected);

  if (path) {
    const arr = path.split(".");
    expect(
      dlv(obj, arr, defaultValue),
      `dlv(obj, '${JSON.stringify(arr)}')`,
    ).toStrictEqual(expected);
  }
}

test("dlv with no defaults", () => {
  check("", undefined);
  check("one", obj.one);
  check("one.two", undefined);
  check("a", obj.a);
  check("a.two", obj.a.two);
  check("a.b", obj.a.b);
  check("a.b.three", obj.a.b.three);
  check("a.b.c", obj.a.b.c);
  check("a.b.c.four", obj.a.b.c.four);
  check("n", obj.n);
  check("n.badkey", undefined);
  check("f", false);
  check("f.badkey", undefined);
});

test("dlv with defaults", () => {
  check("", "foo", "foo");
  check("undef", "foo", "foo");
  check("n", null, "foo");
  check("n.badkey", "foo", "foo");
  check("zero", 0, "foo");
  check("a.badkey", "foo", "foo");
  check("a.badkey.anotherbadkey", "foo", "foo");
  check("f", false, "foo");
  check("f.badkey", "foo", "foo");
});
