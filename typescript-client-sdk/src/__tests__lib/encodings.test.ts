/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { describe, expect, it } from "vitest";

import {
  encodeMatrix,
  encodeLabel,
  encodeForm,
  encodeSimple,
  encodeSpaceDelimited,
  encodePipeDelimited,
  encodeDeepObject,
  encodeJSON,
} from "../../lib/encodings.js";

describe("matrix encoding", () => {
  const encode = encodeMatrix;

  it("encodes empty parameters", () => {
    expect(encode("color", "")).toEqual(";color");
    expect(encode("color", null)).toEqual(";color=null");
  });

  it("encodes simple parameters", () => {
    expect(encode("color", "blue")).toEqual(";color=blue");
    expect(encode("color", 1)).toEqual(";color=1");
    expect(encode("color", true)).toEqual(";color=true");
  });

  it("encodes arrays", () => {
    expect(encode("color", ["blue", "black", "brown"])).toEqual(
      ";color=blue,black,brown",
    );
  });

  it("encodes exploded arrays", () => {
    expect(
      encode("color", ["blue", "black", "brown"], { explode: true }),
    ).toEqual(";color=blue;color=black;color=brown");
  });

  it("encodes objects", () => {
    expect(encode("color", { R: 100, G: 200, B: 150 })).toEqual(
      ";color=R,100,G,200,B,150",
    );
  });

  it("encodes exploded objects", () => {
    expect(
      encode("color", { R: 100, G: 200, B: 150 }, { explode: true }),
    ).toEqual(";R=100;G=200;B=150");
  });

  it("encodes date objects", () => {
    const d1 = new Date("2006-01-02T15:04:05.099Z");
    const d2 = new Date("2007-02-03T16:05:06.099Z");

    expect(encode("dates", d1)).toEqual(";dates=2006-01-02T15:04:05.099Z");

    expect(encode("dates", [d1, d2])).toEqual(
      ";dates=2006-01-02T15:04:05.099Z,2007-02-03T16:05:06.099Z",
    );

    expect(encode("dates", { start: d1 })).toEqual(
      ";dates=start,2006-01-02T15:04:05.099Z",
    );
  });

  it("encodes special characters", () => {
    expect(
      encode("color[1]", "3.5%", {
        charEncoding: "percent",
      }),
    ).toEqual(";color%5B1%5D=3.5%25");

    expect(
      encode("color", ["blue", "bl@ck", "brown"], {
        charEncoding: "percent",
      }),
    ).toEqual(";color=blue,bl%40ck,brown");

    expect(
      encode("color", { R: 100, G: 200, B: "$" }, { charEncoding: "percent" }),
    ).toEqual(";color=R,100,G,200,B,%24");
  });

  it("discards undefined values", () => {
    expect(encode("color", undefined)).toEqual("");

    expect(encode("color", ["blue", "black", undefined, "brown"])).toEqual(
      ";color=blue,black,brown",
    );
    expect(
      encode("color", ["blue", "black", undefined, "brown"], { explode: true }),
    ).toEqual(";color=blue;color=black;color=brown");

    expect(encode("color", { R: 100, G: 200, B: 150, A: undefined })).toEqual(
      ";color=R,100,G,200,B,150",
    );
    expect(
      encode(
        "color",
        { R: 100, G: 200, B: 150, A: undefined },
        { explode: true },
      ),
    ).toEqual(";R=100;G=200;B=150");
  });
});

describe("label encoding", () => {
  const encode = encodeLabel;

  it("encodes empty parameters", () => {
    expect(encode("color", "")).toEqual(".");
    expect(encode("color", null)).toEqual(".null");
  });

  it("encodes simple parameters", () => {
    expect(encode("color", "blue")).toEqual(".blue");
    expect(encode("color", 1)).toEqual(".1");
    expect(encode("color", true)).toEqual(".true");
  });

  it("encodes arrays", () => {
    expect(encode("color", ["blue", "black", "brown"])).toEqual(
      ".blue.black.brown",
    );
  });

  it("encodes exploded arrays", () => {
    expect(
      encode("color", ["blue", "black", "brown"], { explode: true }),
    ).toEqual(".blue.black.brown");
  });

  it("encodes objects", () => {
    expect(encode("color", { R: 100, G: 200, B: 150 })).toEqual(
      ".R.100.G.200.B.150",
    );
  });

  it("encodes exploded objects", () => {
    expect(
      encode("color", { R: 100, G: 200, B: 150 }, { explode: true }),
    ).toEqual(".R=100.G=200.B=150");
  });

  it("encodes date objects", () => {
    const d1 = new Date("2006-01-02T15:04:05.099Z");
    const d2 = new Date("2007-02-03T16:05:06.099Z");

    expect(encode("dates", d1)).toEqual(".2006-01-02T15:04:05.099Z");

    expect(encode("dates", [d1, d2])).toEqual(
      ".2006-01-02T15:04:05.099Z.2007-02-03T16:05:06.099Z",
    );

    expect(encode("dates", { start: d1 })).toEqual(
      ".start.2006-01-02T15:04:05.099Z",
    );
  });

  it("encodes special characters", () => {
    expect(
      encode("color[1]", "3.5%", {
        charEncoding: "percent",
      }),
    ).toEqual(".3.5%25");

    expect(
      encode("color", ["blue", "bl@ck", "brown"], {
        charEncoding: "percent",
      }),
    ).toEqual(".blue.bl%40ck.brown");

    expect(
      encode("color", { R: 100, G: 200, B: "$" }, { charEncoding: "percent" }),
    ).toEqual(".R.100.G.200.B.%24");
  });

  it("discards undefined values", () => {
    expect(encode("color", undefined)).toEqual("");

    expect(encode("color", ["blue", "black", undefined, "brown"])).toEqual(
      ".blue.black.brown",
    );
    expect(
      encode("color", ["blue", "black", undefined, "brown"], { explode: true }),
    ).toEqual(".blue.black.brown");

    expect(encode("color", { R: 100, G: 200, B: 150, A: undefined })).toEqual(
      ".R.100.G.200.B.150",
    );
    expect(
      encode(
        "color",
        { R: 100, G: 200, B: 150, A: undefined },
        { explode: true },
      ),
    ).toEqual(".R=100.G=200.B=150");
  });
});

describe("form encoding", () => {
  const encode = encodeForm;

  it("encodes empty parameters", () => {
    expect(encode("color", "")).toEqual("color=");
    expect(encode("color", null)).toEqual("color=null");
  });

  it("encodes simple parameters", () => {
    expect(encode("color", "blue")).toEqual("color=blue");
    expect(encode("color", 1)).toEqual("color=1");
    expect(encode("color", true)).toEqual("color=true");
  });

  it("encodes arrays", () => {
    expect(encode("color", ["blue", "black", "brown"])).toEqual(
      "color=blue,black,brown",
    );
  });

  it("encodes exploded arrays", () => {
    expect(
      encode("color", ["blue", "black", "brown"], { explode: true }),
    ).toEqual("color=blue&color=black&color=brown");
  });

  it("encodes objects", () => {
    expect(encode("color", { R: 100, G: 200, B: 150 })).toEqual(
      "color=R,100,G,200,B,150",
    );
  });

  it("encodes exploded objects", () => {
    expect(
      encode("color", { R: 100, G: 200, B: 150 }, { explode: true }),
    ).toEqual("R=100&G=200&B=150");
  });

  it("encodes date objects", () => {
    const d1 = new Date("2006-01-02T15:04:05.099Z");
    const d2 = new Date("2007-02-03T16:05:06.099Z");

    expect(encode("dates", d1)).toEqual("dates=2006-01-02T15:04:05.099Z");

    expect(encode("dates", [d1, d2])).toEqual(
      "dates=2006-01-02T15:04:05.099Z,2007-02-03T16:05:06.099Z",
    );

    expect(encode("dates", { start: d1 })).toEqual(
      "dates=start,2006-01-02T15:04:05.099Z",
    );
  });

  it("encodes special characters", () => {
    expect(
      encode("color[1]", "3.5%", {
        charEncoding: "percent",
      }),
    ).toEqual("color%5B1%5D=3.5%25");

    expect(
      encode("color", ["blue", "bl@ck", "brown"], {
        charEncoding: "percent",
      }),
    ).toEqual("color=blue%2Cbl%40ck%2Cbrown");

    expect(
      encode("color", { R: 100, G: 200, B: "$" }, { charEncoding: "percent" }),
    ).toEqual("color=R%2C100%2CG%2C200%2CB%2C%24");
  });

  it("discards undefined values", () => {
    expect(encode("color", undefined)).toEqual("");

    expect(encode("color", ["blue", "black", undefined, "brown"])).toEqual(
      "color=blue,black,brown",
    );
    expect(
      encode("color", ["blue", "black", undefined, "brown"], { explode: true }),
    ).toEqual("color=blue&color=black&color=brown");

    expect(encode("color", { R: 100, G: 200, B: 150, A: undefined })).toEqual(
      "color=R,100,G,200,B,150",
    );
    expect(
      encode(
        "color",
        { R: 100, G: 200, B: 150, A: undefined },
        { explode: true },
      ),
    ).toEqual("R=100&G=200&B=150");
  });
});

describe("simple encoding", () => {
  const encode = encodeSimple;

  it("encodes empty parameters", () => {
    expect(encode("color", "")).toEqual("");
    expect(encode("color", null)).toEqual("null");
  });

  it("encodes simple parameters", () => {
    expect(encode("color", "blue")).toEqual("blue");
    expect(encode("color", 1)).toEqual("1");
    expect(encode("color", true)).toEqual("true");
  });

  it("encodes arrays", () => {
    expect(encode("color", ["blue", "black", "brown"])).toEqual(
      "blue,black,brown",
    );
  });

  it("encodes exploded arrays", () => {
    expect(
      encode("color", ["blue", "black", "brown"], { explode: true }),
    ).toEqual("blue,black,brown");
  });

  it("encodes objects", () => {
    expect(encode("color", { R: 100, G: 200, B: 150 })).toEqual(
      "R,100,G,200,B,150",
    );
  });

  it("encodes exploded objects", () => {
    expect(
      encode("color", { R: 100, G: 200, B: 150 }, { explode: true }),
    ).toEqual("R=100,G=200,B=150");
  });

  it("encodes date objects", () => {
    const d1 = new Date("2006-01-02T15:04:05.099Z");
    const d2 = new Date("2007-02-03T16:05:06.099Z");

    expect(encode("dates", d1)).toEqual("2006-01-02T15:04:05.099Z");

    expect(encode("dates", [d1, d2])).toEqual(
      "2006-01-02T15:04:05.099Z,2007-02-03T16:05:06.099Z",
    );

    expect(encode("dates", { start: d1 })).toEqual(
      "start,2006-01-02T15:04:05.099Z",
    );
  });

  it("encodes special characters", () => {
    expect(
      encode("color[1]", "3.5%", {
        charEncoding: "percent",
      }),
    ).toEqual("3.5%25");

    expect(
      encode("color", ["blue", "bl@ck", "brown"], {
        charEncoding: "percent",
      }),
    ).toEqual("blue,bl%40ck,brown");

    expect(
      encode("color", { R: 100, G: 200, B: "$" }, { charEncoding: "percent" }),
    ).toEqual("R,100,G,200,B,%24");
  });

  it("discards undefined values", () => {
    expect(encode("color", undefined)).toEqual("");

    expect(encode("color", ["blue", "black", undefined, "brown"])).toEqual(
      "blue,black,brown",
    );
    expect(
      encode("color", ["blue", "black", undefined, "brown"], { explode: true }),
    ).toEqual("blue,black,brown");

    expect(encode("color", { R: 100, G: 200, B: 150, A: undefined })).toEqual(
      "R,100,G,200,B,150",
    );
    expect(
      encode(
        "color",
        { R: 100, G: 200, B: 150, A: undefined },
        { explode: true },
      ),
    ).toEqual("R=100,G=200,B=150");
  });
});

describe("spaceDelimited encoding", () => {
  const encode = encodeSpaceDelimited;

  it("encodes empty parameters", () => {
    expect(encode("color", "")).toEqual("color=");
    expect(encode("color", null)).toEqual("color=null");
  });

  it("encodes simple parameters", () => {
    expect(encode("color", "blue")).toEqual("color=blue");
    expect(encode("color", 1)).toEqual("color=1");
    expect(encode("color", true)).toEqual("color=true");
  });

  it("encodes arrays", () => {
    expect(encode("color", ["blue", "black", "brown"])).toEqual(
      "color=blue black brown",
    );
  });

  it("encodes exploded arrays", () => {
    expect(
      encode("color", ["blue", "black", "brown"], {
        explode: true,
      }),
    ).toEqual("color=blue&color=black&color=brown");
  });

  it("encodes objects", () => {
    expect(encode("color", { R: 100, G: 200, B: 150 })).toEqual(
      "color=R 100 G 200 B 150",
    );
  });

  it("encodes exploded objects", () => {
    expect(
      encode("color", { R: 100, G: 200, B: 150 }, { explode: true }),
    ).toEqual("R=100&G=200&B=150");
  });

  it("encodes date objects", () => {
    const d1 = new Date("2006-01-02T15:04:05.099Z");
    const d2 = new Date("2007-02-03T16:05:06.099Z");

    expect(encode("dates", d1)).toEqual("dates=2006-01-02T15:04:05.099Z");

    expect(encode("dates", [d1, d2])).toEqual(
      "dates=2006-01-02T15:04:05.099Z 2007-02-03T16:05:06.099Z",
    );

    expect(encode("dates", { start: d1 })).toEqual(
      "dates=start 2006-01-02T15:04:05.099Z",
    );
  });

  it("encodes special characters", () => {
    expect(
      encode("color[1]", "3.5%", {
        charEncoding: "percent",
      }),
    ).toEqual("color%5B1%5D=3.5%25");

    expect(
      encode("color", ["blue", "bl@ck", "brown"], {
        charEncoding: "percent",
      }),
    ).toEqual("color=blue%20bl%40ck%20brown");

    expect(
      encode("color", { R: 100, G: 200, B: "$" }, { charEncoding: "percent" }),
    ).toEqual("color=R%20100%20G%20200%20B%20%24");
  });

  it("discards undefined values", () => {
    expect(encode("color", undefined)).toEqual("");

    expect(encode("color", ["blue", "black", undefined, "brown"])).toEqual(
      "color=blue black brown",
    );
    expect(
      encode("color", ["blue", "black", undefined, "brown"], { explode: true }),
    ).toEqual("color=blue&color=black&color=brown");

    expect(encode("color", { R: 100, G: 200, B: 150, A: undefined })).toEqual(
      "color=R 100 G 200 B 150",
    );
    expect(
      encode(
        "color",
        { R: 100, G: 200, B: 150, A: undefined },
        { explode: true },
      ),
    ).toEqual("R=100&G=200&B=150");
  });
});

describe("pipeDelimited encoding", () => {
  const encode = encodePipeDelimited;

  it("encodes empty parameters", () => {
    expect(encode("color", "")).toEqual("color=");
    expect(encode("color", null)).toEqual("color=null");
  });

  it("encodes simple parameters", () => {
    expect(encode("color", "blue")).toEqual("color=blue");
    expect(encode("color", 1)).toEqual("color=1");
    expect(encode("color", true)).toEqual("color=true");
  });

  it("encodes arrays", () => {
    expect(encode("color", ["blue", "black", "brown"])).toEqual(
      "color=blue|black|brown",
    );
  });

  it("encodes exploded arrays", () => {
    expect(
      encode("color", ["blue", "black", "brown"], {
        explode: true,
      }),
    ).toEqual("color=blue&color=black&color=brown");
  });

  it("encodes objects", () => {
    expect(encode("color", { R: 100, G: 200, B: 150 })).toEqual(
      "color=R|100|G|200|B|150",
    );
  });

  it("encodes exploded objects", () => {
    expect(
      encode("color", { R: 100, G: 200, B: 150 }, { explode: true }),
    ).toEqual("R=100&G=200&B=150");
  });

  it("encodes date objects", () => {
    const d1 = new Date("2006-01-02T15:04:05.099Z");
    const d2 = new Date("2007-02-03T16:05:06.099Z");

    expect(encode("dates", d1)).toEqual("dates=2006-01-02T15:04:05.099Z");

    expect(encode("dates", [d1, d2])).toEqual(
      "dates=2006-01-02T15:04:05.099Z|2007-02-03T16:05:06.099Z",
    );

    expect(encode("dates", { start: d1 })).toEqual(
      "dates=start|2006-01-02T15:04:05.099Z",
    );
  });

  it("encodes special characters", () => {
    expect(
      encode("color[1]", "3.5%", {
        charEncoding: "percent",
      }),
    ).toEqual("color%5B1%5D=3.5%25");

    expect(
      encode("color", ["blue", "bl@ck", "brown"], {
        charEncoding: "percent",
      }),
    ).toEqual("color=blue%7Cbl%40ck%7Cbrown");

    expect(
      encode("color", { R: 100, G: 200, B: "$" }, { charEncoding: "percent" }),
    ).toEqual("color=R%7C100%7CG%7C200%7CB%7C%24");
  });

  it("discards undefined values", () => {
    expect(encode("color", undefined)).toEqual("");

    expect(encode("color", ["blue", "black", undefined, "brown"])).toEqual(
      "color=blue|black|brown",
    );
    expect(
      encode("color", ["blue", "black", undefined, "brown"], { explode: true }),
    ).toEqual("color=blue&color=black&color=brown");

    expect(encode("color", { R: 100, G: 200, B: 150, A: undefined })).toEqual(
      "color=R|100|G|200|B|150",
    );
    expect(
      encode(
        "color",
        { R: 100, G: 200, B: 150, A: undefined },
        { explode: true },
      ),
    ).toEqual("R=100&G=200&B=150");
  });
});

describe("deepObject encoding", () => {
  const encode = encodeDeepObject;

  it("encodes objects", () => {
    expect(encode("color", { R: 100, G: 200, B: 150 })).toEqual(
      "color[R]=100&color[G]=200&color[B]=150",
    );
  });

  it("encodes array fields", () => {
    expect(encode("filters", { themes: ["light", "dark"] })).toEqual(
      "filters[themes]=light&filters[themes]=dark",
    );
  });

  it("encodes empty fields", () => {
    expect(encode("filters", { themes: [] })).toEqual("");
    expect(encode("color", {})).toEqual("");
  });

  it("encodes date objects", () => {
    const d1 = new Date("2006-01-02T15:04:05.099Z");

    expect(encode("dates", { start: d1 })).toEqual(
      "dates[start]=2006-01-02T15:04:05.099Z",
    );
  });

  it("encodes special characters", () => {
    expect(
      encode(
        "color",
        { R: 100, G: 200, B: "3.5%" },
        { charEncoding: "percent" },
      ),
    ).toEqual("color%5BR%5D=100&color%5BG%5D=200&color%5BB%5D=3.5%25");
  });

  it("disallows simple parameters", () => {
    const msg = `Value of parameter 'color' which uses deepObject encoding must be an object`;
    expect(() => encode("color", "")).toThrow(msg);
    expect(() => encode("color", "blue")).toThrow(msg);
    expect(() => encode("color", 1)).toThrow(msg);
    expect(() => encode("color", true)).toThrow(msg);
  });

  it("disallows object field values", () => {
    expect(() =>
      encode("color", { R: 100, G: { msg: "too nested" }, B: 150 }),
    ).toThrow(
      "Value of parameter field 'color[G]' cannot be an array or object.",
    );
  });

  it("discards undefined values", () => {
    expect(encode("color", undefined)).toEqual("");
    expect(encode("color", { R: 100, G: 200, B: 150, A: undefined })).toEqual(
      "color[R]=100&color[G]=200&color[B]=150",
    );
    expect(encode("filters", { themes: [undefined, "light", "dark"] })).toEqual(
      "filters[themes]=light&filters[themes]=dark",
    );
  });
});

describe("json encoding", () => {
  const encode = encodeJSON;

  it("encodes empty parameters", () => {
    expect(encode("color", "")).toEqual('color=""');
    expect(encode("color", null)).toEqual("color=null");
  });

  it("encodes simple parameters", () => {
    expect(encode("color", "blue")).toEqual('color="blue"');
    expect(encode("color", 1)).toEqual("color=1");
    expect(encode("color", true)).toEqual("color=true");
  });

  it("encodes arrays", () => {
    expect(encode("color", ["blue", "black", "brown"])).toEqual(
      'color=["blue","black","brown"]',
    );
  });

  it("encodes objects", () => {
    const d1 = new Date("2006-01-02T15:04:05.099Z");
    const val = {
      colors: ["light", "dark"],
      inStock: true,
      pub: { gt: d1 },
    };
    const expected = JSON.stringify(val);

    expect(
      encode("filters", {
        colors: ["light", "dark"],
        inStock: true,
        pub: { gt: d1 },
      }),
    ).toEqual(`filters=${expected}`);
  });

  it("encodes exploded objects", () => {
    const d1 = new Date("2006-01-02T15:04:05.099Z");
    const val = {
      colors: ["light", "dark"],
      inStock: true,
      pub: { gt: d1 },
    };
    const expected = JSON.stringify(val);

    expect(
      encode(
        "filters",
        {
          colors: ["light", "dark"],
          inStock: true,
          pub: { gt: d1 },
        },
        { explode: true },
      ),
    ).toEqual(expected);
  });

  it("discards undefined values", () => {
    expect(encode("filters", undefined)).toEqual("");
    expect(
      encode(
        "filters",
        {
          price: undefined,
          colors: [undefined, "light", "dark"],
          theme: { light: undefined, dark: "#000000" },
        },
        { explode: true },
      ),
    ).toEqual(`{"colors":[null,"light","dark"],"theme":{"dark":"#000000"}}`);
  });
});
