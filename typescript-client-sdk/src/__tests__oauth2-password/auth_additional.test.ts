/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assert, expect, test, vi } from "vitest";

import { SDK } from "../index.js";
import { recordTest } from "./common_helpers.js";
import { HTTPClient } from "../lib/http.js";
import { UnexpectedClientError } from "../models/errors/httpclienterrors.js";
import { APIError } from "../models/errors/apierror.js";

const NOT_CAPTURED = Symbol("not-captured");

function isTokenRequest(req: Request): boolean {
  return req.method === "POST" && new URL(req.url).pathname === "/oauth2/token";
}

function newRecordingClient(spy: ReturnType<typeof vi.fn>) {
  return new HTTPClient().addHook("beforeRequest", async (req) => {
    let payload: object | symbol = NOT_CAPTURED;
    if (isTokenRequest(req)) {
      const body = await req.clone().text();
      const parsed = new URLSearchParams(body);
      payload = Object.fromEntries(parsed.entries());
    }
    spy(req.method, req.url, payload);
    return req;
  });
}

test("uses oauth2 password credentials to obtain token and make request", async () => {
  recordTest("hooks-oauth2-password-with-credentials");

  const reqSpy = vi.fn();
  const httpClient = newRecordingClient(reqSpy);

  const sdk = new SDK({
    oauth2: {
      clientID: "beezy",
      clientSecret: "super-secret",
      username: "testuser",
      password: "testpassword",
    },
    httpClient,
  });

  const result = await sdk.products.list();

  expect(result.httpMeta.response.status).toEqual(200);
  expect(result.httpMeta.response.headers.get("x-oauth2")).toEqual("pass");
  expect(reqSpy).toHaveBeenCalledTimes(2);
  expect(reqSpy).toHaveBeenCalledWith(
    "POST",
    "http://localhost:35456/oauth2/token",
    {
      grant_type: "password",
      username: "testuser",
      password: "testpassword",
      client_id: "beezy",
      client_secret: "super-secret",
      scope: "products:read",
    },
  );
  expect(reqSpy).toHaveBeenCalledWith(
    "GET",
    "http://localhost:35456/ecommerce/products",
    NOT_CAPTURED,
  );
  expect(result.products?.products).toHaveLength(10);
});

test("bypasses oauth2 password hook with oauth2 access token", async () => {
  recordTest("hooks-oauth2-password-with-token");

  const tokenRes = await fetch("http://localhost:35456/oauth2/token", {
    method: "POST",
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
    },
    body: new URLSearchParams({
      grant_type: "password",
      username: "testuser",
      password: "testpassword",
      client_id: "beezy",
      client_secret: "super-secret",
      scope: "products:read",
    }).toString(),
  });
  expect(tokenRes.status).toEqual(200);
  const tokenPayload = await tokenRes.json();
  expect(typeof tokenPayload).toEqual("object");
  expect(tokenPayload).toBeDefined();

  const token = tokenPayload["access_token"];
  if (typeof token !== "string") {
    expect.fail(
      token,
      "<string>",
      "token response did not contain access token",
    );
  }

  const reqSpy = vi.fn();
  const httpClient = newRecordingClient(reqSpy);

  const sdk = new SDK({
    oauth2: token,
    httpClient,
  });

  const result = await sdk.products.list();

  expect(result.httpMeta.response.status).toEqual(200);
  expect(result.httpMeta.response.headers.get("x-oauth2")).toEqual("pass");
  expect(reqSpy).toHaveBeenCalledTimes(1);
  expect(reqSpy).toHaveBeenCalledWith(
    "GET",
    "http://localhost:35456/ecommerce/products",
    NOT_CAPTURED,
  );
  expect(result.products?.products).toHaveLength(10);
});

test("oauth2 password automatically renews access token", async () => {
  recordTest("hooks-oauth2-password-token-renewal");

  let tokenRequests = 0;
  const reqSpy = vi.fn();
  let once = true;
  const httpClient = newRecordingClient(reqSpy).addHook(
    "beforeRequest",
    async (req) => {
      const obtainingToken = isTokenRequest(req);
      if (obtainingToken) {
        tokenRequests += 1;
      }

      req.headers.delete("x-oauth2-expire-at");
      if (!once || !obtainingToken) {
        return;
      }

      once = false;
      req.headers.set(
        "x-oauth2-expire-at",
        new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
      );
    },
  );

  const sdk = new SDK({
    oauth2: {
      clientID: "beezy",
      clientSecret: "super-secret",
      username: "testuser",
      password: "testpassword",
    },
    // TODO - retrying 401 should be transparent and not need explicit opt-in
    retryConfig: {
      strategy: "backoff",
    },
    httpClient,
  });

  // TODO - retrying 401 should be transparent and not need explicit opt-in
  const result = await sdk.products.list({ retryCodes: ["401"] });

  expect(result.httpMeta.response.status).toEqual(200);
  expect(result.httpMeta.response.headers.get("x-oauth2")).toEqual("pass");
  expect(tokenRequests, "expected 2 token requests").toEqual(2);
  expect(reqSpy).toHaveBeenCalledTimes(4);
  expect(reqSpy).toHaveBeenCalledWith(
    "GET",
    "http://localhost:35456/ecommerce/products",
    NOT_CAPTURED,
  );
  expect(result.products?.products).toHaveLength(10);
});

test("oauth2 password automatically obtains token with additional scope", async () => {
  recordTest("hooks-oauth2-password-operation-scope");

  const reqSpy = vi.fn();
  const httpClient = newRecordingClient(reqSpy);

  const sdk = new SDK({
    oauth2: {
      clientID: "beezy",
      clientSecret: "super-secret",
      username: "testuser",
      password: "testpassword",
    },
    httpClient,
  });

  const listResult = await sdk.products.list();

  expect(listResult.httpMeta.response.status).toEqual(200);
  expect(listResult.httpMeta.response.headers.get("x-oauth2")).toEqual("pass");
  expect(reqSpy).toHaveBeenCalledTimes(2);
  expect(reqSpy).toHaveBeenCalledWith(
    "POST",
    "http://localhost:35456/oauth2/token",
    {
      grant_type: "password",
      username: "testuser",
      password: "testpassword",
      client_id: "beezy",
      client_secret: "super-secret",
      scope: "products:read",
    },
  );
  expect(reqSpy).toHaveBeenCalledWith(
    "GET",
    "http://localhost:35456/ecommerce/products",
    NOT_CAPTURED,
  );
  expect(listResult.products?.products).toHaveLength(10);

  reqSpy.mockReset();

  // ========================================================================
  // At this point we're verifying that the hook didn't have a suitable token
  // and had to request another one with wider scope.
  // ========================================================================

  const createResult = await sdk.products.create({
    description: "Games console",
    name: "Playstation 5",
    price: 499.99,
  });

  expect(createResult.httpMeta.response.status).toEqual(200);
  expect(createResult.httpMeta.response.headers.get("x-oauth2")).toEqual(
    "pass",
  );
  expect(reqSpy).toHaveBeenCalledTimes(2);
  expect(reqSpy).toHaveBeenCalledWith(
    "POST",
    "http://localhost:35456/oauth2/token",
    {
      grant_type: "password",
      username: "testuser",
      password: "testpassword",
      client_id: "beezy",
      client_secret: "super-secret",
      scope: "products:read products:create",
    },
  );
  expect(reqSpy).toHaveBeenCalledWith(
    "POST",
    "http://localhost:35456/ecommerce/products",
    NOT_CAPTURED,
  );
  expect(createResult.product).toEqual(
    expect.objectContaining({
      name: "Playstation 5",
    }),
  );
});

test("oauth2 password fails to obtain token with bad credentials", async () => {
  recordTest("hooks-oauth2-password-bad-credentials");

  const reqSpy = vi.fn();
  const httpClient = newRecordingClient(reqSpy);

  const sdk = new SDK({
    oauth2: {
      clientID: "beezy",
      clientSecret: "super-secret",
      username: "testuser",
      password: "BAD_PASSWORD",
    },
    httpClient,
  });

  try {
    await sdk.products.list();
    expect.fail("expected sdk method call to fail");
  } catch (err: unknown) {
    assert(
      err instanceof Error,
      `expected err to be an Error instance or subclass`,
    );
    assert(
      err instanceof UnexpectedClientError,
      `expected error to be UnexpectedClientError but got: ${err.name}`,
    );

    assert(
      err.cause instanceof Error,
      `expected UnexpectedClientError to contain an error as cause`,
    );

    assert(
      err.cause instanceof APIError,
      `expected UnexpectedClientError to contain APIError as cause: ${err.cause.name}`,
    );

    expect(err.cause.message).toEqual(
      "Unexpected response for OAuth2 token request: Status 400 Content-Type application/json",
    );
  }
});

test("skips oauth2 flow for methods that do not require it", async () => {
  recordTest("hooks-oauth2-password-not-required");

  const reqSpy = vi.fn();
  const httpClient = newRecordingClient(reqSpy);

  const sdk = new SDK({
    oauth2: {
      clientID: "beezy",
      clientSecret: "super-secret",
      username: "testuser",
      password: "testpassword",
    },
    httpClient,
  });

  const result = await sdk.healthCheck();

  expect(result.httpMeta.response.status).toEqual(200);
  expect({ xoauth2: result.httpMeta.response.headers.get("x-oauth2") }).toEqual(
    { xoauth2: null },
  );
  expect(reqSpy).toHaveBeenCalledTimes(1);
  expect(reqSpy).toHaveBeenCalledWith(
    "GET",
    "http://localhost:35456/ping",
    NOT_CAPTURED,
  );
  expect(result.res).toEqual("pong");
});
