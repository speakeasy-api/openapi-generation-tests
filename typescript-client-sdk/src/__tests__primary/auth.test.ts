/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { vi, expect, test, afterEach } from "vitest";

import { SDK } from "../index.js";
import { resetEnv } from "../lib/env.js";
import { ApiKeyAuthGlobalResponse } from "../sdk/models/operations/apikeyauthglobal.js";
import { BasicAuthNewResponse } from "../sdk/models/operations/basicauthnew.js";
import { BearerAuthResponse } from "../sdk/models/operations/bearerauth.js";
import { MultipleMixedOptionsAuthResponse } from "../sdk/models/operations/multiplemixedoptionsauth.js";
import { MultipleMixedSchemeAuthResponse } from "../sdk/models/operations/multiplemixedschemeauth.js";
import { MultipleOptionsWithMixedSchemesAuthResponse } from "../sdk/models/operations/multipleoptionswithmixedschemesauth.js";
import { MultipleOptionsWithSimpleSchemesAuthResponse } from "../sdk/models/operations/multipleoptionswithsimpleschemesauth.js";
import { MultipleSimpleOptionsAuthResponse } from "../sdk/models/operations/multiplesimpleoptionsauth.js";
import { MultipleSimpleSchemeAuthResponse } from "../sdk/models/operations/multiplesimpleschemeauth.js";
import { Oauth2AuthNewResponse } from "../sdk/models/operations/oauth2authnew.js";
import { OpenIdConnectAuthNewResponse } from "../sdk/models/operations/openidconnectauthnew.js";
import { Security } from "../sdk/models/shared/security.js";

import { recordTest } from "./common_helpers.js";

afterEach(() => {
  resetEnv();
  vi.unstubAllEnvs();
});

test("Test Basic Auth", async () => {
  recordTest("auth-basic-auth");

  const sdk = new SDK();

  const res: BasicAuthNewResponse = await sdk.authNew.basicAuthNew(
    {
      username: "testUser",
      password: "testPass",
    },
    {
      basicAuth: {
        username: "testUser",
        password: "testPass",
      },
    },
  );

  expect(res.httpMeta.response.status).toBe(200);
});

test("Test Basic Auth Empty", async () => {
  recordTest("auth-basic-auth-empty");

  const sdk = new SDK();

  const res: BasicAuthNewResponse = await sdk.authNew.basicAuthNew(
    { username: "", password: "" },
    { basicAuth: { username: "", password: "" } },
  );

  expect(res.httpMeta.response.status).toBe(200);
});

test("Test Basic Auth Username Only", async () => {
  recordTest("auth-basic-auth-username-only");

  const sdk = new SDK();

  const res = await sdk.authNew.basicAuthNew(
    { username: "testUser", password: "" },
    { basicAuth: { username: "testUser", password: "" } },
  );

  expect(res.httpMeta.response.status).toBe(200);
});

test("Test Basic Auth Password Only", async () => {
  recordTest("auth-basic-auth-password-only");

  const sdk = new SDK();

  const res = await sdk.authNew.basicAuthNew(
    { username: "", password: "testPass" },
    { basicAuth: { username: "", password: "testPass" } },
  );

  expect(res.httpMeta.response.status).toBe(200);
});

test("Test API Key Auth Global", async () => {
  recordTest("auth-api-key-auth-global");

  vi.stubEnv("SPEAKEASY_API_KEY_AUTH", "Bearer test_api_key");

  const sdk = new SDK();

  const res: ApiKeyAuthGlobalResponse = await sdk.auth.apiKeyAuthGlobal();

  expect(res.httpMeta.response.status).toBe(200);
  expect(res.token?.token).toBe("test_api_key");
});

test("Test Bearer Auth Operation With Prefix", async () => {
  recordTest("auth-bearer-auth-operation-with-prefix");

  const sdk = new SDK();

  const res: BearerAuthResponse = await sdk.auth.bearerAuth({
    bearerAuth: "Bearer test_token",
  });

  expect(res.httpMeta.response.status).toBe(200);
  expect(res.token?.authenticated).toBe(true);
  expect(res.token?.token).toBe("test_token");
});

test("Test Bearer Auth Operation Without Prefix", async () => {
  recordTest("auth-bearer-auth-operation-without-prefix");

  const sdk = new SDK();

  const res: BearerAuthResponse = await sdk.auth.bearerAuth({
    bearerAuth: "test_token",
  });

  expect(res.httpMeta.response.status).toBe(200);
  expect(res.token?.authenticated).toBe(true);
  expect(res.token?.token).toBe("test_token");
});

test("Test Oauth2 Auth", async () => {
  recordTest("auth-oauth2-auth");

  const sdk = new SDK({
    security: {
      oauth2: "Bearer testToken",
    },
  });

  const res: Oauth2AuthNewResponse = await sdk.authNew.oauth2AuthNew({
    headerAuth: [
      {
        headerName: "Authorization",
        expectedValue: "Bearer testToken",
      },
    ],
  });

  expect(res.httpMeta.response.status).toBe(200);
});

test("Test OpenID Connect Auth", async () => {
  recordTest("auth-open-id-connect-auth");

  const sdk = new SDK();

  const res: OpenIdConnectAuthNewResponse =
    await sdk.authNew.openIdConnectAuthNew(
      {
        openIdConnect: "Bearer testToken",
      },
      {
        headerAuth: [
          {
            headerName: "Authorization",
            expectedValue: "Bearer testToken",
          },
        ],
      },
    );

  expect(res.httpMeta.response.status).toBe(200);
});

test("Test Multiple Simple Scheme Auth", async () => {
  recordTest("auth-multiple-simple-scheme-auth");

  const sdk = new SDK();

  const res: MultipleSimpleSchemeAuthResponse =
    await sdk.authNew.multipleSimpleSchemeAuth(
      {
        apiKeyAuthNew: "test_api_key",
        oauth2: "Bearer testToken",
      },
      {
        headerAuth: [
          {
            headerName: "x-api-key",
            expectedValue: "test_api_key",
          },
          {
            headerName: "Authorization",
            expectedValue: "Bearer testToken",
          },
        ],
      },
    );

  expect(res.httpMeta.response.status).toBe(200);
});

test("Test Multiple Mixed Scheme Auth", async () => {
  recordTest("auth-multiple-mixed-scheme-auth");

  const sdk = new SDK();

  const res: MultipleMixedSchemeAuthResponse =
    await sdk.authNew.multipleMixedSchemeAuth(
      {
        apiKeyAuthNew: "test_api_key",
        basicAuth: {
          username: "testUser",
          password: "testPass",
        },
      },
      {
        headerAuth: [
          {
            headerName: "x-api-key",
            expectedValue: "test_api_key",
          },
        ],
        basicAuth: {
          username: "testUser",
          password: "testPass",
        },
      },
    );

  expect(res.httpMeta.response.status).toBe(200);
});

test("Test Multiple Simple Options Auth - First Option", async () => {
  recordTest("auth-multiple-simple-options-auth-first-option");

  const sdk = new SDK();

  const res: MultipleSimpleOptionsAuthResponse =
    await sdk.authNew.multipleSimpleOptionsAuth(
      {
        headerAuth: [
          {
            headerName: "x-api-key",
            expectedValue: "test_api_key",
          },
        ],
      },
      {
        apiKeyAuthNew: "test_api_key",
      },
    );

  expect(res.httpMeta.response.status).toBe(200);
});

test("Test Multiple Simple Options Auth - Second Option", async () => {
  recordTest("auth-multiple-simple-options-auth-second-option");

  const sdk = new SDK();

  const res: MultipleSimpleOptionsAuthResponse =
    await sdk.authNew.multipleSimpleOptionsAuth(
      {
        headerAuth: [
          {
            headerName: "Authorization",
            expectedValue: "Bearer testToken",
          },
        ],
      },
      {
        oauth2: "Bearer testToken",
      },
    );

  expect(res.httpMeta.response.status).toBe(200);
});

test("Test Multiple Mixed Options Auth - First Option", async () => {
  recordTest("auth-multiple-mixed-options-auth-first-option");

  const sdk = new SDK();

  const res: MultipleMixedOptionsAuthResponse =
    await sdk.authNew.multipleMixedOptionsAuth(
      {
        headerAuth: [
          {
            headerName: "x-api-key",
            expectedValue: "test_api_key",
          },
        ],
      },
      {
        apiKeyAuthNew: "test_api_key",
      },
    );

  expect(res.httpMeta.response.status).toBe(200);
});

test("Test Multiple Mixed Options Auth - Second Option", async () => {
  recordTest("auth-multiple-mixed-options-auth-second-option");

  const sdk = new SDK();

  const res: MultipleMixedOptionsAuthResponse =
    await sdk.authNew.multipleMixedOptionsAuth(
      {
        basicAuth: {
          username: "testUser",
          password: "testPass",
        },
      },
      {
        basicAuth: {
          username: "testUser",
          password: "testPass",
        },
      },
    );

  expect(res.httpMeta.response.status).toBe(200);
});

test("Test Multiple Options with Simple Schemes Auth - First Option", async () => {
  recordTest("auth-multiple-options-with-simple-schemes-auth-first-option");

  const sdk = new SDK();

  const res: MultipleOptionsWithSimpleSchemesAuthResponse =
    await sdk.authNew.multipleOptionsWithSimpleSchemesAuth(
      {
        headerAuth: [
          {
            headerName: "x-api-key",
            expectedValue: "test_api_key",
          },
          {
            headerName: "Authorization",
            expectedValue: "Bearer testToken",
          },
        ],
      },
      {
        option1: {
          apiKeyAuthNew: "test_api_key",
          oauth2: "Bearer testToken",
        },
      },
    );

  expect(res.httpMeta.response.status).toBe(200);
});

test("Test Multiple Options with Simple Schemes Auth - Second Option", async () => {
  recordTest("auth-multiple-options-with-simple-schemes-auth-second-option");

  const sdk = new SDK();

  const res: MultipleOptionsWithSimpleSchemesAuthResponse =
    await sdk.authNew.multipleOptionsWithSimpleSchemesAuth(
      {
        headerAuth: [
          {
            headerName: "x-api-key",
            expectedValue: "test_api_key",
          },
          {
            headerName: "Authorization",
            expectedValue: "Bearer testToken",
          },
        ],
      },
      {
        option2: {
          apiKeyAuthNew: "test_api_key",
          openIdConnect: "Bearer testToken",
        },
      },
    );

  expect(res.httpMeta.response.status).toBe(200);
});

test("Test Multiple Options with Mixed Schemes Auth - First Option", async () => {
  recordTest("auth-multiple-options-with-mixed-schemes-auth-first-option");

  const sdk = new SDK();

  const res: MultipleOptionsWithMixedSchemesAuthResponse =
    await sdk.authNew.multipleOptionsWithMixedSchemesAuth(
      {
        headerAuth: [
          {
            headerName: "x-api-key",
            expectedValue: "test_api_key",
          },
          {
            headerName: "Authorization",
            expectedValue: "Bearer testToken",
          },
        ],
      },
      {
        option1: {
          apiKeyAuthNew: "test_api_key",
          oauth2: "Bearer testToken",
        },
      },
    );

  expect(res.httpMeta.response.status).toBe(200);
});

test("Test Multiple Options with Mixed Schemes Auth - Second Option", async () => {
  recordTest("auth-multiple-options-with-mixed-schemes-auth-second-option");

  const sdk = new SDK();

  const res: MultipleOptionsWithMixedSchemesAuthResponse =
    await sdk.authNew.multipleOptionsWithMixedSchemesAuth(
      {
        headerAuth: [
          {
            headerName: "x-api-key",
            expectedValue: "test_api_key",
          },
        ],
        basicAuth: {
          username: "testUser",
          password: "testPass",
        },
      },
      {
        option2: {
          apiKeyAuthNew: "test_api_key",
          basicAuth: {
            username: "testUser",
            password: "testPass",
          },
        },
      },
    );

  expect(res.httpMeta.response.status).toBe(200);
});

test("function callbacks for oAuth support are invoked for global security", async () => {
  recordTest("auth-function-callbacks-oauth-global-security");

  const sdk = new SDK({
    security: async (): Promise<Security> => ({
      oauth2: "Bearer global",
    }),
  });

  const res = await sdk.auth.globalBearerAuth();

  expect(res.token?.token).toBe("global");
});
