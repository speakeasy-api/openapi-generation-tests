/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";

import { SDK } from "../index.js";
import { HTTPClient } from "../lib/http.js";
import { CustomClientPostResponse } from "../sdk/models/operations/customclientpost.js";

import { recordTest } from "./common_helpers.js";
import { createSimpleObject } from "./primary_helpers.js";

test("CustomClient", async () => {
  recordTest("customclient-request-parameters-retained");

  const httpClient = new HTTPClient({
    fetcher: (request) => {
      return fetch(request);
    },
  });

  httpClient.addHook("beforeRequest", (request) => {
    request.headers.set("X-Custom-Header", "someValue");

    return request;
  });

  const sdk = new SDK({ httpClient: httpClient });

  const res: CustomClientPostResponse = await sdk.customClient.customClientPost(
    "headerValue",
    "pathValue",
    "queryValue",
    createSimpleObject(),
  );
  expect(res.httpMeta.response.status).toBe(200);

  expect(res.res?.url).toBe(
    "http://localhost:35123/anything/customClient/pathValue?queryStringParam=queryValue",
  );
  expect(res.res?.args?.queryStringParam).toBe("queryValue");
  expect(res.res?.headers["Headerparam"]).toBe("headerValue");
  expect(res.res?.headers["X-Custom-Header"]).toBe("someValue");
});
