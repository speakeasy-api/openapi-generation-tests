/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  ErrorT,
  SDKError,
  StatusGetXSpeakeasyErrorsResponseBody,
} from "../sdk/models/errors";
import { expect, test } from "vitest";

import { SDK } from "..";
import { recordTest } from "./common_helpers";

test("Test Status Get Error Default Error Codes", async () => {
  recordTest("errors-status-get-error-default-error-codes");

  const sdk = new SDK();

  await sdk.errors.statusGetError(400).then(
    () => {
      expect.unreachable("sdk call is expected to fail");
    },
    (err) => {
      expect(err).toBeInstanceOf(SDKError);
      expect(`${err}`).toBe(
        "SDKError: API error occurred: Status 400 Content-Type text/html; charset=utf-8",
      );
    },
  );

  await sdk.errors.statusGetError(500).then(
    () => {
      expect.unreachable("sdk call is expected to fail");
    },
    (err) => {
      expect(err).toBeInstanceOf(SDKError);
      expect(`${err}`).toBe(
        "SDKError: API error occurred: Status 500 Content-Type text/html; charset=utf-8",
      );
    },
  );
});

test("Test Status Get Error 300 Non Error", async () => {
  recordTest("errors-status-get-error300-non-error");

  const sdk = new SDK();

  const res = await sdk.errors.statusGetError(300);
  expect(res.httpMeta.response.status).toBe(300);
});

test("Test Status Get Error X-Speakeasy-Errors", async () => {
  recordTest("errors-status-get-error-x-speakeasy-errors");

  const sdk = new SDK();

  await sdk.errors.statusGetXSpeakeasyErrors(400).then(
    () => {
      expect.unreachable("sdk call is expected to fail");
    },
    (err) => {
      expect(err).toBeInstanceOf(SDKError);
      expect(err).toHaveProperty(["httpMeta", "response", "status"], 400);
      expect(`${err}`).toBe(
        "SDKError: API error occurred: Status 400 Content-Type application/json",
      );
    },
  );

  await sdk.errors.statusGetXSpeakeasyErrors(401).then(
    () => {
      expect.unreachable("sdk call is expected to fail");
    },
    (err) => {
      expect(err).toBeInstanceOf(SDKError);
      expect(err).toHaveProperty(["httpMeta", "response", "status"], 401);
      expect(`${err}`).toBe(
        "SDKError: API error occurred: Status 401 Content-Type application/json",
      );
    },
  );

  await sdk.errors.statusGetXSpeakeasyErrors(402).then(
    () => {
      expect.unreachable("sdk call is expected to fail");
    },
    (err) => {
      expect(err).toBeInstanceOf(SDKError);
      expect(err).toHaveProperty(["httpMeta", "response", "status"], 402);
      expect(`${err}`).toBe(
        "SDKError: API error occurred: Status 402 Content-Type application/json",
      );
    },
  );

  await sdk.errors.statusGetXSpeakeasyErrors(500).then(
    () => {
      expect.unreachable("sdk call is expected to fail");
    },
    (err) => {
      expect(err).toBeInstanceOf(ErrorT);
      expect(`${err}`).toBe("ErrorT: an error occurred");
      expect(err).toHaveProperty("code", "500");
    },
  );

  await sdk.errors.statusGetXSpeakeasyErrors(501).then(
    () => {
      expect.unreachable("sdk call is expected to fail");
    },
    (err) => {
      expect(err).toBeInstanceOf(StatusGetXSpeakeasyErrorsResponseBody);
      expect(`${err}`).toBe(
        "StatusGetXSpeakeasyErrorsResponseBody: an error occurred",
      );
      expect(err).toHaveProperty("code", "501");
    },
  );
});

test("Test Errors Connection Error", async () => {
  recordTest("errors-connection-error");

  const sdk = new SDK();

  await expect(sdk.errors.connectionErrorGet()).rejects.toThrow("fetch failed");
});
