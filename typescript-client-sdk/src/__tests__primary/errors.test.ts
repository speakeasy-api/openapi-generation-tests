/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import { test, expect } from "vitest";

import { SDK } from "../index.js";
import { ErrorT } from "../sdk/models/errors/error.js";
import { SDKError } from "../sdk/models/errors/sdkerror.js";
import { StatusGetXSpeakeasyErrorsResponseBody } from "../sdk/models/errors/statusgetxspeakeasyerrors.js";
// import { ErrorUnionPostRequestBody } from "../sdk/models/operations/errorunionpost.js";
// import { ErrorUnionDiscriminatedPostRequestBody } from "../sdk/models/operations/erroruniondiscriminatedpost.js";
// import { ErrorType1 } from "../sdk/models/errors/errortype1.js";
// import { ErrorType2 } from "../sdk/models/errors/errortype2.js";
// import { TaggedError1 } from "../sdk/models/errors/taggederror1.js";
// import { TaggedError2 } from "../sdk/models/errors/taggederror2.js";

import { recordTest } from "./common_helpers.js";

test("Test Status Get Error Default Error Codes", async () => {
  recordTest("errors-status-get-error-default-error-codes");

  const sdk = new SDK();

  await sdk.errors.statusGetError(400).then(
    () => {
      expect.unreachable("sdk call is expected to fail");
    },
    (err) => {
      expect(err).toBeInstanceOf(SDKError);
      expect(`${err}`).toBe(
        "SDKError: API error occurred: Status 400 Content-Type text/html; charset=utf-8",
      );
    },
  );

  await sdk.errors.statusGetError(500).then(
    () => {
      expect.unreachable("sdk call is expected to fail");
    },
    (err) => {
      expect(err).toBeInstanceOf(SDKError);
      expect(`${err}`).toBe(
        "SDKError: API error occurred: Status 500 Content-Type text/html; charset=utf-8",
      );
    },
  );
});

test("Test Status Get Error 300 Non Error", async () => {
  recordTest("errors-status-get-error300-non-error");

  const sdk = new SDK();

  const res = await sdk.errors.statusGetError(300);
  expect(res.httpMeta.response.status).toBe(300);
});

test("Test Status Get Error X-Speakeasy-Errors", async () => {
  recordTest("errors-status-get-error-x-speakeasy-errors");

  const sdk = new SDK();

  await sdk.errors.statusGetXSpeakeasyErrors(400).then(
    () => {
      expect.unreachable("sdk call is expected to fail");
    },
    (err) => {
      expect(err).toBeInstanceOf(SDKError);
      expect(err).toHaveProperty(["httpMeta", "response", "status"], 400);
      expect(`${err}`).toBe(
        "SDKError: API error occurred: Status 400 Content-Type application/json",
      );
    },
  );

  await sdk.errors.statusGetXSpeakeasyErrors(401).then(
    () => {
      expect.unreachable("sdk call is expected to fail");
    },
    (err) => {
      expect(err).toBeInstanceOf(SDKError);
      expect(err).toHaveProperty(["httpMeta", "response", "status"], 401);
      expect(`${err}`).toBe(
        "SDKError: API error occurred: Status 401 Content-Type application/json",
      );
    },
  );

  await sdk.errors.statusGetXSpeakeasyErrors(402).then(
    () => {
      expect.unreachable("sdk call is expected to fail");
    },
    (err) => {
      expect(err).toBeInstanceOf(SDKError);
      expect(err).toHaveProperty(["httpMeta", "response", "status"], 402);
      expect(`${err}`).toBe(
        "SDKError: API error occurred: Status 402 Content-Type application/json",
      );
    },
  );

  await sdk.errors.statusGetXSpeakeasyErrors(500).then(
    () => {
      expect.unreachable("sdk call is expected to fail");
    },
    (err) => {
      expect(err).toBeInstanceOf(ErrorT);
      expect(`${err}`).toBe("ErrorT: an error occurred");
      expect(err).toHaveProperty("code", "500");
    },
  );

  await sdk.errors.statusGetXSpeakeasyErrors(501).then(
    () => {
      expect.unreachable("sdk call is expected to fail");
    },
    (err) => {
      expect(err).toBeInstanceOf(StatusGetXSpeakeasyErrorsResponseBody);
      expect(`${err}`).toBe(
        "StatusGetXSpeakeasyErrorsResponseBody: an error occurred",
      );
      expect(err).toHaveProperty("code", "501");
    },
  );
});

test("Test Errors Connection Error", async () => {
  recordTest("errors-connection-error");

  const sdk = new SDK();

  await expect(
    sdk.errors.connectionErrorGet({ timeoutMs: 1000 }),
  ).rejects.toThrow(/(fetch failed|operation was aborted due to timeout)/);
});

// test("Test Union Of Errors", async () => {
//   recordTest("errors-union-of-errors");

//   const sdk = new SDK();

//   const req1: ErrorUnionPostRequestBody = { error: "Error1" };
//   await sdk.errors.errorUnionPost(req1).then(
//     () => {
//       expect.unreachable("sdk call is expected to fail");
//     },
//     (err) => {
//       expect(err).toBeInstanceOf(ErrorType1);
//       expect(err).toHaveProperty(["httpMeta", "response", "status"], 500);
//       expect(err).toHaveProperty(["error"], "Error1");
//     },
//   );

//   const req2: ErrorUnionPostRequestBody = {
//     errorType2Message: { message: "Error2" },
//   };
//   await sdk.errors.errorUnionPost(req2).then(
//     () => {
//       expect.unreachable("sdk call is expected to fail");
//     },
//     (err) => {
//       expect(err).toBeInstanceOf(ErrorType2);
//       expect(err).toHaveProperty(["httpMeta", "response", "status"], 500);
//       expect(err).toHaveProperty(["error", "message"], "Error2");
//     },
//   );
// });

// test("Test Discriminated Union Of Errors", async () => {
//   recordTest("errors-union-of-errors-discriminated");

//   const sdk = new SDK();

//   const req1: ErrorUnionDiscriminatedPostRequestBody = {
//     tag: "tag1",
//     error: "Error1",
//   };
//   await sdk.errors.errorUnionDiscriminatedPost(req1).then(
//     () => {
//       expect.unreachable("sdk call is expected to fail");
//     },
//     (err) => {
//       expect(err).toBeInstanceOf(TaggedError1);
//       expect(err).toHaveProperty(["httpMeta", "response", "status"], 400);
//       expect(err).toHaveProperty(["tag"], "tag1");
//       expect(err).toHaveProperty(["error"], "Error1");
//     },
//   );

//   const req2: ErrorUnionDiscriminatedPostRequestBody = {
//     tag: "tag2",
//     taggedError2Message: { message: "Error2" },
//   };
//   await sdk.errors.errorUnionDiscriminatedPost(req2).then(
//     () => {
//       expect.unreachable("sdk call is expected to fail");
//     },
//     (err) => {
//       expect(err).toBeInstanceOf(TaggedError2);
//       expect(err).toHaveProperty(["httpMeta", "response", "status"], 400);
//       expect(err).toHaveProperty(["tag"], "tag2");
//       expect(err).toHaveProperty(["error", "message"], "Error2");
//     },
//   );
// });
