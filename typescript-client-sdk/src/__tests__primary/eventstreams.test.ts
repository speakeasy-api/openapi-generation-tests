/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";

import { SDK } from "../index.js";
import { ChatCompletionStream } from "../sdk/models/shared/chatcompletionstream.js";
import { ChatCompletionEvent } from "../sdk/models/shared/chatcompletionevent.js";
import { DifferentDataSchemas } from "../sdk/models/shared/differentdataschemas.js";
import { JsonEvent } from "../sdk/models/shared/jsonevent.js";
import { RichStream } from "../sdk/models/shared/richstream.js";
import { TextEvent } from "../sdk/models/shared/textevent.js";
import { TeapotJSONError } from "../sdk/models/errors/teapotjsonerror.js";

import { recordTest } from "./common_helpers.js";

test("event stream json data", async () => {
  recordTest("event-stream-json-data");

  const s = new SDK();
  const result = await s.eventstreams.json();
  if (result.jsonEvent == null) {
    expect.fail("Expected jsonEvent to be defined");
  }

  const events: JsonEvent[] = [];
  for await (const event of result.jsonEvent) {
    events.push(event);
  }

  expect(events.length).toBe(4);

  const message = events.map((e) => e.data.content).join("");
  expect(message).toBe("Hello world!");
});

test("event stream text data", async () => {
  recordTest("event-stream-text-data");

  const s = new SDK();
  const result = await s.eventstreams.text();
  if (result.textEvent == null) {
    expect.fail("Expected jsonEvent to be defined");
  }

  const events: TextEvent[] = [];
  for await (const event of result.textEvent) {
    events.push(event);
  }

  expect(events.length).toBe(4);

  const message = events.map((e) => e.data).join("");
  expect(message).toBe("Hello world!");
});

test("event stream multiline data", async () => {
  recordTest("event-stream-multiline-data");

  const s = new SDK();
  const result = await s.eventstreams.multiline();
  if (result.textEvent == null) {
    expect.fail("Expected jsonEvent to be defined");
  }

  const events: TextEvent[] = [];
  for await (const event of result.textEvent) {
    events.push(event);
  }

  expect(events.length).toBe(1);

  const message = events[0]?.data;
  expect(message).toBe("YHOO\n+2\n10");
});

test("event stream rich events", async () => {
  recordTest("event-stream-rich-events");

  const s = new SDK();
  const result = await s.eventstreams.rich();
  if (result.richStream == null) {
    expect.fail("Expected jsonEvent to be defined");
  }

  const events: RichStream[] = [];
  for await (const event of result.richStream) {
    events.push(event);
  }

  expect(events).toEqual([
    {
      data: { completion: "Hello", model: "jeeves-1", stopReason: null },
      event: "completion",
      id: "job-1",
    },
    { data: "ping", event: "heartbeat", retry: 3000 },
    {
      data: {
        completion: "world!",
        model: "jeeves-1",
        stopReason: "stop_sequence",
      },
      event: "completion",
      id: "job-1",
    },
  ]);
});

test("event stream chat with sentinel events", async () => {
  recordTest("event-stream-chat-sentinel-event");

  const s = new SDK();
  const result = await s.eventstreams.chat({ prompt: "Print test content" });
  if (result.chatCompletionStream == null) {
    expect.fail("Expected jsonEvent to be defined");
  }

  const events: ChatCompletionStream[] = [];
  for await (const event of result.chatCompletionStream) {
    events.push(event);
  }

  expect(events).toEqual([
    { data: { content: "Hello" } },
    { data: { content: " " } },
    { data: { content: "world" } },
    { data: { content: "!" } },
    { data: "[DONE]" },
  ]);
});

test("event stream chat skip sentinel events", async () => {
  recordTest("event-stream-chat-skip-sentinel");

  const s = new SDK();
  const result = await s.eventstreams.chatSkipSentinel({
    prompt: "Print test content",
  });
  if (result.chatCompletionEvent == null) {
    expect.fail("Expected jsonEvent to be defined");
  }

  const events: ChatCompletionEvent[] = [];
  for await (const event of result.chatCompletionEvent) {
    events.push(event);
  }

  expect(events).toEqual([
    { data: { content: "Hello" } },
    { data: { content: " " } },
    { data: { content: "world" } },
    { data: { content: "!" } },
  ]);
});

test("event stream with different data schemas", async () => {
  recordTest("event-stream-different-data-schemas");

  const s = new SDK();
  const result = await s.eventstreams.differentDataSchemas();
  if (result.differentDataSchemas == null) {
    expect.fail("Expected differentDataSchemas to be defined");
  }

  const events: DifferentDataSchemas[] = [];
  for await (const event of result.differentDataSchemas) {
    events.push(event);
  }

  expect(events).toEqual([
    { id: "event-1", event: "message", data: { content: "Here is your url" } },
    { id: "event-2", event: "url", data: { url: "https://example.com" } },
    { id: "event-3", event: "message", data: { content: "Have a great day!" } },
  ]);
});

test("event stream error response", async () => {
  recordTest("event-stream-error-response");

  const s = new SDK();

  const promise = s.eventstreams.text({
    fetchOptions: {
      headers: {
        "x-teapot": "json",
      },
    },
  });

  await expect(promise).rejects.toThrowError(
    new TeapotJSONError({ message: "I'm a teapot" }),
  );
});
