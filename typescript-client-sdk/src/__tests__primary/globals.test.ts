/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  GlobalPathParameterGetResponse,
  GlobalsHeaderGetResponse,
  GlobalsHiddenPostResponse,
  GlobalsQueryParameterGetResponse,
} from "../sdk/models/operations";
import { expect, test } from "vitest";

import { HTTPClient } from "../lib/http";
import { SDK } from "..";
import { recordTest } from "./common_helpers";

test("Test Globals Query Parameter Get Uses Global", async () => {
  recordTest("globals-query-parameter-get-uses-global");

  const sdk = new SDK({
    globalQueryParam: "test",
  });

  const res: GlobalsQueryParameterGetResponse =
    await sdk.globals.globalsQueryParameterGet();

  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res?.args.globalQueryParam).toBe("test");
});

test("Test Globals Query Parameter Get Uses Local", async () => {
  recordTest("globals-query-parameter-get-uses-local");

  const sdk = new SDK({
    globalQueryParam: "test",
  });

  const res: GlobalsQueryParameterGetResponse =
    await sdk.globals.globalsQueryParameterGet("local");

  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res?.args.globalQueryParam).toBe("local");
});

test("Test Globals Path Parameter Get Uses Global", async () => {
  recordTest("globals-path-parameter-get-uses-global");

  const sdk = new SDK({
    globalPathParam: 1,
  });

  const res: GlobalPathParameterGetResponse =
    await sdk.globals.globalPathParameterGet();

  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res?.url).toBe(
    "http://localhost:35123/anything/globals/pathParameter/1",
  );
});

test("Test Globals Path Parameter Get Uses Local", async () => {
  recordTest("globals-path-parameter-get-uses-local");

  const sdk = new SDK({
    globalPathParam: 1,
  });

  const res: GlobalPathParameterGetResponse =
    await sdk.globals.globalPathParameterGet(2);

  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res?.url).toBe(
    "http://localhost:35123/anything/globals/pathParameter/2",
  );
});

test("Test Globals Header Get Uses Global", async () => {
  recordTest("globals-header-get-uses-global");

  const sdk = new SDK({
    globalHeaderParam: true,
  });

  const res: GlobalsHeaderGetResponse = await sdk.globals.globalsHeaderGet();

  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res?.headers?.["Globalheaderparam"]).toBe("true");
});

test("Test Globals Header Get Uses Local", async () => {
  recordTest("globals-header-get-uses-local");

  const sdk = new SDK({
    globalHeaderParam: true,
  });

  const res: GlobalsHeaderGetResponse =
    await sdk.globals.globalsHeaderGet(false);

  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res?.headers?.["Globalheaderparam"]).toBe("false");
});

test("Test Global Header Keeps Custom Client Headers", async () => {
  recordTest("globals-header-keeps-custom-client-headers");

  const httpClient = new HTTPClient({
    fetcher: (request) => {
      return fetch(request);
    },
  });

  httpClient.addHook("beforeRequest", (request) => {
    request.headers.set("x-custom-header", "customValue");

    return request;
  });

  const sdk = new SDK({
    globalHeaderParam: true,
    httpClient: httpClient,
  });

  const res: GlobalsHeaderGetResponse = await sdk.globals.globalsHeaderGet();

  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res?.headers?.["Globalheaderparam"]).toBe("true");
  expect(res.res?.headers?.["X-Custom-Header"]).toBe("customValue");
});

test("Test Globals Hidden Post", async () => {
  recordTest("globals-hidden-post");

  const sdk = new SDK({
    globalHiddenQueryParam: "hello",
    globalHiddenHeaderParam: "world",
    globalHiddenPathParam: "test",
  });

  const res: GlobalsHiddenPostResponse = await sdk.globals.globalsHiddenPost({
    test: "friend",
    other: 37,
  });

  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res?.args.globalHiddenQueryParam).toBe("hello");
  expect(res.res?.json?.test).toBe("friend");
  expect(res.res?.json?.other).toBe(37);
  expect(res.res?.headers?.["Globalhiddenheaderparam"]).toBe("world");
  expect(res.res?.url).toBe(
    "http://localhost:35123/anything/globals/hidden/test?globalHiddenQueryParam=hello",
  );
});
