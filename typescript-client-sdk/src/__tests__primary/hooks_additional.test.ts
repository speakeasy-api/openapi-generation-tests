/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";

import { SDK } from "../index.js";
import { TestHooksRes } from "../sdk/models/operations/testhooks.js";

import { recordTest } from "./common_helpers.js";
import { UnexpectedClientError } from "../sdk/models/errors/httpclienterrors.js";

test("Test hooks", async () => {
  recordTest("test-hooks");

  const s = new SDK({
    security: {
      apiKeyAuth: "Token YOUR_API_KEY",
    },
  });

  const response = await s.hooks.testHooks("someInitialValue");
  expect(response).toBeDefined();
  expect(response.httpMeta.response.status).toBe(200);
  expect(response.res).toEqual({
    args: {
      someParam: "overriddenParam",
    },
    headers: {
      clientLevelHeader: "added by client",
      idempotencyKey: "some-key",
    },
    url: "http://localhost:35123/anything/hooks?someParam=overriddenParam",
  } as TestHooksRes);
});

test("Test hooks before create request", async () => {
  recordTest("test-hooks-before-create-request");

  const s = new SDK({
    security: {
      apiKeyAuth: "Token YOUR_API_KEY",
    },
  });

  const response = await s.hooks.testHooksBeforeCreateRequestPaths("foo/bar");
  expect(response).toBeDefined();
  expect(response.httpMeta.response.status).toBe(200);
  expect(response.res).toEqual({
    url: "http://localhost:35123/anything/hooks/beforeCreateRequestPaths/foo/bar",
    headers: {
      oldPathname: "/anything/hooks/beforeCreateRequestPaths/foo%2Fbar",
    },
  });
});

test("Test hooks after response", async () => {
  recordTest("test-hooks-after-response");

  const s = new SDK({
    security: {
      apiKeyAuth: "Token YOUR_API_KEY",
    },
  });

  try {
    await s.hooks.testHooksAfterResponse();
    expect.unreachable("sdk call is expected to fail");
  } catch (err: unknown) {
    expect(err).toBeInstanceOf(UnexpectedClientError);
    expect(err).toHaveProperty(["cause", "message"], "validation failed");
  }
});

test("Test hooks error", async () => {
  recordTest("test-hooks-error");

  const s = new SDK({
    security: {
      apiKeyAuth: "Token YOUR_API_KEY",
    },
  });

  try {
    await s.hooks.testHooksError();
    expect.unreachable("sdk call is expected to fail");
  } catch (err: unknown) {
    expect(err).toBeInstanceOf(UnexpectedClientError);
    expect(err).toHaveProperty(["cause", "message"], "special test error case");
  }
});

test("Test hooks authorization header modification", async () => {
  recordTest("hooks-authorization-header-modification");

  const s = new SDK({
    security: {
      apiKeyAuth: "Bearer testToken",
    },
  });

  const res = await s.hooks.authorizationHeaderModification();
  expect(res).toBeDefined();
  expect(res.httpMeta.response.status).toBe(200);
  expect(res.token?.authenticated).toBe(true);
  expect(res.token?.token).toBe("testToken modified");
});
