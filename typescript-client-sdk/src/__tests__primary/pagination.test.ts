/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { recordTest } from "./common_helpers";
import { expect, test } from "vitest";

import { SDK } from "..";

test("Test Pagination LimitOffset Page Params", async () => {
  recordTest("pagination-limitOffset-page-params");

  const sdk = new SDK({});
  const serverLimit = 20;

  const res = await sdk.pagination.paginationLimitOffsetPageParams(1);
  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res!.resultArray.length).toBe(serverLimit);

  const nextRes = await res.next();
  expect(nextRes).not.toBeNull();
  expect(nextRes!.httpMeta.response.status).toBe(200);
  expect(nextRes!.res).toBeDefined();
  expect(nextRes!.res!.resultArray.length).toBe(0);

  const nullRes = await nextRes!.next();
  expect(nullRes).toBeNull();
});

test("Test Pagination LimitOffset Page Body", async () => {
  recordTest("pagination-limitOffset-page-body");

  const sdk = new SDK({});
  const limit = 15;

  const res = await sdk.pagination.paginationLimitOffsetPageBody({
    limit,
    page: 1,
  });
  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res!.resultArray.length).toBe(limit);

  const nextRes = await res.next();
  expect(nextRes).not.toBeNull();
  expect(nextRes!.httpMeta.response.status).toBe(200);
  expect(nextRes!.res).toBeDefined();
  expect(nextRes!.res!.resultArray.length).toBe(20 - limit);

  const nullRes = await nextRes!.next();
  expect(nullRes).toBeNull();
});

test("Test Pagination LimitOffset Offset Params", async () => {
  recordTest("pagination-limitOffset-offset-params");

  const sdk = new SDK({});
  const limit = 15;

  const res = await sdk.pagination.paginationLimitOffsetOffsetParams(limit, 0);
  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res!.resultArray.length).toBe(limit);

  const nextRes = await res.next();
  expect(nextRes).not.toBeNull();
  expect(nextRes!.httpMeta.response.status).toBe(200);
  expect(nextRes!.res).toBeDefined();
  expect(nextRes!.res!.resultArray.length).toBe(20 - limit);

  const nullRes = await nextRes!.next();
  expect(nullRes).toBeNull();
});

test("Test Pagination LimitOffset Offset Body", async () => {
  recordTest("pagination-limitOffset-offset-body");

  const sdk = new SDK({});
  const limit = 15;

  const res = await sdk.pagination.paginationLimitOffsetOffsetBody({
    limit,
    offset: 0,
  });
  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res!.resultArray.length).toBe(limit);

  const nextRes = await res.next();
  expect(nextRes).not.toBeNull();
  expect(nextRes!.httpMeta.response.status).toBe(200);
  expect(nextRes!.res).toBeDefined();
  expect(nextRes!.res!.resultArray.length).toBe(20 - limit);

  const nullRes = await nextRes!.next();
  expect(nullRes).toBeNull();
});

test("Test Pagination Cursor Params", async () => {
  recordTest("pagination-cursor-params");

  const sdk = new SDK({});
  const limit = 15;

  const res = await sdk.pagination.paginationCursorParams(-1);

  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res!.resultArray.length).toBe(limit);

  const nextRes = await res.next();
  expect(nextRes).not.toBeNull();
  expect(nextRes!.httpMeta.response.status).toBe(200);
  expect(nextRes!.res).toBeDefined();
  expect(nextRes!.res!.resultArray.length).toBeLessThan(limit);

  const penultimateRes = await nextRes!.next();
  expect(penultimateRes).not.toBeNull();
  expect(penultimateRes!.httpMeta.response.status).toBe(200);
  expect(penultimateRes!.res).toBeDefined();
  expect(penultimateRes!.res!.resultArray.length).toBe(0);

  const nullRes = await penultimateRes!.next();
  expect(nullRes).toBeNull();
});

test("Test Pagination URL", async () => {
  recordTest("pagination-url");

  const sdk = new SDK({});

  const res = await sdk.pagination.paginationURLParams(3);

  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();

  const nextRes = await res.next();
  expect(nextRes).not.toBeNull();
  expect(nextRes!.httpMeta.response.status).toBe(200);
  expect(nextRes!.res).toBeDefined();

  const penultimateRes = await nextRes!.next();
  expect(penultimateRes).not.toBeNull();
  expect(penultimateRes!.httpMeta.response.status).toBe(200);
  expect(penultimateRes!.res).toBeDefined();
  expect(penultimateRes!.res!.resultArray.length).toBe(0);

  const nullRes = await penultimateRes!.next();
  expect(nullRes).toBeNull();

  const res2 = await sdk.pagination.paginationURLParams(3, "true");
  expect(res2.httpMeta.response.status).toBe(200);
  expect(res2.res).toBeDefined();

  const nextRes2 = await res2.next();
  expect(nextRes2).not.toBeNull();
  expect(nextRes2!.httpMeta.response.status).toBe(200);
  expect(nextRes2!.res).toBeDefined();

  const penultimateRes2 = await nextRes2!.next();
  expect(penultimateRes2).not.toBeNull();
  expect(penultimateRes2!.httpMeta.response.status).toBe(200);
  expect(penultimateRes2!.res).toBeDefined();
  expect(penultimateRes2!.res!.resultArray.length).toBe(0);

  const nullRe2 = await penultimateRes2!.next();
  expect(nullRe2).toBeNull();
});

test("Test Pagination Cursor Body", async () => {
  recordTest("pagination-cursor-body");

  const sdk = new SDK({});
  const limit = 15;

  const res = await sdk.pagination.paginationCursorBody({
    cursor: -1,
  });
  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res!.resultArray.length).toBe(limit);

  const nextRes = await res.next();
  expect(nextRes).not.toBeNull();
  expect(nextRes!.httpMeta.response.status).toBe(200);
  expect(nextRes!.res).toBeDefined();
  expect(nextRes!.res!.resultArray.length).toBeLessThan(limit);

  const penultimateRes = await nextRes!.next();
  expect(penultimateRes).not.toBeNull();
  expect(penultimateRes!.httpMeta.response.status).toBe(200);
  expect(penultimateRes!.res).toBeDefined();
  expect(penultimateRes!.res!.resultArray.length).toBe(0);

  const nullRes = await penultimateRes!.next();
  expect(nullRes).toBeNull();
});

test("supports async iterators", async () => {
  const sdk = new SDK();
  const serverLimit = 20;

  const iterator = await sdk.pagination.paginationLimitOffsetOffsetParams(3);
  expect(iterator.httpMeta.response.status).toBe(200);

  const collect: number[] = [];

  for await (const page of iterator) {
    if (!page.res) {
      expect.unreachable("expected to receive a page containing results");
    }
    collect.push(...page.res.resultArray);
  }

  expect(collect.length).toBe(serverLimit);
  expect(collect).toEqual(Array.from({ length: serverLimit }, (_, i) => i));
});
