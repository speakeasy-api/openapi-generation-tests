/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test, vi } from "vitest";

import { SDK } from "../index.js";
import { recordTest } from "./common_helpers.js";
import { HTTPClient } from "../lib/http.js";

test("Test Pagination LimitOffset Page Params", async () => {
  recordTest("pagination-limit-offset-page-params");

  const sdk = new SDK({ debugLogger: console });
  const serverLimit = 20;

  const res = await sdk.pagination.paginationLimitOffsetPageParams(1);
  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res!.resultArray.length).toBe(serverLimit);

  const nextRes = await res.next();
  expect(nextRes).not.toBeNull();
  expect(nextRes!.httpMeta.response.status).toBe(200);
  expect(nextRes!.res).toBeDefined();
  expect(nextRes!.res!.resultArray.length).toBe(0);

  const nullRes = await nextRes!.next();
  expect(nullRes).toBeNull();
});

test("Test Pagination LimitOffset Page Body", async () => {
  recordTest("pagination-limit-offset-page-body");

  const sdk = new SDK({});
  const limit = 15;

  const res = await sdk.pagination.paginationLimitOffsetPageBody({
    limit,
    page: 1,
  });
  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res!.resultArray.length).toBe(limit);

  const nextRes = await res.next();
  expect(nextRes).not.toBeNull();
  expect(nextRes!.httpMeta.response.status).toBe(200);
  expect(nextRes!.res).toBeDefined();
  expect(nextRes!.res!.resultArray.length).toBe(20 - limit);

  const nullRes = await nextRes!.next();
  expect(nullRes).toBeNull();
});

test("Test Pagination LimitOffset Deep Outputs Page Body", async () => {
  recordTest("pagination-limit-offset-deep-outputs-page-body");

  const sdk = new SDK({});
  const limit = 15;

  const res = await sdk.pagination.paginationLimitOffsetDeepOutputsPageBody({
    limit,
    page: 1,
  });
  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res!.resultArray.length).toBe(limit);

  const nextRes = await res.next();
  expect(nextRes).not.toBeNull();
  expect(nextRes!.httpMeta.response.status).toBe(200);
  expect(nextRes!.res).toBeDefined();
  expect(nextRes!.res!.resultArray.length).toBe(20 - limit);

  const nullRes = await nextRes!.next();
  expect(nullRes).toBeNull();
});

test("Test Pagination LimitOffset Offset Params", async () => {
  recordTest("pagination-limit-offset-offset-params");

  const sdk = new SDK({});
  const limit = 15;

  const res = await sdk.pagination.paginationLimitOffsetOffsetParams(limit, 0);
  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res!.resultArray.length).toBe(limit);

  const nextRes = await res.next();
  expect(nextRes).not.toBeNull();
  expect(nextRes!.httpMeta.response.status).toBe(200);
  expect(nextRes!.res).toBeDefined();
  expect(nextRes!.res!.resultArray.length).toBe(20 - limit);

  const nullRes = await nextRes!.next();
  expect(nullRes).toBeNull();
});

test("Test Pagination LimitOffset Offset Body", async () => {
  recordTest("pagination-limit-offset-offset-body");

  const sdk = new SDK({});
  const limit = 15;

  const res = await sdk.pagination.paginationLimitOffsetOffsetBody({
    limit,
    offset: 0,
  });
  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res!.resultArray.length).toBe(limit);

  const nextRes = await res.next();
  expect(nextRes).not.toBeNull();
  expect(nextRes!.httpMeta.response.status).toBe(200);
  expect(nextRes!.res).toBeDefined();
  expect(nextRes!.res!.resultArray.length).toBe(20 - limit);

  const nullRes = await nextRes!.next();
  expect(nullRes).toBeNull();
});

test("Test Pagination Cursor Params", async () => {
  recordTest("pagination-cursor-params");

  const sdk = new SDK({});
  const limit = 15;

  const res = await sdk.pagination.paginationCursorParams(-1);

  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res!.resultArray.length).toBe(limit);

  const nextRes = await res.next();
  expect(nextRes).not.toBeNull();
  expect(nextRes!.httpMeta.response.status).toBe(200);
  expect(nextRes!.res).toBeDefined();
  expect(nextRes!.res!.resultArray.length).toBeLessThan(limit);

  const penultimateRes = await nextRes!.next();
  expect(penultimateRes).not.toBeNull();
  expect(penultimateRes!.httpMeta.response.status).toBe(200);
  expect(penultimateRes!.res).toBeDefined();
  expect(penultimateRes!.res!.resultArray.length).toBe(0);

  const nullRes = await penultimateRes!.next();
  expect(nullRes).toBeNull();
});

test("Test Pagination URL", async () => {
  recordTest("pagination-url");

  const sdk = new SDK({});

  const res = await sdk.pagination.paginationURLParams(3);

  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res!.res!.resultArray.length).toBe(9);

  const nextRes = await res.next();
  expect(nextRes).not.toBeNull();
  expect(nextRes!.httpMeta.response.status).toBe(200);
  expect(nextRes!.res).toBeDefined();
  expect(nextRes!.res!.resultArray.length).toBe(6);

  const penultimateRes = await nextRes!.next();
  expect(penultimateRes).not.toBeNull();
  expect(penultimateRes!.httpMeta.response.status).toBe(200);
  expect(penultimateRes!.res).toBeDefined();
  expect(penultimateRes!.res!.resultArray.length).toBe(3);

  const nullRes = await penultimateRes!.next();
  expect(nullRes).toBeNull();

  const res2 = await sdk.pagination.paginationURLParams(3, "true");
  expect(res2.httpMeta.response.status).toBe(200);
  expect(res2.res).toBeDefined();
  expect(res2!.res!.resultArray.length).toBe(9);

  const nextRes2 = await res2.next();
  expect(nextRes2).not.toBeNull();
  expect(nextRes2!.httpMeta.response.status).toBe(200);
  expect(nextRes2!.res).toBeDefined();
  expect(nextRes2!.res!.resultArray.length).toBe(6);

  const penultimateRes2 = await nextRes2!.next();
  expect(penultimateRes2).not.toBeNull();
  expect(penultimateRes2!.httpMeta.response.status).toBe(200);
  expect(penultimateRes2!.res).toBeDefined();
  expect(penultimateRes2!.res!.resultArray.length).toBe(3);

  const nullRe2 = await penultimateRes2!.next();
  expect(nullRe2).toBeNull();
});

test("Test Pagination Cursor Body", async () => {
  recordTest("pagination-cursor-body");

  const sdk = new SDK({});
  const limit = 15;

  const res = await sdk.pagination.paginationCursorBody({
    cursor: -1,
  });
  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res!.resultArray.length).toBe(limit);

  const nextRes = await res.next();
  expect(nextRes).not.toBeNull();
  expect(nextRes!.httpMeta.response.status).toBe(200);
  expect(nextRes!.res).toBeDefined();
  expect(nextRes!.res!.resultArray.length).toBeLessThan(limit);

  const penultimateRes = await nextRes!.next();
  expect(penultimateRes).not.toBeNull();
  expect(penultimateRes!.httpMeta.response.status).toBe(200);
  expect(penultimateRes!.res).toBeDefined();
  expect(penultimateRes!.res!.resultArray.length).toBe(0);

  const nullRes = await penultimateRes!.next();
  expect(nullRes).toBeNull();
});

test("Test Pagination With Retries", async () => {
  recordTest("pagination-with-retries");

  const reqID = `${Math.random()}`;

  const spy = vi.fn<[status: number, method: string, path: string]>();

  const httpClient = new HTTPClient();
  httpClient.addHook("beforeRequest", (req) => {
    req.headers.set("request-id", reqID);
  });
  httpClient.addHook("response", (res, req) => {
    spy(res.status, req.method, new URL(req.url).pathname);
  });

  const s = new SDK({ httpClient });

  const result = await s.pagination.paginationWithRetries();
  let count = 0;
  for await (const page of result) {
    count += page.res?.resultArray.length ?? 0;
  }

  expect(count).toBe(20);
  expect(spy).toHaveBeenCalledTimes(6);
  expect(spy.mock.calls).toEqual([
    ...Array(3).fill([503, "GET", "/pagination/cursor_non_numeric"]),
    ...Array(3).fill([200, "GET", "/pagination/cursor_non_numeric"]),
  ]);
});

test("Test Pagination Body Wrapped Request", async () => {
  recordTest("pagination-body-wrapped-request");

  const sdk = new SDK({});
  const limit = 15;

  const res = await sdk.pagination.paginationBodyWrappedRequest({
    limitOffsetConfig: {
      limit,
      page: 1,
    },
  });
  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res!.resultArray.length).toBe(limit);

  const nextRes = await res.next();
  expect(nextRes).not.toBeNull();
  expect(nextRes!.httpMeta.response.status).toBe(200);
  expect(nextRes!.res).toBeDefined();
  expect(nextRes!.res!.resultArray.length).toBe(20 - limit);

  const nullRes = await nextRes!.next();
  expect(nullRes).toBeNull();
});

test("Test Pagination Body Flattened With Security", async () => {
  recordTest("pagination-body-flattened-with-security");

  const sdk = new SDK({});
  const limit = 15;

  const res = await sdk.pagination.paginationBodyFlattenedWithSecurity(
    { paginationAuth: "test" },
    limit,
    0,
  );
  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res!.resultArray.length).toBe(limit);

  const nextRes = await res.next();
  expect(nextRes).not.toBeNull();
  expect(nextRes!.httpMeta.response.status).toBe(200);
  expect(nextRes!.res).toBeDefined();
  expect(nextRes!.res!.resultArray.length).toBe(20 - limit);

  const nullRes = await nextRes!.next();
  expect(nullRes).toBeNull();
});

test("Test Pagination Body Flattened Optional Security", async () => {
  recordTest("pagination-body-flattened-optional-security");

  const sdk = new SDK({});
  const limit = 15;

  const res = await sdk.pagination.paginationBodyFlattenedOptionalSecurity(
    limit,
    0,
    { paginationAuth: "test" },
  );
  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res!.resultArray.length).toBe(limit);

  const nextRes = await res.next();
  expect(nextRes).not.toBeNull();
  expect(nextRes!.httpMeta.response.status).toBe(200);
  expect(nextRes!.res).toBeDefined();
  expect(nextRes!.res!.resultArray.length).toBe(20 - limit);

  const nullRes = await nextRes!.next();
  expect(nullRes).toBeNull();
});

test("Test Pagination Ambiguous Input", async () => {
  recordTest("pagination-ambiguous-input");

  const sdk = new SDK();
  const limit = 15;

  const res = await sdk.pagination.paginationAmbiguousInput({
    cursor: -1,
  });
  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res!.resultArray.length).toBe(limit);

  const nextRes = await res.next();
  expect(nextRes).not.toBeNull();
  expect(nextRes!.httpMeta.response.status).toBe(200);
  expect(nextRes!.res).toBeDefined();
  expect(nextRes!.res!.resultArray.length).toBeLessThan(limit);

  const penultimateRes = await nextRes!.next();
  expect(penultimateRes).not.toBeNull();
  expect(penultimateRes!.httpMeta.response.status).toBe(200);
  expect(penultimateRes!.res).toBeDefined();
  expect(penultimateRes!.res!.resultArray.length).toBe(0);

  const nullRes = await penultimateRes!.next();
  expect(nullRes).toBeNull();
});

test("Test Pagination Wrapped Optional Body", async () => {
  recordTest("pagination-wrapped-optional-body");

  const sdk = new SDK();

  const res = await sdk.pagination.paginationWrappedOptionalBody();
  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res!.resultArray.length).toBe(20);

  const penultimateRes = await res!.next();
  expect(penultimateRes).not.toBeNull();
  expect(penultimateRes!.httpMeta.response.status).toBe(200);
  expect(penultimateRes!.res).toBeDefined();
  expect(penultimateRes!.res!.resultArray.length).toBe(0);

  const nullRes = await penultimateRes!.next();
  expect(nullRes).toBeNull();
});

test("supports async iterators", async () => {
  const sdk = new SDK();
  const serverLimit = 20;

  const iterator = await sdk.pagination.paginationLimitOffsetOffsetParams(3);
  expect(iterator.httpMeta.response.status).toBe(200);

  const collect: number[] = [];

  for await (const page of iterator) {
    if (!page.res) {
      expect.unreachable("expected to receive a page containing results");
    }
    collect.push(...page.res.resultArray);
  }

  expect(collect.length).toBe(serverLimit);
  expect(collect).toEqual(Array.from({ length: serverLimit }, (_, i) => i));
});

test("Test Pagination Encapsulated Parameter", async () => {
  recordTest("pagination-encapsulated-parameter");

  const sdk = new SDK();
  const limit = 15;

  const res = await sdk.pagination.paginationEncapsulatedParameter({
    cursor: -1,
  });
  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res!.resultArray.length).toBe(limit);

  const nextRes = await res.next();
  expect(nextRes).not.toBeNull();
  expect(nextRes!.httpMeta.response.status).toBe(200);
  expect(nextRes!.res).toBeDefined();
  expect(nextRes!.res!.resultArray.length).toBeLessThan(limit);

  const penultimateRes = await nextRes!.next();
  expect(penultimateRes).not.toBeNull();
  expect(penultimateRes!.httpMeta.response.status).toBe(200);
  expect(penultimateRes!.res).toBeDefined();
  expect(penultimateRes!.res!.resultArray.length).toBe(0);

  const nullRes = await penultimateRes!.next();
  expect(nullRes).toBeNull();
});
