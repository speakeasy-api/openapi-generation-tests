/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { createDeepObject, createSimpleObject } from "./primary_helpers";
import { expect, test } from "vitest";

import { SDK } from "..";
import { recordTest } from "./common_helpers";
import { sortQueryParameters } from "./helpers";

// Useful for simplifying JS objects contain complex-but-serializable values
// like dates before comparing them to expected values.
const roundTrip = (v: unknown) => JSON.parse(JSON.stringify(v));

// test("Test Mixed Parameters Primitives", async () => {
//   recordTest("parameters-mixed-primitives");

//   const sdk = new SDK({});

//   const res = await sdk.parameters.mixedParametersPrimitives(
//     "headerValue",
//     "pathValue",
//     "queryValue",
//   );

//   expect(res.httpMeta.response.status).toBe(200);
//   expect(res.res?.url).toBe(
//     "http://localhost:35123/anything/mixedParams/path/pathValue?queryStringParam=queryValue",
//   );
//   expect(res.res?.headers.headerparam).toBe("headerValue");
//   expect(res.res?.args.queryStringParam).toBe("queryValue");
// });

// test("Test Mixed Parameters Camel Case", async () => {
//   recordTest("parameters-camel-case");

//   const sdk = new SDK({});

//   const res = await sdk.parameters.mixedParametersCamelCase(
//     "headerValue",
//     "pathValue",
//     "queryValue",
//   );

//   expect(res.httpMeta.response.status).toBe(200);
//   expect(res.res?.url).toBe(
//     "http://localhost:35123/anything/mixedParams/path/pathValue/camelcase?query_string_param=queryValue",
//   );
//   expect(res.res?.headers.headerParam).toBe("headerValue");
//   expect(res.res?.args.queryStringParam).toBe("queryValue");
// });

// test("Test Simple Path Parameter Primitives", async () => {
//   recordTest("parameters-simple-path-parameter-primitives");

//   const sdk = new SDK({});

//   const res = await sdk.parameters.simplePathParameterPrimitives(
//     true,
//     1,
//     1.1,
//     "test",
//   );

//   expect(res.httpMeta.response.status).toBe(200);
//   expect(res.res?.url).toBe(
//     "http://localhost:35123/anything/pathParams/str/test/bool/true/int/1/num/1.1",
//   );
// });

// test("Test Simple Path Parameter Objects", async () => {
//   recordTest("parameters-simple-path-parameter-objects");

//   const sdk = new SDK({});

//   const res = await sdk.parameters.simplePathParameterObjects(
//     createSimpleObject(),
//     createSimpleObject(),
//   );

//   expect(res.httpMeta.response.status).toBe(200);
//   expect(res.res?.url).toBe(
//     "http://localhost:35123/anything/pathParams/obj/bool,true,date,2020-01-01,dateTime,2020-01-01T00:00:00.001Z,enum,one,float32,1.1,int,1,int32,1,int32Enum,55,intEnum,2,num,1.1,str,test,any,any,boolOpt,true,strOpt,testOptional/objExploded/bool=true,date=2020-01-01,dateTime=2020-01-01T00:00:00.001Z,enum=one,float32=1.1,int=1,int32=1,int32Enum=55,intEnum=2,num=1.1,str=test,any=any,boolOpt=true,strOpt=testOptional",
//   );
// });

// test("Test Simple Path Parameter Arrays", async () => {
//   recordTest("parameters-simple-path-parameter-arrays");

//   const sdk = new SDK({});

//   const res = await sdk.parameters.simplePathParameterArrays(["test", "test2"]);

//   expect(res.httpMeta.response.status).toBe(200);
//   expect(res.res?.url).toBe(
//     "http://localhost:35123/anything/pathParams/arr/test,test2",
//   );
// });

// test("Test Simple Path Parameter Maps", async () => {
//   recordTest("parameters-simple-path-parameter-maps");

//   const sdk = new SDK({});

//   const res = await sdk.parameters.simplePathParameterMaps(
//     {
//       test: "value",
//       test2: "value2",
//     },
//     {
//       test: 1,
//       test2: 2,
//     },
//   );

//   expect(res.httpMeta.response.status).toBe(200);
//   expect(res.res?.url).toBe(
//     "http://localhost:35123/anything/pathParams/map/test,value,test2,value2/mapExploded/test=1,test2=2",
//   );
// });

test("Test Path Parameter JSON", async () => {
  recordTest("parameters-path-parameter-json");

  const sdk = new SDK({});

  const res = await sdk.parameters.pathParameterJson(createSimpleObject());

  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res?.url).toBe(
    'http://localhost:35123/anything/pathParams/json/{"bool":true,"date":"2020-01-01","dateTime":"2020-01-01T00:00:00.001Z","enum":"one","float32":1.1,"int":1,"int32":1,"int32Enum":55,"intEnum":2,"num":1.1,"str":"test","any":"any","boolOpt":true,"strOpt":"testOptional"}',
  );
});

// test("Test Form Query Params Primitive", async () => {
//   recordTest("parameters-form-query-params-primitive");

//   const sdk = new SDK({});

//   const res = await sdk.parameters.formQueryParamsPrimitive(
//     true,
//     1,
//     1.1,
//     "test",
//   );

//   expect(res.httpMeta.response.status).toBe(200);
//   expect(res.res?.url).toBe(
//     "http://localhost:35123/anything/queryParams/form/primitive?boolParam=true&intParam=1&numParam=1.1&strParam=test",
//   );
//   expect(res.res?.args.boolParam).toBe("true");
//   expect(res.res?.args.intParam).toBe("1");
//   expect(res.res?.args.numParam).toBe("1.1");
//   expect(res.res?.args.strParam).toBe("test");
// });

// test("Test Form Query Params Object", async () => {
//   recordTest("parameters-form-query-params-object");

//   const sdk = new SDK({});

//   const res = await sdk.parameters.formQueryParamsObject(
//     createSimpleObject(),
//     createSimpleObject(),
//   );

//   expect(res.httpMeta.response.status).toBe(200);
//   expect(res.res?.url).toBe(
//     "http://localhost:35123/anything/queryParams/form/obj?objParam=bool%2Ctrue%2Cdate%2C2020-01-01%2CdateTime%2C2020-01-01T00%3A00%3A00.001Z%2Cenum%2Cone%2Cfloat32%2C1.1%2Cint%2C1%2Cint32%2C1%2Cint32Enum%2C55%2CintEnum%2C2%2Cnum%2C1.1%2Cstr%2Ctest%2Cany%2Cany%2CboolOpt%2Ctrue%2CstrOpt%2CtestOptional&bool=true&date=2020-01-01&dateTime=2020-01-01T00%3A00%3A00.001Z&enum=one&float32=1.1&int=1&int32=1&int32Enum=55&intEnum=2&num=1.1&str=test&any=any&boolOpt=true&strOpt=testOptional",
//   );
//   expect(res.res?.args.any).toBe("any");
//   expect(res.res?.args.bool).toBe("true");
//   expect(res.res?.args.boolOpt).toBe("true");
//   expect(res.res?.args.date).toBe("2020-01-01");
//   expect(res.res?.args.dateTime).toBe("2020-01-01T00:00:00.001Z");
//   expect(res.res?.args.enum).toBe("one");
//   expect(res.res?.args.float32).toBe("1.1");
//   expect(res.res?.args.int).toBe("1");
//   expect(res.res?.args.int32).toBe("1");
//   expect(res.res?.args.int32Enum).toBe("55");
//   expect(res.res?.args.intEnum).toBe("2");
//   expect(res.res?.args.num).toBe("1.1");
//   expect(res.res?.args.str).toBe("test");
//   expect(res.res?.args.strOpt).toBe("testOptional");
//   expect(res.res?.args.intOptNull).toBeUndefined();
//   expect(res.res?.args.numOptNull).toBeUndefined();
//   expect(res.res?.args.objParam).toBe(
//     "bool,true,date,2020-01-01,dateTime,2020-01-01T00:00:00.001Z,enum,one,float32,1.1,int,1,int32,1,int32Enum,55,intEnum,2,num,1.1,str,test,any,any,boolOpt,true,strOpt,testOptional",
//   );
// });

// test("Test Form Query Params Camel Object", async () => {
//   recordTest("parameters-form-query-params-camel-object");

//   const sdk = new SDK({});
//   const result = await sdk.parameters.formQueryParamsCamelObject(
//     { searchTerm: "foo", itemCount: "10" },
//     { encodedTerm: "bar", encodedCount: "11" },
//   );

//   expect(result.httpMeta.response.status).toBe(200);
//   expect(result.res?.url).toBe(
//     "http://localhost:35123/anything/queryParams/form/camelObj?obj_param=encoded_count%2C11%2Cencoded_term%2Cbar&item_count=10&search_term=foo",
//   );
//   expect(result.res?.args.searchTerm).toEqual("foo");
//   expect(result.res?.args.itemCount).toEqual("10");
// });

// test("Test Form Query Params Ref Param Object", async () => {
//   recordTest("parameters-form-query-params-ref-param-object");

//   const sdk = new SDK({});

//   const res = await sdk.parameters.formQueryParamsRefParamObject(
//     {
//       bool: true,
//       int: 1,
//       num: 1.1,
//       str: "test",
//     },
//     {
//       bool: true,
//       int: 1,
//       num: 1.1,
//       str: "test",
//     },
//   );

//   expect(res.httpMeta.response.status).toBe(200);
//   expect(res.res?.url).toBe(
//     "http://localhost:35123/anything/queryParams/form/refParamObject?refObjParam=bool%2Ctrue%2Cint%2C1%2Cnum%2C1.1%2Cstr%2Ctest&bool=true&int=1&num=1.1&str=test",
//   );
//   expect(res.res?.args.bool).toBe("true");
//   expect(res.res?.args.int).toBe("1");
//   expect(res.res?.args.num).toBe("1.1");
//   expect(res.res?.args.str).toBe("test");
//   expect(res.res?.args.refObjParam).toBe("bool,true,int,1,num,1.1,str,test");
// });

// test("Test Form Query Params Array", async () => {
//   recordTest("parameters-form-query-params-array");

//   const sdk = new SDK({});

//   const res = await sdk.parameters.formQueryParamsArray(
//     ["test", "test2"],
//     [1, 2],
//   );

//   expect(res.httpMeta.response.status).toBe(200);
//   expect(res.res?.url).toBe(
//     "http://localhost:35123/anything/queryParams/form/array?arrParam=test%2Ctest2&arrParamExploded=1&arrParamExploded=2",
//   );
//   expect(res.res?.args.arrParam).toBe("test,test2");
//   expect(res.res?.args.arrParamExploded).toStrictEqual(["1", "2"]);
// });

// test("Test PipeDelimited Query Params Array", async () => {
//   recordTest("parameters-pipe-query-params-array");

//   const sdk = new SDK({});

//   const res = await sdk.parameters.pipeDelimitedQueryParamsArray(
//     ["test", "test2"],
//     [1, 2],
//     { key1: "val1", key2: "val2" },
//     createSimpleObject(),
//   );

//   expect(res.httpMeta.response.status).toBe(200);
//   expect(res.res?.url).toBe(
//     "http://localhost:35123/anything/queryParams/pipe/array?arrParam=test|test2&arrParamExploded=1&arrParamExploded=2&mapParam=key1|val1|key2|val2&objParam=bool|true|date|2020-01-01|dateTime|2020-01-01T00%3A00%3A00.001Z|enum|one|float32|1.1|int|1|int32|1|int32Enum|55|intEnum|2|num|1.1|str|test|any|any|boolOpt|true|strOpt|testOptional",
//   );
//   expect(res.res?.args.arrParam).toBe("test|test2");
//   expect(res.res?.args.arrParamExploded).toStrictEqual(["1", "2"]);
// });

// test("Test Form Query Params Map", async () => {
//   recordTest("parameters-form-query-params-map");

//   const sdk = new SDK({});

//   const res = await sdk.parameters.formQueryParamsMap(
//     {
//       test: "value",
//       test2: "value2",
//     },
//     {
//       test: 1,
//       test2: 2,
//     },
//   );

//   expect(res.httpMeta.response.status).toBe(200);
//   expect(res.res?.url).toBe(
//     "http://localhost:35123/anything/queryParams/form/map?mapParam=test%2Cvalue%2Ctest2%2Cvalue2&test=1&test2=2",
//   );
//   expect(res.res?.args["mapParam"]).toBe("test,value,test2,value2");
// });

// test("Test Deep Object Query Params Object", async () => {
//   recordTest("parameters-deep-object-query-params-object");

//   const sdk = new SDK({});

//   const res = await sdk.parameters.deepObjectQueryParamsObject(
//     createSimpleObject(),
//     {
//       arr: ["test", "test2"],
//     },
//   );

//   expect(res.httpMeta.response.status).toBe(200);
//   expect(res.res?.url).toBe(
//     "http://localhost:35123/anything/queryParams/deepObject/obj?objArrParam[arr]=test&objArrParam[arr]=test2&objParam[bool]=true&objParam[date]=2020-01-01&objParam[dateTime]=2020-01-01T00%3A00%3A00.001Z&objParam[enum]=one&objParam[float32]=1.1&objParam[int]=1&objParam[int32]=1&objParam[int32Enum]=55&objParam[intEnum]=2&objParam[num]=1.1&objParam[str]=test&objParam[any]=any&objParam[boolOpt]=true&objParam[strOpt]=testOptional",
//   );
//   expect(res.res?.args.objParamAny).toBe("any");
//   expect(res.res?.args.objParamBool).toBe("true");
//   expect(res.res?.args.objParamBoolOpt).toBe("true");
//   expect(res.res?.args.objParamDate).toBe("2020-01-01");
//   expect(res.res?.args.objParamDateTime).toBe("2020-01-01T00:00:00.001Z");
//   expect(res.res?.args.objParamEnum).toBe("one");
//   expect(res.res?.args.objParamFloat32).toBe("1.1");
//   expect(res.res?.args.objParamInt).toBe("1");
//   expect(res.res?.args.objParamInt32).toBe("1");
//   expect(res.res?.args.objParamInt32Enum).toBe("55");
//   expect(res.res?.args.objParamIntEnum).toBe("2");
//   expect(res.res?.args.objParamNum).toBe("1.1");
//   expect(res.res?.args.objParamStr).toBe("test");
//   expect(res.res?.args.objParamStrOpt).toBe("testOptional");
//   expect(res.res?.args.objArrParamArr).toStrictEqual(["test", "test2"]);
// });

// test("Test Deep Object Query Params Map", async () => {
//   recordTest("parameters-deep-object-query-params-map");

//   const sdk = new SDK({});

//   const res = await sdk.parameters.deepObjectQueryParamsMap(
//     {
//       test: "value",
//       test2: "value2",
//     },
//     {
//       test: ["test", "test2"],
//       test2: ["test3", "test4"],
//     },
//   );

//   expect(res.httpMeta.response.status).toBe(200);
//   expect(res.res?.url).toBe(
//     "http://localhost:35123/anything/queryParams/deepObject/map?mapArrParam[test]=test&mapArrParam[test]=test2&mapArrParam[test2]=test3&mapArrParam[test2]=test4&mapParam[test]=value&mapParam[test2]=value2",
//   );
//   expect(res.res?.args).toEqual({
//     "mapParam[test]": "value",
//     "mapParam[test2]": "value2",
//     "mapArrParam[test]": ["test", "test2"],
//     "mapArrParam[test2]": ["test3", "test4"],
//   });
// });

test("Test JSON Query Params Object", async () => {
  recordTest("parameters-json-query-params-object");

  const sdk = new SDK({});

  const simpleObj = createSimpleObject();
  const deepObject = createDeepObject();

  const res = await sdk.parameters.jsonQueryParamsObject(deepObject, simpleObj);

  expect(res.httpMeta.response.status).toBe(200);
  expect(sortQueryParameters(res.res?.url)).toBe(
    'http://localhost:35123/anything/queryParams/json/obj?deepObjParam={"any"%3A{"bool"%3Atrue%2C"date"%3A"2020-01-01"%2C"dateTime"%3A"2020-01-01T00%3A00%3A00.001Z"%2C"enum"%3A"one"%2C"float32"%3A1.1%2C"int"%3A1%2C"int32"%3A1%2C"int32Enum"%3A55%2C"intEnum"%3A2%2C"num"%3A1.1%2C"str"%3A"test"%2C"any"%3A"any"%2C"boolOpt"%3Atrue%2C"strOpt"%3A"testOptional"}%2C"arr"%3A[{"bool"%3Atrue%2C"date"%3A"2020-01-01"%2C"dateTime"%3A"2020-01-01T00%3A00%3A00.001Z"%2C"enum"%3A"one"%2C"float32"%3A1.1%2C"int"%3A1%2C"int32"%3A1%2C"int32Enum"%3A55%2C"intEnum"%3A2%2C"num"%3A1.1%2C"str"%3A"test"%2C"any"%3A"any"%2C"boolOpt"%3Atrue%2C"strOpt"%3A"testOptional"}%2C{"bool"%3Atrue%2C"date"%3A"2020-01-01"%2C"dateTime"%3A"2020-01-01T00%3A00%3A00.001Z"%2C"enum"%3A"one"%2C"float32"%3A1.1%2C"int"%3A1%2C"int32"%3A1%2C"int32Enum"%3A55%2C"intEnum"%3A2%2C"num"%3A1.1%2C"str"%3A"test"%2C"any"%3A"any"%2C"boolOpt"%3Atrue%2C"strOpt"%3A"testOptional"}]%2C"bool"%3Atrue%2C"int"%3A1%2C"map"%3A{"key"%3A{"bool"%3Atrue%2C"date"%3A"2020-01-01"%2C"dateTime"%3A"2020-01-01T00%3A00%3A00.001Z"%2C"enum"%3A"one"%2C"float32"%3A1.1%2C"int"%3A1%2C"int32"%3A1%2C"int32Enum"%3A55%2C"intEnum"%3A2%2C"num"%3A1.1%2C"str"%3A"test"%2C"any"%3A"any"%2C"boolOpt"%3Atrue%2C"strOpt"%3A"testOptional"}}%2C"num"%3A1.1%2C"obj"%3A{"bool"%3Atrue%2C"date"%3A"2020-01-01"%2C"dateTime"%3A"2020-01-01T00%3A00%3A00.001Z"%2C"enum"%3A"one"%2C"float32"%3A1.1%2C"int"%3A1%2C"int32"%3A1%2C"int32Enum"%3A55%2C"intEnum"%3A2%2C"num"%3A1.1%2C"str"%3A"test"%2C"any"%3A"any"%2C"boolOpt"%3Atrue%2C"strOpt"%3A"testOptional"}%2C"str"%3A"test"}&simpleObjParam={"bool"%3Atrue%2C"date"%3A"2020-01-01"%2C"dateTime"%3A"2020-01-01T00%3A00%3A00.001Z"%2C"enum"%3A"one"%2C"float32"%3A1.1%2C"int"%3A1%2C"int32"%3A1%2C"int32Enum"%3A55%2C"intEnum"%3A2%2C"num"%3A1.1%2C"str"%3A"test"%2C"any"%3A"any"%2C"boolOpt"%3Atrue%2C"strOpt"%3A"testOptional"}',
  );

  expect(JSON.parse(res.res?.args.simpleObjParam || "")).toEqual(
    roundTrip(simpleObj),
  );
  expect(JSON.parse(res.res?.args.deepObjParam || "")).toEqual(
    roundTrip(deepObject),
  );
});

test("Test Mixed Query Params", async () => {
  recordTest("parameters-mixed-query-params");

  const sdk = new SDK({});

  const obj = createSimpleObject();

  const res = await sdk.parameters.mixedQueryParams(obj, obj, obj);

  expect(res.httpMeta.response.status).toBe(200);
  expect(sortQueryParameters(res.res?.url)).toBe(
    'http://localhost:35123/anything/queryParams/mixed?any=any&bool=true&boolOpt=true&date=2020-01-01&dateTime=2020-01-01T00%3A00%3A00.001Z&deepObjectParam[any]=any&deepObjectParam[boolOpt]=true&deepObjectParam[bool]=true&deepObjectParam[dateTime]=2020-01-01T00%3A00%3A00.001Z&deepObjectParam[date]=2020-01-01&deepObjectParam[enum]=one&deepObjectParam[float32]=1.1&deepObjectParam[int32Enum]=55&deepObjectParam[int32]=1&deepObjectParam[intEnum]=2&deepObjectParam[int]=1&deepObjectParam[num]=1.1&deepObjectParam[strOpt]=testOptional&deepObjectParam[str]=test&enum=one&float32=1.1&int=1&int32=1&int32Enum=55&intEnum=2&jsonParam={"bool"%3Atrue%2C"date"%3A"2020-01-01"%2C"dateTime"%3A"2020-01-01T00%3A00%3A00.001Z"%2C"enum"%3A"one"%2C"float32"%3A1.1%2C"int"%3A1%2C"int32"%3A1%2C"int32Enum"%3A55%2C"intEnum"%3A2%2C"num"%3A1.1%2C"str"%3A"test"%2C"any"%3A"any"%2C"boolOpt"%3Atrue%2C"strOpt"%3A"testOptional"}&num=1.1&str=test&strOpt=testOptional',
  );

  const actual: Record<string, unknown> = res.res?.args ?? {};
  if (typeof actual["jsonParam"] === "string") {
    actual["jsonParam"] = JSON.parse(actual["jsonParam"]);
  }

  expect(actual).toEqual({
    any: "any",
    bool: "true",
    boolOpt: "true",
    date: "2020-01-01",
    dateTime: "2020-01-01T00:00:00.001Z",
    "deepObjectParam[any]": "any",
    "deepObjectParam[boolOpt]": "true",
    "deepObjectParam[bool]": "true",
    "deepObjectParam[dateTime]": "2020-01-01T00:00:00.001Z",
    "deepObjectParam[date]": "2020-01-01",
    "deepObjectParam[enum]": "one",
    "deepObjectParam[float32]": "1.1",
    "deepObjectParam[int32]": "1",
    "deepObjectParam[int]": "1",
    "deepObjectParam[int32Enum]": "55",
    "deepObjectParam[intEnum]": "2",
    "deepObjectParam[num]": "1.1",
    "deepObjectParam[strOpt]": "testOptional",
    "deepObjectParam[str]": "test",
    enum: "one",
    float32: "1.1",
    int: "1",
    int32: "1",
    int32Enum: "55",
    intEnum: "2",
    jsonParam: roundTrip(obj),
    num: "1.1",
    str: "test",
    strOpt: "testOptional",
  });
});
// //
// test("Test Header Params Primitive", async () => {
//   recordTest("parameters-header-params-primitive");

//   const sdk = new SDK({});

//   const res = await sdk.parameters.headerParamsPrimitive(true, 1, 1.1, "test");

//   expect(res.httpMeta.response.status).toBe(200);
//   expect(res.res?.headers.xHeaderBoolean).toBe("true");
//   expect(res.res?.headers.xHeaderInteger).toBe("1");
//   expect(res.res?.headers.xHeaderNumber).toBe("1.1");
//   expect(res.res?.headers.xHeaderString).toBe("test");
// });

// test("Test Header Params Object", async () => {
//   recordTest("parameters-header-params-object");

//   const sdk = new SDK({});

//   const obj = createSimpleObject();

//   const res = await sdk.parameters.headerParamsObject(obj, obj);

//   expect(res.httpMeta.response.status).toBe(200);
//   expect(res.res?.headers.xHeaderObj).toBe(
//     "bool,true,date,2020-01-01,dateTime,2020-01-01T00:00:00.001Z,enum,one,float32,1.1,int,1,int32,1,int32Enum,55,intEnum,2,num,1.1,str,test,any,any,boolOpt,true,strOpt,testOptional",
//   );
//   expect(res.res?.headers.xHeaderObjExplode).toBe(
//     "bool=true,date=2020-01-01,dateTime=2020-01-01T00:00:00.001Z,enum=one,float32=1.1,int=1,int32=1,int32Enum=55,intEnum=2,num=1.1,str=test,any=any,boolOpt=true,strOpt=testOptional",
//   );
// });

// test("Test Header Params Map", async () => {
//   recordTest("parameters-header-params-map");

//   const sdk = new SDK({});

//   const res = await sdk.parameters.headerParamsMap(
//     {
//       key1: "value1",
//       key2: "value2",
//     },
//     {
//       test1: "val1",
//       test2: "val2",
//     },
//   );

//   expect(res.httpMeta.response.status).toBe(200);
//   expect(res.res?.headers.xHeaderMap).toBe("key1,value1,key2,value2");
//   expect(res.res?.headers.xHeaderMapExplode).toBe("test1=val1,test2=val2");
// });

// test("Test Header Params Array", async () => {
//   recordTest("parameters-header-params-array");

//   const sdk = new SDK({});

//   const res = await sdk.parameters.headerParamsArray(["test1", "test2"]);

//   expect(res.httpMeta.response.status).toBe(200);
//   expect(res.res?.headers.xHeaderArray).toBe("test1,test2");
// });
