/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as fs from "fs";
import * as path from "path";

import {
  createDeepObject,
  createDeepObjectCamelCase,
  createSimpleObject,
  createSimpleObjectCamelCase,
} from "./helpers";
import { expect, test } from "vitest";

import { Decimal, RFCDate } from "../sdk/types";
import { SDK } from "..";
import { recordTest } from "./common_helpers";
import {
  NullableRequiredEnum,
  NullableRequiredPropertyPostRequestBody,
} from "../sdk/models/operations/nullablerequiredpropertypost";
import { NullableRequiredSharedObjectPostRequestBody } from "../sdk/models/operations/nullablerequiredsharedobjectpost";
import { NullableRequiredEmptyObjectPostRequestBody } from "../sdk/models/operations/nullablerequiredemptyobjectpost";
import { RequestBodyPostComplexNumberTypesRequest } from "../sdk/models/operations/requestbodypostcomplexnumbertypes";
import {
  ConstEnumInt,
  ConstEnumStr,
  DefaultEnumInt,
  DefaultEnumStr,
  DefaultsAndConsts,
  DefaultsAndConsts$,
} from "../sdk/models/shared/defaultsandconsts";
import {
  DefaultsAndConstsOutput,
  DefaultsAndConstsOutputConstEnumInt,
  DefaultsAndConstsOutputConstEnumStr,
  DefaultsAndConstsOutputDefaultEnumInt,
  DefaultsAndConstsOutputDefaultEnumStr,
} from "../sdk/models/shared/defaultsandconstsoutput";

// Useful for simplifying JS objects contain complex-but-serializable values
// like dates before comparing them to expected values.
const roundTrip = (v: unknown) => JSON.parse(JSON.stringify(v));

test("Request Body Post Application JSON Simple", async () => {
  recordTest("request-bodies-post-application-json-simple");

  const s = new SDK();
  const obj = createSimpleObject();
  const res = await s.requestBodies.requestBodyPostApplicationJsonSimple(obj);
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.json).toEqual(obj);
});

test("Request Body Post Application JSON Simple Camel Case", async () => {
  recordTest("request-bodies-post-application-json-simple-camel-case");

  const s = new SDK();
  const obj = createSimpleObjectCamelCase();
  const res =
    await s.requestBodies.requestBodyPostApplicationJsonSimpleCamelCase(obj);

  expect(res.statusCode).toBe(200);
  expect(res.res?.json).toMatchInlineSnapshot(`
{
  "anyVal": "any",
  "boolOptVal": true,
  "boolVal": true,
  "dateTimeVal": 2020-01-01T00:00:00.001Z,
  "dateVal": "2020-01-01",
  "enumVal": "one",
  "float32Val": 1.1,
  "int32EnumVal": 55,
  "int32Val": 1,
  "intEnumVal": 2,
  "intVal": 1,
  "numVal": 1.1,
  "strOptVal": "testOptional",
  "strVal": "test",
}
`);
  expect(res.res?.json?.dateVal).toBeInstanceOf(RFCDate);
  expect(res.res?.json).toEqual(obj);
});

test("Request Body Post Application JSON Array", async () => {
  recordTest("request-bodies-post-application-json-array");

  const s = new SDK();
  const obj = createSimpleObject();
  const res = await s.requestBodies.requestBodyPostApplicationJsonArray([
    obj,
    obj,
  ]);
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res).toEqual([obj, obj]);
});

test("Request Body Post Application JSON Array Camel Case", async () => {
  recordTest("request-bodies-post-application-json-array-camel-case");

  const s = new SDK();
  const obj = createSimpleObjectCamelCase();
  const res =
    await s.requestBodies.requestBodyPostApplicationJsonArrayCamelCase([
      obj,
      obj,
    ]);
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res).toEqual([obj, obj]);
});

test("Request Body Post Application JSON Array of Array", async () => {
  recordTest("request-bodies-post-application-json-array-of-array");

  const s = new SDK();
  const obj = createSimpleObject();
  const res = await s.requestBodies.requestBodyPostApplicationJsonArrayOfArray([
    [obj],
    [obj],
  ]);
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res).toEqual([[obj], [obj]]);
});

test("Request Body Post Application JSON Array of Array Camel Case", async () => {
  recordTest("request-bodies-post-application-json-array-of-array-camel-case");

  const s = new SDK();
  const obj = createSimpleObjectCamelCase();
  const res =
    await s.requestBodies.requestBodyPostApplicationJsonArrayOfArrayCamelCase([
      [obj],
      [obj],
    ]);
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res).toEqual([[obj], [obj]]);
});

test("Request Body Post Application JSON Map", async () => {
  recordTest("request-bodies-post-application-json-map");

  const s = new SDK();
  const obj = createSimpleObject();
  const res = await s.requestBodies.requestBodyPostApplicationJsonMap({
    mapElem1: obj,
    mapElem2: obj,
  });
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res).toEqual({
    mapElem1: obj,
    mapElem2: obj,
  });
});

test("Request Body Post Application JSON Map Camel Case", async () => {
  recordTest("request-bodies-post-application-json-map-camel-case");

  const s = new SDK();
  const obj = createSimpleObjectCamelCase();
  const res = await s.requestBodies.requestBodyPostApplicationJsonMapCamelCase({
    mapElem1: obj,
    mapElem2: obj,
  });
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res).toEqual({
    mapElem1: obj,
    mapElem2: obj,
  });
});

test("Request Body Post Application JSON Map of Map", async () => {
  recordTest("request-bodies-post-application-json-map-of-map");

  const s = new SDK();
  const obj = createSimpleObject();
  const res = await s.requestBodies.requestBodyPostApplicationJsonMapOfMap({
    mapElem1: {
      subMapElem1: obj,
      subMapElem2: obj,
    },
    mapElem2: {
      subMapElem1: obj,
      subMapElem2: obj,
    },
  });
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res).toEqual({
    mapElem1: {
      subMapElem1: obj,
      subMapElem2: obj,
    },
    mapElem2: {
      subMapElem1: obj,
      subMapElem2: obj,
    },
  });
});

test("Request Body Post Application JSON Map of Map Camel Case", async () => {
  recordTest("request-bodies-post-application-json-map-of-map-camel-case");

  const s = new SDK();
  const obj = createSimpleObjectCamelCase();
  const res =
    await s.requestBodies.requestBodyPostApplicationJsonMapOfMapCamelCase({
      mapElem1: {
        subMapElem1: obj,
        subMapElem2: obj,
      },
      mapElem2: {
        subMapElem1: obj,
        subMapElem2: obj,
      },
    });
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res).toEqual({
    mapElem1: {
      subMapElem1: obj,
      subMapElem2: obj,
    },
    mapElem2: {
      subMapElem1: obj,
      subMapElem2: obj,
    },
  });
});

test("Request Body Post Application JSON Map of Array", async () => {
  recordTest("request-bodies-post-application-json-map-of-array");

  const s = new SDK();
  const obj = createSimpleObject();
  const res = await s.requestBodies.requestBodyPostApplicationJsonMapOfArray({
    mapElem1: [obj, obj],
    mapElem2: [obj, obj],
  });
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res).toEqual({
    mapElem1: [obj, obj],
    mapElem2: [obj, obj],
  });
});

test("Request Body Post Application JSON Map of Array Camel Case", async () => {
  recordTest("request-bodies-post-application-json-map-of-array-camel-case");

  const s = new SDK();
  const obj = createSimpleObjectCamelCase();
  const res =
    await s.requestBodies.requestBodyPostApplicationJsonMapOfArrayCamelCase({
      mapElem1: [obj, obj],
      mapElem2: [obj, obj],
    });
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res).toEqual({
    mapElem1: [obj, obj],
    mapElem2: [obj, obj],
  });
});

test("Request Body Post Application JSON Array of Map", async () => {
  recordTest("request-bodies-post-application-json-array-of-map");

  const s = new SDK();
  const obj = createSimpleObject();
  const res = await s.requestBodies.requestBodyPostApplicationJsonArrayOfMap([
    {
      mapElem1: obj,
      mapElem2: obj,
    },
    {
      mapElem1: obj,
      mapElem2: obj,
    },
  ]);
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res).toEqual([
    {
      mapElem1: obj,
      mapElem2: obj,
    },
    {
      mapElem1: obj,
      mapElem2: obj,
    },
  ]);
});

test("Request Body Post Application JSON Array of Map Camel Case", async () => {
  recordTest("request-bodies-post-application-json-array-of-map-camel-case");

  const s = new SDK();
  const obj = createSimpleObjectCamelCase();
  const res =
    await s.requestBodies.requestBodyPostApplicationJsonArrayOfMapCamelCase([
      {
        mapElem1: obj,
        mapElem2: obj,
      },
      {
        mapElem1: obj,
        mapElem2: obj,
      },
    ]);
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res).toEqual([
    {
      mapElem1: obj,
      mapElem2: obj,
    },
    {
      mapElem1: obj,
      mapElem2: obj,
    },
  ]);
});

test("Request Body Post Application JSON Map of Primitive", async () => {
  recordTest("request-bodies-post-application-json-map-of-primitive");

  const s = new SDK();
  const res =
    await s.requestBodies.requestBodyPostApplicationJsonMapOfPrimitive({
      mapElem1: "hello",
      mapElem2: "world",
    });
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res).toEqual({
    mapElem1: "hello",
    mapElem2: "world",
  });
});

test("Request Body Post Application JSON Array of Primitive", async () => {
  recordTest("request-bodies-post-application-json-array-of-primitive");

  const s = new SDK();
  const res =
    await s.requestBodies.requestBodyPostApplicationJsonArrayOfPrimitive([
      "hello",
      "world",
    ]);
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res).toEqual(["hello", "world"]);
});

test("Request Body Post Application JSON Map of Map of Primitive", async () => {
  recordTest("request-bodies-post-application-json-map-of-map-of-primitive");

  const s = new SDK();
  const res =
    await s.requestBodies.requestBodyPostApplicationJsonMapOfMapOfPrimitive({
      mapElem1: {
        subMapElem1: "foo",
        subMapElem2: "bar",
      },
      mapElem2: {
        subMapElem1: "buzz",
        subMapElem2: "bazz",
      },
    });
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res).toEqual({
    mapElem1: {
      subMapElem1: "foo",
      subMapElem2: "bar",
    },
    mapElem2: {
      subMapElem1: "buzz",
      subMapElem2: "bazz",
    },
  });
});

test("Request Body Post Application JSON Array of Array of Primitive", async () => {
  recordTest(
    "request-bodies-post-application-json-array-of-array-of-primitive",
  );

  const s = new SDK();
  const res =
    await s.requestBodies.requestBodyPostApplicationJsonArrayOfArrayOfPrimitive(
      [
        ["foo", "bar"],
        ["buzz", "bazz"],
      ],
    );
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res).toEqual([
    ["foo", "bar"],
    ["buzz", "bazz"],
  ]);
});

test("Request Body Post Application JSON Array Object", async () => {
  recordTest("request-bodies-post-application-json-array-object");

  const s = new SDK();
  const obj = createSimpleObject();
  const res = await s.requestBodies.requestBodyPostApplicationJsonArrayObj([
    obj,
    obj,
  ]);
  expect(res.statusCode).toBe(200);
  expect(res.arrObjValue).toBeDefined();
  expect(res.arrObjValue?.json).toEqual([obj, obj]);
});

test("Request Body Post Application JSON Array Object Camel Case", async () => {
  recordTest("request-bodies-post-application-json-array-object-camel-case");

  const s = new SDK();
  const obj = createSimpleObjectCamelCase();
  const res =
    await s.requestBodies.requestBodyPostApplicationJsonArrayObjCamelCase([
      obj,
      obj,
    ]);
  expect(res.statusCode).toBe(200);
  expect(res.arrObjValueCamelCase).toBeDefined();
  expect(res.arrObjValueCamelCase?.json).toEqual([obj, obj]);
});

test("Request Body Post Application JSON Map Object", async () => {
  recordTest("request-bodies-post-application-json-map-object");

  const s = new SDK();
  const obj = createSimpleObject();
  const res = await s.requestBodies.requestBodyPostApplicationJsonMapObj({
    mapElem1: obj,
    mapElem2: obj,
  });
  expect(res.statusCode).toBe(200);
  expect(res.mapObjValue).toBeDefined();
  expect(res.mapObjValue?.json).toEqual({
    mapElem1: obj,
    mapElem2: obj,
  });
});

test("Request Body Post Application JSON Map Object Camel Case", async () => {
  recordTest("request-bodies-post-application-json-map-object-camel-case");

  const s = new SDK();
  const obj = createSimpleObjectCamelCase();
  const res =
    await s.requestBodies.requestBodyPostApplicationJsonMapObjCamelCase({
      mapElem1: obj,
      mapElem2: obj,
    });
  expect(res.statusCode).toBe(200);
  expect(res.mapObjValueCamelCase).toBeDefined();
  expect(res.mapObjValueCamelCase?.json).toEqual({
    mapElem1: obj,
    mapElem2: obj,
  });
});

test("Request Body Post Application JSON Deep", async () => {
  recordTest("request-bodies-post-application-json-deep");

  const s = new SDK();
  const obj = createDeepObject();
  const res = await s.requestBodies.requestBodyPostApplicationJsonDeep(obj);
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();

  expect(res.res?.json).toEqual(obj);
});

test("Request Body Post Application JSON Deep Camel Case", async () => {
  recordTest("request-bodies-post-application-json-deep-camel-case");

  const s = new SDK();
  const obj = createDeepObjectCamelCase();
  const res =
    await s.requestBodies.requestBodyPostApplicationJsonDeepCamelCase(obj);
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();

  expect(res.res?.json).toEqual(obj);
});

test("Request Body Post Application JSON Multiple JSON Filtered", async () => {
  recordTest("request-bodies-post-application-json-multiple-json-filtered");

  const s = new SDK();
  const obj = createSimpleObject();
  const res =
    await s.requestBodies.requestBodyPostApplicationJsonMultipleJsonFiltered(
      obj,
    );
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.json).toEqual(obj);
});

test("Request Body Post Multiple Content Types Component Filtered", async () => {
  recordTest("request-bodies-post-multiple-content-types-component-filtered");

  const s = new SDK();
  const obj = createSimpleObject();
  const res =
    await s.requestBodies.requestBodyPostMultipleContentTypesComponentFiltered(
      obj,
    );
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.json).toEqual(obj);
});

test("Request Body Post Multiple Content Types Inline Filtered", async () => {
  recordTest("request-bodies-post-multiple-content-types-inline-filtered");

  const s = new SDK();
  const res =
    await s.requestBodies.requestBodyPostMultipleContentTypesInlineFiltered({
      bool: true,
      num: 1.1,
      str: "test",
    });
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.json).toEqual({
    bool: true,
    num: 1.1,
    str: "test",
  });
});

test("Request Body Post Multiple Content Types Split JSON", async () => {
  recordTest("request-bodies-post-multiple-content-types-split-json");

  const s = new SDK();
  const res =
    await s.requestBodies.requestBodyPostMultipleContentTypesSplitJson({
      bool: true,
      num: 1.1,
      str: "test",
    });
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.json).toEqual({
    bool: true,
    num: 1.1,
    str: "test",
  });
});

test("Request Body Post Multiple Content Types Split Multipart", async () => {
  recordTest("request-bodies-post-multiple-content-types-split-multipart");

  const s = new SDK();
  const res =
    await s.requestBodies.requestBodyPostMultipleContentTypesSplitMultipart({
      bool2: true,
      num2: 1.1,
      str2: "test",
    });
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.form).toEqual({
    bool2: "true",
    num2: "1.1",
    str2: "test",
  });
});

test("Request Body Post Multiple Content Types Split Form", async () => {
  recordTest("request-bodies-post-multiple-content-types-split-form");

  const s = new SDK();
  const res =
    await s.requestBodies.requestBodyPostMultipleContentTypesSplitForm({
      bool3: true,
      num3: 1.1,
      str3: "test",
    });
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.form).toEqual({
    bool3: "true",
    num3: "1.1",
    str3: "test",
  });
});

test("Request Body Post Multiple Content Types Split JSON With Param", async () => {
  recordTest(
    "request-bodies-post-multiple-content-types-split-json-with-param",
  );

  const s = new SDK();
  const res =
    await s.requestBodies.requestBodyPostMultipleContentTypesSplitParamJson(
      {
        bool: true,
        num: 1.1,
        str: "test body",
      },
      "test param",
    );
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.json).toEqual({
    bool: true,
    num: 1.1,
    str: "test body",
  });
  expect(res.res?.args).toEqual({
    paramStr: "test param",
  });
});

test("Request Body Post Multiple Content Types Split Multipart With Param", async () => {
  recordTest(
    "request-bodies-post-multiple-content-types-split-multipart-with-param",
  );

  const s = new SDK();
  const res =
    await s.requestBodies.requestBodyPostMultipleContentTypesSplitParamMultipart(
      {
        bool2: true,
        num2: 1.1,
        str2: "test body",
      },
      "test param",
    );
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.form).toEqual({
    bool2: "true",
    num2: "1.1",
    str2: "test body",
  });
  expect(res.res?.args).toEqual({
    paramStr: "test param",
  });
});

test("Request Body Post Multiple Content Types Split Form With Parameter", async () => {
  recordTest(
    "request-bodies-post-multiple-content-types-split-form-with-param",
  );

  const s = new SDK();
  const res =
    await s.requestBodies.requestBodyPostMultipleContentTypesSplitParamForm(
      {
        bool3: true,
        num3: 1.1,
        str3: "test body",
      },
      "test param",
    );
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.form).toEqual({
    bool3: "true",
    num3: "1.1",
    str3: "test body",
  });
  expect(res.res?.args).toEqual({
    paramStr: "test param",
  });
});

test("Request Body Put Multipart Simple", async () => {
  recordTest("request-bodies-put-multipart-simple");

  const s = new SDK();
  const obj = createSimpleObject();
  const res = await s.requestBodies.requestBodyPutMultipartSimple(obj);
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.headers.contentType).toMatch(/^multipart\/form-data/);
  expect(res.res?.form).toEqual({
    any: "any",
    bool: "true",
    boolOpt: "true",
    date: "2020-01-01",
    dateTime: "2020-01-01T00:00:00.001Z",
    enum: "one",
    float32: "1.1",
    int: "1",
    int32: "1",
    num: "1.1",
    str: "test",
    strOpt: "testOptional",
  });
});

test("Request Body Put Multipart Deep", async () => {
  recordTest("request-bodies-put-multipart-deep");

  const s = new SDK();
  const obj = createDeepObject();
  const res = await s.requestBodies.requestBodyPutMultipartDeep(obj);
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.form).toEqual({
    bool: "true",
    int: "1",
    num: "1.1",
    str: "test",
    arr: expect.anything(),
    map: expect.anything(),
    obj: expect.anything(),
  });

  expect(JSON.parse(res.res?.form.arr || "")).toEqual(roundTrip(obj.arr));
  expect(JSON.parse(res.res?.form.map || "")).toEqual(roundTrip(obj.map));
  expect(JSON.parse(res.res?.form.obj || "")).toEqual(roundTrip(obj.obj));
});

test("Request Body Put Multipart File", async () => {
  recordTest("request-bodies-put-multipart-file");

  const s = new SDK();

  const filePath = path.resolve(__dirname, "./testdata/testUpload.json");
  const data = fs.readFileSync(filePath);

  const res = await s.requestBodies.requestBodyPutMultipartFile({
    file: {
      content: data,
      fileName: "testUpload.json",
    },
  });

  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.files).toEqual({
    file: data.toString(),
  });
});

test("Request Body Put Multipart Different File Name", async () => {
  recordTest("request-bodies-put-different-file-name");

  const s = new SDK();

  const filePath = path.resolve(__dirname, "./testdata/testUpload.json");
  const data = fs.readFileSync(filePath);

  const res = await s.requestBodies.requestBodyPutMultipartDifferentFileName({
    differentFileName: {
      content: data,
      fileName: "testUpload.json",
    },
  });

  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.files).toEqual({
    differentFileName: data.toString(),
  });
});

test("Request Body Post Form Simple", async () => {
  recordTest("request-bodies-post-form-simple");

  const s = new SDK();
  const obj = createSimpleObject();
  const res = await s.requestBodies.requestBodyPostFormSimple(obj);
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.headers.contentType).toEqual(
    "application/x-www-form-urlencoded",
  );
  expect(res.res?.form).toEqual({
    any: "any",
    bool: "true",
    boolOpt: "true",
    date: "2020-01-01",
    dateTime: "2020-01-01T00:00:00.001Z",
    enum: "one",
    float32: "1.1",
    int: "1",
    int32: "1",
    num: "1.1",
    str: "test",
    strOpt: "testOptional",
  });
});

test("Request Body Post Form Deep", async () => {
  recordTest("request-bodies-post-form-deep");

  const s = new SDK();
  const obj = createDeepObject();
  const res = await s.requestBodies.requestBodyPostFormDeep(obj);
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.form).toEqual({
    bool: "true",
    int: "1",
    num: "1.1",
    str: "test",
    arr: expect.anything(),
    map: expect.anything(),
    obj: expect.anything(),
  });

  expect(JSON.parse(res.res?.form.arr || "")).toEqual(roundTrip(obj.arr));
  expect(JSON.parse(res.res?.form.map || "")).toEqual(roundTrip(obj.map));
  expect(JSON.parse(res.res?.form.obj || "")).toEqual(roundTrip(obj.obj));
});

test("Request Body Post Form Map Primitive", async () => {
  recordTest("request-bodies-post-form-map-primitive");

  const s = new SDK();
  const m = {
    key1: "value1",
    key2: "value2",
    key3: "value3",
  };
  const res = await s.requestBodies.requestBodyPostFormMapPrimitive(m);
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.form).toEqual(m);
});

test("Request Body Put String", async () => {
  recordTest("request-bodies-put-string");

  const s = new SDK();
  const str = "Hello World";
  const res = await s.requestBodies.requestBodyPutString(str);
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.data).toEqual(str);
});

test("Request Body Put Bytes", async () => {
  recordTest("request-bodies-put-bytes");

  const s = new SDK();

  const filePath = path.resolve(__dirname, "./testdata/testUpload.json");
  const data = fs.readFileSync(filePath);

  const res = await s.requestBodies.requestBodyPutBytes(data);
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.data).toEqual(data.toString());
});

test("Request Body Put String With Params", async () => {
  recordTest("request-bodies-put-string-with-params");

  const s = new SDK();
  const str = "Hello World";
  const res = await s.requestBodies.requestBodyPutStringWithParams(
    str,
    "test param",
  );
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.data).toEqual(str);
  expect(res.res?.args.queryStringParam).toEqual("test param");
});

test("Request Body Put Bytes With Params", async () => {
  recordTest("request-bodies-put-bytes-with-params");

  const s = new SDK();

  const filePath = path.resolve(__dirname, "./testdata/testUpload.json");
  const data = fs.readFileSync(filePath);

  const res = await s.requestBodies.requestBodyPutBytesWithParams(
    data,
    "test param",
  );
  expect(res.statusCode).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.data).toEqual(data.toString());
  expect(res.res?.args.queryStringParam).toEqual("test param");
});

test("Request Body Post Empty Object", async () => {
  recordTest("request-bodies-post-empty-object");

  const s = new SDK();

  const res = await s.requestBodies.requestBodyPostEmptyObject({});
  expect(res.object).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("Request Body Read Only Input", async () => {
  recordTest("request-bodies-read-only-input");

  const s = new SDK();
  const res = await s.requestBodies.requestBodyReadOnlyInput({});

  expect(res.statusCode).toBe(200);
  expect(res.readOnlyObject).toBeDefined();
  expect(res.readOnlyObject?.bool).toEqual(true);
  expect(res.readOnlyObject?.num).toEqual(1.0);
  expect(res.readOnlyObject?.string).toEqual("hello");
});

test("Request Body Write Only Output", async () => {
  recordTest("request-bodies-write-only-output");

  const s = new SDK();
  const res = await s.requestBodies.requestBodyWriteOnlyOutput({
    bool: true,
    num: 1.0,
    string: "hello",
  });

  expect(res.statusCode).toBe(200);
  expect(res.writeOnlyObject).toBeDefined();
});

test("Request Body Write Only", async () => {
  recordTest("request-bodies-write-only");

  const s = new SDK();
  const res = await s.requestBodies.requestBodyWriteOnly({
    bool: true,
    num: 1.0,
    string: "hello",
  });

  expect(res.statusCode).toBe(200);
  expect(res.readOnlyObject).toBeDefined();
  expect(res.readOnlyObject?.bool).toEqual(true);
  expect(res.readOnlyObject?.num).toEqual(1.0);
  expect(res.readOnlyObject?.string).toEqual("hello");
});

test("Request Body Read And Write", async () => {
  recordTest("request-bodies-read-and-write");

  const s = new SDK();
  const res = await s.requestBodies.requestBodyReadAndWrite({
    num1: 1,
    num2: 2,
    num3: 4,
  });

  expect(res.statusCode).toBe(200);
  expect(res.readWriteObject).toBeDefined();
  expect(res.readWriteObject?.num3).toEqual(4);
  expect(res.readWriteObject?.sum).toEqual(7);
});

test("request body post nullable required property", async () => {
  recordTest("request-bodies-post-nullable-required-property");

  const s = new SDK();
  const testCases: Array<{
    name: string;
    input: NullableRequiredPropertyPostRequestBody;
    expected: unknown;
  }> = [
    {
      name: "Required fields set to null",
      input: {
        nullableRequiredArray: null,
        nullableRequiredEnum: null,
        nullableRequiredInt: null,
      },
      expected: {
        NullableRequiredArray: null,
        NullableRequiredEnum: null,
        NullableRequiredInt: null,
      },
    },
    {
      name: "Optional field set to non-null value",
      input: {
        nullableOptionalInt: 2,
        nullableRequiredArray: null,
        nullableRequiredEnum: null,
        nullableRequiredInt: null,
      },
      expected: {
        NullableOptionalInt: 2,
        NullableRequiredArray: null,
        NullableRequiredEnum: null,
        NullableRequiredInt: null,
      },
    },
    {
      name: "All fields set to non-null value",
      input: {
        nullableOptionalInt: 2,
        nullableRequiredArray: [1, 2, 3],
        nullableRequiredEnum: NullableRequiredEnum.Second,
        nullableRequiredInt: 1,
      },
      expected: {
        NullableOptionalInt: 2,
        NullableRequiredArray: [1, 2, 3],
        NullableRequiredEnum: NullableRequiredEnum.Second,
        NullableRequiredInt: 1,
      },
    },
  ];

  for (const tc of testCases) {
    const result = await s.requestBodies.nullableRequiredPropertyPost(tc.input);

    expect(result.statusCode, tc.name).toEqual(200);
    if (result.res == null) {
      expect.unreachable(
        tc.name + ": Server should have returned a valid response",
      );
    }

    expect(JSON.parse(result.res), tc.name).toHaveProperty("json", tc.expected);
  }
});

test("request body post nullable required shared object", async () => {
  recordTest("request-bodies-post-nullable-required-shared-object");

  const s = new SDK();
  const testCases: Array<{
    name: string;
    input: NullableRequiredSharedObjectPostRequestBody;
    expected: unknown;
  }> = [
    {
      name: "All required fields set to null",
      input: {
        nullableRequiredObj: null,
      },
      expected: {
        NullableRequiredObj: null,
      },
    },
    {
      name: "Optional field set only",
      input: {
        nullableOptionalObj: { required: 1 },
        nullableRequiredObj: null,
      },
      expected: {
        NullableOptionalObj: { required: 1 },
        NullableRequiredObj: null,
      },
    },
    {
      name: "All fields set to non-null value",
      input: {
        nullableOptionalObj: { required: 1, optional: "test" },
        nullableRequiredObj: { required: 2 },
      },
      expected: {
        NullableOptionalObj: { required: 1, optional: "test" },
        NullableRequiredObj: { required: 2 },
      },
    },
  ];

  for (const tc of testCases) {
    const result = await s.requestBodies.nullableRequiredSharedObjectPost(
      tc.input,
    );

    expect(result.statusCode, tc.name).toEqual(200);
    if (result.res == null) {
      expect.unreachable(
        tc.name + ": Server should have returned a valid response",
      );
    }

    expect(JSON.parse(result.res), tc.name).toHaveProperty("json", tc.expected);
  }
});

test("request body post nullable required empty object", async () => {
  recordTest("request-bodies-post-nullable-required-empty-object");

  const s = new SDK();
  const testCases: Array<{
    name: string;
    input: NullableRequiredEmptyObjectPostRequestBody;
    expected: unknown;
  }> = [
    {
      name: "Nullable fields set to null",
      input: {
        requiredObj: {},
        nullableOptionalObj: null,
        nullableRequiredObj: null,
      },
      expected: {
        NullableOptionalObj: null,
        NullableRequiredObj: null,
        RequiredObj: {},
      },
    },
    {
      name: "Optional field set to non-null value",
      input: {
        nullableOptionalObj: {},
        nullableRequiredObj: null,
        requiredObj: {},
      },
      expected: {
        NullableOptionalObj: {},
        NullableRequiredObj: null,
        RequiredObj: {},
      },
    },
    {
      name: "All fields set to non-null value",
      input: {
        requiredObj: {},
        nullableOptionalObj: {},
        nullableRequiredObj: {},
      },
      expected: {
        NullableOptionalObj: {},
        NullableRequiredObj: {},
        RequiredObj: {},
      },
    },
  ];

  for (const tc of testCases) {
    const result = await s.requestBodies.nullableRequiredEmptyObjectPost(
      tc.input,
    );

    expect(result.statusCode, tc.name).toEqual(200);
    if (result.res == null) {
      expect.unreachable(
        tc.name + ": Server should have returned a valid response",
      );
    }

    expect(JSON.parse(result.res), tc.name).toHaveProperty("json", tc.expected);
  }
});

test("request body read only union", async () => {
  recordTest("request-bodies-read-only-union");

  const s = new SDK();

  const result = await s.requestBodies.requestBodyReadOnlyUnion({});

  expect(result.statusCode).toEqual(200);
  if (result.weaklyTypedOneOfReadOnlyObject == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  if (!("string" in result.weaklyTypedOneOfReadOnlyObject)) {
    expect.unreachable("Server should have returned a ReadOnlyObject");
  }

  expect(result.weaklyTypedOneOfReadOnlyObject?.num).toEqual(1.0);
  expect(result.weaklyTypedOneOfReadOnlyObject?.string).toEqual("hello");
  expect(result.weaklyTypedOneOfReadOnlyObject?.bool).toEqual(true);
});

test("request body write only union", async () => {
  recordTest("request-bodies-write-only-union");

  const s = new SDK();

  const result = await s.requestBodies.requestBodyWriteOnlyUnion({
    bool: true,
    num: 1.0,
    string: "hello",
  });

  expect(result.statusCode).toEqual(200);
  expect(result.weaklyTypedOneOfWriteOnlyObject).toEqual({});
});

test("request body read write only union", async () => {
  recordTest("request-bodies-read-write-only-union");

  const s = new SDK();

  const result = await s.requestBodies.requestBodyReadWriteOnlyUnion({
    num1: 1,
    num2: 2,
    num3: 4,
  });

  expect(result.statusCode).toEqual(200);
  expect(result.weaklyTypedOneOfReadWriteObject).toEqual({
    num3: 4,
    sum: 7,
  });
});

test("request body post complex number types", async () => {
  recordTest("request-bodies-complex-number-types");

  const s = new SDK();

  const req: RequestBodyPostComplexNumberTypesRequest = {
    complexNumberTypes: {
      bigint: BigInt(9007199254740991),
      bigintStr: BigInt("9223372036854775807"),
      decimal: new Decimal("3.141592653589793"),
      decimalStr: new Decimal("3.141592653589793238462643383279"),
    },
    pathBigInt: BigInt(9007199254740991),
    pathBigIntStr: BigInt("9223372036854775807"),
    pathDecimal: new Decimal("3.141592653589793"),
    pathDecimalStr: new Decimal("3.141592653589793238462643383279"),
    queryBigInt: BigInt(9007199254740991),
    queryBigIntStr: BigInt("9223372036854775807"),
    queryDecimal: new Decimal("3.141592653589793"),
    queryDecimalStr: new Decimal("3.141592653589793238462643383279"),
  };

  const result = await s.requestBodies.requestBodyPostComplexNumberTypes(req);

  expect(result.statusCode).toEqual(200);
  expect(result.object?.json).toEqual(req.complexNumberTypes);
  expect(result.object?.url).toEqual(
    "http://localhost:35123/anything/requestBodies/post/9007199254740991/9223372036854775807/3.141592653589793/3.141592653589793238462643383279/complex-number-types?queryBigInt=9007199254740991&queryBigIntStr=9223372036854775807&queryDecimal=3.141592653589793&queryDecimalStr=3.141592653589793238462643383279",
  );
});

test("request body post json data types bigint", async () => {
  recordTest("request-bodies-post-json-data-types-bigint");

  const s = new SDK();

  const result = await s.requestBodies.requestBodyPostJsonDataTypesBigInt(
    BigInt("1"),
  );

  expect(result.statusCode).toEqual(200);
  expect(result.object?.json).toEqual(BigInt("1"));
  expect(result.object?.data).toEqual("1");
});

test("request body post json data types bigint str", async () => {
  recordTest("request-bodies-post-json-data-types-bigint-str");

  const s = new SDK();

  const result = await s.requestBodies.requestBodyPostJsonDataTypesBigIntStr(
    BigInt("1"),
  );

  expect(result.statusCode).toEqual(200);
  expect(result.object?.json).toEqual(BigInt("1"));
  expect(result.object?.data).toEqual('"1"');
});

test("request body post json data types array bigint", async () => {
  recordTest("request-bodies-post-json-data-types-array-bigint");

  const s = new SDK();

  const result = await s.requestBodies.requestBodyPostJsonDataTypesArrayBigInt([
    BigInt("1"),
  ]);

  expect(result.statusCode).toEqual(200);
  expect(result.object?.json).toEqual([BigInt("1")]);
  expect(result.object?.data).toEqual("[1]");
});

test("request body post json data types map bigint str", async () => {
  recordTest("request-bodies-post-json-data-types-map-bigint-str");

  const s = new SDK();

  const result = await s.requestBodies.requestBodyPostJsonDataTypesMapBigIntStr(
    { test: BigInt("1") },
  );

  expect(result.statusCode).toEqual(200);
  expect(result.object?.json).toEqual({ test: BigInt("1") });
  expect(result.object?.data).toEqual('{"test":"1"}');
});

test("request body post json data types boolean", async () => {
  recordTest("request-bodies-post-json-data-types-boolean");

  const s = new SDK();

  const result =
    await s.requestBodies.requestBodyPostJsonDataTypesBoolean(true);

  expect(result.statusCode).toEqual(200);
  expect(result.object?.json).toEqual(true);
});

test("request body post json data types date time", async () => {
  recordTest("request-bodies-post-json-data-types-date-time");

  const s = new SDK();

  const d = new Date("2020-01-01T00:00:00Z");

  const result = await s.requestBodies.requestBodyPostJsonDataTypesDateTime(d);

  expect(result.statusCode).toEqual(200);
  expect(result.object?.json).toEqual(d);
  expect(result.object?.data).toEqual('"2020-01-01T00:00:00.000Z"');
});

test("request body post json data types map date time", async () => {
  recordTest("request-bodies-post-json-data-types-map-date-time");

  const s = new SDK();

  const d = new Date("2020-01-01T00:00:00.000000001Z");

  const result = await s.requestBodies.requestBodyPostJsonDataTypesMapDateTime({
    test: new Date("2020-01-01T00:00:00.000000001Z"),
  });

  expect(result.statusCode).toEqual(200);
  expect(result.object?.json).toEqual({ test: d });
  // WARNING: precision loss expected
  expect(result.object?.data).toEqual('{"test":"2020-01-01T00:00:00.000Z"}');
});

test("request body post json data types integer", async () => {
  recordTest("request-bodies-post-json-data-types-integer");

  const s = new SDK();

  const result = await s.requestBodies.requestBodyPostJsonDataTypesInteger(1);

  expect(result.statusCode).toEqual(200);
  expect(result.object?.json).toEqual(1);
});

test("request body post json data types int32", async () => {
  recordTest("request-bodies-post-json-data-types-int32");

  const s = new SDK();

  const result = await s.requestBodies.requestBodyPostJsonDataTypesInt32(1);

  expect(result.statusCode).toEqual(200);
  expect(result.object?.json).toEqual(1);
});

test("request body post json data types string", async () => {
  recordTest("request-bodies-post-json-data-types-string");

  const s = new SDK();

  const result =
    await s.requestBodies.requestBodyPostJsonDataTypesString("test");

  expect(result.statusCode).toEqual(200);
  expect(result.object?.json).toEqual("test");
});

test("request body post json data types date", async () => {
  recordTest("request-bodies-post-json-data-types-date");

  const s = new SDK();

  const d = new RFCDate("2020-01-01");

  const result = await s.requestBodies.requestBodyPostJsonDataTypesDate(d);

  expect(result.statusCode).toEqual(200);
  expect(result.object?.json).toEqual(d);
  expect(result.object?.data).toEqual('"2020-01-01"');
});

test("request body post json data types array date", async () => {
  recordTest("request-bodies-post-json-data-types-array-date");

  const s = new SDK();

  const d = new RFCDate("2020-01-01");

  const result = await s.requestBodies.requestBodyPostJsonDataTypesArrayDate([
    d,
  ]);

  expect(result.statusCode).toEqual(200);
  expect(result.object?.json).toEqual([d]);
  expect(result.object?.data).toEqual('["2020-01-01"]');
});

test("request body post json data types decimal", async () => {
  recordTest("request-bodies-post-json-data-types-decimal");

  const s = new SDK();

  const result = await s.requestBodies.requestBodyPostJsonDataTypesDecimal(
    new Decimal("1.1"),
  );

  expect(result.statusCode).toEqual(200);
  expect(result.object?.json).toEqual(new Decimal("1.1"));
  expect(result.object?.data).toEqual("1.1");
});

test("request body post json data types decimal str", async () => {
  recordTest("request-bodies-post-json-data-types-decimal-str");

  const s = new SDK();

  const result = await s.requestBodies.requestBodyPostJsonDataTypesDecimalStr(
    new Decimal("1.1"),
  );

  expect(result.statusCode).toEqual(200);
  expect(result.object?.json).toEqual(new Decimal("1.1"));
  expect(result.object?.data).toEqual('"1.1"');
});

test("request body post json data types array decimal str", async () => {
  recordTest("request-bodies-post-json-data-types-array-decimal-str");

  const s = new SDK();

  const d = new Decimal("3.141592653589793438462643383279");

  const result =
    await s.requestBodies.requestBodyPostJsonDataTypesArrayDecimalStr([d]);

  expect(result.statusCode).toEqual(200);
  expect(result.object?.json).toEqual([d]);
  expect(result.object?.data).toEqual('["3.141592653589793438462643383279"]');
});

test("request body post json data types map decimal", async () => {
  recordTest("request-bodies-post-json-data-types-map-decimal");

  const s = new SDK();

  const d = new Decimal("3.141592653589793");

  const result = await s.requestBodies.requestBodyPostJsonDataTypesMapDecimal({
    test: d,
  });

  expect(result.statusCode).toEqual(200);
  expect(result.object?.json).toEqual({
    test: new Decimal("3.141592653589793"),
  });
  expect(result.object?.data).toEqual('{"test":3.141592653589793}');
});

test("request body post json data types number", async () => {
  recordTest("request-bodies-post-json-data-types-number");

  const s = new SDK();

  const result = await s.requestBodies.requestBodyPostJsonDataTypesNumber(1.1);

  expect(result.statusCode).toEqual(200);
  expect(result.object?.json).toEqual(1.1);
});

test("request body post json data types float32", async () => {
  recordTest("request-bodies-post-json-data-types-float32");

  const s = new SDK();

  const result = await s.requestBodies.requestBodyPostJsonDataTypesFloat32(1.1);

  expect(result.statusCode).toEqual(200);
  expect(result.object?.json).toEqual(1.1);
});

test("request body post nullable not required string body", async () => {
  recordTest("request-bodies-post-nullable-not-required-string-body");

  const s = new SDK();

  let result =
    await s.requestBodies.requestBodyPostNullableNotRequiredStringBody(
      undefined,
    );

  expect(result.statusCode).toEqual(200);
  expect(result.object?.data).toEqual("");

  result =
    await s.requestBodies.requestBodyPostNullableNotRequiredStringBody(null);

  expect(result.statusCode).toEqual(200);
  expect(result.object?.data).toEqual("null");
});

test("request body post nullable required string body", async () => {
  recordTest("request-bodies-post-nullable-required-string-body");

  const s = new SDK();

  const result =
    await s.requestBodies.requestBodyPostNullableRequiredStringBody(null);

  expect(result.statusCode).toEqual(200);
  expect(result.object?.data).toEqual("null");
});

test("request body post not nullable not required string body", async () => {
  recordTest("request-bodies-post-not-nullable-not-required-string-body");

  const s = new SDK();

  const result =
    await s.requestBodies.requestBodyPostNotNullableNotRequiredStringBody(
      undefined,
    );

  expect(result.statusCode).toEqual(200);
  expect(result.object?.data).toEqual("");
});

test("request body post defaults and consts", async () => {
  recordTest("request-bodies-defaults-and-consts");

  const req: DefaultsAndConsts = {
    normalField: "normal",
    defaultStr: "not default",
    constBigInt: BigInt("9007199254740991") as 9007199254740991n,
    constBigIntStr: BigInt("9223372036854775807") as 9223372036854775807n,
    constBool: true,
    constDate: new RFCDate("2020-01-01"),
    constDateTime: new Date("2020-01-01T00:00:00Z"),
    constDecimal: new Decimal("3.141592653589793"),
    constDecimalStr: new Decimal("3.141592653589793238462643383279"),
    constEnumInt: ConstEnumInt.Two,
    constEnumStr: ConstEnumStr.Two,
    constInt: 123,
    constNum: 123.456,
    constStr: "const",
    constStrNull: null,
  };

  const parsed = DefaultsAndConsts$.outboundSchema.parse(req);
  expect(parsed).toEqual({
    normalField: "normal",
    defaultStr: "not default",

    constBigInt: 9007199254740991,
    constBigIntStr: "9223372036854775807",
    constBool: true,
    constDate: "2020-01-01",
    constDateTime: "2020-01-01T00:00:00.000Z",
    constDecimal: 3.141592653589793,
    constDecimalStr: "3.141592653589793238462643383279",
    constEnumInt: ConstEnumInt.Two,
    constEnumStr: ConstEnumStr.Two,
    constInt: 123,
    constNum: 123.456,
    constStr: "const",
    constStrNull: null,

    defaultBigInt: 9007199254740991,
    defaultBigIntStr: "9223372036854775807",
    defaultBool: true,
    defaultDate: "2020-01-01",
    defaultDateTime: "2020-01-01T00:00:00.000Z",
    defaultDecimal: 3.141592653589793,
    defaultDecimalStr: "3.141592653589793238462643383279",
    defaultEnumInt: DefaultEnumInt.Two,
    defaultEnumStr: DefaultEnumStr.Two,
    defaultInt: 123,
    defaultNum: 123.456,
    defaultStrNullable: null,
    defaultStrOptional: "default",
  } satisfies DefaultsAndConsts$.Outbound);

  const s = new SDK();
  const result = await s.requestBodies.requestBodyPostDefaultsAndConsts(req);

  expect(result.statusCode).toEqual(200);
  expect(result.object?.json).toEqual({
    normalField: "normal",
    defaultStr: "not default",
    constBigInt: BigInt("9007199254740991") as 9007199254740991n,
    constBigIntStr: BigInt("9223372036854775807") as 9223372036854775807n,
    constBool: true,
    constDate: new RFCDate("2020-01-01"),
    constDateTime: new Date("2020-01-01T00:00:00Z"),
    constDecimal: new Decimal("3.141592653589793"),
    constDecimalStr: new Decimal("3.141592653589793238462643383279"),
    constEnumInt: DefaultsAndConstsOutputConstEnumInt.Two,
    constEnumStr: DefaultsAndConstsOutputConstEnumStr.Two,
    constInt: 123,
    constNum: 123.456,
    constStr: "const",
    constStrNull: null,

    defaultBigInt: BigInt("9007199254740991"),
    defaultBigIntStr: BigInt("9223372036854775807"),
    defaultBool: true,
    defaultDate: new RFCDate("2020-01-01"),
    defaultDateTime: new Date("2020-01-01T00:00:00Z"),
    defaultDecimal: new Decimal("3.141592653589793"),
    defaultDecimalStr: new Decimal("3.141592653589793238462643383279"),
    defaultEnumInt: DefaultsAndConstsOutputDefaultEnumInt.Two,
    defaultEnumStr: DefaultsAndConstsOutputDefaultEnumStr.Two,
    defaultInt: 123,
    defaultNum: 123.456,
    defaultStrNullable: null,
    defaultStrOptional: "default",
  } satisfies DefaultsAndConstsOutput);
});
