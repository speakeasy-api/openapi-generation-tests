/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as fs from "fs";
import * as path from "path";

import { expect, test } from "vitest";

import { NullableRequiredPropertyPostRequestBody } from "../sdk/models/operations/nullablerequiredpropertypost.js";
import { SDK } from "../index.js";
import { recordTest } from "./common_helpers.js";

test("Request Body Post Multiple Content Types Split JSON", async () => {
  recordTest("request-bodies-post-multiple-content-types-split-json");

  const s = new SDK();
  const res =
    await s.requestBodies.requestBodyPostMultipleContentTypesSplitJson({
      bool: true,
      num: 1.1,
      str: "test",
    });
  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.json).toEqual({
    bool: true,
    num: 1.1,
    str: "test",
  });
});

test("Request Body Post Multiple Content Types Split Multipart", async () => {
  recordTest("request-bodies-post-multiple-content-types-split-multipart");

  const s = new SDK();
  const res =
    await s.requestBodies.requestBodyPostMultipleContentTypesSplitMultipart({
      bool2: true,
      num2: 1.1,
      str2: "test",
    });
  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.form).toEqual({
    bool2: "true",
    num2: "1.1",
    str2: "test",
  });
});

test("Request Body Post Multiple Content Types Split Form", async () => {
  recordTest("request-bodies-post-multiple-content-types-split-form");

  const s = new SDK();
  const res =
    await s.requestBodies.requestBodyPostMultipleContentTypesSplitForm({
      bool3: true,
      num3: 1.1,
      str3: "test",
    });
  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.form).toEqual({
    bool3: "true",
    num3: "1.1",
    str3: "test",
  });
});

test("Request Body Post Multiple Content Types Split JSON With Param", async () => {
  recordTest(
    "request-bodies-post-multiple-content-types-split-json-with-param",
  );

  const s = new SDK();
  const res =
    await s.requestBodies.requestBodyPostMultipleContentTypesSplitParamJson(
      {
        bool: true,
        num: 1.1,
        str: "test body",
      },
      "test param",
    );
  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.json).toEqual({
    bool: true,
    num: 1.1,
    str: "test body",
  });
  expect(res.res?.args).toEqual({
    paramStr: "test param",
  });
});

test("Request Body Post Multiple Content Types Split Multipart With Param", async () => {
  recordTest(
    "request-bodies-post-multiple-content-types-split-multipart-with-param",
  );

  const s = new SDK();
  const res =
    await s.requestBodies.requestBodyPostMultipleContentTypesSplitParamMultipart(
      {
        bool2: true,
        num2: 1.1,
        str2: "test body",
      },
      "test param",
    );
  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.form).toEqual({
    bool2: "true",
    num2: "1.1",
    str2: "test body",
  });
  expect(res.res?.args).toEqual({
    paramStr: "test param",
  });
});

test("Request Body Post Multiple Content Types Split Form With Parameter", async () => {
  recordTest(
    "request-bodies-post-multiple-content-types-split-form-with-param",
  );

  const s = new SDK();
  const res =
    await s.requestBodies.requestBodyPostMultipleContentTypesSplitParamForm(
      {
        bool3: true,
        num3: 1.1,
        str3: "test body",
      },
      "test param",
    );
  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.form).toEqual({
    bool3: "true",
    num3: "1.1",
    str3: "test body",
  });
  expect(res.res?.args).toEqual({
    paramStr: "test param",
  });
});

test("Request Body Put Multipart File", async () => {
  recordTest("request-bodies-put-multipart-file");

  const s = new SDK();

  const filePath = path.resolve(__dirname, "./testdata/testUpload.json");
  const data = fs.readFileSync(filePath);

  const res = await s.requestBodies.requestBodyPutMultipartFile({
    file: {
      content: data,
      fileName: "testUpload.json",
    },
  });

  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.files).toEqual({
    file: data.toString(),
  });
});

test("Request Body Put Multipart Different File Name", async () => {
  recordTest("request-bodies-put-different-file-name");

  const s = new SDK();

  const filePath = path.resolve(__dirname, "./testdata/testUpload.json");
  const data = fs.readFileSync(filePath);

  const res = await s.requestBodies.requestBodyPutMultipartDifferentFileName({
    differentFileName: {
      content: data,
      fileName: "testUpload.json",
    },
  });

  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.files).toEqual({
    differentFileName: data.toString(),
  });
});

test("Request Body Put Bytes", async () => {
  recordTest("request-bodies-put-bytes");

  const s = new SDK();

  const filePath = path.resolve(__dirname, "./testdata/testUpload.json");
  const data = fs.readFileSync(filePath);

  const res = await s.requestBodies.requestBodyPutBytes(data);
  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.data).toEqual(data.toString());
});

test("Request Body Put Bytes With Params", async () => {
  recordTest("request-bodies-put-bytes-with-params");

  const s = new SDK();

  const filePath = path.resolve(__dirname, "./testdata/testUpload.json");
  const data = fs.readFileSync(filePath);

  const res = await s.requestBodies.requestBodyPutBytesWithParams(
    data,
    "test param",
  );
  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.data).toEqual(data.toString());
  expect(res.res?.args.queryStringParam).toEqual("test param");
});

test("request body post nullable required property", async () => {
  const s = new SDK();
  const testCases: Array<{
    name: string;
    input: NullableRequiredPropertyPostRequestBody;
    expected: unknown;
  }> = [
    {
      name: "Optional field set to non-null value",
      input: {
        nullableOptionalInt: 2,
        nullableRequiredArray: null,
        nullableRequiredEnum: null,
        nullableRequiredInt: null,
        nullableRequiredDateTime: null,
        nullableRequiredBigIntStr: null,
        nullableRequiredDecimalStr: null,
      },
      expected: {
        NullableOptionalInt: 2,
        NullableRequiredArray: null,
        NullableRequiredBigIntStr: null,
        NullableRequiredDateTime: null,
        NullableRequiredDecimalStr: null,
        NullableRequiredEnum: null,
        NullableRequiredInt: null,
      },
    },
  ];

  for (const tc of testCases) {
    const result = await s.requestBodies.nullableRequiredPropertyPost(tc.input);

    expect(result.httpMeta.response.status, tc.name).toEqual(200);
    if (result.object == null) {
      expect.unreachable(
        tc.name + ": Server should have returned a valid response",
      );
    }

    expect(result.object.data).toBeDefined();
    expect(JSON.parse(result.object.data ?? "")).toEqual(tc.expected);
  }
});

test("request body post nullable not required string body", async () => {
  recordTest("request-bodies-post-nullable-not-required-string-body");

  const s = new SDK();

  let result =
    await s.requestBodies.requestBodyPostNullableNotRequiredStringBody(
      undefined,
    );

  expect(result.httpMeta.response.status).toEqual(200);
  expect(result.object?.data).toEqual("");

  result =
    await s.requestBodies.requestBodyPostNullableNotRequiredStringBody(null);

  expect(result.httpMeta.response.status).toEqual(200);
  expect(result.object?.data).toEqual("null");
});

test("request body post nullable required string body", async () => {
  recordTest("request-bodies-post-nullable-required-string-body");

  const s = new SDK();

  const result =
    await s.requestBodies.requestBodyPostNullableRequiredStringBody(null);

  expect(result.httpMeta.response.status).toEqual(200);
  expect(result.object?.data).toEqual("null");
});
