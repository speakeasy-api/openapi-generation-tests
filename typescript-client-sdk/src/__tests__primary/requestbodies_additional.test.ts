/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as fs from "fs";
import * as path from "path";

import { expect, test } from "vitest";

import { SDK } from "../index.js";
import { recordTest } from "./common_helpers.js";

// TODO: the mutlipart tests need to be converted to be generated automatically by test generation
// This requires an additional piece of work to remove the special casing across the codebase for multipart
// type requests (see isMultipartFileField)
test("Request Body Put Multipart File", async () => {
  recordTest("request-bodies-put-multipart-file");

  const s = new SDK();

  const filePath = path.resolve(__dirname, "./testdata/testUpload.json");
  const data = fs.readFileSync(filePath);

  const res = await s.requestBodies.requestBodyPutMultipartFile({
    file: {
      content: data,
      fileName: "testUpload.json",
    },
  });

  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.files).toEqual({
    file: data.toString(),
  });
});

test("Request Body Put Multipart Different File Name", async () => {
  recordTest("request-bodies-put-different-file-name");

  const s = new SDK();

  const filePath = path.resolve(__dirname, "./testdata/testUpload.json");
  const data = fs.readFileSync(filePath);

  const res = await s.requestBodies.requestBodyPutMultipartDifferentFileName({
    differentFileName: {
      content: data,
      fileName: "testUpload.json",
    },
  });

  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.files).toEqual({
    differentFileName: data.toString(),
  });
});
