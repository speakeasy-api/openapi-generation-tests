/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as fs from "fs";
import * as path from "path";

import { expect, test } from "vitest";

import { SDK } from "../index.js";
import { filesToByteArray } from "./files.js";
import { recordTest } from "./common_helpers.js";

test("Request Body Put Multipart File", async () => {
  recordTest("request-bodies-put-multipart-file");

  const s = new SDK();

  const filePath = path.resolve(__dirname, "./testdata/testUpload.json");
  const data = fs.readFileSync(filePath);

  const res = await s.requestBodies.requestBodyPutMultipartFile({
    file: {
      content: await filesToByteArray(filePath),
      fileName: "testUpload.json",
    },
  });

  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.files).toEqual({
    file: data.toString(),
  });
});

test("Request Body Put Multipart File Ref", async () => {
  recordTest("request-bodies-put-multipart-file-ref");

  const s = new SDK();

  const filePath = path.resolve(__dirname, "./testdata/testUpload.json");
  const data = fs.readFileSync(filePath);

  const res = await s.requestBodies.requestBodyPutMultipartFileRef({
    file: {
      content: await filesToByteArray(filePath),
      fileName: "testUpload.json",
    },
  });

  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.files).toEqual({
    file: data.toString(),
  });
});

test("Request Body Put Bytes", async () => {
  recordTest("request-bodies-put-bytes");

  const s = new SDK();

  const filePath = path.resolve(__dirname, "./testdata/testUpload.json");
  const data = fs.readFileSync(filePath);

  const res = await s.requestBodies.requestBodyPutBytes(
    await filesToByteArray(filePath),
  );

  expect(res.httpMeta.response.status).toBe(200);
  expect(res.res).toBeDefined();
  expect(res.res?.data).toEqual(data.toString());
});

test("Request Body No Body No Content Type", async () => {
  recordTest("request-bodies-no-body-no-content-type");

  const s = new SDK();

  const res = await s.methods.methodGet({
    serverURL: "http://localhost:35456",
  });

  expect(res.httpMeta.request.body).toBe(null);
  expect(res.httpMeta.request.headers.get("content-type")).toBe(null);

  expect(res.httpMeta.response.status).toBe(200);
  expect(res.object).toEqual({ status: "OK" });
});
