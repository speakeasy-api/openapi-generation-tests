/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK, ServerList, ServerSomething } from "..";
import {
  SelectServerWithIDServerBroken,
  SelectServerWithIDServerList,
  SelectServerWithIDServerValid,
  ServerWithTemplatesServerList,
} from "../sdk/models/operations";
import { expect, test } from "vitest";

import { pathToFunc } from "../lib/url";
import { recordTest } from "./common_helpers";

test("Test Select Global Server Valid", async () => {
  recordTest("servers-select-global-server-valid");

  const sdk = new SDK({ serverURL: ServerList[0] });
  const res = await sdk.servers.selectGlobalServer();
  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("Test Select Global Server Broken", async () => {
  recordTest("servers-select-global-server-broken");

  const sdk = new SDK({ serverIdx: 1 });
  return sdk.servers.selectGlobalServer().catch((err: unknown) => {
    if (!(err instanceof TypeError)) {
      expect.unreachable("Expected error to be an object");
    }
    if (!("cause" in err) || !(err.cause instanceof Error)) {
      expect.unreachable("Expected error to have an underlying cause");
    }
    if (!("code" in err.cause) || typeof err.cause.code !== "string") {
      expect.unreachable(
        "Expected underlying error to have a code property set to a string",
      );
    }

    expect(err.cause.code).toMatch(/^(ENOTFOUND|EAI_AGAIN)$/);
  });
});

test("Test Select Server With ID Default", async () => {
  recordTest("servers-select-server-with-id-default");

  const sdk = new SDK();
  const res = await sdk.servers.selectServerWithID();
  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("Test Select Server With ID Valid", async () => {
  recordTest("servers-select-server-with-id-valid");

  const sdk = new SDK();
  const res = await sdk.servers.selectServerWithID({
    serverURL: SelectServerWithIDServerList[SelectServerWithIDServerValid],
  });
  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("Test Select Server With ID Broken", async () => {
  recordTest("servers-select-server-with-id-broken");

  const sdk = new SDK();
  return sdk.servers
    .selectServerWithID({
      serverURL: SelectServerWithIDServerList[SelectServerWithIDServerBroken],
    })
    .catch((err: unknown) => {
      if (!(err instanceof TypeError)) {
        expect.unreachable("Expected error to be an object");
      }
      if (!("cause" in err) || !(err.cause instanceof Error)) {
        expect.unreachable("Expected error to have an underlying cause");
      }
      if (!("code" in err.cause) || typeof err.cause.code !== "string") {
        expect.unreachable(
          "Expected underlying error to have a code property set to a string",
        );
      }

      expect(err.cause.code).toMatch(/^(ENOTFOUND|EAI_AGAIN)$/);
    });
});

test("Test Server with Templates Global", async () => {
  recordTest("servers-server-with-templates-global");

  const sdk = new SDK({
    serverIdx: 2,
    hostname: "localhost",
    port: "35123",
  });

  const res = await sdk.servers.serverWithTemplatesGlobal();
  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("Test Server with Templates Global Defaults", async () => {
  recordTest("servers-server-with-templates-global-defaults");

  const sdk = new SDK({
    serverIdx: 2,
  });

  const res = await sdk.servers.serverWithTemplatesGlobal();
  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("Test Server with Templates Global Enum", async () => {
  recordTest("servers-server-with-templates-global-enum");

  const sdk = new SDK({
    serverIdx: 3,
    something: ServerSomething.SomethingElseAgain,
  });

  const res = await sdk.servers.serverWithTemplatesGlobal();
  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("Test Server with Templates", async () => {
  recordTest("servers-server-with-templates");

  const sdk = new SDK();

  const serverURL = pathToFunc(ServerWithTemplatesServerList[0])({
    hostname: "localhost",
    port: "35123",
  });

  const res = await sdk.servers.serverWithTemplates({ serverURL });

  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("Test Server with Templates Defaults", async () => {
  recordTest("servers-server-with-templates-defaults");

  const sdk = new SDK();

  const res = await sdk.servers.serverWithTemplates();

  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("Test Server by ID with Templates", async () => {
  recordTest("servers-server-by-id-with-templates");

  const sdk = new SDK();

  const res = await sdk.servers.serversByIDWithTemplates();

  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
});

test("Test Servers Global Server With Templated Protocol", async () => {
  recordTest("servers-global-server-with-templated-protocol");

  const sdk = new SDK({
    serverIdx: 4,
    protocol: "http",
    hostname: "localhost",
    port: "35123",
  });

  const res = await sdk.servers.selectGlobalServer();

  expect(res.statusCode).toBeDefined();
  expect(res.statusCode).toBe(200);
  expect(res.rawResponse.url).toEqual(
    "http://localhost:35123/anything/selectGlobalServer",
  );
});

test("Test Servers Global Server With Invalid Templated Protocol", async () => {
  recordTest("servers-global-server-with-invalid-templated-protocol");

  const sdk = new SDK({
    serverIdx: 4,
    protocol: "invalid",
    hostname: "localhost",
    port: "35123",
  });

  try {
    await sdk.servers.selectGlobalServer();
    expect.unreachable("Expected error to be thrown");
  } catch (err) {
    expect(err).toHaveProperty("message", "fetch failed");
    expect(err).toHaveProperty("cause", expect.any(Error));
    expect(err).toHaveProperty(["cause", "message"], "unknown scheme");
  }
});
