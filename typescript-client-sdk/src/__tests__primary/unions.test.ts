/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal, RFCDate } from "../sdk/types";
import {
  Enum,
  NullableOneOfRefInObject,
  NullableOneOfTypeInObject,
  SimpleObjectWithNonStandardTypeNameInt32Enum,
  SimpleObjectWithNonStandardTypeNameIntEnum,
  SimpleObjectWithTypeInt32Enum,
  SimpleObjectWithTypeIntEnum,
  StronglyTypedOneOfObject,
  StronglyTypedOneOfObjectWithNonStandardDiscriminatorName,
  TypedObject1,
  TypedObject1Type,
  TypedObject2,
  TypedObject2Type,
  TypedObject3,
  TypedObject3Type,
  TypedObjectNullableOneOf,
  TypedObjectOneOf,
  WeaklyTypedOneOfObject,
} from "../sdk/models/shared";
import { createDeepObject, createSimpleObject } from "./primary_helpers";
import { expect, test } from "vitest";

import { SDK } from "..";
import { SDKValidationError } from "../sdk/models/errors";
import { ZodError } from "zod";
import { recordTest } from "./common_helpers";

test("strongly typed one of post basic", async () => {
  recordTest("unions-strongly-typed-one-of-post-basic");

  const sdk = new SDK();
  const req: StronglyTypedOneOfObject = {
    type: "simpleObjectWithType",
    str: "test",
    bool: true,
    int: 1,
    int32: 1,
    intEnum: SimpleObjectWithTypeIntEnum.Second,
    int32Enum: SimpleObjectWithTypeInt32Enum.FiftyFive,
    num: 1.1,
    float32: 1.1,
    enum: Enum.One,
    any: "any",
    date: new RFCDate("2020-01-01"),
    dateTime: new Date("2020-01-01"),
    boolOpt: true,
    strOpt: "testOptional",
  };

  const result = await sdk.unions.stronglyTypedOneOfPost(req);

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toEqual(req);
});

test("one of made up of collections", async () => {
  recordTest("unions-collections-one-of-post");

  const sdk = new SDK();

  const req = ["one", "two"];

  const result = await sdk.unions.collectionOneOfPost(req);

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toEqual(req);

  const req2 = { "1": "one", "2": "two" };

  const result2 = await sdk.unions.collectionOneOfPost(req2);

  if (result2.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result2.httpMeta.response.status).toEqual(200);
  expect(result2.res.json).toEqual(req2);
});

test("strongly typed one of post with non standard discriminator name", async () => {
  recordTest(
    "unions-strongly-typed-one-of-post-with-non-standard-discriminator-name",
  );

  const sdk = new SDK();
  const req: StronglyTypedOneOfObjectWithNonStandardDiscriminatorName = {
    objType: "simpleObjectWithNonStandardTypeName",
    str: "test",
    bool: true,
    int: 1,
    int32: 1,
    intEnum: SimpleObjectWithNonStandardTypeNameIntEnum.Second,
    int32Enum: SimpleObjectWithNonStandardTypeNameInt32Enum.FiftyFive,
    num: 1.1,
    float32: 1.1,
    enum: Enum.One,
    any: "any",
    date: new RFCDate("2020-01-01"),
    dateTime: new Date("2020-01-01"),
    boolOpt: true,
    strOpt: "testOptional",
  };

  const result =
    await sdk.unions.stronglyTypedOneOfPostWithNonStandardDiscriminatorName(
      req,
    );

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toEqual(req);
});

test("strongly typed one of post deep", async () => {
  recordTest("unions-strongly-typed-one-of-post-deep");

  const sdk = new SDK();
  const req: StronglyTypedOneOfObject = {
    any: createSimpleObject(),
    type: "deepObjectWithType",
    num: 1.1,
    bool: true,
    int: 1,
    str: "test",
    obj: createSimpleObject(),
    map: { key: createSimpleObject() },
    arr: [createSimpleObject(), createSimpleObject()],
  };

  const result = await sdk.unions.stronglyTypedOneOfPost(req);

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toEqual(req);
});

test("weakly typed one of post basic", async () => {
  recordTest("unions-weakly-typed-one-of-post-basic");

  const sdk = new SDK();
  const obj = createSimpleObject();
  const req: WeaklyTypedOneOfObject = obj;

  const result = await sdk.unions.weaklyTypedOneOfPost(req);

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toEqual(obj);
});

test("weakly typed one of post deep", async () => {
  recordTest("unions-weakly-typed-one-of-post-deep");

  const sdk = new SDK();
  const req = createDeepObject();

  const result = await sdk.unions.weaklyTypedOneOfPost(req);

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toEqual(req);
});

test("typed object one of post obj1", async () => {
  recordTest("unions-typed-object-one-of-post-obj1");

  const sdk = new SDK();

  const obj1: TypedObject1 = {
    type: TypedObject1Type.Obj1,
    value: "test",
  };
  const req: TypedObjectOneOf = obj1;

  const result = await sdk.unions.typedObjectOneOfPost(req);

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toEqual(req);
});

test("typed object one of post obj2", async () => {
  recordTest("unions-typed-object-one-of-post-obj2");

  const sdk = new SDK();

  const obj2: TypedObject2 = {
    type: TypedObject2Type.Obj2,
    value: "test",
  };
  const req: TypedObjectOneOf = obj2;

  const result = await sdk.unions.typedObjectOneOfPost(req);

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toEqual(req);
});

test("typed object one of post obj3", async () => {
  recordTest("unions-typed-object-one-of-post-obj3");

  const sdk = new SDK();

  const obj3: TypedObject3 = {
    type: TypedObject3Type.Obj3,
    value: "test",
  };
  const req: TypedObjectOneOf = obj3;

  const result = await sdk.unions.typedObjectOneOfPost(req);

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toEqual(req);
});

test("typed object one of post null", async () => {
  recordTest("unions-typed-object-one-of-post-null");

  const sdk = new SDK();

  const req: TypedObjectOneOf = null as any;

  try {
    await sdk.unions.typedObjectOneOfPost(req);
    expect.unreachable("SDK call should not have succeeded");
  } catch (err) {
    if (!(err instanceof SDKValidationError)) {
      expect.unreachable(
        "SDK call should have failed with a SDKValidationError",
      );
    }

    const { cause } = err;
    if (!(cause instanceof ZodError)) {
      expect.unreachable(
        "SDK call should have failed with a ZodError as underlying cause",
      );
    }

    expect(cause.issues).toHaveLength(1);
    expect(cause.issues[0]?.code).toEqual("invalid_union");
  }
});

test("typed object nullable one of post obj1", async () => {
  recordTest("unions-typed-object-nullable-one-of-post-obj1");

  const sdk = new SDK();

  const obj1: TypedObject1 = {
    type: TypedObject1Type.Obj1,
    value: "test",
  };
  const req: TypedObjectOneOf = obj1;

  const result = await sdk.unions.typedObjectNullableOneOfPost(req);

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toEqual(req);
});

test("typed object nullable one of post obj2", async () => {
  recordTest("unions-typed-object-nullable-one-of-post-obj2");

  const sdk = new SDK();

  const obj2: TypedObject2 = {
    type: TypedObject2Type.Obj2,
    value: "test",
  };
  const req: TypedObjectNullableOneOf = obj2;

  const result = await sdk.unions.typedObjectNullableOneOfPost(req);

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toEqual(req);
});

test("typed object nullable one of post null", async () => {
  recordTest("unions-typed-object-nullable-one-of-post-null");

  const sdk = new SDK();

  const result = await sdk.unions.typedObjectNullableOneOfPost(null);

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toBeNull();
});

test("flattened typed object obj1", async () => {
  recordTest("unions-flattened-typed-object-post-obj1");

  const sdk = new SDK();

  const obj: TypedObject1 = {
    type: TypedObject1Type.Obj1,
    value: "one",
  };

  const result = await sdk.unions.flattenedTypedObjectPost(obj);

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toEqual(obj);
});

test("nullable typed object post obj1", async () => {
  recordTest("unions-nullable-typed-object-post-obj1");

  const sdk = new SDK();

  const obj: TypedObject1 = {
    type: TypedObject1Type.Obj1,
    value: "one",
  };

  const result = await sdk.unions.nullableTypedObjectPost(obj);

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toEqual(obj);
});

test("nullable typed object post null", async () => {
  recordTest("unions-nullable-typed-object-post-null");

  const sdk = new SDK();

  const result = await sdk.unions.nullableTypedObjectPost(null);

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toBeNull();
});

test("nullable one of schema post obj1", async () => {
  recordTest("unions-nullable-oneof-schema-post-obj1");

  const sdk = new SDK();

  const obj: TypedObject1 = {
    type: TypedObject1Type.Obj1,
    value: "one",
  };

  const result = await sdk.unions.nullableOneOfSchemaPost(obj);

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toEqual(obj);
});

test("nullable one of schema post obj2", async () => {
  recordTest("unions-nullable-oneof-schema-post-obj2");

  const sdk = new SDK();

  const obj: TypedObject2 = {
    type: TypedObject2Type.Obj2,
    value: "two",
  };

  const result = await sdk.unions.nullableOneOfSchemaPost(obj);

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toEqual(obj);
});

test("nullable one of schema post null", async () => {
  recordTest("unions-nullable-oneof-schema-post-null");

  const sdk = new SDK();

  const result = await sdk.unions.nullableOneOfSchemaPost(null);

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toBeNull();
});

test("nullable one of type in object", async () => {
  recordTest("unions-nullable-oneof-type-in-object-post");

  const testCases: Array<{
    name: string;
    input: NullableOneOfTypeInObject;
  }> = [
    {
      name: "Nullable fields set to null",
      input: {
        oneOfOne: true,
        nullableOneOfOne: null,
        nullableOneOfTwo: null,
      },
    },
    {
      name: "All fields set to non-null values",
      input: {
        nullableOneOfOne: true,
        nullableOneOfTwo: 2,
        oneOfOne: true,
      },
    },
  ];

  const sdk = new SDK();
  for (const tc of testCases) {
    const result = await sdk.unions.nullableOneOfTypeInObjectPost(tc.input);

    expect(result.httpMeta.response.status, tc.name).toEqual(200);
    if (result.res == null) {
      expect.unreachable(
        tc.name + ": Server should have returned a valid response",
      );
    }
    expect(result.res.json, tc.name).toEqual(tc.input);
  }
});

test("nullable one of ref in object", async () => {
  recordTest("unions-nullable-oneof-ref-in-object-post");

  const testCases: Array<{
    name: string;
    input: NullableOneOfRefInObject;
  }> = [
    {
      name: "Nullable fields set to null",
      input: {
        oneOfOne: {
          type: TypedObject1Type.Obj1,
          value: "one",
        },
        nullableOneOfOne: null,
        nullableOneOfTwo: null,
      },
    },
    {
      name: "All fields set to non-null values",
      input: {
        oneOfOne: {
          type: TypedObject1Type.Obj1,
          value: "one",
        },
        nullableOneOfOne: {
          type: TypedObject1Type.Obj1,
          value: "one",
        },
        nullableOneOfTwo: {
          type: TypedObject2Type.Obj2,
          value: "two",
        },
      },
    },
  ];

  const sdk = new SDK();
  for (const tc of testCases) {
    const result = await sdk.unions.nullableOneOfRefInObjectPost(tc.input);

    expect(result.httpMeta.response.status, tc.name).toEqual(200);
    if (result.res == null) {
      expect.unreachable(
        tc.name + ": Server should have returned a valid response",
      );
    }
    expect(result.res.json, tc.name).toEqual(tc.input);
  }
});

test("primitive type one of post string", async () => {
  recordTest("unions-primitive-type-one-of-post-string");

  const sdk = new SDK();

  const result = await sdk.unions.primitiveTypeOneOfPost("test");

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toEqual("test");
});

test("primitive type one of post integer", async () => {
  recordTest("unions-primitive-type-one-of-post-integer");

  const sdk = new SDK();

  const result = await sdk.unions.primitiveTypeOneOfPost(111);

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toEqual(111);
});

test("primitive type one of post number", async () => {
  recordTest("unions-primitive-type-one-of-post-number");

  const sdk = new SDK();

  const result = await sdk.unions.primitiveTypeOneOfPost(22.2);

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toEqual(22.2);
});

test("primitive type one of post boolean", async () => {
  recordTest("unions-primitive-type-one-of-post-boolean");

  const sdk = new SDK();

  const result = await sdk.unions.primitiveTypeOneOfPost(true);

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toEqual(true);
});

test("mixed type one of post string", async () => {
  recordTest("unions-mixed-type-one-of-post-string");

  const sdk = new SDK();

  const result = await sdk.unions.mixedTypeOneOfPost("test");

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toEqual("test");
});

test("mixed type one of post integer", async () => {
  recordTest("unions-mixed-type-one-of-post-integer");

  const sdk = new SDK();

  const result = await sdk.unions.mixedTypeOneOfPost(111);

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toEqual(111);
});

test("mixed type one of post object", async () => {
  recordTest("unions-mixed-type-one-of-post-object");

  const sdk = new SDK();

  const obj = createSimpleObject();
  const result = await sdk.unions.mixedTypeOneOfPost(obj);

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toEqual(obj);
});

test("date null union", async () => {
  recordTest("unions-date-null");

  const sdk = new SDK();

  const date = new RFCDate("2020-01-01");
  const result = await sdk.unions.unionDateNull(date);

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toEqual(date);
});

test("datetime null union", async () => {
  recordTest("unions-datetime-null");

  const sdk = new SDK();

  const date = new Date("2020-01-01");
  const result = await sdk.unions.unionDateTimeNull(date);

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toEqual(date);
});

test("datetime bigint union", async () => {
  recordTest("unions-datetime-bigint");

  const sdk = new SDK();

  const date = new Date("2020-01-01");
  let result = await sdk.unions.unionDateTimeBigInt(date);

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toEqual(date);

  const value = BigInt("9007199254740991");
  result = await sdk.unions.unionDateTimeBigInt(value);

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toEqual(value);
});

test("union bigint str decimal", async () => {
  recordTest("unions-bigint-str-decimal");

  const sdk = new SDK();

  const dec = new Decimal("3.141592653589793");
  let result = await sdk.unions.unionBigIntStrDecimal(dec);

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toEqual(dec);

  const big = BigInt("9223372036854775807");

  result = await sdk.unions.unionBigIntStrDecimal(big);

  expect(result.httpMeta.response.status).toEqual(200);

  if (result.res == null) {
    expect.unreachable("Server should have returned a valid response");
  }

  expect(result.res.json).toEqual(big);
});
