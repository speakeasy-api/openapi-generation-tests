/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { SDK } from "../index.js";

import { recordTest } from "./common_helpers.js";
import { createSimpleObject } from "./primary_helpers.js";
import { SDKValidationError } from "../sdk/models/errors/sdkvalidationerror.js";
import { WebhookSecurity } from "../hooks/webhook-security.js";
import { WebhookAuthenticationError } from "../sdk/types/webhooks.js";
import { SDKHooks } from "../hooks/hooks.js";

const consumerURL = "http://localhost:35123/example-consumer-endpoint";
const secret = "secret";

test("Test Webhooks Signing", async () => {
  recordTest("webhooks-signing");

  const hooks = new SDKHooks();

  let request!: Request;

  hooks.registerBeforeRequestHook({
    beforeRequest(_, req) {
      request = req.clone();
      return req;
    },
  });

  const sdk = new SDK({ hooks: hooks } as any);

  const payload = {
    data: createSimpleObject(),
    type: "webhook.created" as const,
  };

  try {
    await sdk.webhooks.sendWebhookUserCreated(
      { url: consumerURL, secret },
      payload,
    );
  } catch (e: any) {
    // We're asserting it was able to send the request - ie the request data was valid
    expect(e.httpMeta.response.status).toBe(404);
  }

  const res2 = await sdk.validateWebhook({
    request,
    secret,
  });

  expect(res2).toBeDefined();
});

test("Test Webhooks Bad Outgoing Request", async () => {
  recordTest("webhooks-bad-outgoing-request");

  const sdk = new SDK({});

  try {
    await sdk.webhooks.sendWebhookUserCreated({ url: consumerURL, secret }, {
      foo: "foo",
    } as any);
  } catch (e: any) {
    expect(e).toBeInstanceOf(SDKValidationError);
  }
});

test("Test Webhooks Bad Incoming Request", async () => {
  recordTest("webhooks-bad-incoming-request");

  const sdk = new SDK({});

  try {
    await sdk.validateWebhook({
      request: {
        body: "{}",
        headers: { "X-Signature": "foo" },
        method: "POST",
        url: consumerURL,
      },
      secret,
    });
  } catch (e: any) {
    expect(e).toBeInstanceOf(WebhookAuthenticationError);
  }
});

test("Test Authenticator", async () => {
  const security = new WebhookSecurity();
  const signedRequest = await security.sign({
    secret,
    request: new Request(consumerURL, {
      body: JSON.stringify({ foo: "foo" }),
      method: "POST",
    }),
  });

  expect(signedRequest.headers.get("X-Signature")).toBeDefined();

  const verified = await security.verify({
    secret,
    request: signedRequest,
  });

  expect(verified).toBe(true);
});
