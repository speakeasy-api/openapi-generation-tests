/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";

import { SDK } from "../index.js";

import { recordTest } from "./common_helpers.js";
import {
  ConnectionError,
  RequestTimeoutError,
} from "../sdk/models/errors/httpclienterrors.js";

test("Test Select Global Server Valid", async () => {
  recordTest("servers-select-global-server-valid");

  const sdk = new SDK({ serverURL: "http://localhost:35123" });
  const res = await sdk.servers.selectGlobalServer();
  expect(res).toBeDefined();
});

test("Test Select Global Server Broken", async () => {
  recordTest("servers-select-global-server-broken");

  const sdk = new SDK({ serverURL: "http://broken" });

  try {
    await sdk.servers.selectGlobalServer({ timeoutMs: 1000 });
    expect.unreachable("expected error to be thrown");
  } catch (err: unknown) {
    switch (true) {
      case err instanceof ConnectionError:
      case err instanceof RequestTimeoutError:
        break;
      default:
        expect.fail(
          "expected error to be ConnectionError or RequestTimeoutError",
        );
    }
  }
});

test("Test Select Global Server By Name Default", async () => {
  recordTest("servers-select-global-server-by-name-default");

  const sdk = new SDK();
  const res = await sdk.servers.selectGlobalServer();
  expect(res).toBeDefined();
});

test("Test Select Global Server By Name Valid", async () => {
  recordTest("servers-select-global-server-by-name-valid");

  const sdk = new SDK({ server: "default-server" });
  const res = await sdk.servers.selectGlobalServer();
  expect(res).toBeDefined();
});

test("Test Select Server By Name Invalid", async () => {
  recordTest("servers-select-global-server-by-name-invalid");

  // N.A - server must be keyof typeof ServerList
});

test("Test Select Server By Name Broken", async () => {
  recordTest("servers-select-global-server-by-name-broken");

  const sdk = new SDK({ server: "BrokenServer" });

  try {
    await sdk.servers.selectGlobalServer({ timeoutMs: 1000 });
    expect.unreachable("expected error to be thrown");
  } catch (err: unknown) {
    switch (true) {
      case err instanceof ConnectionError:
      case err instanceof RequestTimeoutError:
        break;
      default:
        expect.fail(
          "expected error to be ConnectionError or RequestTimeoutError",
        );
    }
  }
});
