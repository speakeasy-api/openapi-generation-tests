/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";

import { SDK, ServerList } from "../index.js";

import { recordTest } from "./common_helpers.js";

test("Test Select Global Server Valid", async () => {
  recordTest("servers-select-global-server-valid");

  const url = ServerList[0];
  expect(url).toBe("http://localhost:35123");
  const sdk = new SDK({ serverURL: url });
  const res = await sdk.servers.selectGlobalServer();
  expect(res.statusCode).toBe(200);
});

test("Test Select Global Server Broken", async () => {
  recordTest("servers-select-global-server-broken");

  const url = ServerList[1];
  expect(url).toBe("http://broken");
  const sdk = new SDK({ serverURL: url });
  return sdk.servers.selectGlobalServer().catch((err: unknown) => {
    if (!(err instanceof TypeError)) {
      expect.unreachable("Expected error to be an object");
    }
    if (!("cause" in err) || !(err.cause instanceof Error)) {
      expect.unreachable("Expected error to have an underlying cause");
    }
    if (!("code" in err.cause) || typeof err.cause.code !== "string") {
      expect.unreachable(
        "Expected underlying error to have a code property set to a string",
      );
    }

    expect(err.cause.code).toMatch(/^(ENOTFOUND|EAI_AGAIN)$/);
  });
});

test("Test Select Global Server By ID Default", async () => {
  recordTest("servers-select-global-server-by-id-default");

  const sdk = new SDK();
  const res = await sdk.servers.selectGlobalServer();
  expect(res.statusCode).toBe(200);
});

test("Test Select Global Server By ID Valid", async () => {
  recordTest("servers-select-global-server-by-id-valid");

  const sdk = new SDK({ serverIdx: 0 });
  const res = await sdk.servers.selectGlobalServer();
  expect(res.statusCode).toBe(200);
});

test("Test Select Server By ID Invalid", async () => {
  recordTest("servers-select-global-server-by-id-invalid");

  expect(() => new SDK({ serverIdx: 2 })).toThrowError(
    new Error("Invalid server index 2"),
  );
});

test("Test Select Server By ID Broken", async () => {
  recordTest("servers-select-global-server-by-id-broken");

  const sdk = new SDK({ serverIdx: 1 });
  return sdk.servers.selectGlobalServer().catch((err: unknown) => {
    if (!(err instanceof TypeError)) {
      expect.unreachable("Expected error to be an object");
    }
    if (!("cause" in err) || !(err.cause instanceof Error)) {
      expect.unreachable("Expected error to have an underlying cause");
    }
    if (!("code" in err.cause) || typeof err.cause.code !== "string") {
      expect.unreachable(
        "Expected underlying error to have a code property set to a string",
      );
    }

    expect(err.cause.code).toMatch(/^(ENOTFOUND|EAI_AGAIN)$/);
  });
});
