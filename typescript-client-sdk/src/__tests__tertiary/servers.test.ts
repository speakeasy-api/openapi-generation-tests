/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";

import { SDK, ServerList } from "../index.js";

import { recordTest } from "./common_helpers.js";
import {
  ConnectionError,
  RequestTimeoutError,
} from "../sdk/models/errors/httpclienterrors.js";

test("Test Select Global Server Valid", async () => {
  recordTest("servers-select-global-server-valid");

  const url = ServerList[0];
  expect(url).toBe("http://localhost:35123");
  const sdk = new SDK({ serverURL: url });
  const res = await sdk.servers.selectGlobalServer();
  expect(res.statusCode).toBe(200);
});

test("Test Select Global Server Broken", async () => {
  recordTest("servers-select-global-server-broken");

  const url = ServerList[1];
  expect(url).toBe("http://broken");
  const sdk = new SDK({ serverURL: url });

  try {
    await sdk.servers.selectGlobalServer({ timeoutMs: 1000 });
    expect.unreachable("expected error to be thrown");
  } catch (err: unknown) {
    switch (true) {
      case err instanceof ConnectionError:
      case err instanceof RequestTimeoutError:
        break;
      default:
        expect.fail(
          "expected error to be ConnectionError or RequestTimeoutError",
        );
    }
  }
});

test("Test Select Global Server By ID Default", async () => {
  recordTest("servers-select-global-server-by-id-default");

  const sdk = new SDK();
  const res = await sdk.servers.selectGlobalServer();
  expect(res.statusCode).toBe(200);
});

test("Test Select Global Server By ID Valid", async () => {
  recordTest("servers-select-global-server-by-id-valid");

  const sdk = new SDK({ serverIdx: 0 });
  const res = await sdk.servers.selectGlobalServer();
  expect(res.statusCode).toBe(200);
});

test("Test Select Server By ID Invalid", async () => {
  recordTest("servers-select-global-server-by-id-invalid");

  expect(() => new SDK({ serverIdx: 2 })).toThrowError(
    new Error("Invalid server index 2"),
  );
});

test("Test Select Server By ID Broken", async () => {
  recordTest("servers-select-global-server-by-id-broken");

  const sdk = new SDK({ serverIdx: 1 });

  try {
    await sdk.servers.selectGlobalServer({ timeoutMs: 1000 });
    expect.unreachable("expected error to be thrown");
  } catch (err: unknown) {
    switch (true) {
      case err instanceof ConnectionError:
      case err instanceof RequestTimeoutError:
        break;
      default:
        expect.fail(
          "expected error to be ConnectionError or RequestTimeoutError",
        );
    }
  }
});
