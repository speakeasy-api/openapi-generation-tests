/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SDKCore } from "../core.js";
import { encodeJSON as encodeJSON$ } from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { resolveSecurity, SecurityInput } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
    ConnectionError,
    InvalidRequestError,
    RequestAbortedError,
    RequestTimeoutError,
    UnexpectedClientError,
} from "../sdk/models/errors/httpclienterrors.js";
import { SDKError } from "../sdk/models/errors/sdkerror.js";
import { SDKValidationError } from "../sdk/models/errors/sdkvalidationerror.js";
import * as operations from "../sdk/models/operations/index.js";
import { MultipleSimpleOptionsAuthServerList } from "../sdk/models/operations/multiplesimpleoptionsauth.js";
import * as shared from "../sdk/models/shared/index.js";
import { Result } from "../sdk/types/fp.js";
import * as z from "zod";

export async function authNewMultipleSimpleOptionsAuth(
    client$: SDKCore,
    request: shared.AuthServiceRequestBody,
    security: operations.MultipleSimpleOptionsAuthSecurity,
    options?: RequestOptions & { serverURL?: string }
): Promise<
    Result<
        void,
        | SDKError
        | SDKValidationError
        | UnexpectedClientError
        | InvalidRequestError
        | RequestAbortedError
        | RequestTimeoutError
        | ConnectionError
    >
> {
    const input$ = request;

    const parsed$ = schemas$.safeParse(
        input$,
        (value$) => shared.AuthServiceRequestBody$outboundSchema.parse(value$),
        "Input validation failed"
    );
    if (!parsed$.ok) {
        return parsed$;
    }
    const payload$ = parsed$.value;
    const body$ = encodeJSON$("body", payload$, { explode: true });

    const baseURL$ =
        options?.serverURL ||
        pathToFunc(MultipleSimpleOptionsAuthServerList[0], { charEncoding: "percent" })();

    const path$ = pathToFunc("/auth#multipleSimpleOptionsAuth")();

    const headers$ = new Headers({
        "Content-Type": "application/json",
        Accept: "*/*",
    });

    const security$: SecurityInput[][] = [
        [
            {
                fieldName: "x-api-key",
                type: "apiKey:header",
                value: security?.apiKeyAuthNew,
            },
        ],
        [
            {
                fieldName: "Authorization",
                type: "oauth2",
                value: security?.oauth2,
            },
        ],
    ];
    const securitySettings$ = resolveSecurity(...security$);
    const context = {
        operationID: "multipleSimpleOptionsAuth",
        oAuth2Scopes: [],
        securitySource: security$,
    };

    const requestRes = client$.createRequest$(
        context,
        {
            security: securitySettings$,
            method: "POST",
            baseURL: baseURL$,
            path: path$,
            headers: headers$,
            body: body$,
            uaHeader: "x-speakeasy-user-agent",
            timeoutMs: options?.timeoutMs || client$.options$.timeoutMs || -1,
        },
        options
    );
    if (!requestRes.ok) {
        return requestRes;
    }
    const request$ = requestRes.value;

    const doResult = await client$.do$(request$, {
        context,
        errorCodes: ["401", "4XX", "5XX"],
        retryConfig: options?.retries || client$.options$.retryConfig,
        retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
    });
    if (!doResult.ok) {
        return doResult;
    }
    const response = doResult.value;

    const [result$] = await m$.match<
        void,
        | SDKError
        | SDKValidationError
        | UnexpectedClientError
        | InvalidRequestError
        | RequestAbortedError
        | RequestTimeoutError
        | ConnectionError
    >(
        m$.nil(200, z.void()),
        m$.fail([401, "4XX", "5XX"])
    )(response);
    if (!result$.ok) {
        return result$;
    }

    return result$;
}
