/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { SDKCore } from "../core.js";
import { EventStream } from "../lib/event-streams.js";
import * as m$ from "../lib/matchers.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../sdk/models/errors/httpclienterrors.js";
import { SDKError } from "../sdk/models/errors/sdkerror.js";
import { SDKValidationError } from "../sdk/models/errors/sdkvalidationerror.js";
import { MultilineServerList } from "../sdk/models/operations/multiline.js";
import * as shared from "../sdk/models/shared/index.js";
import { Result } from "../sdk/types/fp.js";

export async function eventstreamsMultiline(
  client$: SDKCore,
  options?: RequestOptions & { serverURL?: string },
): Promise<
  Result<
    EventStream<shared.TextEvent>,
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  const baseURL$ = options?.serverURL
    || pathToFunc(MultilineServerList[0], { charEncoding: "percent" })();

  const path$ = pathToFunc("/eventstreams/multiline")();

  const headers$ = new Headers({
    Accept: "text/event-stream",
  });

  const security$ = await extractSecurity(client$.options$.security);
  const context = {
    operationID: "multiline",
    oAuth2Scopes: [],
    securitySource: client$.options$.security,
  };
  const securitySettings$ = resolveGlobalSecurity(security$);

  const requestRes = client$.createRequest$(context, {
    security: securitySettings$,
    method: "POST",
    baseURL: baseURL$,
    path: path$,
    headers: headers$,
    uaHeader: "x-speakeasy-user-agent",
    timeoutMs: options?.timeoutMs || client$.options$.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return requestRes;
  }
  const request$ = requestRes.value;

  const doResult = await client$.do$(request$, {
    context,
    errorCodes: ["4XX", "5XX"],
    retryConfig: options?.retries
      || client$.options$.retryConfig,
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  });
  if (!doResult.ok) {
    return doResult;
  }
  const response = doResult.value;

  const [result$] = await m$.match<
    EventStream<shared.TextEvent>,
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    m$.sse(
      200,
      z.instanceof(ReadableStream<Uint8Array>).transform(stream => {
        return new EventStream({
          stream,
          decoder(rawEvent) {
            const schema = shared.TextEvent$inboundSchema;
            return schema.parse(rawEvent);
          },
        });
      }),
    ),
    m$.fail(["4XX", "5XX"]),
  )(response);
  if (!result$.ok) {
    return result$;
  }

  return result$;
}
