/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SDKCore } from "../core.js";
import { encodeJSON, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../sdk/models/errors/httpclienterrors.js";
import { SDKError } from "../sdk/models/errors/sdkerror.js";
import { SDKValidationError } from "../sdk/models/errors/sdkvalidationerror.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { Result } from "../sdk/types/fp.js";

export async function generationGlobalNameOverridden(
  client: SDKCore,
  request?: shared.SimpleObject | undefined,
  options?: RequestOptions,
): Promise<
  Result<
    operations.GetGlobalNameOverrideResponseBody,
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  const parsed = safeParse(
    request,
    (value) => shared.SimpleObject$outboundSchema.optional().parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return parsed;
  }
  const payload = parsed.value;
  const body = payload === undefined
    ? null
    : encodeJSON("body", payload, { explode: true });

  const path = pathToFunc("/anything/globalNameOverride")();

  const headers = new Headers({
    "Content-Type": "application/json",
    Accept: "application/json",
    "any": encodeSimple("any", payload?.any, {
      explode: false,
      charEncoding: "none",
    }),
    "bigint": encodeSimple("bigint", payload?.bigint, {
      explode: false,
      charEncoding: "none",
    }),
    "bigintStr": encodeSimple("bigintStr", payload?.bigintStr, {
      explode: false,
      charEncoding: "none",
    }),
    "bool": encodeSimple("bool", payload?.bool, {
      explode: false,
      charEncoding: "none",
    }),
    "boolOpt": encodeSimple("boolOpt", payload?.boolOpt, {
      explode: false,
      charEncoding: "none",
    }),
    "date": encodeSimple("date", payload?.date, {
      explode: false,
      charEncoding: "none",
    }),
    "dateTime": encodeSimple("dateTime", payload?.dateTime, {
      explode: false,
      charEncoding: "none",
    }),
    "decimal": encodeSimple("decimal", payload?.decimal, {
      explode: false,
      charEncoding: "none",
    }),
    "decimalNullableOpt": encodeSimple(
      "decimalNullableOpt",
      payload?.decimalNullableOpt,
      { explode: false, charEncoding: "none" },
    ),
    "decimalStr": encodeSimple("decimalStr", payload?.decimalStr, {
      explode: false,
      charEncoding: "none",
    }),
    "enum": encodeSimple("enum", payload?.enum, {
      explode: false,
      charEncoding: "none",
    }),
    "float32": encodeSimple("float32", payload?.float32, {
      explode: false,
      charEncoding: "none",
    }),
    "float64Str": encodeSimple("float64Str", payload?.float64Str, {
      explode: false,
      charEncoding: "none",
    }),
    "int": encodeSimple("int", payload?.int, {
      explode: false,
      charEncoding: "none",
    }),
    "int32": encodeSimple("int32", payload?.int32, {
      explode: false,
      charEncoding: "none",
    }),
    "int32Enum": encodeSimple("int32Enum", payload?.int32Enum, {
      explode: false,
      charEncoding: "none",
    }),
    "int64Str": encodeSimple("int64Str", payload?.int64Str, {
      explode: false,
      charEncoding: "none",
    }),
    "intEnum": encodeSimple("intEnum", payload?.intEnum, {
      explode: false,
      charEncoding: "none",
    }),
    "intOptNull": encodeSimple("intOptNull", payload?.intOptNull, {
      explode: false,
      charEncoding: "none",
    }),
    "num": encodeSimple("num", payload?.num, {
      explode: false,
      charEncoding: "none",
    }),
    "numOptNull": encodeSimple("numOptNull", payload?.numOptNull, {
      explode: false,
      charEncoding: "none",
    }),
    "str": encodeSimple("str", payload?.str, {
      explode: false,
      charEncoding: "none",
    }),
    "strOpt": encodeSimple("strOpt", payload?.strOpt, {
      explode: false,
      charEncoding: "none",
    }),
  });

  const securityInput = await extractSecurity(client._options.security);
  const context = {
    operationID: "getGlobalNameOverride",
    oAuth2Scopes: [],
    securitySource: client._options.security,
  };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    path: path,
    headers: headers,
    body: body,
    uaHeader: "x-speakeasy-user-agent",
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return requestRes;
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["4XX", "5XX"],
    retryConfig: options?.retries
      || client._options.retryConfig,
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  });
  if (!doResult.ok) {
    return doResult;
  }
  const response = doResult.value;

  const [result] = await M.match<
    operations.GetGlobalNameOverrideResponseBody,
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(200, operations.GetGlobalNameOverrideResponseBody$inboundSchema),
    M.fail(["4XX", "5XX"]),
  )(response);
  if (!result.ok) {
    return result;
  }

  return result;
}
