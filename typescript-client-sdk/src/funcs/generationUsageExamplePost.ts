/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SDKCore } from "../core.js";
import { encodeFormQuery, encodeJSON } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { resolveSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../sdk/models/errors/httpclienterrors.js";
import { SDKError } from "../sdk/models/errors/sdkerror.js";
import { SDKValidationError } from "../sdk/models/errors/sdkvalidationerror.js";
import * as operations from "../sdk/models/operations/index.js";
import { Result } from "../sdk/types/fp.js";

/**
 * An operation used for testing usage examples
 *
 * @remarks
 * An operation used for testing usage examples that includes a large array of parameters and input types to ensure that all are handled correctly
 *
 * @see {@link https://docs.example.com} - Usage example docs
 */
export async function generationUsageExamplePost(
  client: SDKCore,
  security: operations.UsageExamplePostSecurity,
  request: operations.UsageExamplePostRequest,
  options?: RequestOptions,
): Promise<
  Result<
    operations.UsageExamplePostResponseBody,
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  const parsed = safeParse(
    request,
    (value) => operations.UsageExamplePostRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return parsed;
  }
  const payload = parsed.value;
  const body = encodeJSON("body", payload.RequestBody, { explode: true });

  const path = pathToFunc("/anything/usageExample")();

  const query = encodeFormQuery({
    "bigintParameter": payload.bigintParameter,
    "bigintParameterOptional": payload.bigintParameterOptional,
    "bigintStrParameter": payload.bigintStrParameter,
    "bigintStrParameterOptional": payload.bigintStrParameterOptional,
    "boolParameter": payload.boolParameter,
    "dateParameter": payload.dateParameter,
    "dateTimeDefaultParameter": payload.dateTimeDefaultParameter,
    "dateTimeParameter": payload.dateTimeParameter,
    "decimalParameter": payload.decimalParameter,
    "decimalParameterOptional": payload.decimalParameterOptional,
    "decimalStrParameter": payload.decimalStrParameter,
    "decimalStrParameterOptional": payload.decimalStrParameterOptional,
    "doubleParameter": payload.doubleParameter,
    "enumParameter": payload.enumParameter,
    "falseyNumberParameter": payload.falseyNumberParameter,
    "float32Parameter": payload.float32Parameter,
    "float64StringParameter": payload.float64StringParameter,
    "floatParameter": payload.floatParameter,
    "int64Parameter": payload.int64Parameter,
    "int64StringParameter": payload.int64StringParameter,
    "intParameter": payload.intParameter,
    "optEnumParameter": payload.optEnumParameter,
    "strParameter": payload.strParameter,
  });

  const headers = new Headers({
    "Content-Type": "application/json",
    Accept: "application/json",
  });

  const requestSecurity = resolveSecurity(
    [
      {
        type: "http:basic",
        value: { password: security?.password, username: security?.username },
      },
    ],
  );
  const context = {
    operationID: "usageExamplePost",
    oAuth2Scopes: [],
    securitySource: security,
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    path: path,
    headers: headers,
    query: query,
    body: body,
    uaHeader: "x-speakeasy-user-agent",
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return requestRes;
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["4XX", "5XX"],
    retryConfig: options?.retries
      || client._options.retryConfig,
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  });
  if (!doResult.ok) {
    return doResult;
  }
  const response = doResult.value;

  const [result] = await M.match<
    operations.UsageExamplePostResponseBody,
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(200, operations.UsageExamplePostResponseBody$inboundSchema),
    M.fail(["4XX", "5XX"]),
  )(response);
  if (!result.ok) {
    return result;
  }

  return result;
}
