/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SDKCore } from "../core.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
} from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { resolveSecurity, SecurityInput } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
    ConnectionError,
    InvalidRequestError,
    RequestAbortedError,
    RequestTimeoutError,
    UnexpectedClientError,
} from "../sdk/models/errors/httpclienterrors.js";
import { SDKError } from "../sdk/models/errors/sdkerror.js";
import { SDKValidationError } from "../sdk/models/errors/sdkvalidationerror.js";
import * as operations from "../sdk/models/operations/index.js";
import { Result } from "../sdk/types/fp.js";

/**
 * An operation used for testing usage examples
 *
 * @remarks
 * An operation used for testing usage examples that includes a large array of parameters and input types to ensure that all are handled correctly
 *
 * @see {@link https://docs.example.com} - Usage example docs
 */
export async function generationUsageExamplePost(
    client$: SDKCore,
    request: operations.UsageExamplePostRequest,
    security: operations.UsageExamplePostSecurity,
    options?: RequestOptions
): Promise<
    Result<
        operations.UsageExamplePostResponseBody,
        | SDKError
        | SDKValidationError
        | UnexpectedClientError
        | InvalidRequestError
        | RequestAbortedError
        | RequestTimeoutError
        | ConnectionError
    >
> {
    const input$ = request;

    const parsed$ = schemas$.safeParse(
        input$,
        (value$) => operations.UsageExamplePostRequest$outboundSchema.parse(value$),
        "Input validation failed"
    );
    if (!parsed$.ok) {
        return parsed$;
    }
    const payload$ = parsed$.value;
    const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

    const path$ = pathToFunc("/anything/usageExample")();

    const query$ = encodeFormQuery$({
        bigintParameter: payload$.bigintParameter,
        bigintParameterOptional: payload$.bigintParameterOptional,
        bigintStrParameter: payload$.bigintStrParameter,
        bigintStrParameterOptional: payload$.bigintStrParameterOptional,
        boolParameter: payload$.boolParameter,
        dateParameter: payload$.dateParameter,
        dateTimeDefaultParameter: payload$.dateTimeDefaultParameter,
        dateTimeParameter: payload$.dateTimeParameter,
        decimalParameter: payload$.decimalParameter,
        decimalParameterOptional: payload$.decimalParameterOptional,
        decimalStrParameter: payload$.decimalStrParameter,
        decimalStrParameterOptional: payload$.decimalStrParameterOptional,
        doubleParameter: payload$.doubleParameter,
        enumParameter: payload$.enumParameter,
        falseyNumberParameter: payload$.falseyNumberParameter,
        float32Parameter: payload$.float32Parameter,
        float64StringParameter: payload$.float64StringParameter,
        floatParameter: payload$.floatParameter,
        int64Parameter: payload$.int64Parameter,
        int64StringParameter: payload$.int64StringParameter,
        intParameter: payload$.intParameter,
        optEnumParameter: payload$.optEnumParameter,
        strParameter: payload$.strParameter,
    });

    const headers$ = new Headers({
        "Content-Type": "application/json",
        Accept: "application/json",
    });

    const security$: SecurityInput[][] = [
        [
            {
                type: "http:basic",
                value: { password: security?.password, username: security?.username },
            },
        ],
    ];
    const securitySettings$ = resolveSecurity(...security$);
    const context = { operationID: "usageExamplePost", oAuth2Scopes: [], securitySource: security };

    const requestRes = client$.createRequest$(
        context,
        {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
            uaHeader: "x-speakeasy-user-agent",
            timeoutMs: options?.timeoutMs || client$.options$.timeoutMs || -1,
        },
        options
    );
    if (!requestRes.ok) {
        return requestRes;
    }
    const request$ = requestRes.value;

    const doResult = await client$.do$(request$, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: options?.retries || client$.options$.retryConfig,
        retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
    });
    if (!doResult.ok) {
        return doResult;
    }
    const response = doResult.value;

    const [result$] = await m$.match<
        operations.UsageExamplePostResponseBody,
        | SDKError
        | SDKValidationError
        | UnexpectedClientError
        | InvalidRequestError
        | RequestAbortedError
        | RequestTimeoutError
        | ConnectionError
    >(
        m$.json(200, operations.UsageExamplePostResponseBody$inboundSchema),
        m$.fail(["4XX", "5XX"])
    )(response);
    if (!result$.ok) {
        return result$;
    }

    return result$;
}
