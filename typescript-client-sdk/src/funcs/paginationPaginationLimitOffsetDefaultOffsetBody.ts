/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SDKCore } from "../core.js";
import { dlv } from "../lib/dlv.js";
import { encodeJSON } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../sdk/models/errors/httpclienterrors.js";
import { SDKError } from "../sdk/models/errors/sdkerror.js";
import { SDKValidationError } from "../sdk/models/errors/sdkvalidationerror.js";
import * as operations from "../sdk/models/operations/index.js";
import { PaginationLimitOffsetDefaultOffsetBodyServerList } from "../sdk/models/operations/paginationlimitoffsetdefaultoffsetbody.js";
import * as shared from "../sdk/models/shared/index.js";
import { Result } from "../sdk/types/fp.js";
import {
  createPageIterator,
  haltIterator,
  PageIterator,
  Paginator,
} from "../sdk/types/operations.js";

export async function paginationPaginationLimitOffsetDefaultOffsetBody(
  client: SDKCore,
  request: shared.LimitOffsetConfigWithDefaults,
  options?: RequestOptions,
): Promise<
  PageIterator<
    Result<
      operations.PaginationLimitOffsetDefaultOffsetBodyResponse,
      | SDKError
      | SDKValidationError
      | UnexpectedClientError
      | InvalidRequestError
      | RequestAbortedError
      | RequestTimeoutError
      | ConnectionError
    >,
    { offset: number }
  >
> {
  const parsed = safeParse(
    request,
    (value) => shared.LimitOffsetConfigWithDefaults$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return haltIterator(parsed);
  }
  const payload = parsed.value;
  const body = encodeJSON("body", payload, { explode: true });

  const baseURL = options?.serverURL
    || pathToFunc(PaginationLimitOffsetDefaultOffsetBodyServerList[0], {
      charEncoding: "percent",
    })();

  const path = pathToFunc("/pagination/limitoffset/offset#WithDefaults")();

  const headers = new Headers({
    "Content-Type": "application/json",
    Accept: "application/json",
  });

  const securityInput = await extractSecurity(client._options.security);
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    operationID: "paginationLimitOffsetDefaultOffsetBody",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "PUT",
    baseURL: baseURL,
    path: path,
    headers: headers,
    body: body,
    uaHeader: "x-speakeasy-user-agent",
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return haltIterator(requestRes);
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return haltIterator(doResult);
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result, raw] = await M.match<
    operations.PaginationLimitOffsetDefaultOffsetBodyResponse,
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(
      200,
      operations.PaginationLimitOffsetDefaultOffsetBodyResponse$inboundSchema,
      { key: "Result" },
    ),
    M.fail(["4XX", "5XX"]),
  )(response, { extraFields: responseFields });
  if (!result.ok) {
    return haltIterator(result);
  }

  const nextFunc = (
    responseData: unknown,
  ): {
    next: Paginator<
      Result<
        operations.PaginationLimitOffsetDefaultOffsetBodyResponse,
        | SDKError
        | SDKValidationError
        | UnexpectedClientError
        | InvalidRequestError
        | RequestAbortedError
        | RequestTimeoutError
        | ConnectionError
      >
    >;
    "~next"?: { offset: number };
  } => {
    const offset = request?.offset ?? 10;

    if (!responseData) {
      return { next: () => null };
    }
    const results = dlv(responseData, "resultArray");
    if (!Array.isArray(results) || !results.length) {
      return { next: () => null };
    }
    const limit = request?.limit ?? 15;
    if (results.length < limit) {
      return { next: () => null };
    }
    const nextOffset = offset + results.length;

    const nextVal = () =>
      paginationPaginationLimitOffsetDefaultOffsetBody(
        client,
        {
          ...request,
          offset: nextOffset,
        },
        options,
      );

    return { next: nextVal, "~next": { offset: nextOffset } };
  };

  const page = { ...result, ...nextFunc(raw) };
  return { ...page, ...createPageIterator(page, (v) => !v.ok) };
}
