/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import jp from "jsonpath";
import { SDKCore } from "../core.js";
import { encodeFormQuery, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../sdk/models/errors/httpclienterrors.js";
import { SDKError } from "../sdk/models/errors/sdkerror.js";
import { SDKValidationError } from "../sdk/models/errors/sdkvalidationerror.js";
import * as operations from "../sdk/models/operations/index.js";
import { PaginationWithRetriesServerList } from "../sdk/models/operations/paginationwithretries.js";
import { Result } from "../sdk/types/fp.js";
import {
  createPageIterator,
  haltIterator,
  PageIterator,
  Paginator,
} from "../sdk/types/operations.js";

export async function paginationPaginationWithRetries(
  client: SDKCore,
  cursor?: string | undefined,
  faultSettings?: string | undefined,
  requestId?: string | undefined,
  options?: RequestOptions & { serverURL?: string },
): Promise<
  PageIterator<
    Result<
      operations.PaginationWithRetriesResponse,
      | SDKError
      | SDKValidationError
      | UnexpectedClientError
      | InvalidRequestError
      | RequestAbortedError
      | RequestTimeoutError
      | ConnectionError
    >
  >
> {
  const input: operations.PaginationWithRetriesRequest = {
    cursor: cursor,
    faultSettings: faultSettings,
    requestId: requestId,
  };

  const parsed = safeParse(
    input,
    (value) =>
      operations.PaginationWithRetriesRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return haltIterator(parsed);
  }
  const payload = parsed.value;
  const body = null;

  const baseURL = options?.serverURL
    || pathToFunc(PaginationWithRetriesServerList[0], {
      charEncoding: "percent",
    })();

  const path = pathToFunc("/pagination/cursor_non_numeric#withRetries")();

  const query = encodeFormQuery({
    "cursor": payload.cursor,
  });

  const headers = new Headers({
    Accept: "application/json",
    "fault-settings": encodeSimple(
      "fault-settings",
      payload["fault-settings"],
      { explode: false, charEncoding: "none" },
    ),
    "request-id": encodeSimple("request-id", payload["request-id"], {
      explode: false,
      charEncoding: "none",
    }),
  });

  const securityInput = await extractSecurity(client._options.security);
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    operationID: "paginationWithRetries",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || {
        strategy: "backoff",
        backoff: {
          initialInterval: 10,
          maxInterval: 100,
          exponent: 1.5,
          maxElapsedTime: 1000,
        },
        retryConnectionErrors: false,
      }
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["503"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "GET",
    baseURL: baseURL,
    path: path,
    headers: headers,
    query: query,
    body: body,
    uaHeader: "x-speakeasy-user-agent",
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return haltIterator(requestRes);
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return haltIterator(doResult);
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result, raw] = await M.match<
    operations.PaginationWithRetriesResponse,
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(200, operations.PaginationWithRetriesResponse$inboundSchema, {
      key: "Result",
    }),
    M.fail(["4XX", "5XX"]),
  )(response, { extraFields: responseFields });
  if (!result.ok) {
    return haltIterator(result);
  }

  const nextFunc = (
    responseData: unknown,
  ): Paginator<
    Result<
      operations.PaginationWithRetriesResponse,
      | SDKError
      | SDKValidationError
      | UnexpectedClientError
      | InvalidRequestError
      | RequestAbortedError
      | RequestTimeoutError
      | ConnectionError
    >
  > => {
    const nextCursor = jp.value(responseData, "$.resultArray[(@.length-1)]");
    if (nextCursor == null) {
      return () => null;
    }

    return () =>
      paginationPaginationWithRetries(
        client,
        nextCursor,
        faultSettings,
        requestId,
        options,
      );
  };

  const page = { ...result, next: nextFunc(raw) };
  return { ...page, ...createPageIterator(page, (v) => !v.ok) };
}
