/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SDKCore } from "../core.js";
import { encodeSimple as encodeSimple$ } from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../sdk/models/errors/httpclienterrors.js";
import { SDKError } from "../sdk/models/errors/sdkerror.js";
import { SDKValidationError } from "../sdk/models/errors/sdkvalidationerror.js";
import * as operations from "../sdk/models/operations/index.js";
import { Result } from "../sdk/types/fp.js";

export async function parametersHeaderParamsPrimitive(
  client$: SDKCore,
  xHeaderBoolean: boolean,
  xHeaderInteger: number,
  xHeaderNumber: number,
  xHeaderString: string,
  options?: RequestOptions,
): Promise<
  Result<
    operations.HeaderParamsPrimitiveRes,
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  const input$: operations.HeaderParamsPrimitiveRequest = {
    xHeaderBoolean: xHeaderBoolean,
    xHeaderInteger: xHeaderInteger,
    xHeaderNumber: xHeaderNumber,
    xHeaderString: xHeaderString,
  };

  const parsed$ = schemas$.safeParse(
    input$,
    (value$) =>
      operations.HeaderParamsPrimitiveRequest$outboundSchema.parse(value$),
    "Input validation failed",
  );
  if (!parsed$.ok) {
    return parsed$;
  }
  const payload$ = parsed$.value;
  const body$ = null;

  const path$ = pathToFunc("/anything/headers/primitive")();

  const headers$ = new Headers({
    Accept: "application/json",
    "X-Header-Boolean": encodeSimple$(
      "X-Header-Boolean",
      payload$["X-Header-Boolean"],
      { explode: false, charEncoding: "none" },
    ),
    "X-Header-Integer": encodeSimple$(
      "X-Header-Integer",
      payload$["X-Header-Integer"],
      { explode: false, charEncoding: "none" },
    ),
    "X-Header-Number": encodeSimple$(
      "X-Header-Number",
      payload$["X-Header-Number"],
      { explode: false, charEncoding: "none" },
    ),
    "X-Header-String": encodeSimple$(
      "X-Header-String",
      payload$["X-Header-String"],
      { explode: false, charEncoding: "none" },
    ),
  });

  const security$ = await extractSecurity(client$.options$.security);
  const context = {
    operationID: "headerParamsPrimitive",
    oAuth2Scopes: [],
    securitySource: client$.options$.security,
  };
  const securitySettings$ = resolveGlobalSecurity(security$);

  const requestRes = client$.createRequest$(context, {
    security: securitySettings$,
    method: "GET",
    path: path$,
    headers: headers$,
    body: body$,
    uaHeader: "x-speakeasy-user-agent",
    timeoutMs: options?.timeoutMs || client$.options$.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return requestRes;
  }
  const request$ = requestRes.value;

  const doResult = await client$.do$(request$, {
    context,
    errorCodes: ["4XX", "5XX"],
    retryConfig: options?.retries
      || client$.options$.retryConfig,
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  });
  if (!doResult.ok) {
    return doResult;
  }
  const response = doResult.value;

  const [result$] = await m$.match<
    operations.HeaderParamsPrimitiveRes,
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    m$.json(200, operations.HeaderParamsPrimitiveRes$inboundSchema),
    m$.fail(["4XX", "5XX"]),
  )(response);
  if (!result$.ok) {
    return result$;
  }

  return result$;
}
