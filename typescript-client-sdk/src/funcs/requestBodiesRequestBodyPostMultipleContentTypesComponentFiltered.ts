/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SDKCore } from "../core.js";
import { encodeJSON as encodeJSON$, encodeSimple as encodeSimple$ } from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
    ConnectionError,
    InvalidRequestError,
    RequestAbortedError,
    RequestTimeoutError,
    UnexpectedClientError,
} from "../sdk/models/errors/httpclienterrors.js";
import { SDKError } from "../sdk/models/errors/sdkerror.js";
import { SDKValidationError } from "../sdk/models/errors/sdkvalidationerror.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { Result } from "../sdk/types/fp.js";

export async function requestBodiesRequestBodyPostMultipleContentTypesComponentFiltered(
    client$: SDKCore,
    request: shared.SimpleObject,
    options?: RequestOptions
): Promise<
    Result<
        operations.RequestBodyPostMultipleContentTypesComponentFilteredRes,
        | SDKError
        | SDKValidationError
        | UnexpectedClientError
        | InvalidRequestError
        | RequestAbortedError
        | RequestTimeoutError
        | ConnectionError
    >
> {
    const input$ = request;

    const parsed$ = schemas$.safeParse(
        input$,
        (value$) => shared.SimpleObject$outboundSchema.parse(value$),
        "Input validation failed"
    );
    if (!parsed$.ok) {
        return parsed$;
    }
    const payload$ = parsed$.value;
    const body$ = encodeJSON$("body", payload$, { explode: true });

    const path$ = pathToFunc(
        "/anything/requestBodies/post/multiple/contentTypes/component/filtered"
    )();

    const headers$ = new Headers({
        "Content-Type": "application/json",
        Accept: "application/json",
        any: encodeSimple$("any", payload$.any, { explode: false, charEncoding: "none" }),
        bigint: encodeSimple$("bigint", payload$.bigint, { explode: false, charEncoding: "none" }),
        bigintStr: encodeSimple$("bigintStr", payload$.bigintStr, {
            explode: false,
            charEncoding: "none",
        }),
        bool: encodeSimple$("bool", payload$.bool, { explode: false, charEncoding: "none" }),
        boolOpt: encodeSimple$("boolOpt", payload$.boolOpt, {
            explode: false,
            charEncoding: "none",
        }),
        date: encodeSimple$("date", payload$.date, { explode: false, charEncoding: "none" }),
        dateTime: encodeSimple$("dateTime", payload$.dateTime, {
            explode: false,
            charEncoding: "none",
        }),
        decimal: encodeSimple$("decimal", payload$.decimal, {
            explode: false,
            charEncoding: "none",
        }),
        decimalNullableOpt: encodeSimple$("decimalNullableOpt", payload$.decimalNullableOpt, {
            explode: false,
            charEncoding: "none",
        }),
        decimalStr: encodeSimple$("decimalStr", payload$.decimalStr, {
            explode: false,
            charEncoding: "none",
        }),
        enum: encodeSimple$("enum", payload$.enum, { explode: false, charEncoding: "none" }),
        float32: encodeSimple$("float32", payload$.float32, {
            explode: false,
            charEncoding: "none",
        }),
        float64Str: encodeSimple$("float64Str", payload$.float64Str, {
            explode: false,
            charEncoding: "none",
        }),
        int: encodeSimple$("int", payload$.int, { explode: false, charEncoding: "none" }),
        int32: encodeSimple$("int32", payload$.int32, { explode: false, charEncoding: "none" }),
        int32Enum: encodeSimple$("int32Enum", payload$.int32Enum, {
            explode: false,
            charEncoding: "none",
        }),
        int64Str: encodeSimple$("int64Str", payload$.int64Str, {
            explode: false,
            charEncoding: "none",
        }),
        intEnum: encodeSimple$("intEnum", payload$.intEnum, {
            explode: false,
            charEncoding: "none",
        }),
        intOptNull: encodeSimple$("intOptNull", payload$.intOptNull, {
            explode: false,
            charEncoding: "none",
        }),
        num: encodeSimple$("num", payload$.num, { explode: false, charEncoding: "none" }),
        numOptNull: encodeSimple$("numOptNull", payload$.numOptNull, {
            explode: false,
            charEncoding: "none",
        }),
        str: encodeSimple$("str", payload$.str, { explode: false, charEncoding: "none" }),
        strOpt: encodeSimple$("strOpt", payload$.strOpt, { explode: false, charEncoding: "none" }),
    });

    const security$ = await extractSecurity(client$.options$.security);
    const context = {
        operationID: "requestBodyPostMultipleContentTypesComponentFiltered",
        oAuth2Scopes: [],
        securitySource: client$.options$.security,
    };
    const securitySettings$ = resolveGlobalSecurity(security$);

    const requestRes = client$.createRequest$(
        context,
        {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            body: body$,
            uaHeader: "x-speakeasy-user-agent",
            timeoutMs: options?.timeoutMs || client$.options$.timeoutMs || -1,
        },
        options
    );
    if (!requestRes.ok) {
        return requestRes;
    }
    const request$ = requestRes.value;

    const doResult = await client$.do$(request$, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: options?.retries || client$.options$.retryConfig,
        retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
    });
    if (!doResult.ok) {
        return doResult;
    }
    const response = doResult.value;

    const [result$] = await m$.match<
        operations.RequestBodyPostMultipleContentTypesComponentFilteredRes,
        | SDKError
        | SDKValidationError
        | UnexpectedClientError
        | InvalidRequestError
        | RequestAbortedError
        | RequestTimeoutError
        | ConnectionError
    >(
        m$.json(
            200,
            operations.RequestBodyPostMultipleContentTypesComponentFilteredRes$inboundSchema
        ),
        m$.fail(["4XX", "5XX"])
    )(response);
    if (!result$.ok) {
        return result$;
    }

    return result$;
}
