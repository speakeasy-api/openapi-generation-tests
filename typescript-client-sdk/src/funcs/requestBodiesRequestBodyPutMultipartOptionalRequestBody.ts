/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SDKCore } from "../core.js";
import { readableStreamToArrayBuffer } from "../lib/files.js";
import * as M from "../lib/matchers.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../sdk/models/errors/httpclienterrors.js";
import { SDKError } from "../sdk/models/errors/sdkerror.js";
import { SDKValidationError } from "../sdk/models/errors/sdkvalidationerror.js";
import * as operations from "../sdk/models/operations/index.js";
import { isBlobLike } from "../sdk/types/blobs.js";
import { Result } from "../sdk/types/fp.js";
import { isReadableStream } from "../sdk/types/streams.js";

export async function requestBodiesRequestBodyPutMultipartOptionalRequestBody(
  client: SDKCore,
  request?:
    | operations.RequestBodyPutMultipartOptionalRequestBodyRequestBody
    | undefined,
  options?: RequestOptions,
): Promise<
  Result<
    operations.RequestBodyPutMultipartOptionalRequestBodyRes,
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  const parsed = safeParse(
    request,
    (value) =>
      operations
        .RequestBodyPutMultipartOptionalRequestBodyRequestBody$outboundSchema
        .optional().parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return parsed;
  }
  const payload = parsed.value;
  const body = new FormData();
  if (payload != null) {
    if (payload?.sampleField !== undefined) {
      body.append("sampleField", payload?.sampleField);
    }
    if (payload?.sampleFile !== undefined) {
      if (isBlobLike(payload?.sampleFile)) {
        body.append("sampleFile", payload?.sampleFile);
      } else if (isReadableStream(payload?.sampleFile.content)) {
        const buffer = await readableStreamToArrayBuffer(
          payload?.sampleFile.content,
        );
        const blob = new Blob([buffer], { type: "application/octet-stream" });
        body.append("sampleFile", blob);
      } else {
        body.append(
          "sampleFile",
          new Blob([payload?.sampleFile.content], {
            type: "application/octet-stream",
          }),
          payload?.sampleFile.fileName,
        );
      }
    }
  }

  const path = pathToFunc(
    "/anything/requestBodies/put/multipart/optionalRequestBody",
  )();

  const headers = new Headers({
    Accept: "application/json",
  });

  const securityInput = await extractSecurity(client._options.security);
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    operationID: "requestBodyPutMultipartOptionalRequestBody",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "PUT",
    path: path,
    headers: headers,
    body: body,
    uaHeader: "x-speakeasy-user-agent",
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return requestRes;
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return doResult;
  }
  const response = doResult.value;

  const [result] = await M.match<
    operations.RequestBodyPutMultipartOptionalRequestBodyRes,
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(
      200,
      operations.RequestBodyPutMultipartOptionalRequestBodyRes$inboundSchema,
    ),
    M.fail(["4XX", "5XX"]),
  )(response);
  if (!result.ok) {
    return result;
  }

  return result;
}
