/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SDKCore } from "../core.js";
import { encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../sdk/models/errors/httpclienterrors.js";
import { SDKError } from "../sdk/models/errors/sdkerror.js";
import { SDKValidationError } from "../sdk/models/errors/sdkvalidationerror.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { Result } from "../sdk/types/fp.js";

export async function requestBodiesRequestBodyPutMultipartSimple(
  client: SDKCore,
  request: shared.SimpleObject,
  options?: RequestOptions,
): Promise<
  Result<
    operations.RequestBodyPutMultipartSimpleRes,
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  const parsed = safeParse(
    request,
    (value) => shared.SimpleObject$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return parsed;
  }
  const payload = parsed.value;
  const body = new FormData();

  body.append("bool", String(payload.bool));
  body.append("date", payload.date);
  body.append("dateTime", payload.dateTime);
  body.append("enum", payload.enum);
  body.append("float32", String(payload.float32));
  body.append("int", String(payload.int));
  body.append("int32", String(payload.int32));
  body.append("int32Enum", String(payload.int32Enum));
  body.append("intEnum", String(payload.intEnum));
  body.append("num", String(payload.num));
  body.append("str", payload.str);
  if (payload.any !== undefined) {
    body.append("any", String(payload.any));
  }
  if (payload.bigint !== undefined) {
    body.append("bigint", String(payload.bigint));
  }
  if (payload.bigintStr !== undefined) {
    body.append("bigintStr", payload.bigintStr);
  }
  if (payload.boolOpt !== undefined) {
    body.append("boolOpt", String(payload.boolOpt));
  }
  if (payload.decimal !== undefined) {
    body.append("decimal", String(payload.decimal));
  }
  if (payload.decimalNullableOpt !== undefined) {
    body.append("decimalNullableOpt", String(payload.decimalNullableOpt));
  }
  if (payload.decimalStr !== undefined) {
    body.append("decimalStr", payload.decimalStr);
  }
  if (payload.float64Str !== undefined) {
    body.append("float64Str", payload.float64Str);
  }
  if (payload.int64Str !== undefined) {
    body.append("int64Str", payload.int64Str);
  }
  if (payload.intOptNull !== undefined) {
    body.append("intOptNull", String(payload.intOptNull));
  }
  if (payload.numOptNull !== undefined) {
    body.append("numOptNull", String(payload.numOptNull));
  }
  if (payload.strOpt !== undefined) {
    body.append("strOpt", payload.strOpt);
  }

  const path = pathToFunc("/anything/requestBodies/put/multipart/simple")();

  const headers = new Headers({
    Accept: "application/json",
    "any": encodeSimple("any", payload.any, {
      explode: false,
      charEncoding: "none",
    }),
    "bigint": encodeSimple("bigint", payload.bigint, {
      explode: false,
      charEncoding: "none",
    }),
    "bigintStr": encodeSimple("bigintStr", payload.bigintStr, {
      explode: false,
      charEncoding: "none",
    }),
    "bool": encodeSimple("bool", payload.bool, {
      explode: false,
      charEncoding: "none",
    }),
    "boolOpt": encodeSimple("boolOpt", payload.boolOpt, {
      explode: false,
      charEncoding: "none",
    }),
    "date": encodeSimple("date", payload.date, {
      explode: false,
      charEncoding: "none",
    }),
    "dateTime": encodeSimple("dateTime", payload.dateTime, {
      explode: false,
      charEncoding: "none",
    }),
    "decimal": encodeSimple("decimal", payload.decimal, {
      explode: false,
      charEncoding: "none",
    }),
    "decimalNullableOpt": encodeSimple(
      "decimalNullableOpt",
      payload.decimalNullableOpt,
      { explode: false, charEncoding: "none" },
    ),
    "decimalStr": encodeSimple("decimalStr", payload.decimalStr, {
      explode: false,
      charEncoding: "none",
    }),
    "enum": encodeSimple("enum", payload.enum, {
      explode: false,
      charEncoding: "none",
    }),
    "float32": encodeSimple("float32", payload.float32, {
      explode: false,
      charEncoding: "none",
    }),
    "float64Str": encodeSimple("float64Str", payload.float64Str, {
      explode: false,
      charEncoding: "none",
    }),
    "int": encodeSimple("int", payload.int, {
      explode: false,
      charEncoding: "none",
    }),
    "int32": encodeSimple("int32", payload.int32, {
      explode: false,
      charEncoding: "none",
    }),
    "int32Enum": encodeSimple("int32Enum", payload.int32Enum, {
      explode: false,
      charEncoding: "none",
    }),
    "int64Str": encodeSimple("int64Str", payload.int64Str, {
      explode: false,
      charEncoding: "none",
    }),
    "intEnum": encodeSimple("intEnum", payload.intEnum, {
      explode: false,
      charEncoding: "none",
    }),
    "intOptNull": encodeSimple("intOptNull", payload.intOptNull, {
      explode: false,
      charEncoding: "none",
    }),
    "num": encodeSimple("num", payload.num, {
      explode: false,
      charEncoding: "none",
    }),
    "numOptNull": encodeSimple("numOptNull", payload.numOptNull, {
      explode: false,
      charEncoding: "none",
    }),
    "str": encodeSimple("str", payload.str, {
      explode: false,
      charEncoding: "none",
    }),
    "strOpt": encodeSimple("strOpt", payload.strOpt, {
      explode: false,
      charEncoding: "none",
    }),
  });

  const securityInput = await extractSecurity(client._options.security);
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    operationID: "requestBodyPutMultipartSimple",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "PUT",
    path: path,
    headers: headers,
    body: body,
    uaHeader: "x-speakeasy-user-agent",
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return requestRes;
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return doResult;
  }
  const response = doResult.value;

  const [result] = await M.match<
    operations.RequestBodyPutMultipartSimpleRes,
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(200, operations.RequestBodyPutMultipartSimpleRes$inboundSchema),
    M.fail(["4XX", "5XX"]),
  )(response);
  if (!result.ok) {
    return result;
  }

  return result;
}
