/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../sdk/models/shared";
import { HTTPClient } from "./http";
import { RetryConfig } from "./retries";
import { Params, pathToFunc } from "./url";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
    /**
     * The default server.
     */
    "http://localhost:35123",
    /**
     * A server url to a non-existent server.
     */
    "http://broken",
    /**
     * A server url with templated variables.
     */
    "http://{hostname}:{port}",
    /**
     * A server url with templated variables.
     */
    "http://localhost:35123/anything/{something}",
    /**
     * A server url with templated variables (including the protocol).
     */
    "{protocol}://{hostname}:{port}",
] as const;

/**
 * Something is a variable for changing the root path
 */
export enum ServerSomething {
    Something = "something",
    SomethingElse = "somethingElse",
    SomethingElseAgain = "somethingElseAgain",
}

export type SDKOptions = {
    /**
     * The security details required to authenticate the SDK
     */
    security?: shared.Security | (() => Promise<shared.Security>);

    /**
     * Allows setting the globalHeaderParam parameter for all supported operations
     */
    globalHeaderParam?: boolean;

    /**
     * Allows setting the globalHiddenHeaderParam parameter for all supported operations
     */
    globalHiddenHeaderParam?: string;

    /**
     * Allows setting the globalHiddenPathParam parameter for all supported operations
     */
    globalHiddenPathParam?: string;

    /**
     * Allows setting the globalHiddenQueryParam parameter for all supported operations
     */
    globalHiddenQueryParam?: string;

    /**
     * Allows setting the globalPathParam parameter for all supported operations
     */
    globalPathParam?: number;

    /**
     * Allows setting the globalQueryParam parameter for all supported operations
     */
    globalQueryParam?: string;

    httpClient?: HTTPClient;
    /**
     * Allows overriding the default server used by the SDK
     */
    serverIdx?: number;
    /**
     * Allows setting the hostname variable for url substitution
     */
    hostname?: string;
    /**
     * Allows setting the port variable for url substitution
     */
    port?: string;
    /**
     * Allows setting the something variable for url substitution
     */
    something?: ServerSomething;
    /**
     * Allows setting the protocol variable for url substitution
     */
    protocol?: string;
    /**
     * Allows overriding the default server URL used by the SDK
     */
    serverURL?: string;
    /**
     * Allows overriding the default retry config used by the SDK
     */
    retryConfig?: RetryConfig;
};

export function serverURLFromOptions(options: SDKOptions): URL | null {
    let serverURL = options.serverURL;

    const serverParams: Params[] = [
        {},
        {},
        {
            hostname: options.hostname ?? "localhost",
            port: options.port ?? "35123",
        },
        {
            something: options.something ?? "something",
        },
        {
            hostname: options.hostname ?? "localhost",
            port: options.port ?? "35123",
            protocol: options.protocol ?? "http",
        },
    ];
    let params: Params = {};

    if (!serverURL) {
        const serverIdx = options.serverIdx ?? 0;
        if (serverIdx < 0 || serverIdx >= ServerList.length) {
            throw new Error(`Invalid server index ${serverIdx}`);
        }
        serverURL = ServerList[serverIdx] || "";
        params = serverParams[serverIdx] || {};
    }

    const u = pathToFunc(serverURL)(params);
    return new URL(u);
}

export const SDK_METADATA = {
    language: "typescript",
    openapiDocVersion: "0.1.0",
    sdkVersion: "2.2.0",
    genVersion: "2.342.6",
    userAgent: "speakeasy-sdk/typescript 2.2.0 2.342.6 0.1.0 openapi",
} as const;
