/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { authApiKeyAuth } from "../funcs/authApiKeyAuth.js";
import { authApiKeyAuthGlobal } from "../funcs/authApiKeyAuthGlobal.js";
import { authBasicAuth } from "../funcs/authBasicAuth.js";
import { authBearerAuth } from "../funcs/authBearerAuth.js";
import { authGlobalBearerAuth } from "../funcs/authGlobalBearerAuth.js";
import { authNoAuth } from "../funcs/authNoAuth.js";
import { authOauth2Auth } from "../funcs/authOauth2Auth.js";
import { authOauth2Override } from "../funcs/authOauth2Override.js";
import { authOpenIdConnectAuth } from "../funcs/authOpenIdConnectAuth.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Auth extends ClientSDK {
    async apiKeyAuth(options?: RequestOptions): Promise<operations.ApiKeyAuthToken> {
        return unwrapAsync(authApiKeyAuth(this, options));
    }

    async apiKeyAuthGlobal(options?: RequestOptions): Promise<operations.ApiKeyAuthGlobalToken> {
        return unwrapAsync(authApiKeyAuthGlobal(this, options));
    }

    async basicAuth(
        security: operations.BasicAuthSecurity,
        passwd: string,
        user: string,
        options?: RequestOptions
    ): Promise<operations.BasicAuthUser> {
        return unwrapAsync(authBasicAuth(this, security, passwd, user, options));
    }

    async bearerAuth(
        security: operations.BearerAuthSecurity,
        options?: RequestOptions
    ): Promise<operations.BearerAuthToken> {
        return unwrapAsync(authBearerAuth(this, security, options));
    }

    async globalBearerAuth(options?: RequestOptions): Promise<operations.GlobalBearerAuthToken> {
        return unwrapAsync(authGlobalBearerAuth(this, options));
    }

    async noAuth(options?: RequestOptions): Promise<void> {
        return unwrapAsync(authNoAuth(this, options));
    }

    async oauth2Auth(options?: RequestOptions): Promise<operations.Oauth2AuthToken> {
        return unwrapAsync(authOauth2Auth(this, options));
    }

    async oauth2Override(options?: RequestOptions): Promise<operations.Oauth2OverrideToken> {
        return unwrapAsync(authOauth2Override(this, options));
    }

    async openIdConnectAuth(
        security: operations.OpenIdConnectAuthSecurity,
        options?: RequestOptions
    ): Promise<operations.OpenIdConnectAuthToken> {
        return unwrapAsync(authOpenIdConnectAuth(this, security, options));
    }
}
