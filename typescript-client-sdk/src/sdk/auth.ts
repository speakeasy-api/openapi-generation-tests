/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { encodeSimple as encodeSimple$ } from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import {
    extractSecurity,
    resolveGlobalSecurity,
    resolveSecurity,
    SecurityInput,
} from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { SDKError } from "./models/errors/sdkerror.js";
import { SDKValidationError } from "./models/errors/sdkvalidationerror.js";
import * as operations from "./models/operations/index.js";
import { unwrap as unwrap$ } from "./types/fp.js";
import * as z from "zod";

export class Auth extends ClientSDK {
    async apiKeyAuth(options?: RequestOptions): Promise<operations.ApiKeyAuthToken> {
        const path$ = pathToFunc("/bearer#operation")();

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "apiKeyAuth",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["401", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<operations.ApiKeyAuthToken, SDKError | SDKValidationError>(
            m$.json(200, operations.ApiKeyAuthToken$inboundSchema),
            m$.fail([401, "4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async apiKeyAuthGlobal(options?: RequestOptions): Promise<operations.ApiKeyAuthGlobalToken> {
        const path$ = pathToFunc("/bearer")();

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "apiKeyAuthGlobal",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["401", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.ApiKeyAuthGlobalToken,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.ApiKeyAuthGlobalToken$inboundSchema),
            m$.fail([401, "4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async basicAuth(
        security: operations.BasicAuthSecurity,
        passwd: string,
        user: string,
        options?: RequestOptions
    ): Promise<operations.BasicAuthUser> {
        const input$: operations.BasicAuthRequest = {
            passwd: passwd,
            user: user,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.BasicAuthRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const pathParams$ = {
            passwd: encodeSimple$("passwd", payload$.passwd, {
                explode: false,
                charEncoding: "percent",
            }),
            user: encodeSimple$("user", payload$.user, { explode: false, charEncoding: "percent" }),
        };

        const path$ = pathToFunc("/basic-auth/{user}/{passwd}")(pathParams$);

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$: SecurityInput[][] = [
            [
                {
                    type: "http:basic",
                    value: { password: security?.password, username: security?.username },
                },
            ],
        ];
        const securitySettings$ = resolveSecurity(...security$);
        const context = { operationID: "basicAuth", oAuth2Scopes: [], securitySource: security$ };

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["401", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<operations.BasicAuthUser, SDKError | SDKValidationError>(
            m$.json(200, operations.BasicAuthUser$inboundSchema),
            m$.fail([401, "4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async bearerAuth(
        security: operations.BearerAuthSecurity,
        options?: RequestOptions
    ): Promise<operations.BearerAuthToken> {
        const path$ = pathToFunc("/bearer#bearer")();

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "http:bearer",
                    value: security?.bearerAuth,
                },
            ],
        ];
        const securitySettings$ = resolveSecurity(...security$);
        const context = { operationID: "bearerAuth", oAuth2Scopes: [], securitySource: security$ };

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["401", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<operations.BearerAuthToken, SDKError | SDKValidationError>(
            m$.json(200, operations.BearerAuthToken$inboundSchema),
            m$.fail([401, "4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async globalBearerAuth(options?: RequestOptions): Promise<operations.GlobalBearerAuthToken> {
        const path$ = pathToFunc("/bearer#global")();

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "globalBearerAuth",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["401", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.GlobalBearerAuthToken,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.GlobalBearerAuthToken$inboundSchema),
            m$.fail([401, "4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async noAuth(options?: RequestOptions): Promise<void> {
        const path$ = pathToFunc("/anything/no-auth")();

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const context = { operationID: "noAuth", oAuth2Scopes: [], securitySource: null };

        const requestRes$ = this.createRequest$(
            context,
            {
                method: "GET",
                path: path$,
                headers: headers$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<void, SDKError | SDKValidationError>(
            m$.nil(200, z.void()),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async oauth2Auth(options?: RequestOptions): Promise<operations.Oauth2AuthToken> {
        const path$ = pathToFunc("/bearer#oauth2")();

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "oauth2Auth",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["401", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<operations.Oauth2AuthToken, SDKError | SDKValidationError>(
            m$.json(200, operations.Oauth2AuthToken$inboundSchema),
            m$.fail([401, "4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async oauth2Override(options?: RequestOptions): Promise<operations.Oauth2OverrideToken> {
        const path$ = pathToFunc("/bearer#oauth2AuthOverride")();

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "oauth2Override",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["401", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.Oauth2OverrideToken,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.Oauth2OverrideToken$inboundSchema),
            m$.fail([401, "4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async openIdConnectAuth(
        security: operations.OpenIdConnectAuthSecurity,
        options?: RequestOptions
    ): Promise<operations.OpenIdConnectAuthToken> {
        const path$ = pathToFunc("/bearer#openIdConnect")();

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "openIdConnect",
                    value: security?.openIdConnect,
                },
            ],
        ];
        const securitySettings$ = resolveSecurity(...security$);
        const context = {
            operationID: "openIdConnectAuth",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["401", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.OpenIdConnectAuthToken,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.OpenIdConnectAuthToken$inboundSchema),
            m$.fail([401, "4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }
}
