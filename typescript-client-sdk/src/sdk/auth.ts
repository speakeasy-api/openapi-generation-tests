/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { encodeSimple as encodeSimple$ } from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { SecurityInput } from "../lib/security.js";
import * as operations from "./models/operations/index.js";
import * as z from "zod";

export class Auth extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    async apiKeyAuth(options?: RequestOptions): Promise<operations.ApiKeyAuthToken> {
        const path$ = this.templateURLComponent("/bearer#operation")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "apiKeyAuth",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                uaHeader: "x-speakeasy-user-agent",
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["401", "4XX", "5XX"] });

        const [result$] = await this.matcher<operations.ApiKeyAuthToken>()
            .json(200, operations.ApiKeyAuthToken$)
            .fail([401, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    async apiKeyAuthGlobal(options?: RequestOptions): Promise<operations.ApiKeyAuthGlobalToken> {
        const path$ = this.templateURLComponent("/bearer")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "apiKeyAuthGlobal",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                uaHeader: "x-speakeasy-user-agent",
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["401", "4XX", "5XX"] });

        const [result$] = await this.matcher<operations.ApiKeyAuthGlobalToken>()
            .json(200, operations.ApiKeyAuthGlobalToken$)
            .fail([401, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    async basicAuth(
        security: operations.BasicAuthSecurity,
        passwd: string,
        user: string,
        options?: RequestOptions
    ): Promise<operations.BasicAuthUser> {
        const input$: operations.BasicAuthRequest = {
            passwd: passwd,
            user: user,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.BasicAuthRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            passwd: encodeSimple$("passwd", payload$.passwd, {
                explode: false,
                charEncoding: "percent",
            }),
            user: encodeSimple$("user", payload$.user, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/basic-auth/{user}/{passwd}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$: SecurityInput[][] = [
            [
                {
                    type: "http:basic",
                    value: { username: security?.username, password: security?.password },
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = { operationID: "basicAuth", oAuth2Scopes: [], securitySource: security$ };

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["401", "4XX", "5XX"] });

        const [result$] = await this.matcher<operations.BasicAuthUser>()
            .json(200, operations.BasicAuthUser$)
            .fail([401, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    async bearerAuth(
        security: operations.BearerAuthSecurity,
        options?: RequestOptions
    ): Promise<operations.BearerAuthToken> {
        const path$ = this.templateURLComponent("/bearer#bearer")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "http:bearer",
                    value: security?.bearerAuth,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = { operationID: "bearerAuth", oAuth2Scopes: [], securitySource: security$ };

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                uaHeader: "x-speakeasy-user-agent",
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["401", "4XX", "5XX"] });

        const [result$] = await this.matcher<operations.BearerAuthToken>()
            .json(200, operations.BearerAuthToken$)
            .fail([401, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    async globalBearerAuth(options?: RequestOptions): Promise<operations.GlobalBearerAuthToken> {
        const path$ = this.templateURLComponent("/bearer#global")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "globalBearerAuth",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                uaHeader: "x-speakeasy-user-agent",
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["401", "4XX", "5XX"] });

        const [result$] = await this.matcher<operations.GlobalBearerAuthToken>()
            .json(200, operations.GlobalBearerAuthToken$)
            .fail([401, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    async noAuth(options?: RequestOptions): Promise<void> {
        const path$ = this.templateURLComponent("/anything/no-auth")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const context = { operationID: "noAuth", oAuth2Scopes: [], securitySource: null };

        const request$ = this.createRequest$(
            context,
            {
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                uaHeader: "x-speakeasy-user-agent",
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["4XX", "5XX"] });

        const [result$] = await this.matcher<void>()
            .void(200, z.void())
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }

    async oauth2Auth(options?: RequestOptions): Promise<operations.Oauth2AuthToken> {
        const path$ = this.templateURLComponent("/bearer#oauth2")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "oauth2Auth",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                uaHeader: "x-speakeasy-user-agent",
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["401", "4XX", "5XX"] });

        const [result$] = await this.matcher<operations.Oauth2AuthToken>()
            .json(200, operations.Oauth2AuthToken$)
            .fail([401, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    async oauth2Override(options?: RequestOptions): Promise<operations.Oauth2OverrideToken> {
        const path$ = this.templateURLComponent("/bearer#oauth2AuthOverride")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "oauth2Override",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                uaHeader: "x-speakeasy-user-agent",
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["401", "4XX", "5XX"] });

        const [result$] = await this.matcher<operations.Oauth2OverrideToken>()
            .json(200, operations.Oauth2OverrideToken$)
            .fail([401, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    async openIdConnectAuth(
        security: operations.OpenIdConnectAuthSecurity,
        options?: RequestOptions
    ): Promise<operations.OpenIdConnectAuthToken> {
        const path$ = this.templateURLComponent("/bearer#openIdConnect")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "openIdConnect",
                    value: security?.openIdConnect,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "openIdConnectAuth",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                uaHeader: "x-speakeasy-user-agent",
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["401", "4XX", "5XX"] });

        const [result$] = await this.matcher<operations.OpenIdConnectAuthToken>()
            .json(200, operations.OpenIdConnectAuthToken$)
            .fail([401, "4XX", "5XX"])
            .match(response);

        return result$;
    }
}
