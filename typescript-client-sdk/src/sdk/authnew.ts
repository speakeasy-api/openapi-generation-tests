/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { authNewAuthGlobal } from "../funcs/authNewAuthGlobal.js";
import { authNewBasicAuthNew } from "../funcs/authNewBasicAuthNew.js";
import { authNewCustomSchemeAppId } from "../funcs/authNewCustomSchemeAppId.js";
import { authNewMultipleMixedOptionsAuth } from "../funcs/authNewMultipleMixedOptionsAuth.js";
import { authNewMultipleMixedSchemeAuth } from "../funcs/authNewMultipleMixedSchemeAuth.js";
import { authNewMultipleOptionsWithMixedSchemesAuth } from "../funcs/authNewMultipleOptionsWithMixedSchemesAuth.js";
import { authNewMultipleOptionsWithSimpleSchemesAuth } from "../funcs/authNewMultipleOptionsWithSimpleSchemesAuth.js";
import { authNewMultipleSimpleOptionsAuth } from "../funcs/authNewMultipleSimpleOptionsAuth.js";
import { authNewMultipleSimpleSchemeAuth } from "../funcs/authNewMultipleSimpleSchemeAuth.js";
import { authNewOauth2AuthNew } from "../funcs/authNewOauth2AuthNew.js";
import { authNewOpenIdConnectAuthNew } from "../funcs/authNewOpenIdConnectAuthNew.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class AuthNew extends ClientSDK {
  async authGlobal(
    request: shared.AuthServiceRequestBody,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<void> {
    return unwrapAsync(authNewAuthGlobal(
      this,
      request,
      options,
    ));
  }

  async basicAuthNew(
    security: operations.BasicAuthNewSecurity,
    request: shared.AuthServiceRequestBody,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<void> {
    return unwrapAsync(authNewBasicAuthNew(
      this,
      security,
      request,
      options,
    ));
  }

  async customSchemeAppId(
    security: operations.CustomSchemeAppIdSecurity,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<void> {
    return unwrapAsync(authNewCustomSchemeAppId(
      this,
      security,
      options,
    ));
  }

  async multipleMixedOptionsAuth(
    security: operations.MultipleMixedOptionsAuthSecurity,
    request: shared.AuthServiceRequestBody,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<void> {
    return unwrapAsync(authNewMultipleMixedOptionsAuth(
      this,
      security,
      request,
      options,
    ));
  }

  async multipleMixedSchemeAuth(
    security: operations.MultipleMixedSchemeAuthSecurity,
    request: shared.AuthServiceRequestBody,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<void> {
    return unwrapAsync(authNewMultipleMixedSchemeAuth(
      this,
      security,
      request,
      options,
    ));
  }

  async multipleOptionsWithMixedSchemesAuth(
    security: operations.MultipleOptionsWithMixedSchemesAuthSecurity,
    request: shared.AuthServiceRequestBody,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<void> {
    return unwrapAsync(authNewMultipleOptionsWithMixedSchemesAuth(
      this,
      security,
      request,
      options,
    ));
  }

  async multipleOptionsWithSimpleSchemesAuth(
    security: operations.MultipleOptionsWithSimpleSchemesAuthSecurity,
    request: shared.AuthServiceRequestBody,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<void> {
    return unwrapAsync(authNewMultipleOptionsWithSimpleSchemesAuth(
      this,
      security,
      request,
      options,
    ));
  }

  async multipleSimpleOptionsAuth(
    security: operations.MultipleSimpleOptionsAuthSecurity,
    request: shared.AuthServiceRequestBody,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<void> {
    return unwrapAsync(authNewMultipleSimpleOptionsAuth(
      this,
      security,
      request,
      options,
    ));
  }

  async multipleSimpleSchemeAuth(
    security: operations.MultipleSimpleSchemeAuthSecurity,
    request: shared.AuthServiceRequestBody,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<void> {
    return unwrapAsync(authNewMultipleSimpleSchemeAuth(
      this,
      security,
      request,
      options,
    ));
  }

  async oauth2AuthNew(
    request: shared.AuthServiceRequestBody,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<void> {
    return unwrapAsync(authNewOauth2AuthNew(
      this,
      request,
      options,
    ));
  }

  async openIdConnectAuthNew(
    security: operations.OpenIdConnectAuthNewSecurity,
    request: shared.AuthServiceRequestBody,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<void> {
    return unwrapAsync(authNewOpenIdConnectAuthNew(
      this,
      security,
      request,
      options,
    ));
  }
}
