/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { encodeJSON as encodeJSON$ } from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import {
    extractSecurity,
    resolveGlobalSecurity,
    resolveSecurity,
    SecurityInput,
} from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { SDKError } from "./models/errors/sdkerror.js";
import { SDKValidationError } from "./models/errors/sdkvalidationerror.js";
import { AuthGlobalServerList } from "./models/operations/authglobal.js";
import { BasicAuthNewServerList } from "./models/operations/basicauthnew.js";
import * as operations from "./models/operations/index.js";
import { MultipleMixedOptionsAuthServerList } from "./models/operations/multiplemixedoptionsauth.js";
import { MultipleMixedSchemeAuthServerList } from "./models/operations/multiplemixedschemeauth.js";
import { MultipleOptionsWithMixedSchemesAuthServerList } from "./models/operations/multipleoptionswithmixedschemesauth.js";
import { MultipleOptionsWithSimpleSchemesAuthServerList } from "./models/operations/multipleoptionswithsimpleschemesauth.js";
import { MultipleSimpleOptionsAuthServerList } from "./models/operations/multiplesimpleoptionsauth.js";
import { MultipleSimpleSchemeAuthServerList } from "./models/operations/multiplesimpleschemeauth.js";
import { Oauth2AuthNewServerList } from "./models/operations/oauth2authnew.js";
import { OpenIdConnectAuthNewServerList } from "./models/operations/openidconnectauthnew.js";
import * as shared from "./models/shared/index.js";
import { unwrap as unwrap$ } from "./types/fp.js";
import * as z from "zod";

export class AuthNew extends ClientSDK {
    async authGlobal(
        request: shared.AuthServiceRequestBody,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<void> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => shared.AuthServiceRequestBody$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const baseURL$ =
            options?.serverURL ||
            pathToFunc(AuthGlobalServerList[0], { charEncoding: "percent" })();

        const path$ = pathToFunc("/auth#authGlobal")();

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "*/*",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "authGlobal",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["401", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<void, SDKError | SDKValidationError>(
            m$.nil(200, z.void()),
            m$.fail([401, "4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async basicAuthNew(
        request: shared.AuthServiceRequestBody,
        security: operations.BasicAuthNewSecurity,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<void> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => shared.AuthServiceRequestBody$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const baseURL$ =
            options?.serverURL ||
            pathToFunc(BasicAuthNewServerList[0], { charEncoding: "percent" })();

        const path$ = pathToFunc("/auth#basicAuth")();

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "*/*",
        });

        const security$: SecurityInput[][] = [
            [
                {
                    type: "http:basic",
                    value: { password: security?.password, username: security?.username },
                },
            ],
        ];
        const securitySettings$ = resolveSecurity(...security$);
        const context = {
            operationID: "basicAuthNew",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["401", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<void, SDKError | SDKValidationError>(
            m$.nil(200, z.void()),
            m$.fail([401, "4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async multipleMixedOptionsAuth(
        request: shared.AuthServiceRequestBody,
        security: operations.MultipleMixedOptionsAuthSecurity,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<void> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => shared.AuthServiceRequestBody$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const baseURL$ =
            options?.serverURL ||
            pathToFunc(MultipleMixedOptionsAuthServerList[0], { charEncoding: "percent" })();

        const path$ = pathToFunc("/auth#multipleMixedOptionsAuth")();

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "*/*",
        });

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "x-api-key",
                    type: "apiKey:header",
                    value: security?.apiKeyAuthNew,
                },
            ],
            [
                {
                    type: "http:basic",
                    value: {
                        password: security?.basicAuth?.password,
                        username: security?.basicAuth?.username,
                    },
                },
            ],
        ];
        const securitySettings$ = resolveSecurity(...security$);
        const context = {
            operationID: "multipleMixedOptionsAuth",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["401", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<void, SDKError | SDKValidationError>(
            m$.nil(200, z.void()),
            m$.fail([401, "4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async multipleMixedSchemeAuth(
        request: shared.AuthServiceRequestBody,
        security: operations.MultipleMixedSchemeAuthSecurity,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<void> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => shared.AuthServiceRequestBody$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const baseURL$ =
            options?.serverURL ||
            pathToFunc(MultipleMixedSchemeAuthServerList[0], { charEncoding: "percent" })();

        const path$ = pathToFunc("/auth#multipleMixedSchemeAuth")();

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "*/*",
        });

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "x-api-key",
                    type: "apiKey:header",
                    value: security?.apiKeyAuthNew,
                },
                {
                    type: "http:basic",
                    value: {
                        password: security?.basicAuth?.password,
                        username: security?.basicAuth?.username,
                    },
                },
            ],
        ];
        const securitySettings$ = resolveSecurity(...security$);
        const context = {
            operationID: "multipleMixedSchemeAuth",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["401", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<void, SDKError | SDKValidationError>(
            m$.nil(200, z.void()),
            m$.fail([401, "4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async multipleOptionsWithMixedSchemesAuth(
        request: shared.AuthServiceRequestBody,
        security: operations.MultipleOptionsWithMixedSchemesAuthSecurity,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<void> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => shared.AuthServiceRequestBody$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const baseURL$ =
            options?.serverURL ||
            pathToFunc(MultipleOptionsWithMixedSchemesAuthServerList[0], {
                charEncoding: "percent",
            })();

        const path$ = pathToFunc("/auth#multipleOptionsWithMixedSchemesAuth")();

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "*/*",
        });

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "x-api-key",
                    type: "apiKey:header",
                    value: security?.option1?.apiKeyAuthNew,
                },
                {
                    fieldName: "Authorization",
                    type: "oauth2",
                    value: security?.option1?.oauth2,
                },
            ],
            [
                {
                    fieldName: "x-api-key",
                    type: "apiKey:header",
                    value: security?.option2?.apiKeyAuthNew,
                },
                {
                    type: "http:basic",
                    value: {
                        password: security?.option2?.basicAuth?.password,
                        username: security?.option2?.basicAuth?.username,
                    },
                },
            ],
        ];
        const securitySettings$ = resolveSecurity(...security$);
        const context = {
            operationID: "multipleOptionsWithMixedSchemesAuth",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["401", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<void, SDKError | SDKValidationError>(
            m$.nil(200, z.void()),
            m$.fail([401, "4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async multipleOptionsWithSimpleSchemesAuth(
        request: shared.AuthServiceRequestBody,
        security: operations.MultipleOptionsWithSimpleSchemesAuthSecurity,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<void> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => shared.AuthServiceRequestBody$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const baseURL$ =
            options?.serverURL ||
            pathToFunc(MultipleOptionsWithSimpleSchemesAuthServerList[0], {
                charEncoding: "percent",
            })();

        const path$ = pathToFunc("/auth#multipleOptionsWithSimpleSchemesAuth")();

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "*/*",
        });

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "x-api-key",
                    type: "apiKey:header",
                    value: security?.option1?.apiKeyAuthNew,
                },
                {
                    fieldName: "Authorization",
                    type: "oauth2",
                    value: security?.option1?.oauth2,
                },
            ],
            [
                {
                    fieldName: "x-api-key",
                    type: "apiKey:header",
                    value: security?.option2?.apiKeyAuthNew,
                },
                {
                    fieldName: "Authorization",
                    type: "openIdConnect",
                    value: security?.option2?.openIdConnect,
                },
            ],
        ];
        const securitySettings$ = resolveSecurity(...security$);
        const context = {
            operationID: "multipleOptionsWithSimpleSchemesAuth",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["401", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<void, SDKError | SDKValidationError>(
            m$.nil(200, z.void()),
            m$.fail([401, "4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async multipleSimpleOptionsAuth(
        request: shared.AuthServiceRequestBody,
        security: operations.MultipleSimpleOptionsAuthSecurity,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<void> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => shared.AuthServiceRequestBody$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const baseURL$ =
            options?.serverURL ||
            pathToFunc(MultipleSimpleOptionsAuthServerList[0], { charEncoding: "percent" })();

        const path$ = pathToFunc("/auth#multipleSimpleOptionsAuth")();

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "*/*",
        });

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "x-api-key",
                    type: "apiKey:header",
                    value: security?.apiKeyAuthNew,
                },
            ],
            [
                {
                    fieldName: "Authorization",
                    type: "oauth2",
                    value: security?.oauth2,
                },
            ],
        ];
        const securitySettings$ = resolveSecurity(...security$);
        const context = {
            operationID: "multipleSimpleOptionsAuth",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["401", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<void, SDKError | SDKValidationError>(
            m$.nil(200, z.void()),
            m$.fail([401, "4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async multipleSimpleSchemeAuth(
        request: shared.AuthServiceRequestBody,
        security: operations.MultipleSimpleSchemeAuthSecurity,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<void> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => shared.AuthServiceRequestBody$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const baseURL$ =
            options?.serverURL ||
            pathToFunc(MultipleSimpleSchemeAuthServerList[0], { charEncoding: "percent" })();

        const path$ = pathToFunc("/auth#multipleSimpleSchemeAuth")();

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "*/*",
        });

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "x-api-key",
                    type: "apiKey:header",
                    value: security?.apiKeyAuthNew,
                },
                {
                    fieldName: "Authorization",
                    type: "oauth2",
                    value: security?.oauth2,
                },
            ],
        ];
        const securitySettings$ = resolveSecurity(...security$);
        const context = {
            operationID: "multipleSimpleSchemeAuth",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["401", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<void, SDKError | SDKValidationError>(
            m$.nil(200, z.void()),
            m$.fail([401, "4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async oauth2AuthNew(
        request: shared.AuthServiceRequestBody,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<void> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => shared.AuthServiceRequestBody$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const baseURL$ =
            options?.serverURL ||
            pathToFunc(Oauth2AuthNewServerList[0], { charEncoding: "percent" })();

        const path$ = pathToFunc("/auth#oauth2Auth")();

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "*/*",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "oauth2AuthNew",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["401", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<void, SDKError | SDKValidationError>(
            m$.nil(200, z.void()),
            m$.fail([401, "4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async openIdConnectAuthNew(
        request: shared.AuthServiceRequestBody,
        security: operations.OpenIdConnectAuthNewSecurity,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<void> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => shared.AuthServiceRequestBody$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const baseURL$ =
            options?.serverURL ||
            pathToFunc(OpenIdConnectAuthNewServerList[0], { charEncoding: "percent" })();

        const path$ = pathToFunc("/auth#openIdConnectAuth")();

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "*/*",
        });

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "openIdConnect",
                    value: security?.openIdConnect,
                },
            ],
        ];
        const securitySettings$ = resolveSecurity(...security$);
        const context = {
            operationID: "openIdConnectAuthNew",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["401", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<void, SDKError | SDKValidationError>(
            m$.nil(200, z.void()),
            m$.fail([401, "4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }
}
