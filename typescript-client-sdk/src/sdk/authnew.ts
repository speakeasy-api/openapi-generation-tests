/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../sdk/models/errors";
import * as operations from "../sdk/models/operations";
import * as shared from "../sdk/models/shared";

export class AuthNew extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    async apiKeyAuthGlobalNew(
        input: shared.AuthServiceRequestBody,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<operations.ApiKeyAuthGlobalNewResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = shared.AuthServiceRequestBody$.outboundSchema.parse(input);
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });
        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.ApiKeyAuthGlobalNewServerList[0], {
                charEncoding: "percent",
            })();

        const path$ = this.templateURLComponent("/auth#apiKeyAuthGlobal")();

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const context = { operationID: "apiKeyAuthGlobalNew" };
        const doOptions = { context, errorCodes: ["401", "4XX", "5XX"] };
        const request = await this.createRequest$(
            {
                context,
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.ApiKeyAuthGlobalNewResponse$.inboundSchema.parse(responseFields$);
    }

    async authGlobal(
        input: shared.AuthServiceRequestBody,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<operations.AuthGlobalResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = shared.AuthServiceRequestBody$.outboundSchema.parse(input);
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });
        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.AuthGlobalServerList[0], {
                charEncoding: "percent",
            })();

        const path$ = this.templateURLComponent("/auth#authGlobal")();

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const context = { operationID: "authGlobal" };
        const doOptions = { context, errorCodes: ["401", "4XX", "5XX"] };
        const request = await this.createRequest$(
            {
                context,
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.AuthGlobalResponse$.inboundSchema.parse(responseFields$);
    }

    async basicAuthNew(
        input: shared.AuthServiceRequestBody,
        security: operations.BasicAuthNewSecurity,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<operations.BasicAuthNewResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = shared.AuthServiceRequestBody$.outboundSchema.parse(input);
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });
        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.BasicAuthNewServerList[0], {
                charEncoding: "percent",
            })();

        const path$ = this.templateURLComponent("/auth#basicAuth")();

        const query$ = "";

        const securitySettings$ = this.resolveSecurity([
            { value: security?.password, fieldName: "password", type: "http:basic" },
            { value: security?.username, fieldName: "username", type: "http:basic" },
        ]);

        const context = { operationID: "basicAuthNew" };
        const doOptions = { context, errorCodes: ["401", "4XX", "5XX"] };
        const request = await this.createRequest$(
            {
                context,
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.BasicAuthNewResponse$.inboundSchema.parse(responseFields$);
    }

    async multipleMixedOptionsAuth(
        input: shared.AuthServiceRequestBody,
        security: operations.MultipleMixedOptionsAuthSecurity,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<operations.MultipleMixedOptionsAuthResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = shared.AuthServiceRequestBody$.outboundSchema.parse(input);
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });
        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.MultipleMixedOptionsAuthServerList[0], {
                charEncoding: "percent",
            })();

        const path$ = this.templateURLComponent("/auth#multipleMixedOptionsAuth")();

        const query$ = "";

        const securitySettings$ = this.resolveSecurity(
            [{ value: security?.apiKeyAuthNew, fieldName: "x-api-key", type: "apiKey:header" }],
            [{ value: security?.basicAuth, type: "http:basic" }]
        );

        const context = { operationID: "multipleMixedOptionsAuth" };
        const doOptions = { context, errorCodes: ["401", "4XX", "5XX"] };
        const request = await this.createRequest$(
            {
                context,
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.MultipleMixedOptionsAuthResponse$.inboundSchema.parse(responseFields$);
    }

    async multipleMixedSchemeAuth(
        input: shared.AuthServiceRequestBody,
        security: operations.MultipleMixedSchemeAuthSecurity,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<operations.MultipleMixedSchemeAuthResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = shared.AuthServiceRequestBody$.outboundSchema.parse(input);
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });
        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.MultipleMixedSchemeAuthServerList[0], {
                charEncoding: "percent",
            })();

        const path$ = this.templateURLComponent("/auth#multipleMixedSchemeAuth")();

        const query$ = "";

        const securitySettings$ = this.resolveSecurity([
            { value: security?.apiKeyAuthNew, fieldName: "x-api-key", type: "apiKey:header" },
            { value: security?.basicAuth, type: "http:basic" },
        ]);

        const context = { operationID: "multipleMixedSchemeAuth" };
        const doOptions = { context, errorCodes: ["401", "4XX", "5XX"] };
        const request = await this.createRequest$(
            {
                context,
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.MultipleMixedSchemeAuthResponse$.inboundSchema.parse(responseFields$);
    }

    async multipleOptionsWithMixedSchemesAuth(
        input: shared.AuthServiceRequestBody,
        security: operations.MultipleOptionsWithMixedSchemesAuthSecurity,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<operations.MultipleOptionsWithMixedSchemesAuthResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = shared.AuthServiceRequestBody$.outboundSchema.parse(input);
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });
        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.MultipleOptionsWithMixedSchemesAuthServerList[0], {
                charEncoding: "percent",
            })();

        const path$ = this.templateURLComponent("/auth#multipleOptionsWithMixedSchemesAuth")();

        const query$ = "";

        const securitySettings$ = this.resolveSecurity(
            [
                {
                    value: security?.option1?.apiKeyAuthNew,
                    fieldName: "x-api-key",
                    type: "apiKey:header",
                },
                { value: security?.option1?.oauth2, fieldName: "Authorization", type: "oauth2" },
            ],
            [
                {
                    value: security?.option2?.apiKeyAuthNew,
                    fieldName: "x-api-key",
                    type: "apiKey:header",
                },
                { value: security?.option2?.basicAuth, type: "http:basic" },
            ]
        );

        const context = { operationID: "multipleOptionsWithMixedSchemesAuth" };
        const doOptions = { context, errorCodes: ["401", "4XX", "5XX"] };
        const request = await this.createRequest$(
            {
                context,
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.MultipleOptionsWithMixedSchemesAuthResponse$.inboundSchema.parse(
            responseFields$
        );
    }

    async multipleOptionsWithSimpleSchemesAuth(
        input: shared.AuthServiceRequestBody,
        security: operations.MultipleOptionsWithSimpleSchemesAuthSecurity,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<operations.MultipleOptionsWithSimpleSchemesAuthResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = shared.AuthServiceRequestBody$.outboundSchema.parse(input);
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });
        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(
                operations.MultipleOptionsWithSimpleSchemesAuthServerList[0],
                { charEncoding: "percent" }
            )();

        const path$ = this.templateURLComponent("/auth#multipleOptionsWithSimpleSchemesAuth")();

        const query$ = "";

        const securitySettings$ = this.resolveSecurity(
            [
                {
                    value: security?.option1?.apiKeyAuthNew,
                    fieldName: "x-api-key",
                    type: "apiKey:header",
                },
                { value: security?.option1?.oauth2, fieldName: "Authorization", type: "oauth2" },
            ],
            [
                {
                    value: security?.option2?.apiKeyAuthNew,
                    fieldName: "x-api-key",
                    type: "apiKey:header",
                },
                {
                    value: security?.option2?.openIdConnect,
                    fieldName: "Authorization",
                    type: "openIdConnect",
                },
            ]
        );

        const context = { operationID: "multipleOptionsWithSimpleSchemesAuth" };
        const doOptions = { context, errorCodes: ["401", "4XX", "5XX"] };
        const request = await this.createRequest$(
            {
                context,
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.MultipleOptionsWithSimpleSchemesAuthResponse$.inboundSchema.parse(
            responseFields$
        );
    }

    async multipleSimpleOptionsAuth(
        input: shared.AuthServiceRequestBody,
        security: operations.MultipleSimpleOptionsAuthSecurity,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<operations.MultipleSimpleOptionsAuthResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = shared.AuthServiceRequestBody$.outboundSchema.parse(input);
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });
        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.MultipleSimpleOptionsAuthServerList[0], {
                charEncoding: "percent",
            })();

        const path$ = this.templateURLComponent("/auth#multipleSimpleOptionsAuth")();

        const query$ = "";

        const securitySettings$ = this.resolveSecurity(
            [{ value: security?.apiKeyAuthNew, fieldName: "x-api-key", type: "apiKey:header" }],
            [{ value: security?.oauth2, fieldName: "Authorization", type: "oauth2" }]
        );

        const context = { operationID: "multipleSimpleOptionsAuth" };
        const doOptions = { context, errorCodes: ["401", "4XX", "5XX"] };
        const request = await this.createRequest$(
            {
                context,
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.MultipleSimpleOptionsAuthResponse$.inboundSchema.parse(responseFields$);
    }

    async multipleSimpleSchemeAuth(
        input: shared.AuthServiceRequestBody,
        security: operations.MultipleSimpleSchemeAuthSecurity,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<operations.MultipleSimpleSchemeAuthResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = shared.AuthServiceRequestBody$.outboundSchema.parse(input);
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });
        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.MultipleSimpleSchemeAuthServerList[0], {
                charEncoding: "percent",
            })();

        const path$ = this.templateURLComponent("/auth#multipleSimpleSchemeAuth")();

        const query$ = "";

        const securitySettings$ = this.resolveSecurity([
            { value: security?.apiKeyAuthNew, fieldName: "x-api-key", type: "apiKey:header" },
            { value: security?.oauth2, fieldName: "Authorization", type: "oauth2" },
        ]);

        const context = { operationID: "multipleSimpleSchemeAuth" };
        const doOptions = { context, errorCodes: ["401", "4XX", "5XX"] };
        const request = await this.createRequest$(
            {
                context,
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.MultipleSimpleSchemeAuthResponse$.inboundSchema.parse(responseFields$);
    }

    async oauth2AuthNew(
        input: shared.AuthServiceRequestBody,
        security: operations.Oauth2AuthNewSecurity,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<operations.Oauth2AuthNewResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = shared.AuthServiceRequestBody$.outboundSchema.parse(input);
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });
        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.Oauth2AuthNewServerList[0], {
                charEncoding: "percent",
            })();

        const path$ = this.templateURLComponent("/auth#oauth2Auth")();

        const query$ = "";

        const securitySettings$ = this.resolveSecurity([
            { value: security?.oauth2, fieldName: "Authorization", type: "oauth2" },
        ]);

        const context = { operationID: "oauth2AuthNew" };
        const doOptions = { context, errorCodes: ["401", "4XX", "5XX"] };
        const request = await this.createRequest$(
            {
                context,
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.Oauth2AuthNewResponse$.inboundSchema.parse(responseFields$);
    }

    async openIdConnectAuthNew(
        input: shared.AuthServiceRequestBody,
        security: operations.OpenIdConnectAuthNewSecurity,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<operations.OpenIdConnectAuthNewResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = shared.AuthServiceRequestBody$.outboundSchema.parse(input);
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });
        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.OpenIdConnectAuthNewServerList[0], {
                charEncoding: "percent",
            })();

        const path$ = this.templateURLComponent("/auth#openIdConnectAuth")();

        const query$ = "";

        const securitySettings$ = this.resolveSecurity([
            { value: security?.openIdConnect, fieldName: "Authorization", type: "openIdConnect" },
        ]);

        const context = { operationID: "openIdConnectAuthNew" };
        const doOptions = { context, errorCodes: ["401", "4XX", "5XX"] };
        const request = await this.createRequest$(
            {
                context,
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.OpenIdConnectAuthNewResponse$.inboundSchema.parse(responseFields$);
    }
}
