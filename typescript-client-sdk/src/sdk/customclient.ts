/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { SDKError } from "./models/errors/sdkerror.js";
import { SDKValidationError } from "./models/errors/sdkvalidationerror.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrap as unwrap$ } from "./types/fp.js";

export class CustomClient extends ClientSDK {
    async customClientPost(
        headerParam: string,
        pathParam: string,
        queryStringParam: string,
        simpleObject?: shared.SimpleObject | undefined,
        options?: RequestOptions
    ): Promise<operations.CustomClientPostRes> {
        const input$: operations.CustomClientPostRequest = {
            headerParam: headerParam,
            pathParam: pathParam,
            queryStringParam: queryStringParam,
            simpleObject: simpleObject,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.CustomClientPostRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$.simpleObject, { explode: true });

        const pathParams$ = {
            pathParam: encodeSimple$("pathParam", payload$.pathParam, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = pathToFunc("/anything/customClient/{pathParam}")(pathParams$);

        const query$ = encodeFormQuery$({
            queryStringParam: payload$.queryStringParam,
        });

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            headerParam: encodeSimple$("headerParam", payload$.headerParam, {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "customClientPost",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.CustomClientPostRes,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.CustomClientPostRes$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }
}
