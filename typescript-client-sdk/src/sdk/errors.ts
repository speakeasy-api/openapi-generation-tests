/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { encodeJSON as encodeJSON$, encodeSimple as encodeSimple$ } from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as errors from "./models/errors/index.js";
import { SDKError } from "./models/errors/sdkerror.js";
import { SDKValidationError } from "./models/errors/sdkvalidationerror.js";
import { ConnectionErrorGetServerList } from "./models/operations/connectionerrorget.js";
import { ErrorUnionDiscriminatedPostServerList } from "./models/operations/erroruniondiscriminatedpost.js";
import { ErrorUnionPostServerList } from "./models/operations/errorunionpost.js";
import * as operations from "./models/operations/index.js";
import { StatusGetXSpeakeasyErrorsServerList } from "./models/operations/statusgetxspeakeasyerrors.js";
import { unwrap as unwrap$ } from "./types/fp.js";
import * as z from "zod";

export class Errors extends ClientSDK {
    async connectionErrorGet(options?: RequestOptions & { serverURL?: string }): Promise<void> {
        const baseURL$ =
            options?.serverURL ||
            pathToFunc(ConnectionErrorGetServerList[0], { charEncoding: "percent" })();

        const path$ = pathToFunc("/anything/connectionError")();

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "connectionErrorGet",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<void, SDKError | SDKValidationError>(
            m$.nil(200, z.void()),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async errorUnionDiscriminatedPost(
        request: operations.ErrorUnionDiscriminatedPostRequestBody,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<void> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) =>
                operations.ErrorUnionDiscriminatedPostRequestBody$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const baseURL$ =
            options?.serverURL ||
            pathToFunc(ErrorUnionDiscriminatedPostServerList[0], { charEncoding: "percent" })();

        const path$ = pathToFunc("/errors/400#errorUnionDiscriminated")();

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "errorUnionDiscriminatedPost",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await m$.match<
            void,
            errors.ErrorUnionDiscriminatedPostResponseBody | SDKError | SDKValidationError
        >(
            m$.nil(200, z.void()),
            m$.jsonErr("4XX", errors.ErrorUnionDiscriminatedPostResponseBody$inboundSchema),
            m$.fail("5XX")
        )(response, { extraFields: responseFields$ });

        return unwrap$(result$);
    }

    async errorUnionPost(
        request: operations.ErrorUnionPostRequestBody,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<void> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.ErrorUnionPostRequestBody$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const baseURL$ =
            options?.serverURL ||
            pathToFunc(ErrorUnionPostServerList[0], { charEncoding: "percent" })();

        const path$ = pathToFunc("/errors/500#errorUnion")();

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "errorUnionPost",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "500", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await m$.match<
            void,
            errors.ErrorUnionPostResponseBody | SDKError | SDKValidationError
        >(
            m$.nil(200, z.void()),
            m$.jsonErr(500, errors.ErrorUnionPostResponseBody$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        return unwrap$(result$);
    }

    async statusGetError(statusCode: number, options?: RequestOptions): Promise<void> {
        const input$: operations.StatusGetErrorRequest = {
            statusCode: statusCode,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.StatusGetErrorRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const pathParams$ = {
            statusCode: encodeSimple$("statusCode", payload$.statusCode, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = pathToFunc("/status/{statusCode}")(pathParams$);

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "statusGetError",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["400", "4XX", "500", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<void, SDKError | SDKValidationError>(
            m$.nil([200, 300], z.void()),
            m$.fail([400, "4XX", 500, "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async statusGetXSpeakeasyErrors(
        statusCode: number,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<void> {
        const input$: operations.StatusGetXSpeakeasyErrorsRequest = {
            statusCode: statusCode,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.StatusGetXSpeakeasyErrorsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const baseURL$ =
            options?.serverURL ||
            pathToFunc(StatusGetXSpeakeasyErrorsServerList[0], { charEncoding: "percent" })();

        const pathParams$ = {
            statusCode: encodeSimple$("statusCode", payload$.statusCode, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = pathToFunc("/errors/{statusCode}")(pathParams$);

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "statusGetXSpeakeasyErrors",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "4XX", "500", "501"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await m$.match<
            void,
            | errors.ErrorT
            | errors.StatusGetXSpeakeasyErrorsResponseBody
            | SDKError
            | SDKValidationError
        >(
            m$.nil([200, 300], z.void()),
            m$.fail([400, 401, "4XX"]),
            m$.jsonErr(500, errors.ErrorT$inboundSchema),
            m$.jsonErr(501, errors.StatusGetXSpeakeasyErrorsResponseBody$inboundSchema)
        )(response, { extraFields: responseFields$ });

        return unwrap$(result$);
    }
}
