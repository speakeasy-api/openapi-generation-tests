/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../sdk/models/errors";
import * as operations from "../sdk/models/operations";

export class Errors extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }
    async connectionErrorGet(
        options?: RequestOptions & { serverURL?: string }
    ): Promise<operations.ConnectionErrorGetResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");

        const path$ = this.templateURLComponent("/anything/connectionError")();

        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.ConnectionErrorGetServerList[0], {
                charEncoding: "percent",
            })();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.ConnectionErrorGetResponse$.inboundSchema.parse(responseFields$);
    }

    async statusGetError(
        statusCode: number,
        options?: RequestOptions
    ): Promise<operations.StatusGetErrorResponse> {
        const input$: operations.StatusGetErrorRequest = {
            statusCode: statusCode,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");

        const payload$ = operations.StatusGetErrorRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const pathParams$ = {
            statusCode: enc$.encodeSimple("statusCode", payload$.statusCode, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/status/{statusCode}")(pathParams$);

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, [200, 300])) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.StatusGetErrorResponse$.inboundSchema.parse(responseFields$);
    }

    async statusGetXSpeakeasyErrors(
        statusCode: number,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<operations.StatusGetXSpeakeasyErrorsResponse> {
        const input$: operations.StatusGetXSpeakeasyErrorsRequest = {
            statusCode: statusCode,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.StatusGetXSpeakeasyErrorsRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const pathParams$ = {
            statusCode: enc$.encodeSimple("statusCode", payload$.statusCode, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/errors/{statusCode}")(pathParams$);

        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.StatusGetXSpeakeasyErrorsServerList[0], {
                charEncoding: "percent",
            })();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, [200, 300])) {
            // fallthrough
        } else if (this.matchResponse(response, 500, "application/json")) {
            const responseBody = await response.json();
            const result = errors.ErrorT$.inboundSchema.parse({
                ...responseFields$,
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 501, "application/json")) {
            const responseBody = await response.json();
            const result = errors.StatusGetXSpeakeasyErrorsResponseBody$.inboundSchema.parse({
                ...responseFields$,
                ...responseBody,
            });
            throw result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.StatusGetXSpeakeasyErrorsResponse$.inboundSchema.parse(responseFields$);
    }
}
