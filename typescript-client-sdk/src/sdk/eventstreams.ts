/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../sdk/models/errors";
import * as operations from "../sdk/models/operations";

export enum ChatAcceptEnum {
    applicationJson = "application/json",
    textEventStream = "text/event-stream",
}

export class Eventstreams extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }
    async chat(
        input: operations.ChatRequestBody,
        options?: RequestOptions & { acceptHeaderOverride?: ChatAcceptEnum; serverURL?: string }
    ): Promise<operations.ChatResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");

        const accept =
            options?.acceptHeaderOverride || "application/json;q=1, text/event-stream;q=0";
        headers$.set("Accept", accept);

        const payload$ = operations.ChatRequestBody$.outboundSchema.parse(input);
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/eventstreams/chat")();

        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.ChatServerList[0], { charEncoding: "percent" })();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.ChatResponse$.inboundSchema.parse({
                ...responseFields$,
                chatCompletionResult: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 200, "text/event-stream")) {
            const responseBody = await response.arrayBuffer();
            const result = operations.ChatResponse$.inboundSchema.parse({
                ...responseFields$,
                Body: new Uint8Array(responseBody),
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async json(
        options?: RequestOptions & { serverURL?: string }
    ): Promise<operations.JsonResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "text/event-stream");

        const path$ = this.templateURLComponent("/eventstreams/json")();

        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.JsonServerList[0], { charEncoding: "percent" })();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "text/event-stream")) {
            const responseBody = await response.arrayBuffer();
            const result = operations.JsonResponse$.inboundSchema.parse({
                ...responseFields$,
                Body: new Uint8Array(responseBody),
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async multiline(
        options?: RequestOptions & { serverURL?: string }
    ): Promise<operations.MultilineResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "text/event-stream");

        const path$ = this.templateURLComponent("/eventstreams/multiline")();

        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.MultilineServerList[0], {
                charEncoding: "percent",
            })();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "text/event-stream")) {
            const responseBody = await response.arrayBuffer();
            const result = operations.MultilineResponse$.inboundSchema.parse({
                ...responseFields$,
                Body: new Uint8Array(responseBody),
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async rich(
        options?: RequestOptions & { serverURL?: string }
    ): Promise<operations.RichResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "text/event-stream");

        const path$ = this.templateURLComponent("/eventstreams/rich")();

        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.RichServerList[0], { charEncoding: "percent" })();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "text/event-stream")) {
            const responseBody = await response.arrayBuffer();
            const result = operations.RichResponse$.inboundSchema.parse({
                ...responseFields$,
                Body: new Uint8Array(responseBody),
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async text(
        options?: RequestOptions & { serverURL?: string }
    ): Promise<operations.TextResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "text/event-stream");

        const path$ = this.templateURLComponent("/eventstreams/text")();

        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.TextServerList[0], { charEncoding: "percent" })();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "text/event-stream")) {
            const responseBody = await response.arrayBuffer();
            const result = operations.TextResponse$.inboundSchema.parse({
                ...responseFields$,
                Body: new Uint8Array(responseBody),
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }
}
