/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ChatAcceptEnum, eventstreamsChat } from "../funcs/eventstreamsChat.js";
import { eventstreamsChatSkipSentinel } from "../funcs/eventstreamsChatSkipSentinel.js";
import { eventstreamsDifferentDataSchemas } from "../funcs/eventstreamsDifferentDataSchemas.js";
import { eventstreamsJson } from "../funcs/eventstreamsJson.js";
import { eventstreamsMultiline } from "../funcs/eventstreamsMultiline.js";
import { eventstreamsRich } from "../funcs/eventstreamsRich.js";
import { eventstreamsText } from "../funcs/eventstreamsText.js";
import { EventStream } from "../lib/event-streams.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export { ChatAcceptEnum } from "../funcs/eventstreamsChat.js";

export class Eventstreams extends ClientSDK {
  async chat(
    request: operations.ChatRequestBody,
    options?: RequestOptions & { acceptHeaderOverride?: ChatAcceptEnum },
  ): Promise<operations.ChatResponse> {
    return unwrapAsync(eventstreamsChat(
      this,
      request,
      options,
    ));
  }

  async chatSkipSentinel(
    request: operations.ChatSkipSentinelRequestBody,
    options?: RequestOptions,
  ): Promise<EventStream<shared.ChatCompletionEvent>> {
    return unwrapAsync(eventstreamsChatSkipSentinel(
      this,
      request,
      options,
    ));
  }

  async differentDataSchemas(
    options?: RequestOptions,
  ): Promise<EventStream<shared.DifferentDataSchemas>> {
    return unwrapAsync(eventstreamsDifferentDataSchemas(
      this,
      options,
    ));
  }

  async json(
    options?: RequestOptions,
  ): Promise<operations.JsonResponse> {
    return unwrapAsync(eventstreamsJson(
      this,
      options,
    ));
  }

  async multiline(
    options?: RequestOptions,
  ): Promise<EventStream<shared.TextEvent>> {
    return unwrapAsync(eventstreamsMultiline(
      this,
      options,
    ));
  }

  async rich(
    options?: RequestOptions,
  ): Promise<EventStream<shared.RichStream>> {
    return unwrapAsync(eventstreamsRich(
      this,
      options,
    ));
  }

  async text(
    options?: RequestOptions,
  ): Promise<EventStream<shared.TextEvent>> {
    return unwrapAsync(eventstreamsText(
      this,
      options,
    ));
  }
}
