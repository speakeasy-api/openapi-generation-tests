/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { flatteningComponentBodyAndParamConflict } from "../funcs/flatteningComponentBodyAndParamConflict.js";
import { flatteningComponentBodyAndParamNoConflict } from "../funcs/flatteningComponentBodyAndParamNoConflict.js";
import { flatteningConflictingParams } from "../funcs/flatteningConflictingParams.js";
import { flatteningInlineBodyAndParamConflict } from "../funcs/flatteningInlineBodyAndParamConflict.js";
import { flatteningInlineBodyAndParamNoConflict } from "../funcs/flatteningInlineBodyAndParamNoConflict.js";
import { flatteningRequiredBodyAllOptional } from "../funcs/flatteningRequiredBodyAllOptional.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Flattening extends ClientSDK {
  async componentBodyAndParamConflict(
    str: string,
    simpleObject: shared.SimpleObject,
    options?: RequestOptions,
  ): Promise<operations.ComponentBodyAndParamConflictRes> {
    return unwrapAsync(flatteningComponentBodyAndParamConflict(
      this,
      str,
      simpleObject,
      options,
    ));
  }

  async componentBodyAndParamNoConflict(
    paramStr: string,
    simpleObject: shared.SimpleObject,
    options?: RequestOptions,
  ): Promise<operations.ComponentBodyAndParamNoConflictRes> {
    return unwrapAsync(flatteningComponentBodyAndParamNoConflict(
      this,
      paramStr,
      simpleObject,
      options,
    ));
  }

  async conflictingParams(
    strPathParameter: string,
    strQueryParameter: string,
    options?: RequestOptions,
  ): Promise<operations.ConflictingParamsRes> {
    return unwrapAsync(flatteningConflictingParams(
      this,
      strPathParameter,
      strQueryParameter,
      options,
    ));
  }

  async inlineBodyAndParamConflict(
    str: string,
    requestBody: operations.InlineBodyAndParamConflictRequestBody,
    options?: RequestOptions,
  ): Promise<operations.InlineBodyAndParamConflictRes> {
    return unwrapAsync(flatteningInlineBodyAndParamConflict(
      this,
      str,
      requestBody,
      options,
    ));
  }

  async inlineBodyAndParamNoConflict(
    paramStr: string,
    requestBody: operations.InlineBodyAndParamNoConflictRequestBody,
    options?: RequestOptions,
  ): Promise<operations.InlineBodyAndParamNoConflictRes> {
    return unwrapAsync(flatteningInlineBodyAndParamNoConflict(
      this,
      paramStr,
      requestBody,
      options,
    ));
  }

  async requiredBodyAllOptional(
    request: shared.ObjWithOptionalProperties,
    options?: RequestOptions,
  ): Promise<operations.RequiredBodyAllOptionalRes> {
    return unwrapAsync(flatteningRequiredBodyAllOptional(
      this,
      request,
      options,
    ));
  }
}
