/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { extractSecurity } from "../lib/security.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";

export class Flattening extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    async componentBodyAndParamConflict(
        simpleObject: shared.SimpleObject,
        str: string,
        options?: RequestOptions
    ): Promise<operations.ComponentBodyAndParamConflictRes> {
        const input$: operations.ComponentBodyAndParamConflictRequest = {
            simpleObject: simpleObject,
            str: str,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.ComponentBodyAndParamConflictRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.simpleObject, { explode: true });

        const path$ = this.templateURLComponent(
            "/anything/flattening/componentBodyAndParamConflict"
        )();

        const query$ = encodeFormQuery$({
            str: payload$.str,
        });

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "componentBodyAndParamConflict",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<operations.ComponentBodyAndParamConflictRes>()
            .json(200, operations.ComponentBodyAndParamConflictRes$inboundSchema)
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }

    async componentBodyAndParamNoConflict(
        paramStr: string,
        simpleObject: shared.SimpleObject,
        options?: RequestOptions
    ): Promise<operations.ComponentBodyAndParamNoConflictRes> {
        const input$: operations.ComponentBodyAndParamNoConflictRequest = {
            paramStr: paramStr,
            simpleObject: simpleObject,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.ComponentBodyAndParamNoConflictRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.simpleObject, { explode: true });

        const path$ = this.templateURLComponent(
            "/anything/flattening/componentBodyAndParamNoConflict"
        )();

        const query$ = encodeFormQuery$({
            paramStr: payload$.paramStr,
        });

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "componentBodyAndParamNoConflict",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<operations.ComponentBodyAndParamNoConflictRes>()
            .json(200, operations.ComponentBodyAndParamNoConflictRes$inboundSchema)
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }

    async conflictingParams(
        strPathParameter: string,
        strQueryParameter: string,
        options?: RequestOptions
    ): Promise<operations.ConflictingParamsRes> {
        const input$: operations.ConflictingParamsRequest = {
            strPathParameter: strPathParameter,
            strQueryParameter: strQueryParameter,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ConflictingParamsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            str: encodeSimple$("str", payload$.strPathParameter, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/anything/flattening/conflictingParams/{str}")(
            pathParams$
        );

        const query$ = encodeFormQuery$({
            str: payload$.strQueryParameter,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "conflictingParams",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<operations.ConflictingParamsRes>()
            .json(200, operations.ConflictingParamsRes$inboundSchema)
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }

    async inlineBodyAndParamConflict(
        requestBody: operations.InlineBodyAndParamConflictRequestBody,
        str: string,
        options?: RequestOptions
    ): Promise<operations.InlineBodyAndParamConflictRes> {
        const input$: operations.InlineBodyAndParamConflictRequest = {
            requestBody: requestBody,
            str: str,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.InlineBodyAndParamConflictRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const path$ = this.templateURLComponent(
            "/anything/flattening/inlineBodyAndParamConflict"
        )();

        const query$ = encodeFormQuery$({
            str: payload$.str,
        });

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "inlineBodyAndParamConflict",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<operations.InlineBodyAndParamConflictRes>()
            .json(200, operations.InlineBodyAndParamConflictRes$inboundSchema)
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }

    async inlineBodyAndParamNoConflict(
        requestBody: operations.InlineBodyAndParamNoConflictRequestBody,
        paramStr: string,
        options?: RequestOptions
    ): Promise<operations.InlineBodyAndParamNoConflictRes> {
        const input$: operations.InlineBodyAndParamNoConflictRequest = {
            requestBody: requestBody,
            paramStr: paramStr,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.InlineBodyAndParamNoConflictRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const path$ = this.templateURLComponent(
            "/anything/flattening/inlineBodyAndParamNoConflict"
        )();

        const query$ = encodeFormQuery$({
            paramStr: payload$.paramStr,
        });

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "inlineBodyAndParamNoConflict",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<operations.InlineBodyAndParamNoConflictRes>()
            .json(200, operations.InlineBodyAndParamNoConflictRes$inboundSchema)
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }
}
