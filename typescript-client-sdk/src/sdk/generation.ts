/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as b64$ from "../lib/base64.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import {
    extractSecurity,
    resolveGlobalSecurity,
    resolveSecurity,
    SecurityInput,
} from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { SDKError } from "./models/errors/sdkerror.js";
import { SDKValidationError } from "./models/errors/sdkvalidationerror.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { Decimal as Decimal$ } from "./types/decimal.js";
import { unwrap as unwrap$ } from "./types/fp.js";
import { RFCDate } from "./types/rfcdate.js";
import * as z from "zod";

export class Generation extends ClientSDK {
    async anchorTypesGet(
        options?: RequestOptions
    ): Promise<operations.AnchorTypesGetTypeFromAnchor> {
        const path$ = pathToFunc("/anything/anchorTypes")();

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "anchorTypesGet",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.AnchorTypesGetTypeFromAnchor,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.AnchorTypesGetTypeFromAnchor$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async arrayCircularReferenceGet(
        options?: RequestOptions
    ): Promise<Array<shared.ArrayCircularReferenceObject>> {
        const path$ = pathToFunc("/anything/arrayCircularReference")();

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "arrayCircularReferenceGet",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            Array<shared.ArrayCircularReferenceObject>,
            SDKError | SDKValidationError
        >(
            m$.json(200, z.array(shared.ArrayCircularReferenceObject$inboundSchema)),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async circularReferenceGet(
        options?: RequestOptions
    ): Promise<shared.ValidCircularReferenceObject> {
        const path$ = pathToFunc("/anything/circularReference")();

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "circularReferenceGet",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            shared.ValidCircularReferenceObject,
            SDKError | SDKValidationError
        >(
            m$.json(200, shared.ValidCircularReferenceObject$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async dateParamWithDefault(
        dateInput: RFCDate | undefined,
        options?: RequestOptions
    ): Promise<void> {
        const input$: operations.DateParamWithDefaultRequest = {
            dateInput: dateInput,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.DateParamWithDefaultRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const path$ = pathToFunc("/anything/dateParamWithDefault")();

        const query$ = encodeFormQuery$({
            dateInput: payload$.dateInput,
        });

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "dateParamWithDefault",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<void, SDKError | SDKValidationError>(
            m$.nil(204, z.void()),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async dateTimeParamWithDefault(
        dateTimeInput: Date | undefined,
        options?: RequestOptions
    ): Promise<void> {
        const input$: operations.DateTimeParamWithDefaultRequest = {
            dateTimeInput: dateTimeInput,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.DateTimeParamWithDefaultRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const path$ = pathToFunc("/anything/dateTimeParamWithDefault")();

        const query$ = encodeFormQuery$({
            dateTimeInput: payload$.dateTimeInput,
        });

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "dateTimeParamWithDefault",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<void, SDKError | SDKValidationError>(
            m$.nil(204, z.void()),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async decimalParamWithDefault(
        decimalInput: Decimal$ | number | undefined,
        options?: RequestOptions
    ): Promise<void> {
        const input$: operations.DecimalParamWithDefaultRequest = {
            decimalInput: decimalInput,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.DecimalParamWithDefaultRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const path$ = pathToFunc("/anything/decimalParamWithDefault")();

        const query$ = encodeFormQuery$({
            decimalInput: payload$.decimalInput,
        });

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "decimalParamWithDefault",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<void, SDKError | SDKValidationError>(
            m$.nil(204, z.void()),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async deprecatedFieldInSchemaPost(
        request: shared.DeprecatedFieldInObject,
        options?: RequestOptions
    ): Promise<void> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => shared.DeprecatedFieldInObject$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const path$ = pathToFunc("/anything/deprecatedFieldInSchema")();

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "*/*",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "deprecatedFieldInSchemaPost",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<void, SDKError | SDKValidationError>(
            m$.nil(200, z.void()),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async deprecatedObjectInSchemaGet(
        options?: RequestOptions
    ): Promise<operations.DeprecatedObjectInSchemaGetResponseBody> {
        const path$ = pathToFunc("/anything/deprecatedObjectInSchema")();

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "deprecatedObjectInSchemaGet",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.DeprecatedObjectInSchemaGetResponseBody,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.DeprecatedObjectInSchemaGetResponseBody$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    /**
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async deprecatedOperationNoCommentsGet(
        deprecatedParameter?: string | undefined,
        options?: RequestOptions
    ): Promise<void> {
        const input$: operations.DeprecatedOperationNoCommentsGetRequest = {
            deprecatedParameter: deprecatedParameter,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) =>
                operations.DeprecatedOperationNoCommentsGetRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const path$ = pathToFunc("/anything/deprecatedOperationNoComments")();

        const query$ = encodeFormQuery$({
            deprecatedParameter: payload$.deprecatedParameter,
        });

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "deprecatedOperationNoCommentsGet",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<void, SDKError | SDKValidationError>(
            m$.nil(200, z.void()),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    /**
     * This is an endpoint setup to test deprecation with comments
     *
     * @deprecated method: This operation is deprecated. Use simplePathParameterObjects instead.
     */
    async deprecatedOperationWithCommentsGet(
        deprecatedParameter?: string | undefined,
        newParameter?: string | undefined,
        options?: RequestOptions
    ): Promise<void> {
        const input$: operations.DeprecatedOperationWithCommentsGetRequest = {
            deprecatedParameter: deprecatedParameter,
            newParameter: newParameter,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) =>
                operations.DeprecatedOperationWithCommentsGetRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const path$ = pathToFunc("/anything/deprecatedOperationWithComments")();

        const query$ = encodeFormQuery$({
            deprecatedParameter: payload$.deprecatedParameter,
            newParameter: payload$.newParameter,
        });

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "deprecatedOperationWithCommentsGet",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<void, SDKError | SDKValidationError>(
            m$.nil(200, z.void()),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async emptyObjectGet(
        emptyObject: shared.EmptyObjectParam,
        options?: RequestOptions
    ): Promise<void> {
        const input$: operations.EmptyObjectGetRequest = {
            emptyObject: emptyObject,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.EmptyObjectGetRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const pathParams$ = {
            emptyObject: encodeSimple$("emptyObject", payload$.emptyObject, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = pathToFunc("/anything/{emptyObject}")(pathParams$);

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "emptyObjectGet",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<void, SDKError | SDKValidationError>(
            m$.nil(200, z.void()),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async emptyResponseObjectWithCommentGet(options?: RequestOptions): Promise<Uint8Array> {
        const path$ = pathToFunc("/anything/emptyResponseObjectWithComment")();

        const headers$ = new Headers({
            Accept: "application/octet-stream",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "emptyResponseObjectWithCommentGet",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<Uint8Array, SDKError | SDKValidationError>(
            m$.bytes(200, b64$.zodInbound),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async globalNameOverridden(
        request?: shared.SimpleObject | undefined,
        options?: RequestOptions
    ): Promise<operations.GetGlobalNameOverrideResponseBody> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => shared.SimpleObject$outboundSchema.optional().parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ =
            payload$ === undefined ? null : encodeJSON$("body", payload$, { explode: true });

        const path$ = pathToFunc("/anything/globalNameOverride")();

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            any: encodeSimple$("any", payload$?.any, { explode: false, charEncoding: "none" }),
            bigint: encodeSimple$("bigint", payload$?.bigint, {
                explode: false,
                charEncoding: "none",
            }),
            bigintStr: encodeSimple$("bigintStr", payload$?.bigintStr, {
                explode: false,
                charEncoding: "none",
            }),
            bool: encodeSimple$("bool", payload$?.bool, { explode: false, charEncoding: "none" }),
            boolOpt: encodeSimple$("boolOpt", payload$?.boolOpt, {
                explode: false,
                charEncoding: "none",
            }),
            date: encodeSimple$("date", payload$?.date, { explode: false, charEncoding: "none" }),
            dateTime: encodeSimple$("dateTime", payload$?.dateTime, {
                explode: false,
                charEncoding: "none",
            }),
            decimal: encodeSimple$("decimal", payload$?.decimal, {
                explode: false,
                charEncoding: "none",
            }),
            decimalStr: encodeSimple$("decimalStr", payload$?.decimalStr, {
                explode: false,
                charEncoding: "none",
            }),
            enum: encodeSimple$("enum", payload$?.enum, { explode: false, charEncoding: "none" }),
            float32: encodeSimple$("float32", payload$?.float32, {
                explode: false,
                charEncoding: "none",
            }),
            float64Str: encodeSimple$("float64Str", payload$?.float64Str, {
                explode: false,
                charEncoding: "none",
            }),
            int: encodeSimple$("int", payload$?.int, { explode: false, charEncoding: "none" }),
            int32: encodeSimple$("int32", payload$?.int32, {
                explode: false,
                charEncoding: "none",
            }),
            int32Enum: encodeSimple$("int32Enum", payload$?.int32Enum, {
                explode: false,
                charEncoding: "none",
            }),
            int64Str: encodeSimple$("int64Str", payload$?.int64Str, {
                explode: false,
                charEncoding: "none",
            }),
            intEnum: encodeSimple$("intEnum", payload$?.intEnum, {
                explode: false,
                charEncoding: "none",
            }),
            intOptNull: encodeSimple$("intOptNull", payload$?.intOptNull, {
                explode: false,
                charEncoding: "none",
            }),
            num: encodeSimple$("num", payload$?.num, { explode: false, charEncoding: "none" }),
            numOptNull: encodeSimple$("numOptNull", payload$?.numOptNull, {
                explode: false,
                charEncoding: "none",
            }),
            str: encodeSimple$("str", payload$?.str, { explode: false, charEncoding: "none" }),
            strOpt: encodeSimple$("strOpt", payload$?.strOpt, {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "getGlobalNameOverride",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.GetGlobalNameOverrideResponseBody,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.GetGlobalNameOverrideResponseBody$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async ignoredGenerationGet(
        options?: RequestOptions
    ): Promise<operations.IgnoredGenerationGetResponseBody> {
        const path$ = pathToFunc("/anything/ignoredGeneration")();

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "ignoredGenerationGet",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.IgnoredGenerationGetResponseBody,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.IgnoredGenerationGetResponseBody$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async ignoresPost(
        requestBody: operations.IgnoresPostRequestBody,
        testParam?: string | undefined,
        options?: RequestOptions
    ): Promise<shared.HttpBinSimpleJsonObject> {
        const input$: operations.IgnoresPostRequest = {
            requestBody: requestBody,
            testParam: testParam,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.IgnoresPostRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const path$ = pathToFunc("/anything/ignores")();

        const query$ = encodeFormQuery$({
            testParam: payload$.testParam,
        });

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "ignoresPost",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            shared.HttpBinSimpleJsonObject,
            SDKError | SDKValidationError
        >(
            m$.json(200, shared.HttpBinSimpleJsonObject$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async nameOverride(
        testEnumQueryParam: operations.EnumNameOverride,
        testQueryParam: string,
        options?: RequestOptions
    ): Promise<operations.NameOverrideGetOverriddenResponse> {
        const input$: operations.NameOverrideGetRequest = {
            testEnumQueryParam: testEnumQueryParam,
            testQueryParam: testQueryParam,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.NameOverrideGetRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const path$ = pathToFunc("/anything/nameOverride")();

        const query$ = encodeFormQuery$({
            enumNameOverride: payload$.testEnumQueryParam,
            nameOverride: payload$.testQueryParam,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "nameOverrideGet",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.NameOverrideGetOverriddenResponse,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.NameOverrideGetOverriddenResponse$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async objectCircularReferenceGet(
        options?: RequestOptions
    ): Promise<shared.ObjectCircularReferenceObject> {
        const path$ = pathToFunc("/anything/objectCircularReference")();

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "objectCircularReferenceGet",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            shared.ObjectCircularReferenceObject,
            SDKError | SDKValidationError
        >(
            m$.json(200, shared.ObjectCircularReferenceObject$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async oneOfCircularReferenceGet(
        options?: RequestOptions
    ): Promise<shared.OneOfCircularReferenceObject> {
        const path$ = pathToFunc("/anything/oneOfCircularReference")();

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "oneOfCircularReferenceGet",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            shared.OneOfCircularReferenceObject,
            SDKError | SDKValidationError
        >(
            m$.json(200, shared.OneOfCircularReferenceObject$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async typedParameterGenerationGet(
        bigint?: bigint | undefined,
        date?: RFCDate | undefined,
        decimal?: Decimal$ | number | undefined,
        obj?: operations.Obj | undefined,
        options?: RequestOptions
    ): Promise<void> {
        const input$: operations.TypedParameterGenerationGetRequest = {
            bigint: bigint,
            date: date,
            decimal: decimal,
            obj: obj,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.TypedParameterGenerationGetRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const path$ = pathToFunc("/anything/typedParameterGeneration")();

        const query$ = encodeFormQuery$({
            bigint: payload$.bigint,
            date: payload$.date,
            decimal: payload$.decimal,
            obj: payload$.obj,
        });

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "typedParameterGenerationGet",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<void, SDKError | SDKValidationError>(
            m$.nil(200, z.void()),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    /**
     * An operation used for testing usage examples
     *
     * @remarks
     * An operation used for testing usage examples that includes a large array of parameters and input types to ensure that all are handled correctly
     *
     * @see {@link https://docs.example.com} - Usage example docs
     */
    async usageExamplePost(
        request: operations.UsageExamplePostRequest,
        security: operations.UsageExamplePostSecurity,
        options?: RequestOptions
    ): Promise<operations.UsageExamplePostResponseBody> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.UsageExamplePostRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const path$ = pathToFunc("/anything/usageExample")();

        const query$ = encodeFormQuery$({
            bigintParameter: payload$.bigintParameter,
            bigintParameterOptional: payload$.bigintParameterOptional,
            bigintStrParameter: payload$.bigintStrParameter,
            bigintStrParameterOptional: payload$.bigintStrParameterOptional,
            boolParameter: payload$.boolParameter,
            dateParameter: payload$.dateParameter,
            dateTimeDefaultParameter: payload$.dateTimeDefaultParameter,
            dateTimeParameter: payload$.dateTimeParameter,
            decimalParameter: payload$.decimalParameter,
            decimalParameterOptional: payload$.decimalParameterOptional,
            decimalStrParameter: payload$.decimalStrParameter,
            decimalStrParameterOptional: payload$.decimalStrParameterOptional,
            doubleParameter: payload$.doubleParameter,
            enumParameter: payload$.enumParameter,
            falseyNumberParameter: payload$.falseyNumberParameter,
            float32Parameter: payload$.float32Parameter,
            float64StringParameter: payload$.float64StringParameter,
            floatParameter: payload$.floatParameter,
            int64Parameter: payload$.int64Parameter,
            int64StringParameter: payload$.int64StringParameter,
            intParameter: payload$.intParameter,
            optEnumParameter: payload$.optEnumParameter,
            strParameter: payload$.strParameter,
        });

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const security$: SecurityInput[][] = [
            [
                {
                    type: "http:basic",
                    value: { password: security?.password, username: security?.username },
                },
            ],
        ];
        const securitySettings$ = resolveSecurity(...security$);
        const context = {
            operationID: "usageExamplePost",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.UsageExamplePostResponseBody,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.UsageExamplePostResponseBody$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }
}
