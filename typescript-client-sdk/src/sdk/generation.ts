/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { generationAnchorTypesGet } from "../funcs/generationAnchorTypesGet.js";
import { generationArrayCircularReferenceGet } from "../funcs/generationArrayCircularReferenceGet.js";
import { generationCircularReferenceGet } from "../funcs/generationCircularReferenceGet.js";
import { generationDateParamWithDefault } from "../funcs/generationDateParamWithDefault.js";
import { generationDateTimeParamWithDefault } from "../funcs/generationDateTimeParamWithDefault.js";
import { generationDecimalParamWithDefault } from "../funcs/generationDecimalParamWithDefault.js";
import { generationDeprecatedFieldInSchemaPost } from "../funcs/generationDeprecatedFieldInSchemaPost.js";
import { generationDeprecatedObjectInSchemaGet } from "../funcs/generationDeprecatedObjectInSchemaGet.js";
import { generationDeprecatedOperationNoCommentsGet } from "../funcs/generationDeprecatedOperationNoCommentsGet.js";
import { generationDeprecatedOperationWithCommentsGet } from "../funcs/generationDeprecatedOperationWithCommentsGet.js";
import { generationEmptyObjectGet } from "../funcs/generationEmptyObjectGet.js";
import { generationEmptyResponseObjectWithCommentGet } from "../funcs/generationEmptyResponseObjectWithCommentGet.js";
import { generationGlobalNameOverridden } from "../funcs/generationGlobalNameOverridden.js";
import { generationIgnoredGenerationGet } from "../funcs/generationIgnoredGenerationGet.js";
import { generationIgnoresPost } from "../funcs/generationIgnoresPost.js";
import { generationNameOverride } from "../funcs/generationNameOverride.js";
import { generationObjectCircularReferenceGet } from "../funcs/generationObjectCircularReferenceGet.js";
import { generationOneOfCircularReferenceGet } from "../funcs/generationOneOfCircularReferenceGet.js";
import { generationTypedParameterGenerationGet } from "../funcs/generationTypedParameterGenerationGet.js";
import { generationUsageExamplePost } from "../funcs/generationUsageExamplePost.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { Decimal as Decimal$ } from "./types/decimal.js";
import { unwrapAsync } from "./types/fp.js";
import { RFCDate } from "./types/rfcdate.js";

export class Generation extends ClientSDK {
    async anchorTypesGet(
        options?: RequestOptions
    ): Promise<operations.AnchorTypesGetTypeFromAnchor> {
        return unwrapAsync(generationAnchorTypesGet(this, options));
    }

    async arrayCircularReferenceGet(
        options?: RequestOptions
    ): Promise<Array<shared.ArrayCircularReferenceObject>> {
        return unwrapAsync(generationArrayCircularReferenceGet(this, options));
    }

    async circularReferenceGet(
        options?: RequestOptions
    ): Promise<shared.ValidCircularReferenceObject> {
        return unwrapAsync(generationCircularReferenceGet(this, options));
    }

    async dateParamWithDefault(
        dateInput: RFCDate | undefined,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(generationDateParamWithDefault(this, dateInput, options));
    }

    async dateTimeParamWithDefault(
        dateTimeInput: Date | undefined,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(generationDateTimeParamWithDefault(this, dateTimeInput, options));
    }

    async decimalParamWithDefault(
        decimalInput: Decimal$ | number | undefined,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(generationDecimalParamWithDefault(this, decimalInput, options));
    }

    async deprecatedFieldInSchemaPost(
        request: shared.DeprecatedFieldInObject,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(generationDeprecatedFieldInSchemaPost(this, request, options));
    }

    async deprecatedObjectInSchemaGet(
        options?: RequestOptions
    ): Promise<operations.DeprecatedObjectInSchemaGetResponseBody> {
        return unwrapAsync(generationDeprecatedObjectInSchemaGet(this, options));
    }

    /**
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async deprecatedOperationNoCommentsGet(
        deprecatedParameter?: string | undefined,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(
            generationDeprecatedOperationNoCommentsGet(this, deprecatedParameter, options)
        );
    }

    /**
     * This is an endpoint setup to test deprecation with comments
     *
     * @deprecated method: This operation is deprecated. Use simplePathParameterObjects instead.
     */
    async deprecatedOperationWithCommentsGet(
        deprecatedParameter?: string | undefined,
        newParameter?: string | undefined,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(
            generationDeprecatedOperationWithCommentsGet(
                this,
                deprecatedParameter,
                newParameter,
                options
            )
        );
    }

    async emptyObjectGet(
        emptyObject: shared.EmptyObjectParam,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(generationEmptyObjectGet(this, emptyObject, options));
    }

    async emptyResponseObjectWithCommentGet(options?: RequestOptions): Promise<Uint8Array> {
        return unwrapAsync(generationEmptyResponseObjectWithCommentGet(this, options));
    }

    async globalNameOverridden(
        request?: shared.SimpleObject | undefined,
        options?: RequestOptions
    ): Promise<operations.GetGlobalNameOverrideResponseBody> {
        return unwrapAsync(generationGlobalNameOverridden(this, request, options));
    }

    async ignoredGenerationGet(
        options?: RequestOptions
    ): Promise<operations.IgnoredGenerationGetResponseBody> {
        return unwrapAsync(generationIgnoredGenerationGet(this, options));
    }

    async ignoresPost(
        requestBody: operations.IgnoresPostRequestBody,
        testParam?: string | undefined,
        options?: RequestOptions
    ): Promise<shared.HttpBinSimpleJsonObject> {
        return unwrapAsync(generationIgnoresPost(this, requestBody, testParam, options));
    }

    async nameOverride(
        testEnumQueryParam: operations.EnumNameOverride,
        testQueryParam: string,
        options?: RequestOptions
    ): Promise<operations.NameOverrideGetOverriddenResponse> {
        return unwrapAsync(
            generationNameOverride(this, testEnumQueryParam, testQueryParam, options)
        );
    }

    async objectCircularReferenceGet(
        options?: RequestOptions
    ): Promise<shared.ObjectCircularReferenceObject> {
        return unwrapAsync(generationObjectCircularReferenceGet(this, options));
    }

    async oneOfCircularReferenceGet(
        options?: RequestOptions
    ): Promise<shared.OneOfCircularReferenceObject> {
        return unwrapAsync(generationOneOfCircularReferenceGet(this, options));
    }

    async typedParameterGenerationGet(
        bigint?: bigint | undefined,
        date?: RFCDate | undefined,
        decimal?: Decimal$ | number | undefined,
        obj?: operations.Obj | undefined,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(
            generationTypedParameterGenerationGet(this, bigint, date, decimal, obj, options)
        );
    }

    /**
     * An operation used for testing usage examples
     *
     * @remarks
     * An operation used for testing usage examples that includes a large array of parameters and input types to ensure that all are handled correctly
     *
     * @see {@link https://docs.example.com} - Usage example docs
     */
    async usageExamplePost(
        request: operations.UsageExamplePostRequest,
        security: operations.UsageExamplePostSecurity,
        options?: RequestOptions
    ): Promise<operations.UsageExamplePostResponseBody> {
        return unwrapAsync(generationUsageExamplePost(this, request, security, options));
    }
}
