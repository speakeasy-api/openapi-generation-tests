/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { SDKError } from "./models/errors/sdkerror.js";
import { SDKValidationError } from "./models/errors/sdkvalidationerror.js";
import * as operations from "./models/operations/index.js";
import { unwrap as unwrap$ } from "./types/fp.js";

export class Globals extends ClientSDK {
    async globalPathParameterGet(
        globalPathParam?: number | undefined,
        options?: RequestOptions
    ): Promise<operations.GlobalPathParameterGetRes> {
        const input$: operations.GlobalPathParameterGetRequest = {
            globalPathParam: globalPathParam,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.GlobalPathParameterGetRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const pathParams$ = {
            globalPathParam: encodeSimple$(
                "globalPathParam",
                payload$.globalPathParam ?? this.options$.globalPathParam,
                { explode: false, charEncoding: "percent" }
            ),
        };

        const path$ = pathToFunc("/anything/globals/pathParameter/{globalPathParam}")(pathParams$);

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "globalPathParameterGet",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.GlobalPathParameterGetRes,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.GlobalPathParameterGetRes$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async globalsHeaderGet(
        globalHeaderParam?: boolean | undefined,
        options?: RequestOptions
    ): Promise<operations.GlobalsHeaderGetRes> {
        const input$: operations.GlobalsHeaderGetRequest = {
            globalHeaderParam: globalHeaderParam,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.GlobalsHeaderGetRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const path$ = pathToFunc("/anything/globals/header")();

        const headers$ = new Headers({
            Accept: "application/json",
            globalHeaderParam: encodeSimple$(
                "globalHeaderParam",
                payload$.globalHeaderParam ?? this.options$.globalHeaderParam,
                { explode: false, charEncoding: "none" }
            ),
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "globalsHeaderGet",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.GlobalsHeaderGetRes,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.GlobalsHeaderGetRes$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async globalsHiddenPost(
        request: operations.GlobalsHiddenPostRequestBody,
        options?: RequestOptions
    ): Promise<operations.GlobalsHiddenPostRes> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.GlobalsHiddenPostRequestBody$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const pathParams$ = {
            globalHiddenPathParam: encodeSimple$(
                "globalHiddenPathParam",
                this.options$.globalHiddenPathParam,
                { explode: false, charEncoding: "percent" }
            ),
        };

        const path$ = pathToFunc("/anything/globals/hidden/{globalHiddenPathParam}")(pathParams$);

        const query$ = encodeFormQuery$({
            globalHiddenQueryParam: this.options$.globalHiddenQueryParam,
        });

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            globalHiddenHeaderParam: encodeSimple$(
                "globalHiddenHeaderParam",
                this.options$.globalHiddenHeaderParam,
                { explode: false, charEncoding: "none" }
            ),
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "globalsHiddenPost",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.GlobalsHiddenPostRes,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.GlobalsHiddenPostRes$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async globalsQueryParameterGet(
        globalQueryParam?: string | undefined,
        options?: RequestOptions
    ): Promise<operations.GlobalsQueryParameterGetRes> {
        const input$: operations.GlobalsQueryParameterGetRequest = {
            globalQueryParam: globalQueryParam,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.GlobalsQueryParameterGetRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const path$ = pathToFunc("/anything/globals/queryParameter")();

        const query$ = encodeFormQuery$({
            globalQueryParam: payload$.globalQueryParam ?? this.options$.globalQueryParam,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "globalsQueryParameterGet",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.GlobalsQueryParameterGetRes,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.GlobalsQueryParameterGetRes$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }
}
