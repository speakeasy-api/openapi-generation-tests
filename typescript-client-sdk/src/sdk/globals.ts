/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";

export class Globals extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    async globalPathParameterGet(
        globalPathParam?: number | undefined,
        options?: RequestOptions
    ): Promise<operations.GlobalPathParameterGetRes> {
        const input$: operations.GlobalPathParameterGetRequest = {
            globalPathParam: globalPathParam,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GlobalPathParameterGetRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            globalPathParam: encodeSimple$(
                "globalPathParam",
                payload$.globalPathParam ?? this.options$.globalPathParam,
                { explode: false, charEncoding: "percent" }
            ),
        };
        const path$ = this.templateURLComponent(
            "/anything/globals/pathParameter/{globalPathParam}"
        )(pathParams$);

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "globalPathParameterGet",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<operations.GlobalPathParameterGetRes>()
            .json(200, operations.GlobalPathParameterGetRes$)
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }

    async globalsHeaderGet(
        globalHeaderParam?: boolean | undefined,
        options?: RequestOptions
    ): Promise<operations.GlobalsHeaderGetRes> {
        const input$: operations.GlobalsHeaderGetRequest = {
            globalHeaderParam: globalHeaderParam,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GlobalsHeaderGetRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/anything/globals/header")();

        const query$ = "";

        headers$.set(
            "globalHeaderParam",
            encodeSimple$(
                "globalHeaderParam",
                payload$.globalHeaderParam ?? this.options$.globalHeaderParam,
                { explode: false, charEncoding: "none" }
            )
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "globalsHeaderGet",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<operations.GlobalsHeaderGetRes>()
            .json(200, operations.GlobalsHeaderGetRes$)
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }

    async globalsHiddenPost(
        request: operations.GlobalsHiddenPostRequestBody,
        options?: RequestOptions
    ): Promise<operations.GlobalsHiddenPostRes> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GlobalsHiddenPostRequestBody$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const pathParams$ = {
            globalHiddenPathParam: encodeSimple$(
                "globalHiddenPathParam",
                this.options$.globalHiddenPathParam,
                { explode: false, charEncoding: "percent" }
            ),
        };
        const path$ = this.templateURLComponent("/anything/globals/hidden/{globalHiddenPathParam}")(
            pathParams$
        );

        const query$ = encodeFormQuery$({
            globalHiddenQueryParam: this.options$.globalHiddenQueryParam,
        });

        headers$.set(
            "globalHiddenHeaderParam",
            encodeSimple$("globalHiddenHeaderParam", this.options$.globalHiddenHeaderParam, {
                explode: false,
                charEncoding: "none",
            })
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "globalsHiddenPost",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<operations.GlobalsHiddenPostRes>()
            .json(200, operations.GlobalsHiddenPostRes$)
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }

    async globalsQueryParameterGet(
        globalQueryParam?: string | undefined,
        options?: RequestOptions
    ): Promise<operations.GlobalsQueryParameterGetRes> {
        const input$: operations.GlobalsQueryParameterGetRequest = {
            globalQueryParam: globalQueryParam,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GlobalsQueryParameterGetRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/anything/globals/queryParameter")();

        const query$ = encodeFormQuery$({
            globalQueryParam: payload$.globalQueryParam ?? this.options$.globalQueryParam,
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "globalsQueryParameterGet",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<operations.GlobalsQueryParameterGetRes>()
            .json(200, operations.GlobalsQueryParameterGetRes$)
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }
}
