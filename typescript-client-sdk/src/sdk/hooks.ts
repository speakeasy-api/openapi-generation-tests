/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { hooksAuthorizationHeaderModification } from "../funcs/hooksAuthorizationHeaderModification.js";
import { hooksTestHooks } from "../funcs/hooksTestHooks.js";
import { hooksTestHooksAfterResponse } from "../funcs/hooksTestHooksAfterResponse.js";
import { hooksTestHooksBeforeCreateRequestPaths } from "../funcs/hooksTestHooksBeforeCreateRequestPaths.js";
import { hooksTestHooksError } from "../funcs/hooksTestHooksError.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Hooks extends ClientSDK {
    async authorizationHeaderModification(
        options?: RequestOptions
    ): Promise<operations.AuthorizationHeaderModificationToken> {
        return unwrapAsync(hooksAuthorizationHeaderModification(this, options));
    }

    async testHooks(someParam: string, options?: RequestOptions): Promise<operations.TestHooksRes> {
        return unwrapAsync(hooksTestHooks(this, someParam, options));
    }

    async testHooksAfterResponse(options?: RequestOptions): Promise<void> {
        return unwrapAsync(hooksTestHooksAfterResponse(this, options));
    }

    async testHooksBeforeCreateRequestPaths(
        namespace: string,
        options?: RequestOptions
    ): Promise<operations.TestHooksBeforeCreateRequestPathsRes> {
        return unwrapAsync(hooksTestHooksBeforeCreateRequestPaths(this, namespace, options));
    }

    async testHooksError(options?: RequestOptions): Promise<void> {
        return unwrapAsync(hooksTestHooksError(this, options));
    }
}
