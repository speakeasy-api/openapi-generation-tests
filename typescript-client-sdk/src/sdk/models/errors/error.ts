/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type ErrorTData = {
    code?: string | undefined;
    message?: string | undefined;
    type?: shared.ErrorType | undefined;
};

export class ErrorT extends Error {
    code?: string | undefined;
    type?: shared.ErrorType | undefined;

    /** The original data that was passed to this error instance. */
    data$: ErrorTData;

    constructor(err: ErrorTData) {
        super("");
        this.data$ = err;

        if (err.code != null) {
            this.code = err.code;
        }
        if (err.type != null) {
            this.type = err.type;
        }

        this.message = err.message || "API error occurred";

        this.name = "ErrorT";
    }
}

/** @internal */
export namespace ErrorT$ {
    export const inboundSchema: z.ZodType<ErrorT, z.ZodTypeDef, unknown> = z
        .object({
            code: z.string().optional(),
            message: z.string().optional(),
            type: shared.ErrorType$.inboundSchema.optional(),
        })
        .transform((v) => {
            return new ErrorT({
                ...(v.code === undefined ? null : { code: v.code }),
                ...(v.message === undefined ? null : { message: v.message }),
                ...(v.type === undefined ? null : { type: v.type }),
            });
        });

    export type Outbound = {
        code?: string | undefined;
        message?: string | undefined;
        type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ErrorT> = z
        .instanceof(ErrorT)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    code: z.string().optional(),
                    message: z.string().optional(),
                    type: shared.ErrorType$.outboundSchema.optional(),
                })
                .transform((v) => {
                    return {
                        ...(v.code === undefined ? null : { code: v.code }),
                        ...(v.message === undefined ? null : { message: v.message }),
                        ...(v.type === undefined ? null : { type: v.type }),
                    };
                })
        );
}
