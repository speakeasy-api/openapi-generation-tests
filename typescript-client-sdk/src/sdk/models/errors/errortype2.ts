/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import * as z from "zod";

export type SchemasError = {
    message: string;
};

export type ErrorType2Data = {
    error: SchemasError;
};

export class ErrorType2 extends Error {
    error: SchemasError;

    /** The original data that was passed to this error instance. */
    data$: ErrorType2Data;

    constructor(err: ErrorType2Data) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.error = err.error;

        this.name = "ErrorType2";
    }
}

/** @internal */
export const SchemasError$inboundSchema: z.ZodType<SchemasError, z.ZodTypeDef, unknown> = z.object({
    message: z.string(),
});

/** @internal */
export type SchemasError$Outbound = {
    message: string;
};

/** @internal */
export const SchemasError$outboundSchema: z.ZodType<
    SchemasError$Outbound,
    z.ZodTypeDef,
    SchemasError
> = z.object({
    message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemasError$ {
    /** @deprecated use `SchemasError$inboundSchema` instead. */
    export const inboundSchema = SchemasError$inboundSchema;
    /** @deprecated use `SchemasError$outboundSchema` instead. */
    export const outboundSchema = SchemasError$outboundSchema;
    /** @deprecated use `SchemasError$Outbound` instead. */
    export type Outbound = SchemasError$Outbound;
}

/** @internal */
export const ErrorType2$inboundSchema: z.ZodType<ErrorType2, z.ZodTypeDef, unknown> = z
    .object({
        error: z.lazy(() => SchemasError$inboundSchema),
    })
    .transform((v) => {
        return new ErrorType2(v);
    });

/** @internal */
export type ErrorType2$Outbound = {
    error: SchemasError$Outbound;
};

/** @internal */
export const ErrorType2$outboundSchema: z.ZodType<ErrorType2$Outbound, z.ZodTypeDef, ErrorType2> = z
    .instanceof(ErrorType2)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            error: z.lazy(() => SchemasError$outboundSchema),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorType2$ {
    /** @deprecated use `ErrorType2$inboundSchema` instead. */
    export const inboundSchema = ErrorType2$inboundSchema;
    /** @deprecated use `ErrorType2$outboundSchema` instead. */
    export const outboundSchema = ErrorType2$outboundSchema;
    /** @deprecated use `ErrorType2$Outbound` instead. */
    export type Outbound = ErrorType2$Outbound;
}
