/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type SchemasError = {
    message: string;
};

export type ErrorType2Data = {
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
    error: SchemasError;
};

export class ErrorType2 extends Error {
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
    error: SchemasError;

    /** The original data that was passed to this error instance. */
    data$: ErrorType2Data;

    constructor(err: ErrorType2Data) {
        super("");
        this.data$ = err;

        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }
        this.error = err.error;

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "ErrorType2";
    }
}

/** @internal */
export namespace SchemasError$ {
    export const inboundSchema: z.ZodType<SchemasError, z.ZodTypeDef, unknown> = z
        .object({
            message: z.string(),
        })
        .transform((v) => {
            return {
                message: v.message,
            };
        });

    export type Outbound = {
        message: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SchemasError> = z
        .object({
            message: z.string(),
        })
        .transform((v) => {
            return {
                message: v.message,
            };
        });
}

/** @internal */
export namespace ErrorType2$ {
    export const inboundSchema: z.ZodType<ErrorType2, z.ZodTypeDef, unknown> = z
        .object({
            RawResponse: z.instanceof(Response).optional(),
            error: z.lazy(() => SchemasError$.inboundSchema),
        })
        .transform((v) => {
            return new ErrorType2({
                ...(v.RawResponse === undefined ? null : { rawResponse: v.RawResponse }),
                error: v.error,
            });
        });

    export type Outbound = {
        RawResponse?: never | undefined;
        error: SchemasError$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ErrorType2> = z
        .instanceof(ErrorType2)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    rawResponse: z
                        .instanceof(Response)
                        .transform(() => {
                            throw new Error("Response cannot be serialized");
                        })
                        .optional(),
                    error: z.lazy(() => SchemasError$.outboundSchema),
                })
                .transform((v) => {
                    return {
                        ...(v.rawResponse === undefined ? null : { RawResponse: v.rawResponse }),
                        error: v.error,
                    };
                })
        );
}
