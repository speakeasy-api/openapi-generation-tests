/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as shared from "../shared";
import * as z from "zod";

/**
 * Not Implemented
 */
export type StatusGetXSpeakeasyErrorsResponseBodyData = {
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
    code?: string | undefined;
    message?: string | undefined;
    type?: shared.ErrorType | undefined;
};

/**
 * Not Implemented
 */
export class StatusGetXSpeakeasyErrorsResponseBody extends Error {
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
    code?: string | undefined;
    type?: shared.ErrorType | undefined;

    /** The original data that was passed to this error instance. */
    data$: StatusGetXSpeakeasyErrorsResponseBodyData;

    constructor(err: StatusGetXSpeakeasyErrorsResponseBodyData) {
        super("");
        this.data$ = err;

        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }
        if (err.code != null) {
            this.code = err.code;
        }
        if (err.type != null) {
            this.type = err.type;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "StatusGetXSpeakeasyErrorsResponseBody";
    }
}

/** @internal */
export namespace StatusGetXSpeakeasyErrorsResponseBody$ {
    export const inboundSchema: z.ZodType<
        StatusGetXSpeakeasyErrorsResponseBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            RawResponse: z.instanceof(Response).optional(),
            code: z.string().optional(),
            message: z.string().optional(),
            type: shared.ErrorType$.inboundSchema.optional(),
        })
        .transform((v) => {
            const remapped = remap$(v, {
                RawResponse: "rawResponse",
            });

            return new StatusGetXSpeakeasyErrorsResponseBody(remapped);
        });

    export type Outbound = {
        RawResponse?: never | undefined;
        code?: string | undefined;
        message?: string | undefined;
        type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        StatusGetXSpeakeasyErrorsResponseBody
    > = z
        .instanceof(StatusGetXSpeakeasyErrorsResponseBody)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    rawResponse: z
                        .instanceof(Response)
                        .transform(() => {
                            throw new Error("Response cannot be serialized");
                        })
                        .optional(),
                    code: z.string().optional(),
                    message: z.string().optional(),
                    type: shared.ErrorType$.outboundSchema.optional(),
                })
                .transform((v) => {
                    return remap$(v, {
                        rawResponse: "RawResponse",
                    });
                })
        );
}
