/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as shared from "../shared/index.js";
import * as z from "zod";

/**
 * Not Implemented
 */
export type StatusGetXSpeakeasyErrorsResponseBodyData = {
    code?: string | undefined;
    message?: string | undefined;
    type?: shared.ErrorType | undefined;
};

/**
 * Not Implemented
 */
export class StatusGetXSpeakeasyErrorsResponseBody extends Error {
    code?: string | undefined;
    type?: shared.ErrorType | undefined;

    /** The original data that was passed to this error instance. */
    data$: StatusGetXSpeakeasyErrorsResponseBodyData;

    constructor(err: StatusGetXSpeakeasyErrorsResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.code != null) {
            this.code = err.code;
        }
        if (err.type != null) {
            this.type = err.type;
        }

        this.name = "StatusGetXSpeakeasyErrorsResponseBody";
    }
}

/** @internal */
export const StatusGetXSpeakeasyErrorsResponseBody$inboundSchema: z.ZodType<
    StatusGetXSpeakeasyErrorsResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        code: z.string().optional(),
        message: z.string().optional(),
        type: shared.ErrorType$inboundSchema.optional(),
    })
    .transform((v) => {
        return new StatusGetXSpeakeasyErrorsResponseBody(v);
    });

/** @internal */
export type StatusGetXSpeakeasyErrorsResponseBody$Outbound = {
    code?: string | undefined;
    message?: string | undefined;
    type?: string | undefined;
};

/** @internal */
export const StatusGetXSpeakeasyErrorsResponseBody$outboundSchema: z.ZodType<
    StatusGetXSpeakeasyErrorsResponseBody$Outbound,
    z.ZodTypeDef,
    StatusGetXSpeakeasyErrorsResponseBody
> = z
    .instanceof(StatusGetXSpeakeasyErrorsResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            code: z.string().optional(),
            message: z.string().optional(),
            type: shared.ErrorType$outboundSchema.optional(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusGetXSpeakeasyErrorsResponseBody$ {
    /** @deprecated use `StatusGetXSpeakeasyErrorsResponseBody$inboundSchema` instead. */
    export const inboundSchema = StatusGetXSpeakeasyErrorsResponseBody$inboundSchema;
    /** @deprecated use `StatusGetXSpeakeasyErrorsResponseBody$outboundSchema` instead. */
    export const outboundSchema = StatusGetXSpeakeasyErrorsResponseBody$outboundSchema;
    /** @deprecated use `StatusGetXSpeakeasyErrorsResponseBody$Outbound` instead. */
    export type Outbound = StatusGetXSpeakeasyErrorsResponseBody$Outbound;
}
