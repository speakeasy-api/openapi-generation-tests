/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type TaggedError1Data = {
    error: string;
    tag?: "tag1" | undefined;
};

export class TaggedError1 extends Error {
    error: string;
    tag?: "tag1" | undefined;

    /** The original data that was passed to this error instance. */
    data$: TaggedError1Data;

    constructor(err: TaggedError1Data) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.error = err.error;
        this.tag = err.tag;

        this.name = "TaggedError1";
    }
}

/** @internal */
export const TaggedError1$inboundSchema: z.ZodType<TaggedError1, z.ZodTypeDef, unknown> = z
    .object({
        error: z.string(),
        tag: z.literal("tag1").optional(),
    })
    .transform((v) => {
        return new TaggedError1(v);
    });

/** @internal */
export type TaggedError1$Outbound = {
    error: string;
    tag: "tag1";
};

/** @internal */
export const TaggedError1$outboundSchema: z.ZodType<
    TaggedError1$Outbound,
    z.ZodTypeDef,
    TaggedError1
> = z
    .instanceof(TaggedError1)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            error: z.string(),
            tag: z.literal("tag1").default("tag1" as const),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaggedError1$ {
    /** @deprecated use `TaggedError1$inboundSchema` instead. */
    export const inboundSchema = TaggedError1$inboundSchema;
    /** @deprecated use `TaggedError1$outboundSchema` instead. */
    export const outboundSchema = TaggedError1$outboundSchema;
    /** @deprecated use `TaggedError1$Outbound` instead. */
    export type Outbound = TaggedError1$Outbound;
}
