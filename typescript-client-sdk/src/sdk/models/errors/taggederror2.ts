/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type SchemasTaggedError2Error = {
    message: string;
};

export type TaggedError2Data = {
    error: SchemasTaggedError2Error;
    tag?: "tag2" | undefined;
};

export class TaggedError2 extends Error {
    error: SchemasTaggedError2Error;
    tag?: "tag2" | undefined;

    /** The original data that was passed to this error instance. */
    data$: TaggedError2Data;

    constructor(err: TaggedError2Data) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.error = err.error;
        this.tag = err.tag;

        this.name = "TaggedError2";
    }
}

/** @internal */
export const SchemasTaggedError2Error$inboundSchema: z.ZodType<
    SchemasTaggedError2Error,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string(),
});

/** @internal */
export type SchemasTaggedError2Error$Outbound = {
    message: string;
};

/** @internal */
export const SchemasTaggedError2Error$outboundSchema: z.ZodType<
    SchemasTaggedError2Error$Outbound,
    z.ZodTypeDef,
    SchemasTaggedError2Error
> = z.object({
    message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemasTaggedError2Error$ {
    /** @deprecated use `SchemasTaggedError2Error$inboundSchema` instead. */
    export const inboundSchema = SchemasTaggedError2Error$inboundSchema;
    /** @deprecated use `SchemasTaggedError2Error$outboundSchema` instead. */
    export const outboundSchema = SchemasTaggedError2Error$outboundSchema;
    /** @deprecated use `SchemasTaggedError2Error$Outbound` instead. */
    export type Outbound = SchemasTaggedError2Error$Outbound;
}

/** @internal */
export const TaggedError2$inboundSchema: z.ZodType<TaggedError2, z.ZodTypeDef, unknown> = z
    .object({
        error: z.lazy(() => SchemasTaggedError2Error$inboundSchema),
        tag: z.literal("tag2").optional(),
    })
    .transform((v) => {
        return new TaggedError2(v);
    });

/** @internal */
export type TaggedError2$Outbound = {
    error: SchemasTaggedError2Error$Outbound;
    tag: "tag2";
};

/** @internal */
export const TaggedError2$outboundSchema: z.ZodType<
    TaggedError2$Outbound,
    z.ZodTypeDef,
    TaggedError2
> = z
    .instanceof(TaggedError2)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            error: z.lazy(() => SchemasTaggedError2Error$outboundSchema),
            tag: z.literal("tag2").default("tag2" as const),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaggedError2$ {
    /** @deprecated use `TaggedError2$inboundSchema` instead. */
    export const inboundSchema = TaggedError2$inboundSchema;
    /** @deprecated use `TaggedError2$outboundSchema` instead. */
    export const outboundSchema = TaggedError2$outboundSchema;
    /** @deprecated use `TaggedError2$Outbound` instead. */
    export type Outbound = TaggedError2$Outbound;
}
