/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import * as z from "zod";

/**
 * A successful response that contains the simpleObject sent in the request body
 */
export type AnchorTypesGetTypeFromAnchor = {
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    json?: shared.SimpleObject | undefined;
};

export type AnchorTypesGetResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * A successful response that contains the simpleObject sent in the request body
     */
    typeFromAnchor?: AnchorTypesGetTypeFromAnchor | undefined;
};

/** @internal */
export namespace AnchorTypesGetTypeFromAnchor$ {
    export type Inbound = {
        json?: shared.SimpleObject$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<AnchorTypesGetTypeFromAnchor, z.ZodTypeDef, Inbound> = z
        .object({
            json: shared.SimpleObject$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.json === undefined ? null : { json: v.json }),
            };
        });

    export type Outbound = {
        json?: shared.SimpleObject$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AnchorTypesGetTypeFromAnchor> = z
        .object({
            json: shared.SimpleObject$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.json === undefined ? null : { json: v.json }),
            };
        });
}

/** @internal */
export namespace AnchorTypesGetResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        TypeFromAnchor?: AnchorTypesGetTypeFromAnchor$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<AnchorTypesGetResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            TypeFromAnchor: z.lazy(() => AnchorTypesGetTypeFromAnchor$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.TypeFromAnchor === undefined ? null : { typeFromAnchor: v.TypeFromAnchor }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        TypeFromAnchor?: AnchorTypesGetTypeFromAnchor$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AnchorTypesGetResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            typeFromAnchor: z.lazy(() => AnchorTypesGetTypeFromAnchor$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.typeFromAnchor === undefined ? null : { TypeFromAnchor: v.typeFromAnchor }),
            };
        });
}
