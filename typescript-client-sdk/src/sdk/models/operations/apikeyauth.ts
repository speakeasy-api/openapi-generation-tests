/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Successful authentication.
 */
export type ApiKeyAuthToken = {
  authenticated: boolean;
  token: string;
};

/** @internal */
export const ApiKeyAuthToken$inboundSchema: z.ZodType<
  ApiKeyAuthToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  authenticated: z.boolean(),
  token: z.string(),
});

/** @internal */
export type ApiKeyAuthToken$Outbound = {
  authenticated: boolean;
  token: string;
};

/** @internal */
export const ApiKeyAuthToken$outboundSchema: z.ZodType<
  ApiKeyAuthToken$Outbound,
  z.ZodTypeDef,
  ApiKeyAuthToken
> = z.object({
  authenticated: z.boolean(),
  token: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiKeyAuthToken$ {
  /** @deprecated use `ApiKeyAuthToken$inboundSchema` instead. */
  export const inboundSchema = ApiKeyAuthToken$inboundSchema;
  /** @deprecated use `ApiKeyAuthToken$outboundSchema` instead. */
  export const outboundSchema = ApiKeyAuthToken$outboundSchema;
  /** @deprecated use `ApiKeyAuthToken$Outbound` instead. */
  export type Outbound = ApiKeyAuthToken$Outbound;
}

export function apiKeyAuthTokenToJSON(
  apiKeyAuthToken: ApiKeyAuthToken,
): string {
  return JSON.stringify(ApiKeyAuthToken$outboundSchema.parse(apiKeyAuthToken));
}

export function apiKeyAuthTokenFromJSON(
  jsonString: string,
): SafeParseResult<ApiKeyAuthToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApiKeyAuthToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApiKeyAuthToken' from JSON`,
  );
}
