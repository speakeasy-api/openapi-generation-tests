/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type AuthenticatedRequestSecurity = {
    clientCredentials: string;
};

export type AuthenticatedRequestRequestBody = {
    name?: string | undefined;
};

export type AuthenticatedRequestResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace AuthenticatedRequestSecurity$ {
    export const inboundSchema: z.ZodType<AuthenticatedRequestSecurity, z.ZodTypeDef, unknown> = z
        .object({
            clientCredentials: z.string(),
        })
        .transform((v) => {
            return {
                clientCredentials: v.clientCredentials,
            };
        });

    export type Outbound = {
        clientCredentials: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AuthenticatedRequestSecurity> = z
        .object({
            clientCredentials: z.string(),
        })
        .transform((v) => {
            return {
                clientCredentials: v.clientCredentials,
            };
        });
}

/** @internal */
export namespace AuthenticatedRequestRequestBody$ {
    export const inboundSchema: z.ZodType<AuthenticatedRequestRequestBody, z.ZodTypeDef, unknown> =
        z
            .object({
                name: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.name === undefined ? null : { name: v.name }),
                };
            });

    export type Outbound = {
        name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AuthenticatedRequestRequestBody
    > = z
        .object({
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}

/** @internal */
export namespace AuthenticatedRequestResponse$ {
    export const inboundSchema: z.ZodType<AuthenticatedRequestResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AuthenticatedRequestResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
