/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AuthenticatedRequestSecurity = {
  clientCredentials: string;
};

export type AuthenticatedRequestRequestBody = {
  name?: string | undefined;
};

/** @internal */
export const AuthenticatedRequestSecurity$inboundSchema: z.ZodType<
  AuthenticatedRequestSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientCredentials: z.string(),
});

/** @internal */
export type AuthenticatedRequestSecurity$Outbound = {
  clientCredentials: string;
};

/** @internal */
export const AuthenticatedRequestSecurity$outboundSchema: z.ZodType<
  AuthenticatedRequestSecurity$Outbound,
  z.ZodTypeDef,
  AuthenticatedRequestSecurity
> = z.object({
  clientCredentials: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthenticatedRequestSecurity$ {
  /** @deprecated use `AuthenticatedRequestSecurity$inboundSchema` instead. */
  export const inboundSchema = AuthenticatedRequestSecurity$inboundSchema;
  /** @deprecated use `AuthenticatedRequestSecurity$outboundSchema` instead. */
  export const outboundSchema = AuthenticatedRequestSecurity$outboundSchema;
  /** @deprecated use `AuthenticatedRequestSecurity$Outbound` instead. */
  export type Outbound = AuthenticatedRequestSecurity$Outbound;
}

export function authenticatedRequestSecurityToJSON(
  authenticatedRequestSecurity: AuthenticatedRequestSecurity,
): string {
  return JSON.stringify(
    AuthenticatedRequestSecurity$outboundSchema.parse(
      authenticatedRequestSecurity,
    ),
  );
}

export function authenticatedRequestSecurityFromJSON(
  jsonString: string,
): SafeParseResult<AuthenticatedRequestSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthenticatedRequestSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthenticatedRequestSecurity' from JSON`,
  );
}

/** @internal */
export const AuthenticatedRequestRequestBody$inboundSchema: z.ZodType<
  AuthenticatedRequestRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
});

/** @internal */
export type AuthenticatedRequestRequestBody$Outbound = {
  name?: string | undefined;
};

/** @internal */
export const AuthenticatedRequestRequestBody$outboundSchema: z.ZodType<
  AuthenticatedRequestRequestBody$Outbound,
  z.ZodTypeDef,
  AuthenticatedRequestRequestBody
> = z.object({
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthenticatedRequestRequestBody$ {
  /** @deprecated use `AuthenticatedRequestRequestBody$inboundSchema` instead. */
  export const inboundSchema = AuthenticatedRequestRequestBody$inboundSchema;
  /** @deprecated use `AuthenticatedRequestRequestBody$outboundSchema` instead. */
  export const outboundSchema = AuthenticatedRequestRequestBody$outboundSchema;
  /** @deprecated use `AuthenticatedRequestRequestBody$Outbound` instead. */
  export type Outbound = AuthenticatedRequestRequestBody$Outbound;
}

export function authenticatedRequestRequestBodyToJSON(
  authenticatedRequestRequestBody: AuthenticatedRequestRequestBody,
): string {
  return JSON.stringify(
    AuthenticatedRequestRequestBody$outboundSchema.parse(
      authenticatedRequestRequestBody,
    ),
  );
}

export function authenticatedRequestRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AuthenticatedRequestRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthenticatedRequestRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthenticatedRequestRequestBody' from JSON`,
  );
}
