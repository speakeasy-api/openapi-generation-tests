/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BasicAuthSecurity = {
  password: string;
  username: string;
};

export type BasicAuthRequest = {
  passwd: string;
  user: string;
};

/**
 * Successful authentication.
 */
export type BasicAuthUser = {
  authenticated: boolean;
  user: string;
};

/** @internal */
export const BasicAuthSecurity$inboundSchema: z.ZodType<
  BasicAuthSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  password: z.string(),
  username: z.string(),
});

/** @internal */
export type BasicAuthSecurity$Outbound = {
  password: string;
  username: string;
};

/** @internal */
export const BasicAuthSecurity$outboundSchema: z.ZodType<
  BasicAuthSecurity$Outbound,
  z.ZodTypeDef,
  BasicAuthSecurity
> = z.object({
  password: z.string(),
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BasicAuthSecurity$ {
  /** @deprecated use `BasicAuthSecurity$inboundSchema` instead. */
  export const inboundSchema = BasicAuthSecurity$inboundSchema;
  /** @deprecated use `BasicAuthSecurity$outboundSchema` instead. */
  export const outboundSchema = BasicAuthSecurity$outboundSchema;
  /** @deprecated use `BasicAuthSecurity$Outbound` instead. */
  export type Outbound = BasicAuthSecurity$Outbound;
}

export function basicAuthSecurityToJSON(
  basicAuthSecurity: BasicAuthSecurity,
): string {
  return JSON.stringify(
    BasicAuthSecurity$outboundSchema.parse(basicAuthSecurity),
  );
}

export function basicAuthSecurityFromJSON(
  jsonString: string,
): SafeParseResult<BasicAuthSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BasicAuthSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BasicAuthSecurity' from JSON`,
  );
}

/** @internal */
export const BasicAuthRequest$inboundSchema: z.ZodType<
  BasicAuthRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  passwd: z.string(),
  user: z.string(),
});

/** @internal */
export type BasicAuthRequest$Outbound = {
  passwd: string;
  user: string;
};

/** @internal */
export const BasicAuthRequest$outboundSchema: z.ZodType<
  BasicAuthRequest$Outbound,
  z.ZodTypeDef,
  BasicAuthRequest
> = z.object({
  passwd: z.string(),
  user: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BasicAuthRequest$ {
  /** @deprecated use `BasicAuthRequest$inboundSchema` instead. */
  export const inboundSchema = BasicAuthRequest$inboundSchema;
  /** @deprecated use `BasicAuthRequest$outboundSchema` instead. */
  export const outboundSchema = BasicAuthRequest$outboundSchema;
  /** @deprecated use `BasicAuthRequest$Outbound` instead. */
  export type Outbound = BasicAuthRequest$Outbound;
}

export function basicAuthRequestToJSON(
  basicAuthRequest: BasicAuthRequest,
): string {
  return JSON.stringify(
    BasicAuthRequest$outboundSchema.parse(basicAuthRequest),
  );
}

export function basicAuthRequestFromJSON(
  jsonString: string,
): SafeParseResult<BasicAuthRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BasicAuthRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BasicAuthRequest' from JSON`,
  );
}

/** @internal */
export const BasicAuthUser$inboundSchema: z.ZodType<
  BasicAuthUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  authenticated: z.boolean(),
  user: z.string(),
});

/** @internal */
export type BasicAuthUser$Outbound = {
  authenticated: boolean;
  user: string;
};

/** @internal */
export const BasicAuthUser$outboundSchema: z.ZodType<
  BasicAuthUser$Outbound,
  z.ZodTypeDef,
  BasicAuthUser
> = z.object({
  authenticated: z.boolean(),
  user: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BasicAuthUser$ {
  /** @deprecated use `BasicAuthUser$inboundSchema` instead. */
  export const inboundSchema = BasicAuthUser$inboundSchema;
  /** @deprecated use `BasicAuthUser$outboundSchema` instead. */
  export const outboundSchema = BasicAuthUser$outboundSchema;
  /** @deprecated use `BasicAuthUser$Outbound` instead. */
  export type Outbound = BasicAuthUser$Outbound;
}

export function basicAuthUserToJSON(basicAuthUser: BasicAuthUser): string {
  return JSON.stringify(BasicAuthUser$outboundSchema.parse(basicAuthUser));
}

export function basicAuthUserFromJSON(
  jsonString: string,
): SafeParseResult<BasicAuthUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BasicAuthUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BasicAuthUser' from JSON`,
  );
}
