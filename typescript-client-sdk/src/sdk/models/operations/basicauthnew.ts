/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as z from "zod";

export const BasicAuthNewServerList = ["http://localhost:35456"] as const;

export type BasicAuthNewSecurity = {
    password: string;
    username: string;
};

export type BasicAuthNewResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace BasicAuthNewSecurity$ {
    export const inboundSchema: z.ZodType<BasicAuthNewSecurity, z.ZodTypeDef, unknown> = z
        .object({
            Password: z.string(),
            Username: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                Password: "password",
                Username: "username",
            });
        });

    export type Outbound = {
        Password: string;
        Username: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BasicAuthNewSecurity> = z
        .object({
            password: z.string(),
            username: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                password: "Password",
                username: "Username",
            });
        });
}

/** @internal */
export namespace BasicAuthNewResponse$ {
    export const inboundSchema: z.ZodType<BasicAuthNewResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BasicAuthNewResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
