/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BearerAuthSecurity = {
  bearerAuth: string;
};

/**
 * Successful authentication.
 */
export type BearerAuthToken = {
  authenticated: boolean;
  token: string;
};

/** @internal */
export const BearerAuthSecurity$inboundSchema: z.ZodType<
  BearerAuthSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  bearerAuth: z.string(),
});

/** @internal */
export type BearerAuthSecurity$Outbound = {
  bearerAuth: string;
};

/** @internal */
export const BearerAuthSecurity$outboundSchema: z.ZodType<
  BearerAuthSecurity$Outbound,
  z.ZodTypeDef,
  BearerAuthSecurity
> = z.object({
  bearerAuth: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BearerAuthSecurity$ {
  /** @deprecated use `BearerAuthSecurity$inboundSchema` instead. */
  export const inboundSchema = BearerAuthSecurity$inboundSchema;
  /** @deprecated use `BearerAuthSecurity$outboundSchema` instead. */
  export const outboundSchema = BearerAuthSecurity$outboundSchema;
  /** @deprecated use `BearerAuthSecurity$Outbound` instead. */
  export type Outbound = BearerAuthSecurity$Outbound;
}

export function bearerAuthSecurityToJSON(
  bearerAuthSecurity: BearerAuthSecurity,
): string {
  return JSON.stringify(
    BearerAuthSecurity$outboundSchema.parse(bearerAuthSecurity),
  );
}

export function bearerAuthSecurityFromJSON(
  jsonString: string,
): SafeParseResult<BearerAuthSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BearerAuthSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BearerAuthSecurity' from JSON`,
  );
}

/** @internal */
export const BearerAuthToken$inboundSchema: z.ZodType<
  BearerAuthToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  authenticated: z.boolean(),
  token: z.string(),
});

/** @internal */
export type BearerAuthToken$Outbound = {
  authenticated: boolean;
  token: string;
};

/** @internal */
export const BearerAuthToken$outboundSchema: z.ZodType<
  BearerAuthToken$Outbound,
  z.ZodTypeDef,
  BearerAuthToken
> = z.object({
  authenticated: z.boolean(),
  token: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BearerAuthToken$ {
  /** @deprecated use `BearerAuthToken$inboundSchema` instead. */
  export const inboundSchema = BearerAuthToken$inboundSchema;
  /** @deprecated use `BearerAuthToken$outboundSchema` instead. */
  export const outboundSchema = BearerAuthToken$outboundSchema;
  /** @deprecated use `BearerAuthToken$Outbound` instead. */
  export type Outbound = BearerAuthToken$Outbound;
}

export function bearerAuthTokenToJSON(
  bearerAuthToken: BearerAuthToken,
): string {
  return JSON.stringify(BearerAuthToken$outboundSchema.parse(bearerAuthToken));
}

export function bearerAuthTokenFromJSON(
  jsonString: string,
): SafeParseResult<BearerAuthToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BearerAuthToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BearerAuthToken' from JSON`,
  );
}
