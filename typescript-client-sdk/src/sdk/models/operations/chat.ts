/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../../lib/base64";
import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export const ChatServerList = ["http://localhost:35456"] as const;

export type ChatRequestBody = {
    prompt: string;
    stream?: boolean | undefined;
};

export type ChatResponse = {
    body?: Uint8Array | string | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Ok
     */
    chatCompletionResult?: Array<shared.ChatCompletionResult> | undefined;
};

/** @internal */
export namespace ChatRequestBody$ {
    export type Inbound = {
        prompt: string;
        stream?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<ChatRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            prompt: z.string(),
            stream: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                prompt: v.prompt,
                ...(v.stream === undefined ? null : { stream: v.stream }),
            };
        });

    export type Outbound = {
        prompt: string;
        stream?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ChatRequestBody> = z
        .object({
            prompt: z.string(),
            stream: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                prompt: v.prompt,
                ...(v.stream === undefined ? null : { stream: v.stream }),
            };
        });
}

/** @internal */
export namespace ChatResponse$ {
    export type Inbound = {
        Body?: Uint8Array | string | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        chatCompletionResult?: Array<shared.ChatCompletionResult$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<ChatResponse, z.ZodTypeDef, Inbound> = z
        .object({
            Body: b64$.zodInbound.optional(),
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            chatCompletionResult: z.array(shared.ChatCompletionResult$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.Body === undefined ? null : { body: v.Body }),
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.chatCompletionResult === undefined
                    ? null
                    : { chatCompletionResult: v.chatCompletionResult }),
            };
        });

    export type Outbound = {
        Body?: Uint8Array | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        chatCompletionResult?: Array<shared.ChatCompletionResult$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ChatResponse> = z
        .object({
            body: b64$.zodOutbound.optional(),
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            chatCompletionResult: z.array(shared.ChatCompletionResult$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.body === undefined ? null : { Body: v.body }),
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.chatCompletionResult === undefined
                    ? null
                    : { chatCompletionResult: v.chatCompletionResult }),
            };
        });
}
