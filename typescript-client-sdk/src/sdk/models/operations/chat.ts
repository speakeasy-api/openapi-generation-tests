/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { EventStream } from "../../../lib/event-streams.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export const ChatServerList = ["http://localhost:35456"] as const;

export type ChatRequestBody = {
    prompt: string;
    stream?: boolean | undefined;
};

export type ChatResponse =
    | Array<shared.ChatCompletionResult>
    | EventStream<shared.ChatCompletionStream>;

/** @internal */
export namespace ChatRequestBody$ {
    export const inboundSchema: z.ZodType<ChatRequestBody, z.ZodTypeDef, unknown> = z.object({
        prompt: z.string(),
        stream: z.boolean().optional(),
    });

    export type Outbound = {
        prompt: string;
        stream?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ChatRequestBody> = z.object({
        prompt: z.string(),
        stream: z.boolean().optional(),
    });
}

/** @internal */
export namespace ChatResponse$ {
    export const inboundSchema: z.ZodType<ChatResponse, z.ZodTypeDef, unknown> = z.union([
        z.array(shared.ChatCompletionResult$.inboundSchema),
        z.instanceof(ReadableStream<Uint8Array>).transform((stream) => {
            return new EventStream({
                stream,
                decoder(rawEvent) {
                    const schema = shared.ChatCompletionStream$.inboundSchema;
                    return schema.parse(rawEvent);
                },
            });
        }),
    ]);

    export type Outbound = Array<shared.ChatCompletionResult$.Outbound> | never;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ChatResponse> = z.union([
        z.array(shared.ChatCompletionResult$.outboundSchema),
        z.never(),
    ]);
}
