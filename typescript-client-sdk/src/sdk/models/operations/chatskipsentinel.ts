/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ChatSkipSentinelServerList = [
  "http://localhost:35456",
] as const;

export type ChatSkipSentinelRequestBody = {
  prompt: string;
  stream?: boolean | undefined;
};

/** @internal */
export const ChatSkipSentinelRequestBody$inboundSchema: z.ZodType<
  ChatSkipSentinelRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt: z.string(),
  stream: z.boolean().optional(),
});

/** @internal */
export type ChatSkipSentinelRequestBody$Outbound = {
  prompt: string;
  stream?: boolean | undefined;
};

/** @internal */
export const ChatSkipSentinelRequestBody$outboundSchema: z.ZodType<
  ChatSkipSentinelRequestBody$Outbound,
  z.ZodTypeDef,
  ChatSkipSentinelRequestBody
> = z.object({
  prompt: z.string(),
  stream: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatSkipSentinelRequestBody$ {
  /** @deprecated use `ChatSkipSentinelRequestBody$inboundSchema` instead. */
  export const inboundSchema = ChatSkipSentinelRequestBody$inboundSchema;
  /** @deprecated use `ChatSkipSentinelRequestBody$outboundSchema` instead. */
  export const outboundSchema = ChatSkipSentinelRequestBody$outboundSchema;
  /** @deprecated use `ChatSkipSentinelRequestBody$Outbound` instead. */
  export type Outbound = ChatSkipSentinelRequestBody$Outbound;
}

export function chatSkipSentinelRequestBodyToJSON(
  chatSkipSentinelRequestBody: ChatSkipSentinelRequestBody,
): string {
  return JSON.stringify(
    ChatSkipSentinelRequestBody$outboundSchema.parse(
      chatSkipSentinelRequestBody,
    ),
  );
}

export function chatSkipSentinelRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ChatSkipSentinelRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatSkipSentinelRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatSkipSentinelRequestBody' from JSON`,
  );
}
