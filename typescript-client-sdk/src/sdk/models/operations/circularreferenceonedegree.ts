/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type CircularReferenceOneDegreeResponseBody = {
  json: shared.FigmaComponentNode;
};

/** @internal */
export const CircularReferenceOneDegreeResponseBody$inboundSchema: z.ZodType<
  CircularReferenceOneDegreeResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  json: shared.FigmaComponentNode$inboundSchema,
});

/** @internal */
export type CircularReferenceOneDegreeResponseBody$Outbound = {
  json: shared.FigmaComponentNode$Outbound;
};

/** @internal */
export const CircularReferenceOneDegreeResponseBody$outboundSchema: z.ZodType<
  CircularReferenceOneDegreeResponseBody$Outbound,
  z.ZodTypeDef,
  CircularReferenceOneDegreeResponseBody
> = z.object({
  json: shared.FigmaComponentNode$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CircularReferenceOneDegreeResponseBody$ {
  /** @deprecated use `CircularReferenceOneDegreeResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CircularReferenceOneDegreeResponseBody$inboundSchema;
  /** @deprecated use `CircularReferenceOneDegreeResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CircularReferenceOneDegreeResponseBody$outboundSchema;
  /** @deprecated use `CircularReferenceOneDegreeResponseBody$Outbound` instead. */
  export type Outbound = CircularReferenceOneDegreeResponseBody$Outbound;
}

export function circularReferenceOneDegreeResponseBodyToJSON(
  circularReferenceOneDegreeResponseBody:
    CircularReferenceOneDegreeResponseBody,
): string {
  return JSON.stringify(
    CircularReferenceOneDegreeResponseBody$outboundSchema.parse(
      circularReferenceOneDegreeResponseBody,
    ),
  );
}

export function circularReferenceOneDegreeResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CircularReferenceOneDegreeResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CircularReferenceOneDegreeResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CircularReferenceOneDegreeResponseBody' from JSON`,
  );
}
