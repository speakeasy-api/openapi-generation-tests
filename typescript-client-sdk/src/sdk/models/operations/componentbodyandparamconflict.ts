/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared/index.js";
import * as z from "zod";

export type ComponentBodyAndParamConflictRequest = {
    simpleObject: shared.SimpleObject;
    str: string;
};

/**
 * OK
 */
export type ComponentBodyAndParamConflictRes = {
    args: { [k: string]: string };
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    json: shared.SimpleObject;
};

/** @internal */
export const ComponentBodyAndParamConflictRequest$inboundSchema: z.ZodType<
    ComponentBodyAndParamConflictRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    simpleObject: shared.SimpleObject$inboundSchema,
    str: z.string(),
});

/** @internal */
export type ComponentBodyAndParamConflictRequest$Outbound = {
    simpleObject: shared.SimpleObject$Outbound;
    str: string;
};

/** @internal */
export const ComponentBodyAndParamConflictRequest$outboundSchema: z.ZodType<
    ComponentBodyAndParamConflictRequest$Outbound,
    z.ZodTypeDef,
    ComponentBodyAndParamConflictRequest
> = z.object({
    simpleObject: shared.SimpleObject$outboundSchema,
    str: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComponentBodyAndParamConflictRequest$ {
    /** @deprecated use `ComponentBodyAndParamConflictRequest$inboundSchema` instead. */
    export const inboundSchema = ComponentBodyAndParamConflictRequest$inboundSchema;
    /** @deprecated use `ComponentBodyAndParamConflictRequest$outboundSchema` instead. */
    export const outboundSchema = ComponentBodyAndParamConflictRequest$outboundSchema;
    /** @deprecated use `ComponentBodyAndParamConflictRequest$Outbound` instead. */
    export type Outbound = ComponentBodyAndParamConflictRequest$Outbound;
}

/** @internal */
export const ComponentBodyAndParamConflictRes$inboundSchema: z.ZodType<
    ComponentBodyAndParamConflictRes,
    z.ZodTypeDef,
    unknown
> = z.object({
    args: z.record(z.string()),
    json: shared.SimpleObject$inboundSchema,
});

/** @internal */
export type ComponentBodyAndParamConflictRes$Outbound = {
    args: { [k: string]: string };
    json: shared.SimpleObject$Outbound;
};

/** @internal */
export const ComponentBodyAndParamConflictRes$outboundSchema: z.ZodType<
    ComponentBodyAndParamConflictRes$Outbound,
    z.ZodTypeDef,
    ComponentBodyAndParamConflictRes
> = z.object({
    args: z.record(z.string()),
    json: shared.SimpleObject$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComponentBodyAndParamConflictRes$ {
    /** @deprecated use `ComponentBodyAndParamConflictRes$inboundSchema` instead. */
    export const inboundSchema = ComponentBodyAndParamConflictRes$inboundSchema;
    /** @deprecated use `ComponentBodyAndParamConflictRes$outboundSchema` instead. */
    export const outboundSchema = ComponentBodyAndParamConflictRes$outboundSchema;
    /** @deprecated use `ComponentBodyAndParamConflictRes$Outbound` instead. */
    export type Outbound = ComponentBodyAndParamConflictRes$Outbound;
}
