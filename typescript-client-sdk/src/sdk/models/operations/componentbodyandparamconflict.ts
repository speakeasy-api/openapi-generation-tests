/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type ComponentBodyAndParamConflictRequest = {
    simpleObject: shared.SimpleObject;
    str: string;
};

/**
 * OK
 */
export type ComponentBodyAndParamConflictRes = {
    args: Record<string, string>;
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    json: shared.SimpleObject;
};

export type ComponentBodyAndParamConflictResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: ComponentBodyAndParamConflictRes | undefined;
};

/** @internal */
export namespace ComponentBodyAndParamConflictRequest$ {
    export type Inbound = {
        simpleObject: shared.SimpleObject$.Inbound;
        str: string;
    };

    export const inboundSchema: z.ZodType<
        ComponentBodyAndParamConflictRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            simpleObject: shared.SimpleObject$.inboundSchema,
            str: z.string(),
        })
        .transform((v) => {
            return {
                simpleObject: v.simpleObject,
                str: v.str,
            };
        });

    export type Outbound = {
        simpleObject: shared.SimpleObject$.Outbound;
        str: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ComponentBodyAndParamConflictRequest
    > = z
        .object({
            simpleObject: shared.SimpleObject$.outboundSchema,
            str: z.string(),
        })
        .transform((v) => {
            return {
                simpleObject: v.simpleObject,
                str: v.str,
            };
        });
}

/** @internal */
export namespace ComponentBodyAndParamConflictRes$ {
    export type Inbound = {
        args: Record<string, string>;
        json: shared.SimpleObject$.Inbound;
    };

    export const inboundSchema: z.ZodType<ComponentBodyAndParamConflictRes, z.ZodTypeDef, Inbound> =
        z
            .object({
                args: z.record(z.string()),
                json: shared.SimpleObject$.inboundSchema,
            })
            .transform((v) => {
                return {
                    args: v.args,
                    json: v.json,
                };
            });

    export type Outbound = {
        args: Record<string, string>;
        json: shared.SimpleObject$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ComponentBodyAndParamConflictRes
    > = z
        .object({
            args: z.record(z.string()),
            json: shared.SimpleObject$.outboundSchema,
        })
        .transform((v) => {
            return {
                args: v.args,
                json: v.json,
            };
        });
}

/** @internal */
export namespace ComponentBodyAndParamConflictResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        res?: ComponentBodyAndParamConflictRes$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        ComponentBodyAndParamConflictResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => ComponentBodyAndParamConflictRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: ComponentBodyAndParamConflictRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ComponentBodyAndParamConflictResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => ComponentBodyAndParamConflictRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
