/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared/index.js";
import * as z from "zod";

export type ComponentBodyAndParamConflictRequest = {
    simpleObject: shared.SimpleObject;
    str: string;
};

/**
 * OK
 */
export type ComponentBodyAndParamConflictRes = {
    args: { [k: string]: string };
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    json: shared.SimpleObject;
};

/** @internal */
export namespace ComponentBodyAndParamConflictRequest$ {
    export const inboundSchema: z.ZodType<
        ComponentBodyAndParamConflictRequest,
        z.ZodTypeDef,
        unknown
    > = z.object({
        simpleObject: shared.SimpleObject$.inboundSchema,
        str: z.string(),
    });

    export type Outbound = {
        simpleObject: shared.SimpleObject$.Outbound;
        str: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ComponentBodyAndParamConflictRequest
    > = z.object({
        simpleObject: shared.SimpleObject$.outboundSchema,
        str: z.string(),
    });
}

/** @internal */
export namespace ComponentBodyAndParamConflictRes$ {
    export const inboundSchema: z.ZodType<ComponentBodyAndParamConflictRes, z.ZodTypeDef, unknown> =
        z.object({
            args: z.record(z.string()),
            json: shared.SimpleObject$.inboundSchema,
        });

    export type Outbound = {
        args: { [k: string]: string };
        json: shared.SimpleObject$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ComponentBodyAndParamConflictRes
    > = z.object({
        args: z.record(z.string()),
        json: shared.SimpleObject$.outboundSchema,
    });
}
