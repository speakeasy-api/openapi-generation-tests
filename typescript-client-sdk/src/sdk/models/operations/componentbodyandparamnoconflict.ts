/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type ComponentBodyAndParamNoConflictRequest = {
  paramStr: string;
  simpleObject: shared.SimpleObject;
};

/**
 * OK
 */
export type ComponentBodyAndParamNoConflictRes = {
  args: { [k: string]: string };
  /**
   * A simple object that uses all our supported primitive types and enums and has optional properties.
   */
  json: shared.SimpleObject;
};

/** @internal */
export const ComponentBodyAndParamNoConflictRequest$inboundSchema: z.ZodType<
  ComponentBodyAndParamNoConflictRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paramStr: z.string(),
  simpleObject: shared.SimpleObject$inboundSchema,
});

/** @internal */
export type ComponentBodyAndParamNoConflictRequest$Outbound = {
  paramStr: string;
  simpleObject: shared.SimpleObject$Outbound;
};

/** @internal */
export const ComponentBodyAndParamNoConflictRequest$outboundSchema: z.ZodType<
  ComponentBodyAndParamNoConflictRequest$Outbound,
  z.ZodTypeDef,
  ComponentBodyAndParamNoConflictRequest
> = z.object({
  paramStr: z.string(),
  simpleObject: shared.SimpleObject$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComponentBodyAndParamNoConflictRequest$ {
  /** @deprecated use `ComponentBodyAndParamNoConflictRequest$inboundSchema` instead. */
  export const inboundSchema =
    ComponentBodyAndParamNoConflictRequest$inboundSchema;
  /** @deprecated use `ComponentBodyAndParamNoConflictRequest$outboundSchema` instead. */
  export const outboundSchema =
    ComponentBodyAndParamNoConflictRequest$outboundSchema;
  /** @deprecated use `ComponentBodyAndParamNoConflictRequest$Outbound` instead. */
  export type Outbound = ComponentBodyAndParamNoConflictRequest$Outbound;
}

export function componentBodyAndParamNoConflictRequestToJSON(
  componentBodyAndParamNoConflictRequest:
    ComponentBodyAndParamNoConflictRequest,
): string {
  return JSON.stringify(
    ComponentBodyAndParamNoConflictRequest$outboundSchema.parse(
      componentBodyAndParamNoConflictRequest,
    ),
  );
}

export function componentBodyAndParamNoConflictRequestFromJSON(
  jsonString: string,
): SafeParseResult<ComponentBodyAndParamNoConflictRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ComponentBodyAndParamNoConflictRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComponentBodyAndParamNoConflictRequest' from JSON`,
  );
}

/** @internal */
export const ComponentBodyAndParamNoConflictRes$inboundSchema: z.ZodType<
  ComponentBodyAndParamNoConflictRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  args: z.record(z.string()),
  json: shared.SimpleObject$inboundSchema,
});

/** @internal */
export type ComponentBodyAndParamNoConflictRes$Outbound = {
  args: { [k: string]: string };
  json: shared.SimpleObject$Outbound;
};

/** @internal */
export const ComponentBodyAndParamNoConflictRes$outboundSchema: z.ZodType<
  ComponentBodyAndParamNoConflictRes$Outbound,
  z.ZodTypeDef,
  ComponentBodyAndParamNoConflictRes
> = z.object({
  args: z.record(z.string()),
  json: shared.SimpleObject$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComponentBodyAndParamNoConflictRes$ {
  /** @deprecated use `ComponentBodyAndParamNoConflictRes$inboundSchema` instead. */
  export const inboundSchema = ComponentBodyAndParamNoConflictRes$inboundSchema;
  /** @deprecated use `ComponentBodyAndParamNoConflictRes$outboundSchema` instead. */
  export const outboundSchema =
    ComponentBodyAndParamNoConflictRes$outboundSchema;
  /** @deprecated use `ComponentBodyAndParamNoConflictRes$Outbound` instead. */
  export type Outbound = ComponentBodyAndParamNoConflictRes$Outbound;
}

export function componentBodyAndParamNoConflictResToJSON(
  componentBodyAndParamNoConflictRes: ComponentBodyAndParamNoConflictRes,
): string {
  return JSON.stringify(
    ComponentBodyAndParamNoConflictRes$outboundSchema.parse(
      componentBodyAndParamNoConflictRes,
    ),
  );
}

export function componentBodyAndParamNoConflictResFromJSON(
  jsonString: string,
): SafeParseResult<ComponentBodyAndParamNoConflictRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ComponentBodyAndParamNoConflictRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComponentBodyAndParamNoConflictRes' from JSON`,
  );
}
