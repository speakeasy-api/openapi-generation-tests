/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type ConflictingParamsRequest = {
    strPathParameter: string;
    strQueryParameter: string;
};

/**
 * OK
 */
export type ConflictingParamsRes = {
    args: { [k: string]: string };
    url: string;
};

/** @internal */
export namespace ConflictingParamsRequest$ {
    export const inboundSchema: z.ZodType<ConflictingParamsRequest, z.ZodTypeDef, unknown> =
        z.object({
            strPathParameter: z.string(),
            strQueryParameter: z.string(),
        });

    export type Outbound = {
        strPathParameter: string;
        strQueryParameter: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConflictingParamsRequest> =
        z.object({
            strPathParameter: z.string(),
            strQueryParameter: z.string(),
        });
}

/** @internal */
export namespace ConflictingParamsRes$ {
    export const inboundSchema: z.ZodType<ConflictingParamsRes, z.ZodTypeDef, unknown> = z.object({
        args: z.record(z.string()),
        url: z.string(),
    });

    export type Outbound = {
        args: { [k: string]: string };
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConflictingParamsRes> = z.object(
        {
            args: z.record(z.string()),
            url: z.string(),
        }
    );
}
