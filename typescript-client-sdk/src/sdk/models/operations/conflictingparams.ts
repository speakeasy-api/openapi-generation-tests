/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ConflictingParamsRequest = {
  strPathParameter: string;
  strQueryParameter: string;
};

/**
 * OK
 */
export type ConflictingParamsRes = {
  args: { [k: string]: string };
  url: string;
};

/** @internal */
export const ConflictingParamsRequest$inboundSchema: z.ZodType<
  ConflictingParamsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  strPathParameter: z.string(),
  strQueryParameter: z.string(),
});

/** @internal */
export type ConflictingParamsRequest$Outbound = {
  strPathParameter: string;
  strQueryParameter: string;
};

/** @internal */
export const ConflictingParamsRequest$outboundSchema: z.ZodType<
  ConflictingParamsRequest$Outbound,
  z.ZodTypeDef,
  ConflictingParamsRequest
> = z.object({
  strPathParameter: z.string(),
  strQueryParameter: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConflictingParamsRequest$ {
  /** @deprecated use `ConflictingParamsRequest$inboundSchema` instead. */
  export const inboundSchema = ConflictingParamsRequest$inboundSchema;
  /** @deprecated use `ConflictingParamsRequest$outboundSchema` instead. */
  export const outboundSchema = ConflictingParamsRequest$outboundSchema;
  /** @deprecated use `ConflictingParamsRequest$Outbound` instead. */
  export type Outbound = ConflictingParamsRequest$Outbound;
}

export function conflictingParamsRequestToJSON(
  conflictingParamsRequest: ConflictingParamsRequest,
): string {
  return JSON.stringify(
    ConflictingParamsRequest$outboundSchema.parse(conflictingParamsRequest),
  );
}

export function conflictingParamsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ConflictingParamsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConflictingParamsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConflictingParamsRequest' from JSON`,
  );
}

/** @internal */
export const ConflictingParamsRes$inboundSchema: z.ZodType<
  ConflictingParamsRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  args: z.record(z.string()),
  url: z.string(),
});

/** @internal */
export type ConflictingParamsRes$Outbound = {
  args: { [k: string]: string };
  url: string;
};

/** @internal */
export const ConflictingParamsRes$outboundSchema: z.ZodType<
  ConflictingParamsRes$Outbound,
  z.ZodTypeDef,
  ConflictingParamsRes
> = z.object({
  args: z.record(z.string()),
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConflictingParamsRes$ {
  /** @deprecated use `ConflictingParamsRes$inboundSchema` instead. */
  export const inboundSchema = ConflictingParamsRes$inboundSchema;
  /** @deprecated use `ConflictingParamsRes$outboundSchema` instead. */
  export const outboundSchema = ConflictingParamsRes$outboundSchema;
  /** @deprecated use `ConflictingParamsRes$Outbound` instead. */
  export type Outbound = ConflictingParamsRes$Outbound;
}

export function conflictingParamsResToJSON(
  conflictingParamsRes: ConflictingParamsRes,
): string {
  return JSON.stringify(
    ConflictingParamsRes$outboundSchema.parse(conflictingParamsRes),
  );
}

export function conflictingParamsResFromJSON(
  jsonString: string,
): SafeParseResult<ConflictingParamsRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConflictingParamsRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConflictingParamsRes' from JSON`,
  );
}
