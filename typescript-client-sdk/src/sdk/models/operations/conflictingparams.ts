/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type ConflictingParamsRequest = {
    strPathParameter: string;
    strQueryParameter: string;
};

/**
 * OK
 */
export type ConflictingParamsRes = {
    args: { [k: string]: string };
    url: string;
};

export type ConflictingParamsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: ConflictingParamsRes | undefined;
};

/** @internal */
export namespace ConflictingParamsRequest$ {
    export const inboundSchema: z.ZodType<ConflictingParamsRequest, z.ZodTypeDef, unknown> = z
        .object({
            strPathParameter: z.string(),
            strQueryParameter: z.string(),
        })
        .transform((v) => {
            return {
                strPathParameter: v.strPathParameter,
                strQueryParameter: v.strQueryParameter,
            };
        });

    export type Outbound = {
        strPathParameter: string;
        strQueryParameter: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConflictingParamsRequest> = z
        .object({
            strPathParameter: z.string(),
            strQueryParameter: z.string(),
        })
        .transform((v) => {
            return {
                strPathParameter: v.strPathParameter,
                strQueryParameter: v.strQueryParameter,
            };
        });
}

/** @internal */
export namespace ConflictingParamsRes$ {
    export const inboundSchema: z.ZodType<ConflictingParamsRes, z.ZodTypeDef, unknown> = z
        .object({
            args: z.record(z.string()),
            url: z.string(),
        })
        .transform((v) => {
            return {
                args: v.args,
                url: v.url,
            };
        });

    export type Outbound = {
        args: { [k: string]: string };
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConflictingParamsRes> = z
        .object({
            args: z.record(z.string()),
            url: z.string(),
        })
        .transform((v) => {
            return {
                args: v.args,
                url: v.url,
            };
        });
}

/** @internal */
export namespace ConflictingParamsResponse$ {
    export const inboundSchema: z.ZodType<ConflictingParamsResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => ConflictingParamsRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: ConflictingParamsRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConflictingParamsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => ConflictingParamsRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
