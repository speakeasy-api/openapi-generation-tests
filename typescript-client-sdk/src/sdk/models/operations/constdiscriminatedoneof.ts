/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * OK
 */
export type ConstDiscriminatedOneOfRes = {
  json: shared.ConstDiscriminatedOneOf;
};

/** @internal */
export const ConstDiscriminatedOneOfRes$inboundSchema: z.ZodType<
  ConstDiscriminatedOneOfRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  json: z.lazy(() => shared.ConstDiscriminatedOneOf$inboundSchema),
});

/** @internal */
export type ConstDiscriminatedOneOfRes$Outbound = {
  json: shared.ConstDiscriminatedOneOf$Outbound;
};

/** @internal */
export const ConstDiscriminatedOneOfRes$outboundSchema: z.ZodType<
  ConstDiscriminatedOneOfRes$Outbound,
  z.ZodTypeDef,
  ConstDiscriminatedOneOfRes
> = z.object({
  json: z.lazy(() => shared.ConstDiscriminatedOneOf$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConstDiscriminatedOneOfRes$ {
  /** @deprecated use `ConstDiscriminatedOneOfRes$inboundSchema` instead. */
  export const inboundSchema = ConstDiscriminatedOneOfRes$inboundSchema;
  /** @deprecated use `ConstDiscriminatedOneOfRes$outboundSchema` instead. */
  export const outboundSchema = ConstDiscriminatedOneOfRes$outboundSchema;
  /** @deprecated use `ConstDiscriminatedOneOfRes$Outbound` instead. */
  export type Outbound = ConstDiscriminatedOneOfRes$Outbound;
}

export function constDiscriminatedOneOfResToJSON(
  constDiscriminatedOneOfRes: ConstDiscriminatedOneOfRes,
): string {
  return JSON.stringify(
    ConstDiscriminatedOneOfRes$outboundSchema.parse(constDiscriminatedOneOfRes),
  );
}

export function constDiscriminatedOneOfResFromJSON(
  jsonString: string,
): SafeParseResult<ConstDiscriminatedOneOfRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConstDiscriminatedOneOfRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConstDiscriminatedOneOfRes' from JSON`,
  );
}
