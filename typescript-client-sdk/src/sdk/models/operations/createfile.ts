/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../../lib/base64";
import { blobLikeSchema } from "../../types";
import * as shared from "../shared";
import * as z from "zod";

export type CreateFileFile = {
    content: Uint8Array | string;
    fileName: string;
};

export type CreateFileRequestBody = {
    file?: CreateFileFile | Blob | undefined;
};

export type CreateFileResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * OK
     */
    fileResource?: shared.FileResource | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace CreateFileFile$ {
    export type Inbound = {
        content: Uint8Array | string;
        fileName: string;
    };

    export const inboundSchema: z.ZodType<CreateFileFile, z.ZodTypeDef, Inbound> = z
        .object({
            content: b64$.zodInbound,
            fileName: z.string(),
        })
        .transform((v) => {
            return {
                content: v.content,
                fileName: v.fileName,
            };
        });

    export type Outbound = {
        content: Uint8Array;
        fileName: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateFileFile> = z
        .object({
            content: b64$.zodOutbound,
            fileName: z.string(),
        })
        .transform((v) => {
            return {
                content: v.content,
                fileName: v.fileName,
            };
        });
}

/** @internal */
export namespace CreateFileRequestBody$ {
    export type Inbound = {
        file?: CreateFileFile$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CreateFileRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            file: z.lazy(() => CreateFileFile$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.file === undefined ? null : { file: v.file }),
            };
        });

    export type Outbound = {
        file?: CreateFileFile$.Outbound | Blob | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateFileRequestBody> = z
        .object({
            file: z
                .lazy(() => CreateFileFile$.outboundSchema)
                .or(blobLikeSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.file === undefined ? null : { file: v.file }),
            };
        });
}

/** @internal */
export namespace CreateFileResponse$ {
    export type Inbound = {
        ContentType: string;
        FileResource?: shared.FileResource$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<CreateFileResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            FileResource: shared.FileResource$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.FileResource === undefined ? null : { fileResource: v.FileResource }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        FileResource?: shared.FileResource$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateFileResponse> = z
        .object({
            contentType: z.string(),
            fileResource: shared.FileResource$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.fileResource === undefined ? null : { FileResource: v.fileResource }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
