/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../../lib/base64.js";
import { remap as remap$ } from "../../../lib/primitives.js";
import { blobLikeSchema } from "../../types/blobs.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type CreateFileFile = {
    content: Uint8Array | string;
    fileName: string;
};

export type CreateFileRequestBody = {
    file?: CreateFileFile | Blob | undefined;
};

export type CreateFileResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * OK
     */
    fileResource?: shared.FileResource | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace CreateFileFile$ {
    export const inboundSchema: z.ZodType<CreateFileFile, z.ZodTypeDef, unknown> = z.object({
        content: b64$.zodInbound,
        fileName: z.string(),
    });

    export type Outbound = {
        content: Uint8Array;
        fileName: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateFileFile> = z.object({
        content: b64$.zodOutbound,
        fileName: z.string(),
    });
}

/** @internal */
export namespace CreateFileRequestBody$ {
    export const inboundSchema: z.ZodType<CreateFileRequestBody, z.ZodTypeDef, unknown> = z.object({
        file: z.lazy(() => CreateFileFile$.inboundSchema).optional(),
    });

    export type Outbound = {
        file?: CreateFileFile$.Outbound | Blob | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateFileRequestBody> =
        z.object({
            file: z
                .lazy(() => CreateFileFile$.outboundSchema)
                .or(blobLikeSchema)
                .optional(),
        });
}

/** @internal */
export namespace CreateFileResponse$ {
    export const inboundSchema: z.ZodType<CreateFileResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            FileResource: shared.FileResource$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                FileResource: "fileResource",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        FileResource?: shared.FileResource$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateFileResponse> = z
        .object({
            contentType: z.string(),
            fileResource: shared.FileResource$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                fileResource: "FileResource",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
