/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../../lib/base64.js";
import { blobLikeSchema } from "../../types/blobs.js";
import * as z from "zod";

export type CreateFileFile = {
    content: Uint8Array | string;
    fileName: string;
};

export type CreateFileRequestBody = {
    file?: CreateFileFile | Blob | undefined;
};

/** @internal */
export namespace CreateFileFile$ {
    export const inboundSchema: z.ZodType<CreateFileFile, z.ZodTypeDef, unknown> = z.object({
        content: b64$.zodInbound,
        fileName: z.string(),
    });

    export type Outbound = {
        content: Uint8Array;
        fileName: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateFileFile> = z.object({
        content: b64$.zodOutbound,
        fileName: z.string(),
    });
}

/** @internal */
export namespace CreateFileRequestBody$ {
    export const inboundSchema: z.ZodType<CreateFileRequestBody, z.ZodTypeDef, unknown> = z.object({
        file: z.lazy(() => CreateFileFile$.inboundSchema).optional(),
    });

    export type Outbound = {
        file?: CreateFileFile$.Outbound | Blob | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateFileRequestBody> =
        z.object({
            file: z
                .lazy(() => CreateFileFile$.outboundSchema)
                .or(blobLikeSchema)
                .optional(),
        });
}
