/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateFileFile = {
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
  fileName: string;
};

export type CreateFileRequestBody = {
  file?: CreateFileFile | Blob | undefined;
};

/** @internal */
export const CreateFileFile$inboundSchema: z.ZodType<
  CreateFileFile,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
  fileName: z.string(),
});

/** @internal */
export type CreateFileFile$Outbound = {
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
  fileName: string;
};

/** @internal */
export const CreateFileFile$outboundSchema: z.ZodType<
  CreateFileFile$Outbound,
  z.ZodTypeDef,
  CreateFileFile
> = z.object({
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
  fileName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFileFile$ {
  /** @deprecated use `CreateFileFile$inboundSchema` instead. */
  export const inboundSchema = CreateFileFile$inboundSchema;
  /** @deprecated use `CreateFileFile$outboundSchema` instead. */
  export const outboundSchema = CreateFileFile$outboundSchema;
  /** @deprecated use `CreateFileFile$Outbound` instead. */
  export type Outbound = CreateFileFile$Outbound;
}

export function createFileFileToJSON(createFileFile: CreateFileFile): string {
  return JSON.stringify(CreateFileFile$outboundSchema.parse(createFileFile));
}

export function createFileFileFromJSON(
  jsonString: string,
): SafeParseResult<CreateFileFile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateFileFile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateFileFile' from JSON`,
  );
}

/** @internal */
export const CreateFileRequestBody$inboundSchema: z.ZodType<
  CreateFileRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  file: z.lazy(() => CreateFileFile$inboundSchema).optional(),
});

/** @internal */
export type CreateFileRequestBody$Outbound = {
  file?: CreateFileFile$Outbound | Blob | undefined;
};

/** @internal */
export const CreateFileRequestBody$outboundSchema: z.ZodType<
  CreateFileRequestBody$Outbound,
  z.ZodTypeDef,
  CreateFileRequestBody
> = z.object({
  file: z.lazy(() => CreateFileFile$outboundSchema).or(blobLikeSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFileRequestBody$ {
  /** @deprecated use `CreateFileRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateFileRequestBody$inboundSchema;
  /** @deprecated use `CreateFileRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateFileRequestBody$outboundSchema;
  /** @deprecated use `CreateFileRequestBody$Outbound` instead. */
  export type Outbound = CreateFileRequestBody$Outbound;
}

export function createFileRequestBodyToJSON(
  createFileRequestBody: CreateFileRequestBody,
): string {
  return JSON.stringify(
    CreateFileRequestBody$outboundSchema.parse(createFileRequestBody),
  );
}

export function createFileRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateFileRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateFileRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateFileRequestBody' from JSON`,
  );
}
