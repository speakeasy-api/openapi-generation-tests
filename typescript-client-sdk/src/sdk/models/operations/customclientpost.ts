/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type CustomClientPostRequest = {
    headerParam: string;
    pathParam: string;
    queryStringParam: string;
    simpleObject?: shared.SimpleObject | undefined;
};

export type Args = {
    queryStringParam: string;
};

/**
 * OK
 */
export type CustomClientPostRes = {
    args: Args;
    headers: { [k: string]: string };
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    json: shared.SimpleObject;
    url: string;
};

export type CustomClientPostResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: CustomClientPostRes | undefined;
};

/** @internal */
export namespace CustomClientPostRequest$ {
    export const inboundSchema: z.ZodType<CustomClientPostRequest, z.ZodTypeDef, unknown> = z
        .object({
            headerParam: z.string(),
            pathParam: z.string(),
            queryStringParam: z.string(),
            simpleObject: shared.SimpleObject$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                headerParam: v.headerParam,
                pathParam: v.pathParam,
                queryStringParam: v.queryStringParam,
                ...(v.simpleObject === undefined ? null : { simpleObject: v.simpleObject }),
            };
        });

    export type Outbound = {
        headerParam: string;
        pathParam: string;
        queryStringParam: string;
        simpleObject?: shared.SimpleObject$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CustomClientPostRequest> = z
        .object({
            headerParam: z.string(),
            pathParam: z.string(),
            queryStringParam: z.string(),
            simpleObject: shared.SimpleObject$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                headerParam: v.headerParam,
                pathParam: v.pathParam,
                queryStringParam: v.queryStringParam,
                ...(v.simpleObject === undefined ? null : { simpleObject: v.simpleObject }),
            };
        });
}

/** @internal */
export namespace Args$ {
    export const inboundSchema: z.ZodType<Args, z.ZodTypeDef, unknown> = z
        .object({
            queryStringParam: z.string(),
        })
        .transform((v) => {
            return {
                queryStringParam: v.queryStringParam,
            };
        });

    export type Outbound = {
        queryStringParam: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Args> = z
        .object({
            queryStringParam: z.string(),
        })
        .transform((v) => {
            return {
                queryStringParam: v.queryStringParam,
            };
        });
}

/** @internal */
export namespace CustomClientPostRes$ {
    export const inboundSchema: z.ZodType<CustomClientPostRes, z.ZodTypeDef, unknown> = z
        .object({
            args: z.lazy(() => Args$.inboundSchema),
            headers: z.record(z.string()),
            json: shared.SimpleObject$.inboundSchema,
            url: z.string(),
        })
        .transform((v) => {
            return {
                args: v.args,
                headers: v.headers,
                json: v.json,
                url: v.url,
            };
        });

    export type Outbound = {
        args: Args$.Outbound;
        headers: { [k: string]: string };
        json: shared.SimpleObject$.Outbound;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CustomClientPostRes> = z
        .object({
            args: z.lazy(() => Args$.outboundSchema),
            headers: z.record(z.string()),
            json: shared.SimpleObject$.outboundSchema,
            url: z.string(),
        })
        .transform((v) => {
            return {
                args: v.args,
                headers: v.headers,
                json: v.json,
                url: v.url,
            };
        });
}

/** @internal */
export namespace CustomClientPostResponse$ {
    export const inboundSchema: z.ZodType<CustomClientPostResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => CustomClientPostRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: CustomClientPostRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CustomClientPostResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => CustomClientPostRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
