/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RFCDate } from "../../types/rfcdate.js";
import * as z from "zod";

export type DateParamWithDefaultRequest = {
    /**
     * A date parameter with a default value
     */
    dateInput?: RFCDate | undefined;
};

/** @internal */
export const DateParamWithDefaultRequest$inboundSchema: z.ZodType<
    DateParamWithDefaultRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    dateInput: z
        .string()
        .default("2023-10-13")
        .transform((v) => new RFCDate(v)),
});

/** @internal */
export type DateParamWithDefaultRequest$Outbound = {
    dateInput: string;
};

/** @internal */
export const DateParamWithDefaultRequest$outboundSchema: z.ZodType<
    DateParamWithDefaultRequest$Outbound,
    z.ZodTypeDef,
    DateParamWithDefaultRequest
> = z.object({
    dateInput: z
        .instanceof(RFCDate)
        .default(() => new RFCDate("2023-10-13"))
        .transform((v) => v.toString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DateParamWithDefaultRequest$ {
    /** @deprecated use `DateParamWithDefaultRequest$inboundSchema` instead. */
    export const inboundSchema = DateParamWithDefaultRequest$inboundSchema;
    /** @deprecated use `DateParamWithDefaultRequest$outboundSchema` instead. */
    export const outboundSchema = DateParamWithDefaultRequest$outboundSchema;
    /** @deprecated use `DateParamWithDefaultRequest$Outbound` instead. */
    export type Outbound = DateParamWithDefaultRequest$Outbound;
}
