/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type DateTimeParamWithDefaultRequest = {
    /**
     * A date time parameter with a default value
     */
    dateTimeInput?: Date | undefined;
};

export type DateTimeParamWithDefaultResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace DateTimeParamWithDefaultRequest$ {
    export type Inbound = {
        dateTimeInput?: string | undefined;
    };

    export const inboundSchema: z.ZodType<DateTimeParamWithDefaultRequest, z.ZodTypeDef, Inbound> =
        z
            .object({
                dateTimeInput: z
                    .string()
                    .datetime({ offset: true })
                    .default("2023-10-13T12:42:42.999+00:00")
                    .transform((v) => new Date(v)),
            })
            .transform((v) => {
                return {
                    ...(v.dateTimeInput === undefined ? null : { dateTimeInput: v.dateTimeInput }),
                };
            });

    export type Outbound = {
        dateTimeInput: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DateTimeParamWithDefaultRequest
    > = z
        .object({
            dateTimeInput: z
                .date()
                .default(() => new Date("2023-10-13T12:42:42.999+00:00"))
                .transform((v) => v.toISOString()),
        })
        .transform((v) => {
            return {
                dateTimeInput: v.dateTimeInput,
            };
        });
}

/** @internal */
export namespace DateTimeParamWithDefaultResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<DateTimeParamWithDefaultResponse, z.ZodTypeDef, Inbound> =
        z
            .object({
                ContentType: z.string(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
            })
            .transform((v) => {
                return {
                    contentType: v.ContentType,
                    statusCode: v.StatusCode,
                    rawResponse: v.RawResponse,
                };
            });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DateTimeParamWithDefaultResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
