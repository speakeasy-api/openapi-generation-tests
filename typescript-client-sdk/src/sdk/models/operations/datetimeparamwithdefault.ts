/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type DateTimeParamWithDefaultRequest = {
  /**
   * A date time parameter with a default value
   */
  dateTimeInput?: Date | undefined;
};

/** @internal */
export const DateTimeParamWithDefaultRequest$inboundSchema: z.ZodType<
  DateTimeParamWithDefaultRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  dateTimeInput: z.string().datetime({ offset: true }).default(
    "2023-10-13T12:42:42.999+00:00",
  ).transform(v => new Date(v)),
});

/** @internal */
export type DateTimeParamWithDefaultRequest$Outbound = {
  dateTimeInput: string;
};

/** @internal */
export const DateTimeParamWithDefaultRequest$outboundSchema: z.ZodType<
  DateTimeParamWithDefaultRequest$Outbound,
  z.ZodTypeDef,
  DateTimeParamWithDefaultRequest
> = z.object({
  dateTimeInput: z.date().default(() =>
    new Date("2023-10-13T12:42:42.999+00:00")
  ).transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DateTimeParamWithDefaultRequest$ {
  /** @deprecated use `DateTimeParamWithDefaultRequest$inboundSchema` instead. */
  export const inboundSchema = DateTimeParamWithDefaultRequest$inboundSchema;
  /** @deprecated use `DateTimeParamWithDefaultRequest$outboundSchema` instead. */
  export const outboundSchema = DateTimeParamWithDefaultRequest$outboundSchema;
  /** @deprecated use `DateTimeParamWithDefaultRequest$Outbound` instead. */
  export type Outbound = DateTimeParamWithDefaultRequest$Outbound;
}
