/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types/decimal.js";
import * as z from "zod";

export type DecimalParamWithDefaultRequest = {
    /**
     * A decimal parameter with a default value
     */
    decimalInput?: Decimal$ | number | undefined;
};

/** @internal */
export const DecimalParamWithDefaultRequest$inboundSchema: z.ZodType<
    DecimalParamWithDefaultRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    decimalInput: z.number().transform((v) => new Decimal$(v ?? "903275809834567300000")),
});

/** @internal */
export type DecimalParamWithDefaultRequest$Outbound = {
    decimalInput: number;
};

/** @internal */
export const DecimalParamWithDefaultRequest$outboundSchema: z.ZodType<
    DecimalParamWithDefaultRequest$Outbound,
    z.ZodTypeDef,
    DecimalParamWithDefaultRequest
> = z.object({
    decimalInput: z
        .union([z.instanceof(Decimal$), z.number()])
        .default(() => new Decimal$("903275809834567300000"))
        .transform((v) => (typeof v === "number" ? v : v.toNumber())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DecimalParamWithDefaultRequest$ {
    /** @deprecated use `DecimalParamWithDefaultRequest$inboundSchema` instead. */
    export const inboundSchema = DecimalParamWithDefaultRequest$inboundSchema;
    /** @deprecated use `DecimalParamWithDefaultRequest$outboundSchema` instead. */
    export const outboundSchema = DecimalParamWithDefaultRequest$outboundSchema;
    /** @deprecated use `DecimalParamWithDefaultRequest$Outbound` instead. */
    export type Outbound = DecimalParamWithDefaultRequest$Outbound;
}
