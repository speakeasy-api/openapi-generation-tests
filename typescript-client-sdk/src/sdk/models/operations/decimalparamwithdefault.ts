/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types/decimal.js";
import * as z from "zod";

export type DecimalParamWithDefaultRequest = {
    /**
     * A decimal parameter with a default value
     */
    decimalInput?: Decimal$ | number | undefined;
};

/** @internal */
export namespace DecimalParamWithDefaultRequest$ {
    export const inboundSchema: z.ZodType<DecimalParamWithDefaultRequest, z.ZodTypeDef, unknown> =
        z.object({
            decimalInput: z.number().transform((v) => new Decimal$(v ?? "903275809834567300000")),
        });

    export type Outbound = {
        decimalInput: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DecimalParamWithDefaultRequest> =
        z.object({
            decimalInput: z
                .union([z.instanceof(Decimal$), z.number()])
                .default(() => new Decimal$("903275809834567300000"))
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
        });
}
