/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import * as z from "zod";

export type DecimalParamWithDefaultRequest = {
    /**
     * A decimal parameter with a default value
     */
    decimalInput?: Decimal$ | number | undefined;
};

export type DecimalParamWithDefaultResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace DecimalParamWithDefaultRequest$ {
    export type Inbound = {
        decimalInput?: number | undefined;
    };

    export const inboundSchema: z.ZodType<DecimalParamWithDefaultRequest, z.ZodTypeDef, Inbound> = z
        .object({
            decimalInput: z.number().transform((v) => new Decimal$(v ?? "903275809834567300000")),
        })
        .transform((v) => {
            return {
                decimalInput: v.decimalInput,
            };
        });

    export type Outbound = {
        decimalInput: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DecimalParamWithDefaultRequest> =
        z
            .object({
                decimalInput: z
                    .union([z.instanceof(Decimal$), z.number()])
                    .default(() => new Decimal$("903275809834567300000"))
                    .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            })
            .transform((v) => {
                return {
                    decimalInput: v.decimalInput,
                };
            });
}

/** @internal */
export namespace DecimalParamWithDefaultResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<DecimalParamWithDefaultResponse, z.ZodTypeDef, Inbound> =
        z
            .object({
                ContentType: z.string(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
            })
            .transform((v) => {
                return {
                    contentType: v.ContentType,
                    statusCode: v.StatusCode,
                    rawResponse: v.RawResponse,
                };
            });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DecimalParamWithDefaultResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
