/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DecimalParamWithDefaultRequest = {
  /**
   * A decimal parameter with a default value
   */
  decimalInput?: Decimal$ | number | undefined;
};

/** @internal */
export const DecimalParamWithDefaultRequest$inboundSchema: z.ZodType<
  DecimalParamWithDefaultRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  decimalInput: z.number().transform(v =>
    new Decimal$(v ?? "903275809834567300000")
  ),
});

/** @internal */
export type DecimalParamWithDefaultRequest$Outbound = {
  decimalInput: number;
};

/** @internal */
export const DecimalParamWithDefaultRequest$outboundSchema: z.ZodType<
  DecimalParamWithDefaultRequest$Outbound,
  z.ZodTypeDef,
  DecimalParamWithDefaultRequest
> = z.object({
  decimalInput: z.union([z.instanceof(Decimal$), z.number()]).default(() =>
    new Decimal$("903275809834567300000")
  ).transform(v => typeof v === "number" ? v : v.toNumber()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DecimalParamWithDefaultRequest$ {
  /** @deprecated use `DecimalParamWithDefaultRequest$inboundSchema` instead. */
  export const inboundSchema = DecimalParamWithDefaultRequest$inboundSchema;
  /** @deprecated use `DecimalParamWithDefaultRequest$outboundSchema` instead. */
  export const outboundSchema = DecimalParamWithDefaultRequest$outboundSchema;
  /** @deprecated use `DecimalParamWithDefaultRequest$Outbound` instead. */
  export type Outbound = DecimalParamWithDefaultRequest$Outbound;
}

export function decimalParamWithDefaultRequestToJSON(
  decimalParamWithDefaultRequest: DecimalParamWithDefaultRequest,
): string {
  return JSON.stringify(
    DecimalParamWithDefaultRequest$outboundSchema.parse(
      decimalParamWithDefaultRequest,
    ),
  );
}

export function decimalParamWithDefaultRequestFromJSON(
  jsonString: string,
): SafeParseResult<DecimalParamWithDefaultRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DecimalParamWithDefaultRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DecimalParamWithDefaultRequest' from JSON`,
  );
}
