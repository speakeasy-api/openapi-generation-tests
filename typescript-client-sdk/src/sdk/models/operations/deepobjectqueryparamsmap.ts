/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeepObjectQueryParamsMapRequest = {
  mapArrParam?: { [k: string]: Array<string> } | undefined;
  mapParam: { [k: string]: string };
};

export type DeepObjectQueryParamsMapArgs = string | Array<string>;

/**
 * OK
 */
export type DeepObjectQueryParamsMapRes = {
  args: { [k: string]: string | Array<string> };
  url: string;
};

/** @internal */
export const DeepObjectQueryParamsMapRequest$inboundSchema: z.ZodType<
  DeepObjectQueryParamsMapRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mapArrParam: z.record(z.array(z.string())).optional(),
  mapParam: z.record(z.string()),
});

/** @internal */
export type DeepObjectQueryParamsMapRequest$Outbound = {
  mapArrParam?: { [k: string]: Array<string> } | undefined;
  mapParam: { [k: string]: string };
};

/** @internal */
export const DeepObjectQueryParamsMapRequest$outboundSchema: z.ZodType<
  DeepObjectQueryParamsMapRequest$Outbound,
  z.ZodTypeDef,
  DeepObjectQueryParamsMapRequest
> = z.object({
  mapArrParam: z.record(z.array(z.string())).optional(),
  mapParam: z.record(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeepObjectQueryParamsMapRequest$ {
  /** @deprecated use `DeepObjectQueryParamsMapRequest$inboundSchema` instead. */
  export const inboundSchema = DeepObjectQueryParamsMapRequest$inboundSchema;
  /** @deprecated use `DeepObjectQueryParamsMapRequest$outboundSchema` instead. */
  export const outboundSchema = DeepObjectQueryParamsMapRequest$outboundSchema;
  /** @deprecated use `DeepObjectQueryParamsMapRequest$Outbound` instead. */
  export type Outbound = DeepObjectQueryParamsMapRequest$Outbound;
}

export function deepObjectQueryParamsMapRequestToJSON(
  deepObjectQueryParamsMapRequest: DeepObjectQueryParamsMapRequest,
): string {
  return JSON.stringify(
    DeepObjectQueryParamsMapRequest$outboundSchema.parse(
      deepObjectQueryParamsMapRequest,
    ),
  );
}

export function deepObjectQueryParamsMapRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeepObjectQueryParamsMapRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeepObjectQueryParamsMapRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeepObjectQueryParamsMapRequest' from JSON`,
  );
}

/** @internal */
export const DeepObjectQueryParamsMapArgs$inboundSchema: z.ZodType<
  DeepObjectQueryParamsMapArgs,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type DeepObjectQueryParamsMapArgs$Outbound = string | Array<string>;

/** @internal */
export const DeepObjectQueryParamsMapArgs$outboundSchema: z.ZodType<
  DeepObjectQueryParamsMapArgs$Outbound,
  z.ZodTypeDef,
  DeepObjectQueryParamsMapArgs
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeepObjectQueryParamsMapArgs$ {
  /** @deprecated use `DeepObjectQueryParamsMapArgs$inboundSchema` instead. */
  export const inboundSchema = DeepObjectQueryParamsMapArgs$inboundSchema;
  /** @deprecated use `DeepObjectQueryParamsMapArgs$outboundSchema` instead. */
  export const outboundSchema = DeepObjectQueryParamsMapArgs$outboundSchema;
  /** @deprecated use `DeepObjectQueryParamsMapArgs$Outbound` instead. */
  export type Outbound = DeepObjectQueryParamsMapArgs$Outbound;
}

export function deepObjectQueryParamsMapArgsToJSON(
  deepObjectQueryParamsMapArgs: DeepObjectQueryParamsMapArgs,
): string {
  return JSON.stringify(
    DeepObjectQueryParamsMapArgs$outboundSchema.parse(
      deepObjectQueryParamsMapArgs,
    ),
  );
}

export function deepObjectQueryParamsMapArgsFromJSON(
  jsonString: string,
): SafeParseResult<DeepObjectQueryParamsMapArgs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeepObjectQueryParamsMapArgs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeepObjectQueryParamsMapArgs' from JSON`,
  );
}

/** @internal */
export const DeepObjectQueryParamsMapRes$inboundSchema: z.ZodType<
  DeepObjectQueryParamsMapRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  args: z.record(z.union([z.string(), z.array(z.string())])),
  url: z.string(),
});

/** @internal */
export type DeepObjectQueryParamsMapRes$Outbound = {
  args: { [k: string]: string | Array<string> };
  url: string;
};

/** @internal */
export const DeepObjectQueryParamsMapRes$outboundSchema: z.ZodType<
  DeepObjectQueryParamsMapRes$Outbound,
  z.ZodTypeDef,
  DeepObjectQueryParamsMapRes
> = z.object({
  args: z.record(z.union([z.string(), z.array(z.string())])),
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeepObjectQueryParamsMapRes$ {
  /** @deprecated use `DeepObjectQueryParamsMapRes$inboundSchema` instead. */
  export const inboundSchema = DeepObjectQueryParamsMapRes$inboundSchema;
  /** @deprecated use `DeepObjectQueryParamsMapRes$outboundSchema` instead. */
  export const outboundSchema = DeepObjectQueryParamsMapRes$outboundSchema;
  /** @deprecated use `DeepObjectQueryParamsMapRes$Outbound` instead. */
  export type Outbound = DeepObjectQueryParamsMapRes$Outbound;
}

export function deepObjectQueryParamsMapResToJSON(
  deepObjectQueryParamsMapRes: DeepObjectQueryParamsMapRes,
): string {
  return JSON.stringify(
    DeepObjectQueryParamsMapRes$outboundSchema.parse(
      deepObjectQueryParamsMapRes,
    ),
  );
}

export function deepObjectQueryParamsMapResFromJSON(
  jsonString: string,
): SafeParseResult<DeepObjectQueryParamsMapRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeepObjectQueryParamsMapRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeepObjectQueryParamsMapRes' from JSON`,
  );
}
