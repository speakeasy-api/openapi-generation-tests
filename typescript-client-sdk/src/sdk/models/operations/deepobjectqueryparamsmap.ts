/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type DeepObjectQueryParamsMapRequest = {
    mapParam: Record<string, string>;
    mapArrParam?: Record<string, Array<string>> | undefined;
};

export type DeepObjectQueryParamsMapArgs = string | Array<string>;

/**
 * OK
 */
export type DeepObjectQueryParamsMapRes = {
    args: Record<string, string | Array<string>>;
    url: string;
};

export type DeepObjectQueryParamsMapResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: DeepObjectQueryParamsMapRes | undefined;
};

/** @internal */
export namespace DeepObjectQueryParamsMapRequest$ {
    export type Inbound = {
        mapParam: Record<string, string>;
        mapArrParam?: Record<string, Array<string>> | undefined;
    };

    export const inboundSchema: z.ZodType<DeepObjectQueryParamsMapRequest, z.ZodTypeDef, Inbound> =
        z
            .object({
                mapParam: z.record(z.string()),
                mapArrParam: z.record(z.array(z.string())).optional(),
            })
            .transform((v) => {
                return {
                    mapParam: v.mapParam,
                    ...(v.mapArrParam === undefined ? null : { mapArrParam: v.mapArrParam }),
                };
            });

    export type Outbound = {
        mapParam: Record<string, string>;
        mapArrParam?: Record<string, Array<string>> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DeepObjectQueryParamsMapRequest
    > = z
        .object({
            mapParam: z.record(z.string()),
            mapArrParam: z.record(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                mapParam: v.mapParam,
                ...(v.mapArrParam === undefined ? null : { mapArrParam: v.mapArrParam }),
            };
        });
}

/** @internal */
export namespace DeepObjectQueryParamsMapArgs$ {
    export type Inbound = string | Array<string>;

    export type Outbound = string | Array<string>;
    export const inboundSchema: z.ZodType<DeepObjectQueryParamsMapArgs, z.ZodTypeDef, Inbound> =
        z.union([z.string(), z.array(z.string())]);
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeepObjectQueryParamsMapArgs> =
        z.union([z.string(), z.array(z.string())]);
}

/** @internal */
export namespace DeepObjectQueryParamsMapRes$ {
    export type Inbound = {
        args: Record<string, string | Array<string>>;
        url: string;
    };

    export const inboundSchema: z.ZodType<DeepObjectQueryParamsMapRes, z.ZodTypeDef, Inbound> = z
        .object({
            args: z.record(z.union([z.string(), z.array(z.string())])),
            url: z.string(),
        })
        .transform((v) => {
            return {
                args: v.args,
                url: v.url,
            };
        });

    export type Outbound = {
        args: Record<string, string | Array<string>>;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeepObjectQueryParamsMapRes> = z
        .object({
            args: z.record(z.union([z.string(), z.array(z.string())])),
            url: z.string(),
        })
        .transform((v) => {
            return {
                args: v.args,
                url: v.url,
            };
        });
}

/** @internal */
export namespace DeepObjectQueryParamsMapResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        res?: DeepObjectQueryParamsMapRes$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<DeepObjectQueryParamsMapResponse, z.ZodTypeDef, Inbound> =
        z
            .object({
                ContentType: z.string(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
                res: z.lazy(() => DeepObjectQueryParamsMapRes$.inboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    contentType: v.ContentType,
                    statusCode: v.StatusCode,
                    rawResponse: v.RawResponse,
                    ...(v.res === undefined ? null : { res: v.res }),
                };
            });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: DeepObjectQueryParamsMapRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DeepObjectQueryParamsMapResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => DeepObjectQueryParamsMapRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
