/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type ObjArrParam = {
    arr?: Array<string> | undefined;
};

export type DeepObjectQueryParamsObjectRequest = {
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    objParam: shared.SimpleObject;
    objArrParam?: ObjArrParam | undefined;
};

export type DeepObjectQueryParamsObjectArgs = {
    objArrParamArr: Array<string>;
    objParamAny: string;
    objParamBigintStr?: string | undefined;
    objParamBigint?: string | undefined;
    objParamBoolOpt: string;
    objParamBool: string;
    objParamDateTime: string;
    objParamDate: string;
    objParamDecimalStr?: string | undefined;
    objParamDecimal?: string | undefined;
    objParamEnum: string;
    objParamFloat32: string;
    objParamInt32Enum: string;
    objParamInt32: string;
    objParamIntEnum: string;
    objParamInt: string;
    objParamNum: string;
    objParamStrOpt: string;
    objParamStr: string;
};

/**
 * OK
 */
export type DeepObjectQueryParamsObjectRes = {
    args: DeepObjectQueryParamsObjectArgs;
    url: string;
};

export type DeepObjectQueryParamsObjectResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: DeepObjectQueryParamsObjectRes | undefined;
};

/** @internal */
export namespace ObjArrParam$ {
    export type Inbound = {
        arr?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<ObjArrParam, z.ZodTypeDef, Inbound> = z
        .object({
            arr: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.arr === undefined ? null : { arr: v.arr }),
            };
        });

    export type Outbound = {
        arr?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ObjArrParam> = z
        .object({
            arr: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.arr === undefined ? null : { arr: v.arr }),
            };
        });
}

/** @internal */
export namespace DeepObjectQueryParamsObjectRequest$ {
    export type Inbound = {
        objParam: shared.SimpleObject$.Inbound;
        objArrParam?: ObjArrParam$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        DeepObjectQueryParamsObjectRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            objParam: shared.SimpleObject$.inboundSchema,
            objArrParam: z.lazy(() => ObjArrParam$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                objParam: v.objParam,
                ...(v.objArrParam === undefined ? null : { objArrParam: v.objArrParam }),
            };
        });

    export type Outbound = {
        objParam: shared.SimpleObject$.Outbound;
        objArrParam?: ObjArrParam$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DeepObjectQueryParamsObjectRequest
    > = z
        .object({
            objParam: shared.SimpleObject$.outboundSchema,
            objArrParam: z.lazy(() => ObjArrParam$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                objParam: v.objParam,
                ...(v.objArrParam === undefined ? null : { objArrParam: v.objArrParam }),
            };
        });
}

/** @internal */
export namespace DeepObjectQueryParamsObjectArgs$ {
    export type Inbound = {
        "objArrParam[arr]": Array<string>;
        "objParam[any]": string;
        "objParam[bigintStr]"?: string | undefined;
        "objParam[bigint]"?: string | undefined;
        "objParam[boolOpt]": string;
        "objParam[bool]": string;
        "objParam[dateTime]": string;
        "objParam[date]": string;
        "objParam[decimalStr]"?: string | undefined;
        "objParam[decimal]"?: string | undefined;
        "objParam[enum]": string;
        "objParam[float32]": string;
        "objParam[int32Enum]": string;
        "objParam[int32]": string;
        "objParam[intEnum]": string;
        "objParam[int]": string;
        "objParam[num]": string;
        "objParam[strOpt]": string;
        "objParam[str]": string;
    };

    export const inboundSchema: z.ZodType<DeepObjectQueryParamsObjectArgs, z.ZodTypeDef, Inbound> =
        z
            .object({
                "objArrParam[arr]": z.array(z.string()),
                "objParam[any]": z.string(),
                "objParam[bigintStr]": z.string().optional(),
                "objParam[bigint]": z.string().optional(),
                "objParam[boolOpt]": z.string(),
                "objParam[bool]": z.string(),
                "objParam[dateTime]": z.string(),
                "objParam[date]": z.string(),
                "objParam[decimalStr]": z.string().optional(),
                "objParam[decimal]": z.string().optional(),
                "objParam[enum]": z.string(),
                "objParam[float32]": z.string(),
                "objParam[int32Enum]": z.string(),
                "objParam[int32]": z.string(),
                "objParam[intEnum]": z.string(),
                "objParam[int]": z.string(),
                "objParam[num]": z.string(),
                "objParam[strOpt]": z.string(),
                "objParam[str]": z.string(),
            })
            .transform((v) => {
                return {
                    objArrParamArr: v["objArrParam[arr]"],
                    objParamAny: v["objParam[any]"],
                    ...(v["objParam[bigintStr]"] === undefined
                        ? null
                        : { objParamBigintStr: v["objParam[bigintStr]"] }),
                    ...(v["objParam[bigint]"] === undefined
                        ? null
                        : { objParamBigint: v["objParam[bigint]"] }),
                    objParamBoolOpt: v["objParam[boolOpt]"],
                    objParamBool: v["objParam[bool]"],
                    objParamDateTime: v["objParam[dateTime]"],
                    objParamDate: v["objParam[date]"],
                    ...(v["objParam[decimalStr]"] === undefined
                        ? null
                        : { objParamDecimalStr: v["objParam[decimalStr]"] }),
                    ...(v["objParam[decimal]"] === undefined
                        ? null
                        : { objParamDecimal: v["objParam[decimal]"] }),
                    objParamEnum: v["objParam[enum]"],
                    objParamFloat32: v["objParam[float32]"],
                    objParamInt32Enum: v["objParam[int32Enum]"],
                    objParamInt32: v["objParam[int32]"],
                    objParamIntEnum: v["objParam[intEnum]"],
                    objParamInt: v["objParam[int]"],
                    objParamNum: v["objParam[num]"],
                    objParamStrOpt: v["objParam[strOpt]"],
                    objParamStr: v["objParam[str]"],
                };
            });

    export type Outbound = {
        "objArrParam[arr]": Array<string>;
        "objParam[any]": string;
        "objParam[bigintStr]"?: string | undefined;
        "objParam[bigint]"?: string | undefined;
        "objParam[boolOpt]": string;
        "objParam[bool]": string;
        "objParam[dateTime]": string;
        "objParam[date]": string;
        "objParam[decimalStr]"?: string | undefined;
        "objParam[decimal]"?: string | undefined;
        "objParam[enum]": string;
        "objParam[float32]": string;
        "objParam[int32Enum]": string;
        "objParam[int32]": string;
        "objParam[intEnum]": string;
        "objParam[int]": string;
        "objParam[num]": string;
        "objParam[strOpt]": string;
        "objParam[str]": string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DeepObjectQueryParamsObjectArgs
    > = z
        .object({
            objArrParamArr: z.array(z.string()),
            objParamAny: z.string(),
            objParamBigintStr: z.string().optional(),
            objParamBigint: z.string().optional(),
            objParamBoolOpt: z.string(),
            objParamBool: z.string(),
            objParamDateTime: z.string(),
            objParamDate: z.string(),
            objParamDecimalStr: z.string().optional(),
            objParamDecimal: z.string().optional(),
            objParamEnum: z.string(),
            objParamFloat32: z.string(),
            objParamInt32Enum: z.string(),
            objParamInt32: z.string(),
            objParamIntEnum: z.string(),
            objParamInt: z.string(),
            objParamNum: z.string(),
            objParamStrOpt: z.string(),
            objParamStr: z.string(),
        })
        .transform((v) => {
            return {
                "objArrParam[arr]": v.objArrParamArr,
                "objParam[any]": v.objParamAny,
                ...(v.objParamBigintStr === undefined
                    ? null
                    : { "objParam[bigintStr]": v.objParamBigintStr }),
                ...(v.objParamBigint === undefined
                    ? null
                    : { "objParam[bigint]": v.objParamBigint }),
                "objParam[boolOpt]": v.objParamBoolOpt,
                "objParam[bool]": v.objParamBool,
                "objParam[dateTime]": v.objParamDateTime,
                "objParam[date]": v.objParamDate,
                ...(v.objParamDecimalStr === undefined
                    ? null
                    : { "objParam[decimalStr]": v.objParamDecimalStr }),
                ...(v.objParamDecimal === undefined
                    ? null
                    : { "objParam[decimal]": v.objParamDecimal }),
                "objParam[enum]": v.objParamEnum,
                "objParam[float32]": v.objParamFloat32,
                "objParam[int32Enum]": v.objParamInt32Enum,
                "objParam[int32]": v.objParamInt32,
                "objParam[intEnum]": v.objParamIntEnum,
                "objParam[int]": v.objParamInt,
                "objParam[num]": v.objParamNum,
                "objParam[strOpt]": v.objParamStrOpt,
                "objParam[str]": v.objParamStr,
            };
        });
}

/** @internal */
export namespace DeepObjectQueryParamsObjectRes$ {
    export type Inbound = {
        args: DeepObjectQueryParamsObjectArgs$.Inbound;
        url: string;
    };

    export const inboundSchema: z.ZodType<DeepObjectQueryParamsObjectRes, z.ZodTypeDef, Inbound> = z
        .object({
            args: z.lazy(() => DeepObjectQueryParamsObjectArgs$.inboundSchema),
            url: z.string(),
        })
        .transform((v) => {
            return {
                args: v.args,
                url: v.url,
            };
        });

    export type Outbound = {
        args: DeepObjectQueryParamsObjectArgs$.Outbound;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeepObjectQueryParamsObjectRes> =
        z
            .object({
                args: z.lazy(() => DeepObjectQueryParamsObjectArgs$.outboundSchema),
                url: z.string(),
            })
            .transform((v) => {
                return {
                    args: v.args,
                    url: v.url,
                };
            });
}

/** @internal */
export namespace DeepObjectQueryParamsObjectResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        res?: DeepObjectQueryParamsObjectRes$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        DeepObjectQueryParamsObjectResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => DeepObjectQueryParamsObjectRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: DeepObjectQueryParamsObjectRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DeepObjectQueryParamsObjectResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => DeepObjectQueryParamsObjectRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
