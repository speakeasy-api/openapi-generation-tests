/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type ObjArrParam = {
    arr?: Array<string> | undefined;
};

export type DeepObjectQueryParamsObjectRequest = {
    objArrParam?: ObjArrParam | undefined;
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    objParam: shared.SimpleObject;
};

export type DeepObjectQueryParamsObjectArgs = {
    objArrParamArr: Array<string>;
    objParamAny: string;
    objParamBigintStr?: string | undefined;
    objParamBigint?: string | undefined;
    objParamBoolOpt: string;
    objParamBool: string;
    objParamDateTime: string;
    objParamDate: string;
    objParamDecimalStr?: string | undefined;
    objParamDecimal?: string | undefined;
    objParamEnum: string;
    objParamFloat32: string;
    objParamFloat64Str?: string | undefined;
    objParamInt32Enum: string;
    objParamInt32: string;
    objParamInt64Str?: string | undefined;
    objParamIntEnum: string;
    objParamInt: string;
    objParamNum: string;
    objParamStrOpt: string;
    objParamStr: string;
};

/**
 * OK
 */
export type DeepObjectQueryParamsObjectRes = {
    args: DeepObjectQueryParamsObjectArgs;
    url: string;
};

/** @internal */
export const ObjArrParam$inboundSchema: z.ZodType<ObjArrParam, z.ZodTypeDef, unknown> = z.object({
    arr: z.array(z.string()).optional(),
});

/** @internal */
export type ObjArrParam$Outbound = {
    arr?: Array<string> | undefined;
};

/** @internal */
export const ObjArrParam$outboundSchema: z.ZodType<
    ObjArrParam$Outbound,
    z.ZodTypeDef,
    ObjArrParam
> = z.object({
    arr: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ObjArrParam$ {
    /** @deprecated use `ObjArrParam$inboundSchema` instead. */
    export const inboundSchema = ObjArrParam$inboundSchema;
    /** @deprecated use `ObjArrParam$outboundSchema` instead. */
    export const outboundSchema = ObjArrParam$outboundSchema;
    /** @deprecated use `ObjArrParam$Outbound` instead. */
    export type Outbound = ObjArrParam$Outbound;
}

/** @internal */
export const DeepObjectQueryParamsObjectRequest$inboundSchema: z.ZodType<
    DeepObjectQueryParamsObjectRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    objArrParam: z.lazy(() => ObjArrParam$inboundSchema).optional(),
    objParam: shared.SimpleObject$inboundSchema,
});

/** @internal */
export type DeepObjectQueryParamsObjectRequest$Outbound = {
    objArrParam?: ObjArrParam$Outbound | undefined;
    objParam: shared.SimpleObject$Outbound;
};

/** @internal */
export const DeepObjectQueryParamsObjectRequest$outboundSchema: z.ZodType<
    DeepObjectQueryParamsObjectRequest$Outbound,
    z.ZodTypeDef,
    DeepObjectQueryParamsObjectRequest
> = z.object({
    objArrParam: z.lazy(() => ObjArrParam$outboundSchema).optional(),
    objParam: shared.SimpleObject$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeepObjectQueryParamsObjectRequest$ {
    /** @deprecated use `DeepObjectQueryParamsObjectRequest$inboundSchema` instead. */
    export const inboundSchema = DeepObjectQueryParamsObjectRequest$inboundSchema;
    /** @deprecated use `DeepObjectQueryParamsObjectRequest$outboundSchema` instead. */
    export const outboundSchema = DeepObjectQueryParamsObjectRequest$outboundSchema;
    /** @deprecated use `DeepObjectQueryParamsObjectRequest$Outbound` instead. */
    export type Outbound = DeepObjectQueryParamsObjectRequest$Outbound;
}

/** @internal */
export const DeepObjectQueryParamsObjectArgs$inboundSchema: z.ZodType<
    DeepObjectQueryParamsObjectArgs,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "objArrParam[arr]": z.array(z.string()),
        "objParam[any]": z.string(),
        "objParam[bigintStr]": z.string().optional(),
        "objParam[bigint]": z.string().optional(),
        "objParam[boolOpt]": z.string(),
        "objParam[bool]": z.string(),
        "objParam[dateTime]": z.string(),
        "objParam[date]": z.string(),
        "objParam[decimalStr]": z.string().optional(),
        "objParam[decimal]": z.string().optional(),
        "objParam[enum]": z.string(),
        "objParam[float32]": z.string(),
        "objParam[float64Str]": z.string().optional(),
        "objParam[int32Enum]": z.string(),
        "objParam[int32]": z.string(),
        "objParam[int64Str]": z.string().optional(),
        "objParam[intEnum]": z.string(),
        "objParam[int]": z.string(),
        "objParam[num]": z.string(),
        "objParam[strOpt]": z.string(),
        "objParam[str]": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "objArrParam[arr]": "objArrParamArr",
            "objParam[any]": "objParamAny",
            "objParam[bigintStr]": "objParamBigintStr",
            "objParam[bigint]": "objParamBigint",
            "objParam[boolOpt]": "objParamBoolOpt",
            "objParam[bool]": "objParamBool",
            "objParam[dateTime]": "objParamDateTime",
            "objParam[date]": "objParamDate",
            "objParam[decimalStr]": "objParamDecimalStr",
            "objParam[decimal]": "objParamDecimal",
            "objParam[enum]": "objParamEnum",
            "objParam[float32]": "objParamFloat32",
            "objParam[float64Str]": "objParamFloat64Str",
            "objParam[int32Enum]": "objParamInt32Enum",
            "objParam[int32]": "objParamInt32",
            "objParam[int64Str]": "objParamInt64Str",
            "objParam[intEnum]": "objParamIntEnum",
            "objParam[int]": "objParamInt",
            "objParam[num]": "objParamNum",
            "objParam[strOpt]": "objParamStrOpt",
            "objParam[str]": "objParamStr",
        });
    });

/** @internal */
export type DeepObjectQueryParamsObjectArgs$Outbound = {
    "objArrParam[arr]": Array<string>;
    "objParam[any]": string;
    "objParam[bigintStr]"?: string | undefined;
    "objParam[bigint]"?: string | undefined;
    "objParam[boolOpt]": string;
    "objParam[bool]": string;
    "objParam[dateTime]": string;
    "objParam[date]": string;
    "objParam[decimalStr]"?: string | undefined;
    "objParam[decimal]"?: string | undefined;
    "objParam[enum]": string;
    "objParam[float32]": string;
    "objParam[float64Str]"?: string | undefined;
    "objParam[int32Enum]": string;
    "objParam[int32]": string;
    "objParam[int64Str]"?: string | undefined;
    "objParam[intEnum]": string;
    "objParam[int]": string;
    "objParam[num]": string;
    "objParam[strOpt]": string;
    "objParam[str]": string;
};

/** @internal */
export const DeepObjectQueryParamsObjectArgs$outboundSchema: z.ZodType<
    DeepObjectQueryParamsObjectArgs$Outbound,
    z.ZodTypeDef,
    DeepObjectQueryParamsObjectArgs
> = z
    .object({
        objArrParamArr: z.array(z.string()),
        objParamAny: z.string(),
        objParamBigintStr: z.string().optional(),
        objParamBigint: z.string().optional(),
        objParamBoolOpt: z.string(),
        objParamBool: z.string(),
        objParamDateTime: z.string(),
        objParamDate: z.string(),
        objParamDecimalStr: z.string().optional(),
        objParamDecimal: z.string().optional(),
        objParamEnum: z.string(),
        objParamFloat32: z.string(),
        objParamFloat64Str: z.string().optional(),
        objParamInt32Enum: z.string(),
        objParamInt32: z.string(),
        objParamInt64Str: z.string().optional(),
        objParamIntEnum: z.string(),
        objParamInt: z.string(),
        objParamNum: z.string(),
        objParamStrOpt: z.string(),
        objParamStr: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            objArrParamArr: "objArrParam[arr]",
            objParamAny: "objParam[any]",
            objParamBigintStr: "objParam[bigintStr]",
            objParamBigint: "objParam[bigint]",
            objParamBoolOpt: "objParam[boolOpt]",
            objParamBool: "objParam[bool]",
            objParamDateTime: "objParam[dateTime]",
            objParamDate: "objParam[date]",
            objParamDecimalStr: "objParam[decimalStr]",
            objParamDecimal: "objParam[decimal]",
            objParamEnum: "objParam[enum]",
            objParamFloat32: "objParam[float32]",
            objParamFloat64Str: "objParam[float64Str]",
            objParamInt32Enum: "objParam[int32Enum]",
            objParamInt32: "objParam[int32]",
            objParamInt64Str: "objParam[int64Str]",
            objParamIntEnum: "objParam[intEnum]",
            objParamInt: "objParam[int]",
            objParamNum: "objParam[num]",
            objParamStrOpt: "objParam[strOpt]",
            objParamStr: "objParam[str]",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeepObjectQueryParamsObjectArgs$ {
    /** @deprecated use `DeepObjectQueryParamsObjectArgs$inboundSchema` instead. */
    export const inboundSchema = DeepObjectQueryParamsObjectArgs$inboundSchema;
    /** @deprecated use `DeepObjectQueryParamsObjectArgs$outboundSchema` instead. */
    export const outboundSchema = DeepObjectQueryParamsObjectArgs$outboundSchema;
    /** @deprecated use `DeepObjectQueryParamsObjectArgs$Outbound` instead. */
    export type Outbound = DeepObjectQueryParamsObjectArgs$Outbound;
}

/** @internal */
export const DeepObjectQueryParamsObjectRes$inboundSchema: z.ZodType<
    DeepObjectQueryParamsObjectRes,
    z.ZodTypeDef,
    unknown
> = z.object({
    args: z.lazy(() => DeepObjectQueryParamsObjectArgs$inboundSchema),
    url: z.string(),
});

/** @internal */
export type DeepObjectQueryParamsObjectRes$Outbound = {
    args: DeepObjectQueryParamsObjectArgs$Outbound;
    url: string;
};

/** @internal */
export const DeepObjectQueryParamsObjectRes$outboundSchema: z.ZodType<
    DeepObjectQueryParamsObjectRes$Outbound,
    z.ZodTypeDef,
    DeepObjectQueryParamsObjectRes
> = z.object({
    args: z.lazy(() => DeepObjectQueryParamsObjectArgs$outboundSchema),
    url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeepObjectQueryParamsObjectRes$ {
    /** @deprecated use `DeepObjectQueryParamsObjectRes$inboundSchema` instead. */
    export const inboundSchema = DeepObjectQueryParamsObjectRes$inboundSchema;
    /** @deprecated use `DeepObjectQueryParamsObjectRes$outboundSchema` instead. */
    export const outboundSchema = DeepObjectQueryParamsObjectRes$outboundSchema;
    /** @deprecated use `DeepObjectQueryParamsObjectRes$Outbound` instead. */
    export type Outbound = DeepObjectQueryParamsObjectRes$Outbound;
}
