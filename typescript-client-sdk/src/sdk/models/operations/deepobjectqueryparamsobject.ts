/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type ObjArrParam = {
    arr?: Array<string> | undefined;
};

export type DeepObjectQueryParamsObjectRequest = {
    objArrParam?: ObjArrParam | undefined;
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    objParam: shared.SimpleObject;
};

export type DeepObjectQueryParamsObjectArgs = {
    objArrParamArr: Array<string>;
    objParamAny: string;
    objParamBigintStr?: string | undefined;
    objParamBigint?: string | undefined;
    objParamBoolOpt: string;
    objParamBool: string;
    objParamDateTime: string;
    objParamDate: string;
    objParamDecimalStr?: string | undefined;
    objParamDecimal?: string | undefined;
    objParamEnum: string;
    objParamFloat32: string;
    objParamFloat64Str?: string | undefined;
    objParamInt32Enum: string;
    objParamInt32: string;
    objParamInt64Str?: string | undefined;
    objParamIntEnum: string;
    objParamInt: string;
    objParamNum: string;
    objParamStrOpt: string;
    objParamStr: string;
};

/**
 * OK
 */
export type DeepObjectQueryParamsObjectRes = {
    args: DeepObjectQueryParamsObjectArgs;
    url: string;
};

export type DeepObjectQueryParamsObjectResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: DeepObjectQueryParamsObjectRes | undefined;
};

/** @internal */
export namespace ObjArrParam$ {
    export const inboundSchema: z.ZodType<ObjArrParam, z.ZodTypeDef, unknown> = z.object({
        arr: z.array(z.string()).optional(),
    });

    export type Outbound = {
        arr?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ObjArrParam> = z.object({
        arr: z.array(z.string()).optional(),
    });
}

/** @internal */
export namespace DeepObjectQueryParamsObjectRequest$ {
    export const inboundSchema: z.ZodType<
        DeepObjectQueryParamsObjectRequest,
        z.ZodTypeDef,
        unknown
    > = z.object({
        objArrParam: z.lazy(() => ObjArrParam$.inboundSchema).optional(),
        objParam: shared.SimpleObject$.inboundSchema,
    });

    export type Outbound = {
        objArrParam?: ObjArrParam$.Outbound | undefined;
        objParam: shared.SimpleObject$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DeepObjectQueryParamsObjectRequest
    > = z.object({
        objArrParam: z.lazy(() => ObjArrParam$.outboundSchema).optional(),
        objParam: shared.SimpleObject$.outboundSchema,
    });
}

/** @internal */
export namespace DeepObjectQueryParamsObjectArgs$ {
    export const inboundSchema: z.ZodType<DeepObjectQueryParamsObjectArgs, z.ZodTypeDef, unknown> =
        z
            .object({
                "objArrParam[arr]": z.array(z.string()),
                "objParam[any]": z.string(),
                "objParam[bigintStr]": z.string().optional(),
                "objParam[bigint]": z.string().optional(),
                "objParam[boolOpt]": z.string(),
                "objParam[bool]": z.string(),
                "objParam[dateTime]": z.string(),
                "objParam[date]": z.string(),
                "objParam[decimalStr]": z.string().optional(),
                "objParam[decimal]": z.string().optional(),
                "objParam[enum]": z.string(),
                "objParam[float32]": z.string(),
                "objParam[float64Str]": z.string().optional(),
                "objParam[int32Enum]": z.string(),
                "objParam[int32]": z.string(),
                "objParam[int64Str]": z.string().optional(),
                "objParam[intEnum]": z.string(),
                "objParam[int]": z.string(),
                "objParam[num]": z.string(),
                "objParam[strOpt]": z.string(),
                "objParam[str]": z.string(),
            })
            .transform((v) => {
                return remap$(v, {
                    "objArrParam[arr]": "objArrParamArr",
                    "objParam[any]": "objParamAny",
                    "objParam[bigintStr]": "objParamBigintStr",
                    "objParam[bigint]": "objParamBigint",
                    "objParam[boolOpt]": "objParamBoolOpt",
                    "objParam[bool]": "objParamBool",
                    "objParam[dateTime]": "objParamDateTime",
                    "objParam[date]": "objParamDate",
                    "objParam[decimalStr]": "objParamDecimalStr",
                    "objParam[decimal]": "objParamDecimal",
                    "objParam[enum]": "objParamEnum",
                    "objParam[float32]": "objParamFloat32",
                    "objParam[float64Str]": "objParamFloat64Str",
                    "objParam[int32Enum]": "objParamInt32Enum",
                    "objParam[int32]": "objParamInt32",
                    "objParam[int64Str]": "objParamInt64Str",
                    "objParam[intEnum]": "objParamIntEnum",
                    "objParam[int]": "objParamInt",
                    "objParam[num]": "objParamNum",
                    "objParam[strOpt]": "objParamStrOpt",
                    "objParam[str]": "objParamStr",
                });
            });

    export type Outbound = {
        "objArrParam[arr]": Array<string>;
        "objParam[any]": string;
        "objParam[bigintStr]"?: string | undefined;
        "objParam[bigint]"?: string | undefined;
        "objParam[boolOpt]": string;
        "objParam[bool]": string;
        "objParam[dateTime]": string;
        "objParam[date]": string;
        "objParam[decimalStr]"?: string | undefined;
        "objParam[decimal]"?: string | undefined;
        "objParam[enum]": string;
        "objParam[float32]": string;
        "objParam[float64Str]"?: string | undefined;
        "objParam[int32Enum]": string;
        "objParam[int32]": string;
        "objParam[int64Str]"?: string | undefined;
        "objParam[intEnum]": string;
        "objParam[int]": string;
        "objParam[num]": string;
        "objParam[strOpt]": string;
        "objParam[str]": string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DeepObjectQueryParamsObjectArgs
    > = z
        .object({
            objArrParamArr: z.array(z.string()),
            objParamAny: z.string(),
            objParamBigintStr: z.string().optional(),
            objParamBigint: z.string().optional(),
            objParamBoolOpt: z.string(),
            objParamBool: z.string(),
            objParamDateTime: z.string(),
            objParamDate: z.string(),
            objParamDecimalStr: z.string().optional(),
            objParamDecimal: z.string().optional(),
            objParamEnum: z.string(),
            objParamFloat32: z.string(),
            objParamFloat64Str: z.string().optional(),
            objParamInt32Enum: z.string(),
            objParamInt32: z.string(),
            objParamInt64Str: z.string().optional(),
            objParamIntEnum: z.string(),
            objParamInt: z.string(),
            objParamNum: z.string(),
            objParamStrOpt: z.string(),
            objParamStr: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                objArrParamArr: "objArrParam[arr]",
                objParamAny: "objParam[any]",
                objParamBigintStr: "objParam[bigintStr]",
                objParamBigint: "objParam[bigint]",
                objParamBoolOpt: "objParam[boolOpt]",
                objParamBool: "objParam[bool]",
                objParamDateTime: "objParam[dateTime]",
                objParamDate: "objParam[date]",
                objParamDecimalStr: "objParam[decimalStr]",
                objParamDecimal: "objParam[decimal]",
                objParamEnum: "objParam[enum]",
                objParamFloat32: "objParam[float32]",
                objParamFloat64Str: "objParam[float64Str]",
                objParamInt32Enum: "objParam[int32Enum]",
                objParamInt32: "objParam[int32]",
                objParamInt64Str: "objParam[int64Str]",
                objParamIntEnum: "objParam[intEnum]",
                objParamInt: "objParam[int]",
                objParamNum: "objParam[num]",
                objParamStrOpt: "objParam[strOpt]",
                objParamStr: "objParam[str]",
            });
        });
}

/** @internal */
export namespace DeepObjectQueryParamsObjectRes$ {
    export const inboundSchema: z.ZodType<DeepObjectQueryParamsObjectRes, z.ZodTypeDef, unknown> =
        z.object({
            args: z.lazy(() => DeepObjectQueryParamsObjectArgs$.inboundSchema),
            url: z.string(),
        });

    export type Outbound = {
        args: DeepObjectQueryParamsObjectArgs$.Outbound;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeepObjectQueryParamsObjectRes> =
        z.object({
            args: z.lazy(() => DeepObjectQueryParamsObjectArgs$.outboundSchema),
            url: z.string(),
        });
}

/** @internal */
export namespace DeepObjectQueryParamsObjectResponse$ {
    export const inboundSchema: z.ZodType<
        DeepObjectQueryParamsObjectResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => DeepObjectQueryParamsObjectRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: DeepObjectQueryParamsObjectRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DeepObjectQueryParamsObjectResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => DeepObjectQueryParamsObjectRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
