/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeprecatedOperationWithMultilineCommentGetRequest = {
  /**
   * This is a string parameter
   *
   * @deprecated field: This parameter is deprecated.
  Its deprecation message has newlines.
  . Use newParameter instead.
   */
  deprecatedParameter?: string | undefined;
  /**
   * This is a string parameter
   */
  newParameter?: string | undefined;
};

/** @internal */
export const DeprecatedOperationWithMultilineCommentGetRequest$inboundSchema:
  z.ZodType<
    DeprecatedOperationWithMultilineCommentGetRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    deprecatedParameter: z.string().optional(),
    newParameter: z.string().optional(),
  });

/** @internal */
export type DeprecatedOperationWithMultilineCommentGetRequest$Outbound = {
  deprecatedParameter?: string | undefined;
  newParameter?: string | undefined;
};

/** @internal */
export const DeprecatedOperationWithMultilineCommentGetRequest$outboundSchema:
  z.ZodType<
    DeprecatedOperationWithMultilineCommentGetRequest$Outbound,
    z.ZodTypeDef,
    DeprecatedOperationWithMultilineCommentGetRequest
  > = z.object({
    deprecatedParameter: z.string().optional(),
    newParameter: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeprecatedOperationWithMultilineCommentGetRequest$ {
  /** @deprecated use `DeprecatedOperationWithMultilineCommentGetRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeprecatedOperationWithMultilineCommentGetRequest$inboundSchema;
  /** @deprecated use `DeprecatedOperationWithMultilineCommentGetRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeprecatedOperationWithMultilineCommentGetRequest$outboundSchema;
  /** @deprecated use `DeprecatedOperationWithMultilineCommentGetRequest$Outbound` instead. */
  export type Outbound =
    DeprecatedOperationWithMultilineCommentGetRequest$Outbound;
}

export function deprecatedOperationWithMultilineCommentGetRequestToJSON(
  deprecatedOperationWithMultilineCommentGetRequest:
    DeprecatedOperationWithMultilineCommentGetRequest,
): string {
  return JSON.stringify(
    DeprecatedOperationWithMultilineCommentGetRequest$outboundSchema.parse(
      deprecatedOperationWithMultilineCommentGetRequest,
    ),
  );
}

export function deprecatedOperationWithMultilineCommentGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DeprecatedOperationWithMultilineCommentGetRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeprecatedOperationWithMultilineCommentGetRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeprecatedOperationWithMultilineCommentGetRequest' from JSON`,
  );
}
