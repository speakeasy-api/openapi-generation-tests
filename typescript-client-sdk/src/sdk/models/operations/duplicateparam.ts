/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as z from "zod";

export type DuplicateParamRequest = {
    duplicateParamRequest: string;
};

/**
 * OK
 */
export type DuplicateParamDuplicateParamResponse = {
    url?: string | undefined;
};

export type DuplicateParamResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    duplicateParamResponse?: DuplicateParamDuplicateParamResponse | undefined;
};

/** @internal */
export namespace DuplicateParamRequest$ {
    export const inboundSchema: z.ZodType<DuplicateParamRequest, z.ZodTypeDef, unknown> = z.object({
        duplicateParamRequest: z.string(),
    });

    export type Outbound = {
        duplicateParamRequest: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DuplicateParamRequest> =
        z.object({
            duplicateParamRequest: z.string(),
        });
}

/** @internal */
export namespace DuplicateParamDuplicateParamResponse$ {
    export const inboundSchema: z.ZodType<
        DuplicateParamDuplicateParamResponse,
        z.ZodTypeDef,
        unknown
    > = z.object({
        url: z.string().optional(),
    });

    export type Outbound = {
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DuplicateParamDuplicateParamResponse
    > = z.object({
        url: z.string().optional(),
    });
}

/** @internal */
export namespace DuplicateParamResponse$ {
    export const inboundSchema: z.ZodType<DuplicateParamResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            duplicateParamResponse: z
                .lazy(() => DuplicateParamDuplicateParamResponse$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        duplicateParamResponse?: DuplicateParamDuplicateParamResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DuplicateParamResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            duplicateParamResponse: z
                .lazy(() => DuplicateParamDuplicateParamResponse$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
