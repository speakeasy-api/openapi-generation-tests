/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type DuplicateParamRequest = {
    duplicateParamRequest: string;
};

/**
 * OK
 */
export type DuplicateParamDuplicateParamResponse = {
    url?: string | undefined;
};

export type DuplicateParamResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    duplicateParamResponse?: DuplicateParamDuplicateParamResponse | undefined;
};

/** @internal */
export namespace DuplicateParamRequest$ {
    export type Inbound = {
        duplicateParamRequest: string;
    };

    export const inboundSchema: z.ZodType<DuplicateParamRequest, z.ZodTypeDef, Inbound> = z
        .object({
            duplicateParamRequest: z.string(),
        })
        .transform((v) => {
            return {
                duplicateParamRequest: v.duplicateParamRequest,
            };
        });

    export type Outbound = {
        duplicateParamRequest: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DuplicateParamRequest> = z
        .object({
            duplicateParamRequest: z.string(),
        })
        .transform((v) => {
            return {
                duplicateParamRequest: v.duplicateParamRequest,
            };
        });
}

/** @internal */
export namespace DuplicateParamDuplicateParamResponse$ {
    export type Inbound = {
        url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        DuplicateParamDuplicateParamResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DuplicateParamDuplicateParamResponse
    > = z
        .object({
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}

/** @internal */
export namespace DuplicateParamResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        duplicateParamResponse?: DuplicateParamDuplicateParamResponse$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<DuplicateParamResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            duplicateParamResponse: z
                .lazy(() => DuplicateParamDuplicateParamResponse$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.duplicateParamResponse === undefined
                    ? null
                    : { duplicateParamResponse: v.duplicateParamResponse }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        duplicateParamResponse?: DuplicateParamDuplicateParamResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DuplicateParamResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            duplicateParamResponse: z
                .lazy(() => DuplicateParamDuplicateParamResponse$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.duplicateParamResponse === undefined
                    ? null
                    : { duplicateParamResponse: v.duplicateParamResponse }),
            };
        });
}
