/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export const ErrorUnionDiscriminatedPostServerList = ["http://localhost:35456"] as const;

export type TaggedError2Message = {
    message: string;
};

export type TaggedError2RequestBody = {
    tag: string;
    taggedError2Message: TaggedError2Message;
};

export type TaggedError1RequestBody = {
    error: string;
    tag: string;
};

export type ErrorUnionDiscriminatedPostRequestBody =
    | TaggedError1RequestBody
    | TaggedError2RequestBody;

/** @internal */
export const TaggedError2Message$inboundSchema: z.ZodType<
    TaggedError2Message,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string(),
});

/** @internal */
export type TaggedError2Message$Outbound = {
    message: string;
};

/** @internal */
export const TaggedError2Message$outboundSchema: z.ZodType<
    TaggedError2Message$Outbound,
    z.ZodTypeDef,
    TaggedError2Message
> = z.object({
    message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaggedError2Message$ {
    /** @deprecated use `TaggedError2Message$inboundSchema` instead. */
    export const inboundSchema = TaggedError2Message$inboundSchema;
    /** @deprecated use `TaggedError2Message$outboundSchema` instead. */
    export const outboundSchema = TaggedError2Message$outboundSchema;
    /** @deprecated use `TaggedError2Message$Outbound` instead. */
    export type Outbound = TaggedError2Message$Outbound;
}

/** @internal */
export const TaggedError2RequestBody$inboundSchema: z.ZodType<
    TaggedError2RequestBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        tag: z.string(),
        error: z.lazy(() => TaggedError2Message$inboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            error: "taggedError2Message",
        });
    });

/** @internal */
export type TaggedError2RequestBody$Outbound = {
    tag: string;
    error: TaggedError2Message$Outbound;
};

/** @internal */
export const TaggedError2RequestBody$outboundSchema: z.ZodType<
    TaggedError2RequestBody$Outbound,
    z.ZodTypeDef,
    TaggedError2RequestBody
> = z
    .object({
        tag: z.string(),
        taggedError2Message: z.lazy(() => TaggedError2Message$outboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            taggedError2Message: "error",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaggedError2RequestBody$ {
    /** @deprecated use `TaggedError2RequestBody$inboundSchema` instead. */
    export const inboundSchema = TaggedError2RequestBody$inboundSchema;
    /** @deprecated use `TaggedError2RequestBody$outboundSchema` instead. */
    export const outboundSchema = TaggedError2RequestBody$outboundSchema;
    /** @deprecated use `TaggedError2RequestBody$Outbound` instead. */
    export type Outbound = TaggedError2RequestBody$Outbound;
}

/** @internal */
export const TaggedError1RequestBody$inboundSchema: z.ZodType<
    TaggedError1RequestBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    error: z.string(),
    tag: z.string(),
});

/** @internal */
export type TaggedError1RequestBody$Outbound = {
    error: string;
    tag: string;
};

/** @internal */
export const TaggedError1RequestBody$outboundSchema: z.ZodType<
    TaggedError1RequestBody$Outbound,
    z.ZodTypeDef,
    TaggedError1RequestBody
> = z.object({
    error: z.string(),
    tag: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaggedError1RequestBody$ {
    /** @deprecated use `TaggedError1RequestBody$inboundSchema` instead. */
    export const inboundSchema = TaggedError1RequestBody$inboundSchema;
    /** @deprecated use `TaggedError1RequestBody$outboundSchema` instead. */
    export const outboundSchema = TaggedError1RequestBody$outboundSchema;
    /** @deprecated use `TaggedError1RequestBody$Outbound` instead. */
    export type Outbound = TaggedError1RequestBody$Outbound;
}

/** @internal */
export const ErrorUnionDiscriminatedPostRequestBody$inboundSchema: z.ZodType<
    ErrorUnionDiscriminatedPostRequestBody,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => TaggedError1RequestBody$inboundSchema),
    z.lazy(() => TaggedError2RequestBody$inboundSchema),
]);

/** @internal */
export type ErrorUnionDiscriminatedPostRequestBody$Outbound =
    | TaggedError1RequestBody$Outbound
    | TaggedError2RequestBody$Outbound;

/** @internal */
export const ErrorUnionDiscriminatedPostRequestBody$outboundSchema: z.ZodType<
    ErrorUnionDiscriminatedPostRequestBody$Outbound,
    z.ZodTypeDef,
    ErrorUnionDiscriminatedPostRequestBody
> = z.union([
    z.lazy(() => TaggedError1RequestBody$outboundSchema),
    z.lazy(() => TaggedError2RequestBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorUnionDiscriminatedPostRequestBody$ {
    /** @deprecated use `ErrorUnionDiscriminatedPostRequestBody$inboundSchema` instead. */
    export const inboundSchema = ErrorUnionDiscriminatedPostRequestBody$inboundSchema;
    /** @deprecated use `ErrorUnionDiscriminatedPostRequestBody$outboundSchema` instead. */
    export const outboundSchema = ErrorUnionDiscriminatedPostRequestBody$outboundSchema;
    /** @deprecated use `ErrorUnionDiscriminatedPostRequestBody$Outbound` instead. */
    export type Outbound = ErrorUnionDiscriminatedPostRequestBody$Outbound;
}
