/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export const ErrorUnionPostServerList = ["http://localhost:35456"] as const;

export type ErrorType2Message = {
    message: string;
};

export type ErrorType2RequestBody = {
    errorType2Message?: ErrorType2Message | undefined;
};

export type ErrorType1RequestBody = {
    error: string;
};

export type ErrorUnionPostRequestBody = ErrorType1RequestBody | ErrorType2RequestBody;

/** @internal */
export const ErrorType2Message$inboundSchema: z.ZodType<ErrorType2Message, z.ZodTypeDef, unknown> =
    z.object({
        message: z.string(),
    });

/** @internal */
export type ErrorType2Message$Outbound = {
    message: string;
};

/** @internal */
export const ErrorType2Message$outboundSchema: z.ZodType<
    ErrorType2Message$Outbound,
    z.ZodTypeDef,
    ErrorType2Message
> = z.object({
    message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorType2Message$ {
    /** @deprecated use `ErrorType2Message$inboundSchema` instead. */
    export const inboundSchema = ErrorType2Message$inboundSchema;
    /** @deprecated use `ErrorType2Message$outboundSchema` instead. */
    export const outboundSchema = ErrorType2Message$outboundSchema;
    /** @deprecated use `ErrorType2Message$Outbound` instead. */
    export type Outbound = ErrorType2Message$Outbound;
}

/** @internal */
export const ErrorType2RequestBody$inboundSchema: z.ZodType<
    ErrorType2RequestBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        error: z.lazy(() => ErrorType2Message$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            error: "errorType2Message",
        });
    });

/** @internal */
export type ErrorType2RequestBody$Outbound = {
    error?: ErrorType2Message$Outbound | undefined;
};

/** @internal */
export const ErrorType2RequestBody$outboundSchema: z.ZodType<
    ErrorType2RequestBody$Outbound,
    z.ZodTypeDef,
    ErrorType2RequestBody
> = z
    .object({
        errorType2Message: z.lazy(() => ErrorType2Message$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            errorType2Message: "error",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorType2RequestBody$ {
    /** @deprecated use `ErrorType2RequestBody$inboundSchema` instead. */
    export const inboundSchema = ErrorType2RequestBody$inboundSchema;
    /** @deprecated use `ErrorType2RequestBody$outboundSchema` instead. */
    export const outboundSchema = ErrorType2RequestBody$outboundSchema;
    /** @deprecated use `ErrorType2RequestBody$Outbound` instead. */
    export type Outbound = ErrorType2RequestBody$Outbound;
}

/** @internal */
export const ErrorType1RequestBody$inboundSchema: z.ZodType<
    ErrorType1RequestBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    error: z.string(),
});

/** @internal */
export type ErrorType1RequestBody$Outbound = {
    error: string;
};

/** @internal */
export const ErrorType1RequestBody$outboundSchema: z.ZodType<
    ErrorType1RequestBody$Outbound,
    z.ZodTypeDef,
    ErrorType1RequestBody
> = z.object({
    error: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorType1RequestBody$ {
    /** @deprecated use `ErrorType1RequestBody$inboundSchema` instead. */
    export const inboundSchema = ErrorType1RequestBody$inboundSchema;
    /** @deprecated use `ErrorType1RequestBody$outboundSchema` instead. */
    export const outboundSchema = ErrorType1RequestBody$outboundSchema;
    /** @deprecated use `ErrorType1RequestBody$Outbound` instead. */
    export type Outbound = ErrorType1RequestBody$Outbound;
}

/** @internal */
export const ErrorUnionPostRequestBody$inboundSchema: z.ZodType<
    ErrorUnionPostRequestBody,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => ErrorType1RequestBody$inboundSchema),
    z.lazy(() => ErrorType2RequestBody$inboundSchema),
]);

/** @internal */
export type ErrorUnionPostRequestBody$Outbound =
    | ErrorType1RequestBody$Outbound
    | ErrorType2RequestBody$Outbound;

/** @internal */
export const ErrorUnionPostRequestBody$outboundSchema: z.ZodType<
    ErrorUnionPostRequestBody$Outbound,
    z.ZodTypeDef,
    ErrorUnionPostRequestBody
> = z.union([
    z.lazy(() => ErrorType1RequestBody$outboundSchema),
    z.lazy(() => ErrorType2RequestBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorUnionPostRequestBody$ {
    /** @deprecated use `ErrorUnionPostRequestBody$inboundSchema` instead. */
    export const inboundSchema = ErrorUnionPostRequestBody$inboundSchema;
    /** @deprecated use `ErrorUnionPostRequestBody$outboundSchema` instead. */
    export const outboundSchema = ErrorUnionPostRequestBody$outboundSchema;
    /** @deprecated use `ErrorUnionPostRequestBody$Outbound` instead. */
    export type Outbound = ErrorUnionPostRequestBody$Outbound;
}
