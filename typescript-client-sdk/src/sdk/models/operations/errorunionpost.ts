/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ErrorUnionPostServerList = [
  "http://localhost:35456",
] as const;

export type ErrorType2Message = {
  message: string;
};

export type ErrorType2RequestBody = {
  errorType2Message?: ErrorType2Message | undefined;
};

export type ErrorType1RequestBody = {
  error: string;
};

export type ErrorUnionPostRequestBody =
  | ErrorType1RequestBody
  | ErrorType2RequestBody;

/** @internal */
export const ErrorType2Message$inboundSchema: z.ZodType<
  ErrorType2Message,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type ErrorType2Message$Outbound = {
  message: string;
};

/** @internal */
export const ErrorType2Message$outboundSchema: z.ZodType<
  ErrorType2Message$Outbound,
  z.ZodTypeDef,
  ErrorType2Message
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorType2Message$ {
  /** @deprecated use `ErrorType2Message$inboundSchema` instead. */
  export const inboundSchema = ErrorType2Message$inboundSchema;
  /** @deprecated use `ErrorType2Message$outboundSchema` instead. */
  export const outboundSchema = ErrorType2Message$outboundSchema;
  /** @deprecated use `ErrorType2Message$Outbound` instead. */
  export type Outbound = ErrorType2Message$Outbound;
}

export function errorType2MessageToJSON(
  errorType2Message: ErrorType2Message,
): string {
  return JSON.stringify(
    ErrorType2Message$outboundSchema.parse(errorType2Message),
  );
}

export function errorType2MessageFromJSON(
  jsonString: string,
): SafeParseResult<ErrorType2Message, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorType2Message$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorType2Message' from JSON`,
  );
}

/** @internal */
export const ErrorType2RequestBody$inboundSchema: z.ZodType<
  ErrorType2RequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => ErrorType2Message$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "error": "errorType2Message",
  });
});

/** @internal */
export type ErrorType2RequestBody$Outbound = {
  error?: ErrorType2Message$Outbound | undefined;
};

/** @internal */
export const ErrorType2RequestBody$outboundSchema: z.ZodType<
  ErrorType2RequestBody$Outbound,
  z.ZodTypeDef,
  ErrorType2RequestBody
> = z.object({
  errorType2Message: z.lazy(() => ErrorType2Message$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    errorType2Message: "error",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorType2RequestBody$ {
  /** @deprecated use `ErrorType2RequestBody$inboundSchema` instead. */
  export const inboundSchema = ErrorType2RequestBody$inboundSchema;
  /** @deprecated use `ErrorType2RequestBody$outboundSchema` instead. */
  export const outboundSchema = ErrorType2RequestBody$outboundSchema;
  /** @deprecated use `ErrorType2RequestBody$Outbound` instead. */
  export type Outbound = ErrorType2RequestBody$Outbound;
}

export function errorType2RequestBodyToJSON(
  errorType2RequestBody: ErrorType2RequestBody,
): string {
  return JSON.stringify(
    ErrorType2RequestBody$outboundSchema.parse(errorType2RequestBody),
  );
}

export function errorType2RequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ErrorType2RequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorType2RequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorType2RequestBody' from JSON`,
  );
}

/** @internal */
export const ErrorType1RequestBody$inboundSchema: z.ZodType<
  ErrorType1RequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
});

/** @internal */
export type ErrorType1RequestBody$Outbound = {
  error: string;
};

/** @internal */
export const ErrorType1RequestBody$outboundSchema: z.ZodType<
  ErrorType1RequestBody$Outbound,
  z.ZodTypeDef,
  ErrorType1RequestBody
> = z.object({
  error: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorType1RequestBody$ {
  /** @deprecated use `ErrorType1RequestBody$inboundSchema` instead. */
  export const inboundSchema = ErrorType1RequestBody$inboundSchema;
  /** @deprecated use `ErrorType1RequestBody$outboundSchema` instead. */
  export const outboundSchema = ErrorType1RequestBody$outboundSchema;
  /** @deprecated use `ErrorType1RequestBody$Outbound` instead. */
  export type Outbound = ErrorType1RequestBody$Outbound;
}

export function errorType1RequestBodyToJSON(
  errorType1RequestBody: ErrorType1RequestBody,
): string {
  return JSON.stringify(
    ErrorType1RequestBody$outboundSchema.parse(errorType1RequestBody),
  );
}

export function errorType1RequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ErrorType1RequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorType1RequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorType1RequestBody' from JSON`,
  );
}

/** @internal */
export const ErrorUnionPostRequestBody$inboundSchema: z.ZodType<
  ErrorUnionPostRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ErrorType1RequestBody$inboundSchema),
  z.lazy(() => ErrorType2RequestBody$inboundSchema),
]);

/** @internal */
export type ErrorUnionPostRequestBody$Outbound =
  | ErrorType1RequestBody$Outbound
  | ErrorType2RequestBody$Outbound;

/** @internal */
export const ErrorUnionPostRequestBody$outboundSchema: z.ZodType<
  ErrorUnionPostRequestBody$Outbound,
  z.ZodTypeDef,
  ErrorUnionPostRequestBody
> = z.union([
  z.lazy(() => ErrorType1RequestBody$outboundSchema),
  z.lazy(() => ErrorType2RequestBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorUnionPostRequestBody$ {
  /** @deprecated use `ErrorUnionPostRequestBody$inboundSchema` instead. */
  export const inboundSchema = ErrorUnionPostRequestBody$inboundSchema;
  /** @deprecated use `ErrorUnionPostRequestBody$outboundSchema` instead. */
  export const outboundSchema = ErrorUnionPostRequestBody$outboundSchema;
  /** @deprecated use `ErrorUnionPostRequestBody$Outbound` instead. */
  export type Outbound = ErrorUnionPostRequestBody$Outbound;
}

export function errorUnionPostRequestBodyToJSON(
  errorUnionPostRequestBody: ErrorUnionPostRequestBody,
): string {
  return JSON.stringify(
    ErrorUnionPostRequestBody$outboundSchema.parse(errorUnionPostRequestBody),
  );
}

export function errorUnionPostRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ErrorUnionPostRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorUnionPostRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorUnionPostRequestBody' from JSON`,
  );
}
