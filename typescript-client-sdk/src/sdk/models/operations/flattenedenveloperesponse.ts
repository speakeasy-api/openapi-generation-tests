/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

/**
 * OK
 */
export type FlattenedEnvelopeResponseResponseBody = {
    message: string;
};

export type FlattenedEnvelopeResponseResponse = {
    headers: { [k: string]: Array<string> };
    result: FlattenedEnvelopeResponseResponseBody;
};

/** @internal */
export namespace FlattenedEnvelopeResponseResponseBody$ {
    export const inboundSchema: z.ZodType<
        FlattenedEnvelopeResponseResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        message: z.string(),
    });

    export type Outbound = {
        message: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FlattenedEnvelopeResponseResponseBody
    > = z.object({
        message: z.string(),
    });
}

/** @internal */
export namespace FlattenedEnvelopeResponseResponse$ {
    export const inboundSchema: z.ZodType<
        FlattenedEnvelopeResponseResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            Headers: z.record(z.array(z.string())),
            Result: z.lazy(() => FlattenedEnvelopeResponseResponseBody$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                Headers: "headers",
                Result: "result",
            });
        });

    export type Outbound = {
        Headers: { [k: string]: Array<string> };
        Result: FlattenedEnvelopeResponseResponseBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FlattenedEnvelopeResponseResponse
    > = z
        .object({
            headers: z.record(z.array(z.string())),
            result: z.lazy(() => FlattenedEnvelopeResponseResponseBody$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                headers: "Headers",
                result: "Result",
            });
        });
}
