/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * OK
 */
export type FlattenedEnvelopeResponseResponseBody = {
  message: string;
};

export type FlattenedEnvelopeResponseResponse = {
  headers: { [k: string]: Array<string> };
  result: FlattenedEnvelopeResponseResponseBody;
};

/** @internal */
export const FlattenedEnvelopeResponseResponseBody$inboundSchema: z.ZodType<
  FlattenedEnvelopeResponseResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type FlattenedEnvelopeResponseResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const FlattenedEnvelopeResponseResponseBody$outboundSchema: z.ZodType<
  FlattenedEnvelopeResponseResponseBody$Outbound,
  z.ZodTypeDef,
  FlattenedEnvelopeResponseResponseBody
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlattenedEnvelopeResponseResponseBody$ {
  /** @deprecated use `FlattenedEnvelopeResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    FlattenedEnvelopeResponseResponseBody$inboundSchema;
  /** @deprecated use `FlattenedEnvelopeResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    FlattenedEnvelopeResponseResponseBody$outboundSchema;
  /** @deprecated use `FlattenedEnvelopeResponseResponseBody$Outbound` instead. */
  export type Outbound = FlattenedEnvelopeResponseResponseBody$Outbound;
}

export function flattenedEnvelopeResponseResponseBodyToJSON(
  flattenedEnvelopeResponseResponseBody: FlattenedEnvelopeResponseResponseBody,
): string {
  return JSON.stringify(
    FlattenedEnvelopeResponseResponseBody$outboundSchema.parse(
      flattenedEnvelopeResponseResponseBody,
    ),
  );
}

export function flattenedEnvelopeResponseResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<FlattenedEnvelopeResponseResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FlattenedEnvelopeResponseResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlattenedEnvelopeResponseResponseBody' from JSON`,
  );
}

/** @internal */
export const FlattenedEnvelopeResponseResponse$inboundSchema: z.ZodType<
  FlattenedEnvelopeResponseResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => FlattenedEnvelopeResponseResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type FlattenedEnvelopeResponseResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: FlattenedEnvelopeResponseResponseBody$Outbound;
};

/** @internal */
export const FlattenedEnvelopeResponseResponse$outboundSchema: z.ZodType<
  FlattenedEnvelopeResponseResponse$Outbound,
  z.ZodTypeDef,
  FlattenedEnvelopeResponseResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => FlattenedEnvelopeResponseResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlattenedEnvelopeResponseResponse$ {
  /** @deprecated use `FlattenedEnvelopeResponseResponse$inboundSchema` instead. */
  export const inboundSchema = FlattenedEnvelopeResponseResponse$inboundSchema;
  /** @deprecated use `FlattenedEnvelopeResponseResponse$outboundSchema` instead. */
  export const outboundSchema =
    FlattenedEnvelopeResponseResponse$outboundSchema;
  /** @deprecated use `FlattenedEnvelopeResponseResponse$Outbound` instead. */
  export type Outbound = FlattenedEnvelopeResponseResponse$Outbound;
}

export function flattenedEnvelopeResponseResponseToJSON(
  flattenedEnvelopeResponseResponse: FlattenedEnvelopeResponseResponse,
): string {
  return JSON.stringify(
    FlattenedEnvelopeResponseResponse$outboundSchema.parse(
      flattenedEnvelopeResponseResponse,
    ),
  );
}

export function flattenedEnvelopeResponseResponseFromJSON(
  jsonString: string,
): SafeParseResult<FlattenedEnvelopeResponseResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FlattenedEnvelopeResponseResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlattenedEnvelopeResponseResponse' from JSON`,
  );
}
