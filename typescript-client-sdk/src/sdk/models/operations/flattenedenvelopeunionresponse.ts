/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Created
 */
export type FlattenedEnvelopeUnionResponseResponseBodiesResponseBody = {
    message: string;
};

/**
 * OK
 */
export type FlattenedEnvelopeUnionResponseResponseBody = {
    message: string;
};

export type FlattenedEnvelopeUnionResponseResponse = {
    /**
     * OK
     */
    twoHundredApplicationJsonObject?: FlattenedEnvelopeUnionResponseResponseBody | undefined;
    /**
     * Created
     */
    twoHundredAndOneApplicationJsonObject?:
        | FlattenedEnvelopeUnionResponseResponseBodiesResponseBody
        | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    headers: { [k: string]: Array<string> };
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace FlattenedEnvelopeUnionResponseResponseBodiesResponseBody$ {
    export const inboundSchema: z.ZodType<
        FlattenedEnvelopeUnionResponseResponseBodiesResponseBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            message: z.string(),
        })
        .transform((v) => {
            return {
                message: v.message,
            };
        });

    export type Outbound = {
        message: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FlattenedEnvelopeUnionResponseResponseBodiesResponseBody
    > = z
        .object({
            message: z.string(),
        })
        .transform((v) => {
            return {
                message: v.message,
            };
        });
}

/** @internal */
export namespace FlattenedEnvelopeUnionResponseResponseBody$ {
    export const inboundSchema: z.ZodType<
        FlattenedEnvelopeUnionResponseResponseBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            message: z.string(),
        })
        .transform((v) => {
            return {
                message: v.message,
            };
        });

    export type Outbound = {
        message: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FlattenedEnvelopeUnionResponseResponseBody
    > = z
        .object({
            message: z.string(),
        })
        .transform((v) => {
            return {
                message: v.message,
            };
        });
}

/** @internal */
export namespace FlattenedEnvelopeUnionResponseResponse$ {
    export const inboundSchema: z.ZodType<
        FlattenedEnvelopeUnionResponseResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            "200_application/json_object": z
                .lazy(() => FlattenedEnvelopeUnionResponseResponseBody$.inboundSchema)
                .optional(),
            "201_application/json_object": z
                .lazy(() => FlattenedEnvelopeUnionResponseResponseBodiesResponseBody$.inboundSchema)
                .optional(),
            ContentType: z.string(),
            Headers: z.record(z.array(z.string())),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                ...(v["200_application/json_object"] === undefined
                    ? null
                    : { twoHundredApplicationJsonObject: v["200_application/json_object"] }),
                ...(v["201_application/json_object"] === undefined
                    ? null
                    : { twoHundredAndOneApplicationJsonObject: v["201_application/json_object"] }),
                contentType: v.ContentType,
                headers: v.Headers,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        "200_application/json_object"?:
            | FlattenedEnvelopeUnionResponseResponseBody$.Outbound
            | undefined;
        "201_application/json_object"?:
            | FlattenedEnvelopeUnionResponseResponseBodiesResponseBody$.Outbound
            | undefined;
        ContentType: string;
        Headers: { [k: string]: Array<string> };
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FlattenedEnvelopeUnionResponseResponse
    > = z
        .object({
            twoHundredApplicationJsonObject: z
                .lazy(() => FlattenedEnvelopeUnionResponseResponseBody$.outboundSchema)
                .optional(),
            twoHundredAndOneApplicationJsonObject: z
                .lazy(
                    () => FlattenedEnvelopeUnionResponseResponseBodiesResponseBody$.outboundSchema
                )
                .optional(),
            contentType: z.string(),
            headers: z.record(z.array(z.string())),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ...(v.twoHundredApplicationJsonObject === undefined
                    ? null
                    : { "200_application/json_object": v.twoHundredApplicationJsonObject }),
                ...(v.twoHundredAndOneApplicationJsonObject === undefined
                    ? null
                    : { "201_application/json_object": v.twoHundredAndOneApplicationJsonObject }),
                ContentType: v.contentType,
                Headers: v.headers,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
