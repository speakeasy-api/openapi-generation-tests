/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

/**
 * Created
 */
export type FlattenedEnvelopeUnionResponseResponseBodiesResponseBody = {
  message: string;
};

/**
 * OK
 */
export type FlattenedEnvelopeUnionResponseResponseBody = {
  message: string;
};

export type FlattenedEnvelopeUnionResponseResponseResult =
  | FlattenedEnvelopeUnionResponseResponseBody
  | FlattenedEnvelopeUnionResponseResponseBodiesResponseBody;

export type FlattenedEnvelopeUnionResponseResponse = {
  headers: { [k: string]: Array<string> };
  result:
    | FlattenedEnvelopeUnionResponseResponseBody
    | FlattenedEnvelopeUnionResponseResponseBodiesResponseBody;
};

/** @internal */
export const FlattenedEnvelopeUnionResponseResponseBodiesResponseBody$inboundSchema:
  z.ZodType<
    FlattenedEnvelopeUnionResponseResponseBodiesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type FlattenedEnvelopeUnionResponseResponseBodiesResponseBody$Outbound =
  {
    message: string;
  };

/** @internal */
export const FlattenedEnvelopeUnionResponseResponseBodiesResponseBody$outboundSchema:
  z.ZodType<
    FlattenedEnvelopeUnionResponseResponseBodiesResponseBody$Outbound,
    z.ZodTypeDef,
    FlattenedEnvelopeUnionResponseResponseBodiesResponseBody
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlattenedEnvelopeUnionResponseResponseBodiesResponseBody$ {
  /** @deprecated use `FlattenedEnvelopeUnionResponseResponseBodiesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    FlattenedEnvelopeUnionResponseResponseBodiesResponseBody$inboundSchema;
  /** @deprecated use `FlattenedEnvelopeUnionResponseResponseBodiesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    FlattenedEnvelopeUnionResponseResponseBodiesResponseBody$outboundSchema;
  /** @deprecated use `FlattenedEnvelopeUnionResponseResponseBodiesResponseBody$Outbound` instead. */
  export type Outbound =
    FlattenedEnvelopeUnionResponseResponseBodiesResponseBody$Outbound;
}

/** @internal */
export const FlattenedEnvelopeUnionResponseResponseBody$inboundSchema:
  z.ZodType<FlattenedEnvelopeUnionResponseResponseBody, z.ZodTypeDef, unknown> =
    z.object({
      message: z.string(),
    });

/** @internal */
export type FlattenedEnvelopeUnionResponseResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const FlattenedEnvelopeUnionResponseResponseBody$outboundSchema:
  z.ZodType<
    FlattenedEnvelopeUnionResponseResponseBody$Outbound,
    z.ZodTypeDef,
    FlattenedEnvelopeUnionResponseResponseBody
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlattenedEnvelopeUnionResponseResponseBody$ {
  /** @deprecated use `FlattenedEnvelopeUnionResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    FlattenedEnvelopeUnionResponseResponseBody$inboundSchema;
  /** @deprecated use `FlattenedEnvelopeUnionResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    FlattenedEnvelopeUnionResponseResponseBody$outboundSchema;
  /** @deprecated use `FlattenedEnvelopeUnionResponseResponseBody$Outbound` instead. */
  export type Outbound = FlattenedEnvelopeUnionResponseResponseBody$Outbound;
}

/** @internal */
export const FlattenedEnvelopeUnionResponseResponseResult$inboundSchema:
  z.ZodType<
    FlattenedEnvelopeUnionResponseResponseResult,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => FlattenedEnvelopeUnionResponseResponseBody$inboundSchema),
    z.lazy(() =>
      FlattenedEnvelopeUnionResponseResponseBodiesResponseBody$inboundSchema
    ),
  ]);

/** @internal */
export type FlattenedEnvelopeUnionResponseResponseResult$Outbound =
  | FlattenedEnvelopeUnionResponseResponseBody$Outbound
  | FlattenedEnvelopeUnionResponseResponseBodiesResponseBody$Outbound;

/** @internal */
export const FlattenedEnvelopeUnionResponseResponseResult$outboundSchema:
  z.ZodType<
    FlattenedEnvelopeUnionResponseResponseResult$Outbound,
    z.ZodTypeDef,
    FlattenedEnvelopeUnionResponseResponseResult
  > = z.union([
    z.lazy(() => FlattenedEnvelopeUnionResponseResponseBody$outboundSchema),
    z.lazy(() =>
      FlattenedEnvelopeUnionResponseResponseBodiesResponseBody$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlattenedEnvelopeUnionResponseResponseResult$ {
  /** @deprecated use `FlattenedEnvelopeUnionResponseResponseResult$inboundSchema` instead. */
  export const inboundSchema =
    FlattenedEnvelopeUnionResponseResponseResult$inboundSchema;
  /** @deprecated use `FlattenedEnvelopeUnionResponseResponseResult$outboundSchema` instead. */
  export const outboundSchema =
    FlattenedEnvelopeUnionResponseResponseResult$outboundSchema;
  /** @deprecated use `FlattenedEnvelopeUnionResponseResponseResult$Outbound` instead. */
  export type Outbound = FlattenedEnvelopeUnionResponseResponseResult$Outbound;
}

/** @internal */
export const FlattenedEnvelopeUnionResponseResponse$inboundSchema: z.ZodType<
  FlattenedEnvelopeUnionResponseResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.union([
    z.lazy(() => FlattenedEnvelopeUnionResponseResponseBody$inboundSchema),
    z.lazy(() =>
      FlattenedEnvelopeUnionResponseResponseBodiesResponseBody$inboundSchema
    ),
  ]),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type FlattenedEnvelopeUnionResponseResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result:
    | FlattenedEnvelopeUnionResponseResponseBody$Outbound
    | FlattenedEnvelopeUnionResponseResponseBodiesResponseBody$Outbound;
};

/** @internal */
export const FlattenedEnvelopeUnionResponseResponse$outboundSchema: z.ZodType<
  FlattenedEnvelopeUnionResponseResponse$Outbound,
  z.ZodTypeDef,
  FlattenedEnvelopeUnionResponseResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.union([
    z.lazy(() => FlattenedEnvelopeUnionResponseResponseBody$outboundSchema),
    z.lazy(() =>
      FlattenedEnvelopeUnionResponseResponseBodiesResponseBody$outboundSchema
    ),
  ]),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlattenedEnvelopeUnionResponseResponse$ {
  /** @deprecated use `FlattenedEnvelopeUnionResponseResponse$inboundSchema` instead. */
  export const inboundSchema =
    FlattenedEnvelopeUnionResponseResponse$inboundSchema;
  /** @deprecated use `FlattenedEnvelopeUnionResponseResponse$outboundSchema` instead. */
  export const outboundSchema =
    FlattenedEnvelopeUnionResponseResponse$outboundSchema;
  /** @deprecated use `FlattenedEnvelopeUnionResponseResponse$Outbound` instead. */
  export type Outbound = FlattenedEnvelopeUnionResponseResponse$Outbound;
}
