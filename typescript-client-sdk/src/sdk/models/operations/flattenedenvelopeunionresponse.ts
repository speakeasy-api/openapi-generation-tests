/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

/**
 * Created
 */
export type FlattenedEnvelopeUnionResponseResponseBodiesResponseBody = {
    message: string;
};

/**
 * OK
 */
export type FlattenedEnvelopeUnionResponseResponseBody = {
    message: string;
};

export type FlattenedEnvelopeUnionResponseResponseResult =
    | FlattenedEnvelopeUnionResponseResponseBody
    | FlattenedEnvelopeUnionResponseResponseBodiesResponseBody;

export type FlattenedEnvelopeUnionResponseResponse = {
    headers: { [k: string]: Array<string> };
    result:
        | FlattenedEnvelopeUnionResponseResponseBody
        | FlattenedEnvelopeUnionResponseResponseBodiesResponseBody;
};

/** @internal */
export namespace FlattenedEnvelopeUnionResponseResponseBodiesResponseBody$ {
    export const inboundSchema: z.ZodType<
        FlattenedEnvelopeUnionResponseResponseBodiesResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        message: z.string(),
    });

    export type Outbound = {
        message: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FlattenedEnvelopeUnionResponseResponseBodiesResponseBody
    > = z.object({
        message: z.string(),
    });
}

/** @internal */
export namespace FlattenedEnvelopeUnionResponseResponseBody$ {
    export const inboundSchema: z.ZodType<
        FlattenedEnvelopeUnionResponseResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        message: z.string(),
    });

    export type Outbound = {
        message: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FlattenedEnvelopeUnionResponseResponseBody
    > = z.object({
        message: z.string(),
    });
}

/** @internal */
export namespace FlattenedEnvelopeUnionResponseResponseResult$ {
    export const inboundSchema: z.ZodType<
        FlattenedEnvelopeUnionResponseResponseResult,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.lazy(() => FlattenedEnvelopeUnionResponseResponseBody$.inboundSchema),
        z.lazy(() => FlattenedEnvelopeUnionResponseResponseBodiesResponseBody$.inboundSchema),
    ]);

    export type Outbound =
        | FlattenedEnvelopeUnionResponseResponseBody$.Outbound
        | FlattenedEnvelopeUnionResponseResponseBodiesResponseBody$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FlattenedEnvelopeUnionResponseResponseResult
    > = z.union([
        z.lazy(() => FlattenedEnvelopeUnionResponseResponseBody$.outboundSchema),
        z.lazy(() => FlattenedEnvelopeUnionResponseResponseBodiesResponseBody$.outboundSchema),
    ]);
}

/** @internal */
export namespace FlattenedEnvelopeUnionResponseResponse$ {
    export const inboundSchema: z.ZodType<
        FlattenedEnvelopeUnionResponseResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            Headers: z.record(z.array(z.string())),
            Result: z.union([
                z.lazy(() => FlattenedEnvelopeUnionResponseResponseBody$.inboundSchema),
                z.lazy(
                    () => FlattenedEnvelopeUnionResponseResponseBodiesResponseBody$.inboundSchema
                ),
            ]),
        })
        .transform((v) => {
            return remap$(v, {
                Headers: "headers",
                Result: "result",
            });
        });

    export type Outbound = {
        Headers: { [k: string]: Array<string> };
        Result:
            | FlattenedEnvelopeUnionResponseResponseBody$.Outbound
            | FlattenedEnvelopeUnionResponseResponseBodiesResponseBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FlattenedEnvelopeUnionResponseResponse
    > = z
        .object({
            headers: z.record(z.array(z.string())),
            result: z.union([
                z.lazy(() => FlattenedEnvelopeUnionResponseResponseBody$.outboundSchema),
                z.lazy(
                    () => FlattenedEnvelopeUnionResponseResponseBodiesResponseBody$.outboundSchema
                ),
            ]),
        })
        .transform((v) => {
            return remap$(v, {
                headers: "Headers",
                result: "Result",
            });
        });
}
