/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

/**
 * OK
 */
export type FlattenedTypedObjectPostRes = {
    json: shared.FlattenedTypedObject1;
};

export type FlattenedTypedObjectPostResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: FlattenedTypedObjectPostRes | undefined;
};

/** @internal */
export namespace FlattenedTypedObjectPostRes$ {
    export type Inbound = {
        json: shared.FlattenedTypedObject1$.Inbound;
    };

    export const inboundSchema: z.ZodType<FlattenedTypedObjectPostRes, z.ZodTypeDef, Inbound> = z
        .object({
            json: shared.FlattenedTypedObject1$.inboundSchema,
        })
        .transform((v) => {
            return {
                json: v.json,
            };
        });

    export type Outbound = {
        json: shared.FlattenedTypedObject1$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FlattenedTypedObjectPostRes> = z
        .object({
            json: shared.FlattenedTypedObject1$.outboundSchema,
        })
        .transform((v) => {
            return {
                json: v.json,
            };
        });
}

/** @internal */
export namespace FlattenedTypedObjectPostResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        res?: FlattenedTypedObjectPostRes$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<FlattenedTypedObjectPostResponse, z.ZodTypeDef, Inbound> =
        z
            .object({
                ContentType: z.string(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
                res: z.lazy(() => FlattenedTypedObjectPostRes$.inboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    contentType: v.ContentType,
                    statusCode: v.StatusCode,
                    rawResponse: v.RawResponse,
                    ...(v.res === undefined ? null : { res: v.res }),
                };
            });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: FlattenedTypedObjectPostRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FlattenedTypedObjectPostResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => FlattenedTypedObjectPostRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
