/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Created
 */
export type FlattenedUnionResponseResponseBodiesResponseBody = {
  message: string;
};

/**
 * OK
 */
export type FlattenedUnionResponseResponseBody = {
  message: string;
};

export type FlattenedUnionResponseResponse =
  | FlattenedUnionResponseResponseBody
  | FlattenedUnionResponseResponseBodiesResponseBody;

/** @internal */
export const FlattenedUnionResponseResponseBodiesResponseBody$inboundSchema:
  z.ZodType<
    FlattenedUnionResponseResponseBodiesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type FlattenedUnionResponseResponseBodiesResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const FlattenedUnionResponseResponseBodiesResponseBody$outboundSchema:
  z.ZodType<
    FlattenedUnionResponseResponseBodiesResponseBody$Outbound,
    z.ZodTypeDef,
    FlattenedUnionResponseResponseBodiesResponseBody
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlattenedUnionResponseResponseBodiesResponseBody$ {
  /** @deprecated use `FlattenedUnionResponseResponseBodiesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    FlattenedUnionResponseResponseBodiesResponseBody$inboundSchema;
  /** @deprecated use `FlattenedUnionResponseResponseBodiesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    FlattenedUnionResponseResponseBodiesResponseBody$outboundSchema;
  /** @deprecated use `FlattenedUnionResponseResponseBodiesResponseBody$Outbound` instead. */
  export type Outbound =
    FlattenedUnionResponseResponseBodiesResponseBody$Outbound;
}

export function flattenedUnionResponseResponseBodiesResponseBodyToJSON(
  flattenedUnionResponseResponseBodiesResponseBody:
    FlattenedUnionResponseResponseBodiesResponseBody,
): string {
  return JSON.stringify(
    FlattenedUnionResponseResponseBodiesResponseBody$outboundSchema.parse(
      flattenedUnionResponseResponseBodiesResponseBody,
    ),
  );
}

export function flattenedUnionResponseResponseBodiesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  FlattenedUnionResponseResponseBodiesResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FlattenedUnionResponseResponseBodiesResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FlattenedUnionResponseResponseBodiesResponseBody' from JSON`,
  );
}

/** @internal */
export const FlattenedUnionResponseResponseBody$inboundSchema: z.ZodType<
  FlattenedUnionResponseResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type FlattenedUnionResponseResponseBody$Outbound = {
  message: string;
};

/** @internal */
export const FlattenedUnionResponseResponseBody$outboundSchema: z.ZodType<
  FlattenedUnionResponseResponseBody$Outbound,
  z.ZodTypeDef,
  FlattenedUnionResponseResponseBody
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlattenedUnionResponseResponseBody$ {
  /** @deprecated use `FlattenedUnionResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema = FlattenedUnionResponseResponseBody$inboundSchema;
  /** @deprecated use `FlattenedUnionResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    FlattenedUnionResponseResponseBody$outboundSchema;
  /** @deprecated use `FlattenedUnionResponseResponseBody$Outbound` instead. */
  export type Outbound = FlattenedUnionResponseResponseBody$Outbound;
}

export function flattenedUnionResponseResponseBodyToJSON(
  flattenedUnionResponseResponseBody: FlattenedUnionResponseResponseBody,
): string {
  return JSON.stringify(
    FlattenedUnionResponseResponseBody$outboundSchema.parse(
      flattenedUnionResponseResponseBody,
    ),
  );
}

export function flattenedUnionResponseResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<FlattenedUnionResponseResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FlattenedUnionResponseResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlattenedUnionResponseResponseBody' from JSON`,
  );
}

/** @internal */
export const FlattenedUnionResponseResponse$inboundSchema: z.ZodType<
  FlattenedUnionResponseResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FlattenedUnionResponseResponseBody$inboundSchema),
  z.lazy(() => FlattenedUnionResponseResponseBodiesResponseBody$inboundSchema),
]);

/** @internal */
export type FlattenedUnionResponseResponse$Outbound =
  | FlattenedUnionResponseResponseBody$Outbound
  | FlattenedUnionResponseResponseBodiesResponseBody$Outbound;

/** @internal */
export const FlattenedUnionResponseResponse$outboundSchema: z.ZodType<
  FlattenedUnionResponseResponse$Outbound,
  z.ZodTypeDef,
  FlattenedUnionResponseResponse
> = z.union([
  z.lazy(() => FlattenedUnionResponseResponseBody$outboundSchema),
  z.lazy(() => FlattenedUnionResponseResponseBodiesResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlattenedUnionResponseResponse$ {
  /** @deprecated use `FlattenedUnionResponseResponse$inboundSchema` instead. */
  export const inboundSchema = FlattenedUnionResponseResponse$inboundSchema;
  /** @deprecated use `FlattenedUnionResponseResponse$outboundSchema` instead. */
  export const outboundSchema = FlattenedUnionResponseResponse$outboundSchema;
  /** @deprecated use `FlattenedUnionResponseResponse$Outbound` instead. */
  export type Outbound = FlattenedUnionResponseResponse$Outbound;
}

export function flattenedUnionResponseResponseToJSON(
  flattenedUnionResponseResponse: FlattenedUnionResponseResponse,
): string {
  return JSON.stringify(
    FlattenedUnionResponseResponse$outboundSchema.parse(
      flattenedUnionResponseResponse,
    ),
  );
}

export function flattenedUnionResponseResponseFromJSON(
  jsonString: string,
): SafeParseResult<FlattenedUnionResponseResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FlattenedUnionResponseResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FlattenedUnionResponseResponse' from JSON`,
  );
}
