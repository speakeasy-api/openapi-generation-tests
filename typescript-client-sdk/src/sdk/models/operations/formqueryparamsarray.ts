/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type FormQueryParamsArrayRequest = {
    arrParam?: Array<string> | undefined;
    arrParamExploded?: Array<number> | undefined;
};

export type FormQueryParamsArrayArgs = {
    arrParam: string;
    arrParamExploded: Array<string>;
};

/**
 * OK
 */
export type FormQueryParamsArrayRes = {
    args: FormQueryParamsArrayArgs;
    url: string;
};

export type FormQueryParamsArrayResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: FormQueryParamsArrayRes | undefined;
};

/** @internal */
export namespace FormQueryParamsArrayRequest$ {
    export type Inbound = {
        arrParam?: Array<string> | undefined;
        arrParamExploded?: Array<number> | undefined;
    };

    export const inboundSchema: z.ZodType<FormQueryParamsArrayRequest, z.ZodTypeDef, Inbound> = z
        .object({
            arrParam: z.array(z.string()).optional(),
            arrParamExploded: z.array(z.number().int()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.arrParam === undefined ? null : { arrParam: v.arrParam }),
                ...(v.arrParamExploded === undefined
                    ? null
                    : { arrParamExploded: v.arrParamExploded }),
            };
        });

    export type Outbound = {
        arrParam?: Array<string> | undefined;
        arrParamExploded?: Array<number> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FormQueryParamsArrayRequest> = z
        .object({
            arrParam: z.array(z.string()).optional(),
            arrParamExploded: z.array(z.number().int()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.arrParam === undefined ? null : { arrParam: v.arrParam }),
                ...(v.arrParamExploded === undefined
                    ? null
                    : { arrParamExploded: v.arrParamExploded }),
            };
        });
}

/** @internal */
export namespace FormQueryParamsArrayArgs$ {
    export type Inbound = {
        arrParam: string;
        arrParamExploded: Array<string>;
    };

    export const inboundSchema: z.ZodType<FormQueryParamsArrayArgs, z.ZodTypeDef, Inbound> = z
        .object({
            arrParam: z.string(),
            arrParamExploded: z.array(z.string()),
        })
        .transform((v) => {
            return {
                arrParam: v.arrParam,
                arrParamExploded: v.arrParamExploded,
            };
        });

    export type Outbound = {
        arrParam: string;
        arrParamExploded: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FormQueryParamsArrayArgs> = z
        .object({
            arrParam: z.string(),
            arrParamExploded: z.array(z.string()),
        })
        .transform((v) => {
            return {
                arrParam: v.arrParam,
                arrParamExploded: v.arrParamExploded,
            };
        });
}

/** @internal */
export namespace FormQueryParamsArrayRes$ {
    export type Inbound = {
        args: FormQueryParamsArrayArgs$.Inbound;
        url: string;
    };

    export const inboundSchema: z.ZodType<FormQueryParamsArrayRes, z.ZodTypeDef, Inbound> = z
        .object({
            args: z.lazy(() => FormQueryParamsArrayArgs$.inboundSchema),
            url: z.string(),
        })
        .transform((v) => {
            return {
                args: v.args,
                url: v.url,
            };
        });

    export type Outbound = {
        args: FormQueryParamsArrayArgs$.Outbound;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FormQueryParamsArrayRes> = z
        .object({
            args: z.lazy(() => FormQueryParamsArrayArgs$.outboundSchema),
            url: z.string(),
        })
        .transform((v) => {
            return {
                args: v.args,
                url: v.url,
            };
        });
}

/** @internal */
export namespace FormQueryParamsArrayResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        res?: FormQueryParamsArrayRes$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<FormQueryParamsArrayResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => FormQueryParamsArrayRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: FormQueryParamsArrayRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FormQueryParamsArrayResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => FormQueryParamsArrayRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
