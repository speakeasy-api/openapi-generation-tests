/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import * as z from "zod";

export type FormQueryParamsArrayRequest = {
    arrParam?: Array<string> | undefined;
    arrParamExploded?: Array<number> | undefined;
};

export type FormQueryParamsArrayArgs = {
    arrParam: string;
    arrParamExploded: Array<string>;
};

/**
 * OK
 */
export type FormQueryParamsArrayRes = {
    args: FormQueryParamsArrayArgs;
    url: string;
};

/** @internal */
export const FormQueryParamsArrayRequest$inboundSchema: z.ZodType<
    FormQueryParamsArrayRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    arrParam: z.array(z.string()).optional(),
    arrParamExploded: z.array(z.number().int()).optional(),
});

/** @internal */
export type FormQueryParamsArrayRequest$Outbound = {
    arrParam?: Array<string> | undefined;
    arrParamExploded?: Array<number> | undefined;
};

/** @internal */
export const FormQueryParamsArrayRequest$outboundSchema: z.ZodType<
    FormQueryParamsArrayRequest$Outbound,
    z.ZodTypeDef,
    FormQueryParamsArrayRequest
> = z.object({
    arrParam: z.array(z.string()).optional(),
    arrParamExploded: z.array(z.number().int()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormQueryParamsArrayRequest$ {
    /** @deprecated use `FormQueryParamsArrayRequest$inboundSchema` instead. */
    export const inboundSchema = FormQueryParamsArrayRequest$inboundSchema;
    /** @deprecated use `FormQueryParamsArrayRequest$outboundSchema` instead. */
    export const outboundSchema = FormQueryParamsArrayRequest$outboundSchema;
    /** @deprecated use `FormQueryParamsArrayRequest$Outbound` instead. */
    export type Outbound = FormQueryParamsArrayRequest$Outbound;
}

/** @internal */
export const FormQueryParamsArrayArgs$inboundSchema: z.ZodType<
    FormQueryParamsArrayArgs,
    z.ZodTypeDef,
    unknown
> = z.object({
    arrParam: z.string(),
    arrParamExploded: z.array(z.string()),
});

/** @internal */
export type FormQueryParamsArrayArgs$Outbound = {
    arrParam: string;
    arrParamExploded: Array<string>;
};

/** @internal */
export const FormQueryParamsArrayArgs$outboundSchema: z.ZodType<
    FormQueryParamsArrayArgs$Outbound,
    z.ZodTypeDef,
    FormQueryParamsArrayArgs
> = z.object({
    arrParam: z.string(),
    arrParamExploded: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormQueryParamsArrayArgs$ {
    /** @deprecated use `FormQueryParamsArrayArgs$inboundSchema` instead. */
    export const inboundSchema = FormQueryParamsArrayArgs$inboundSchema;
    /** @deprecated use `FormQueryParamsArrayArgs$outboundSchema` instead. */
    export const outboundSchema = FormQueryParamsArrayArgs$outboundSchema;
    /** @deprecated use `FormQueryParamsArrayArgs$Outbound` instead. */
    export type Outbound = FormQueryParamsArrayArgs$Outbound;
}

/** @internal */
export const FormQueryParamsArrayRes$inboundSchema: z.ZodType<
    FormQueryParamsArrayRes,
    z.ZodTypeDef,
    unknown
> = z.object({
    args: z.lazy(() => FormQueryParamsArrayArgs$inboundSchema),
    url: z.string(),
});

/** @internal */
export type FormQueryParamsArrayRes$Outbound = {
    args: FormQueryParamsArrayArgs$Outbound;
    url: string;
};

/** @internal */
export const FormQueryParamsArrayRes$outboundSchema: z.ZodType<
    FormQueryParamsArrayRes$Outbound,
    z.ZodTypeDef,
    FormQueryParamsArrayRes
> = z.object({
    args: z.lazy(() => FormQueryParamsArrayArgs$outboundSchema),
    url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormQueryParamsArrayRes$ {
    /** @deprecated use `FormQueryParamsArrayRes$inboundSchema` instead. */
    export const inboundSchema = FormQueryParamsArrayRes$inboundSchema;
    /** @deprecated use `FormQueryParamsArrayRes$outboundSchema` instead. */
    export const outboundSchema = FormQueryParamsArrayRes$outboundSchema;
    /** @deprecated use `FormQueryParamsArrayRes$Outbound` instead. */
    export type Outbound = FormQueryParamsArrayRes$Outbound;
}
