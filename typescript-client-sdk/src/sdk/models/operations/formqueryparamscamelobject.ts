/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type ObjParam = {
    encodedCount?: string | undefined;
    encodedTerm?: string | undefined;
};

export type ObjParamExploded = {
    itemCount?: string | undefined;
    searchTerm?: string | undefined;
};

export type FormQueryParamsCamelObjectRequest = {
    objParam?: ObjParam | undefined;
    objParamExploded: ObjParamExploded;
};

export type FormQueryParamsCamelObjectArgs = {
    itemCount: string;
    searchTerm: string;
};

/**
 * OK
 */
export type FormQueryParamsCamelObjectRes = {
    args: FormQueryParamsCamelObjectArgs;
    url: string;
};

/** @internal */
export const ObjParam$inboundSchema: z.ZodType<ObjParam, z.ZodTypeDef, unknown> = z
    .object({
        encoded_count: z.string().optional(),
        encoded_term: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            encoded_count: "encodedCount",
            encoded_term: "encodedTerm",
        });
    });

/** @internal */
export type ObjParam$Outbound = {
    encoded_count?: string | undefined;
    encoded_term?: string | undefined;
};

/** @internal */
export const ObjParam$outboundSchema: z.ZodType<ObjParam$Outbound, z.ZodTypeDef, ObjParam> = z
    .object({
        encodedCount: z.string().optional(),
        encodedTerm: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            encodedCount: "encoded_count",
            encodedTerm: "encoded_term",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ObjParam$ {
    /** @deprecated use `ObjParam$inboundSchema` instead. */
    export const inboundSchema = ObjParam$inboundSchema;
    /** @deprecated use `ObjParam$outboundSchema` instead. */
    export const outboundSchema = ObjParam$outboundSchema;
    /** @deprecated use `ObjParam$Outbound` instead. */
    export type Outbound = ObjParam$Outbound;
}

/** @internal */
export const ObjParamExploded$inboundSchema: z.ZodType<ObjParamExploded, z.ZodTypeDef, unknown> = z
    .object({
        item_count: z.string().optional(),
        search_term: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            item_count: "itemCount",
            search_term: "searchTerm",
        });
    });

/** @internal */
export type ObjParamExploded$Outbound = {
    item_count?: string | undefined;
    search_term?: string | undefined;
};

/** @internal */
export const ObjParamExploded$outboundSchema: z.ZodType<
    ObjParamExploded$Outbound,
    z.ZodTypeDef,
    ObjParamExploded
> = z
    .object({
        itemCount: z.string().optional(),
        searchTerm: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            itemCount: "item_count",
            searchTerm: "search_term",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ObjParamExploded$ {
    /** @deprecated use `ObjParamExploded$inboundSchema` instead. */
    export const inboundSchema = ObjParamExploded$inboundSchema;
    /** @deprecated use `ObjParamExploded$outboundSchema` instead. */
    export const outboundSchema = ObjParamExploded$outboundSchema;
    /** @deprecated use `ObjParamExploded$Outbound` instead. */
    export type Outbound = ObjParamExploded$Outbound;
}

/** @internal */
export const FormQueryParamsCamelObjectRequest$inboundSchema: z.ZodType<
    FormQueryParamsCamelObjectRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        obj_param: z.lazy(() => ObjParam$inboundSchema).optional(),
        obj_param_exploded: z.lazy(() => ObjParamExploded$inboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            obj_param: "objParam",
            obj_param_exploded: "objParamExploded",
        });
    });

/** @internal */
export type FormQueryParamsCamelObjectRequest$Outbound = {
    obj_param?: ObjParam$Outbound | undefined;
    obj_param_exploded: ObjParamExploded$Outbound;
};

/** @internal */
export const FormQueryParamsCamelObjectRequest$outboundSchema: z.ZodType<
    FormQueryParamsCamelObjectRequest$Outbound,
    z.ZodTypeDef,
    FormQueryParamsCamelObjectRequest
> = z
    .object({
        objParam: z.lazy(() => ObjParam$outboundSchema).optional(),
        objParamExploded: z.lazy(() => ObjParamExploded$outboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            objParam: "obj_param",
            objParamExploded: "obj_param_exploded",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormQueryParamsCamelObjectRequest$ {
    /** @deprecated use `FormQueryParamsCamelObjectRequest$inboundSchema` instead. */
    export const inboundSchema = FormQueryParamsCamelObjectRequest$inboundSchema;
    /** @deprecated use `FormQueryParamsCamelObjectRequest$outboundSchema` instead. */
    export const outboundSchema = FormQueryParamsCamelObjectRequest$outboundSchema;
    /** @deprecated use `FormQueryParamsCamelObjectRequest$Outbound` instead. */
    export type Outbound = FormQueryParamsCamelObjectRequest$Outbound;
}

/** @internal */
export const FormQueryParamsCamelObjectArgs$inboundSchema: z.ZodType<
    FormQueryParamsCamelObjectArgs,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        item_count: z.string(),
        search_term: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            item_count: "itemCount",
            search_term: "searchTerm",
        });
    });

/** @internal */
export type FormQueryParamsCamelObjectArgs$Outbound = {
    item_count: string;
    search_term: string;
};

/** @internal */
export const FormQueryParamsCamelObjectArgs$outboundSchema: z.ZodType<
    FormQueryParamsCamelObjectArgs$Outbound,
    z.ZodTypeDef,
    FormQueryParamsCamelObjectArgs
> = z
    .object({
        itemCount: z.string(),
        searchTerm: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            itemCount: "item_count",
            searchTerm: "search_term",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormQueryParamsCamelObjectArgs$ {
    /** @deprecated use `FormQueryParamsCamelObjectArgs$inboundSchema` instead. */
    export const inboundSchema = FormQueryParamsCamelObjectArgs$inboundSchema;
    /** @deprecated use `FormQueryParamsCamelObjectArgs$outboundSchema` instead. */
    export const outboundSchema = FormQueryParamsCamelObjectArgs$outboundSchema;
    /** @deprecated use `FormQueryParamsCamelObjectArgs$Outbound` instead. */
    export type Outbound = FormQueryParamsCamelObjectArgs$Outbound;
}

/** @internal */
export const FormQueryParamsCamelObjectRes$inboundSchema: z.ZodType<
    FormQueryParamsCamelObjectRes,
    z.ZodTypeDef,
    unknown
> = z.object({
    args: z.lazy(() => FormQueryParamsCamelObjectArgs$inboundSchema),
    url: z.string(),
});

/** @internal */
export type FormQueryParamsCamelObjectRes$Outbound = {
    args: FormQueryParamsCamelObjectArgs$Outbound;
    url: string;
};

/** @internal */
export const FormQueryParamsCamelObjectRes$outboundSchema: z.ZodType<
    FormQueryParamsCamelObjectRes$Outbound,
    z.ZodTypeDef,
    FormQueryParamsCamelObjectRes
> = z.object({
    args: z.lazy(() => FormQueryParamsCamelObjectArgs$outboundSchema),
    url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormQueryParamsCamelObjectRes$ {
    /** @deprecated use `FormQueryParamsCamelObjectRes$inboundSchema` instead. */
    export const inboundSchema = FormQueryParamsCamelObjectRes$inboundSchema;
    /** @deprecated use `FormQueryParamsCamelObjectRes$outboundSchema` instead. */
    export const outboundSchema = FormQueryParamsCamelObjectRes$outboundSchema;
    /** @deprecated use `FormQueryParamsCamelObjectRes$Outbound` instead. */
    export type Outbound = FormQueryParamsCamelObjectRes$Outbound;
}
