/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type ObjParam = {
    encodedCount?: string | undefined;
    encodedTerm?: string | undefined;
};

export type ObjParamExploded = {
    itemCount?: string | undefined;
    searchTerm?: string | undefined;
};

export type FormQueryParamsCamelObjectRequest = {
    objParam?: ObjParam | undefined;
    objParamExploded: ObjParamExploded;
};

export type FormQueryParamsCamelObjectArgs = {
    itemCount: string;
    searchTerm: string;
};

/**
 * OK
 */
export type FormQueryParamsCamelObjectRes = {
    args: FormQueryParamsCamelObjectArgs;
    url: string;
};

/** @internal */
export namespace ObjParam$ {
    export const inboundSchema: z.ZodType<ObjParam, z.ZodTypeDef, unknown> = z
        .object({
            encoded_count: z.string().optional(),
            encoded_term: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                encoded_count: "encodedCount",
                encoded_term: "encodedTerm",
            });
        });

    export type Outbound = {
        encoded_count?: string | undefined;
        encoded_term?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ObjParam> = z
        .object({
            encodedCount: z.string().optional(),
            encodedTerm: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                encodedCount: "encoded_count",
                encodedTerm: "encoded_term",
            });
        });
}

/** @internal */
export namespace ObjParamExploded$ {
    export const inboundSchema: z.ZodType<ObjParamExploded, z.ZodTypeDef, unknown> = z
        .object({
            item_count: z.string().optional(),
            search_term: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                item_count: "itemCount",
                search_term: "searchTerm",
            });
        });

    export type Outbound = {
        item_count?: string | undefined;
        search_term?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ObjParamExploded> = z
        .object({
            itemCount: z.string().optional(),
            searchTerm: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                itemCount: "item_count",
                searchTerm: "search_term",
            });
        });
}

/** @internal */
export namespace FormQueryParamsCamelObjectRequest$ {
    export const inboundSchema: z.ZodType<
        FormQueryParamsCamelObjectRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            obj_param: z.lazy(() => ObjParam$.inboundSchema).optional(),
            obj_param_exploded: z.lazy(() => ObjParamExploded$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                obj_param: "objParam",
                obj_param_exploded: "objParamExploded",
            });
        });

    export type Outbound = {
        obj_param?: ObjParam$.Outbound | undefined;
        obj_param_exploded: ObjParamExploded$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FormQueryParamsCamelObjectRequest
    > = z
        .object({
            objParam: z.lazy(() => ObjParam$.outboundSchema).optional(),
            objParamExploded: z.lazy(() => ObjParamExploded$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                objParam: "obj_param",
                objParamExploded: "obj_param_exploded",
            });
        });
}

/** @internal */
export namespace FormQueryParamsCamelObjectArgs$ {
    export const inboundSchema: z.ZodType<FormQueryParamsCamelObjectArgs, z.ZodTypeDef, unknown> = z
        .object({
            item_count: z.string(),
            search_term: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                item_count: "itemCount",
                search_term: "searchTerm",
            });
        });

    export type Outbound = {
        item_count: string;
        search_term: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FormQueryParamsCamelObjectArgs> =
        z
            .object({
                itemCount: z.string(),
                searchTerm: z.string(),
            })
            .transform((v) => {
                return remap$(v, {
                    itemCount: "item_count",
                    searchTerm: "search_term",
                });
            });
}

/** @internal */
export namespace FormQueryParamsCamelObjectRes$ {
    export const inboundSchema: z.ZodType<FormQueryParamsCamelObjectRes, z.ZodTypeDef, unknown> =
        z.object({
            args: z.lazy(() => FormQueryParamsCamelObjectArgs$.inboundSchema),
            url: z.string(),
        });

    export type Outbound = {
        args: FormQueryParamsCamelObjectArgs$.Outbound;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FormQueryParamsCamelObjectRes> =
        z.object({
            args: z.lazy(() => FormQueryParamsCamelObjectArgs$.outboundSchema),
            url: z.string(),
        });
}
