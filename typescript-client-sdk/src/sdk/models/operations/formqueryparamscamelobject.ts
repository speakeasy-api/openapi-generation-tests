/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type ObjParam = {
    encodedCount?: string | undefined;
    encodedTerm?: string | undefined;
};

export type ObjParamExploded = {
    itemCount?: string | undefined;
    searchTerm?: string | undefined;
};

export type FormQueryParamsCamelObjectRequest = {
    objParamExploded: ObjParamExploded;
    objParam?: ObjParam | undefined;
};

export type FormQueryParamsCamelObjectArgs = {
    itemCount: string;
    searchTerm: string;
};

/**
 * OK
 */
export type FormQueryParamsCamelObjectRes = {
    args: FormQueryParamsCamelObjectArgs;
    url: string;
};

export type FormQueryParamsCamelObjectResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: FormQueryParamsCamelObjectRes | undefined;
};

/** @internal */
export namespace ObjParam$ {
    export const inboundSchema: z.ZodType<ObjParam, z.ZodTypeDef, unknown> = z
        .object({
            encoded_count: z.string().optional(),
            encoded_term: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.encoded_count === undefined ? null : { encodedCount: v.encoded_count }),
                ...(v.encoded_term === undefined ? null : { encodedTerm: v.encoded_term }),
            };
        });

    export type Outbound = {
        encoded_count?: string | undefined;
        encoded_term?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ObjParam> = z
        .object({
            encodedCount: z.string().optional(),
            encodedTerm: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.encodedCount === undefined ? null : { encoded_count: v.encodedCount }),
                ...(v.encodedTerm === undefined ? null : { encoded_term: v.encodedTerm }),
            };
        });
}

/** @internal */
export namespace ObjParamExploded$ {
    export const inboundSchema: z.ZodType<ObjParamExploded, z.ZodTypeDef, unknown> = z
        .object({
            item_count: z.string().optional(),
            search_term: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.item_count === undefined ? null : { itemCount: v.item_count }),
                ...(v.search_term === undefined ? null : { searchTerm: v.search_term }),
            };
        });

    export type Outbound = {
        item_count?: string | undefined;
        search_term?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ObjParamExploded> = z
        .object({
            itemCount: z.string().optional(),
            searchTerm: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.itemCount === undefined ? null : { item_count: v.itemCount }),
                ...(v.searchTerm === undefined ? null : { search_term: v.searchTerm }),
            };
        });
}

/** @internal */
export namespace FormQueryParamsCamelObjectRequest$ {
    export const inboundSchema: z.ZodType<
        FormQueryParamsCamelObjectRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            obj_param_exploded: z.lazy(() => ObjParamExploded$.inboundSchema),
            obj_param: z.lazy(() => ObjParam$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                objParamExploded: v.obj_param_exploded,
                ...(v.obj_param === undefined ? null : { objParam: v.obj_param }),
            };
        });

    export type Outbound = {
        obj_param_exploded: ObjParamExploded$.Outbound;
        obj_param?: ObjParam$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FormQueryParamsCamelObjectRequest
    > = z
        .object({
            objParamExploded: z.lazy(() => ObjParamExploded$.outboundSchema),
            objParam: z.lazy(() => ObjParam$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                obj_param_exploded: v.objParamExploded,
                ...(v.objParam === undefined ? null : { obj_param: v.objParam }),
            };
        });
}

/** @internal */
export namespace FormQueryParamsCamelObjectArgs$ {
    export const inboundSchema: z.ZodType<FormQueryParamsCamelObjectArgs, z.ZodTypeDef, unknown> = z
        .object({
            item_count: z.string(),
            search_term: z.string(),
        })
        .transform((v) => {
            return {
                itemCount: v.item_count,
                searchTerm: v.search_term,
            };
        });

    export type Outbound = {
        item_count: string;
        search_term: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FormQueryParamsCamelObjectArgs> =
        z
            .object({
                itemCount: z.string(),
                searchTerm: z.string(),
            })
            .transform((v) => {
                return {
                    item_count: v.itemCount,
                    search_term: v.searchTerm,
                };
            });
}

/** @internal */
export namespace FormQueryParamsCamelObjectRes$ {
    export const inboundSchema: z.ZodType<FormQueryParamsCamelObjectRes, z.ZodTypeDef, unknown> = z
        .object({
            args: z.lazy(() => FormQueryParamsCamelObjectArgs$.inboundSchema),
            url: z.string(),
        })
        .transform((v) => {
            return {
                args: v.args,
                url: v.url,
            };
        });

    export type Outbound = {
        args: FormQueryParamsCamelObjectArgs$.Outbound;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FormQueryParamsCamelObjectRes> =
        z
            .object({
                args: z.lazy(() => FormQueryParamsCamelObjectArgs$.outboundSchema),
                url: z.string(),
            })
            .transform((v) => {
                return {
                    args: v.args,
                    url: v.url,
                };
            });
}

/** @internal */
export namespace FormQueryParamsCamelObjectResponse$ {
    export const inboundSchema: z.ZodType<
        FormQueryParamsCamelObjectResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => FormQueryParamsCamelObjectRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: FormQueryParamsCamelObjectRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FormQueryParamsCamelObjectResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => FormQueryParamsCamelObjectRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
