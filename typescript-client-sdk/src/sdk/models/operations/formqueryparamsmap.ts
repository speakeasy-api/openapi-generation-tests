/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FormQueryParamsMapRequest = {
  mapParam?: { [k: string]: string } | undefined;
  mapParamExploded?: { [k: string]: number } | undefined;
};

/**
 * OK
 */
export type FormQueryParamsMapRes = {
  args: { [k: string]: string };
  url: string;
};

/** @internal */
export const FormQueryParamsMapRequest$inboundSchema: z.ZodType<
  FormQueryParamsMapRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mapParam: z.record(z.string()).optional(),
  mapParamExploded: z.record(z.number().int()).optional(),
});

/** @internal */
export type FormQueryParamsMapRequest$Outbound = {
  mapParam?: { [k: string]: string } | undefined;
  mapParamExploded?: { [k: string]: number } | undefined;
};

/** @internal */
export const FormQueryParamsMapRequest$outboundSchema: z.ZodType<
  FormQueryParamsMapRequest$Outbound,
  z.ZodTypeDef,
  FormQueryParamsMapRequest
> = z.object({
  mapParam: z.record(z.string()).optional(),
  mapParamExploded: z.record(z.number().int()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormQueryParamsMapRequest$ {
  /** @deprecated use `FormQueryParamsMapRequest$inboundSchema` instead. */
  export const inboundSchema = FormQueryParamsMapRequest$inboundSchema;
  /** @deprecated use `FormQueryParamsMapRequest$outboundSchema` instead. */
  export const outboundSchema = FormQueryParamsMapRequest$outboundSchema;
  /** @deprecated use `FormQueryParamsMapRequest$Outbound` instead. */
  export type Outbound = FormQueryParamsMapRequest$Outbound;
}

export function formQueryParamsMapRequestToJSON(
  formQueryParamsMapRequest: FormQueryParamsMapRequest,
): string {
  return JSON.stringify(
    FormQueryParamsMapRequest$outboundSchema.parse(formQueryParamsMapRequest),
  );
}

export function formQueryParamsMapRequestFromJSON(
  jsonString: string,
): SafeParseResult<FormQueryParamsMapRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormQueryParamsMapRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormQueryParamsMapRequest' from JSON`,
  );
}

/** @internal */
export const FormQueryParamsMapRes$inboundSchema: z.ZodType<
  FormQueryParamsMapRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  args: z.record(z.string()),
  url: z.string(),
});

/** @internal */
export type FormQueryParamsMapRes$Outbound = {
  args: { [k: string]: string };
  url: string;
};

/** @internal */
export const FormQueryParamsMapRes$outboundSchema: z.ZodType<
  FormQueryParamsMapRes$Outbound,
  z.ZodTypeDef,
  FormQueryParamsMapRes
> = z.object({
  args: z.record(z.string()),
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormQueryParamsMapRes$ {
  /** @deprecated use `FormQueryParamsMapRes$inboundSchema` instead. */
  export const inboundSchema = FormQueryParamsMapRes$inboundSchema;
  /** @deprecated use `FormQueryParamsMapRes$outboundSchema` instead. */
  export const outboundSchema = FormQueryParamsMapRes$outboundSchema;
  /** @deprecated use `FormQueryParamsMapRes$Outbound` instead. */
  export type Outbound = FormQueryParamsMapRes$Outbound;
}

export function formQueryParamsMapResToJSON(
  formQueryParamsMapRes: FormQueryParamsMapRes,
): string {
  return JSON.stringify(
    FormQueryParamsMapRes$outboundSchema.parse(formQueryParamsMapRes),
  );
}

export function formQueryParamsMapResFromJSON(
  jsonString: string,
): SafeParseResult<FormQueryParamsMapRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormQueryParamsMapRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormQueryParamsMapRes' from JSON`,
  );
}
