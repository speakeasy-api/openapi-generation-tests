/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type FormQueryParamsMapRequest = {
    mapParam?: { [k: string]: string } | undefined;
    mapParamExploded?: { [k: string]: number } | undefined;
};

/**
 * OK
 */
export type FormQueryParamsMapRes = {
    args: { [k: string]: string };
    url: string;
};

/** @internal */
export namespace FormQueryParamsMapRequest$ {
    export const inboundSchema: z.ZodType<FormQueryParamsMapRequest, z.ZodTypeDef, unknown> =
        z.object({
            mapParam: z.record(z.string()).optional(),
            mapParamExploded: z.record(z.number().int()).optional(),
        });

    export type Outbound = {
        mapParam?: { [k: string]: string } | undefined;
        mapParamExploded?: { [k: string]: number } | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FormQueryParamsMapRequest> =
        z.object({
            mapParam: z.record(z.string()).optional(),
            mapParamExploded: z.record(z.number().int()).optional(),
        });
}

/** @internal */
export namespace FormQueryParamsMapRes$ {
    export const inboundSchema: z.ZodType<FormQueryParamsMapRes, z.ZodTypeDef, unknown> = z.object({
        args: z.record(z.string()),
        url: z.string(),
    });

    export type Outbound = {
        args: { [k: string]: string };
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FormQueryParamsMapRes> =
        z.object({
            args: z.record(z.string()),
            url: z.string(),
        });
}
