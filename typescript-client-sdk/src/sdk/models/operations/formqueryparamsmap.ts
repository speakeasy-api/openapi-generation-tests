/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as z from "zod";

export type FormQueryParamsMapRequest = {
    mapParam?: { [k: string]: string } | undefined;
    mapParamExploded?: { [k: string]: number } | undefined;
};

/**
 * OK
 */
export type FormQueryParamsMapRes = {
    args: { [k: string]: string };
    url: string;
};

export type FormQueryParamsMapResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: FormQueryParamsMapRes | undefined;
};

/** @internal */
export namespace FormQueryParamsMapRequest$ {
    export const inboundSchema: z.ZodType<FormQueryParamsMapRequest, z.ZodTypeDef, unknown> =
        z.object({
            mapParam: z.record(z.string()).optional(),
            mapParamExploded: z.record(z.number().int()).optional(),
        });

    export type Outbound = {
        mapParam?: { [k: string]: string } | undefined;
        mapParamExploded?: { [k: string]: number } | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FormQueryParamsMapRequest> =
        z.object({
            mapParam: z.record(z.string()).optional(),
            mapParamExploded: z.record(z.number().int()).optional(),
        });
}

/** @internal */
export namespace FormQueryParamsMapRes$ {
    export const inboundSchema: z.ZodType<FormQueryParamsMapRes, z.ZodTypeDef, unknown> = z.object({
        args: z.record(z.string()),
        url: z.string(),
    });

    export type Outbound = {
        args: { [k: string]: string };
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FormQueryParamsMapRes> =
        z.object({
            args: z.record(z.string()),
            url: z.string(),
        });
}

/** @internal */
export namespace FormQueryParamsMapResponse$ {
    export const inboundSchema: z.ZodType<FormQueryParamsMapResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => FormQueryParamsMapRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: FormQueryParamsMapRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FormQueryParamsMapResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => FormQueryParamsMapRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
