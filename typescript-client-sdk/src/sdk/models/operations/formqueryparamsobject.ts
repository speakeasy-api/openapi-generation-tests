/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared/index.js";
import * as z from "zod";

export type FormQueryParamsObjectRequest = {
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    objParam?: shared.SimpleObject | undefined;
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    objParamExploded: shared.SimpleObject;
};

export type FormQueryParamsObjectArgs = {
    any: string;
    bigint?: string | undefined;
    bigintStr?: string | undefined;
    bool: string;
    boolOpt?: string | undefined;
    date: string;
    dateTime: string;
    decimal?: string | undefined;
    decimalStr?: string | undefined;
    enum: string;
    float32: string;
    float64Str?: string | undefined;
    int: string;
    int32: string;
    int32Enum: string;
    int64Str?: string | undefined;
    intEnum: string;
    intOptNull?: string | undefined;
    num: string;
    numOptNull?: string | undefined;
    objParam: string;
    str: string;
    strOpt?: string | undefined;
};

/**
 * OK
 */
export type FormQueryParamsObjectRes = {
    args: FormQueryParamsObjectArgs;
    url: string;
};

/** @internal */
export namespace FormQueryParamsObjectRequest$ {
    export const inboundSchema: z.ZodType<FormQueryParamsObjectRequest, z.ZodTypeDef, unknown> =
        z.object({
            objParam: shared.SimpleObject$.inboundSchema.optional(),
            objParamExploded: shared.SimpleObject$.inboundSchema,
        });

    export type Outbound = {
        objParam?: shared.SimpleObject$.Outbound | undefined;
        objParamExploded: shared.SimpleObject$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FormQueryParamsObjectRequest> =
        z.object({
            objParam: shared.SimpleObject$.outboundSchema.optional(),
            objParamExploded: shared.SimpleObject$.outboundSchema,
        });
}

/** @internal */
export namespace FormQueryParamsObjectArgs$ {
    export const inboundSchema: z.ZodType<FormQueryParamsObjectArgs, z.ZodTypeDef, unknown> =
        z.object({
            any: z.string(),
            bigint: z.string().optional(),
            bigintStr: z.string().optional(),
            bool: z.string(),
            boolOpt: z.string().optional(),
            date: z.string(),
            dateTime: z.string(),
            decimal: z.string().optional(),
            decimalStr: z.string().optional(),
            enum: z.string(),
            float32: z.string(),
            float64Str: z.string().optional(),
            int: z.string(),
            int32: z.string(),
            int32Enum: z.string(),
            int64Str: z.string().optional(),
            intEnum: z.string(),
            intOptNull: z.string().optional(),
            num: z.string(),
            numOptNull: z.string().optional(),
            objParam: z.string(),
            str: z.string(),
            strOpt: z.string().optional(),
        });

    export type Outbound = {
        any: string;
        bigint?: string | undefined;
        bigintStr?: string | undefined;
        bool: string;
        boolOpt?: string | undefined;
        date: string;
        dateTime: string;
        decimal?: string | undefined;
        decimalStr?: string | undefined;
        enum: string;
        float32: string;
        float64Str?: string | undefined;
        int: string;
        int32: string;
        int32Enum: string;
        int64Str?: string | undefined;
        intEnum: string;
        intOptNull?: string | undefined;
        num: string;
        numOptNull?: string | undefined;
        objParam: string;
        str: string;
        strOpt?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FormQueryParamsObjectArgs> =
        z.object({
            any: z.string(),
            bigint: z.string().optional(),
            bigintStr: z.string().optional(),
            bool: z.string(),
            boolOpt: z.string().optional(),
            date: z.string(),
            dateTime: z.string(),
            decimal: z.string().optional(),
            decimalStr: z.string().optional(),
            enum: z.string(),
            float32: z.string(),
            float64Str: z.string().optional(),
            int: z.string(),
            int32: z.string(),
            int32Enum: z.string(),
            int64Str: z.string().optional(),
            intEnum: z.string(),
            intOptNull: z.string().optional(),
            num: z.string(),
            numOptNull: z.string().optional(),
            objParam: z.string(),
            str: z.string(),
            strOpt: z.string().optional(),
        });
}

/** @internal */
export namespace FormQueryParamsObjectRes$ {
    export const inboundSchema: z.ZodType<FormQueryParamsObjectRes, z.ZodTypeDef, unknown> =
        z.object({
            args: z.lazy(() => FormQueryParamsObjectArgs$.inboundSchema),
            url: z.string(),
        });

    export type Outbound = {
        args: FormQueryParamsObjectArgs$.Outbound;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FormQueryParamsObjectRes> =
        z.object({
            args: z.lazy(() => FormQueryParamsObjectArgs$.outboundSchema),
            url: z.string(),
        });
}
