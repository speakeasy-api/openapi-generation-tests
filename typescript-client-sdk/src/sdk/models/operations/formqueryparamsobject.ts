/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type FormQueryParamsObjectRequest = {
  /**
   * A simple object that uses all our supported primitive types and enums and has optional properties.
   */
  objParam?: shared.SimpleObject | undefined;
  /**
   * A simple object that uses all our supported primitive types and enums and has optional properties.
   */
  objParamExploded: shared.SimpleObject;
};

export type FormQueryParamsObjectArgs = {
  any: string;
  bigint?: string | undefined;
  bigintStr?: string | undefined;
  bool: string;
  boolOpt?: string | undefined;
  date: string;
  dateTime: string;
  decimal?: string | undefined;
  decimalStr?: string | undefined;
  enum: string;
  float32: string;
  float64Str?: string | undefined;
  int: string;
  int32: string;
  int32Enum: string;
  int64Str?: string | undefined;
  intEnum: string;
  intOptNull?: string | undefined;
  num: string;
  numOptNull?: string | undefined;
  objParam: string;
  str: string;
  strOpt?: string | undefined;
};

/**
 * OK
 */
export type FormQueryParamsObjectRes = {
  args: FormQueryParamsObjectArgs;
  url: string;
};

/** @internal */
export const FormQueryParamsObjectRequest$inboundSchema: z.ZodType<
  FormQueryParamsObjectRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  objParam: shared.SimpleObject$inboundSchema.optional(),
  objParamExploded: shared.SimpleObject$inboundSchema,
});

/** @internal */
export type FormQueryParamsObjectRequest$Outbound = {
  objParam?: shared.SimpleObject$Outbound | undefined;
  objParamExploded: shared.SimpleObject$Outbound;
};

/** @internal */
export const FormQueryParamsObjectRequest$outboundSchema: z.ZodType<
  FormQueryParamsObjectRequest$Outbound,
  z.ZodTypeDef,
  FormQueryParamsObjectRequest
> = z.object({
  objParam: shared.SimpleObject$outboundSchema.optional(),
  objParamExploded: shared.SimpleObject$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormQueryParamsObjectRequest$ {
  /** @deprecated use `FormQueryParamsObjectRequest$inboundSchema` instead. */
  export const inboundSchema = FormQueryParamsObjectRequest$inboundSchema;
  /** @deprecated use `FormQueryParamsObjectRequest$outboundSchema` instead. */
  export const outboundSchema = FormQueryParamsObjectRequest$outboundSchema;
  /** @deprecated use `FormQueryParamsObjectRequest$Outbound` instead. */
  export type Outbound = FormQueryParamsObjectRequest$Outbound;
}

export function formQueryParamsObjectRequestToJSON(
  formQueryParamsObjectRequest: FormQueryParamsObjectRequest,
): string {
  return JSON.stringify(
    FormQueryParamsObjectRequest$outboundSchema.parse(
      formQueryParamsObjectRequest,
    ),
  );
}

export function formQueryParamsObjectRequestFromJSON(
  jsonString: string,
): SafeParseResult<FormQueryParamsObjectRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormQueryParamsObjectRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormQueryParamsObjectRequest' from JSON`,
  );
}

/** @internal */
export const FormQueryParamsObjectArgs$inboundSchema: z.ZodType<
  FormQueryParamsObjectArgs,
  z.ZodTypeDef,
  unknown
> = z.object({
  any: z.string(),
  bigint: z.string().optional(),
  bigintStr: z.string().optional(),
  bool: z.string(),
  boolOpt: z.string().optional(),
  date: z.string(),
  dateTime: z.string(),
  decimal: z.string().optional(),
  decimalStr: z.string().optional(),
  enum: z.string(),
  float32: z.string(),
  float64Str: z.string().optional(),
  int: z.string(),
  int32: z.string(),
  int32Enum: z.string(),
  int64Str: z.string().optional(),
  intEnum: z.string(),
  intOptNull: z.string().optional(),
  num: z.string(),
  numOptNull: z.string().optional(),
  objParam: z.string(),
  str: z.string(),
  strOpt: z.string().optional(),
});

/** @internal */
export type FormQueryParamsObjectArgs$Outbound = {
  any: string;
  bigint?: string | undefined;
  bigintStr?: string | undefined;
  bool: string;
  boolOpt?: string | undefined;
  date: string;
  dateTime: string;
  decimal?: string | undefined;
  decimalStr?: string | undefined;
  enum: string;
  float32: string;
  float64Str?: string | undefined;
  int: string;
  int32: string;
  int32Enum: string;
  int64Str?: string | undefined;
  intEnum: string;
  intOptNull?: string | undefined;
  num: string;
  numOptNull?: string | undefined;
  objParam: string;
  str: string;
  strOpt?: string | undefined;
};

/** @internal */
export const FormQueryParamsObjectArgs$outboundSchema: z.ZodType<
  FormQueryParamsObjectArgs$Outbound,
  z.ZodTypeDef,
  FormQueryParamsObjectArgs
> = z.object({
  any: z.string(),
  bigint: z.string().optional(),
  bigintStr: z.string().optional(),
  bool: z.string(),
  boolOpt: z.string().optional(),
  date: z.string(),
  dateTime: z.string(),
  decimal: z.string().optional(),
  decimalStr: z.string().optional(),
  enum: z.string(),
  float32: z.string(),
  float64Str: z.string().optional(),
  int: z.string(),
  int32: z.string(),
  int32Enum: z.string(),
  int64Str: z.string().optional(),
  intEnum: z.string(),
  intOptNull: z.string().optional(),
  num: z.string(),
  numOptNull: z.string().optional(),
  objParam: z.string(),
  str: z.string(),
  strOpt: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormQueryParamsObjectArgs$ {
  /** @deprecated use `FormQueryParamsObjectArgs$inboundSchema` instead. */
  export const inboundSchema = FormQueryParamsObjectArgs$inboundSchema;
  /** @deprecated use `FormQueryParamsObjectArgs$outboundSchema` instead. */
  export const outboundSchema = FormQueryParamsObjectArgs$outboundSchema;
  /** @deprecated use `FormQueryParamsObjectArgs$Outbound` instead. */
  export type Outbound = FormQueryParamsObjectArgs$Outbound;
}

export function formQueryParamsObjectArgsToJSON(
  formQueryParamsObjectArgs: FormQueryParamsObjectArgs,
): string {
  return JSON.stringify(
    FormQueryParamsObjectArgs$outboundSchema.parse(formQueryParamsObjectArgs),
  );
}

export function formQueryParamsObjectArgsFromJSON(
  jsonString: string,
): SafeParseResult<FormQueryParamsObjectArgs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormQueryParamsObjectArgs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormQueryParamsObjectArgs' from JSON`,
  );
}

/** @internal */
export const FormQueryParamsObjectRes$inboundSchema: z.ZodType<
  FormQueryParamsObjectRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  args: z.lazy(() => FormQueryParamsObjectArgs$inboundSchema),
  url: z.string(),
});

/** @internal */
export type FormQueryParamsObjectRes$Outbound = {
  args: FormQueryParamsObjectArgs$Outbound;
  url: string;
};

/** @internal */
export const FormQueryParamsObjectRes$outboundSchema: z.ZodType<
  FormQueryParamsObjectRes$Outbound,
  z.ZodTypeDef,
  FormQueryParamsObjectRes
> = z.object({
  args: z.lazy(() => FormQueryParamsObjectArgs$outboundSchema),
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormQueryParamsObjectRes$ {
  /** @deprecated use `FormQueryParamsObjectRes$inboundSchema` instead. */
  export const inboundSchema = FormQueryParamsObjectRes$inboundSchema;
  /** @deprecated use `FormQueryParamsObjectRes$outboundSchema` instead. */
  export const outboundSchema = FormQueryParamsObjectRes$outboundSchema;
  /** @deprecated use `FormQueryParamsObjectRes$Outbound` instead. */
  export type Outbound = FormQueryParamsObjectRes$Outbound;
}

export function formQueryParamsObjectResToJSON(
  formQueryParamsObjectRes: FormQueryParamsObjectRes,
): string {
  return JSON.stringify(
    FormQueryParamsObjectRes$outboundSchema.parse(formQueryParamsObjectRes),
  );
}

export function formQueryParamsObjectResFromJSON(
  jsonString: string,
): SafeParseResult<FormQueryParamsObjectRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormQueryParamsObjectRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormQueryParamsObjectRes' from JSON`,
  );
}
