/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type FormQueryParamsObjectRequest = {
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    objParamExploded: shared.SimpleObject;
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    objParam?: shared.SimpleObject | undefined;
};

export type FormQueryParamsObjectArgs = {
    any: string;
    bigint?: string | undefined;
    bigintStr?: string | undefined;
    bool: string;
    boolOpt?: string | undefined;
    date: string;
    dateTime: string;
    decimal?: string | undefined;
    decimalStr?: string | undefined;
    enum: string;
    float32: string;
    float64Str?: string | undefined;
    int: string;
    int32: string;
    int32Enum: string;
    int64Str?: string | undefined;
    intEnum: string;
    intOptNull?: string | undefined;
    num: string;
    numOptNull?: string | undefined;
    objParam: string;
    str: string;
    strOpt?: string | undefined;
};

/**
 * OK
 */
export type FormQueryParamsObjectRes = {
    args: FormQueryParamsObjectArgs;
    url: string;
};

export type FormQueryParamsObjectResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: FormQueryParamsObjectRes | undefined;
};

/** @internal */
export namespace FormQueryParamsObjectRequest$ {
    export const inboundSchema: z.ZodType<FormQueryParamsObjectRequest, z.ZodTypeDef, unknown> = z
        .object({
            objParamExploded: shared.SimpleObject$.inboundSchema,
            objParam: shared.SimpleObject$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                objParamExploded: v.objParamExploded,
                ...(v.objParam === undefined ? null : { objParam: v.objParam }),
            };
        });

    export type Outbound = {
        objParamExploded: shared.SimpleObject$.Outbound;
        objParam?: shared.SimpleObject$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FormQueryParamsObjectRequest> = z
        .object({
            objParamExploded: shared.SimpleObject$.outboundSchema,
            objParam: shared.SimpleObject$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                objParamExploded: v.objParamExploded,
                ...(v.objParam === undefined ? null : { objParam: v.objParam }),
            };
        });
}

/** @internal */
export namespace FormQueryParamsObjectArgs$ {
    export const inboundSchema: z.ZodType<FormQueryParamsObjectArgs, z.ZodTypeDef, unknown> = z
        .object({
            any: z.string(),
            bigint: z.string().optional(),
            bigintStr: z.string().optional(),
            bool: z.string(),
            boolOpt: z.string().optional(),
            date: z.string(),
            dateTime: z.string(),
            decimal: z.string().optional(),
            decimalStr: z.string().optional(),
            enum: z.string(),
            float32: z.string(),
            float64Str: z.string().optional(),
            int: z.string(),
            int32: z.string(),
            int32Enum: z.string(),
            int64Str: z.string().optional(),
            intEnum: z.string(),
            intOptNull: z.string().optional(),
            num: z.string(),
            numOptNull: z.string().optional(),
            objParam: z.string(),
            str: z.string(),
            strOpt: z.string().optional(),
        })
        .transform((v) => {
            return {
                any: v.any,
                ...(v.bigint === undefined ? null : { bigint: v.bigint }),
                ...(v.bigintStr === undefined ? null : { bigintStr: v.bigintStr }),
                bool: v.bool,
                ...(v.boolOpt === undefined ? null : { boolOpt: v.boolOpt }),
                date: v.date,
                dateTime: v.dateTime,
                ...(v.decimal === undefined ? null : { decimal: v.decimal }),
                ...(v.decimalStr === undefined ? null : { decimalStr: v.decimalStr }),
                enum: v.enum,
                float32: v.float32,
                ...(v.float64Str === undefined ? null : { float64Str: v.float64Str }),
                int: v.int,
                int32: v.int32,
                int32Enum: v.int32Enum,
                ...(v.int64Str === undefined ? null : { int64Str: v.int64Str }),
                intEnum: v.intEnum,
                ...(v.intOptNull === undefined ? null : { intOptNull: v.intOptNull }),
                num: v.num,
                ...(v.numOptNull === undefined ? null : { numOptNull: v.numOptNull }),
                objParam: v.objParam,
                str: v.str,
                ...(v.strOpt === undefined ? null : { strOpt: v.strOpt }),
            };
        });

    export type Outbound = {
        any: string;
        bigint?: string | undefined;
        bigintStr?: string | undefined;
        bool: string;
        boolOpt?: string | undefined;
        date: string;
        dateTime: string;
        decimal?: string | undefined;
        decimalStr?: string | undefined;
        enum: string;
        float32: string;
        float64Str?: string | undefined;
        int: string;
        int32: string;
        int32Enum: string;
        int64Str?: string | undefined;
        intEnum: string;
        intOptNull?: string | undefined;
        num: string;
        numOptNull?: string | undefined;
        objParam: string;
        str: string;
        strOpt?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FormQueryParamsObjectArgs> = z
        .object({
            any: z.string(),
            bigint: z.string().optional(),
            bigintStr: z.string().optional(),
            bool: z.string(),
            boolOpt: z.string().optional(),
            date: z.string(),
            dateTime: z.string(),
            decimal: z.string().optional(),
            decimalStr: z.string().optional(),
            enum: z.string(),
            float32: z.string(),
            float64Str: z.string().optional(),
            int: z.string(),
            int32: z.string(),
            int32Enum: z.string(),
            int64Str: z.string().optional(),
            intEnum: z.string(),
            intOptNull: z.string().optional(),
            num: z.string(),
            numOptNull: z.string().optional(),
            objParam: z.string(),
            str: z.string(),
            strOpt: z.string().optional(),
        })
        .transform((v) => {
            return {
                any: v.any,
                ...(v.bigint === undefined ? null : { bigint: v.bigint }),
                ...(v.bigintStr === undefined ? null : { bigintStr: v.bigintStr }),
                bool: v.bool,
                ...(v.boolOpt === undefined ? null : { boolOpt: v.boolOpt }),
                date: v.date,
                dateTime: v.dateTime,
                ...(v.decimal === undefined ? null : { decimal: v.decimal }),
                ...(v.decimalStr === undefined ? null : { decimalStr: v.decimalStr }),
                enum: v.enum,
                float32: v.float32,
                ...(v.float64Str === undefined ? null : { float64Str: v.float64Str }),
                int: v.int,
                int32: v.int32,
                int32Enum: v.int32Enum,
                ...(v.int64Str === undefined ? null : { int64Str: v.int64Str }),
                intEnum: v.intEnum,
                ...(v.intOptNull === undefined ? null : { intOptNull: v.intOptNull }),
                num: v.num,
                ...(v.numOptNull === undefined ? null : { numOptNull: v.numOptNull }),
                objParam: v.objParam,
                str: v.str,
                ...(v.strOpt === undefined ? null : { strOpt: v.strOpt }),
            };
        });
}

/** @internal */
export namespace FormQueryParamsObjectRes$ {
    export const inboundSchema: z.ZodType<FormQueryParamsObjectRes, z.ZodTypeDef, unknown> = z
        .object({
            args: z.lazy(() => FormQueryParamsObjectArgs$.inboundSchema),
            url: z.string(),
        })
        .transform((v) => {
            return {
                args: v.args,
                url: v.url,
            };
        });

    export type Outbound = {
        args: FormQueryParamsObjectArgs$.Outbound;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FormQueryParamsObjectRes> = z
        .object({
            args: z.lazy(() => FormQueryParamsObjectArgs$.outboundSchema),
            url: z.string(),
        })
        .transform((v) => {
            return {
                args: v.args,
                url: v.url,
            };
        });
}

/** @internal */
export namespace FormQueryParamsObjectResponse$ {
    export const inboundSchema: z.ZodType<FormQueryParamsObjectResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => FormQueryParamsObjectRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: FormQueryParamsObjectRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FormQueryParamsObjectResponse> =
        z
            .object({
                contentType: z.string(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
                res: z.lazy(() => FormQueryParamsObjectRes$.outboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    ContentType: v.contentType,
                    StatusCode: v.statusCode,
                    RawResponse: v.rawResponse,
                    ...(v.res === undefined ? null : { res: v.res }),
                };
            });
}
