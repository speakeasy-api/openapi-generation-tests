/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type FormQueryParamsPrimitiveRequest = {
  boolParam: boolean;
  intParam: number;
  numParam: number;
  strParam: string;
};

export type FormQueryParamsPrimitiveArgs = {
  boolParam: string;
  intParam: string;
  numParam: string;
  strParam: string;
};

/**
 * OK
 */
export type FormQueryParamsPrimitiveRes = {
  args: FormQueryParamsPrimitiveArgs;
  url: string;
};

/** @internal */
export const FormQueryParamsPrimitiveRequest$inboundSchema: z.ZodType<
  FormQueryParamsPrimitiveRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  boolParam: z.boolean(),
  intParam: z.number().int(),
  numParam: z.number(),
  strParam: z.string(),
});

/** @internal */
export type FormQueryParamsPrimitiveRequest$Outbound = {
  boolParam: boolean;
  intParam: number;
  numParam: number;
  strParam: string;
};

/** @internal */
export const FormQueryParamsPrimitiveRequest$outboundSchema: z.ZodType<
  FormQueryParamsPrimitiveRequest$Outbound,
  z.ZodTypeDef,
  FormQueryParamsPrimitiveRequest
> = z.object({
  boolParam: z.boolean(),
  intParam: z.number().int(),
  numParam: z.number(),
  strParam: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormQueryParamsPrimitiveRequest$ {
  /** @deprecated use `FormQueryParamsPrimitiveRequest$inboundSchema` instead. */
  export const inboundSchema = FormQueryParamsPrimitiveRequest$inboundSchema;
  /** @deprecated use `FormQueryParamsPrimitiveRequest$outboundSchema` instead. */
  export const outboundSchema = FormQueryParamsPrimitiveRequest$outboundSchema;
  /** @deprecated use `FormQueryParamsPrimitiveRequest$Outbound` instead. */
  export type Outbound = FormQueryParamsPrimitiveRequest$Outbound;
}

/** @internal */
export const FormQueryParamsPrimitiveArgs$inboundSchema: z.ZodType<
  FormQueryParamsPrimitiveArgs,
  z.ZodTypeDef,
  unknown
> = z.object({
  boolParam: z.string(),
  intParam: z.string(),
  numParam: z.string(),
  strParam: z.string(),
});

/** @internal */
export type FormQueryParamsPrimitiveArgs$Outbound = {
  boolParam: string;
  intParam: string;
  numParam: string;
  strParam: string;
};

/** @internal */
export const FormQueryParamsPrimitiveArgs$outboundSchema: z.ZodType<
  FormQueryParamsPrimitiveArgs$Outbound,
  z.ZodTypeDef,
  FormQueryParamsPrimitiveArgs
> = z.object({
  boolParam: z.string(),
  intParam: z.string(),
  numParam: z.string(),
  strParam: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormQueryParamsPrimitiveArgs$ {
  /** @deprecated use `FormQueryParamsPrimitiveArgs$inboundSchema` instead. */
  export const inboundSchema = FormQueryParamsPrimitiveArgs$inboundSchema;
  /** @deprecated use `FormQueryParamsPrimitiveArgs$outboundSchema` instead. */
  export const outboundSchema = FormQueryParamsPrimitiveArgs$outboundSchema;
  /** @deprecated use `FormQueryParamsPrimitiveArgs$Outbound` instead. */
  export type Outbound = FormQueryParamsPrimitiveArgs$Outbound;
}

/** @internal */
export const FormQueryParamsPrimitiveRes$inboundSchema: z.ZodType<
  FormQueryParamsPrimitiveRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  args: z.lazy(() => FormQueryParamsPrimitiveArgs$inboundSchema),
  url: z.string(),
});

/** @internal */
export type FormQueryParamsPrimitiveRes$Outbound = {
  args: FormQueryParamsPrimitiveArgs$Outbound;
  url: string;
};

/** @internal */
export const FormQueryParamsPrimitiveRes$outboundSchema: z.ZodType<
  FormQueryParamsPrimitiveRes$Outbound,
  z.ZodTypeDef,
  FormQueryParamsPrimitiveRes
> = z.object({
  args: z.lazy(() => FormQueryParamsPrimitiveArgs$outboundSchema),
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormQueryParamsPrimitiveRes$ {
  /** @deprecated use `FormQueryParamsPrimitiveRes$inboundSchema` instead. */
  export const inboundSchema = FormQueryParamsPrimitiveRes$inboundSchema;
  /** @deprecated use `FormQueryParamsPrimitiveRes$outboundSchema` instead. */
  export const outboundSchema = FormQueryParamsPrimitiveRes$outboundSchema;
  /** @deprecated use `FormQueryParamsPrimitiveRes$Outbound` instead. */
  export type Outbound = FormQueryParamsPrimitiveRes$Outbound;
}
