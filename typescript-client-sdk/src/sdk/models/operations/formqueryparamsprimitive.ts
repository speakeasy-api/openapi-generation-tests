/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type FormQueryParamsPrimitiveRequest = {
    boolParam: boolean;
    intParam: number;
    numParam: number;
    strParam: string;
};

export type FormQueryParamsPrimitiveArgs = {
    boolParam: string;
    intParam: string;
    numParam: string;
    strParam: string;
};

/**
 * OK
 */
export type FormQueryParamsPrimitiveRes = {
    args: FormQueryParamsPrimitiveArgs;
    url: string;
};

export type FormQueryParamsPrimitiveResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: FormQueryParamsPrimitiveRes | undefined;
};

/** @internal */
export namespace FormQueryParamsPrimitiveRequest$ {
    export const inboundSchema: z.ZodType<FormQueryParamsPrimitiveRequest, z.ZodTypeDef, unknown> =
        z
            .object({
                boolParam: z.boolean(),
                intParam: z.number().int(),
                numParam: z.number(),
                strParam: z.string(),
            })
            .transform((v) => {
                return {
                    boolParam: v.boolParam,
                    intParam: v.intParam,
                    numParam: v.numParam,
                    strParam: v.strParam,
                };
            });

    export type Outbound = {
        boolParam: boolean;
        intParam: number;
        numParam: number;
        strParam: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FormQueryParamsPrimitiveRequest
    > = z
        .object({
            boolParam: z.boolean(),
            intParam: z.number().int(),
            numParam: z.number(),
            strParam: z.string(),
        })
        .transform((v) => {
            return {
                boolParam: v.boolParam,
                intParam: v.intParam,
                numParam: v.numParam,
                strParam: v.strParam,
            };
        });
}

/** @internal */
export namespace FormQueryParamsPrimitiveArgs$ {
    export const inboundSchema: z.ZodType<FormQueryParamsPrimitiveArgs, z.ZodTypeDef, unknown> = z
        .object({
            boolParam: z.string(),
            intParam: z.string(),
            numParam: z.string(),
            strParam: z.string(),
        })
        .transform((v) => {
            return {
                boolParam: v.boolParam,
                intParam: v.intParam,
                numParam: v.numParam,
                strParam: v.strParam,
            };
        });

    export type Outbound = {
        boolParam: string;
        intParam: string;
        numParam: string;
        strParam: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FormQueryParamsPrimitiveArgs> = z
        .object({
            boolParam: z.string(),
            intParam: z.string(),
            numParam: z.string(),
            strParam: z.string(),
        })
        .transform((v) => {
            return {
                boolParam: v.boolParam,
                intParam: v.intParam,
                numParam: v.numParam,
                strParam: v.strParam,
            };
        });
}

/** @internal */
export namespace FormQueryParamsPrimitiveRes$ {
    export const inboundSchema: z.ZodType<FormQueryParamsPrimitiveRes, z.ZodTypeDef, unknown> = z
        .object({
            args: z.lazy(() => FormQueryParamsPrimitiveArgs$.inboundSchema),
            url: z.string(),
        })
        .transform((v) => {
            return {
                args: v.args,
                url: v.url,
            };
        });

    export type Outbound = {
        args: FormQueryParamsPrimitiveArgs$.Outbound;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FormQueryParamsPrimitiveRes> = z
        .object({
            args: z.lazy(() => FormQueryParamsPrimitiveArgs$.outboundSchema),
            url: z.string(),
        })
        .transform((v) => {
            return {
                args: v.args,
                url: v.url,
            };
        });
}

/** @internal */
export namespace FormQueryParamsPrimitiveResponse$ {
    export const inboundSchema: z.ZodType<FormQueryParamsPrimitiveResponse, z.ZodTypeDef, unknown> =
        z
            .object({
                ContentType: z.string(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
                res: z.lazy(() => FormQueryParamsPrimitiveRes$.inboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    contentType: v.ContentType,
                    statusCode: v.StatusCode,
                    rawResponse: v.RawResponse,
                    ...(v.res === undefined ? null : { res: v.res }),
                };
            });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: FormQueryParamsPrimitiveRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FormQueryParamsPrimitiveResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => FormQueryParamsPrimitiveRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
