/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type FormQueryParamsRefParamObjectRequest = {
  refObjParam?: shared.RefQueryParamObj | undefined;
  refObjParamExploded?: shared.RefQueryParamObjExploded | undefined;
};

export type FormQueryParamsRefParamObjectArgs = {
  bool: string;
  int: string;
  num: string;
  refObjParam: string;
  str: string;
};

/**
 * OK
 */
export type FormQueryParamsRefParamObjectRes = {
  args: FormQueryParamsRefParamObjectArgs;
  url: string;
};

/** @internal */
export const FormQueryParamsRefParamObjectRequest$inboundSchema: z.ZodType<
  FormQueryParamsRefParamObjectRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  refObjParam: shared.RefQueryParamObj$inboundSchema.optional(),
  refObjParamExploded: shared.RefQueryParamObjExploded$inboundSchema.optional(),
});

/** @internal */
export type FormQueryParamsRefParamObjectRequest$Outbound = {
  refObjParam?: shared.RefQueryParamObj$Outbound | undefined;
  refObjParamExploded?: shared.RefQueryParamObjExploded$Outbound | undefined;
};

/** @internal */
export const FormQueryParamsRefParamObjectRequest$outboundSchema: z.ZodType<
  FormQueryParamsRefParamObjectRequest$Outbound,
  z.ZodTypeDef,
  FormQueryParamsRefParamObjectRequest
> = z.object({
  refObjParam: shared.RefQueryParamObj$outboundSchema.optional(),
  refObjParamExploded: shared.RefQueryParamObjExploded$outboundSchema
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormQueryParamsRefParamObjectRequest$ {
  /** @deprecated use `FormQueryParamsRefParamObjectRequest$inboundSchema` instead. */
  export const inboundSchema =
    FormQueryParamsRefParamObjectRequest$inboundSchema;
  /** @deprecated use `FormQueryParamsRefParamObjectRequest$outboundSchema` instead. */
  export const outboundSchema =
    FormQueryParamsRefParamObjectRequest$outboundSchema;
  /** @deprecated use `FormQueryParamsRefParamObjectRequest$Outbound` instead. */
  export type Outbound = FormQueryParamsRefParamObjectRequest$Outbound;
}

export function formQueryParamsRefParamObjectRequestToJSON(
  formQueryParamsRefParamObjectRequest: FormQueryParamsRefParamObjectRequest,
): string {
  return JSON.stringify(
    FormQueryParamsRefParamObjectRequest$outboundSchema.parse(
      formQueryParamsRefParamObjectRequest,
    ),
  );
}

export function formQueryParamsRefParamObjectRequestFromJSON(
  jsonString: string,
): SafeParseResult<FormQueryParamsRefParamObjectRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FormQueryParamsRefParamObjectRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormQueryParamsRefParamObjectRequest' from JSON`,
  );
}

/** @internal */
export const FormQueryParamsRefParamObjectArgs$inboundSchema: z.ZodType<
  FormQueryParamsRefParamObjectArgs,
  z.ZodTypeDef,
  unknown
> = z.object({
  bool: z.string(),
  int: z.string(),
  num: z.string(),
  refObjParam: z.string(),
  str: z.string(),
});

/** @internal */
export type FormQueryParamsRefParamObjectArgs$Outbound = {
  bool: string;
  int: string;
  num: string;
  refObjParam: string;
  str: string;
};

/** @internal */
export const FormQueryParamsRefParamObjectArgs$outboundSchema: z.ZodType<
  FormQueryParamsRefParamObjectArgs$Outbound,
  z.ZodTypeDef,
  FormQueryParamsRefParamObjectArgs
> = z.object({
  bool: z.string(),
  int: z.string(),
  num: z.string(),
  refObjParam: z.string(),
  str: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormQueryParamsRefParamObjectArgs$ {
  /** @deprecated use `FormQueryParamsRefParamObjectArgs$inboundSchema` instead. */
  export const inboundSchema = FormQueryParamsRefParamObjectArgs$inboundSchema;
  /** @deprecated use `FormQueryParamsRefParamObjectArgs$outboundSchema` instead. */
  export const outboundSchema =
    FormQueryParamsRefParamObjectArgs$outboundSchema;
  /** @deprecated use `FormQueryParamsRefParamObjectArgs$Outbound` instead. */
  export type Outbound = FormQueryParamsRefParamObjectArgs$Outbound;
}

export function formQueryParamsRefParamObjectArgsToJSON(
  formQueryParamsRefParamObjectArgs: FormQueryParamsRefParamObjectArgs,
): string {
  return JSON.stringify(
    FormQueryParamsRefParamObjectArgs$outboundSchema.parse(
      formQueryParamsRefParamObjectArgs,
    ),
  );
}

export function formQueryParamsRefParamObjectArgsFromJSON(
  jsonString: string,
): SafeParseResult<FormQueryParamsRefParamObjectArgs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormQueryParamsRefParamObjectArgs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormQueryParamsRefParamObjectArgs' from JSON`,
  );
}

/** @internal */
export const FormQueryParamsRefParamObjectRes$inboundSchema: z.ZodType<
  FormQueryParamsRefParamObjectRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  args: z.lazy(() => FormQueryParamsRefParamObjectArgs$inboundSchema),
  url: z.string(),
});

/** @internal */
export type FormQueryParamsRefParamObjectRes$Outbound = {
  args: FormQueryParamsRefParamObjectArgs$Outbound;
  url: string;
};

/** @internal */
export const FormQueryParamsRefParamObjectRes$outboundSchema: z.ZodType<
  FormQueryParamsRefParamObjectRes$Outbound,
  z.ZodTypeDef,
  FormQueryParamsRefParamObjectRes
> = z.object({
  args: z.lazy(() => FormQueryParamsRefParamObjectArgs$outboundSchema),
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormQueryParamsRefParamObjectRes$ {
  /** @deprecated use `FormQueryParamsRefParamObjectRes$inboundSchema` instead. */
  export const inboundSchema = FormQueryParamsRefParamObjectRes$inboundSchema;
  /** @deprecated use `FormQueryParamsRefParamObjectRes$outboundSchema` instead. */
  export const outboundSchema = FormQueryParamsRefParamObjectRes$outboundSchema;
  /** @deprecated use `FormQueryParamsRefParamObjectRes$Outbound` instead. */
  export type Outbound = FormQueryParamsRefParamObjectRes$Outbound;
}

export function formQueryParamsRefParamObjectResToJSON(
  formQueryParamsRefParamObjectRes: FormQueryParamsRefParamObjectRes,
): string {
  return JSON.stringify(
    FormQueryParamsRefParamObjectRes$outboundSchema.parse(
      formQueryParamsRefParamObjectRes,
    ),
  );
}

export function formQueryParamsRefParamObjectResFromJSON(
  jsonString: string,
): SafeParseResult<FormQueryParamsRefParamObjectRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormQueryParamsRefParamObjectRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormQueryParamsRefParamObjectRes' from JSON`,
  );
}
