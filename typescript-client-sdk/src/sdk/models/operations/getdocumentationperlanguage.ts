/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetDocumentationPerLanguageRequest = {
  /**
   * The language parameter for this endpoint.
   */
  language: string;
};

/** @internal */
export const GetDocumentationPerLanguageRequest$inboundSchema: z.ZodType<
  GetDocumentationPerLanguageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  language: z.string(),
});

/** @internal */
export type GetDocumentationPerLanguageRequest$Outbound = {
  language: string;
};

/** @internal */
export const GetDocumentationPerLanguageRequest$outboundSchema: z.ZodType<
  GetDocumentationPerLanguageRequest$Outbound,
  z.ZodTypeDef,
  GetDocumentationPerLanguageRequest
> = z.object({
  language: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDocumentationPerLanguageRequest$ {
  /** @deprecated use `GetDocumentationPerLanguageRequest$inboundSchema` instead. */
  export const inboundSchema = GetDocumentationPerLanguageRequest$inboundSchema;
  /** @deprecated use `GetDocumentationPerLanguageRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetDocumentationPerLanguageRequest$outboundSchema;
  /** @deprecated use `GetDocumentationPerLanguageRequest$Outbound` instead. */
  export type Outbound = GetDocumentationPerLanguageRequest$Outbound;
}

export function getDocumentationPerLanguageRequestToJSON(
  getDocumentationPerLanguageRequest: GetDocumentationPerLanguageRequest,
): string {
  return JSON.stringify(
    GetDocumentationPerLanguageRequest$outboundSchema.parse(
      getDocumentationPerLanguageRequest,
    ),
  );
}

export function getDocumentationPerLanguageRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDocumentationPerLanguageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDocumentationPerLanguageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDocumentationPerLanguageRequest' from JSON`,
  );
}
