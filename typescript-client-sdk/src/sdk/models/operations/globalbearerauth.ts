/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Successful authentication.
 */
export type GlobalBearerAuthToken = {
    authenticated: boolean;
    token: string;
};

export type GlobalBearerAuthResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful authentication.
     */
    token?: GlobalBearerAuthToken | undefined;
};

/** @internal */
export namespace GlobalBearerAuthToken$ {
    export const inboundSchema: z.ZodType<GlobalBearerAuthToken, z.ZodTypeDef, unknown> = z
        .object({
            authenticated: z.boolean(),
            token: z.string(),
        })
        .transform((v) => {
            return {
                authenticated: v.authenticated,
                token: v.token,
            };
        });

    export type Outbound = {
        authenticated: boolean;
        token: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GlobalBearerAuthToken> = z
        .object({
            authenticated: z.boolean(),
            token: z.string(),
        })
        .transform((v) => {
            return {
                authenticated: v.authenticated,
                token: v.token,
            };
        });
}

/** @internal */
export namespace GlobalBearerAuthResponse$ {
    export const inboundSchema: z.ZodType<GlobalBearerAuthResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            token: z.lazy(() => GlobalBearerAuthToken$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.token === undefined ? null : { token: v.token }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        token?: GlobalBearerAuthToken$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GlobalBearerAuthResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            token: z.lazy(() => GlobalBearerAuthToken$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.token === undefined ? null : { token: v.token }),
            };
        });
}
