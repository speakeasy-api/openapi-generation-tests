/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as z from "zod";

export type GlobalPathParameterGetGlobals = {
    globalPathParam: number;
};

export type GlobalPathParameterGetRequest = {
    globalPathParam?: number | undefined;
};

/**
 * OK
 */
export type GlobalPathParameterGetRes = {
    url: string;
};

export type GlobalPathParameterGetResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: GlobalPathParameterGetRes | undefined;
};

/** @internal */
export namespace GlobalPathParameterGetGlobals$ {
    export const inboundSchema: z.ZodType<GlobalPathParameterGetGlobals, z.ZodTypeDef, unknown> =
        z.object({
            globalPathParam: z.number().int(),
        });

    export type Outbound = {
        globalPathParam: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GlobalPathParameterGetGlobals> =
        z.object({
            globalPathParam: z.number().int(),
        });
}

/** @internal */
export namespace GlobalPathParameterGetRequest$ {
    export const inboundSchema: z.ZodType<GlobalPathParameterGetRequest, z.ZodTypeDef, unknown> =
        z.object({
            globalPathParam: z.number().int().optional(),
        });

    export type Outbound = {
        globalPathParam?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GlobalPathParameterGetRequest> =
        z.object({
            globalPathParam: z.number().int().optional(),
        });
}

/** @internal */
export namespace GlobalPathParameterGetRes$ {
    export const inboundSchema: z.ZodType<GlobalPathParameterGetRes, z.ZodTypeDef, unknown> =
        z.object({
            url: z.string(),
        });

    export type Outbound = {
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GlobalPathParameterGetRes> =
        z.object({
            url: z.string(),
        });
}

/** @internal */
export namespace GlobalPathParameterGetResponse$ {
    export const inboundSchema: z.ZodType<GlobalPathParameterGetResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => GlobalPathParameterGetRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: GlobalPathParameterGetRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GlobalPathParameterGetResponse> =
        z
            .object({
                contentType: z.string(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
                res: z.lazy(() => GlobalPathParameterGetRes$.outboundSchema).optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    contentType: "ContentType",
                    statusCode: "StatusCode",
                    rawResponse: "RawResponse",
                });
            });
}
