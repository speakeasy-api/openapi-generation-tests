/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GlobalPathParameterGetGlobals = {
  globalPathParam?: number | undefined;
};

export type GlobalPathParameterGetRequest = {
  globalPathParam?: number | undefined;
};

/**
 * OK
 */
export type GlobalPathParameterGetRes = {
  url: string;
};

/** @internal */
export const GlobalPathParameterGetGlobals$inboundSchema: z.ZodType<
  GlobalPathParameterGetGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  globalPathParam: z.number().int().optional(),
});

/** @internal */
export type GlobalPathParameterGetGlobals$Outbound = {
  globalPathParam?: number | undefined;
};

/** @internal */
export const GlobalPathParameterGetGlobals$outboundSchema: z.ZodType<
  GlobalPathParameterGetGlobals$Outbound,
  z.ZodTypeDef,
  GlobalPathParameterGetGlobals
> = z.object({
  globalPathParam: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GlobalPathParameterGetGlobals$ {
  /** @deprecated use `GlobalPathParameterGetGlobals$inboundSchema` instead. */
  export const inboundSchema = GlobalPathParameterGetGlobals$inboundSchema;
  /** @deprecated use `GlobalPathParameterGetGlobals$outboundSchema` instead. */
  export const outboundSchema = GlobalPathParameterGetGlobals$outboundSchema;
  /** @deprecated use `GlobalPathParameterGetGlobals$Outbound` instead. */
  export type Outbound = GlobalPathParameterGetGlobals$Outbound;
}

export function globalPathParameterGetGlobalsToJSON(
  globalPathParameterGetGlobals: GlobalPathParameterGetGlobals,
): string {
  return JSON.stringify(
    GlobalPathParameterGetGlobals$outboundSchema.parse(
      globalPathParameterGetGlobals,
    ),
  );
}

export function globalPathParameterGetGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GlobalPathParameterGetGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GlobalPathParameterGetGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GlobalPathParameterGetGlobals' from JSON`,
  );
}

/** @internal */
export const GlobalPathParameterGetRequest$inboundSchema: z.ZodType<
  GlobalPathParameterGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  globalPathParam: z.number().int().optional(),
});

/** @internal */
export type GlobalPathParameterGetRequest$Outbound = {
  globalPathParam?: number | undefined;
};

/** @internal */
export const GlobalPathParameterGetRequest$outboundSchema: z.ZodType<
  GlobalPathParameterGetRequest$Outbound,
  z.ZodTypeDef,
  GlobalPathParameterGetRequest
> = z.object({
  globalPathParam: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GlobalPathParameterGetRequest$ {
  /** @deprecated use `GlobalPathParameterGetRequest$inboundSchema` instead. */
  export const inboundSchema = GlobalPathParameterGetRequest$inboundSchema;
  /** @deprecated use `GlobalPathParameterGetRequest$outboundSchema` instead. */
  export const outboundSchema = GlobalPathParameterGetRequest$outboundSchema;
  /** @deprecated use `GlobalPathParameterGetRequest$Outbound` instead. */
  export type Outbound = GlobalPathParameterGetRequest$Outbound;
}

export function globalPathParameterGetRequestToJSON(
  globalPathParameterGetRequest: GlobalPathParameterGetRequest,
): string {
  return JSON.stringify(
    GlobalPathParameterGetRequest$outboundSchema.parse(
      globalPathParameterGetRequest,
    ),
  );
}

export function globalPathParameterGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<GlobalPathParameterGetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GlobalPathParameterGetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GlobalPathParameterGetRequest' from JSON`,
  );
}

/** @internal */
export const GlobalPathParameterGetRes$inboundSchema: z.ZodType<
  GlobalPathParameterGetRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
});

/** @internal */
export type GlobalPathParameterGetRes$Outbound = {
  url: string;
};

/** @internal */
export const GlobalPathParameterGetRes$outboundSchema: z.ZodType<
  GlobalPathParameterGetRes$Outbound,
  z.ZodTypeDef,
  GlobalPathParameterGetRes
> = z.object({
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GlobalPathParameterGetRes$ {
  /** @deprecated use `GlobalPathParameterGetRes$inboundSchema` instead. */
  export const inboundSchema = GlobalPathParameterGetRes$inboundSchema;
  /** @deprecated use `GlobalPathParameterGetRes$outboundSchema` instead. */
  export const outboundSchema = GlobalPathParameterGetRes$outboundSchema;
  /** @deprecated use `GlobalPathParameterGetRes$Outbound` instead. */
  export type Outbound = GlobalPathParameterGetRes$Outbound;
}

export function globalPathParameterGetResToJSON(
  globalPathParameterGetRes: GlobalPathParameterGetRes,
): string {
  return JSON.stringify(
    GlobalPathParameterGetRes$outboundSchema.parse(globalPathParameterGetRes),
  );
}

export function globalPathParameterGetResFromJSON(
  jsonString: string,
): SafeParseResult<GlobalPathParameterGetRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GlobalPathParameterGetRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GlobalPathParameterGetRes' from JSON`,
  );
}
