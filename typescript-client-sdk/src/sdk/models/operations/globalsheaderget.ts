/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GlobalsHeaderGetGlobals = {
  globalHeaderParam?: boolean | undefined;
};

export type GlobalsHeaderGetRequest = {
  globalHeaderParam?: boolean | undefined;
};

/**
 * OK
 */
export type GlobalsHeaderGetRes = {
  headers?: { [k: string]: string } | undefined;
};

/** @internal */
export const GlobalsHeaderGetGlobals$inboundSchema: z.ZodType<
  GlobalsHeaderGetGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  globalHeaderParam: z.boolean().optional(),
});

/** @internal */
export type GlobalsHeaderGetGlobals$Outbound = {
  globalHeaderParam?: boolean | undefined;
};

/** @internal */
export const GlobalsHeaderGetGlobals$outboundSchema: z.ZodType<
  GlobalsHeaderGetGlobals$Outbound,
  z.ZodTypeDef,
  GlobalsHeaderGetGlobals
> = z.object({
  globalHeaderParam: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GlobalsHeaderGetGlobals$ {
  /** @deprecated use `GlobalsHeaderGetGlobals$inboundSchema` instead. */
  export const inboundSchema = GlobalsHeaderGetGlobals$inboundSchema;
  /** @deprecated use `GlobalsHeaderGetGlobals$outboundSchema` instead. */
  export const outboundSchema = GlobalsHeaderGetGlobals$outboundSchema;
  /** @deprecated use `GlobalsHeaderGetGlobals$Outbound` instead. */
  export type Outbound = GlobalsHeaderGetGlobals$Outbound;
}

export function globalsHeaderGetGlobalsToJSON(
  globalsHeaderGetGlobals: GlobalsHeaderGetGlobals,
): string {
  return JSON.stringify(
    GlobalsHeaderGetGlobals$outboundSchema.parse(globalsHeaderGetGlobals),
  );
}

export function globalsHeaderGetGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GlobalsHeaderGetGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GlobalsHeaderGetGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GlobalsHeaderGetGlobals' from JSON`,
  );
}

/** @internal */
export const GlobalsHeaderGetRequest$inboundSchema: z.ZodType<
  GlobalsHeaderGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  globalHeaderParam: z.boolean().optional(),
});

/** @internal */
export type GlobalsHeaderGetRequest$Outbound = {
  globalHeaderParam?: boolean | undefined;
};

/** @internal */
export const GlobalsHeaderGetRequest$outboundSchema: z.ZodType<
  GlobalsHeaderGetRequest$Outbound,
  z.ZodTypeDef,
  GlobalsHeaderGetRequest
> = z.object({
  globalHeaderParam: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GlobalsHeaderGetRequest$ {
  /** @deprecated use `GlobalsHeaderGetRequest$inboundSchema` instead. */
  export const inboundSchema = GlobalsHeaderGetRequest$inboundSchema;
  /** @deprecated use `GlobalsHeaderGetRequest$outboundSchema` instead. */
  export const outboundSchema = GlobalsHeaderGetRequest$outboundSchema;
  /** @deprecated use `GlobalsHeaderGetRequest$Outbound` instead. */
  export type Outbound = GlobalsHeaderGetRequest$Outbound;
}

export function globalsHeaderGetRequestToJSON(
  globalsHeaderGetRequest: GlobalsHeaderGetRequest,
): string {
  return JSON.stringify(
    GlobalsHeaderGetRequest$outboundSchema.parse(globalsHeaderGetRequest),
  );
}

export function globalsHeaderGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<GlobalsHeaderGetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GlobalsHeaderGetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GlobalsHeaderGetRequest' from JSON`,
  );
}

/** @internal */
export const GlobalsHeaderGetRes$inboundSchema: z.ZodType<
  GlobalsHeaderGetRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  headers: z.record(z.string()).optional(),
});

/** @internal */
export type GlobalsHeaderGetRes$Outbound = {
  headers?: { [k: string]: string } | undefined;
};

/** @internal */
export const GlobalsHeaderGetRes$outboundSchema: z.ZodType<
  GlobalsHeaderGetRes$Outbound,
  z.ZodTypeDef,
  GlobalsHeaderGetRes
> = z.object({
  headers: z.record(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GlobalsHeaderGetRes$ {
  /** @deprecated use `GlobalsHeaderGetRes$inboundSchema` instead. */
  export const inboundSchema = GlobalsHeaderGetRes$inboundSchema;
  /** @deprecated use `GlobalsHeaderGetRes$outboundSchema` instead. */
  export const outboundSchema = GlobalsHeaderGetRes$outboundSchema;
  /** @deprecated use `GlobalsHeaderGetRes$Outbound` instead. */
  export type Outbound = GlobalsHeaderGetRes$Outbound;
}

export function globalsHeaderGetResToJSON(
  globalsHeaderGetRes: GlobalsHeaderGetRes,
): string {
  return JSON.stringify(
    GlobalsHeaderGetRes$outboundSchema.parse(globalsHeaderGetRes),
  );
}

export function globalsHeaderGetResFromJSON(
  jsonString: string,
): SafeParseResult<GlobalsHeaderGetRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GlobalsHeaderGetRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GlobalsHeaderGetRes' from JSON`,
  );
}
