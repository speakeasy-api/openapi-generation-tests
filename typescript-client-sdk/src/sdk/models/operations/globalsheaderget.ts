/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type GlobalsHeaderGetGlobals = {
    globalHeaderParam: boolean;
};

export type GlobalsHeaderGetRequest = {
    globalHeaderParam?: boolean | undefined;
};

/**
 * OK
 */
export type GlobalsHeaderGetRes = {
    headers?: { [k: string]: string } | undefined;
};

export type GlobalsHeaderGetResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: GlobalsHeaderGetRes | undefined;
};

/** @internal */
export namespace GlobalsHeaderGetGlobals$ {
    export const inboundSchema: z.ZodType<GlobalsHeaderGetGlobals, z.ZodTypeDef, unknown> = z
        .object({
            globalHeaderParam: z.boolean(),
        })
        .transform((v) => {
            return {
                globalHeaderParam: v.globalHeaderParam,
            };
        });

    export type Outbound = {
        globalHeaderParam: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GlobalsHeaderGetGlobals> = z
        .object({
            globalHeaderParam: z.boolean(),
        })
        .transform((v) => {
            return {
                globalHeaderParam: v.globalHeaderParam,
            };
        });
}

/** @internal */
export namespace GlobalsHeaderGetRequest$ {
    export const inboundSchema: z.ZodType<GlobalsHeaderGetRequest, z.ZodTypeDef, unknown> = z
        .object({
            globalHeaderParam: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.globalHeaderParam === undefined
                    ? null
                    : { globalHeaderParam: v.globalHeaderParam }),
            };
        });

    export type Outbound = {
        globalHeaderParam?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GlobalsHeaderGetRequest> = z
        .object({
            globalHeaderParam: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.globalHeaderParam === undefined
                    ? null
                    : { globalHeaderParam: v.globalHeaderParam }),
            };
        });
}

/** @internal */
export namespace GlobalsHeaderGetRes$ {
    export const inboundSchema: z.ZodType<GlobalsHeaderGetRes, z.ZodTypeDef, unknown> = z
        .object({
            headers: z.record(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.headers === undefined ? null : { headers: v.headers }),
            };
        });

    export type Outbound = {
        headers?: { [k: string]: string } | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GlobalsHeaderGetRes> = z
        .object({
            headers: z.record(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.headers === undefined ? null : { headers: v.headers }),
            };
        });
}

/** @internal */
export namespace GlobalsHeaderGetResponse$ {
    export const inboundSchema: z.ZodType<GlobalsHeaderGetResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => GlobalsHeaderGetRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: GlobalsHeaderGetRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GlobalsHeaderGetResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => GlobalsHeaderGetRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
