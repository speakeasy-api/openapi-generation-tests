/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type GlobalsHiddenPostGlobals = {
    globalHiddenHeaderParam: string;
    globalHiddenPathParam: string;
    globalHiddenQueryParam: string;
};

export type GlobalsHiddenPostRequestBody = {
    other: number;
    test: string;
};

export type GlobalsHiddenPostArgs = {
    globalHiddenQueryParam: string;
};

export type GlobalsHiddenPostJson = {
    other: number;
    test: string;
};

/**
 * OK
 */
export type GlobalsHiddenPostRes = {
    args: GlobalsHiddenPostArgs;
    headers: { [k: string]: string };
    json: GlobalsHiddenPostJson;
    url: string;
};

export type GlobalsHiddenPostResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: GlobalsHiddenPostRes | undefined;
};

/** @internal */
export namespace GlobalsHiddenPostGlobals$ {
    export const inboundSchema: z.ZodType<GlobalsHiddenPostGlobals, z.ZodTypeDef, unknown> = z
        .object({
            globalHiddenHeaderParam: z.string(),
            globalHiddenPathParam: z.string(),
            globalHiddenQueryParam: z.string(),
        })
        .transform((v) => {
            return {
                globalHiddenHeaderParam: v.globalHiddenHeaderParam,
                globalHiddenPathParam: v.globalHiddenPathParam,
                globalHiddenQueryParam: v.globalHiddenQueryParam,
            };
        });

    export type Outbound = {
        globalHiddenHeaderParam: string;
        globalHiddenPathParam: string;
        globalHiddenQueryParam: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GlobalsHiddenPostGlobals> = z
        .object({
            globalHiddenHeaderParam: z.string(),
            globalHiddenPathParam: z.string(),
            globalHiddenQueryParam: z.string(),
        })
        .transform((v) => {
            return {
                globalHiddenHeaderParam: v.globalHiddenHeaderParam,
                globalHiddenPathParam: v.globalHiddenPathParam,
                globalHiddenQueryParam: v.globalHiddenQueryParam,
            };
        });
}

/** @internal */
export namespace GlobalsHiddenPostRequestBody$ {
    export const inboundSchema: z.ZodType<GlobalsHiddenPostRequestBody, z.ZodTypeDef, unknown> = z
        .object({
            other: z.number().int(),
            test: z.string(),
        })
        .transform((v) => {
            return {
                other: v.other,
                test: v.test,
            };
        });

    export type Outbound = {
        other: number;
        test: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GlobalsHiddenPostRequestBody> = z
        .object({
            other: z.number().int(),
            test: z.string(),
        })
        .transform((v) => {
            return {
                other: v.other,
                test: v.test,
            };
        });
}

/** @internal */
export namespace GlobalsHiddenPostArgs$ {
    export const inboundSchema: z.ZodType<GlobalsHiddenPostArgs, z.ZodTypeDef, unknown> = z
        .object({
            globalHiddenQueryParam: z.string(),
        })
        .transform((v) => {
            return {
                globalHiddenQueryParam: v.globalHiddenQueryParam,
            };
        });

    export type Outbound = {
        globalHiddenQueryParam: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GlobalsHiddenPostArgs> = z
        .object({
            globalHiddenQueryParam: z.string(),
        })
        .transform((v) => {
            return {
                globalHiddenQueryParam: v.globalHiddenQueryParam,
            };
        });
}

/** @internal */
export namespace GlobalsHiddenPostJson$ {
    export const inboundSchema: z.ZodType<GlobalsHiddenPostJson, z.ZodTypeDef, unknown> = z
        .object({
            other: z.number().int(),
            test: z.string(),
        })
        .transform((v) => {
            return {
                other: v.other,
                test: v.test,
            };
        });

    export type Outbound = {
        other: number;
        test: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GlobalsHiddenPostJson> = z
        .object({
            other: z.number().int(),
            test: z.string(),
        })
        .transform((v) => {
            return {
                other: v.other,
                test: v.test,
            };
        });
}

/** @internal */
export namespace GlobalsHiddenPostRes$ {
    export const inboundSchema: z.ZodType<GlobalsHiddenPostRes, z.ZodTypeDef, unknown> = z
        .object({
            args: z.lazy(() => GlobalsHiddenPostArgs$.inboundSchema),
            headers: z.record(z.string()),
            json: z.lazy(() => GlobalsHiddenPostJson$.inboundSchema),
            url: z.string(),
        })
        .transform((v) => {
            return {
                args: v.args,
                headers: v.headers,
                json: v.json,
                url: v.url,
            };
        });

    export type Outbound = {
        args: GlobalsHiddenPostArgs$.Outbound;
        headers: { [k: string]: string };
        json: GlobalsHiddenPostJson$.Outbound;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GlobalsHiddenPostRes> = z
        .object({
            args: z.lazy(() => GlobalsHiddenPostArgs$.outboundSchema),
            headers: z.record(z.string()),
            json: z.lazy(() => GlobalsHiddenPostJson$.outboundSchema),
            url: z.string(),
        })
        .transform((v) => {
            return {
                args: v.args,
                headers: v.headers,
                json: v.json,
                url: v.url,
            };
        });
}

/** @internal */
export namespace GlobalsHiddenPostResponse$ {
    export const inboundSchema: z.ZodType<GlobalsHiddenPostResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => GlobalsHiddenPostRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: GlobalsHiddenPostRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GlobalsHiddenPostResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => GlobalsHiddenPostRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
