/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type GlobalsQueryParameterGetRequest = {
    globalQueryParam?: string | undefined;
};

export type Args = {
    globalQueryParam: string;
};

/**
 * OK
 */
export type GlobalsQueryParameterGetRes = {
    args: Args;
};

export type GlobalsQueryParameterGetResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: GlobalsQueryParameterGetRes | undefined;
};

/** @internal */
export namespace GlobalsQueryParameterGetRequest$ {
    export type Inbound = {
        globalQueryParam?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GlobalsQueryParameterGetRequest, z.ZodTypeDef, Inbound> =
        z
            .object({
                globalQueryParam: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.globalQueryParam === undefined
                        ? null
                        : { globalQueryParam: v.globalQueryParam }),
                };
            });

    export type Outbound = {
        globalQueryParam?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GlobalsQueryParameterGetRequest
    > = z
        .object({
            globalQueryParam: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.globalQueryParam === undefined
                    ? null
                    : { globalQueryParam: v.globalQueryParam }),
            };
        });
}

/** @internal */
export namespace Args$ {
    export type Inbound = {
        globalQueryParam: string;
    };

    export const inboundSchema: z.ZodType<Args, z.ZodTypeDef, Inbound> = z
        .object({
            globalQueryParam: z.string(),
        })
        .transform((v) => {
            return {
                globalQueryParam: v.globalQueryParam,
            };
        });

    export type Outbound = {
        globalQueryParam: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Args> = z
        .object({
            globalQueryParam: z.string(),
        })
        .transform((v) => {
            return {
                globalQueryParam: v.globalQueryParam,
            };
        });
}

/** @internal */
export namespace GlobalsQueryParameterGetRes$ {
    export type Inbound = {
        args: Args$.Inbound;
    };

    export const inboundSchema: z.ZodType<GlobalsQueryParameterGetRes, z.ZodTypeDef, Inbound> = z
        .object({
            args: z.lazy(() => Args$.inboundSchema),
        })
        .transform((v) => {
            return {
                args: v.args,
            };
        });

    export type Outbound = {
        args: Args$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GlobalsQueryParameterGetRes> = z
        .object({
            args: z.lazy(() => Args$.outboundSchema),
        })
        .transform((v) => {
            return {
                args: v.args,
            };
        });
}

/** @internal */
export namespace GlobalsQueryParameterGetResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        res?: GlobalsQueryParameterGetRes$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GlobalsQueryParameterGetResponse, z.ZodTypeDef, Inbound> =
        z
            .object({
                ContentType: z.string(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
                res: z.lazy(() => GlobalsQueryParameterGetRes$.inboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    contentType: v.ContentType,
                    statusCode: v.StatusCode,
                    rawResponse: v.RawResponse,
                    ...(v.res === undefined ? null : { res: v.res }),
                };
            });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: GlobalsQueryParameterGetRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GlobalsQueryParameterGetResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => GlobalsQueryParameterGetRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
