/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type HeaderParamsArrayRequest = {
    xHeaderArray: Array<string>;
};

export type HeaderParamsArrayHeaders = {
    xHeaderArray: string;
};

/**
 * OK
 */
export type HeaderParamsArrayRes = {
    headers: HeaderParamsArrayHeaders;
};

/** @internal */
export namespace HeaderParamsArrayRequest$ {
    export const inboundSchema: z.ZodType<HeaderParamsArrayRequest, z.ZodTypeDef, unknown> = z
        .object({
            "X-Header-Array": z.array(z.string()),
        })
        .transform((v) => {
            return remap$(v, {
                "X-Header-Array": "xHeaderArray",
            });
        });

    export type Outbound = {
        "X-Header-Array": Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HeaderParamsArrayRequest> = z
        .object({
            xHeaderArray: z.array(z.string()),
        })
        .transform((v) => {
            return remap$(v, {
                xHeaderArray: "X-Header-Array",
            });
        });
}

/** @internal */
export namespace HeaderParamsArrayHeaders$ {
    export const inboundSchema: z.ZodType<HeaderParamsArrayHeaders, z.ZodTypeDef, unknown> = z
        .object({
            "X-Header-Array": z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                "X-Header-Array": "xHeaderArray",
            });
        });

    export type Outbound = {
        "X-Header-Array": string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HeaderParamsArrayHeaders> = z
        .object({
            xHeaderArray: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                xHeaderArray: "X-Header-Array",
            });
        });
}

/** @internal */
export namespace HeaderParamsArrayRes$ {
    export const inboundSchema: z.ZodType<HeaderParamsArrayRes, z.ZodTypeDef, unknown> = z.object({
        headers: z.lazy(() => HeaderParamsArrayHeaders$.inboundSchema),
    });

    export type Outbound = {
        headers: HeaderParamsArrayHeaders$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HeaderParamsArrayRes> = z.object(
        {
            headers: z.lazy(() => HeaderParamsArrayHeaders$.outboundSchema),
        }
    );
}
