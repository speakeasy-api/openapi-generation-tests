/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

export type HeaderParamsArrayRequest = {
  xHeaderArray: Array<string>;
};

export type HeaderParamsArrayHeaders = {
  xHeaderArray: string;
};

/**
 * OK
 */
export type HeaderParamsArrayRes = {
  headers: HeaderParamsArrayHeaders;
};

/** @internal */
export const HeaderParamsArrayRequest$inboundSchema: z.ZodType<
  HeaderParamsArrayRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Header-Array": z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "X-Header-Array": "xHeaderArray",
  });
});

/** @internal */
export type HeaderParamsArrayRequest$Outbound = {
  "X-Header-Array": Array<string>;
};

/** @internal */
export const HeaderParamsArrayRequest$outboundSchema: z.ZodType<
  HeaderParamsArrayRequest$Outbound,
  z.ZodTypeDef,
  HeaderParamsArrayRequest
> = z.object({
  xHeaderArray: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    xHeaderArray: "X-Header-Array",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HeaderParamsArrayRequest$ {
  /** @deprecated use `HeaderParamsArrayRequest$inboundSchema` instead. */
  export const inboundSchema = HeaderParamsArrayRequest$inboundSchema;
  /** @deprecated use `HeaderParamsArrayRequest$outboundSchema` instead. */
  export const outboundSchema = HeaderParamsArrayRequest$outboundSchema;
  /** @deprecated use `HeaderParamsArrayRequest$Outbound` instead. */
  export type Outbound = HeaderParamsArrayRequest$Outbound;
}

/** @internal */
export const HeaderParamsArrayHeaders$inboundSchema: z.ZodType<
  HeaderParamsArrayHeaders,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Header-Array": z.string(),
}).transform((v) => {
  return remap$(v, {
    "X-Header-Array": "xHeaderArray",
  });
});

/** @internal */
export type HeaderParamsArrayHeaders$Outbound = {
  "X-Header-Array": string;
};

/** @internal */
export const HeaderParamsArrayHeaders$outboundSchema: z.ZodType<
  HeaderParamsArrayHeaders$Outbound,
  z.ZodTypeDef,
  HeaderParamsArrayHeaders
> = z.object({
  xHeaderArray: z.string(),
}).transform((v) => {
  return remap$(v, {
    xHeaderArray: "X-Header-Array",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HeaderParamsArrayHeaders$ {
  /** @deprecated use `HeaderParamsArrayHeaders$inboundSchema` instead. */
  export const inboundSchema = HeaderParamsArrayHeaders$inboundSchema;
  /** @deprecated use `HeaderParamsArrayHeaders$outboundSchema` instead. */
  export const outboundSchema = HeaderParamsArrayHeaders$outboundSchema;
  /** @deprecated use `HeaderParamsArrayHeaders$Outbound` instead. */
  export type Outbound = HeaderParamsArrayHeaders$Outbound;
}

/** @internal */
export const HeaderParamsArrayRes$inboundSchema: z.ZodType<
  HeaderParamsArrayRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  headers: z.lazy(() => HeaderParamsArrayHeaders$inboundSchema),
});

/** @internal */
export type HeaderParamsArrayRes$Outbound = {
  headers: HeaderParamsArrayHeaders$Outbound;
};

/** @internal */
export const HeaderParamsArrayRes$outboundSchema: z.ZodType<
  HeaderParamsArrayRes$Outbound,
  z.ZodTypeDef,
  HeaderParamsArrayRes
> = z.object({
  headers: z.lazy(() => HeaderParamsArrayHeaders$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HeaderParamsArrayRes$ {
  /** @deprecated use `HeaderParamsArrayRes$inboundSchema` instead. */
  export const inboundSchema = HeaderParamsArrayRes$inboundSchema;
  /** @deprecated use `HeaderParamsArrayRes$outboundSchema` instead. */
  export const outboundSchema = HeaderParamsArrayRes$outboundSchema;
  /** @deprecated use `HeaderParamsArrayRes$Outbound` instead. */
  export type Outbound = HeaderParamsArrayRes$Outbound;
}
