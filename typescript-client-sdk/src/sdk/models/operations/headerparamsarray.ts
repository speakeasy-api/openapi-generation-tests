/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type HeaderParamsArrayRequest = {
    xHeaderArray: Array<string>;
};

export type Headers = {
    xHeaderArray: string;
};

/**
 * OK
 */
export type HeaderParamsArrayRes = {
    headers: Headers;
};

export type HeaderParamsArrayResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: HeaderParamsArrayRes | undefined;
};

/** @internal */
export namespace HeaderParamsArrayRequest$ {
    export type Inbound = {
        "X-Header-Array": Array<string>;
    };

    export const inboundSchema: z.ZodType<HeaderParamsArrayRequest, z.ZodTypeDef, Inbound> = z
        .object({
            "X-Header-Array": z.array(z.string()),
        })
        .transform((v) => {
            return {
                xHeaderArray: v["X-Header-Array"],
            };
        });

    export type Outbound = {
        "X-Header-Array": Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HeaderParamsArrayRequest> = z
        .object({
            xHeaderArray: z.array(z.string()),
        })
        .transform((v) => {
            return {
                "X-Header-Array": v.xHeaderArray,
            };
        });
}

/** @internal */
export namespace Headers$ {
    export type Inbound = {
        "X-Header-Array": string;
    };

    export const inboundSchema: z.ZodType<Headers, z.ZodTypeDef, Inbound> = z
        .object({
            "X-Header-Array": z.string(),
        })
        .transform((v) => {
            return {
                xHeaderArray: v["X-Header-Array"],
            };
        });

    export type Outbound = {
        "X-Header-Array": string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Headers> = z
        .object({
            xHeaderArray: z.string(),
        })
        .transform((v) => {
            return {
                "X-Header-Array": v.xHeaderArray,
            };
        });
}

/** @internal */
export namespace HeaderParamsArrayRes$ {
    export type Inbound = {
        headers: Headers$.Inbound;
    };

    export const inboundSchema: z.ZodType<HeaderParamsArrayRes, z.ZodTypeDef, Inbound> = z
        .object({
            headers: z.lazy(() => Headers$.inboundSchema),
        })
        .transform((v) => {
            return {
                headers: v.headers,
            };
        });

    export type Outbound = {
        headers: Headers$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HeaderParamsArrayRes> = z
        .object({
            headers: z.lazy(() => Headers$.outboundSchema),
        })
        .transform((v) => {
            return {
                headers: v.headers,
            };
        });
}

/** @internal */
export namespace HeaderParamsArrayResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        res?: HeaderParamsArrayRes$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<HeaderParamsArrayResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => HeaderParamsArrayRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: HeaderParamsArrayRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HeaderParamsArrayResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => HeaderParamsArrayRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
