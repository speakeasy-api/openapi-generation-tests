/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type HeaderParamsMapRequest = {
    xHeaderMap: { [k: string]: string };
    xHeaderMapExplode: { [k: string]: string };
};

export type HeaderParamsMapHeaders = {
    xHeaderMap: string;
    xHeaderMapExplode: string;
};

/**
 * OK
 */
export type HeaderParamsMapRes = {
    headers: HeaderParamsMapHeaders;
};

export type HeaderParamsMapResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: HeaderParamsMapRes | undefined;
};

/** @internal */
export namespace HeaderParamsMapRequest$ {
    export const inboundSchema: z.ZodType<HeaderParamsMapRequest, z.ZodTypeDef, unknown> = z
        .object({
            "X-Header-Map": z.record(z.string()),
            "X-Header-Map-Explode": z.record(z.string()),
        })
        .transform((v) => {
            return {
                xHeaderMap: v["X-Header-Map"],
                xHeaderMapExplode: v["X-Header-Map-Explode"],
            };
        });

    export type Outbound = {
        "X-Header-Map": { [k: string]: string };
        "X-Header-Map-Explode": { [k: string]: string };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HeaderParamsMapRequest> = z
        .object({
            xHeaderMap: z.record(z.string()),
            xHeaderMapExplode: z.record(z.string()),
        })
        .transform((v) => {
            return {
                "X-Header-Map": v.xHeaderMap,
                "X-Header-Map-Explode": v.xHeaderMapExplode,
            };
        });
}

/** @internal */
export namespace HeaderParamsMapHeaders$ {
    export const inboundSchema: z.ZodType<HeaderParamsMapHeaders, z.ZodTypeDef, unknown> = z
        .object({
            "X-Header-Map": z.string(),
            "X-Header-Map-Explode": z.string(),
        })
        .transform((v) => {
            return {
                xHeaderMap: v["X-Header-Map"],
                xHeaderMapExplode: v["X-Header-Map-Explode"],
            };
        });

    export type Outbound = {
        "X-Header-Map": string;
        "X-Header-Map-Explode": string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HeaderParamsMapHeaders> = z
        .object({
            xHeaderMap: z.string(),
            xHeaderMapExplode: z.string(),
        })
        .transform((v) => {
            return {
                "X-Header-Map": v.xHeaderMap,
                "X-Header-Map-Explode": v.xHeaderMapExplode,
            };
        });
}

/** @internal */
export namespace HeaderParamsMapRes$ {
    export const inboundSchema: z.ZodType<HeaderParamsMapRes, z.ZodTypeDef, unknown> = z
        .object({
            headers: z.lazy(() => HeaderParamsMapHeaders$.inboundSchema),
        })
        .transform((v) => {
            return {
                headers: v.headers,
            };
        });

    export type Outbound = {
        headers: HeaderParamsMapHeaders$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HeaderParamsMapRes> = z
        .object({
            headers: z.lazy(() => HeaderParamsMapHeaders$.outboundSchema),
        })
        .transform((v) => {
            return {
                headers: v.headers,
            };
        });
}

/** @internal */
export namespace HeaderParamsMapResponse$ {
    export const inboundSchema: z.ZodType<HeaderParamsMapResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => HeaderParamsMapRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: HeaderParamsMapRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HeaderParamsMapResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => HeaderParamsMapRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
