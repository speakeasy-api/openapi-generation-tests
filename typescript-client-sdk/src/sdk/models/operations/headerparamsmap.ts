/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type HeaderParamsMapRequest = {
    xHeaderMap: { [k: string]: string };
    xHeaderMapExplode: { [k: string]: string };
};

export type HeaderParamsMapHeaders = {
    xHeaderMap: string;
    xHeaderMapExplode: string;
};

/**
 * OK
 */
export type HeaderParamsMapRes = {
    headers: HeaderParamsMapHeaders;
};

/** @internal */
export namespace HeaderParamsMapRequest$ {
    export const inboundSchema: z.ZodType<HeaderParamsMapRequest, z.ZodTypeDef, unknown> = z
        .object({
            "X-Header-Map": z.record(z.string()),
            "X-Header-Map-Explode": z.record(z.string()),
        })
        .transform((v) => {
            return remap$(v, {
                "X-Header-Map": "xHeaderMap",
                "X-Header-Map-Explode": "xHeaderMapExplode",
            });
        });

    export type Outbound = {
        "X-Header-Map": { [k: string]: string };
        "X-Header-Map-Explode": { [k: string]: string };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HeaderParamsMapRequest> = z
        .object({
            xHeaderMap: z.record(z.string()),
            xHeaderMapExplode: z.record(z.string()),
        })
        .transform((v) => {
            return remap$(v, {
                xHeaderMap: "X-Header-Map",
                xHeaderMapExplode: "X-Header-Map-Explode",
            });
        });
}

/** @internal */
export namespace HeaderParamsMapHeaders$ {
    export const inboundSchema: z.ZodType<HeaderParamsMapHeaders, z.ZodTypeDef, unknown> = z
        .object({
            "X-Header-Map": z.string(),
            "X-Header-Map-Explode": z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                "X-Header-Map": "xHeaderMap",
                "X-Header-Map-Explode": "xHeaderMapExplode",
            });
        });

    export type Outbound = {
        "X-Header-Map": string;
        "X-Header-Map-Explode": string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HeaderParamsMapHeaders> = z
        .object({
            xHeaderMap: z.string(),
            xHeaderMapExplode: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                xHeaderMap: "X-Header-Map",
                xHeaderMapExplode: "X-Header-Map-Explode",
            });
        });
}

/** @internal */
export namespace HeaderParamsMapRes$ {
    export const inboundSchema: z.ZodType<HeaderParamsMapRes, z.ZodTypeDef, unknown> = z.object({
        headers: z.lazy(() => HeaderParamsMapHeaders$.inboundSchema),
    });

    export type Outbound = {
        headers: HeaderParamsMapHeaders$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HeaderParamsMapRes> = z.object({
        headers: z.lazy(() => HeaderParamsMapHeaders$.outboundSchema),
    });
}
