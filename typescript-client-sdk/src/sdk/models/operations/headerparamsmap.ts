/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type HeaderParamsMapRequest = {
    xHeaderMap: { [k: string]: string };
    xHeaderMapExplode: { [k: string]: string };
};

export type HeaderParamsMapHeaders = {
    xHeaderMap: string;
    xHeaderMapExplode: string;
};

/**
 * OK
 */
export type HeaderParamsMapRes = {
    headers: HeaderParamsMapHeaders;
};

/** @internal */
export const HeaderParamsMapRequest$inboundSchema: z.ZodType<
    HeaderParamsMapRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "X-Header-Map": z.record(z.string()),
        "X-Header-Map-Explode": z.record(z.string()),
    })
    .transform((v) => {
        return remap$(v, {
            "X-Header-Map": "xHeaderMap",
            "X-Header-Map-Explode": "xHeaderMapExplode",
        });
    });

/** @internal */
export type HeaderParamsMapRequest$Outbound = {
    "X-Header-Map": { [k: string]: string };
    "X-Header-Map-Explode": { [k: string]: string };
};

/** @internal */
export const HeaderParamsMapRequest$outboundSchema: z.ZodType<
    HeaderParamsMapRequest$Outbound,
    z.ZodTypeDef,
    HeaderParamsMapRequest
> = z
    .object({
        xHeaderMap: z.record(z.string()),
        xHeaderMapExplode: z.record(z.string()),
    })
    .transform((v) => {
        return remap$(v, {
            xHeaderMap: "X-Header-Map",
            xHeaderMapExplode: "X-Header-Map-Explode",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HeaderParamsMapRequest$ {
    /** @deprecated use `HeaderParamsMapRequest$inboundSchema` instead. */
    export const inboundSchema = HeaderParamsMapRequest$inboundSchema;
    /** @deprecated use `HeaderParamsMapRequest$outboundSchema` instead. */
    export const outboundSchema = HeaderParamsMapRequest$outboundSchema;
    /** @deprecated use `HeaderParamsMapRequest$Outbound` instead. */
    export type Outbound = HeaderParamsMapRequest$Outbound;
}

/** @internal */
export const HeaderParamsMapHeaders$inboundSchema: z.ZodType<
    HeaderParamsMapHeaders,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "X-Header-Map": z.string(),
        "X-Header-Map-Explode": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "X-Header-Map": "xHeaderMap",
            "X-Header-Map-Explode": "xHeaderMapExplode",
        });
    });

/** @internal */
export type HeaderParamsMapHeaders$Outbound = {
    "X-Header-Map": string;
    "X-Header-Map-Explode": string;
};

/** @internal */
export const HeaderParamsMapHeaders$outboundSchema: z.ZodType<
    HeaderParamsMapHeaders$Outbound,
    z.ZodTypeDef,
    HeaderParamsMapHeaders
> = z
    .object({
        xHeaderMap: z.string(),
        xHeaderMapExplode: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            xHeaderMap: "X-Header-Map",
            xHeaderMapExplode: "X-Header-Map-Explode",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HeaderParamsMapHeaders$ {
    /** @deprecated use `HeaderParamsMapHeaders$inboundSchema` instead. */
    export const inboundSchema = HeaderParamsMapHeaders$inboundSchema;
    /** @deprecated use `HeaderParamsMapHeaders$outboundSchema` instead. */
    export const outboundSchema = HeaderParamsMapHeaders$outboundSchema;
    /** @deprecated use `HeaderParamsMapHeaders$Outbound` instead. */
    export type Outbound = HeaderParamsMapHeaders$Outbound;
}

/** @internal */
export const HeaderParamsMapRes$inboundSchema: z.ZodType<
    HeaderParamsMapRes,
    z.ZodTypeDef,
    unknown
> = z.object({
    headers: z.lazy(() => HeaderParamsMapHeaders$inboundSchema),
});

/** @internal */
export type HeaderParamsMapRes$Outbound = {
    headers: HeaderParamsMapHeaders$Outbound;
};

/** @internal */
export const HeaderParamsMapRes$outboundSchema: z.ZodType<
    HeaderParamsMapRes$Outbound,
    z.ZodTypeDef,
    HeaderParamsMapRes
> = z.object({
    headers: z.lazy(() => HeaderParamsMapHeaders$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HeaderParamsMapRes$ {
    /** @deprecated use `HeaderParamsMapRes$inboundSchema` instead. */
    export const inboundSchema = HeaderParamsMapRes$inboundSchema;
    /** @deprecated use `HeaderParamsMapRes$outboundSchema` instead. */
    export const outboundSchema = HeaderParamsMapRes$outboundSchema;
    /** @deprecated use `HeaderParamsMapRes$Outbound` instead. */
    export type Outbound = HeaderParamsMapRes$Outbound;
}
