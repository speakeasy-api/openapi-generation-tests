/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HeaderParamsNilRequest = {
  nullableHeader: string | null;
  optionalHeader?: string | undefined;
  optionalNullableHeader?: string | null | undefined;
};

/**
 * OK
 */
export type HeaderParamsNilRes = {
  headers: { [k: string]: any };
};

/** @internal */
export const HeaderParamsNilRequest$inboundSchema: z.ZodType<
  HeaderParamsNilRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Nullable-Header": z.nullable(z.string()),
  "Optional-Header": z.string().optional(),
  "Optional-Nullable-Header": z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "Nullable-Header": "nullableHeader",
    "Optional-Header": "optionalHeader",
    "Optional-Nullable-Header": "optionalNullableHeader",
  });
});

/** @internal */
export type HeaderParamsNilRequest$Outbound = {
  "Nullable-Header": string | null;
  "Optional-Header"?: string | undefined;
  "Optional-Nullable-Header"?: string | null | undefined;
};

/** @internal */
export const HeaderParamsNilRequest$outboundSchema: z.ZodType<
  HeaderParamsNilRequest$Outbound,
  z.ZodTypeDef,
  HeaderParamsNilRequest
> = z.object({
  nullableHeader: z.nullable(z.string()),
  optionalHeader: z.string().optional(),
  optionalNullableHeader: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    nullableHeader: "Nullable-Header",
    optionalHeader: "Optional-Header",
    optionalNullableHeader: "Optional-Nullable-Header",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HeaderParamsNilRequest$ {
  /** @deprecated use `HeaderParamsNilRequest$inboundSchema` instead. */
  export const inboundSchema = HeaderParamsNilRequest$inboundSchema;
  /** @deprecated use `HeaderParamsNilRequest$outboundSchema` instead. */
  export const outboundSchema = HeaderParamsNilRequest$outboundSchema;
  /** @deprecated use `HeaderParamsNilRequest$Outbound` instead. */
  export type Outbound = HeaderParamsNilRequest$Outbound;
}

export function headerParamsNilRequestToJSON(
  headerParamsNilRequest: HeaderParamsNilRequest,
): string {
  return JSON.stringify(
    HeaderParamsNilRequest$outboundSchema.parse(headerParamsNilRequest),
  );
}

export function headerParamsNilRequestFromJSON(
  jsonString: string,
): SafeParseResult<HeaderParamsNilRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HeaderParamsNilRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HeaderParamsNilRequest' from JSON`,
  );
}

/** @internal */
export const HeaderParamsNilRes$inboundSchema: z.ZodType<
  HeaderParamsNilRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  headers: z.record(z.any()),
});

/** @internal */
export type HeaderParamsNilRes$Outbound = {
  headers: { [k: string]: any };
};

/** @internal */
export const HeaderParamsNilRes$outboundSchema: z.ZodType<
  HeaderParamsNilRes$Outbound,
  z.ZodTypeDef,
  HeaderParamsNilRes
> = z.object({
  headers: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HeaderParamsNilRes$ {
  /** @deprecated use `HeaderParamsNilRes$inboundSchema` instead. */
  export const inboundSchema = HeaderParamsNilRes$inboundSchema;
  /** @deprecated use `HeaderParamsNilRes$outboundSchema` instead. */
  export const outboundSchema = HeaderParamsNilRes$outboundSchema;
  /** @deprecated use `HeaderParamsNilRes$Outbound` instead. */
  export type Outbound = HeaderParamsNilRes$Outbound;
}

export function headerParamsNilResToJSON(
  headerParamsNilRes: HeaderParamsNilRes,
): string {
  return JSON.stringify(
    HeaderParamsNilRes$outboundSchema.parse(headerParamsNilRes),
  );
}

export function headerParamsNilResFromJSON(
  jsonString: string,
): SafeParseResult<HeaderParamsNilRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HeaderParamsNilRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HeaderParamsNilRes' from JSON`,
  );
}
