/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";

export type HeaderParamsObjectRequest = {
  /**
   * A simple object that uses all our supported primitive types and enums and has optional properties.
   */
  xHeaderObj: shared.SimpleObject;
  /**
   * A simple object that uses all our supported primitive types and enums and has optional properties.
   */
  xHeaderObjExplode: shared.SimpleObject;
};

export type HeaderParamsObjectHeaders = {
  xHeaderObj: string;
  xHeaderObjExplode: string;
};

/**
 * OK
 */
export type HeaderParamsObjectRes = {
  headers: HeaderParamsObjectHeaders;
};

/** @internal */
export const HeaderParamsObjectRequest$inboundSchema: z.ZodType<
  HeaderParamsObjectRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Header-Obj": shared.SimpleObject$inboundSchema,
  "X-Header-Obj-Explode": shared.SimpleObject$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "X-Header-Obj": "xHeaderObj",
    "X-Header-Obj-Explode": "xHeaderObjExplode",
  });
});

/** @internal */
export type HeaderParamsObjectRequest$Outbound = {
  "X-Header-Obj": shared.SimpleObject$Outbound;
  "X-Header-Obj-Explode": shared.SimpleObject$Outbound;
};

/** @internal */
export const HeaderParamsObjectRequest$outboundSchema: z.ZodType<
  HeaderParamsObjectRequest$Outbound,
  z.ZodTypeDef,
  HeaderParamsObjectRequest
> = z.object({
  xHeaderObj: shared.SimpleObject$outboundSchema,
  xHeaderObjExplode: shared.SimpleObject$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xHeaderObj: "X-Header-Obj",
    xHeaderObjExplode: "X-Header-Obj-Explode",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HeaderParamsObjectRequest$ {
  /** @deprecated use `HeaderParamsObjectRequest$inboundSchema` instead. */
  export const inboundSchema = HeaderParamsObjectRequest$inboundSchema;
  /** @deprecated use `HeaderParamsObjectRequest$outboundSchema` instead. */
  export const outboundSchema = HeaderParamsObjectRequest$outboundSchema;
  /** @deprecated use `HeaderParamsObjectRequest$Outbound` instead. */
  export type Outbound = HeaderParamsObjectRequest$Outbound;
}

/** @internal */
export const HeaderParamsObjectHeaders$inboundSchema: z.ZodType<
  HeaderParamsObjectHeaders,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Header-Obj": z.string(),
  "X-Header-Obj-Explode": z.string(),
}).transform((v) => {
  return remap$(v, {
    "X-Header-Obj": "xHeaderObj",
    "X-Header-Obj-Explode": "xHeaderObjExplode",
  });
});

/** @internal */
export type HeaderParamsObjectHeaders$Outbound = {
  "X-Header-Obj": string;
  "X-Header-Obj-Explode": string;
};

/** @internal */
export const HeaderParamsObjectHeaders$outboundSchema: z.ZodType<
  HeaderParamsObjectHeaders$Outbound,
  z.ZodTypeDef,
  HeaderParamsObjectHeaders
> = z.object({
  xHeaderObj: z.string(),
  xHeaderObjExplode: z.string(),
}).transform((v) => {
  return remap$(v, {
    xHeaderObj: "X-Header-Obj",
    xHeaderObjExplode: "X-Header-Obj-Explode",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HeaderParamsObjectHeaders$ {
  /** @deprecated use `HeaderParamsObjectHeaders$inboundSchema` instead. */
  export const inboundSchema = HeaderParamsObjectHeaders$inboundSchema;
  /** @deprecated use `HeaderParamsObjectHeaders$outboundSchema` instead. */
  export const outboundSchema = HeaderParamsObjectHeaders$outboundSchema;
  /** @deprecated use `HeaderParamsObjectHeaders$Outbound` instead. */
  export type Outbound = HeaderParamsObjectHeaders$Outbound;
}

/** @internal */
export const HeaderParamsObjectRes$inboundSchema: z.ZodType<
  HeaderParamsObjectRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  headers: z.lazy(() => HeaderParamsObjectHeaders$inboundSchema),
});

/** @internal */
export type HeaderParamsObjectRes$Outbound = {
  headers: HeaderParamsObjectHeaders$Outbound;
};

/** @internal */
export const HeaderParamsObjectRes$outboundSchema: z.ZodType<
  HeaderParamsObjectRes$Outbound,
  z.ZodTypeDef,
  HeaderParamsObjectRes
> = z.object({
  headers: z.lazy(() => HeaderParamsObjectHeaders$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HeaderParamsObjectRes$ {
  /** @deprecated use `HeaderParamsObjectRes$inboundSchema` instead. */
  export const inboundSchema = HeaderParamsObjectRes$inboundSchema;
  /** @deprecated use `HeaderParamsObjectRes$outboundSchema` instead. */
  export const outboundSchema = HeaderParamsObjectRes$outboundSchema;
  /** @deprecated use `HeaderParamsObjectRes$Outbound` instead. */
  export type Outbound = HeaderParamsObjectRes$Outbound;
}
