/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as shared from "../shared";
import * as z from "zod";

export type HeaderParamsObjectRequest = {
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    xHeaderObj: shared.SimpleObject;
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    xHeaderObjExplode: shared.SimpleObject;
};

export type HeaderParamsObjectHeaders = {
    xHeaderObj: string;
    xHeaderObjExplode: string;
};

/**
 * OK
 */
export type HeaderParamsObjectRes = {
    headers: HeaderParamsObjectHeaders;
};

export type HeaderParamsObjectResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: HeaderParamsObjectRes | undefined;
};

/** @internal */
export namespace HeaderParamsObjectRequest$ {
    export const inboundSchema: z.ZodType<HeaderParamsObjectRequest, z.ZodTypeDef, unknown> = z
        .object({
            "X-Header-Obj": shared.SimpleObject$.inboundSchema,
            "X-Header-Obj-Explode": shared.SimpleObject$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                "X-Header-Obj": "xHeaderObj",
                "X-Header-Obj-Explode": "xHeaderObjExplode",
            });
        });

    export type Outbound = {
        "X-Header-Obj": shared.SimpleObject$.Outbound;
        "X-Header-Obj-Explode": shared.SimpleObject$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HeaderParamsObjectRequest> = z
        .object({
            xHeaderObj: shared.SimpleObject$.outboundSchema,
            xHeaderObjExplode: shared.SimpleObject$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                xHeaderObj: "X-Header-Obj",
                xHeaderObjExplode: "X-Header-Obj-Explode",
            });
        });
}

/** @internal */
export namespace HeaderParamsObjectHeaders$ {
    export const inboundSchema: z.ZodType<HeaderParamsObjectHeaders, z.ZodTypeDef, unknown> = z
        .object({
            "X-Header-Obj": z.string(),
            "X-Header-Obj-Explode": z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                "X-Header-Obj": "xHeaderObj",
                "X-Header-Obj-Explode": "xHeaderObjExplode",
            });
        });

    export type Outbound = {
        "X-Header-Obj": string;
        "X-Header-Obj-Explode": string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HeaderParamsObjectHeaders> = z
        .object({
            xHeaderObj: z.string(),
            xHeaderObjExplode: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                xHeaderObj: "X-Header-Obj",
                xHeaderObjExplode: "X-Header-Obj-Explode",
            });
        });
}

/** @internal */
export namespace HeaderParamsObjectRes$ {
    export const inboundSchema: z.ZodType<HeaderParamsObjectRes, z.ZodTypeDef, unknown> = z.object({
        headers: z.lazy(() => HeaderParamsObjectHeaders$.inboundSchema),
    });

    export type Outbound = {
        headers: HeaderParamsObjectHeaders$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HeaderParamsObjectRes> =
        z.object({
            headers: z.lazy(() => HeaderParamsObjectHeaders$.outboundSchema),
        });
}

/** @internal */
export namespace HeaderParamsObjectResponse$ {
    export const inboundSchema: z.ZodType<HeaderParamsObjectResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => HeaderParamsObjectRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: HeaderParamsObjectRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HeaderParamsObjectResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => HeaderParamsObjectRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
