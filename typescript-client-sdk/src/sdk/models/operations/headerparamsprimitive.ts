/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type HeaderParamsPrimitiveRequest = {
    xHeaderBoolean: boolean;
    xHeaderInteger: number;
    xHeaderNumber: number;
    xHeaderString: string;
};

export type HeaderParamsPrimitiveHeaders = {
    xHeaderBoolean: string;
    xHeaderInteger: string;
    xHeaderNumber: string;
    xHeaderString: string;
};

/**
 * OK
 */
export type HeaderParamsPrimitiveRes = {
    headers: HeaderParamsPrimitiveHeaders;
};

export type HeaderParamsPrimitiveResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: HeaderParamsPrimitiveRes | undefined;
};

/** @internal */
export namespace HeaderParamsPrimitiveRequest$ {
    export const inboundSchema: z.ZodType<HeaderParamsPrimitiveRequest, z.ZodTypeDef, unknown> = z
        .object({
            "X-Header-Boolean": z.boolean(),
            "X-Header-Integer": z.number().int(),
            "X-Header-Number": z.number(),
            "X-Header-String": z.string(),
        })
        .transform((v) => {
            return {
                xHeaderBoolean: v["X-Header-Boolean"],
                xHeaderInteger: v["X-Header-Integer"],
                xHeaderNumber: v["X-Header-Number"],
                xHeaderString: v["X-Header-String"],
            };
        });

    export type Outbound = {
        "X-Header-Boolean": boolean;
        "X-Header-Integer": number;
        "X-Header-Number": number;
        "X-Header-String": string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HeaderParamsPrimitiveRequest> = z
        .object({
            xHeaderBoolean: z.boolean(),
            xHeaderInteger: z.number().int(),
            xHeaderNumber: z.number(),
            xHeaderString: z.string(),
        })
        .transform((v) => {
            return {
                "X-Header-Boolean": v.xHeaderBoolean,
                "X-Header-Integer": v.xHeaderInteger,
                "X-Header-Number": v.xHeaderNumber,
                "X-Header-String": v.xHeaderString,
            };
        });
}

/** @internal */
export namespace HeaderParamsPrimitiveHeaders$ {
    export const inboundSchema: z.ZodType<HeaderParamsPrimitiveHeaders, z.ZodTypeDef, unknown> = z
        .object({
            "X-Header-Boolean": z.string(),
            "X-Header-Integer": z.string(),
            "X-Header-Number": z.string(),
            "X-Header-String": z.string(),
        })
        .transform((v) => {
            return {
                xHeaderBoolean: v["X-Header-Boolean"],
                xHeaderInteger: v["X-Header-Integer"],
                xHeaderNumber: v["X-Header-Number"],
                xHeaderString: v["X-Header-String"],
            };
        });

    export type Outbound = {
        "X-Header-Boolean": string;
        "X-Header-Integer": string;
        "X-Header-Number": string;
        "X-Header-String": string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HeaderParamsPrimitiveHeaders> = z
        .object({
            xHeaderBoolean: z.string(),
            xHeaderInteger: z.string(),
            xHeaderNumber: z.string(),
            xHeaderString: z.string(),
        })
        .transform((v) => {
            return {
                "X-Header-Boolean": v.xHeaderBoolean,
                "X-Header-Integer": v.xHeaderInteger,
                "X-Header-Number": v.xHeaderNumber,
                "X-Header-String": v.xHeaderString,
            };
        });
}

/** @internal */
export namespace HeaderParamsPrimitiveRes$ {
    export const inboundSchema: z.ZodType<HeaderParamsPrimitiveRes, z.ZodTypeDef, unknown> = z
        .object({
            headers: z.lazy(() => HeaderParamsPrimitiveHeaders$.inboundSchema),
        })
        .transform((v) => {
            return {
                headers: v.headers,
            };
        });

    export type Outbound = {
        headers: HeaderParamsPrimitiveHeaders$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HeaderParamsPrimitiveRes> = z
        .object({
            headers: z.lazy(() => HeaderParamsPrimitiveHeaders$.outboundSchema),
        })
        .transform((v) => {
            return {
                headers: v.headers,
            };
        });
}

/** @internal */
export namespace HeaderParamsPrimitiveResponse$ {
    export const inboundSchema: z.ZodType<HeaderParamsPrimitiveResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => HeaderParamsPrimitiveRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: HeaderParamsPrimitiveRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HeaderParamsPrimitiveResponse> =
        z
            .object({
                contentType: z.string(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
                res: z.lazy(() => HeaderParamsPrimitiveRes$.outboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    ContentType: v.contentType,
                    StatusCode: v.statusCode,
                    RawResponse: v.rawResponse,
                    ...(v.res === undefined ? null : { res: v.res }),
                };
            });
}
