/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type IgnoresPostRequestBody = {
    callbackUrl?: string | undefined;
    testProp?: string | undefined;
};

export type IgnoresPostRequest = {
    requestBody: IgnoresPostRequestBody;
    testParam?: string | undefined;
};

export type IgnoresPostResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    httpBinSimpleJsonObject?: shared.HttpBinSimpleJsonObject | undefined;
};

/** @internal */
export namespace IgnoresPostRequestBody$ {
    export const inboundSchema: z.ZodType<IgnoresPostRequestBody, z.ZodTypeDef, unknown> = z.object(
        {
            callbackUrl: z.string().optional(),
            testProp: z.string().optional(),
        }
    );

    export type Outbound = {
        callbackUrl?: string | undefined;
        testProp?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IgnoresPostRequestBody> =
        z.object({
            callbackUrl: z.string().optional(),
            testProp: z.string().optional(),
        });
}

/** @internal */
export namespace IgnoresPostRequest$ {
    export const inboundSchema: z.ZodType<IgnoresPostRequest, z.ZodTypeDef, unknown> = z
        .object({
            RequestBody: z.lazy(() => IgnoresPostRequestBody$.inboundSchema),
            testParam: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        RequestBody: IgnoresPostRequestBody$.Outbound;
        testParam?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IgnoresPostRequest> = z
        .object({
            requestBody: z.lazy(() => IgnoresPostRequestBody$.outboundSchema),
            testParam: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace IgnoresPostResponse$ {
    export const inboundSchema: z.ZodType<IgnoresPostResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            httpBinSimpleJsonObject: shared.HttpBinSimpleJsonObject$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        httpBinSimpleJsonObject?: shared.HttpBinSimpleJsonObject$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IgnoresPostResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            httpBinSimpleJsonObject: shared.HttpBinSimpleJsonObject$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
