/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * OK
 */
export type InfectedWithAnyRes = {
  json: shared.InfectedWithAny;
};

/** @internal */
export const InfectedWithAnyRes$inboundSchema: z.ZodType<
  InfectedWithAnyRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  json: z.lazy(() => shared.InfectedWithAny$inboundSchema),
});

/** @internal */
export type InfectedWithAnyRes$Outbound = {
  json: shared.InfectedWithAny$Outbound;
};

/** @internal */
export const InfectedWithAnyRes$outboundSchema: z.ZodType<
  InfectedWithAnyRes$Outbound,
  z.ZodTypeDef,
  InfectedWithAnyRes
> = z.object({
  json: z.lazy(() => shared.InfectedWithAny$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InfectedWithAnyRes$ {
  /** @deprecated use `InfectedWithAnyRes$inboundSchema` instead. */
  export const inboundSchema = InfectedWithAnyRes$inboundSchema;
  /** @deprecated use `InfectedWithAnyRes$outboundSchema` instead. */
  export const outboundSchema = InfectedWithAnyRes$outboundSchema;
  /** @deprecated use `InfectedWithAnyRes$Outbound` instead. */
  export type Outbound = InfectedWithAnyRes$Outbound;
}

export function infectedWithAnyResToJSON(
  infectedWithAnyRes: InfectedWithAnyRes,
): string {
  return JSON.stringify(
    InfectedWithAnyRes$outboundSchema.parse(infectedWithAnyRes),
  );
}

export function infectedWithAnyResFromJSON(
  jsonString: string,
): SafeParseResult<InfectedWithAnyRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InfectedWithAnyRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InfectedWithAnyRes' from JSON`,
  );
}
