/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type InlineBodyAndParamConflictRequestBody = {
    str: string;
};

export type InlineBodyAndParamConflictRequest = {
    requestBody: InlineBodyAndParamConflictRequestBody;
    str: string;
};

export type Json = {
    str: string;
};

/**
 * OK
 */
export type InlineBodyAndParamConflictRes = {
    args: { [k: string]: string };
    json: Json;
};

/** @internal */
export namespace InlineBodyAndParamConflictRequestBody$ {
    export const inboundSchema: z.ZodType<
        InlineBodyAndParamConflictRequestBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        str: z.string(),
    });

    export type Outbound = {
        str: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        InlineBodyAndParamConflictRequestBody
    > = z.object({
        str: z.string(),
    });
}

/** @internal */
export namespace InlineBodyAndParamConflictRequest$ {
    export const inboundSchema: z.ZodType<
        InlineBodyAndParamConflictRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            RequestBody: z.lazy(() => InlineBodyAndParamConflictRequestBody$.inboundSchema),
            str: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        RequestBody: InlineBodyAndParamConflictRequestBody$.Outbound;
        str: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        InlineBodyAndParamConflictRequest
    > = z
        .object({
            requestBody: z.lazy(() => InlineBodyAndParamConflictRequestBody$.outboundSchema),
            str: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace Json$ {
    export const inboundSchema: z.ZodType<Json, z.ZodTypeDef, unknown> = z.object({
        str: z.string(),
    });

    export type Outbound = {
        str: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Json> = z.object({
        str: z.string(),
    });
}

/** @internal */
export namespace InlineBodyAndParamConflictRes$ {
    export const inboundSchema: z.ZodType<InlineBodyAndParamConflictRes, z.ZodTypeDef, unknown> =
        z.object({
            args: z.record(z.string()),
            json: z.lazy(() => Json$.inboundSchema),
        });

    export type Outbound = {
        args: { [k: string]: string };
        json: Json$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InlineBodyAndParamConflictRes> =
        z.object({
            args: z.record(z.string()),
            json: z.lazy(() => Json$.outboundSchema),
        });
}
