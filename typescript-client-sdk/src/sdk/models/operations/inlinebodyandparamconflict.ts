/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

export type InlineBodyAndParamConflictRequestBody = {
  str: string;
};

export type InlineBodyAndParamConflictRequest = {
  requestBody: InlineBodyAndParamConflictRequestBody;
  str: string;
};

export type Json = {
  str: string;
};

/**
 * OK
 */
export type InlineBodyAndParamConflictRes = {
  args: { [k: string]: string };
  json: Json;
};

/** @internal */
export const InlineBodyAndParamConflictRequestBody$inboundSchema: z.ZodType<
  InlineBodyAndParamConflictRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  str: z.string(),
});

/** @internal */
export type InlineBodyAndParamConflictRequestBody$Outbound = {
  str: string;
};

/** @internal */
export const InlineBodyAndParamConflictRequestBody$outboundSchema: z.ZodType<
  InlineBodyAndParamConflictRequestBody$Outbound,
  z.ZodTypeDef,
  InlineBodyAndParamConflictRequestBody
> = z.object({
  str: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InlineBodyAndParamConflictRequestBody$ {
  /** @deprecated use `InlineBodyAndParamConflictRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    InlineBodyAndParamConflictRequestBody$inboundSchema;
  /** @deprecated use `InlineBodyAndParamConflictRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    InlineBodyAndParamConflictRequestBody$outboundSchema;
  /** @deprecated use `InlineBodyAndParamConflictRequestBody$Outbound` instead. */
  export type Outbound = InlineBodyAndParamConflictRequestBody$Outbound;
}

/** @internal */
export const InlineBodyAndParamConflictRequest$inboundSchema: z.ZodType<
  InlineBodyAndParamConflictRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.lazy(() =>
    InlineBodyAndParamConflictRequestBody$inboundSchema
  ),
  str: z.string(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type InlineBodyAndParamConflictRequest$Outbound = {
  RequestBody: InlineBodyAndParamConflictRequestBody$Outbound;
  str: string;
};

/** @internal */
export const InlineBodyAndParamConflictRequest$outboundSchema: z.ZodType<
  InlineBodyAndParamConflictRequest$Outbound,
  z.ZodTypeDef,
  InlineBodyAndParamConflictRequest
> = z.object({
  requestBody: z.lazy(() =>
    InlineBodyAndParamConflictRequestBody$outboundSchema
  ),
  str: z.string(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InlineBodyAndParamConflictRequest$ {
  /** @deprecated use `InlineBodyAndParamConflictRequest$inboundSchema` instead. */
  export const inboundSchema = InlineBodyAndParamConflictRequest$inboundSchema;
  /** @deprecated use `InlineBodyAndParamConflictRequest$outboundSchema` instead. */
  export const outboundSchema =
    InlineBodyAndParamConflictRequest$outboundSchema;
  /** @deprecated use `InlineBodyAndParamConflictRequest$Outbound` instead. */
  export type Outbound = InlineBodyAndParamConflictRequest$Outbound;
}

/** @internal */
export const Json$inboundSchema: z.ZodType<Json, z.ZodTypeDef, unknown> = z
  .object({
    str: z.string(),
  });

/** @internal */
export type Json$Outbound = {
  str: string;
};

/** @internal */
export const Json$outboundSchema: z.ZodType<Json$Outbound, z.ZodTypeDef, Json> =
  z.object({
    str: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Json$ {
  /** @deprecated use `Json$inboundSchema` instead. */
  export const inboundSchema = Json$inboundSchema;
  /** @deprecated use `Json$outboundSchema` instead. */
  export const outboundSchema = Json$outboundSchema;
  /** @deprecated use `Json$Outbound` instead. */
  export type Outbound = Json$Outbound;
}

/** @internal */
export const InlineBodyAndParamConflictRes$inboundSchema: z.ZodType<
  InlineBodyAndParamConflictRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  args: z.record(z.string()),
  json: z.lazy(() => Json$inboundSchema),
});

/** @internal */
export type InlineBodyAndParamConflictRes$Outbound = {
  args: { [k: string]: string };
  json: Json$Outbound;
};

/** @internal */
export const InlineBodyAndParamConflictRes$outboundSchema: z.ZodType<
  InlineBodyAndParamConflictRes$Outbound,
  z.ZodTypeDef,
  InlineBodyAndParamConflictRes
> = z.object({
  args: z.record(z.string()),
  json: z.lazy(() => Json$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InlineBodyAndParamConflictRes$ {
  /** @deprecated use `InlineBodyAndParamConflictRes$inboundSchema` instead. */
  export const inboundSchema = InlineBodyAndParamConflictRes$inboundSchema;
  /** @deprecated use `InlineBodyAndParamConflictRes$outboundSchema` instead. */
  export const outboundSchema = InlineBodyAndParamConflictRes$outboundSchema;
  /** @deprecated use `InlineBodyAndParamConflictRes$Outbound` instead. */
  export type Outbound = InlineBodyAndParamConflictRes$Outbound;
}
