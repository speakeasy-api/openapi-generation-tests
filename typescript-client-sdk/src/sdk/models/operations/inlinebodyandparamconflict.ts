/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type InlineBodyAndParamConflictRequestBody = {
    str: string;
};

export type InlineBodyAndParamConflictRequest = {
    requestBody: InlineBodyAndParamConflictRequestBody;
    str: string;
};

export type Json = {
    str: string;
};

/**
 * OK
 */
export type InlineBodyAndParamConflictRes = {
    args: Record<string, string>;
    json: Json;
};

export type InlineBodyAndParamConflictResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: InlineBodyAndParamConflictRes | undefined;
};

/** @internal */
export namespace InlineBodyAndParamConflictRequestBody$ {
    export type Inbound = {
        str: string;
    };

    export const inboundSchema: z.ZodType<
        InlineBodyAndParamConflictRequestBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            str: z.string(),
        })
        .transform((v) => {
            return {
                str: v.str,
            };
        });

    export type Outbound = {
        str: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        InlineBodyAndParamConflictRequestBody
    > = z
        .object({
            str: z.string(),
        })
        .transform((v) => {
            return {
                str: v.str,
            };
        });
}

/** @internal */
export namespace InlineBodyAndParamConflictRequest$ {
    export type Inbound = {
        RequestBody: InlineBodyAndParamConflictRequestBody$.Inbound;
        str: string;
    };

    export const inboundSchema: z.ZodType<
        InlineBodyAndParamConflictRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            RequestBody: z.lazy(() => InlineBodyAndParamConflictRequestBody$.inboundSchema),
            str: z.string(),
        })
        .transform((v) => {
            return {
                requestBody: v.RequestBody,
                str: v.str,
            };
        });

    export type Outbound = {
        RequestBody: InlineBodyAndParamConflictRequestBody$.Outbound;
        str: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        InlineBodyAndParamConflictRequest
    > = z
        .object({
            requestBody: z.lazy(() => InlineBodyAndParamConflictRequestBody$.outboundSchema),
            str: z.string(),
        })
        .transform((v) => {
            return {
                RequestBody: v.requestBody,
                str: v.str,
            };
        });
}

/** @internal */
export namespace Json$ {
    export type Inbound = {
        str: string;
    };

    export const inboundSchema: z.ZodType<Json, z.ZodTypeDef, Inbound> = z
        .object({
            str: z.string(),
        })
        .transform((v) => {
            return {
                str: v.str,
            };
        });

    export type Outbound = {
        str: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Json> = z
        .object({
            str: z.string(),
        })
        .transform((v) => {
            return {
                str: v.str,
            };
        });
}

/** @internal */
export namespace InlineBodyAndParamConflictRes$ {
    export type Inbound = {
        args: Record<string, string>;
        json: Json$.Inbound;
    };

    export const inboundSchema: z.ZodType<InlineBodyAndParamConflictRes, z.ZodTypeDef, Inbound> = z
        .object({
            args: z.record(z.string()),
            json: z.lazy(() => Json$.inboundSchema),
        })
        .transform((v) => {
            return {
                args: v.args,
                json: v.json,
            };
        });

    export type Outbound = {
        args: Record<string, string>;
        json: Json$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InlineBodyAndParamConflictRes> =
        z
            .object({
                args: z.record(z.string()),
                json: z.lazy(() => Json$.outboundSchema),
            })
            .transform((v) => {
                return {
                    args: v.args,
                    json: v.json,
                };
            });
}

/** @internal */
export namespace InlineBodyAndParamConflictResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        res?: InlineBodyAndParamConflictRes$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        InlineBodyAndParamConflictResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => InlineBodyAndParamConflictRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: InlineBodyAndParamConflictRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        InlineBodyAndParamConflictResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => InlineBodyAndParamConflictRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
