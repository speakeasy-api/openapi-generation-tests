/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type InlineBodyAndParamNoConflictRequestBody = {
    bodyStr: string;
};

export type InlineBodyAndParamNoConflictRequest = {
    requestBody: InlineBodyAndParamNoConflictRequestBody;
    paramStr: string;
};

export type InlineBodyAndParamNoConflictJson = {
    bodyStr: string;
};

/**
 * OK
 */
export type InlineBodyAndParamNoConflictRes = {
    args: { [k: string]: string };
    json: InlineBodyAndParamNoConflictJson;
};

/** @internal */
export namespace InlineBodyAndParamNoConflictRequestBody$ {
    export const inboundSchema: z.ZodType<
        InlineBodyAndParamNoConflictRequestBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        bodyStr: z.string(),
    });

    export type Outbound = {
        bodyStr: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        InlineBodyAndParamNoConflictRequestBody
    > = z.object({
        bodyStr: z.string(),
    });
}

/** @internal */
export namespace InlineBodyAndParamNoConflictRequest$ {
    export const inboundSchema: z.ZodType<
        InlineBodyAndParamNoConflictRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            RequestBody: z.lazy(() => InlineBodyAndParamNoConflictRequestBody$.inboundSchema),
            paramStr: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        RequestBody: InlineBodyAndParamNoConflictRequestBody$.Outbound;
        paramStr: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        InlineBodyAndParamNoConflictRequest
    > = z
        .object({
            requestBody: z.lazy(() => InlineBodyAndParamNoConflictRequestBody$.outboundSchema),
            paramStr: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace InlineBodyAndParamNoConflictJson$ {
    export const inboundSchema: z.ZodType<InlineBodyAndParamNoConflictJson, z.ZodTypeDef, unknown> =
        z.object({
            bodyStr: z.string(),
        });

    export type Outbound = {
        bodyStr: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        InlineBodyAndParamNoConflictJson
    > = z.object({
        bodyStr: z.string(),
    });
}

/** @internal */
export namespace InlineBodyAndParamNoConflictRes$ {
    export const inboundSchema: z.ZodType<InlineBodyAndParamNoConflictRes, z.ZodTypeDef, unknown> =
        z.object({
            args: z.record(z.string()),
            json: z.lazy(() => InlineBodyAndParamNoConflictJson$.inboundSchema),
        });

    export type Outbound = {
        args: { [k: string]: string };
        json: InlineBodyAndParamNoConflictJson$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        InlineBodyAndParamNoConflictRes
    > = z.object({
        args: z.record(z.string()),
        json: z.lazy(() => InlineBodyAndParamNoConflictJson$.outboundSchema),
    });
}
