/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type InlineBodyAndParamNoConflictRequestBody = {
    bodyStr: string;
};

export type InlineBodyAndParamNoConflictRequest = {
    requestBody: InlineBodyAndParamNoConflictRequestBody;
    paramStr: string;
};

export type InlineBodyAndParamNoConflictJson = {
    bodyStr: string;
};

/**
 * OK
 */
export type InlineBodyAndParamNoConflictRes = {
    args: { [k: string]: string };
    json: InlineBodyAndParamNoConflictJson;
};

/** @internal */
export const InlineBodyAndParamNoConflictRequestBody$inboundSchema: z.ZodType<
    InlineBodyAndParamNoConflictRequestBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    bodyStr: z.string(),
});

/** @internal */
export type InlineBodyAndParamNoConflictRequestBody$Outbound = {
    bodyStr: string;
};

/** @internal */
export const InlineBodyAndParamNoConflictRequestBody$outboundSchema: z.ZodType<
    InlineBodyAndParamNoConflictRequestBody$Outbound,
    z.ZodTypeDef,
    InlineBodyAndParamNoConflictRequestBody
> = z.object({
    bodyStr: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InlineBodyAndParamNoConflictRequestBody$ {
    /** @deprecated use `InlineBodyAndParamNoConflictRequestBody$inboundSchema` instead. */
    export const inboundSchema = InlineBodyAndParamNoConflictRequestBody$inboundSchema;
    /** @deprecated use `InlineBodyAndParamNoConflictRequestBody$outboundSchema` instead. */
    export const outboundSchema = InlineBodyAndParamNoConflictRequestBody$outboundSchema;
    /** @deprecated use `InlineBodyAndParamNoConflictRequestBody$Outbound` instead. */
    export type Outbound = InlineBodyAndParamNoConflictRequestBody$Outbound;
}

/** @internal */
export const InlineBodyAndParamNoConflictRequest$inboundSchema: z.ZodType<
    InlineBodyAndParamNoConflictRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        RequestBody: z.lazy(() => InlineBodyAndParamNoConflictRequestBody$inboundSchema),
        paramStr: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            RequestBody: "requestBody",
        });
    });

/** @internal */
export type InlineBodyAndParamNoConflictRequest$Outbound = {
    RequestBody: InlineBodyAndParamNoConflictRequestBody$Outbound;
    paramStr: string;
};

/** @internal */
export const InlineBodyAndParamNoConflictRequest$outboundSchema: z.ZodType<
    InlineBodyAndParamNoConflictRequest$Outbound,
    z.ZodTypeDef,
    InlineBodyAndParamNoConflictRequest
> = z
    .object({
        requestBody: z.lazy(() => InlineBodyAndParamNoConflictRequestBody$outboundSchema),
        paramStr: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            requestBody: "RequestBody",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InlineBodyAndParamNoConflictRequest$ {
    /** @deprecated use `InlineBodyAndParamNoConflictRequest$inboundSchema` instead. */
    export const inboundSchema = InlineBodyAndParamNoConflictRequest$inboundSchema;
    /** @deprecated use `InlineBodyAndParamNoConflictRequest$outboundSchema` instead. */
    export const outboundSchema = InlineBodyAndParamNoConflictRequest$outboundSchema;
    /** @deprecated use `InlineBodyAndParamNoConflictRequest$Outbound` instead. */
    export type Outbound = InlineBodyAndParamNoConflictRequest$Outbound;
}

/** @internal */
export const InlineBodyAndParamNoConflictJson$inboundSchema: z.ZodType<
    InlineBodyAndParamNoConflictJson,
    z.ZodTypeDef,
    unknown
> = z.object({
    bodyStr: z.string(),
});

/** @internal */
export type InlineBodyAndParamNoConflictJson$Outbound = {
    bodyStr: string;
};

/** @internal */
export const InlineBodyAndParamNoConflictJson$outboundSchema: z.ZodType<
    InlineBodyAndParamNoConflictJson$Outbound,
    z.ZodTypeDef,
    InlineBodyAndParamNoConflictJson
> = z.object({
    bodyStr: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InlineBodyAndParamNoConflictJson$ {
    /** @deprecated use `InlineBodyAndParamNoConflictJson$inboundSchema` instead. */
    export const inboundSchema = InlineBodyAndParamNoConflictJson$inboundSchema;
    /** @deprecated use `InlineBodyAndParamNoConflictJson$outboundSchema` instead. */
    export const outboundSchema = InlineBodyAndParamNoConflictJson$outboundSchema;
    /** @deprecated use `InlineBodyAndParamNoConflictJson$Outbound` instead. */
    export type Outbound = InlineBodyAndParamNoConflictJson$Outbound;
}

/** @internal */
export const InlineBodyAndParamNoConflictRes$inboundSchema: z.ZodType<
    InlineBodyAndParamNoConflictRes,
    z.ZodTypeDef,
    unknown
> = z.object({
    args: z.record(z.string()),
    json: z.lazy(() => InlineBodyAndParamNoConflictJson$inboundSchema),
});

/** @internal */
export type InlineBodyAndParamNoConflictRes$Outbound = {
    args: { [k: string]: string };
    json: InlineBodyAndParamNoConflictJson$Outbound;
};

/** @internal */
export const InlineBodyAndParamNoConflictRes$outboundSchema: z.ZodType<
    InlineBodyAndParamNoConflictRes$Outbound,
    z.ZodTypeDef,
    InlineBodyAndParamNoConflictRes
> = z.object({
    args: z.record(z.string()),
    json: z.lazy(() => InlineBodyAndParamNoConflictJson$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InlineBodyAndParamNoConflictRes$ {
    /** @deprecated use `InlineBodyAndParamNoConflictRes$inboundSchema` instead. */
    export const inboundSchema = InlineBodyAndParamNoConflictRes$inboundSchema;
    /** @deprecated use `InlineBodyAndParamNoConflictRes$outboundSchema` instead. */
    export const outboundSchema = InlineBodyAndParamNoConflictRes$outboundSchema;
    /** @deprecated use `InlineBodyAndParamNoConflictRes$Outbound` instead. */
    export type Outbound = InlineBodyAndParamNoConflictRes$Outbound;
}
