/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type InlineBodyAndParamNoConflictRequestBody = {
    bodyStr: string;
};

export type InlineBodyAndParamNoConflictRequest = {
    requestBody: InlineBodyAndParamNoConflictRequestBody;
    paramStr: string;
};

export type InlineBodyAndParamNoConflictJson = {
    bodyStr: string;
};

/**
 * OK
 */
export type InlineBodyAndParamNoConflictRes = {
    args: Record<string, string>;
    json: InlineBodyAndParamNoConflictJson;
};

export type InlineBodyAndParamNoConflictResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: InlineBodyAndParamNoConflictRes | undefined;
};

/** @internal */
export namespace InlineBodyAndParamNoConflictRequestBody$ {
    export type Inbound = {
        bodyStr: string;
    };

    export const inboundSchema: z.ZodType<
        InlineBodyAndParamNoConflictRequestBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            bodyStr: z.string(),
        })
        .transform((v) => {
            return {
                bodyStr: v.bodyStr,
            };
        });

    export type Outbound = {
        bodyStr: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        InlineBodyAndParamNoConflictRequestBody
    > = z
        .object({
            bodyStr: z.string(),
        })
        .transform((v) => {
            return {
                bodyStr: v.bodyStr,
            };
        });
}

/** @internal */
export namespace InlineBodyAndParamNoConflictRequest$ {
    export type Inbound = {
        RequestBody: InlineBodyAndParamNoConflictRequestBody$.Inbound;
        paramStr: string;
    };

    export const inboundSchema: z.ZodType<
        InlineBodyAndParamNoConflictRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            RequestBody: z.lazy(() => InlineBodyAndParamNoConflictRequestBody$.inboundSchema),
            paramStr: z.string(),
        })
        .transform((v) => {
            return {
                requestBody: v.RequestBody,
                paramStr: v.paramStr,
            };
        });

    export type Outbound = {
        RequestBody: InlineBodyAndParamNoConflictRequestBody$.Outbound;
        paramStr: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        InlineBodyAndParamNoConflictRequest
    > = z
        .object({
            requestBody: z.lazy(() => InlineBodyAndParamNoConflictRequestBody$.outboundSchema),
            paramStr: z.string(),
        })
        .transform((v) => {
            return {
                RequestBody: v.requestBody,
                paramStr: v.paramStr,
            };
        });
}

/** @internal */
export namespace InlineBodyAndParamNoConflictJson$ {
    export type Inbound = {
        bodyStr: string;
    };

    export const inboundSchema: z.ZodType<InlineBodyAndParamNoConflictJson, z.ZodTypeDef, Inbound> =
        z
            .object({
                bodyStr: z.string(),
            })
            .transform((v) => {
                return {
                    bodyStr: v.bodyStr,
                };
            });

    export type Outbound = {
        bodyStr: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        InlineBodyAndParamNoConflictJson
    > = z
        .object({
            bodyStr: z.string(),
        })
        .transform((v) => {
            return {
                bodyStr: v.bodyStr,
            };
        });
}

/** @internal */
export namespace InlineBodyAndParamNoConflictRes$ {
    export type Inbound = {
        args: Record<string, string>;
        json: InlineBodyAndParamNoConflictJson$.Inbound;
    };

    export const inboundSchema: z.ZodType<InlineBodyAndParamNoConflictRes, z.ZodTypeDef, Inbound> =
        z
            .object({
                args: z.record(z.string()),
                json: z.lazy(() => InlineBodyAndParamNoConflictJson$.inboundSchema),
            })
            .transform((v) => {
                return {
                    args: v.args,
                    json: v.json,
                };
            });

    export type Outbound = {
        args: Record<string, string>;
        json: InlineBodyAndParamNoConflictJson$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        InlineBodyAndParamNoConflictRes
    > = z
        .object({
            args: z.record(z.string()),
            json: z.lazy(() => InlineBodyAndParamNoConflictJson$.outboundSchema),
        })
        .transform((v) => {
            return {
                args: v.args,
                json: v.json,
            };
        });
}

/** @internal */
export namespace InlineBodyAndParamNoConflictResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        res?: InlineBodyAndParamNoConflictRes$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        InlineBodyAndParamNoConflictResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => InlineBodyAndParamNoConflictRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: InlineBodyAndParamNoConflictRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        InlineBodyAndParamNoConflictResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => InlineBodyAndParamNoConflictRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
