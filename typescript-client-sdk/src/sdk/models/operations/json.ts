/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { EventStream } from "../../../lib/event-streams.js";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";

export const JsonServerList = [
  "http://localhost:35456",
] as const;

export type JsonResponse = {
  headers: { [k: string]: Array<string> };
  result: EventStream<shared.JsonEvent>;
};

/** @internal */
export const JsonResponse$inboundSchema: z.ZodType<
  JsonResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.instanceof(ReadableStream<Uint8Array>).transform(stream => {
    return new EventStream({
      stream,
      decoder(rawEvent) {
        const schema = shared.JsonEvent$inboundSchema;
        return schema.parse(rawEvent);
      },
    });
  }),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type JsonResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: never;
};

/** @internal */
export const JsonResponse$outboundSchema: z.ZodType<
  JsonResponse$Outbound,
  z.ZodTypeDef,
  JsonResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.never(),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JsonResponse$ {
  /** @deprecated use `JsonResponse$inboundSchema` instead. */
  export const inboundSchema = JsonResponse$inboundSchema;
  /** @deprecated use `JsonResponse$outboundSchema` instead. */
  export const outboundSchema = JsonResponse$outboundSchema;
  /** @deprecated use `JsonResponse$Outbound` instead. */
  export type Outbound = JsonResponse$Outbound;
}
