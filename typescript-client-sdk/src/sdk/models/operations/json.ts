/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { EventStream } from "../../../lib/event-streams.js";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export const JsonServerList = ["http://localhost:35456"] as const;

export type JsonResponse = {
    headers: { [k: string]: Array<string> };
    result: EventStream<shared.JsonEvent>;
};

/** @internal */
export namespace JsonResponse$ {
    export const inboundSchema: z.ZodType<JsonResponse, z.ZodTypeDef, unknown> = z
        .object({
            Headers: z.record(z.array(z.string())),
            Result: z.instanceof(ReadableStream<Uint8Array>).transform((stream) => {
                return new EventStream({
                    stream,
                    decoder(rawEvent) {
                        const schema = shared.JsonEvent$.inboundSchema;
                        return schema.parse(rawEvent);
                    },
                });
            }),
        })
        .transform((v) => {
            return remap$(v, {
                Headers: "headers",
                Result: "result",
            });
        });

    export type Outbound = {
        Headers: { [k: string]: Array<string> };
        Result: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JsonResponse> = z
        .object({
            headers: z.record(z.array(z.string())),
            result: z.never(),
        })
        .transform((v) => {
            return remap$(v, {
                headers: "Headers",
                result: "Result",
            });
        });
}
