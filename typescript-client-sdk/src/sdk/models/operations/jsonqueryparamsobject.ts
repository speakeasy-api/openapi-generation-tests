/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type JsonQueryParamsObjectRequest = {
    deepObjParam: shared.DeepObject;
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    simpleObjParam: shared.SimpleObject;
};

export type JsonQueryParamsObjectArgs = {
    deepObjParam: string;
    simpleObjParam: string;
};

/**
 * OK
 */
export type JsonQueryParamsObjectRes = {
    args: JsonQueryParamsObjectArgs;
    url: string;
};

export type JsonQueryParamsObjectResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: JsonQueryParamsObjectRes | undefined;
};

/** @internal */
export namespace JsonQueryParamsObjectRequest$ {
    export type Inbound = {
        deepObjParam: shared.DeepObject$.Inbound;
        simpleObjParam: shared.SimpleObject$.Inbound;
    };

    export const inboundSchema: z.ZodType<JsonQueryParamsObjectRequest, z.ZodTypeDef, Inbound> = z
        .object({
            deepObjParam: shared.DeepObject$.inboundSchema,
            simpleObjParam: shared.SimpleObject$.inboundSchema,
        })
        .transform((v) => {
            return {
                deepObjParam: v.deepObjParam,
                simpleObjParam: v.simpleObjParam,
            };
        });

    export type Outbound = {
        deepObjParam: shared.DeepObject$.Outbound;
        simpleObjParam: shared.SimpleObject$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JsonQueryParamsObjectRequest> = z
        .object({
            deepObjParam: shared.DeepObject$.outboundSchema,
            simpleObjParam: shared.SimpleObject$.outboundSchema,
        })
        .transform((v) => {
            return {
                deepObjParam: v.deepObjParam,
                simpleObjParam: v.simpleObjParam,
            };
        });
}

/** @internal */
export namespace JsonQueryParamsObjectArgs$ {
    export type Inbound = {
        deepObjParam: string;
        simpleObjParam: string;
    };

    export const inboundSchema: z.ZodType<JsonQueryParamsObjectArgs, z.ZodTypeDef, Inbound> = z
        .object({
            deepObjParam: z.string(),
            simpleObjParam: z.string(),
        })
        .transform((v) => {
            return {
                deepObjParam: v.deepObjParam,
                simpleObjParam: v.simpleObjParam,
            };
        });

    export type Outbound = {
        deepObjParam: string;
        simpleObjParam: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JsonQueryParamsObjectArgs> = z
        .object({
            deepObjParam: z.string(),
            simpleObjParam: z.string(),
        })
        .transform((v) => {
            return {
                deepObjParam: v.deepObjParam,
                simpleObjParam: v.simpleObjParam,
            };
        });
}

/** @internal */
export namespace JsonQueryParamsObjectRes$ {
    export type Inbound = {
        args: JsonQueryParamsObjectArgs$.Inbound;
        url: string;
    };

    export const inboundSchema: z.ZodType<JsonQueryParamsObjectRes, z.ZodTypeDef, Inbound> = z
        .object({
            args: z.lazy(() => JsonQueryParamsObjectArgs$.inboundSchema),
            url: z.string(),
        })
        .transform((v) => {
            return {
                args: v.args,
                url: v.url,
            };
        });

    export type Outbound = {
        args: JsonQueryParamsObjectArgs$.Outbound;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JsonQueryParamsObjectRes> = z
        .object({
            args: z.lazy(() => JsonQueryParamsObjectArgs$.outboundSchema),
            url: z.string(),
        })
        .transform((v) => {
            return {
                args: v.args,
                url: v.url,
            };
        });
}

/** @internal */
export namespace JsonQueryParamsObjectResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        res?: JsonQueryParamsObjectRes$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<JsonQueryParamsObjectResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => JsonQueryParamsObjectRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: JsonQueryParamsObjectRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JsonQueryParamsObjectResponse> =
        z
            .object({
                contentType: z.string(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
                res: z.lazy(() => JsonQueryParamsObjectRes$.outboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    ContentType: v.contentType,
                    StatusCode: v.statusCode,
                    RawResponse: v.rawResponse,
                    ...(v.res === undefined ? null : { res: v.res }),
                };
            });
}
