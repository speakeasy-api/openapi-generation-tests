/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type JsonQueryParamsObjectSmallerRequest = {
    deepObjParam: shared.DeepObjectSmaller;
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    simpleObjParam: shared.SimpleObject;
};

export type JsonQueryParamsObjectSmallerArgs = {
    deepObjParam: string;
    simpleObjParam: string;
};

/**
 * OK
 */
export type JsonQueryParamsObjectSmallerRes = {
    args: JsonQueryParamsObjectSmallerArgs;
    url: string;
};

export type JsonQueryParamsObjectSmallerResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: JsonQueryParamsObjectSmallerRes | undefined;
};

/** @internal */
export namespace JsonQueryParamsObjectSmallerRequest$ {
    export const inboundSchema: z.ZodType<
        JsonQueryParamsObjectSmallerRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            deepObjParam: shared.DeepObjectSmaller$.inboundSchema,
            simpleObjParam: shared.SimpleObject$.inboundSchema,
        })
        .transform((v) => {
            return {
                deepObjParam: v.deepObjParam,
                simpleObjParam: v.simpleObjParam,
            };
        });

    export type Outbound = {
        deepObjParam: shared.DeepObjectSmaller$.Outbound;
        simpleObjParam: shared.SimpleObject$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        JsonQueryParamsObjectSmallerRequest
    > = z
        .object({
            deepObjParam: shared.DeepObjectSmaller$.outboundSchema,
            simpleObjParam: shared.SimpleObject$.outboundSchema,
        })
        .transform((v) => {
            return {
                deepObjParam: v.deepObjParam,
                simpleObjParam: v.simpleObjParam,
            };
        });
}

/** @internal */
export namespace JsonQueryParamsObjectSmallerArgs$ {
    export const inboundSchema: z.ZodType<JsonQueryParamsObjectSmallerArgs, z.ZodTypeDef, unknown> =
        z
            .object({
                deepObjParam: z.string(),
                simpleObjParam: z.string(),
            })
            .transform((v) => {
                return {
                    deepObjParam: v.deepObjParam,
                    simpleObjParam: v.simpleObjParam,
                };
            });

    export type Outbound = {
        deepObjParam: string;
        simpleObjParam: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        JsonQueryParamsObjectSmallerArgs
    > = z
        .object({
            deepObjParam: z.string(),
            simpleObjParam: z.string(),
        })
        .transform((v) => {
            return {
                deepObjParam: v.deepObjParam,
                simpleObjParam: v.simpleObjParam,
            };
        });
}

/** @internal */
export namespace JsonQueryParamsObjectSmallerRes$ {
    export const inboundSchema: z.ZodType<JsonQueryParamsObjectSmallerRes, z.ZodTypeDef, unknown> =
        z
            .object({
                args: z.lazy(() => JsonQueryParamsObjectSmallerArgs$.inboundSchema),
                url: z.string(),
            })
            .transform((v) => {
                return {
                    args: v.args,
                    url: v.url,
                };
            });

    export type Outbound = {
        args: JsonQueryParamsObjectSmallerArgs$.Outbound;
        url: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        JsonQueryParamsObjectSmallerRes
    > = z
        .object({
            args: z.lazy(() => JsonQueryParamsObjectSmallerArgs$.outboundSchema),
            url: z.string(),
        })
        .transform((v) => {
            return {
                args: v.args,
                url: v.url,
            };
        });
}

/** @internal */
export namespace JsonQueryParamsObjectSmallerResponse$ {
    export const inboundSchema: z.ZodType<
        JsonQueryParamsObjectSmallerResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => JsonQueryParamsObjectSmallerRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: JsonQueryParamsObjectSmallerRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        JsonQueryParamsObjectSmallerResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => JsonQueryParamsObjectSmallerRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
