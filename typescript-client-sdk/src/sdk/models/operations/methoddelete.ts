/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const MethodDeleteServerList = [
  "http://localhost:35456",
] as const;

export type MethodDeleteRequestBody = {
  id?: string | undefined;
};

/**
 * OK
 */
export type MethodDeleteResponseBody = {
  status?: string | undefined;
};

/** @internal */
export const MethodDeleteRequestBody$inboundSchema: z.ZodType<
  MethodDeleteRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
});

/** @internal */
export type MethodDeleteRequestBody$Outbound = {
  id?: string | undefined;
};

/** @internal */
export const MethodDeleteRequestBody$outboundSchema: z.ZodType<
  MethodDeleteRequestBody$Outbound,
  z.ZodTypeDef,
  MethodDeleteRequestBody
> = z.object({
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MethodDeleteRequestBody$ {
  /** @deprecated use `MethodDeleteRequestBody$inboundSchema` instead. */
  export const inboundSchema = MethodDeleteRequestBody$inboundSchema;
  /** @deprecated use `MethodDeleteRequestBody$outboundSchema` instead. */
  export const outboundSchema = MethodDeleteRequestBody$outboundSchema;
  /** @deprecated use `MethodDeleteRequestBody$Outbound` instead. */
  export type Outbound = MethodDeleteRequestBody$Outbound;
}

export function methodDeleteRequestBodyToJSON(
  methodDeleteRequestBody: MethodDeleteRequestBody,
): string {
  return JSON.stringify(
    MethodDeleteRequestBody$outboundSchema.parse(methodDeleteRequestBody),
  );
}

export function methodDeleteRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<MethodDeleteRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MethodDeleteRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MethodDeleteRequestBody' from JSON`,
  );
}

/** @internal */
export const MethodDeleteResponseBody$inboundSchema: z.ZodType<
  MethodDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string().optional(),
});

/** @internal */
export type MethodDeleteResponseBody$Outbound = {
  status?: string | undefined;
};

/** @internal */
export const MethodDeleteResponseBody$outboundSchema: z.ZodType<
  MethodDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  MethodDeleteResponseBody
> = z.object({
  status: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MethodDeleteResponseBody$ {
  /** @deprecated use `MethodDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema = MethodDeleteResponseBody$inboundSchema;
  /** @deprecated use `MethodDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema = MethodDeleteResponseBody$outboundSchema;
  /** @deprecated use `MethodDeleteResponseBody$Outbound` instead. */
  export type Outbound = MethodDeleteResponseBody$Outbound;
}

export function methodDeleteResponseBodyToJSON(
  methodDeleteResponseBody: MethodDeleteResponseBody,
): string {
  return JSON.stringify(
    MethodDeleteResponseBody$outboundSchema.parse(methodDeleteResponseBody),
  );
}

export function methodDeleteResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<MethodDeleteResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MethodDeleteResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MethodDeleteResponseBody' from JSON`,
  );
}
