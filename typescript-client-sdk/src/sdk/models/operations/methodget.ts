/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const MethodGetServerList = [
  "http://localhost:35456",
] as const;

/**
 * OK
 */
export type MethodGetResponseBody = {
  status?: string | undefined;
};

/** @internal */
export const MethodGetResponseBody$inboundSchema: z.ZodType<
  MethodGetResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string().optional(),
});

/** @internal */
export type MethodGetResponseBody$Outbound = {
  status?: string | undefined;
};

/** @internal */
export const MethodGetResponseBody$outboundSchema: z.ZodType<
  MethodGetResponseBody$Outbound,
  z.ZodTypeDef,
  MethodGetResponseBody
> = z.object({
  status: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MethodGetResponseBody$ {
  /** @deprecated use `MethodGetResponseBody$inboundSchema` instead. */
  export const inboundSchema = MethodGetResponseBody$inboundSchema;
  /** @deprecated use `MethodGetResponseBody$outboundSchema` instead. */
  export const outboundSchema = MethodGetResponseBody$outboundSchema;
  /** @deprecated use `MethodGetResponseBody$Outbound` instead. */
  export type Outbound = MethodGetResponseBody$Outbound;
}

export function methodGetResponseBodyToJSON(
  methodGetResponseBody: MethodGetResponseBody,
): string {
  return JSON.stringify(
    MethodGetResponseBody$outboundSchema.parse(methodGetResponseBody),
  );
}

export function methodGetResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<MethodGetResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MethodGetResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MethodGetResponseBody' from JSON`,
  );
}
