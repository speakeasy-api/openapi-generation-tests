/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const MethodOptionsServerList = [
  "http://localhost:35456",
] as const;

export type MethodOptionsResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const MethodOptionsResponse$inboundSchema: z.ZodType<
  MethodOptionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type MethodOptionsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const MethodOptionsResponse$outboundSchema: z.ZodType<
  MethodOptionsResponse$Outbound,
  z.ZodTypeDef,
  MethodOptionsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MethodOptionsResponse$ {
  /** @deprecated use `MethodOptionsResponse$inboundSchema` instead. */
  export const inboundSchema = MethodOptionsResponse$inboundSchema;
  /** @deprecated use `MethodOptionsResponse$outboundSchema` instead. */
  export const outboundSchema = MethodOptionsResponse$outboundSchema;
  /** @deprecated use `MethodOptionsResponse$Outbound` instead. */
  export type Outbound = MethodOptionsResponse$Outbound;
}

export function methodOptionsResponseToJSON(
  methodOptionsResponse: MethodOptionsResponse,
): string {
  return JSON.stringify(
    MethodOptionsResponse$outboundSchema.parse(methodOptionsResponse),
  );
}

export function methodOptionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<MethodOptionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MethodOptionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MethodOptionsResponse' from JSON`,
  );
}
