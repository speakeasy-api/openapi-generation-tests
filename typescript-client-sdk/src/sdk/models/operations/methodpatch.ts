/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const MethodPatchServerList = [
  "http://localhost:35456",
] as const;

export type MethodPatchRequestBody = {
  id?: string | undefined;
};

/**
 * OK
 */
export type MethodPatchResponseBody = {
  status?: string | undefined;
};

/** @internal */
export const MethodPatchRequestBody$inboundSchema: z.ZodType<
  MethodPatchRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
});

/** @internal */
export type MethodPatchRequestBody$Outbound = {
  id?: string | undefined;
};

/** @internal */
export const MethodPatchRequestBody$outboundSchema: z.ZodType<
  MethodPatchRequestBody$Outbound,
  z.ZodTypeDef,
  MethodPatchRequestBody
> = z.object({
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MethodPatchRequestBody$ {
  /** @deprecated use `MethodPatchRequestBody$inboundSchema` instead. */
  export const inboundSchema = MethodPatchRequestBody$inboundSchema;
  /** @deprecated use `MethodPatchRequestBody$outboundSchema` instead. */
  export const outboundSchema = MethodPatchRequestBody$outboundSchema;
  /** @deprecated use `MethodPatchRequestBody$Outbound` instead. */
  export type Outbound = MethodPatchRequestBody$Outbound;
}

export function methodPatchRequestBodyToJSON(
  methodPatchRequestBody: MethodPatchRequestBody,
): string {
  return JSON.stringify(
    MethodPatchRequestBody$outboundSchema.parse(methodPatchRequestBody),
  );
}

export function methodPatchRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<MethodPatchRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MethodPatchRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MethodPatchRequestBody' from JSON`,
  );
}

/** @internal */
export const MethodPatchResponseBody$inboundSchema: z.ZodType<
  MethodPatchResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string().optional(),
});

/** @internal */
export type MethodPatchResponseBody$Outbound = {
  status?: string | undefined;
};

/** @internal */
export const MethodPatchResponseBody$outboundSchema: z.ZodType<
  MethodPatchResponseBody$Outbound,
  z.ZodTypeDef,
  MethodPatchResponseBody
> = z.object({
  status: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MethodPatchResponseBody$ {
  /** @deprecated use `MethodPatchResponseBody$inboundSchema` instead. */
  export const inboundSchema = MethodPatchResponseBody$inboundSchema;
  /** @deprecated use `MethodPatchResponseBody$outboundSchema` instead. */
  export const outboundSchema = MethodPatchResponseBody$outboundSchema;
  /** @deprecated use `MethodPatchResponseBody$Outbound` instead. */
  export type Outbound = MethodPatchResponseBody$Outbound;
}

export function methodPatchResponseBodyToJSON(
  methodPatchResponseBody: MethodPatchResponseBody,
): string {
  return JSON.stringify(
    MethodPatchResponseBody$outboundSchema.parse(methodPatchResponseBody),
  );
}

export function methodPatchResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<MethodPatchResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MethodPatchResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MethodPatchResponseBody' from JSON`,
  );
}
