/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type MixedParametersCamelCaseRequest = {
    headerParam: string;
    pathParam: string;
    queryStringParam: string;
};

export type MixedParametersCamelCaseArgs = {
    queryStringParam: string;
};

export type MixedParametersCamelCaseHeaders = {
    headerParam: string;
};

/**
 * OK
 */
export type MixedParametersCamelCaseRes = {
    args: MixedParametersCamelCaseArgs;
    headers: MixedParametersCamelCaseHeaders;
    url: string;
};

export type MixedParametersCamelCaseResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: MixedParametersCamelCaseRes | undefined;
};

/** @internal */
export namespace MixedParametersCamelCaseRequest$ {
    export type Inbound = {
        header_param: string;
        path_param: string;
        query_string_param: string;
    };

    export const inboundSchema: z.ZodType<MixedParametersCamelCaseRequest, z.ZodTypeDef, Inbound> =
        z
            .object({
                header_param: z.string(),
                path_param: z.string(),
                query_string_param: z.string(),
            })
            .transform((v) => {
                return {
                    headerParam: v.header_param,
                    pathParam: v.path_param,
                    queryStringParam: v.query_string_param,
                };
            });

    export type Outbound = {
        header_param: string;
        path_param: string;
        query_string_param: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        MixedParametersCamelCaseRequest
    > = z
        .object({
            headerParam: z.string(),
            pathParam: z.string(),
            queryStringParam: z.string(),
        })
        .transform((v) => {
            return {
                header_param: v.headerParam,
                path_param: v.pathParam,
                query_string_param: v.queryStringParam,
            };
        });
}

/** @internal */
export namespace MixedParametersCamelCaseArgs$ {
    export type Inbound = {
        query_string_param: string;
    };

    export const inboundSchema: z.ZodType<MixedParametersCamelCaseArgs, z.ZodTypeDef, Inbound> = z
        .object({
            query_string_param: z.string(),
        })
        .transform((v) => {
            return {
                queryStringParam: v.query_string_param,
            };
        });

    export type Outbound = {
        query_string_param: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MixedParametersCamelCaseArgs> = z
        .object({
            queryStringParam: z.string(),
        })
        .transform((v) => {
            return {
                query_string_param: v.queryStringParam,
            };
        });
}

/** @internal */
export namespace MixedParametersCamelCaseHeaders$ {
    export type Inbound = {
        "Header-Param": string;
    };

    export const inboundSchema: z.ZodType<MixedParametersCamelCaseHeaders, z.ZodTypeDef, Inbound> =
        z
            .object({
                "Header-Param": z.string(),
            })
            .transform((v) => {
                return {
                    headerParam: v["Header-Param"],
                };
            });

    export type Outbound = {
        "Header-Param": string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        MixedParametersCamelCaseHeaders
    > = z
        .object({
            headerParam: z.string(),
        })
        .transform((v) => {
            return {
                "Header-Param": v.headerParam,
            };
        });
}

/** @internal */
export namespace MixedParametersCamelCaseRes$ {
    export type Inbound = {
        args: MixedParametersCamelCaseArgs$.Inbound;
        headers: MixedParametersCamelCaseHeaders$.Inbound;
        url: string;
    };

    export const inboundSchema: z.ZodType<MixedParametersCamelCaseRes, z.ZodTypeDef, Inbound> = z
        .object({
            args: z.lazy(() => MixedParametersCamelCaseArgs$.inboundSchema),
            headers: z.lazy(() => MixedParametersCamelCaseHeaders$.inboundSchema),
            url: z.string(),
        })
        .transform((v) => {
            return {
                args: v.args,
                headers: v.headers,
                url: v.url,
            };
        });

    export type Outbound = {
        args: MixedParametersCamelCaseArgs$.Outbound;
        headers: MixedParametersCamelCaseHeaders$.Outbound;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MixedParametersCamelCaseRes> = z
        .object({
            args: z.lazy(() => MixedParametersCamelCaseArgs$.outboundSchema),
            headers: z.lazy(() => MixedParametersCamelCaseHeaders$.outboundSchema),
            url: z.string(),
        })
        .transform((v) => {
            return {
                args: v.args,
                headers: v.headers,
                url: v.url,
            };
        });
}

/** @internal */
export namespace MixedParametersCamelCaseResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        res?: MixedParametersCamelCaseRes$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<MixedParametersCamelCaseResponse, z.ZodTypeDef, Inbound> =
        z
            .object({
                ContentType: z.string(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
                res: z.lazy(() => MixedParametersCamelCaseRes$.inboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    contentType: v.ContentType,
                    statusCode: v.StatusCode,
                    rawResponse: v.RawResponse,
                    ...(v.res === undefined ? null : { res: v.res }),
                };
            });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: MixedParametersCamelCaseRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        MixedParametersCamelCaseResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => MixedParametersCamelCaseRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
