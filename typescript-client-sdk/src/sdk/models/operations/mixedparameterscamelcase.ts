/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type MixedParametersCamelCaseRequest = {
    headerParam: string;
    pathParam: string;
    queryStringParam: string;
};

export type MixedParametersCamelCaseArgs = {
    queryStringParam: string;
};

export type MixedParametersCamelCaseHeaders = {
    headerParam: string;
};

/**
 * OK
 */
export type MixedParametersCamelCaseRes = {
    args: MixedParametersCamelCaseArgs;
    headers: MixedParametersCamelCaseHeaders;
    url: string;
};

/** @internal */
export namespace MixedParametersCamelCaseRequest$ {
    export const inboundSchema: z.ZodType<MixedParametersCamelCaseRequest, z.ZodTypeDef, unknown> =
        z
            .object({
                header_param: z.string(),
                path_param: z.string(),
                query_string_param: z.string(),
            })
            .transform((v) => {
                return remap$(v, {
                    header_param: "headerParam",
                    path_param: "pathParam",
                    query_string_param: "queryStringParam",
                });
            });

    export type Outbound = {
        header_param: string;
        path_param: string;
        query_string_param: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        MixedParametersCamelCaseRequest
    > = z
        .object({
            headerParam: z.string(),
            pathParam: z.string(),
            queryStringParam: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                headerParam: "header_param",
                pathParam: "path_param",
                queryStringParam: "query_string_param",
            });
        });
}

/** @internal */
export namespace MixedParametersCamelCaseArgs$ {
    export const inboundSchema: z.ZodType<MixedParametersCamelCaseArgs, z.ZodTypeDef, unknown> = z
        .object({
            query_string_param: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                query_string_param: "queryStringParam",
            });
        });

    export type Outbound = {
        query_string_param: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MixedParametersCamelCaseArgs> = z
        .object({
            queryStringParam: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                queryStringParam: "query_string_param",
            });
        });
}

/** @internal */
export namespace MixedParametersCamelCaseHeaders$ {
    export const inboundSchema: z.ZodType<MixedParametersCamelCaseHeaders, z.ZodTypeDef, unknown> =
        z
            .object({
                "Header-Param": z.string(),
            })
            .transform((v) => {
                return remap$(v, {
                    "Header-Param": "headerParam",
                });
            });

    export type Outbound = {
        "Header-Param": string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        MixedParametersCamelCaseHeaders
    > = z
        .object({
            headerParam: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                headerParam: "Header-Param",
            });
        });
}

/** @internal */
export namespace MixedParametersCamelCaseRes$ {
    export const inboundSchema: z.ZodType<MixedParametersCamelCaseRes, z.ZodTypeDef, unknown> =
        z.object({
            args: z.lazy(() => MixedParametersCamelCaseArgs$.inboundSchema),
            headers: z.lazy(() => MixedParametersCamelCaseHeaders$.inboundSchema),
            url: z.string(),
        });

    export type Outbound = {
        args: MixedParametersCamelCaseArgs$.Outbound;
        headers: MixedParametersCamelCaseHeaders$.Outbound;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MixedParametersCamelCaseRes> =
        z.object({
            args: z.lazy(() => MixedParametersCamelCaseArgs$.outboundSchema),
            headers: z.lazy(() => MixedParametersCamelCaseHeaders$.outboundSchema),
            url: z.string(),
        });
}
