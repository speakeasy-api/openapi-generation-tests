/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type MixedParametersCamelCaseRequest = {
    headerParam: string;
    pathParam: string;
    queryStringParam: string;
};

export type MixedParametersCamelCaseArgs = {
    queryStringParam: string;
};

export type MixedParametersCamelCaseHeaders = {
    headerParam: string;
};

/**
 * OK
 */
export type MixedParametersCamelCaseRes = {
    args: MixedParametersCamelCaseArgs;
    headers: MixedParametersCamelCaseHeaders;
    url: string;
};

/** @internal */
export const MixedParametersCamelCaseRequest$inboundSchema: z.ZodType<
    MixedParametersCamelCaseRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        header_param: z.string(),
        path_param: z.string(),
        query_string_param: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            header_param: "headerParam",
            path_param: "pathParam",
            query_string_param: "queryStringParam",
        });
    });

/** @internal */
export type MixedParametersCamelCaseRequest$Outbound = {
    header_param: string;
    path_param: string;
    query_string_param: string;
};

/** @internal */
export const MixedParametersCamelCaseRequest$outboundSchema: z.ZodType<
    MixedParametersCamelCaseRequest$Outbound,
    z.ZodTypeDef,
    MixedParametersCamelCaseRequest
> = z
    .object({
        headerParam: z.string(),
        pathParam: z.string(),
        queryStringParam: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            headerParam: "header_param",
            pathParam: "path_param",
            queryStringParam: "query_string_param",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MixedParametersCamelCaseRequest$ {
    /** @deprecated use `MixedParametersCamelCaseRequest$inboundSchema` instead. */
    export const inboundSchema = MixedParametersCamelCaseRequest$inboundSchema;
    /** @deprecated use `MixedParametersCamelCaseRequest$outboundSchema` instead. */
    export const outboundSchema = MixedParametersCamelCaseRequest$outboundSchema;
    /** @deprecated use `MixedParametersCamelCaseRequest$Outbound` instead. */
    export type Outbound = MixedParametersCamelCaseRequest$Outbound;
}

/** @internal */
export const MixedParametersCamelCaseArgs$inboundSchema: z.ZodType<
    MixedParametersCamelCaseArgs,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        query_string_param: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            query_string_param: "queryStringParam",
        });
    });

/** @internal */
export type MixedParametersCamelCaseArgs$Outbound = {
    query_string_param: string;
};

/** @internal */
export const MixedParametersCamelCaseArgs$outboundSchema: z.ZodType<
    MixedParametersCamelCaseArgs$Outbound,
    z.ZodTypeDef,
    MixedParametersCamelCaseArgs
> = z
    .object({
        queryStringParam: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            queryStringParam: "query_string_param",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MixedParametersCamelCaseArgs$ {
    /** @deprecated use `MixedParametersCamelCaseArgs$inboundSchema` instead. */
    export const inboundSchema = MixedParametersCamelCaseArgs$inboundSchema;
    /** @deprecated use `MixedParametersCamelCaseArgs$outboundSchema` instead. */
    export const outboundSchema = MixedParametersCamelCaseArgs$outboundSchema;
    /** @deprecated use `MixedParametersCamelCaseArgs$Outbound` instead. */
    export type Outbound = MixedParametersCamelCaseArgs$Outbound;
}

/** @internal */
export const MixedParametersCamelCaseHeaders$inboundSchema: z.ZodType<
    MixedParametersCamelCaseHeaders,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "Header-Param": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "Header-Param": "headerParam",
        });
    });

/** @internal */
export type MixedParametersCamelCaseHeaders$Outbound = {
    "Header-Param": string;
};

/** @internal */
export const MixedParametersCamelCaseHeaders$outboundSchema: z.ZodType<
    MixedParametersCamelCaseHeaders$Outbound,
    z.ZodTypeDef,
    MixedParametersCamelCaseHeaders
> = z
    .object({
        headerParam: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            headerParam: "Header-Param",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MixedParametersCamelCaseHeaders$ {
    /** @deprecated use `MixedParametersCamelCaseHeaders$inboundSchema` instead. */
    export const inboundSchema = MixedParametersCamelCaseHeaders$inboundSchema;
    /** @deprecated use `MixedParametersCamelCaseHeaders$outboundSchema` instead. */
    export const outboundSchema = MixedParametersCamelCaseHeaders$outboundSchema;
    /** @deprecated use `MixedParametersCamelCaseHeaders$Outbound` instead. */
    export type Outbound = MixedParametersCamelCaseHeaders$Outbound;
}

/** @internal */
export const MixedParametersCamelCaseRes$inboundSchema: z.ZodType<
    MixedParametersCamelCaseRes,
    z.ZodTypeDef,
    unknown
> = z.object({
    args: z.lazy(() => MixedParametersCamelCaseArgs$inboundSchema),
    headers: z.lazy(() => MixedParametersCamelCaseHeaders$inboundSchema),
    url: z.string(),
});

/** @internal */
export type MixedParametersCamelCaseRes$Outbound = {
    args: MixedParametersCamelCaseArgs$Outbound;
    headers: MixedParametersCamelCaseHeaders$Outbound;
    url: string;
};

/** @internal */
export const MixedParametersCamelCaseRes$outboundSchema: z.ZodType<
    MixedParametersCamelCaseRes$Outbound,
    z.ZodTypeDef,
    MixedParametersCamelCaseRes
> = z.object({
    args: z.lazy(() => MixedParametersCamelCaseArgs$outboundSchema),
    headers: z.lazy(() => MixedParametersCamelCaseHeaders$outboundSchema),
    url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MixedParametersCamelCaseRes$ {
    /** @deprecated use `MixedParametersCamelCaseRes$inboundSchema` instead. */
    export const inboundSchema = MixedParametersCamelCaseRes$inboundSchema;
    /** @deprecated use `MixedParametersCamelCaseRes$outboundSchema` instead. */
    export const outboundSchema = MixedParametersCamelCaseRes$outboundSchema;
    /** @deprecated use `MixedParametersCamelCaseRes$Outbound` instead. */
    export type Outbound = MixedParametersCamelCaseRes$Outbound;
}
