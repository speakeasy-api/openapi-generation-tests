/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

export type MixedParametersPrimitivesRequest = {
  headerParam: string;
  pathParam: string;
  queryStringParam: string;
};

export type MixedParametersPrimitivesArgs = {
  queryStringParam: string;
};

export type MixedParametersPrimitivesHeaders = {
  headerparam: string;
};

/**
 * OK
 */
export type MixedParametersPrimitivesRes = {
  args: MixedParametersPrimitivesArgs;
  headers: MixedParametersPrimitivesHeaders;
  url: string;
};

/** @internal */
export const MixedParametersPrimitivesRequest$inboundSchema: z.ZodType<
  MixedParametersPrimitivesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  headerParam: z.string(),
  pathParam: z.string(),
  queryStringParam: z.string(),
});

/** @internal */
export type MixedParametersPrimitivesRequest$Outbound = {
  headerParam: string;
  pathParam: string;
  queryStringParam: string;
};

/** @internal */
export const MixedParametersPrimitivesRequest$outboundSchema: z.ZodType<
  MixedParametersPrimitivesRequest$Outbound,
  z.ZodTypeDef,
  MixedParametersPrimitivesRequest
> = z.object({
  headerParam: z.string(),
  pathParam: z.string(),
  queryStringParam: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MixedParametersPrimitivesRequest$ {
  /** @deprecated use `MixedParametersPrimitivesRequest$inboundSchema` instead. */
  export const inboundSchema = MixedParametersPrimitivesRequest$inboundSchema;
  /** @deprecated use `MixedParametersPrimitivesRequest$outboundSchema` instead. */
  export const outboundSchema = MixedParametersPrimitivesRequest$outboundSchema;
  /** @deprecated use `MixedParametersPrimitivesRequest$Outbound` instead. */
  export type Outbound = MixedParametersPrimitivesRequest$Outbound;
}

/** @internal */
export const MixedParametersPrimitivesArgs$inboundSchema: z.ZodType<
  MixedParametersPrimitivesArgs,
  z.ZodTypeDef,
  unknown
> = z.object({
  queryStringParam: z.string(),
});

/** @internal */
export type MixedParametersPrimitivesArgs$Outbound = {
  queryStringParam: string;
};

/** @internal */
export const MixedParametersPrimitivesArgs$outboundSchema: z.ZodType<
  MixedParametersPrimitivesArgs$Outbound,
  z.ZodTypeDef,
  MixedParametersPrimitivesArgs
> = z.object({
  queryStringParam: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MixedParametersPrimitivesArgs$ {
  /** @deprecated use `MixedParametersPrimitivesArgs$inboundSchema` instead. */
  export const inboundSchema = MixedParametersPrimitivesArgs$inboundSchema;
  /** @deprecated use `MixedParametersPrimitivesArgs$outboundSchema` instead. */
  export const outboundSchema = MixedParametersPrimitivesArgs$outboundSchema;
  /** @deprecated use `MixedParametersPrimitivesArgs$Outbound` instead. */
  export type Outbound = MixedParametersPrimitivesArgs$Outbound;
}

/** @internal */
export const MixedParametersPrimitivesHeaders$inboundSchema: z.ZodType<
  MixedParametersPrimitivesHeaders,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headerparam: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Headerparam": "headerparam",
  });
});

/** @internal */
export type MixedParametersPrimitivesHeaders$Outbound = {
  Headerparam: string;
};

/** @internal */
export const MixedParametersPrimitivesHeaders$outboundSchema: z.ZodType<
  MixedParametersPrimitivesHeaders$Outbound,
  z.ZodTypeDef,
  MixedParametersPrimitivesHeaders
> = z.object({
  headerparam: z.string(),
}).transform((v) => {
  return remap$(v, {
    headerparam: "Headerparam",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MixedParametersPrimitivesHeaders$ {
  /** @deprecated use `MixedParametersPrimitivesHeaders$inboundSchema` instead. */
  export const inboundSchema = MixedParametersPrimitivesHeaders$inboundSchema;
  /** @deprecated use `MixedParametersPrimitivesHeaders$outboundSchema` instead. */
  export const outboundSchema = MixedParametersPrimitivesHeaders$outboundSchema;
  /** @deprecated use `MixedParametersPrimitivesHeaders$Outbound` instead. */
  export type Outbound = MixedParametersPrimitivesHeaders$Outbound;
}

/** @internal */
export const MixedParametersPrimitivesRes$inboundSchema: z.ZodType<
  MixedParametersPrimitivesRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  args: z.lazy(() => MixedParametersPrimitivesArgs$inboundSchema),
  headers: z.lazy(() => MixedParametersPrimitivesHeaders$inboundSchema),
  url: z.string(),
});

/** @internal */
export type MixedParametersPrimitivesRes$Outbound = {
  args: MixedParametersPrimitivesArgs$Outbound;
  headers: MixedParametersPrimitivesHeaders$Outbound;
  url: string;
};

/** @internal */
export const MixedParametersPrimitivesRes$outboundSchema: z.ZodType<
  MixedParametersPrimitivesRes$Outbound,
  z.ZodTypeDef,
  MixedParametersPrimitivesRes
> = z.object({
  args: z.lazy(() => MixedParametersPrimitivesArgs$outboundSchema),
  headers: z.lazy(() => MixedParametersPrimitivesHeaders$outboundSchema),
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MixedParametersPrimitivesRes$ {
  /** @deprecated use `MixedParametersPrimitivesRes$inboundSchema` instead. */
  export const inboundSchema = MixedParametersPrimitivesRes$inboundSchema;
  /** @deprecated use `MixedParametersPrimitivesRes$outboundSchema` instead. */
  export const outboundSchema = MixedParametersPrimitivesRes$outboundSchema;
  /** @deprecated use `MixedParametersPrimitivesRes$Outbound` instead. */
  export type Outbound = MixedParametersPrimitivesRes$Outbound;
}
