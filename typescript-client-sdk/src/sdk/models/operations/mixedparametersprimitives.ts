/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type MixedParametersPrimitivesRequest = {
    headerParam: string;
    pathParam: string;
    queryStringParam: string;
};

export type MixedParametersPrimitivesArgs = {
    queryStringParam: string;
};

export type MixedParametersPrimitivesHeaders = {
    headerparam: string;
};

/**
 * OK
 */
export type MixedParametersPrimitivesRes = {
    args: MixedParametersPrimitivesArgs;
    headers: MixedParametersPrimitivesHeaders;
    url: string;
};

export type MixedParametersPrimitivesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: MixedParametersPrimitivesRes | undefined;
};

/** @internal */
export namespace MixedParametersPrimitivesRequest$ {
    export const inboundSchema: z.ZodType<MixedParametersPrimitivesRequest, z.ZodTypeDef, unknown> =
        z
            .object({
                headerParam: z.string(),
                pathParam: z.string(),
                queryStringParam: z.string(),
            })
            .transform((v) => {
                return {
                    headerParam: v.headerParam,
                    pathParam: v.pathParam,
                    queryStringParam: v.queryStringParam,
                };
            });

    export type Outbound = {
        headerParam: string;
        pathParam: string;
        queryStringParam: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        MixedParametersPrimitivesRequest
    > = z
        .object({
            headerParam: z.string(),
            pathParam: z.string(),
            queryStringParam: z.string(),
        })
        .transform((v) => {
            return {
                headerParam: v.headerParam,
                pathParam: v.pathParam,
                queryStringParam: v.queryStringParam,
            };
        });
}

/** @internal */
export namespace MixedParametersPrimitivesArgs$ {
    export const inboundSchema: z.ZodType<MixedParametersPrimitivesArgs, z.ZodTypeDef, unknown> = z
        .object({
            queryStringParam: z.string(),
        })
        .transform((v) => {
            return {
                queryStringParam: v.queryStringParam,
            };
        });

    export type Outbound = {
        queryStringParam: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MixedParametersPrimitivesArgs> =
        z
            .object({
                queryStringParam: z.string(),
            })
            .transform((v) => {
                return {
                    queryStringParam: v.queryStringParam,
                };
            });
}

/** @internal */
export namespace MixedParametersPrimitivesHeaders$ {
    export const inboundSchema: z.ZodType<MixedParametersPrimitivesHeaders, z.ZodTypeDef, unknown> =
        z
            .object({
                Headerparam: z.string(),
            })
            .transform((v) => {
                return {
                    headerparam: v.Headerparam,
                };
            });

    export type Outbound = {
        Headerparam: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        MixedParametersPrimitivesHeaders
    > = z
        .object({
            headerparam: z.string(),
        })
        .transform((v) => {
            return {
                Headerparam: v.headerparam,
            };
        });
}

/** @internal */
export namespace MixedParametersPrimitivesRes$ {
    export const inboundSchema: z.ZodType<MixedParametersPrimitivesRes, z.ZodTypeDef, unknown> = z
        .object({
            args: z.lazy(() => MixedParametersPrimitivesArgs$.inboundSchema),
            headers: z.lazy(() => MixedParametersPrimitivesHeaders$.inboundSchema),
            url: z.string(),
        })
        .transform((v) => {
            return {
                args: v.args,
                headers: v.headers,
                url: v.url,
            };
        });

    export type Outbound = {
        args: MixedParametersPrimitivesArgs$.Outbound;
        headers: MixedParametersPrimitivesHeaders$.Outbound;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MixedParametersPrimitivesRes> = z
        .object({
            args: z.lazy(() => MixedParametersPrimitivesArgs$.outboundSchema),
            headers: z.lazy(() => MixedParametersPrimitivesHeaders$.outboundSchema),
            url: z.string(),
        })
        .transform((v) => {
            return {
                args: v.args,
                headers: v.headers,
                url: v.url,
            };
        });
}

/** @internal */
export namespace MixedParametersPrimitivesResponse$ {
    export const inboundSchema: z.ZodType<
        MixedParametersPrimitivesResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => MixedParametersPrimitivesRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: MixedParametersPrimitivesRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        MixedParametersPrimitivesResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => MixedParametersPrimitivesRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
