/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type MixedParametersPrimitivesRequest = {
    headerParam: string;
    pathParam: string;
    queryStringParam: string;
};

export type MixedParametersPrimitivesArgs = {
    queryStringParam: string;
};

export type MixedParametersPrimitivesHeaders = {
    headerparam: string;
};

/**
 * OK
 */
export type MixedParametersPrimitivesRes = {
    args: MixedParametersPrimitivesArgs;
    headers: MixedParametersPrimitivesHeaders;
    url: string;
};

/** @internal */
export namespace MixedParametersPrimitivesRequest$ {
    export const inboundSchema: z.ZodType<MixedParametersPrimitivesRequest, z.ZodTypeDef, unknown> =
        z.object({
            headerParam: z.string(),
            pathParam: z.string(),
            queryStringParam: z.string(),
        });

    export type Outbound = {
        headerParam: string;
        pathParam: string;
        queryStringParam: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        MixedParametersPrimitivesRequest
    > = z.object({
        headerParam: z.string(),
        pathParam: z.string(),
        queryStringParam: z.string(),
    });
}

/** @internal */
export namespace MixedParametersPrimitivesArgs$ {
    export const inboundSchema: z.ZodType<MixedParametersPrimitivesArgs, z.ZodTypeDef, unknown> =
        z.object({
            queryStringParam: z.string(),
        });

    export type Outbound = {
        queryStringParam: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MixedParametersPrimitivesArgs> =
        z.object({
            queryStringParam: z.string(),
        });
}

/** @internal */
export namespace MixedParametersPrimitivesHeaders$ {
    export const inboundSchema: z.ZodType<MixedParametersPrimitivesHeaders, z.ZodTypeDef, unknown> =
        z
            .object({
                Headerparam: z.string(),
            })
            .transform((v) => {
                return remap$(v, {
                    Headerparam: "headerparam",
                });
            });

    export type Outbound = {
        Headerparam: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        MixedParametersPrimitivesHeaders
    > = z
        .object({
            headerparam: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                headerparam: "Headerparam",
            });
        });
}

/** @internal */
export namespace MixedParametersPrimitivesRes$ {
    export const inboundSchema: z.ZodType<MixedParametersPrimitivesRes, z.ZodTypeDef, unknown> =
        z.object({
            args: z.lazy(() => MixedParametersPrimitivesArgs$.inboundSchema),
            headers: z.lazy(() => MixedParametersPrimitivesHeaders$.inboundSchema),
            url: z.string(),
        });

    export type Outbound = {
        args: MixedParametersPrimitivesArgs$.Outbound;
        headers: MixedParametersPrimitivesHeaders$.Outbound;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MixedParametersPrimitivesRes> =
        z.object({
            args: z.lazy(() => MixedParametersPrimitivesArgs$.outboundSchema),
            headers: z.lazy(() => MixedParametersPrimitivesHeaders$.outboundSchema),
            url: z.string(),
        });
}
