/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as shared from "../shared/index.js";

export type MixedQueryParamsRequest = {
  /**
   * A simple object that uses all our supported primitive types and enums and has optional properties.
   */
  deepObjectParam: shared.SimpleObject;
  /**
   * A simple object that uses all our supported primitive types and enums and has optional properties.
   */
  formParam: shared.SimpleObject;
  /**
   * A simple object that uses all our supported primitive types and enums and has optional properties.
   */
  jsonParam: shared.SimpleObject;
};

/**
 * OK
 */
export type MixedQueryParamsRes = {
  args: { [k: string]: string };
  url: string;
};

/** @internal */
export const MixedQueryParamsRequest$inboundSchema: z.ZodType<
  MixedQueryParamsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  deepObjectParam: shared.SimpleObject$inboundSchema,
  formParam: shared.SimpleObject$inboundSchema,
  jsonParam: shared.SimpleObject$inboundSchema,
});

/** @internal */
export type MixedQueryParamsRequest$Outbound = {
  deepObjectParam: shared.SimpleObject$Outbound;
  formParam: shared.SimpleObject$Outbound;
  jsonParam: shared.SimpleObject$Outbound;
};

/** @internal */
export const MixedQueryParamsRequest$outboundSchema: z.ZodType<
  MixedQueryParamsRequest$Outbound,
  z.ZodTypeDef,
  MixedQueryParamsRequest
> = z.object({
  deepObjectParam: shared.SimpleObject$outboundSchema,
  formParam: shared.SimpleObject$outboundSchema,
  jsonParam: shared.SimpleObject$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MixedQueryParamsRequest$ {
  /** @deprecated use `MixedQueryParamsRequest$inboundSchema` instead. */
  export const inboundSchema = MixedQueryParamsRequest$inboundSchema;
  /** @deprecated use `MixedQueryParamsRequest$outboundSchema` instead. */
  export const outboundSchema = MixedQueryParamsRequest$outboundSchema;
  /** @deprecated use `MixedQueryParamsRequest$Outbound` instead. */
  export type Outbound = MixedQueryParamsRequest$Outbound;
}

/** @internal */
export const MixedQueryParamsRes$inboundSchema: z.ZodType<
  MixedQueryParamsRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  args: z.record(z.string()),
  url: z.string(),
});

/** @internal */
export type MixedQueryParamsRes$Outbound = {
  args: { [k: string]: string };
  url: string;
};

/** @internal */
export const MixedQueryParamsRes$outboundSchema: z.ZodType<
  MixedQueryParamsRes$Outbound,
  z.ZodTypeDef,
  MixedQueryParamsRes
> = z.object({
  args: z.record(z.string()),
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MixedQueryParamsRes$ {
  /** @deprecated use `MixedQueryParamsRes$inboundSchema` instead. */
  export const inboundSchema = MixedQueryParamsRes$inboundSchema;
  /** @deprecated use `MixedQueryParamsRes$outboundSchema` instead. */
  export const outboundSchema = MixedQueryParamsRes$outboundSchema;
  /** @deprecated use `MixedQueryParamsRes$Outbound` instead. */
  export type Outbound = MixedQueryParamsRes$Outbound;
}
