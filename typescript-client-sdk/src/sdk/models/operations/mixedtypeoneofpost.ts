/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type MixedTypeOneOfPostRequestBody =
  | shared.SimpleObject
  | string
  | number;

export type MixedTypeOneOfPostJson = shared.SimpleObject | string | number;

/**
 * OK
 */
export type MixedTypeOneOfPostRes = {
  json: shared.SimpleObject | string | number;
};

/** @internal */
export const MixedTypeOneOfPostRequestBody$inboundSchema: z.ZodType<
  MixedTypeOneOfPostRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([shared.SimpleObject$inboundSchema, z.string(), z.number().int()]);

/** @internal */
export type MixedTypeOneOfPostRequestBody$Outbound =
  | shared.SimpleObject$Outbound
  | string
  | number;

/** @internal */
export const MixedTypeOneOfPostRequestBody$outboundSchema: z.ZodType<
  MixedTypeOneOfPostRequestBody$Outbound,
  z.ZodTypeDef,
  MixedTypeOneOfPostRequestBody
> = z.union([shared.SimpleObject$outboundSchema, z.string(), z.number().int()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MixedTypeOneOfPostRequestBody$ {
  /** @deprecated use `MixedTypeOneOfPostRequestBody$inboundSchema` instead. */
  export const inboundSchema = MixedTypeOneOfPostRequestBody$inboundSchema;
  /** @deprecated use `MixedTypeOneOfPostRequestBody$outboundSchema` instead. */
  export const outboundSchema = MixedTypeOneOfPostRequestBody$outboundSchema;
  /** @deprecated use `MixedTypeOneOfPostRequestBody$Outbound` instead. */
  export type Outbound = MixedTypeOneOfPostRequestBody$Outbound;
}

export function mixedTypeOneOfPostRequestBodyToJSON(
  mixedTypeOneOfPostRequestBody: MixedTypeOneOfPostRequestBody,
): string {
  return JSON.stringify(
    MixedTypeOneOfPostRequestBody$outboundSchema.parse(
      mixedTypeOneOfPostRequestBody,
    ),
  );
}

export function mixedTypeOneOfPostRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<MixedTypeOneOfPostRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MixedTypeOneOfPostRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MixedTypeOneOfPostRequestBody' from JSON`,
  );
}

/** @internal */
export const MixedTypeOneOfPostJson$inboundSchema: z.ZodType<
  MixedTypeOneOfPostJson,
  z.ZodTypeDef,
  unknown
> = z.union([shared.SimpleObject$inboundSchema, z.string(), z.number().int()]);

/** @internal */
export type MixedTypeOneOfPostJson$Outbound =
  | shared.SimpleObject$Outbound
  | string
  | number;

/** @internal */
export const MixedTypeOneOfPostJson$outboundSchema: z.ZodType<
  MixedTypeOneOfPostJson$Outbound,
  z.ZodTypeDef,
  MixedTypeOneOfPostJson
> = z.union([shared.SimpleObject$outboundSchema, z.string(), z.number().int()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MixedTypeOneOfPostJson$ {
  /** @deprecated use `MixedTypeOneOfPostJson$inboundSchema` instead. */
  export const inboundSchema = MixedTypeOneOfPostJson$inboundSchema;
  /** @deprecated use `MixedTypeOneOfPostJson$outboundSchema` instead. */
  export const outboundSchema = MixedTypeOneOfPostJson$outboundSchema;
  /** @deprecated use `MixedTypeOneOfPostJson$Outbound` instead. */
  export type Outbound = MixedTypeOneOfPostJson$Outbound;
}

export function mixedTypeOneOfPostJsonToJSON(
  mixedTypeOneOfPostJson: MixedTypeOneOfPostJson,
): string {
  return JSON.stringify(
    MixedTypeOneOfPostJson$outboundSchema.parse(mixedTypeOneOfPostJson),
  );
}

export function mixedTypeOneOfPostJsonFromJSON(
  jsonString: string,
): SafeParseResult<MixedTypeOneOfPostJson, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MixedTypeOneOfPostJson$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MixedTypeOneOfPostJson' from JSON`,
  );
}

/** @internal */
export const MixedTypeOneOfPostRes$inboundSchema: z.ZodType<
  MixedTypeOneOfPostRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  json: z.union([
    shared.SimpleObject$inboundSchema,
    z.string(),
    z.number().int(),
  ]),
});

/** @internal */
export type MixedTypeOneOfPostRes$Outbound = {
  json: shared.SimpleObject$Outbound | string | number;
};

/** @internal */
export const MixedTypeOneOfPostRes$outboundSchema: z.ZodType<
  MixedTypeOneOfPostRes$Outbound,
  z.ZodTypeDef,
  MixedTypeOneOfPostRes
> = z.object({
  json: z.union([
    shared.SimpleObject$outboundSchema,
    z.string(),
    z.number().int(),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MixedTypeOneOfPostRes$ {
  /** @deprecated use `MixedTypeOneOfPostRes$inboundSchema` instead. */
  export const inboundSchema = MixedTypeOneOfPostRes$inboundSchema;
  /** @deprecated use `MixedTypeOneOfPostRes$outboundSchema` instead. */
  export const outboundSchema = MixedTypeOneOfPostRes$outboundSchema;
  /** @deprecated use `MixedTypeOneOfPostRes$Outbound` instead. */
  export type Outbound = MixedTypeOneOfPostRes$Outbound;
}

export function mixedTypeOneOfPostResToJSON(
  mixedTypeOneOfPostRes: MixedTypeOneOfPostRes,
): string {
  return JSON.stringify(
    MixedTypeOneOfPostRes$outboundSchema.parse(mixedTypeOneOfPostRes),
  );
}

export function mixedTypeOneOfPostResFromJSON(
  jsonString: string,
): SafeParseResult<MixedTypeOneOfPostRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MixedTypeOneOfPostRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MixedTypeOneOfPostRes' from JSON`,
  );
}
