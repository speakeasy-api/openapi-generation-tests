/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as shared from "../shared";
import * as z from "zod";

export type MixedTypeOneOfPostRequestBody = shared.SimpleObject | string | number;

export type MixedTypeOneOfPostJson = shared.SimpleObject | string | number;

/**
 * OK
 */
export type MixedTypeOneOfPostRes = {
    json: shared.SimpleObject | string | number;
};

export type MixedTypeOneOfPostResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: MixedTypeOneOfPostRes | undefined;
};

/** @internal */
export namespace MixedTypeOneOfPostRequestBody$ {
    export const inboundSchema: z.ZodType<MixedTypeOneOfPostRequestBody, z.ZodTypeDef, unknown> =
        z.union([shared.SimpleObject$.inboundSchema, z.string(), z.number().int()]);

    export type Outbound = shared.SimpleObject$.Outbound | string | number;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MixedTypeOneOfPostRequestBody> =
        z.union([shared.SimpleObject$.outboundSchema, z.string(), z.number().int()]);
}

/** @internal */
export namespace MixedTypeOneOfPostJson$ {
    export const inboundSchema: z.ZodType<MixedTypeOneOfPostJson, z.ZodTypeDef, unknown> = z.union([
        shared.SimpleObject$.inboundSchema,
        z.string(),
        z.number().int(),
    ]);

    export type Outbound = shared.SimpleObject$.Outbound | string | number;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MixedTypeOneOfPostJson> =
        z.union([shared.SimpleObject$.outboundSchema, z.string(), z.number().int()]);
}

/** @internal */
export namespace MixedTypeOneOfPostRes$ {
    export const inboundSchema: z.ZodType<MixedTypeOneOfPostRes, z.ZodTypeDef, unknown> = z.object({
        json: z.union([shared.SimpleObject$.inboundSchema, z.string(), z.number().int()]),
    });

    export type Outbound = {
        json: shared.SimpleObject$.Outbound | string | number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MixedTypeOneOfPostRes> =
        z.object({
            json: z.union([shared.SimpleObject$.outboundSchema, z.string(), z.number().int()]),
        });
}

/** @internal */
export namespace MixedTypeOneOfPostResponse$ {
    export const inboundSchema: z.ZodType<MixedTypeOneOfPostResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => MixedTypeOneOfPostRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: MixedTypeOneOfPostRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MixedTypeOneOfPostResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => MixedTypeOneOfPostRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
