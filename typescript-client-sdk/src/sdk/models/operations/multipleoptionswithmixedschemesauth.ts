/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export const MultipleOptionsWithMixedSchemesAuthServerList = ["http://localhost:35456"] as const;

export type MultipleOptionsWithMixedSchemesAuthSecurityOption1 = {
    apiKeyAuthNew: string;
    oauth2: string;
};

export type MultipleOptionsWithMixedSchemesAuthSecurityOption2 = {
    apiKeyAuthNew: string;
    basicAuth: shared.SchemeBasicAuth;
};

export type MultipleOptionsWithMixedSchemesAuthSecurity = {
    option1?: MultipleOptionsWithMixedSchemesAuthSecurityOption1 | undefined;
    option2?: MultipleOptionsWithMixedSchemesAuthSecurityOption2 | undefined;
};

/** @internal */
export const MultipleOptionsWithMixedSchemesAuthSecurityOption1$inboundSchema: z.ZodType<
    MultipleOptionsWithMixedSchemesAuthSecurityOption1,
    z.ZodTypeDef,
    unknown
> = z.object({
    apiKeyAuthNew: z.string(),
    oauth2: z.string(),
});

/** @internal */
export type MultipleOptionsWithMixedSchemesAuthSecurityOption1$Outbound = {
    apiKeyAuthNew: string;
    oauth2: string;
};

/** @internal */
export const MultipleOptionsWithMixedSchemesAuthSecurityOption1$outboundSchema: z.ZodType<
    MultipleOptionsWithMixedSchemesAuthSecurityOption1$Outbound,
    z.ZodTypeDef,
    MultipleOptionsWithMixedSchemesAuthSecurityOption1
> = z.object({
    apiKeyAuthNew: z.string(),
    oauth2: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MultipleOptionsWithMixedSchemesAuthSecurityOption1$ {
    /** @deprecated use `MultipleOptionsWithMixedSchemesAuthSecurityOption1$inboundSchema` instead. */
    export const inboundSchema = MultipleOptionsWithMixedSchemesAuthSecurityOption1$inboundSchema;
    /** @deprecated use `MultipleOptionsWithMixedSchemesAuthSecurityOption1$outboundSchema` instead. */
    export const outboundSchema = MultipleOptionsWithMixedSchemesAuthSecurityOption1$outboundSchema;
    /** @deprecated use `MultipleOptionsWithMixedSchemesAuthSecurityOption1$Outbound` instead. */
    export type Outbound = MultipleOptionsWithMixedSchemesAuthSecurityOption1$Outbound;
}

/** @internal */
export const MultipleOptionsWithMixedSchemesAuthSecurityOption2$inboundSchema: z.ZodType<
    MultipleOptionsWithMixedSchemesAuthSecurityOption2,
    z.ZodTypeDef,
    unknown
> = z.object({
    apiKeyAuthNew: z.string(),
    basicAuth: shared.SchemeBasicAuth$inboundSchema,
});

/** @internal */
export type MultipleOptionsWithMixedSchemesAuthSecurityOption2$Outbound = {
    apiKeyAuthNew: string;
    basicAuth: shared.SchemeBasicAuth$Outbound;
};

/** @internal */
export const MultipleOptionsWithMixedSchemesAuthSecurityOption2$outboundSchema: z.ZodType<
    MultipleOptionsWithMixedSchemesAuthSecurityOption2$Outbound,
    z.ZodTypeDef,
    MultipleOptionsWithMixedSchemesAuthSecurityOption2
> = z.object({
    apiKeyAuthNew: z.string(),
    basicAuth: shared.SchemeBasicAuth$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MultipleOptionsWithMixedSchemesAuthSecurityOption2$ {
    /** @deprecated use `MultipleOptionsWithMixedSchemesAuthSecurityOption2$inboundSchema` instead. */
    export const inboundSchema = MultipleOptionsWithMixedSchemesAuthSecurityOption2$inboundSchema;
    /** @deprecated use `MultipleOptionsWithMixedSchemesAuthSecurityOption2$outboundSchema` instead. */
    export const outboundSchema = MultipleOptionsWithMixedSchemesAuthSecurityOption2$outboundSchema;
    /** @deprecated use `MultipleOptionsWithMixedSchemesAuthSecurityOption2$Outbound` instead. */
    export type Outbound = MultipleOptionsWithMixedSchemesAuthSecurityOption2$Outbound;
}

/** @internal */
export const MultipleOptionsWithMixedSchemesAuthSecurity$inboundSchema: z.ZodType<
    MultipleOptionsWithMixedSchemesAuthSecurity,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        Option1: z
            .lazy(() => MultipleOptionsWithMixedSchemesAuthSecurityOption1$inboundSchema)
            .optional(),
        Option2: z
            .lazy(() => MultipleOptionsWithMixedSchemesAuthSecurityOption2$inboundSchema)
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            Option1: "option1",
            Option2: "option2",
        });
    });

/** @internal */
export type MultipleOptionsWithMixedSchemesAuthSecurity$Outbound = {
    Option1?: MultipleOptionsWithMixedSchemesAuthSecurityOption1$Outbound | undefined;
    Option2?: MultipleOptionsWithMixedSchemesAuthSecurityOption2$Outbound | undefined;
};

/** @internal */
export const MultipleOptionsWithMixedSchemesAuthSecurity$outboundSchema: z.ZodType<
    MultipleOptionsWithMixedSchemesAuthSecurity$Outbound,
    z.ZodTypeDef,
    MultipleOptionsWithMixedSchemesAuthSecurity
> = z
    .object({
        option1: z
            .lazy(() => MultipleOptionsWithMixedSchemesAuthSecurityOption1$outboundSchema)
            .optional(),
        option2: z
            .lazy(() => MultipleOptionsWithMixedSchemesAuthSecurityOption2$outboundSchema)
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            option1: "Option1",
            option2: "Option2",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MultipleOptionsWithMixedSchemesAuthSecurity$ {
    /** @deprecated use `MultipleOptionsWithMixedSchemesAuthSecurity$inboundSchema` instead. */
    export const inboundSchema = MultipleOptionsWithMixedSchemesAuthSecurity$inboundSchema;
    /** @deprecated use `MultipleOptionsWithMixedSchemesAuthSecurity$outboundSchema` instead. */
    export const outboundSchema = MultipleOptionsWithMixedSchemesAuthSecurity$outboundSchema;
    /** @deprecated use `MultipleOptionsWithMixedSchemesAuthSecurity$Outbound` instead. */
    export type Outbound = MultipleOptionsWithMixedSchemesAuthSecurity$Outbound;
}
