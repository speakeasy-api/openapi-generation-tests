/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export const MultipleOptionsWithMixedSchemesAuthServerList = ["http://localhost:35456"] as const;

export type MultipleOptionsWithMixedSchemesAuthSecurityOption1 = {
    apiKeyAuthNew: string;
    oauth2: string;
};

export type MultipleOptionsWithMixedSchemesAuthSecurityOption2 = {
    apiKeyAuthNew: string;
    basicAuth: shared.SchemeBasicAuth;
};

export type MultipleOptionsWithMixedSchemesAuthSecurity = {
    option1?: MultipleOptionsWithMixedSchemesAuthSecurityOption1 | undefined;
    option2?: MultipleOptionsWithMixedSchemesAuthSecurityOption2 | undefined;
};

export type MultipleOptionsWithMixedSchemesAuthResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace MultipleOptionsWithMixedSchemesAuthSecurityOption1$ {
    export type Inbound = {
        apiKeyAuthNew: string;
        oauth2: string;
    };

    export const inboundSchema: z.ZodType<
        MultipleOptionsWithMixedSchemesAuthSecurityOption1,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            apiKeyAuthNew: z.string(),
            oauth2: z.string(),
        })
        .transform((v) => {
            return {
                apiKeyAuthNew: v.apiKeyAuthNew,
                oauth2: v.oauth2,
            };
        });

    export type Outbound = {
        apiKeyAuthNew: string;
        oauth2: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        MultipleOptionsWithMixedSchemesAuthSecurityOption1
    > = z
        .object({
            apiKeyAuthNew: z.string(),
            oauth2: z.string(),
        })
        .transform((v) => {
            return {
                apiKeyAuthNew: v.apiKeyAuthNew,
                oauth2: v.oauth2,
            };
        });
}

/** @internal */
export namespace MultipleOptionsWithMixedSchemesAuthSecurityOption2$ {
    export type Inbound = {
        apiKeyAuthNew: string;
        basicAuth: shared.SchemeBasicAuth$.Inbound;
    };

    export const inboundSchema: z.ZodType<
        MultipleOptionsWithMixedSchemesAuthSecurityOption2,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            apiKeyAuthNew: z.string(),
            basicAuth: shared.SchemeBasicAuth$.inboundSchema,
        })
        .transform((v) => {
            return {
                apiKeyAuthNew: v.apiKeyAuthNew,
                basicAuth: v.basicAuth,
            };
        });

    export type Outbound = {
        apiKeyAuthNew: string;
        basicAuth: shared.SchemeBasicAuth$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        MultipleOptionsWithMixedSchemesAuthSecurityOption2
    > = z
        .object({
            apiKeyAuthNew: z.string(),
            basicAuth: shared.SchemeBasicAuth$.outboundSchema,
        })
        .transform((v) => {
            return {
                apiKeyAuthNew: v.apiKeyAuthNew,
                basicAuth: v.basicAuth,
            };
        });
}

/** @internal */
export namespace MultipleOptionsWithMixedSchemesAuthSecurity$ {
    export type Inbound = {
        Option1?: MultipleOptionsWithMixedSchemesAuthSecurityOption1$.Inbound | undefined;
        Option2?: MultipleOptionsWithMixedSchemesAuthSecurityOption2$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        MultipleOptionsWithMixedSchemesAuthSecurity,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            Option1: z
                .lazy(() => MultipleOptionsWithMixedSchemesAuthSecurityOption1$.inboundSchema)
                .optional(),
            Option2: z
                .lazy(() => MultipleOptionsWithMixedSchemesAuthSecurityOption2$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.Option1 === undefined ? null : { option1: v.Option1 }),
                ...(v.Option2 === undefined ? null : { option2: v.Option2 }),
            };
        });

    export type Outbound = {
        Option1?: MultipleOptionsWithMixedSchemesAuthSecurityOption1$.Outbound | undefined;
        Option2?: MultipleOptionsWithMixedSchemesAuthSecurityOption2$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        MultipleOptionsWithMixedSchemesAuthSecurity
    > = z
        .object({
            option1: z
                .lazy(() => MultipleOptionsWithMixedSchemesAuthSecurityOption1$.outboundSchema)
                .optional(),
            option2: z
                .lazy(() => MultipleOptionsWithMixedSchemesAuthSecurityOption2$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.option1 === undefined ? null : { Option1: v.option1 }),
                ...(v.option2 === undefined ? null : { Option2: v.option2 }),
            };
        });
}

/** @internal */
export namespace MultipleOptionsWithMixedSchemesAuthResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        MultipleOptionsWithMixedSchemesAuthResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        MultipleOptionsWithMixedSchemesAuthResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
