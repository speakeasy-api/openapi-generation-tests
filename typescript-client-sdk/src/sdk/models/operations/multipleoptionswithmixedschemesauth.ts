/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export const MultipleOptionsWithMixedSchemesAuthServerList = ["http://localhost:35456"] as const;

export type MultipleOptionsWithMixedSchemesAuthSecurityOption1 = {
    apiKeyAuthNew: string;
    oauth2: string;
};

export type MultipleOptionsWithMixedSchemesAuthSecurityOption2 = {
    apiKeyAuthNew: string;
    basicAuth: shared.SchemeBasicAuth;
};

export type MultipleOptionsWithMixedSchemesAuthSecurity = {
    option1?: MultipleOptionsWithMixedSchemesAuthSecurityOption1 | undefined;
    option2?: MultipleOptionsWithMixedSchemesAuthSecurityOption2 | undefined;
};

/** @internal */
export namespace MultipleOptionsWithMixedSchemesAuthSecurityOption1$ {
    export const inboundSchema: z.ZodType<
        MultipleOptionsWithMixedSchemesAuthSecurityOption1,
        z.ZodTypeDef,
        unknown
    > = z.object({
        apiKeyAuthNew: z.string(),
        oauth2: z.string(),
    });

    export type Outbound = {
        apiKeyAuthNew: string;
        oauth2: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        MultipleOptionsWithMixedSchemesAuthSecurityOption1
    > = z.object({
        apiKeyAuthNew: z.string(),
        oauth2: z.string(),
    });
}

/** @internal */
export namespace MultipleOptionsWithMixedSchemesAuthSecurityOption2$ {
    export const inboundSchema: z.ZodType<
        MultipleOptionsWithMixedSchemesAuthSecurityOption2,
        z.ZodTypeDef,
        unknown
    > = z.object({
        apiKeyAuthNew: z.string(),
        basicAuth: shared.SchemeBasicAuth$.inboundSchema,
    });

    export type Outbound = {
        apiKeyAuthNew: string;
        basicAuth: shared.SchemeBasicAuth$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        MultipleOptionsWithMixedSchemesAuthSecurityOption2
    > = z.object({
        apiKeyAuthNew: z.string(),
        basicAuth: shared.SchemeBasicAuth$.outboundSchema,
    });
}

/** @internal */
export namespace MultipleOptionsWithMixedSchemesAuthSecurity$ {
    export const inboundSchema: z.ZodType<
        MultipleOptionsWithMixedSchemesAuthSecurity,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            Option1: z
                .lazy(() => MultipleOptionsWithMixedSchemesAuthSecurityOption1$.inboundSchema)
                .optional(),
            Option2: z
                .lazy(() => MultipleOptionsWithMixedSchemesAuthSecurityOption2$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Option1: "option1",
                Option2: "option2",
            });
        });

    export type Outbound = {
        Option1?: MultipleOptionsWithMixedSchemesAuthSecurityOption1$.Outbound | undefined;
        Option2?: MultipleOptionsWithMixedSchemesAuthSecurityOption2$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        MultipleOptionsWithMixedSchemesAuthSecurity
    > = z
        .object({
            option1: z
                .lazy(() => MultipleOptionsWithMixedSchemesAuthSecurityOption1$.outboundSchema)
                .optional(),
            option2: z
                .lazy(() => MultipleOptionsWithMixedSchemesAuthSecurityOption2$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                option1: "Option1",
                option2: "Option2",
            });
        });
}
