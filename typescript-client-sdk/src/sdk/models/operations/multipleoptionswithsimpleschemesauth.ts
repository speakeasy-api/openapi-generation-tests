/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export const MultipleOptionsWithSimpleSchemesAuthServerList = ["http://localhost:35456"] as const;

export type MultipleOptionsWithSimpleSchemesAuthSecurityOption1 = {
    apiKeyAuthNew: string;
    oauth2: string;
};

export type MultipleOptionsWithSimpleSchemesAuthSecurityOption2 = {
    apiKeyAuthNew: string;
    openIdConnect: string;
};

export type MultipleOptionsWithSimpleSchemesAuthSecurity = {
    option1?: MultipleOptionsWithSimpleSchemesAuthSecurityOption1 | undefined;
    option2?: MultipleOptionsWithSimpleSchemesAuthSecurityOption2 | undefined;
};

/** @internal */
export namespace MultipleOptionsWithSimpleSchemesAuthSecurityOption1$ {
    export const inboundSchema: z.ZodType<
        MultipleOptionsWithSimpleSchemesAuthSecurityOption1,
        z.ZodTypeDef,
        unknown
    > = z.object({
        apiKeyAuthNew: z.string(),
        oauth2: z.string(),
    });

    export type Outbound = {
        apiKeyAuthNew: string;
        oauth2: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        MultipleOptionsWithSimpleSchemesAuthSecurityOption1
    > = z.object({
        apiKeyAuthNew: z.string(),
        oauth2: z.string(),
    });
}

/** @internal */
export namespace MultipleOptionsWithSimpleSchemesAuthSecurityOption2$ {
    export const inboundSchema: z.ZodType<
        MultipleOptionsWithSimpleSchemesAuthSecurityOption2,
        z.ZodTypeDef,
        unknown
    > = z.object({
        apiKeyAuthNew: z.string(),
        openIdConnect: z.string(),
    });

    export type Outbound = {
        apiKeyAuthNew: string;
        openIdConnect: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        MultipleOptionsWithSimpleSchemesAuthSecurityOption2
    > = z.object({
        apiKeyAuthNew: z.string(),
        openIdConnect: z.string(),
    });
}

/** @internal */
export namespace MultipleOptionsWithSimpleSchemesAuthSecurity$ {
    export const inboundSchema: z.ZodType<
        MultipleOptionsWithSimpleSchemesAuthSecurity,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            Option1: z
                .lazy(() => MultipleOptionsWithSimpleSchemesAuthSecurityOption1$.inboundSchema)
                .optional(),
            Option2: z
                .lazy(() => MultipleOptionsWithSimpleSchemesAuthSecurityOption2$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Option1: "option1",
                Option2: "option2",
            });
        });

    export type Outbound = {
        Option1?: MultipleOptionsWithSimpleSchemesAuthSecurityOption1$.Outbound | undefined;
        Option2?: MultipleOptionsWithSimpleSchemesAuthSecurityOption2$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        MultipleOptionsWithSimpleSchemesAuthSecurity
    > = z
        .object({
            option1: z
                .lazy(() => MultipleOptionsWithSimpleSchemesAuthSecurityOption1$.outboundSchema)
                .optional(),
            option2: z
                .lazy(() => MultipleOptionsWithSimpleSchemesAuthSecurityOption2$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                option1: "Option1",
                option2: "Option2",
            });
        });
}
