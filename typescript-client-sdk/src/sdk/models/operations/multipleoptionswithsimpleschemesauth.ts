/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const MultipleOptionsWithSimpleSchemesAuthServerList = [
  "http://localhost:35456",
] as const;

export type MultipleOptionsWithSimpleSchemesAuthSecurityOption1 = {
  apiKeyAuthNew: string;
  oauth2: string;
};

export type MultipleOptionsWithSimpleSchemesAuthSecurityOption2 = {
  apiKeyAuthNew: string;
  openIdConnect: string;
};

export type MultipleOptionsWithSimpleSchemesAuthSecurity = {
  option1?: MultipleOptionsWithSimpleSchemesAuthSecurityOption1 | undefined;
  option2?: MultipleOptionsWithSimpleSchemesAuthSecurityOption2 | undefined;
};

/** @internal */
export const MultipleOptionsWithSimpleSchemesAuthSecurityOption1$inboundSchema:
  z.ZodType<
    MultipleOptionsWithSimpleSchemesAuthSecurityOption1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    apiKeyAuthNew: z.string(),
    oauth2: z.string(),
  });

/** @internal */
export type MultipleOptionsWithSimpleSchemesAuthSecurityOption1$Outbound = {
  apiKeyAuthNew: string;
  oauth2: string;
};

/** @internal */
export const MultipleOptionsWithSimpleSchemesAuthSecurityOption1$outboundSchema:
  z.ZodType<
    MultipleOptionsWithSimpleSchemesAuthSecurityOption1$Outbound,
    z.ZodTypeDef,
    MultipleOptionsWithSimpleSchemesAuthSecurityOption1
  > = z.object({
    apiKeyAuthNew: z.string(),
    oauth2: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MultipleOptionsWithSimpleSchemesAuthSecurityOption1$ {
  /** @deprecated use `MultipleOptionsWithSimpleSchemesAuthSecurityOption1$inboundSchema` instead. */
  export const inboundSchema =
    MultipleOptionsWithSimpleSchemesAuthSecurityOption1$inboundSchema;
  /** @deprecated use `MultipleOptionsWithSimpleSchemesAuthSecurityOption1$outboundSchema` instead. */
  export const outboundSchema =
    MultipleOptionsWithSimpleSchemesAuthSecurityOption1$outboundSchema;
  /** @deprecated use `MultipleOptionsWithSimpleSchemesAuthSecurityOption1$Outbound` instead. */
  export type Outbound =
    MultipleOptionsWithSimpleSchemesAuthSecurityOption1$Outbound;
}

export function multipleOptionsWithSimpleSchemesAuthSecurityOption1ToJSON(
  multipleOptionsWithSimpleSchemesAuthSecurityOption1:
    MultipleOptionsWithSimpleSchemesAuthSecurityOption1,
): string {
  return JSON.stringify(
    MultipleOptionsWithSimpleSchemesAuthSecurityOption1$outboundSchema.parse(
      multipleOptionsWithSimpleSchemesAuthSecurityOption1,
    ),
  );
}

export function multipleOptionsWithSimpleSchemesAuthSecurityOption1FromJSON(
  jsonString: string,
): SafeParseResult<
  MultipleOptionsWithSimpleSchemesAuthSecurityOption1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MultipleOptionsWithSimpleSchemesAuthSecurityOption1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MultipleOptionsWithSimpleSchemesAuthSecurityOption1' from JSON`,
  );
}

/** @internal */
export const MultipleOptionsWithSimpleSchemesAuthSecurityOption2$inboundSchema:
  z.ZodType<
    MultipleOptionsWithSimpleSchemesAuthSecurityOption2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    apiKeyAuthNew: z.string(),
    openIdConnect: z.string(),
  });

/** @internal */
export type MultipleOptionsWithSimpleSchemesAuthSecurityOption2$Outbound = {
  apiKeyAuthNew: string;
  openIdConnect: string;
};

/** @internal */
export const MultipleOptionsWithSimpleSchemesAuthSecurityOption2$outboundSchema:
  z.ZodType<
    MultipleOptionsWithSimpleSchemesAuthSecurityOption2$Outbound,
    z.ZodTypeDef,
    MultipleOptionsWithSimpleSchemesAuthSecurityOption2
  > = z.object({
    apiKeyAuthNew: z.string(),
    openIdConnect: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MultipleOptionsWithSimpleSchemesAuthSecurityOption2$ {
  /** @deprecated use `MultipleOptionsWithSimpleSchemesAuthSecurityOption2$inboundSchema` instead. */
  export const inboundSchema =
    MultipleOptionsWithSimpleSchemesAuthSecurityOption2$inboundSchema;
  /** @deprecated use `MultipleOptionsWithSimpleSchemesAuthSecurityOption2$outboundSchema` instead. */
  export const outboundSchema =
    MultipleOptionsWithSimpleSchemesAuthSecurityOption2$outboundSchema;
  /** @deprecated use `MultipleOptionsWithSimpleSchemesAuthSecurityOption2$Outbound` instead. */
  export type Outbound =
    MultipleOptionsWithSimpleSchemesAuthSecurityOption2$Outbound;
}

export function multipleOptionsWithSimpleSchemesAuthSecurityOption2ToJSON(
  multipleOptionsWithSimpleSchemesAuthSecurityOption2:
    MultipleOptionsWithSimpleSchemesAuthSecurityOption2,
): string {
  return JSON.stringify(
    MultipleOptionsWithSimpleSchemesAuthSecurityOption2$outboundSchema.parse(
      multipleOptionsWithSimpleSchemesAuthSecurityOption2,
    ),
  );
}

export function multipleOptionsWithSimpleSchemesAuthSecurityOption2FromJSON(
  jsonString: string,
): SafeParseResult<
  MultipleOptionsWithSimpleSchemesAuthSecurityOption2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MultipleOptionsWithSimpleSchemesAuthSecurityOption2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MultipleOptionsWithSimpleSchemesAuthSecurityOption2' from JSON`,
  );
}

/** @internal */
export const MultipleOptionsWithSimpleSchemesAuthSecurity$inboundSchema:
  z.ZodType<
    MultipleOptionsWithSimpleSchemesAuthSecurity,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Option1: z.lazy(() =>
      MultipleOptionsWithSimpleSchemesAuthSecurityOption1$inboundSchema
    ).optional(),
    Option2: z.lazy(() =>
      MultipleOptionsWithSimpleSchemesAuthSecurityOption2$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "Option1": "option1",
      "Option2": "option2",
    });
  });

/** @internal */
export type MultipleOptionsWithSimpleSchemesAuthSecurity$Outbound = {
  Option1?:
    | MultipleOptionsWithSimpleSchemesAuthSecurityOption1$Outbound
    | undefined;
  Option2?:
    | MultipleOptionsWithSimpleSchemesAuthSecurityOption2$Outbound
    | undefined;
};

/** @internal */
export const MultipleOptionsWithSimpleSchemesAuthSecurity$outboundSchema:
  z.ZodType<
    MultipleOptionsWithSimpleSchemesAuthSecurity$Outbound,
    z.ZodTypeDef,
    MultipleOptionsWithSimpleSchemesAuthSecurity
  > = z.object({
    option1: z.lazy(() =>
      MultipleOptionsWithSimpleSchemesAuthSecurityOption1$outboundSchema
    ).optional(),
    option2: z.lazy(() =>
      MultipleOptionsWithSimpleSchemesAuthSecurityOption2$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      option1: "Option1",
      option2: "Option2",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MultipleOptionsWithSimpleSchemesAuthSecurity$ {
  /** @deprecated use `MultipleOptionsWithSimpleSchemesAuthSecurity$inboundSchema` instead. */
  export const inboundSchema =
    MultipleOptionsWithSimpleSchemesAuthSecurity$inboundSchema;
  /** @deprecated use `MultipleOptionsWithSimpleSchemesAuthSecurity$outboundSchema` instead. */
  export const outboundSchema =
    MultipleOptionsWithSimpleSchemesAuthSecurity$outboundSchema;
  /** @deprecated use `MultipleOptionsWithSimpleSchemesAuthSecurity$Outbound` instead. */
  export type Outbound = MultipleOptionsWithSimpleSchemesAuthSecurity$Outbound;
}

export function multipleOptionsWithSimpleSchemesAuthSecurityToJSON(
  multipleOptionsWithSimpleSchemesAuthSecurity:
    MultipleOptionsWithSimpleSchemesAuthSecurity,
): string {
  return JSON.stringify(
    MultipleOptionsWithSimpleSchemesAuthSecurity$outboundSchema.parse(
      multipleOptionsWithSimpleSchemesAuthSecurity,
    ),
  );
}

export function multipleOptionsWithSimpleSchemesAuthSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  MultipleOptionsWithSimpleSchemesAuthSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MultipleOptionsWithSimpleSchemesAuthSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MultipleOptionsWithSimpleSchemesAuthSecurity' from JSON`,
  );
}
