/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const MultipleSimpleSchemeAuthServerList = [
  "http://localhost:35456",
] as const;

export type MultipleSimpleSchemeAuthSecurity = {
  apiKeyAuthNew: string;
  oauth2: string;
};

/** @internal */
export const MultipleSimpleSchemeAuthSecurity$inboundSchema: z.ZodType<
  MultipleSimpleSchemeAuthSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKeyAuthNew: z.string(),
  oauth2: z.string(),
});

/** @internal */
export type MultipleSimpleSchemeAuthSecurity$Outbound = {
  apiKeyAuthNew: string;
  oauth2: string;
};

/** @internal */
export const MultipleSimpleSchemeAuthSecurity$outboundSchema: z.ZodType<
  MultipleSimpleSchemeAuthSecurity$Outbound,
  z.ZodTypeDef,
  MultipleSimpleSchemeAuthSecurity
> = z.object({
  apiKeyAuthNew: z.string(),
  oauth2: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MultipleSimpleSchemeAuthSecurity$ {
  /** @deprecated use `MultipleSimpleSchemeAuthSecurity$inboundSchema` instead. */
  export const inboundSchema = MultipleSimpleSchemeAuthSecurity$inboundSchema;
  /** @deprecated use `MultipleSimpleSchemeAuthSecurity$outboundSchema` instead. */
  export const outboundSchema = MultipleSimpleSchemeAuthSecurity$outboundSchema;
  /** @deprecated use `MultipleSimpleSchemeAuthSecurity$Outbound` instead. */
  export type Outbound = MultipleSimpleSchemeAuthSecurity$Outbound;
}

export function multipleSimpleSchemeAuthSecurityToJSON(
  multipleSimpleSchemeAuthSecurity: MultipleSimpleSchemeAuthSecurity,
): string {
  return JSON.stringify(
    MultipleSimpleSchemeAuthSecurity$outboundSchema.parse(
      multipleSimpleSchemeAuthSecurity,
    ),
  );
}

export function multipleSimpleSchemeAuthSecurityFromJSON(
  jsonString: string,
): SafeParseResult<MultipleSimpleSchemeAuthSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MultipleSimpleSchemeAuthSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MultipleSimpleSchemeAuthSecurity' from JSON`,
  );
}
