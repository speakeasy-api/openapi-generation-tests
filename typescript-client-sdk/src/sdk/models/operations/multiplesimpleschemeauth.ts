/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export const MultipleSimpleSchemeAuthServerList = ["http://localhost:35456"] as const;

export type MultipleSimpleSchemeAuthSecurity = {
    apiKeyAuthNew: string;
    oauth2: string;
};

export type MultipleSimpleSchemeAuthResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace MultipleSimpleSchemeAuthSecurity$ {
    export type Inbound = {
        apiKeyAuthNew: string;
        oauth2: string;
    };

    export const inboundSchema: z.ZodType<MultipleSimpleSchemeAuthSecurity, z.ZodTypeDef, Inbound> =
        z
            .object({
                apiKeyAuthNew: z.string(),
                oauth2: z.string(),
            })
            .transform((v) => {
                return {
                    apiKeyAuthNew: v.apiKeyAuthNew,
                    oauth2: v.oauth2,
                };
            });

    export type Outbound = {
        apiKeyAuthNew: string;
        oauth2: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        MultipleSimpleSchemeAuthSecurity
    > = z
        .object({
            apiKeyAuthNew: z.string(),
            oauth2: z.string(),
        })
        .transform((v) => {
            return {
                apiKeyAuthNew: v.apiKeyAuthNew,
                oauth2: v.oauth2,
            };
        });
}

/** @internal */
export namespace MultipleSimpleSchemeAuthResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<MultipleSimpleSchemeAuthResponse, z.ZodTypeDef, Inbound> =
        z
            .object({
                ContentType: z.string(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
            })
            .transform((v) => {
                return {
                    contentType: v.ContentType,
                    statusCode: v.StatusCode,
                    rawResponse: v.RawResponse,
                };
            });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        MultipleSimpleSchemeAuthResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
