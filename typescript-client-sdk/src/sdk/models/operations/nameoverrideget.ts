/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import * as z from "zod";

/**
 * An enum type
 */
export enum EnumNameOverride {
    Value1 = "value1",
    Value2 = "value2",
    Value3 = "value3",
}

export type NameOverrideGetRequest = {
    /**
     * An enum type
     */
    testEnumQueryParam: EnumNameOverride;
    testQueryParam: string;
};

/**
 * A successful response that contains the simpleObject sent in the request body
 */
export type NameOverrideGetOverriddenResponse = {
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    json?: shared.SimpleObject | undefined;
};

export type NameOverrideGetResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * A successful response that contains the simpleObject sent in the request body
     */
    overriddenResponse?: NameOverrideGetOverriddenResponse | undefined;
};

/** @internal */
export const EnumNameOverride$ = z.nativeEnum(EnumNameOverride);

/** @internal */
export namespace NameOverrideGetRequest$ {
    export type Inbound = {
        testEnumQueryParam: EnumNameOverride;
        testQueryParam: string;
    };

    export const inboundSchema: z.ZodType<NameOverrideGetRequest, z.ZodTypeDef, Inbound> = z
        .object({
            testEnumQueryParam: EnumNameOverride$,
            testQueryParam: z.string(),
        })
        .transform((v) => {
            return {
                testEnumQueryParam: v.testEnumQueryParam,
                testQueryParam: v.testQueryParam,
            };
        });

    export type Outbound = {
        testEnumQueryParam: EnumNameOverride;
        testQueryParam: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NameOverrideGetRequest> = z
        .object({
            testEnumQueryParam: EnumNameOverride$,
            testQueryParam: z.string(),
        })
        .transform((v) => {
            return {
                testEnumQueryParam: v.testEnumQueryParam,
                testQueryParam: v.testQueryParam,
            };
        });
}

/** @internal */
export namespace NameOverrideGetOverriddenResponse$ {
    export type Inbound = {
        json?: shared.SimpleObject$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        NameOverrideGetOverriddenResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            json: shared.SimpleObject$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.json === undefined ? null : { json: v.json }),
            };
        });

    export type Outbound = {
        json?: shared.SimpleObject$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NameOverrideGetOverriddenResponse
    > = z
        .object({
            json: shared.SimpleObject$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.json === undefined ? null : { json: v.json }),
            };
        });
}

/** @internal */
export namespace NameOverrideGetResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        overriddenResponse?: NameOverrideGetOverriddenResponse$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<NameOverrideGetResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            overriddenResponse: z
                .lazy(() => NameOverrideGetOverriddenResponse$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.overriddenResponse === undefined
                    ? null
                    : { overriddenResponse: v.overriddenResponse }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        overriddenResponse?: NameOverrideGetOverriddenResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NameOverrideGetResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            overriddenResponse: z
                .lazy(() => NameOverrideGetOverriddenResponse$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.overriddenResponse === undefined
                    ? null
                    : { overriddenResponse: v.overriddenResponse }),
            };
        });
}
