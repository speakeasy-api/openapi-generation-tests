/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

/**
 * An enum type
 */
export const EnumNameOverride = {
    Value1: "value1",
    Value2: "value2",
    Value3: "value3",
} as const;
/**
 * An enum type
 */
export type EnumNameOverride = ClosedEnum<typeof EnumNameOverride>;

export type NameOverrideGetRequest = {
    /**
     * An enum type
     */
    testEnumQueryParam: EnumNameOverride;
    testQueryParam: string;
};

export type DeepOverriddenAllOf = {};

export type OverriddenAllOf = {};

export type OverriddenNormal = {};

/**
 * A successful response that contains the simpleObject sent in the request body
 */
export type NameOverrideGetOverriddenResponse = {
    deepOverriddenAllOf?: DeepOverriddenAllOf | undefined;
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    json?: shared.SimpleObject | undefined;
    overriddenAllOf?: OverriddenAllOf | undefined;
    overriddenNormal?: OverriddenNormal | undefined;
};

/** @internal */
export const EnumNameOverride$inboundSchema: z.ZodNativeEnum<typeof EnumNameOverride> =
    z.nativeEnum(EnumNameOverride);

/** @internal */
export const EnumNameOverride$outboundSchema: z.ZodNativeEnum<typeof EnumNameOverride> =
    EnumNameOverride$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnumNameOverride$ {
    /** @deprecated use `EnumNameOverride$inboundSchema` instead. */
    export const inboundSchema = EnumNameOverride$inboundSchema;
    /** @deprecated use `EnumNameOverride$outboundSchema` instead. */
    export const outboundSchema = EnumNameOverride$outboundSchema;
}

/** @internal */
export const NameOverrideGetRequest$inboundSchema: z.ZodType<
    NameOverrideGetRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    testEnumQueryParam: EnumNameOverride$inboundSchema,
    testQueryParam: z.string(),
});

/** @internal */
export type NameOverrideGetRequest$Outbound = {
    testEnumQueryParam: string;
    testQueryParam: string;
};

/** @internal */
export const NameOverrideGetRequest$outboundSchema: z.ZodType<
    NameOverrideGetRequest$Outbound,
    z.ZodTypeDef,
    NameOverrideGetRequest
> = z.object({
    testEnumQueryParam: EnumNameOverride$outboundSchema,
    testQueryParam: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NameOverrideGetRequest$ {
    /** @deprecated use `NameOverrideGetRequest$inboundSchema` instead. */
    export const inboundSchema = NameOverrideGetRequest$inboundSchema;
    /** @deprecated use `NameOverrideGetRequest$outboundSchema` instead. */
    export const outboundSchema = NameOverrideGetRequest$outboundSchema;
    /** @deprecated use `NameOverrideGetRequest$Outbound` instead. */
    export type Outbound = NameOverrideGetRequest$Outbound;
}

/** @internal */
export const DeepOverriddenAllOf$inboundSchema: z.ZodType<
    DeepOverriddenAllOf,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type DeepOverriddenAllOf$Outbound = {};

/** @internal */
export const DeepOverriddenAllOf$outboundSchema: z.ZodType<
    DeepOverriddenAllOf$Outbound,
    z.ZodTypeDef,
    DeepOverriddenAllOf
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeepOverriddenAllOf$ {
    /** @deprecated use `DeepOverriddenAllOf$inboundSchema` instead. */
    export const inboundSchema = DeepOverriddenAllOf$inboundSchema;
    /** @deprecated use `DeepOverriddenAllOf$outboundSchema` instead. */
    export const outboundSchema = DeepOverriddenAllOf$outboundSchema;
    /** @deprecated use `DeepOverriddenAllOf$Outbound` instead. */
    export type Outbound = DeepOverriddenAllOf$Outbound;
}

/** @internal */
export const OverriddenAllOf$inboundSchema: z.ZodType<OverriddenAllOf, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type OverriddenAllOf$Outbound = {};

/** @internal */
export const OverriddenAllOf$outboundSchema: z.ZodType<
    OverriddenAllOf$Outbound,
    z.ZodTypeDef,
    OverriddenAllOf
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OverriddenAllOf$ {
    /** @deprecated use `OverriddenAllOf$inboundSchema` instead. */
    export const inboundSchema = OverriddenAllOf$inboundSchema;
    /** @deprecated use `OverriddenAllOf$outboundSchema` instead. */
    export const outboundSchema = OverriddenAllOf$outboundSchema;
    /** @deprecated use `OverriddenAllOf$Outbound` instead. */
    export type Outbound = OverriddenAllOf$Outbound;
}

/** @internal */
export const OverriddenNormal$inboundSchema: z.ZodType<OverriddenNormal, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type OverriddenNormal$Outbound = {};

/** @internal */
export const OverriddenNormal$outboundSchema: z.ZodType<
    OverriddenNormal$Outbound,
    z.ZodTypeDef,
    OverriddenNormal
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OverriddenNormal$ {
    /** @deprecated use `OverriddenNormal$inboundSchema` instead. */
    export const inboundSchema = OverriddenNormal$inboundSchema;
    /** @deprecated use `OverriddenNormal$outboundSchema` instead. */
    export const outboundSchema = OverriddenNormal$outboundSchema;
    /** @deprecated use `OverriddenNormal$Outbound` instead. */
    export type Outbound = OverriddenNormal$Outbound;
}

/** @internal */
export const NameOverrideGetOverriddenResponse$inboundSchema: z.ZodType<
    NameOverrideGetOverriddenResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        deepAllOf: z.lazy(() => DeepOverriddenAllOf$inboundSchema).optional(),
        json: shared.SimpleObject$inboundSchema.optional(),
        allOf: z.lazy(() => OverriddenAllOf$inboundSchema).optional(),
        normal: z.lazy(() => OverriddenNormal$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            deepAllOf: "deepOverriddenAllOf",
            allOf: "overriddenAllOf",
            normal: "overriddenNormal",
        });
    });

/** @internal */
export type NameOverrideGetOverriddenResponse$Outbound = {
    deepAllOf?: DeepOverriddenAllOf$Outbound | undefined;
    json?: shared.SimpleObject$Outbound | undefined;
    allOf?: OverriddenAllOf$Outbound | undefined;
    normal?: OverriddenNormal$Outbound | undefined;
};

/** @internal */
export const NameOverrideGetOverriddenResponse$outboundSchema: z.ZodType<
    NameOverrideGetOverriddenResponse$Outbound,
    z.ZodTypeDef,
    NameOverrideGetOverriddenResponse
> = z
    .object({
        deepOverriddenAllOf: z.lazy(() => DeepOverriddenAllOf$outboundSchema).optional(),
        json: shared.SimpleObject$outboundSchema.optional(),
        overriddenAllOf: z.lazy(() => OverriddenAllOf$outboundSchema).optional(),
        overriddenNormal: z.lazy(() => OverriddenNormal$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            deepOverriddenAllOf: "deepAllOf",
            overriddenAllOf: "allOf",
            overriddenNormal: "normal",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NameOverrideGetOverriddenResponse$ {
    /** @deprecated use `NameOverrideGetOverriddenResponse$inboundSchema` instead. */
    export const inboundSchema = NameOverrideGetOverriddenResponse$inboundSchema;
    /** @deprecated use `NameOverrideGetOverriddenResponse$outboundSchema` instead. */
    export const outboundSchema = NameOverrideGetOverriddenResponse$outboundSchema;
    /** @deprecated use `NameOverrideGetOverriddenResponse$Outbound` instead. */
    export type Outbound = NameOverrideGetOverriddenResponse$Outbound;
}
