/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

/**
 * An enum type
 */
export enum EnumNameOverride {
    Value1 = "value1",
    Value2 = "value2",
    Value3 = "value3",
}

export type NameOverrideGetRequest = {
    /**
     * An enum type
     */
    testEnumQueryParam: EnumNameOverride;
    testQueryParam: string;
};

export type DeepOverriddenAllOf = {};

export type OverriddenAllOf = {};

export type OverriddenNormal = {};

/**
 * A successful response that contains the simpleObject sent in the request body
 */
export type NameOverrideGetOverriddenResponse = {
    deepOverriddenAllOf?: DeepOverriddenAllOf | undefined;
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    json?: shared.SimpleObject | undefined;
    overriddenAllOf?: OverriddenAllOf | undefined;
    overriddenNormal?: OverriddenNormal | undefined;
};

export type NameOverrideGetResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * A successful response that contains the simpleObject sent in the request body
     */
    overriddenResponse?: NameOverrideGetOverriddenResponse | undefined;
};

/** @internal */
export namespace EnumNameOverride$ {
    export const inboundSchema: z.ZodNativeEnum<typeof EnumNameOverride> =
        z.nativeEnum(EnumNameOverride);
    export const outboundSchema: z.ZodNativeEnum<typeof EnumNameOverride> = inboundSchema;
}

/** @internal */
export namespace NameOverrideGetRequest$ {
    export const inboundSchema: z.ZodType<NameOverrideGetRequest, z.ZodTypeDef, unknown> = z.object(
        {
            testEnumQueryParam: EnumNameOverride$.inboundSchema,
            testQueryParam: z.string(),
        }
    );

    export type Outbound = {
        testEnumQueryParam: string;
        testQueryParam: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NameOverrideGetRequest> =
        z.object({
            testEnumQueryParam: EnumNameOverride$.outboundSchema,
            testQueryParam: z.string(),
        });
}

/** @internal */
export namespace DeepOverriddenAllOf$ {
    export const inboundSchema: z.ZodType<DeepOverriddenAllOf, z.ZodTypeDef, unknown> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeepOverriddenAllOf> = z.object(
        {}
    );
}

/** @internal */
export namespace OverriddenAllOf$ {
    export const inboundSchema: z.ZodType<OverriddenAllOf, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OverriddenAllOf> = z.object({});
}

/** @internal */
export namespace OverriddenNormal$ {
    export const inboundSchema: z.ZodType<OverriddenNormal, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OverriddenNormal> = z.object({});
}

/** @internal */
export namespace NameOverrideGetOverriddenResponse$ {
    export const inboundSchema: z.ZodType<
        NameOverrideGetOverriddenResponse,
        z.ZodTypeDef,
        unknown
    > = z.object({
        deepOverriddenAllOf: z.lazy(() => DeepOverriddenAllOf$.inboundSchema).optional(),
        json: shared.SimpleObject$.inboundSchema.optional(),
        overriddenAllOf: z.lazy(() => OverriddenAllOf$.inboundSchema).optional(),
        overriddenNormal: z.lazy(() => OverriddenNormal$.inboundSchema).optional(),
    });

    export type Outbound = {
        deepOverriddenAllOf?: DeepOverriddenAllOf$.Outbound | undefined;
        json?: shared.SimpleObject$.Outbound | undefined;
        overriddenAllOf?: OverriddenAllOf$.Outbound | undefined;
        overriddenNormal?: OverriddenNormal$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NameOverrideGetOverriddenResponse
    > = z.object({
        deepOverriddenAllOf: z.lazy(() => DeepOverriddenAllOf$.outboundSchema).optional(),
        json: shared.SimpleObject$.outboundSchema.optional(),
        overriddenAllOf: z.lazy(() => OverriddenAllOf$.outboundSchema).optional(),
        overriddenNormal: z.lazy(() => OverriddenNormal$.outboundSchema).optional(),
    });
}

/** @internal */
export namespace NameOverrideGetResponse$ {
    export const inboundSchema: z.ZodType<NameOverrideGetResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            overriddenResponse: z
                .lazy(() => NameOverrideGetOverriddenResponse$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        overriddenResponse?: NameOverrideGetOverriddenResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NameOverrideGetResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            overriddenResponse: z
                .lazy(() => NameOverrideGetOverriddenResponse$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
