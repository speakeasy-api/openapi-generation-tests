/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

/**
 * OK
 */
export type NullableObjectPostRes = {
    json: shared.NullableObject | null;
};

export type NullableObjectPostResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: NullableObjectPostRes | undefined;
};

/** @internal */
export namespace NullableObjectPostRes$ {
    export type Inbound = {
        json: shared.NullableObject$.Inbound | null;
    };

    export const inboundSchema: z.ZodType<NullableObjectPostRes, z.ZodTypeDef, Inbound> = z
        .object({
            json: z.nullable(shared.NullableObject$.inboundSchema),
        })
        .transform((v) => {
            return {
                json: v.json,
            };
        });

    export type Outbound = {
        json: shared.NullableObject$.Outbound | null;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NullableObjectPostRes> = z
        .object({
            json: z.nullable(shared.NullableObject$.outboundSchema),
        })
        .transform((v) => {
            return {
                json: v.json,
            };
        });
}

/** @internal */
export namespace NullableObjectPostResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        res?: NullableObjectPostRes$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<NullableObjectPostResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => NullableObjectPostRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: NullableObjectPostRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NullableObjectPostResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => NullableObjectPostRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
