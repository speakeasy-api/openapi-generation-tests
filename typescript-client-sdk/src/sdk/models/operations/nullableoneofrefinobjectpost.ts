/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * OK
 */
export type NullableOneOfRefInObjectPostRes = {
  json: shared.NullableOneOfRefInObject;
};

/** @internal */
export const NullableOneOfRefInObjectPostRes$inboundSchema: z.ZodType<
  NullableOneOfRefInObjectPostRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  json: shared.NullableOneOfRefInObject$inboundSchema,
});

/** @internal */
export type NullableOneOfRefInObjectPostRes$Outbound = {
  json: shared.NullableOneOfRefInObject$Outbound;
};

/** @internal */
export const NullableOneOfRefInObjectPostRes$outboundSchema: z.ZodType<
  NullableOneOfRefInObjectPostRes$Outbound,
  z.ZodTypeDef,
  NullableOneOfRefInObjectPostRes
> = z.object({
  json: shared.NullableOneOfRefInObject$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableOneOfRefInObjectPostRes$ {
  /** @deprecated use `NullableOneOfRefInObjectPostRes$inboundSchema` instead. */
  export const inboundSchema = NullableOneOfRefInObjectPostRes$inboundSchema;
  /** @deprecated use `NullableOneOfRefInObjectPostRes$outboundSchema` instead. */
  export const outboundSchema = NullableOneOfRefInObjectPostRes$outboundSchema;
  /** @deprecated use `NullableOneOfRefInObjectPostRes$Outbound` instead. */
  export type Outbound = NullableOneOfRefInObjectPostRes$Outbound;
}

export function nullableOneOfRefInObjectPostResToJSON(
  nullableOneOfRefInObjectPostRes: NullableOneOfRefInObjectPostRes,
): string {
  return JSON.stringify(
    NullableOneOfRefInObjectPostRes$outboundSchema.parse(
      nullableOneOfRefInObjectPostRes,
    ),
  );
}

export function nullableOneOfRefInObjectPostResFromJSON(
  jsonString: string,
): SafeParseResult<NullableOneOfRefInObjectPostRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NullableOneOfRefInObjectPostRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableOneOfRefInObjectPostRes' from JSON`,
  );
}
