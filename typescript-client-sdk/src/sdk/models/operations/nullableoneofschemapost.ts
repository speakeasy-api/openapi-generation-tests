/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type NullableOneOfSchemaPostRequestBody =
  | shared.TypedObject1
  | shared.TypedObject2;

export type NullableOneOfSchemaPostJson =
  | shared.TypedObject1
  | shared.TypedObject2;

/**
 * OK
 */
export type NullableOneOfSchemaPostRes = {
  json: shared.TypedObject1 | shared.TypedObject2 | null;
};

/** @internal */
export const NullableOneOfSchemaPostRequestBody$inboundSchema: z.ZodType<
  NullableOneOfSchemaPostRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  shared.TypedObject1$inboundSchema,
  shared.TypedObject2$inboundSchema,
]);

/** @internal */
export type NullableOneOfSchemaPostRequestBody$Outbound =
  | shared.TypedObject1$Outbound
  | shared.TypedObject2$Outbound;

/** @internal */
export const NullableOneOfSchemaPostRequestBody$outboundSchema: z.ZodType<
  NullableOneOfSchemaPostRequestBody$Outbound,
  z.ZodTypeDef,
  NullableOneOfSchemaPostRequestBody
> = z.union([
  shared.TypedObject1$outboundSchema,
  shared.TypedObject2$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableOneOfSchemaPostRequestBody$ {
  /** @deprecated use `NullableOneOfSchemaPostRequestBody$inboundSchema` instead. */
  export const inboundSchema = NullableOneOfSchemaPostRequestBody$inboundSchema;
  /** @deprecated use `NullableOneOfSchemaPostRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    NullableOneOfSchemaPostRequestBody$outboundSchema;
  /** @deprecated use `NullableOneOfSchemaPostRequestBody$Outbound` instead. */
  export type Outbound = NullableOneOfSchemaPostRequestBody$Outbound;
}

export function nullableOneOfSchemaPostRequestBodyToJSON(
  nullableOneOfSchemaPostRequestBody: NullableOneOfSchemaPostRequestBody,
): string {
  return JSON.stringify(
    NullableOneOfSchemaPostRequestBody$outboundSchema.parse(
      nullableOneOfSchemaPostRequestBody,
    ),
  );
}

export function nullableOneOfSchemaPostRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<NullableOneOfSchemaPostRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      NullableOneOfSchemaPostRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableOneOfSchemaPostRequestBody' from JSON`,
  );
}

/** @internal */
export const NullableOneOfSchemaPostJson$inboundSchema: z.ZodType<
  NullableOneOfSchemaPostJson,
  z.ZodTypeDef,
  unknown
> = z.union([
  shared.TypedObject1$inboundSchema,
  shared.TypedObject2$inboundSchema,
]);

/** @internal */
export type NullableOneOfSchemaPostJson$Outbound =
  | shared.TypedObject1$Outbound
  | shared.TypedObject2$Outbound;

/** @internal */
export const NullableOneOfSchemaPostJson$outboundSchema: z.ZodType<
  NullableOneOfSchemaPostJson$Outbound,
  z.ZodTypeDef,
  NullableOneOfSchemaPostJson
> = z.union([
  shared.TypedObject1$outboundSchema,
  shared.TypedObject2$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableOneOfSchemaPostJson$ {
  /** @deprecated use `NullableOneOfSchemaPostJson$inboundSchema` instead. */
  export const inboundSchema = NullableOneOfSchemaPostJson$inboundSchema;
  /** @deprecated use `NullableOneOfSchemaPostJson$outboundSchema` instead. */
  export const outboundSchema = NullableOneOfSchemaPostJson$outboundSchema;
  /** @deprecated use `NullableOneOfSchemaPostJson$Outbound` instead. */
  export type Outbound = NullableOneOfSchemaPostJson$Outbound;
}

export function nullableOneOfSchemaPostJsonToJSON(
  nullableOneOfSchemaPostJson: NullableOneOfSchemaPostJson,
): string {
  return JSON.stringify(
    NullableOneOfSchemaPostJson$outboundSchema.parse(
      nullableOneOfSchemaPostJson,
    ),
  );
}

export function nullableOneOfSchemaPostJsonFromJSON(
  jsonString: string,
): SafeParseResult<NullableOneOfSchemaPostJson, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NullableOneOfSchemaPostJson$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableOneOfSchemaPostJson' from JSON`,
  );
}

/** @internal */
export const NullableOneOfSchemaPostRes$inboundSchema: z.ZodType<
  NullableOneOfSchemaPostRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  json: z.nullable(
    z.union([
      shared.TypedObject1$inboundSchema,
      shared.TypedObject2$inboundSchema,
    ]),
  ),
});

/** @internal */
export type NullableOneOfSchemaPostRes$Outbound = {
  json: shared.TypedObject1$Outbound | shared.TypedObject2$Outbound | null;
};

/** @internal */
export const NullableOneOfSchemaPostRes$outboundSchema: z.ZodType<
  NullableOneOfSchemaPostRes$Outbound,
  z.ZodTypeDef,
  NullableOneOfSchemaPostRes
> = z.object({
  json: z.nullable(
    z.union([
      shared.TypedObject1$outboundSchema,
      shared.TypedObject2$outboundSchema,
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableOneOfSchemaPostRes$ {
  /** @deprecated use `NullableOneOfSchemaPostRes$inboundSchema` instead. */
  export const inboundSchema = NullableOneOfSchemaPostRes$inboundSchema;
  /** @deprecated use `NullableOneOfSchemaPostRes$outboundSchema` instead. */
  export const outboundSchema = NullableOneOfSchemaPostRes$outboundSchema;
  /** @deprecated use `NullableOneOfSchemaPostRes$Outbound` instead. */
  export type Outbound = NullableOneOfSchemaPostRes$Outbound;
}

export function nullableOneOfSchemaPostResToJSON(
  nullableOneOfSchemaPostRes: NullableOneOfSchemaPostRes,
): string {
  return JSON.stringify(
    NullableOneOfSchemaPostRes$outboundSchema.parse(nullableOneOfSchemaPostRes),
  );
}

export function nullableOneOfSchemaPostResFromJSON(
  jsonString: string,
): SafeParseResult<NullableOneOfSchemaPostRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NullableOneOfSchemaPostRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableOneOfSchemaPostRes' from JSON`,
  );
}
