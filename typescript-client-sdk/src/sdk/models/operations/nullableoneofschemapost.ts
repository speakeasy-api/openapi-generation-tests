/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type NullableOneOfSchemaPostRequestBody = shared.TypedObject1 | shared.TypedObject2;

export type NullableOneOfSchemaPostJson = shared.TypedObject1 | shared.TypedObject2;

/**
 * OK
 */
export type NullableOneOfSchemaPostRes = {
    json: shared.TypedObject1 | shared.TypedObject2 | null;
};

export type NullableOneOfSchemaPostResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: NullableOneOfSchemaPostRes | undefined;
};

/** @internal */
export namespace NullableOneOfSchemaPostRequestBody$ {
    export const inboundSchema: z.ZodType<
        NullableOneOfSchemaPostRequestBody,
        z.ZodTypeDef,
        unknown
    > = z.union([shared.TypedObject1$.inboundSchema, shared.TypedObject2$.inboundSchema]);

    export type Outbound = shared.TypedObject1$.Outbound | shared.TypedObject2$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NullableOneOfSchemaPostRequestBody
    > = z.union([shared.TypedObject1$.outboundSchema, shared.TypedObject2$.outboundSchema]);
}

/** @internal */
export namespace NullableOneOfSchemaPostJson$ {
    export const inboundSchema: z.ZodType<NullableOneOfSchemaPostJson, z.ZodTypeDef, unknown> =
        z.union([shared.TypedObject1$.inboundSchema, shared.TypedObject2$.inboundSchema]);

    export type Outbound = shared.TypedObject1$.Outbound | shared.TypedObject2$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NullableOneOfSchemaPostJson> =
        z.union([shared.TypedObject1$.outboundSchema, shared.TypedObject2$.outboundSchema]);
}

/** @internal */
export namespace NullableOneOfSchemaPostRes$ {
    export const inboundSchema: z.ZodType<NullableOneOfSchemaPostRes, z.ZodTypeDef, unknown> =
        z.object({
            json: z.nullable(
                z.union([shared.TypedObject1$.inboundSchema, shared.TypedObject2$.inboundSchema])
            ),
        });

    export type Outbound = {
        json: shared.TypedObject1$.Outbound | shared.TypedObject2$.Outbound | null;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NullableOneOfSchemaPostRes> =
        z.object({
            json: z.nullable(
                z.union([shared.TypedObject1$.outboundSchema, shared.TypedObject2$.outboundSchema])
            ),
        });
}

/** @internal */
export namespace NullableOneOfSchemaPostResponse$ {
    export const inboundSchema: z.ZodType<NullableOneOfSchemaPostResponse, z.ZodTypeDef, unknown> =
        z
            .object({
                ContentType: z.string(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
                res: z.lazy(() => NullableOneOfSchemaPostRes$.inboundSchema).optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    ContentType: "contentType",
                    StatusCode: "statusCode",
                    RawResponse: "rawResponse",
                });
            });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: NullableOneOfSchemaPostRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NullableOneOfSchemaPostResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => NullableOneOfSchemaPostRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
