/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * OK
 */
export type NullableOneOfTypeInObjectPostRes = {
  json: shared.NullableOneOfTypeInObject;
};

/** @internal */
export const NullableOneOfTypeInObjectPostRes$inboundSchema: z.ZodType<
  NullableOneOfTypeInObjectPostRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  json: shared.NullableOneOfTypeInObject$inboundSchema,
});

/** @internal */
export type NullableOneOfTypeInObjectPostRes$Outbound = {
  json: shared.NullableOneOfTypeInObject$Outbound;
};

/** @internal */
export const NullableOneOfTypeInObjectPostRes$outboundSchema: z.ZodType<
  NullableOneOfTypeInObjectPostRes$Outbound,
  z.ZodTypeDef,
  NullableOneOfTypeInObjectPostRes
> = z.object({
  json: shared.NullableOneOfTypeInObject$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableOneOfTypeInObjectPostRes$ {
  /** @deprecated use `NullableOneOfTypeInObjectPostRes$inboundSchema` instead. */
  export const inboundSchema = NullableOneOfTypeInObjectPostRes$inboundSchema;
  /** @deprecated use `NullableOneOfTypeInObjectPostRes$outboundSchema` instead. */
  export const outboundSchema = NullableOneOfTypeInObjectPostRes$outboundSchema;
  /** @deprecated use `NullableOneOfTypeInObjectPostRes$Outbound` instead. */
  export type Outbound = NullableOneOfTypeInObjectPostRes$Outbound;
}

export function nullableOneOfTypeInObjectPostResToJSON(
  nullableOneOfTypeInObjectPostRes: NullableOneOfTypeInObjectPostRes,
): string {
  return JSON.stringify(
    NullableOneOfTypeInObjectPostRes$outboundSchema.parse(
      nullableOneOfTypeInObjectPostRes,
    ),
  );
}

export function nullableOneOfTypeInObjectPostResFromJSON(
  jsonString: string,
): SafeParseResult<NullableOneOfTypeInObjectPostRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NullableOneOfTypeInObjectPostRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableOneOfTypeInObjectPostRes' from JSON`,
  );
}
