/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type NullableOptionalObj = {};

export type NullableRequiredObj = {};

export type RequiredObj = {};

export type NullableRequiredEmptyObjectPostRequestBody = {
    nullableOptionalObj?: NullableOptionalObj | null | undefined;
    nullableRequiredObj: NullableRequiredObj | null;
    requiredObj: RequiredObj;
};

/**
 * OK
 */
export type NullableRequiredEmptyObjectPostResponseBody = {
    data: string;
};

export type NullableRequiredEmptyObjectPostResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    object?: NullableRequiredEmptyObjectPostResponseBody | undefined;
};

/** @internal */
export namespace NullableOptionalObj$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<NullableOptionalObj, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NullableOptionalObj> = z.object(
        {}
    );
}

/** @internal */
export namespace NullableRequiredObj$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<NullableRequiredObj, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NullableRequiredObj> = z.object(
        {}
    );
}

/** @internal */
export namespace RequiredObj$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<RequiredObj, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RequiredObj> = z.object({});
}

/** @internal */
export namespace NullableRequiredEmptyObjectPostRequestBody$ {
    export type Inbound = {
        NullableOptionalObj?: NullableOptionalObj$.Inbound | null | undefined;
        NullableRequiredObj: NullableRequiredObj$.Inbound | null;
        RequiredObj: RequiredObj$.Inbound;
    };

    export const inboundSchema: z.ZodType<
        NullableRequiredEmptyObjectPostRequestBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            NullableOptionalObj: z
                .nullable(z.lazy(() => NullableOptionalObj$.inboundSchema))
                .optional(),
            NullableRequiredObj: z.nullable(z.lazy(() => NullableRequiredObj$.inboundSchema)),
            RequiredObj: z.lazy(() => RequiredObj$.inboundSchema),
        })
        .transform((v) => {
            return {
                ...(v.NullableOptionalObj === undefined
                    ? null
                    : { nullableOptionalObj: v.NullableOptionalObj }),
                nullableRequiredObj: v.NullableRequiredObj,
                requiredObj: v.RequiredObj,
            };
        });

    export type Outbound = {
        NullableOptionalObj?: NullableOptionalObj$.Outbound | null | undefined;
        NullableRequiredObj: NullableRequiredObj$.Outbound | null;
        RequiredObj: RequiredObj$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NullableRequiredEmptyObjectPostRequestBody
    > = z
        .object({
            nullableOptionalObj: z
                .nullable(z.lazy(() => NullableOptionalObj$.outboundSchema))
                .optional(),
            nullableRequiredObj: z.nullable(z.lazy(() => NullableRequiredObj$.outboundSchema)),
            requiredObj: z.lazy(() => RequiredObj$.outboundSchema),
        })
        .transform((v) => {
            return {
                ...(v.nullableOptionalObj === undefined
                    ? null
                    : { NullableOptionalObj: v.nullableOptionalObj }),
                NullableRequiredObj: v.nullableRequiredObj,
                RequiredObj: v.requiredObj,
            };
        });
}

/** @internal */
export namespace NullableRequiredEmptyObjectPostResponseBody$ {
    export type Inbound = {
        data: string;
    };

    export const inboundSchema: z.ZodType<
        NullableRequiredEmptyObjectPostResponseBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            data: z.string(),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NullableRequiredEmptyObjectPostResponseBody
    > = z
        .object({
            data: z.string(),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}

/** @internal */
export namespace NullableRequiredEmptyObjectPostResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: NullableRequiredEmptyObjectPostResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        NullableRequiredEmptyObjectPostResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z
                .lazy(() => NullableRequiredEmptyObjectPostResponseBody$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: NullableRequiredEmptyObjectPostResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NullableRequiredEmptyObjectPostResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z
                .lazy(() => NullableRequiredEmptyObjectPostResponseBody$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
