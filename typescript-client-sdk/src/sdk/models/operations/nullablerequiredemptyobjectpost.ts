/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as z from "zod";

export type NullableOptionalObj = {};

export type NullableRequiredObj = {};

export type RequiredObj = {};

export type NullableRequiredEmptyObjectPostRequestBody = {
    nullableOptionalObj?: NullableOptionalObj | null | undefined;
    nullableRequiredObj: NullableRequiredObj | null;
    requiredObj: RequiredObj;
};

/**
 * OK
 */
export type NullableRequiredEmptyObjectPostResponseBody = {
    data: string;
};

export type NullableRequiredEmptyObjectPostResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    object?: NullableRequiredEmptyObjectPostResponseBody | undefined;
};

/** @internal */
export namespace NullableOptionalObj$ {
    export const inboundSchema: z.ZodType<NullableOptionalObj, z.ZodTypeDef, unknown> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NullableOptionalObj> = z.object(
        {}
    );
}

/** @internal */
export namespace NullableRequiredObj$ {
    export const inboundSchema: z.ZodType<NullableRequiredObj, z.ZodTypeDef, unknown> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NullableRequiredObj> = z.object(
        {}
    );
}

/** @internal */
export namespace RequiredObj$ {
    export const inboundSchema: z.ZodType<RequiredObj, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RequiredObj> = z.object({});
}

/** @internal */
export namespace NullableRequiredEmptyObjectPostRequestBody$ {
    export const inboundSchema: z.ZodType<
        NullableRequiredEmptyObjectPostRequestBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            NullableOptionalObj: z
                .nullable(z.lazy(() => NullableOptionalObj$.inboundSchema))
                .optional(),
            NullableRequiredObj: z.nullable(z.lazy(() => NullableRequiredObj$.inboundSchema)),
            RequiredObj: z.lazy(() => RequiredObj$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                NullableOptionalObj: "nullableOptionalObj",
                NullableRequiredObj: "nullableRequiredObj",
                RequiredObj: "requiredObj",
            });
        });

    export type Outbound = {
        NullableOptionalObj?: NullableOptionalObj$.Outbound | null | undefined;
        NullableRequiredObj: NullableRequiredObj$.Outbound | null;
        RequiredObj: RequiredObj$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NullableRequiredEmptyObjectPostRequestBody
    > = z
        .object({
            nullableOptionalObj: z
                .nullable(z.lazy(() => NullableOptionalObj$.outboundSchema))
                .optional(),
            nullableRequiredObj: z.nullable(z.lazy(() => NullableRequiredObj$.outboundSchema)),
            requiredObj: z.lazy(() => RequiredObj$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                nullableOptionalObj: "NullableOptionalObj",
                nullableRequiredObj: "NullableRequiredObj",
                requiredObj: "RequiredObj",
            });
        });
}

/** @internal */
export namespace NullableRequiredEmptyObjectPostResponseBody$ {
    export const inboundSchema: z.ZodType<
        NullableRequiredEmptyObjectPostResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        data: z.string(),
    });

    export type Outbound = {
        data: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NullableRequiredEmptyObjectPostResponseBody
    > = z.object({
        data: z.string(),
    });
}

/** @internal */
export namespace NullableRequiredEmptyObjectPostResponse$ {
    export const inboundSchema: z.ZodType<
        NullableRequiredEmptyObjectPostResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z
                .lazy(() => NullableRequiredEmptyObjectPostResponseBody$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: NullableRequiredEmptyObjectPostResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NullableRequiredEmptyObjectPostResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z
                .lazy(() => NullableRequiredEmptyObjectPostResponseBody$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
