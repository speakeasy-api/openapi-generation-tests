/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type NullableOptionalObj = {};

export type NullableRequiredObj = {};

export type RequiredObj = {};

export type NullableRequiredEmptyObjectPostRequestBody = {
    nullableOptionalObj?: NullableOptionalObj | null | undefined;
    nullableRequiredObj: NullableRequiredObj | null;
    requiredObj: RequiredObj;
};

export type NullableRequiredEmptyObjectPostNullableOptionalObj = {};

export type NullableRequiredEmptyObjectPostNullableRequiredObj = {};

export type NullableRequiredEmptyObjectPostRequiredObj = {};

export type NullableRequiredEmptyObjectPostJson = {
    nullableOptionalObj?: NullableRequiredEmptyObjectPostNullableOptionalObj | null | undefined;
    nullableRequiredObj: NullableRequiredEmptyObjectPostNullableRequiredObj | null;
    requiredObj: NullableRequiredEmptyObjectPostRequiredObj;
};

/**
 * OK
 */
export type NullableRequiredEmptyObjectPostResponseBody = {
    data?: string | undefined;
    json?: NullableRequiredEmptyObjectPostJson | undefined;
};

/** @internal */
export namespace NullableOptionalObj$ {
    export const inboundSchema: z.ZodType<NullableOptionalObj, z.ZodTypeDef, unknown> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NullableOptionalObj> = z.object(
        {}
    );
}

/** @internal */
export namespace NullableRequiredObj$ {
    export const inboundSchema: z.ZodType<NullableRequiredObj, z.ZodTypeDef, unknown> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NullableRequiredObj> = z.object(
        {}
    );
}

/** @internal */
export namespace RequiredObj$ {
    export const inboundSchema: z.ZodType<RequiredObj, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RequiredObj> = z.object({});
}

/** @internal */
export namespace NullableRequiredEmptyObjectPostRequestBody$ {
    export const inboundSchema: z.ZodType<
        NullableRequiredEmptyObjectPostRequestBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            NullableOptionalObj: z
                .nullable(z.lazy(() => NullableOptionalObj$.inboundSchema))
                .optional(),
            NullableRequiredObj: z.nullable(z.lazy(() => NullableRequiredObj$.inboundSchema)),
            RequiredObj: z.lazy(() => RequiredObj$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                NullableOptionalObj: "nullableOptionalObj",
                NullableRequiredObj: "nullableRequiredObj",
                RequiredObj: "requiredObj",
            });
        });

    export type Outbound = {
        NullableOptionalObj?: NullableOptionalObj$.Outbound | null | undefined;
        NullableRequiredObj: NullableRequiredObj$.Outbound | null;
        RequiredObj: RequiredObj$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NullableRequiredEmptyObjectPostRequestBody
    > = z
        .object({
            nullableOptionalObj: z
                .nullable(z.lazy(() => NullableOptionalObj$.outboundSchema))
                .optional(),
            nullableRequiredObj: z.nullable(z.lazy(() => NullableRequiredObj$.outboundSchema)),
            requiredObj: z.lazy(() => RequiredObj$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                nullableOptionalObj: "NullableOptionalObj",
                nullableRequiredObj: "NullableRequiredObj",
                requiredObj: "RequiredObj",
            });
        });
}

/** @internal */
export namespace NullableRequiredEmptyObjectPostNullableOptionalObj$ {
    export const inboundSchema: z.ZodType<
        NullableRequiredEmptyObjectPostNullableOptionalObj,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NullableRequiredEmptyObjectPostNullableOptionalObj
    > = z.object({});
}

/** @internal */
export namespace NullableRequiredEmptyObjectPostNullableRequiredObj$ {
    export const inboundSchema: z.ZodType<
        NullableRequiredEmptyObjectPostNullableRequiredObj,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NullableRequiredEmptyObjectPostNullableRequiredObj
    > = z.object({});
}

/** @internal */
export namespace NullableRequiredEmptyObjectPostRequiredObj$ {
    export const inboundSchema: z.ZodType<
        NullableRequiredEmptyObjectPostRequiredObj,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NullableRequiredEmptyObjectPostRequiredObj
    > = z.object({});
}

/** @internal */
export namespace NullableRequiredEmptyObjectPostJson$ {
    export const inboundSchema: z.ZodType<
        NullableRequiredEmptyObjectPostJson,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            NullableOptionalObj: z
                .nullable(
                    z.lazy(() => NullableRequiredEmptyObjectPostNullableOptionalObj$.inboundSchema)
                )
                .optional(),
            NullableRequiredObj: z.nullable(
                z.lazy(() => NullableRequiredEmptyObjectPostNullableRequiredObj$.inboundSchema)
            ),
            RequiredObj: z.lazy(() => NullableRequiredEmptyObjectPostRequiredObj$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                NullableOptionalObj: "nullableOptionalObj",
                NullableRequiredObj: "nullableRequiredObj",
                RequiredObj: "requiredObj",
            });
        });

    export type Outbound = {
        NullableOptionalObj?:
            | NullableRequiredEmptyObjectPostNullableOptionalObj$.Outbound
            | null
            | undefined;
        NullableRequiredObj: NullableRequiredEmptyObjectPostNullableRequiredObj$.Outbound | null;
        RequiredObj: NullableRequiredEmptyObjectPostRequiredObj$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NullableRequiredEmptyObjectPostJson
    > = z
        .object({
            nullableOptionalObj: z
                .nullable(
                    z.lazy(() => NullableRequiredEmptyObjectPostNullableOptionalObj$.outboundSchema)
                )
                .optional(),
            nullableRequiredObj: z.nullable(
                z.lazy(() => NullableRequiredEmptyObjectPostNullableRequiredObj$.outboundSchema)
            ),
            requiredObj: z.lazy(() => NullableRequiredEmptyObjectPostRequiredObj$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                nullableOptionalObj: "NullableOptionalObj",
                nullableRequiredObj: "NullableRequiredObj",
                requiredObj: "RequiredObj",
            });
        });
}

/** @internal */
export namespace NullableRequiredEmptyObjectPostResponseBody$ {
    export const inboundSchema: z.ZodType<
        NullableRequiredEmptyObjectPostResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        data: z.string().optional(),
        json: z.lazy(() => NullableRequiredEmptyObjectPostJson$.inboundSchema).optional(),
    });

    export type Outbound = {
        data?: string | undefined;
        json?: NullableRequiredEmptyObjectPostJson$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NullableRequiredEmptyObjectPostResponseBody
    > = z.object({
        data: z.string().optional(),
        json: z.lazy(() => NullableRequiredEmptyObjectPostJson$.outboundSchema).optional(),
    });
}
