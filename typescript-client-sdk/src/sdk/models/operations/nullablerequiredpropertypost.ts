/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum NullableRequiredEnum {
    First = "first",
    Second = "second",
}

export type NullableRequiredPropertyPostRequestBody = {
    nullableOptionalInt?: number | null | undefined;
    nullableRequiredArray: Array<number> | null;
    nullableRequiredEnum: NullableRequiredEnum | null;
    nullableRequiredInt: number | null;
};

export type NullableRequiredPropertyPostResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: string | undefined;
};

/** @internal */
export const NullableRequiredEnum$ = z.nativeEnum(NullableRequiredEnum);

/** @internal */
export namespace NullableRequiredPropertyPostRequestBody$ {
    export type Inbound = {
        NullableOptionalInt?: number | null | undefined;
        NullableRequiredArray: Array<number> | null;
        NullableRequiredEnum: NullableRequiredEnum | null;
        NullableRequiredInt: number | null;
    };

    export const inboundSchema: z.ZodType<
        NullableRequiredPropertyPostRequestBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            NullableOptionalInt: z.nullable(z.number().int()).optional(),
            NullableRequiredArray: z.nullable(z.array(z.number())),
            NullableRequiredEnum: z.nullable(NullableRequiredEnum$),
            NullableRequiredInt: z.nullable(z.number().int()),
        })
        .transform((v) => {
            return {
                ...(v.NullableOptionalInt === undefined
                    ? null
                    : { nullableOptionalInt: v.NullableOptionalInt }),
                nullableRequiredArray: v.NullableRequiredArray,
                nullableRequiredEnum: v.NullableRequiredEnum,
                nullableRequiredInt: v.NullableRequiredInt,
            };
        });

    export type Outbound = {
        NullableOptionalInt?: number | null | undefined;
        NullableRequiredArray: Array<number> | null;
        NullableRequiredEnum: NullableRequiredEnum | null;
        NullableRequiredInt: number | null;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NullableRequiredPropertyPostRequestBody
    > = z
        .object({
            nullableOptionalInt: z.nullable(z.number().int()).optional(),
            nullableRequiredArray: z.nullable(z.array(z.number())),
            nullableRequiredEnum: z.nullable(NullableRequiredEnum$),
            nullableRequiredInt: z.nullable(z.number().int()),
        })
        .transform((v) => {
            return {
                ...(v.nullableOptionalInt === undefined
                    ? null
                    : { NullableOptionalInt: v.nullableOptionalInt }),
                NullableRequiredArray: v.nullableRequiredArray,
                NullableRequiredEnum: v.nullableRequiredEnum,
                NullableRequiredInt: v.nullableRequiredInt,
            };
        });
}

/** @internal */
export namespace NullableRequiredPropertyPostResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        res?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        NullableRequiredPropertyPostResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.string().optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NullableRequiredPropertyPostResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.string().optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
