/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const NullableRequiredEnum = {
    First: "first",
    Second: "second",
    Null: "null",
} as const;
export type NullableRequiredEnum = ClosedEnum<typeof NullableRequiredEnum>;

export type NullableRequiredPropertyPostRequestBody = {
    nullableOptionalInt?: number | null | undefined;
    nullableRequiredArray: Array<number> | null;
    nullableRequiredBigIntStr: bigint | null;
    nullableRequiredDateTime: Date | null;
    nullableRequiredDecimalStr: Decimal$ | number | null;
    nullableRequiredEnum: NullableRequiredEnum | null;
    nullableRequiredInt: number | null;
};

export const NullableRequiredPropertyPostNullableRequiredEnum = {
    First: "first",
    Second: "second",
    Null: "null",
} as const;
export type NullableRequiredPropertyPostNullableRequiredEnum = ClosedEnum<
    typeof NullableRequiredPropertyPostNullableRequiredEnum
>;

export type NullableRequiredPropertyPostJson = {
    nullableOptionalInt?: number | null | undefined;
    nullableRequiredArray: Array<number> | null;
    nullableRequiredBigIntStr: bigint | null;
    nullableRequiredDateTime: Date | null;
    nullableRequiredDecimalStr: Decimal$ | number | null;
    nullableRequiredEnum: NullableRequiredPropertyPostNullableRequiredEnum | null;
    nullableRequiredInt: number | null;
    xSpeakeasyTestInternalDirectives?: any | undefined;
};

/**
 * OK
 */
export type NullableRequiredPropertyPostResponseBody = {
    data?: string | undefined;
    json?: NullableRequiredPropertyPostJson | undefined;
};

/** @internal */
export namespace NullableRequiredEnum$ {
    export const inboundSchema: z.ZodNativeEnum<typeof NullableRequiredEnum> =
        z.nativeEnum(NullableRequiredEnum);
    export const outboundSchema: z.ZodNativeEnum<typeof NullableRequiredEnum> = inboundSchema;
}

/** @internal */
export namespace NullableRequiredPropertyPostRequestBody$ {
    export const inboundSchema: z.ZodType<
        NullableRequiredPropertyPostRequestBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            NullableOptionalInt: z.nullable(z.number().int()).optional(),
            NullableRequiredArray: z.nullable(z.array(z.number())),
            NullableRequiredBigIntStr: z.nullable(z.string().transform((v) => BigInt(v))),
            NullableRequiredDateTime: z.nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            ),
            NullableRequiredDecimalStr: z.nullable(z.string().transform((v) => new Decimal$(v))),
            NullableRequiredEnum: z.nullable(NullableRequiredEnum$.inboundSchema),
            NullableRequiredInt: z.nullable(z.number().int()),
        })
        .transform((v) => {
            return remap$(v, {
                NullableOptionalInt: "nullableOptionalInt",
                NullableRequiredArray: "nullableRequiredArray",
                NullableRequiredBigIntStr: "nullableRequiredBigIntStr",
                NullableRequiredDateTime: "nullableRequiredDateTime",
                NullableRequiredDecimalStr: "nullableRequiredDecimalStr",
                NullableRequiredEnum: "nullableRequiredEnum",
                NullableRequiredInt: "nullableRequiredInt",
            });
        });

    export type Outbound = {
        NullableOptionalInt?: number | null | undefined;
        NullableRequiredArray: Array<number> | null;
        NullableRequiredBigIntStr: string | null;
        NullableRequiredDateTime: string | null;
        NullableRequiredDecimalStr: string | null;
        NullableRequiredEnum: string | null;
        NullableRequiredInt: number | null;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NullableRequiredPropertyPostRequestBody
    > = z
        .object({
            nullableOptionalInt: z.nullable(z.number().int()).optional(),
            nullableRequiredArray: z.nullable(z.array(z.number())),
            nullableRequiredBigIntStr: z.nullable(z.bigint().transform((v) => `${v}`)),
            nullableRequiredDateTime: z.nullable(z.date().transform((v) => v.toISOString())),
            nullableRequiredDecimalStr: z.nullable(
                z.union([z.instanceof(Decimal$), z.number()]).transform((v) => `${v}`)
            ),
            nullableRequiredEnum: z.nullable(NullableRequiredEnum$.outboundSchema),
            nullableRequiredInt: z.nullable(z.number().int()),
        })
        .transform((v) => {
            return remap$(v, {
                nullableOptionalInt: "NullableOptionalInt",
                nullableRequiredArray: "NullableRequiredArray",
                nullableRequiredBigIntStr: "NullableRequiredBigIntStr",
                nullableRequiredDateTime: "NullableRequiredDateTime",
                nullableRequiredDecimalStr: "NullableRequiredDecimalStr",
                nullableRequiredEnum: "NullableRequiredEnum",
                nullableRequiredInt: "NullableRequiredInt",
            });
        });
}

/** @internal */
export namespace NullableRequiredPropertyPostNullableRequiredEnum$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof NullableRequiredPropertyPostNullableRequiredEnum
    > = z.nativeEnum(NullableRequiredPropertyPostNullableRequiredEnum);
    export const outboundSchema: z.ZodNativeEnum<
        typeof NullableRequiredPropertyPostNullableRequiredEnum
    > = inboundSchema;
}

/** @internal */
export namespace NullableRequiredPropertyPostJson$ {
    export const inboundSchema: z.ZodType<NullableRequiredPropertyPostJson, z.ZodTypeDef, unknown> =
        z
            .object({
                NullableOptionalInt: z.nullable(z.number().int()).optional(),
                NullableRequiredArray: z.nullable(z.array(z.number())),
                NullableRequiredBigIntStr: z.nullable(z.string().transform((v) => BigInt(v))),
                NullableRequiredDateTime: z.nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                ),
                NullableRequiredDecimalStr: z.nullable(
                    z.string().transform((v) => new Decimal$(v))
                ),
                NullableRequiredEnum: z.nullable(
                    NullableRequiredPropertyPostNullableRequiredEnum$.inboundSchema
                ),
                NullableRequiredInt: z.nullable(z.number().int()),
                "x-speakeasy-test-internal-directives": z.any().optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    NullableOptionalInt: "nullableOptionalInt",
                    NullableRequiredArray: "nullableRequiredArray",
                    NullableRequiredBigIntStr: "nullableRequiredBigIntStr",
                    NullableRequiredDateTime: "nullableRequiredDateTime",
                    NullableRequiredDecimalStr: "nullableRequiredDecimalStr",
                    NullableRequiredEnum: "nullableRequiredEnum",
                    NullableRequiredInt: "nullableRequiredInt",
                    "x-speakeasy-test-internal-directives": "xSpeakeasyTestInternalDirectives",
                });
            });

    export type Outbound = {
        NullableOptionalInt?: number | null | undefined;
        NullableRequiredArray: Array<number> | null;
        NullableRequiredBigIntStr: string | null;
        NullableRequiredDateTime: string | null;
        NullableRequiredDecimalStr: string | null;
        NullableRequiredEnum: string | null;
        NullableRequiredInt: number | null;
        "x-speakeasy-test-internal-directives"?: any | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NullableRequiredPropertyPostJson
    > = z
        .object({
            nullableOptionalInt: z.nullable(z.number().int()).optional(),
            nullableRequiredArray: z.nullable(z.array(z.number())),
            nullableRequiredBigIntStr: z.nullable(z.bigint().transform((v) => `${v}`)),
            nullableRequiredDateTime: z.nullable(z.date().transform((v) => v.toISOString())),
            nullableRequiredDecimalStr: z.nullable(
                z.union([z.instanceof(Decimal$), z.number()]).transform((v) => `${v}`)
            ),
            nullableRequiredEnum: z.nullable(
                NullableRequiredPropertyPostNullableRequiredEnum$.outboundSchema
            ),
            nullableRequiredInt: z.nullable(z.number().int()),
            xSpeakeasyTestInternalDirectives: z.any().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                nullableOptionalInt: "NullableOptionalInt",
                nullableRequiredArray: "NullableRequiredArray",
                nullableRequiredBigIntStr: "NullableRequiredBigIntStr",
                nullableRequiredDateTime: "NullableRequiredDateTime",
                nullableRequiredDecimalStr: "NullableRequiredDecimalStr",
                nullableRequiredEnum: "NullableRequiredEnum",
                nullableRequiredInt: "NullableRequiredInt",
                xSpeakeasyTestInternalDirectives: "x-speakeasy-test-internal-directives",
            });
        });
}

/** @internal */
export namespace NullableRequiredPropertyPostResponseBody$ {
    export const inboundSchema: z.ZodType<
        NullableRequiredPropertyPostResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        data: z.string().optional(),
        json: z.lazy(() => NullableRequiredPropertyPostJson$.inboundSchema).optional(),
    });

    export type Outbound = {
        data?: string | undefined;
        json?: NullableRequiredPropertyPostJson$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NullableRequiredPropertyPostResponseBody
    > = z.object({
        data: z.string().optional(),
        json: z.lazy(() => NullableRequiredPropertyPostJson$.outboundSchema).optional(),
    });
}
