/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import * as z from "zod";

export enum NullableRequiredEnum {
    First = "first",
    Second = "second",
}

export type NullableRequiredPropertyPostRequestBody = {
    nullableOptionalInt?: number | null | undefined;
    nullableRequiredArray: Array<number> | null;
    nullableRequiredBigIntStr: bigint | null;
    nullableRequiredDateTime: Date | null;
    nullableRequiredDecimalStr: Decimal$ | number | null;
    nullableRequiredEnum: NullableRequiredEnum | null;
    nullableRequiredInt: number | null;
};

/**
 * OK
 */
export type NullableRequiredPropertyPostResponseBody = {
    data: string;
};

export type NullableRequiredPropertyPostResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    object?: NullableRequiredPropertyPostResponseBody | undefined;
};

/** @internal */
export namespace NullableRequiredEnum$ {
    export const inboundSchema: z.ZodNativeEnum<typeof NullableRequiredEnum> =
        z.nativeEnum(NullableRequiredEnum);
    export const outboundSchema: z.ZodNativeEnum<typeof NullableRequiredEnum> = inboundSchema;
}

/** @internal */
export namespace NullableRequiredPropertyPostRequestBody$ {
    export const inboundSchema: z.ZodType<
        NullableRequiredPropertyPostRequestBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            NullableOptionalInt: z.nullable(z.number().int()).optional(),
            NullableRequiredArray: z.nullable(z.array(z.number())),
            NullableRequiredBigIntStr: z.nullable(z.string().transform((v) => BigInt(v))),
            NullableRequiredDateTime: z.nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            ),
            NullableRequiredDecimalStr: z.nullable(z.string().transform((v) => new Decimal$(v))),
            NullableRequiredEnum: z.nullable(NullableRequiredEnum$.inboundSchema),
            NullableRequiredInt: z.nullable(z.number().int()),
        })
        .transform((v) => {
            return remap$(v, {
                NullableOptionalInt: "nullableOptionalInt",
                NullableRequiredArray: "nullableRequiredArray",
                NullableRequiredBigIntStr: "nullableRequiredBigIntStr",
                NullableRequiredDateTime: "nullableRequiredDateTime",
                NullableRequiredDecimalStr: "nullableRequiredDecimalStr",
                NullableRequiredEnum: "nullableRequiredEnum",
                NullableRequiredInt: "nullableRequiredInt",
            });
        });

    export type Outbound = {
        NullableOptionalInt?: number | null | undefined;
        NullableRequiredArray: Array<number> | null;
        NullableRequiredBigIntStr: string | null;
        NullableRequiredDateTime: string | null;
        NullableRequiredDecimalStr: string | null;
        NullableRequiredEnum: string | null;
        NullableRequiredInt: number | null;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NullableRequiredPropertyPostRequestBody
    > = z
        .object({
            nullableOptionalInt: z.nullable(z.number().int()).optional(),
            nullableRequiredArray: z.nullable(z.array(z.number())),
            nullableRequiredBigIntStr: z.nullable(z.bigint().transform((v) => `${v}`)),
            nullableRequiredDateTime: z.nullable(z.date().transform((v) => v.toISOString())),
            nullableRequiredDecimalStr: z.nullable(
                z.union([z.instanceof(Decimal$), z.number()]).transform((v) => `${v}`)
            ),
            nullableRequiredEnum: z.nullable(NullableRequiredEnum$.outboundSchema),
            nullableRequiredInt: z.nullable(z.number().int()),
        })
        .transform((v) => {
            return remap$(v, {
                nullableOptionalInt: "NullableOptionalInt",
                nullableRequiredArray: "NullableRequiredArray",
                nullableRequiredBigIntStr: "NullableRequiredBigIntStr",
                nullableRequiredDateTime: "NullableRequiredDateTime",
                nullableRequiredDecimalStr: "NullableRequiredDecimalStr",
                nullableRequiredEnum: "NullableRequiredEnum",
                nullableRequiredInt: "NullableRequiredInt",
            });
        });
}

/** @internal */
export namespace NullableRequiredPropertyPostResponseBody$ {
    export const inboundSchema: z.ZodType<
        NullableRequiredPropertyPostResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        data: z.string(),
    });

    export type Outbound = {
        data: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NullableRequiredPropertyPostResponseBody
    > = z.object({
        data: z.string(),
    });
}

/** @internal */
export namespace NullableRequiredPropertyPostResponse$ {
    export const inboundSchema: z.ZodType<
        NullableRequiredPropertyPostResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z
                .lazy(() => NullableRequiredPropertyPostResponseBody$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: NullableRequiredPropertyPostResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NullableRequiredPropertyPostResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z
                .lazy(() => NullableRequiredPropertyPostResponseBody$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
