/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type NullableRequiredSharedObjectPostRequestBody = {
    nullableOptionalObj?: shared.NullableOptionalObject | null | undefined;
    nullableRequiredObj: shared.NullableObject | null;
};

/**
 * OK
 */
export type NullableRequiredSharedObjectPostResponseBody = {
    data: string;
};

export type NullableRequiredSharedObjectPostResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    object?: NullableRequiredSharedObjectPostResponseBody | undefined;
};

/** @internal */
export namespace NullableRequiredSharedObjectPostRequestBody$ {
    export type Inbound = {
        NullableOptionalObj?: shared.NullableOptionalObject$.Inbound | null | undefined;
        NullableRequiredObj: shared.NullableObject$.Inbound | null;
    };

    export const inboundSchema: z.ZodType<
        NullableRequiredSharedObjectPostRequestBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            NullableOptionalObj: z
                .nullable(shared.NullableOptionalObject$.inboundSchema)
                .optional(),
            NullableRequiredObj: z.nullable(shared.NullableObject$.inboundSchema),
        })
        .transform((v) => {
            return {
                ...(v.NullableOptionalObj === undefined
                    ? null
                    : { nullableOptionalObj: v.NullableOptionalObj }),
                nullableRequiredObj: v.NullableRequiredObj,
            };
        });

    export type Outbound = {
        NullableOptionalObj?: shared.NullableOptionalObject$.Outbound | null | undefined;
        NullableRequiredObj: shared.NullableObject$.Outbound | null;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NullableRequiredSharedObjectPostRequestBody
    > = z
        .object({
            nullableOptionalObj: z
                .nullable(shared.NullableOptionalObject$.outboundSchema)
                .optional(),
            nullableRequiredObj: z.nullable(shared.NullableObject$.outboundSchema),
        })
        .transform((v) => {
            return {
                ...(v.nullableOptionalObj === undefined
                    ? null
                    : { NullableOptionalObj: v.nullableOptionalObj }),
                NullableRequiredObj: v.nullableRequiredObj,
            };
        });
}

/** @internal */
export namespace NullableRequiredSharedObjectPostResponseBody$ {
    export type Inbound = {
        data: string;
    };

    export const inboundSchema: z.ZodType<
        NullableRequiredSharedObjectPostResponseBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            data: z.string(),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NullableRequiredSharedObjectPostResponseBody
    > = z
        .object({
            data: z.string(),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}

/** @internal */
export namespace NullableRequiredSharedObjectPostResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: NullableRequiredSharedObjectPostResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        NullableRequiredSharedObjectPostResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z
                .lazy(() => NullableRequiredSharedObjectPostResponseBody$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: NullableRequiredSharedObjectPostResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NullableRequiredSharedObjectPostResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z
                .lazy(() => NullableRequiredSharedObjectPostResponseBody$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
