/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type NullableRequiredSharedObjectPostRequestBody = {
  nullableOptionalObj?: shared.NullableOptionalObject | null | undefined;
  nullableRequiredObj: shared.NullableObject | null;
};

export type NullableRequiredSharedObjectPostJson = {
  nullableOptionalObj?: shared.NullableOptionalObject | null | undefined;
  nullableRequiredObj: shared.NullableObject | null;
};

/**
 * OK
 */
export type NullableRequiredSharedObjectPostResponseBody = {
  data?: string | undefined;
  json?: NullableRequiredSharedObjectPostJson | undefined;
};

/** @internal */
export const NullableRequiredSharedObjectPostRequestBody$inboundSchema:
  z.ZodType<
    NullableRequiredSharedObjectPostRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    NullableOptionalObj: z.nullable(shared.NullableOptionalObject$inboundSchema)
      .optional(),
    NullableRequiredObj: z.nullable(shared.NullableObject$inboundSchema),
  }).transform((v) => {
    return remap$(v, {
      "NullableOptionalObj": "nullableOptionalObj",
      "NullableRequiredObj": "nullableRequiredObj",
    });
  });

/** @internal */
export type NullableRequiredSharedObjectPostRequestBody$Outbound = {
  NullableOptionalObj?:
    | shared.NullableOptionalObject$Outbound
    | null
    | undefined;
  NullableRequiredObj: shared.NullableObject$Outbound | null;
};

/** @internal */
export const NullableRequiredSharedObjectPostRequestBody$outboundSchema:
  z.ZodType<
    NullableRequiredSharedObjectPostRequestBody$Outbound,
    z.ZodTypeDef,
    NullableRequiredSharedObjectPostRequestBody
  > = z.object({
    nullableOptionalObj: z.nullable(
      shared.NullableOptionalObject$outboundSchema,
    ).optional(),
    nullableRequiredObj: z.nullable(shared.NullableObject$outboundSchema),
  }).transform((v) => {
    return remap$(v, {
      nullableOptionalObj: "NullableOptionalObj",
      nullableRequiredObj: "NullableRequiredObj",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableRequiredSharedObjectPostRequestBody$ {
  /** @deprecated use `NullableRequiredSharedObjectPostRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    NullableRequiredSharedObjectPostRequestBody$inboundSchema;
  /** @deprecated use `NullableRequiredSharedObjectPostRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    NullableRequiredSharedObjectPostRequestBody$outboundSchema;
  /** @deprecated use `NullableRequiredSharedObjectPostRequestBody$Outbound` instead. */
  export type Outbound = NullableRequiredSharedObjectPostRequestBody$Outbound;
}

export function nullableRequiredSharedObjectPostRequestBodyToJSON(
  nullableRequiredSharedObjectPostRequestBody:
    NullableRequiredSharedObjectPostRequestBody,
): string {
  return JSON.stringify(
    NullableRequiredSharedObjectPostRequestBody$outboundSchema.parse(
      nullableRequiredSharedObjectPostRequestBody,
    ),
  );
}

export function nullableRequiredSharedObjectPostRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  NullableRequiredSharedObjectPostRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NullableRequiredSharedObjectPostRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'NullableRequiredSharedObjectPostRequestBody' from JSON`,
  );
}

/** @internal */
export const NullableRequiredSharedObjectPostJson$inboundSchema: z.ZodType<
  NullableRequiredSharedObjectPostJson,
  z.ZodTypeDef,
  unknown
> = z.object({
  NullableOptionalObj: z.nullable(shared.NullableOptionalObject$inboundSchema)
    .optional(),
  NullableRequiredObj: z.nullable(shared.NullableObject$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "NullableOptionalObj": "nullableOptionalObj",
    "NullableRequiredObj": "nullableRequiredObj",
  });
});

/** @internal */
export type NullableRequiredSharedObjectPostJson$Outbound = {
  NullableOptionalObj?:
    | shared.NullableOptionalObject$Outbound
    | null
    | undefined;
  NullableRequiredObj: shared.NullableObject$Outbound | null;
};

/** @internal */
export const NullableRequiredSharedObjectPostJson$outboundSchema: z.ZodType<
  NullableRequiredSharedObjectPostJson$Outbound,
  z.ZodTypeDef,
  NullableRequiredSharedObjectPostJson
> = z.object({
  nullableOptionalObj: z.nullable(shared.NullableOptionalObject$outboundSchema)
    .optional(),
  nullableRequiredObj: z.nullable(shared.NullableObject$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    nullableOptionalObj: "NullableOptionalObj",
    nullableRequiredObj: "NullableRequiredObj",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableRequiredSharedObjectPostJson$ {
  /** @deprecated use `NullableRequiredSharedObjectPostJson$inboundSchema` instead. */
  export const inboundSchema =
    NullableRequiredSharedObjectPostJson$inboundSchema;
  /** @deprecated use `NullableRequiredSharedObjectPostJson$outboundSchema` instead. */
  export const outboundSchema =
    NullableRequiredSharedObjectPostJson$outboundSchema;
  /** @deprecated use `NullableRequiredSharedObjectPostJson$Outbound` instead. */
  export type Outbound = NullableRequiredSharedObjectPostJson$Outbound;
}

export function nullableRequiredSharedObjectPostJsonToJSON(
  nullableRequiredSharedObjectPostJson: NullableRequiredSharedObjectPostJson,
): string {
  return JSON.stringify(
    NullableRequiredSharedObjectPostJson$outboundSchema.parse(
      nullableRequiredSharedObjectPostJson,
    ),
  );
}

export function nullableRequiredSharedObjectPostJsonFromJSON(
  jsonString: string,
): SafeParseResult<NullableRequiredSharedObjectPostJson, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      NullableRequiredSharedObjectPostJson$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableRequiredSharedObjectPostJson' from JSON`,
  );
}

/** @internal */
export const NullableRequiredSharedObjectPostResponseBody$inboundSchema:
  z.ZodType<
    NullableRequiredSharedObjectPostResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.string().optional(),
    json: z.lazy(() => NullableRequiredSharedObjectPostJson$inboundSchema)
      .optional(),
  });

/** @internal */
export type NullableRequiredSharedObjectPostResponseBody$Outbound = {
  data?: string | undefined;
  json?: NullableRequiredSharedObjectPostJson$Outbound | undefined;
};

/** @internal */
export const NullableRequiredSharedObjectPostResponseBody$outboundSchema:
  z.ZodType<
    NullableRequiredSharedObjectPostResponseBody$Outbound,
    z.ZodTypeDef,
    NullableRequiredSharedObjectPostResponseBody
  > = z.object({
    data: z.string().optional(),
    json: z.lazy(() => NullableRequiredSharedObjectPostJson$outboundSchema)
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableRequiredSharedObjectPostResponseBody$ {
  /** @deprecated use `NullableRequiredSharedObjectPostResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    NullableRequiredSharedObjectPostResponseBody$inboundSchema;
  /** @deprecated use `NullableRequiredSharedObjectPostResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    NullableRequiredSharedObjectPostResponseBody$outboundSchema;
  /** @deprecated use `NullableRequiredSharedObjectPostResponseBody$Outbound` instead. */
  export type Outbound = NullableRequiredSharedObjectPostResponseBody$Outbound;
}

export function nullableRequiredSharedObjectPostResponseBodyToJSON(
  nullableRequiredSharedObjectPostResponseBody:
    NullableRequiredSharedObjectPostResponseBody,
): string {
  return JSON.stringify(
    NullableRequiredSharedObjectPostResponseBody$outboundSchema.parse(
      nullableRequiredSharedObjectPostResponseBody,
    ),
  );
}

export function nullableRequiredSharedObjectPostResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  NullableRequiredSharedObjectPostResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NullableRequiredSharedObjectPostResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'NullableRequiredSharedObjectPostResponseBody' from JSON`,
  );
}
