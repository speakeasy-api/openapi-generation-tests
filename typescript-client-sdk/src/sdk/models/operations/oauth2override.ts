/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Successful authentication.
 */
export type Oauth2OverrideToken = {
  authenticated: boolean;
  token: string;
};

/** @internal */
export const Oauth2OverrideToken$inboundSchema: z.ZodType<
  Oauth2OverrideToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  authenticated: z.boolean(),
  token: z.string(),
});

/** @internal */
export type Oauth2OverrideToken$Outbound = {
  authenticated: boolean;
  token: string;
};

/** @internal */
export const Oauth2OverrideToken$outboundSchema: z.ZodType<
  Oauth2OverrideToken$Outbound,
  z.ZodTypeDef,
  Oauth2OverrideToken
> = z.object({
  authenticated: z.boolean(),
  token: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Oauth2OverrideToken$ {
  /** @deprecated use `Oauth2OverrideToken$inboundSchema` instead. */
  export const inboundSchema = Oauth2OverrideToken$inboundSchema;
  /** @deprecated use `Oauth2OverrideToken$outboundSchema` instead. */
  export const outboundSchema = Oauth2OverrideToken$outboundSchema;
  /** @deprecated use `Oauth2OverrideToken$Outbound` instead. */
  export type Outbound = Oauth2OverrideToken$Outbound;
}

export function oauth2OverrideTokenToJSON(
  oauth2OverrideToken: Oauth2OverrideToken,
): string {
  return JSON.stringify(
    Oauth2OverrideToken$outboundSchema.parse(oauth2OverrideToken),
  );
}

export function oauth2OverrideTokenFromJSON(
  jsonString: string,
): SafeParseResult<Oauth2OverrideToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Oauth2OverrideToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Oauth2OverrideToken' from JSON`,
  );
}
