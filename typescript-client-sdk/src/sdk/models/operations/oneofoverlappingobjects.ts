/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type OneOfOverlappingObjectsRequestBody = {
  field1: string;
  field2?: boolean | undefined;
  field3?: number | undefined;
};

/**
 * OK
 */
export type OneOfOverlappingObjectsRes = {
  json: shared.OneOfOverlappingObjects;
};

/** @internal */
export const OneOfOverlappingObjectsRequestBody$inboundSchema: z.ZodType<
  OneOfOverlappingObjectsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  field1: z.string(),
  field2: z.boolean().optional(),
  field3: z.number().optional(),
});

/** @internal */
export type OneOfOverlappingObjectsRequestBody$Outbound = {
  field1: string;
  field2?: boolean | undefined;
  field3?: number | undefined;
};

/** @internal */
export const OneOfOverlappingObjectsRequestBody$outboundSchema: z.ZodType<
  OneOfOverlappingObjectsRequestBody$Outbound,
  z.ZodTypeDef,
  OneOfOverlappingObjectsRequestBody
> = z.object({
  field1: z.string(),
  field2: z.boolean().optional(),
  field3: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OneOfOverlappingObjectsRequestBody$ {
  /** @deprecated use `OneOfOverlappingObjectsRequestBody$inboundSchema` instead. */
  export const inboundSchema = OneOfOverlappingObjectsRequestBody$inboundSchema;
  /** @deprecated use `OneOfOverlappingObjectsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    OneOfOverlappingObjectsRequestBody$outboundSchema;
  /** @deprecated use `OneOfOverlappingObjectsRequestBody$Outbound` instead. */
  export type Outbound = OneOfOverlappingObjectsRequestBody$Outbound;
}

export function oneOfOverlappingObjectsRequestBodyToJSON(
  oneOfOverlappingObjectsRequestBody: OneOfOverlappingObjectsRequestBody,
): string {
  return JSON.stringify(
    OneOfOverlappingObjectsRequestBody$outboundSchema.parse(
      oneOfOverlappingObjectsRequestBody,
    ),
  );
}

export function oneOfOverlappingObjectsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<OneOfOverlappingObjectsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OneOfOverlappingObjectsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OneOfOverlappingObjectsRequestBody' from JSON`,
  );
}

/** @internal */
export const OneOfOverlappingObjectsRes$inboundSchema: z.ZodType<
  OneOfOverlappingObjectsRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  json: shared.OneOfOverlappingObjects$inboundSchema,
});

/** @internal */
export type OneOfOverlappingObjectsRes$Outbound = {
  json: shared.OneOfOverlappingObjects$Outbound;
};

/** @internal */
export const OneOfOverlappingObjectsRes$outboundSchema: z.ZodType<
  OneOfOverlappingObjectsRes$Outbound,
  z.ZodTypeDef,
  OneOfOverlappingObjectsRes
> = z.object({
  json: shared.OneOfOverlappingObjects$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OneOfOverlappingObjectsRes$ {
  /** @deprecated use `OneOfOverlappingObjectsRes$inboundSchema` instead. */
  export const inboundSchema = OneOfOverlappingObjectsRes$inboundSchema;
  /** @deprecated use `OneOfOverlappingObjectsRes$outboundSchema` instead. */
  export const outboundSchema = OneOfOverlappingObjectsRes$outboundSchema;
  /** @deprecated use `OneOfOverlappingObjectsRes$Outbound` instead. */
  export type Outbound = OneOfOverlappingObjectsRes$Outbound;
}

export function oneOfOverlappingObjectsResToJSON(
  oneOfOverlappingObjectsRes: OneOfOverlappingObjectsRes,
): string {
  return JSON.stringify(
    OneOfOverlappingObjectsRes$outboundSchema.parse(oneOfOverlappingObjectsRes),
  );
}

export function oneOfOverlappingObjectsResFromJSON(
  jsonString: string,
): SafeParseResult<OneOfOverlappingObjectsRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OneOfOverlappingObjectsRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OneOfOverlappingObjectsRes' from JSON`,
  );
}
