/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export const OpenIdConnectAuthNewServerList = ["http://localhost:35456"] as const;

export type OpenIdConnectAuthNewSecurity = {
    openIdConnect: string;
};

export type OpenIdConnectAuthNewResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace OpenIdConnectAuthNewSecurity$ {
    export const inboundSchema: z.ZodType<OpenIdConnectAuthNewSecurity, z.ZodTypeDef, unknown> = z
        .object({
            openIdConnect: z.string(),
        })
        .transform((v) => {
            return {
                openIdConnect: v.openIdConnect,
            };
        });

    export type Outbound = {
        openIdConnect: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OpenIdConnectAuthNewSecurity> = z
        .object({
            openIdConnect: z.string(),
        })
        .transform((v) => {
            return {
                openIdConnect: v.openIdConnect,
            };
        });
}

/** @internal */
export namespace OpenIdConnectAuthNewResponse$ {
    export const inboundSchema: z.ZodType<OpenIdConnectAuthNewResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OpenIdConnectAuthNewResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
