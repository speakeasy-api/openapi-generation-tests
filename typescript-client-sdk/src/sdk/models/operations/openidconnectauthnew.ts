/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const OpenIdConnectAuthNewServerList = [
  "http://localhost:35456",
] as const;

export type OpenIdConnectAuthNewSecurity = {
  openIdConnect: string;
};

/** @internal */
export const OpenIdConnectAuthNewSecurity$inboundSchema: z.ZodType<
  OpenIdConnectAuthNewSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  openIdConnect: z.string(),
});

/** @internal */
export type OpenIdConnectAuthNewSecurity$Outbound = {
  openIdConnect: string;
};

/** @internal */
export const OpenIdConnectAuthNewSecurity$outboundSchema: z.ZodType<
  OpenIdConnectAuthNewSecurity$Outbound,
  z.ZodTypeDef,
  OpenIdConnectAuthNewSecurity
> = z.object({
  openIdConnect: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenIdConnectAuthNewSecurity$ {
  /** @deprecated use `OpenIdConnectAuthNewSecurity$inboundSchema` instead. */
  export const inboundSchema = OpenIdConnectAuthNewSecurity$inboundSchema;
  /** @deprecated use `OpenIdConnectAuthNewSecurity$outboundSchema` instead. */
  export const outboundSchema = OpenIdConnectAuthNewSecurity$outboundSchema;
  /** @deprecated use `OpenIdConnectAuthNewSecurity$Outbound` instead. */
  export type Outbound = OpenIdConnectAuthNewSecurity$Outbound;
}

export function openIdConnectAuthNewSecurityToJSON(
  openIdConnectAuthNewSecurity: OpenIdConnectAuthNewSecurity,
): string {
  return JSON.stringify(
    OpenIdConnectAuthNewSecurity$outboundSchema.parse(
      openIdConnectAuthNewSecurity,
    ),
  );
}

export function openIdConnectAuthNewSecurityFromJSON(
  jsonString: string,
): SafeParseResult<OpenIdConnectAuthNewSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenIdConnectAuthNewSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenIdConnectAuthNewSecurity' from JSON`,
  );
}
