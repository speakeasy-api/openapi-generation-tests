/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OverriddenFieldNamesPostRequestBody = {
  inInt?: number | undefined;
  inStr?: string | undefined;
};

export type OverriddenFieldNamesPostJson = {
  outInt: number;
  outStr: string;
};

/**
 * OK
 */
export type OverriddenFieldNamesPostResponseBody = {
  json: OverriddenFieldNamesPostJson;
};

/** @internal */
export const OverriddenFieldNamesPostRequestBody$inboundSchema: z.ZodType<
  OverriddenFieldNamesPostRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  int: z.number().int().optional(),
  str: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "int": "inInt",
    "str": "inStr",
  });
});

/** @internal */
export type OverriddenFieldNamesPostRequestBody$Outbound = {
  int?: number | undefined;
  str?: string | undefined;
};

/** @internal */
export const OverriddenFieldNamesPostRequestBody$outboundSchema: z.ZodType<
  OverriddenFieldNamesPostRequestBody$Outbound,
  z.ZodTypeDef,
  OverriddenFieldNamesPostRequestBody
> = z.object({
  inInt: z.number().int().optional(),
  inStr: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    inInt: "int",
    inStr: "str",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OverriddenFieldNamesPostRequestBody$ {
  /** @deprecated use `OverriddenFieldNamesPostRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    OverriddenFieldNamesPostRequestBody$inboundSchema;
  /** @deprecated use `OverriddenFieldNamesPostRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    OverriddenFieldNamesPostRequestBody$outboundSchema;
  /** @deprecated use `OverriddenFieldNamesPostRequestBody$Outbound` instead. */
  export type Outbound = OverriddenFieldNamesPostRequestBody$Outbound;
}

export function overriddenFieldNamesPostRequestBodyToJSON(
  overriddenFieldNamesPostRequestBody: OverriddenFieldNamesPostRequestBody,
): string {
  return JSON.stringify(
    OverriddenFieldNamesPostRequestBody$outboundSchema.parse(
      overriddenFieldNamesPostRequestBody,
    ),
  );
}

export function overriddenFieldNamesPostRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<OverriddenFieldNamesPostRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OverriddenFieldNamesPostRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OverriddenFieldNamesPostRequestBody' from JSON`,
  );
}

/** @internal */
export const OverriddenFieldNamesPostJson$inboundSchema: z.ZodType<
  OverriddenFieldNamesPostJson,
  z.ZodTypeDef,
  unknown
> = z.object({
  int: z.number().int(),
  str: z.string(),
}).transform((v) => {
  return remap$(v, {
    "int": "outInt",
    "str": "outStr",
  });
});

/** @internal */
export type OverriddenFieldNamesPostJson$Outbound = {
  int: number;
  str: string;
};

/** @internal */
export const OverriddenFieldNamesPostJson$outboundSchema: z.ZodType<
  OverriddenFieldNamesPostJson$Outbound,
  z.ZodTypeDef,
  OverriddenFieldNamesPostJson
> = z.object({
  outInt: z.number().int(),
  outStr: z.string(),
}).transform((v) => {
  return remap$(v, {
    outInt: "int",
    outStr: "str",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OverriddenFieldNamesPostJson$ {
  /** @deprecated use `OverriddenFieldNamesPostJson$inboundSchema` instead. */
  export const inboundSchema = OverriddenFieldNamesPostJson$inboundSchema;
  /** @deprecated use `OverriddenFieldNamesPostJson$outboundSchema` instead. */
  export const outboundSchema = OverriddenFieldNamesPostJson$outboundSchema;
  /** @deprecated use `OverriddenFieldNamesPostJson$Outbound` instead. */
  export type Outbound = OverriddenFieldNamesPostJson$Outbound;
}

export function overriddenFieldNamesPostJsonToJSON(
  overriddenFieldNamesPostJson: OverriddenFieldNamesPostJson,
): string {
  return JSON.stringify(
    OverriddenFieldNamesPostJson$outboundSchema.parse(
      overriddenFieldNamesPostJson,
    ),
  );
}

export function overriddenFieldNamesPostJsonFromJSON(
  jsonString: string,
): SafeParseResult<OverriddenFieldNamesPostJson, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OverriddenFieldNamesPostJson$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OverriddenFieldNamesPostJson' from JSON`,
  );
}

/** @internal */
export const OverriddenFieldNamesPostResponseBody$inboundSchema: z.ZodType<
  OverriddenFieldNamesPostResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  json: z.lazy(() => OverriddenFieldNamesPostJson$inboundSchema),
});

/** @internal */
export type OverriddenFieldNamesPostResponseBody$Outbound = {
  json: OverriddenFieldNamesPostJson$Outbound;
};

/** @internal */
export const OverriddenFieldNamesPostResponseBody$outboundSchema: z.ZodType<
  OverriddenFieldNamesPostResponseBody$Outbound,
  z.ZodTypeDef,
  OverriddenFieldNamesPostResponseBody
> = z.object({
  json: z.lazy(() => OverriddenFieldNamesPostJson$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OverriddenFieldNamesPostResponseBody$ {
  /** @deprecated use `OverriddenFieldNamesPostResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    OverriddenFieldNamesPostResponseBody$inboundSchema;
  /** @deprecated use `OverriddenFieldNamesPostResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    OverriddenFieldNamesPostResponseBody$outboundSchema;
  /** @deprecated use `OverriddenFieldNamesPostResponseBody$Outbound` instead. */
  export type Outbound = OverriddenFieldNamesPostResponseBody$Outbound;
}

export function overriddenFieldNamesPostResponseBodyToJSON(
  overriddenFieldNamesPostResponseBody: OverriddenFieldNamesPostResponseBody,
): string {
  return JSON.stringify(
    OverriddenFieldNamesPostResponseBody$outboundSchema.parse(
      overriddenFieldNamesPostResponseBody,
    ),
  );
}

export function overriddenFieldNamesPostResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<OverriddenFieldNamesPostResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OverriddenFieldNamesPostResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OverriddenFieldNamesPostResponseBody' from JSON`,
  );
}
