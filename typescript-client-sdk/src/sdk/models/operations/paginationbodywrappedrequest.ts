/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export const PaginationBodyWrappedRequestServerList = [
  "http://localhost:35456",
] as const;

export type PaginationBodyWrappedRequestRequest = {
  idempotencyKey?: string | undefined;
  limitOffsetConfig: shared.LimitOffsetConfig;
  requestId?: string | undefined;
};

/**
 * OK
 */
export type PaginationBodyWrappedRequestRes = {
  next?: string | undefined;
  numPages: number;
  resultArray: Array<number>;
};

export type PaginationBodyWrappedRequestResponse = {
  result: PaginationBodyWrappedRequestRes;
};

/** @internal */
export const PaginationBodyWrappedRequestRequest$inboundSchema: z.ZodType<
  PaginationBodyWrappedRequestRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "idempotency-key": z.string().optional(),
  limitOffsetConfig: shared.LimitOffsetConfig$inboundSchema,
  "request-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "request-id": "requestId",
  });
});

/** @internal */
export type PaginationBodyWrappedRequestRequest$Outbound = {
  "idempotency-key"?: string | undefined;
  limitOffsetConfig: shared.LimitOffsetConfig$Outbound;
  "request-id"?: string | undefined;
};

/** @internal */
export const PaginationBodyWrappedRequestRequest$outboundSchema: z.ZodType<
  PaginationBodyWrappedRequestRequest$Outbound,
  z.ZodTypeDef,
  PaginationBodyWrappedRequestRequest
> = z.object({
  idempotencyKey: z.string().optional(),
  limitOffsetConfig: shared.LimitOffsetConfig$outboundSchema,
  requestId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    requestId: "request-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginationBodyWrappedRequestRequest$ {
  /** @deprecated use `PaginationBodyWrappedRequestRequest$inboundSchema` instead. */
  export const inboundSchema =
    PaginationBodyWrappedRequestRequest$inboundSchema;
  /** @deprecated use `PaginationBodyWrappedRequestRequest$outboundSchema` instead. */
  export const outboundSchema =
    PaginationBodyWrappedRequestRequest$outboundSchema;
  /** @deprecated use `PaginationBodyWrappedRequestRequest$Outbound` instead. */
  export type Outbound = PaginationBodyWrappedRequestRequest$Outbound;
}

export function paginationBodyWrappedRequestRequestToJSON(
  paginationBodyWrappedRequestRequest: PaginationBodyWrappedRequestRequest,
): string {
  return JSON.stringify(
    PaginationBodyWrappedRequestRequest$outboundSchema.parse(
      paginationBodyWrappedRequestRequest,
    ),
  );
}

export function paginationBodyWrappedRequestRequestFromJSON(
  jsonString: string,
): SafeParseResult<PaginationBodyWrappedRequestRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PaginationBodyWrappedRequestRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginationBodyWrappedRequestRequest' from JSON`,
  );
}

/** @internal */
export const PaginationBodyWrappedRequestRes$inboundSchema: z.ZodType<
  PaginationBodyWrappedRequestRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  next: z.string().optional(),
  numPages: z.number().int(),
  resultArray: z.array(z.number().int()),
});

/** @internal */
export type PaginationBodyWrappedRequestRes$Outbound = {
  next?: string | undefined;
  numPages: number;
  resultArray: Array<number>;
};

/** @internal */
export const PaginationBodyWrappedRequestRes$outboundSchema: z.ZodType<
  PaginationBodyWrappedRequestRes$Outbound,
  z.ZodTypeDef,
  PaginationBodyWrappedRequestRes
> = z.object({
  next: z.string().optional(),
  numPages: z.number().int(),
  resultArray: z.array(z.number().int()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginationBodyWrappedRequestRes$ {
  /** @deprecated use `PaginationBodyWrappedRequestRes$inboundSchema` instead. */
  export const inboundSchema = PaginationBodyWrappedRequestRes$inboundSchema;
  /** @deprecated use `PaginationBodyWrappedRequestRes$outboundSchema` instead. */
  export const outboundSchema = PaginationBodyWrappedRequestRes$outboundSchema;
  /** @deprecated use `PaginationBodyWrappedRequestRes$Outbound` instead. */
  export type Outbound = PaginationBodyWrappedRequestRes$Outbound;
}

export function paginationBodyWrappedRequestResToJSON(
  paginationBodyWrappedRequestRes: PaginationBodyWrappedRequestRes,
): string {
  return JSON.stringify(
    PaginationBodyWrappedRequestRes$outboundSchema.parse(
      paginationBodyWrappedRequestRes,
    ),
  );
}

export function paginationBodyWrappedRequestResFromJSON(
  jsonString: string,
): SafeParseResult<PaginationBodyWrappedRequestRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaginationBodyWrappedRequestRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginationBodyWrappedRequestRes' from JSON`,
  );
}

/** @internal */
export const PaginationBodyWrappedRequestResponse$inboundSchema: z.ZodType<
  PaginationBodyWrappedRequestResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => PaginationBodyWrappedRequestRes$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type PaginationBodyWrappedRequestResponse$Outbound = {
  Result: PaginationBodyWrappedRequestRes$Outbound;
};

/** @internal */
export const PaginationBodyWrappedRequestResponse$outboundSchema: z.ZodType<
  PaginationBodyWrappedRequestResponse$Outbound,
  z.ZodTypeDef,
  PaginationBodyWrappedRequestResponse
> = z.object({
  result: z.lazy(() => PaginationBodyWrappedRequestRes$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginationBodyWrappedRequestResponse$ {
  /** @deprecated use `PaginationBodyWrappedRequestResponse$inboundSchema` instead. */
  export const inboundSchema =
    PaginationBodyWrappedRequestResponse$inboundSchema;
  /** @deprecated use `PaginationBodyWrappedRequestResponse$outboundSchema` instead. */
  export const outboundSchema =
    PaginationBodyWrappedRequestResponse$outboundSchema;
  /** @deprecated use `PaginationBodyWrappedRequestResponse$Outbound` instead. */
  export type Outbound = PaginationBodyWrappedRequestResponse$Outbound;
}

export function paginationBodyWrappedRequestResponseToJSON(
  paginationBodyWrappedRequestResponse: PaginationBodyWrappedRequestResponse,
): string {
  return JSON.stringify(
    PaginationBodyWrappedRequestResponse$outboundSchema.parse(
      paginationBodyWrappedRequestResponse,
    ),
  );
}

export function paginationBodyWrappedRequestResponseFromJSON(
  jsonString: string,
): SafeParseResult<PaginationBodyWrappedRequestResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PaginationBodyWrappedRequestResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginationBodyWrappedRequestResponse' from JSON`,
  );
}
