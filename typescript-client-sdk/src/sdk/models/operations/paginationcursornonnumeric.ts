/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export const PaginationCursorNonNumericServerList = ["http://localhost:35456"] as const;

export type PaginationCursorNonNumericRequest = {
    /**
     * The page token used to request a specific page of the search results
     */
    cursor?: string | undefined;
};

/**
 * OK
 */
export type PaginationCursorNonNumericRes = {
    next?: string | undefined;
    numPages: number;
    resultArray: Array<string>;
};

export type PaginationCursorNonNumericResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: PaginationCursorNonNumericRes | undefined;
};

/** @internal */
export namespace PaginationCursorNonNumericRequest$ {
    export const inboundSchema: z.ZodType<
        PaginationCursorNonNumericRequest,
        z.ZodTypeDef,
        unknown
    > = z.object({
        cursor: z.string().optional(),
    });

    export type Outbound = {
        cursor?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PaginationCursorNonNumericRequest
    > = z.object({
        cursor: z.string().optional(),
    });
}

/** @internal */
export namespace PaginationCursorNonNumericRes$ {
    export const inboundSchema: z.ZodType<PaginationCursorNonNumericRes, z.ZodTypeDef, unknown> =
        z.object({
            next: z.string().optional(),
            numPages: z.number().int(),
            resultArray: z.array(z.string()),
        });

    export type Outbound = {
        next?: string | undefined;
        numPages: number;
        resultArray: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaginationCursorNonNumericRes> =
        z.object({
            next: z.string().optional(),
            numPages: z.number().int(),
            resultArray: z.array(z.string()),
        });
}

/** @internal */
export namespace PaginationCursorNonNumericResponse$ {
    export const inboundSchema: z.ZodType<
        PaginationCursorNonNumericResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => PaginationCursorNonNumericRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: PaginationCursorNonNumericRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PaginationCursorNonNumericResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => PaginationCursorNonNumericRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
