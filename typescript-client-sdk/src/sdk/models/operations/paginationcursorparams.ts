/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PaginationCursorParamsServerList = [
  "http://localhost:35456",
] as const;

export type PaginationCursorParamsRequest = {
  cursor: number;
};

/**
 * OK
 */
export type PaginationCursorParamsRes = {
  next?: string | undefined;
  numPages: number;
  resultArray: Array<number>;
};

export type PaginationCursorParamsResponse = {
  result: PaginationCursorParamsRes;
};

/** @internal */
export const PaginationCursorParamsRequest$inboundSchema: z.ZodType<
  PaginationCursorParamsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.number().int(),
});

/** @internal */
export type PaginationCursorParamsRequest$Outbound = {
  cursor: number;
};

/** @internal */
export const PaginationCursorParamsRequest$outboundSchema: z.ZodType<
  PaginationCursorParamsRequest$Outbound,
  z.ZodTypeDef,
  PaginationCursorParamsRequest
> = z.object({
  cursor: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginationCursorParamsRequest$ {
  /** @deprecated use `PaginationCursorParamsRequest$inboundSchema` instead. */
  export const inboundSchema = PaginationCursorParamsRequest$inboundSchema;
  /** @deprecated use `PaginationCursorParamsRequest$outboundSchema` instead. */
  export const outboundSchema = PaginationCursorParamsRequest$outboundSchema;
  /** @deprecated use `PaginationCursorParamsRequest$Outbound` instead. */
  export type Outbound = PaginationCursorParamsRequest$Outbound;
}

export function paginationCursorParamsRequestToJSON(
  paginationCursorParamsRequest: PaginationCursorParamsRequest,
): string {
  return JSON.stringify(
    PaginationCursorParamsRequest$outboundSchema.parse(
      paginationCursorParamsRequest,
    ),
  );
}

export function paginationCursorParamsRequestFromJSON(
  jsonString: string,
): SafeParseResult<PaginationCursorParamsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaginationCursorParamsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginationCursorParamsRequest' from JSON`,
  );
}

/** @internal */
export const PaginationCursorParamsRes$inboundSchema: z.ZodType<
  PaginationCursorParamsRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  next: z.string().optional(),
  numPages: z.number().int(),
  resultArray: z.array(z.number().int()),
});

/** @internal */
export type PaginationCursorParamsRes$Outbound = {
  next?: string | undefined;
  numPages: number;
  resultArray: Array<number>;
};

/** @internal */
export const PaginationCursorParamsRes$outboundSchema: z.ZodType<
  PaginationCursorParamsRes$Outbound,
  z.ZodTypeDef,
  PaginationCursorParamsRes
> = z.object({
  next: z.string().optional(),
  numPages: z.number().int(),
  resultArray: z.array(z.number().int()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginationCursorParamsRes$ {
  /** @deprecated use `PaginationCursorParamsRes$inboundSchema` instead. */
  export const inboundSchema = PaginationCursorParamsRes$inboundSchema;
  /** @deprecated use `PaginationCursorParamsRes$outboundSchema` instead. */
  export const outboundSchema = PaginationCursorParamsRes$outboundSchema;
  /** @deprecated use `PaginationCursorParamsRes$Outbound` instead. */
  export type Outbound = PaginationCursorParamsRes$Outbound;
}

export function paginationCursorParamsResToJSON(
  paginationCursorParamsRes: PaginationCursorParamsRes,
): string {
  return JSON.stringify(
    PaginationCursorParamsRes$outboundSchema.parse(paginationCursorParamsRes),
  );
}

export function paginationCursorParamsResFromJSON(
  jsonString: string,
): SafeParseResult<PaginationCursorParamsRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaginationCursorParamsRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginationCursorParamsRes' from JSON`,
  );
}

/** @internal */
export const PaginationCursorParamsResponse$inboundSchema: z.ZodType<
  PaginationCursorParamsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => PaginationCursorParamsRes$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type PaginationCursorParamsResponse$Outbound = {
  Result: PaginationCursorParamsRes$Outbound;
};

/** @internal */
export const PaginationCursorParamsResponse$outboundSchema: z.ZodType<
  PaginationCursorParamsResponse$Outbound,
  z.ZodTypeDef,
  PaginationCursorParamsResponse
> = z.object({
  result: z.lazy(() => PaginationCursorParamsRes$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginationCursorParamsResponse$ {
  /** @deprecated use `PaginationCursorParamsResponse$inboundSchema` instead. */
  export const inboundSchema = PaginationCursorParamsResponse$inboundSchema;
  /** @deprecated use `PaginationCursorParamsResponse$outboundSchema` instead. */
  export const outboundSchema = PaginationCursorParamsResponse$outboundSchema;
  /** @deprecated use `PaginationCursorParamsResponse$Outbound` instead. */
  export type Outbound = PaginationCursorParamsResponse$Outbound;
}

export function paginationCursorParamsResponseToJSON(
  paginationCursorParamsResponse: PaginationCursorParamsResponse,
): string {
  return JSON.stringify(
    PaginationCursorParamsResponse$outboundSchema.parse(
      paginationCursorParamsResponse,
    ),
  );
}

export function paginationCursorParamsResponseFromJSON(
  jsonString: string,
): SafeParseResult<PaginationCursorParamsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaginationCursorParamsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginationCursorParamsResponse' from JSON`,
  );
}
