/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PaginationEncapsulatedParameterServerList = [
  "http://localhost:35456",
] as const;

export type PaginationEncapsulatedParameterRequest = {
  cursor?: number | undefined;
  headerParam?: string | undefined;
};

/**
 * OK
 */
export type PaginationEncapsulatedParameterRes = {
  next?: string | undefined;
  numPages: number;
  resultArray: Array<number>;
};

export type PaginationEncapsulatedParameterResponse = {
  result: PaginationEncapsulatedParameterRes;
};

/** @internal */
export const PaginationEncapsulatedParameterRequest$inboundSchema: z.ZodType<
  PaginationEncapsulatedParameterRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.number().int().optional(),
  headerParam: z.string().optional(),
});

/** @internal */
export type PaginationEncapsulatedParameterRequest$Outbound = {
  cursor?: number | undefined;
  headerParam?: string | undefined;
};

/** @internal */
export const PaginationEncapsulatedParameterRequest$outboundSchema: z.ZodType<
  PaginationEncapsulatedParameterRequest$Outbound,
  z.ZodTypeDef,
  PaginationEncapsulatedParameterRequest
> = z.object({
  cursor: z.number().int().optional(),
  headerParam: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginationEncapsulatedParameterRequest$ {
  /** @deprecated use `PaginationEncapsulatedParameterRequest$inboundSchema` instead. */
  export const inboundSchema =
    PaginationEncapsulatedParameterRequest$inboundSchema;
  /** @deprecated use `PaginationEncapsulatedParameterRequest$outboundSchema` instead. */
  export const outboundSchema =
    PaginationEncapsulatedParameterRequest$outboundSchema;
  /** @deprecated use `PaginationEncapsulatedParameterRequest$Outbound` instead. */
  export type Outbound = PaginationEncapsulatedParameterRequest$Outbound;
}

export function paginationEncapsulatedParameterRequestToJSON(
  paginationEncapsulatedParameterRequest:
    PaginationEncapsulatedParameterRequest,
): string {
  return JSON.stringify(
    PaginationEncapsulatedParameterRequest$outboundSchema.parse(
      paginationEncapsulatedParameterRequest,
    ),
  );
}

export function paginationEncapsulatedParameterRequestFromJSON(
  jsonString: string,
): SafeParseResult<PaginationEncapsulatedParameterRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PaginationEncapsulatedParameterRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginationEncapsulatedParameterRequest' from JSON`,
  );
}

/** @internal */
export const PaginationEncapsulatedParameterRes$inboundSchema: z.ZodType<
  PaginationEncapsulatedParameterRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  next: z.string().optional(),
  numPages: z.number().int(),
  resultArray: z.array(z.number().int()),
});

/** @internal */
export type PaginationEncapsulatedParameterRes$Outbound = {
  next?: string | undefined;
  numPages: number;
  resultArray: Array<number>;
};

/** @internal */
export const PaginationEncapsulatedParameterRes$outboundSchema: z.ZodType<
  PaginationEncapsulatedParameterRes$Outbound,
  z.ZodTypeDef,
  PaginationEncapsulatedParameterRes
> = z.object({
  next: z.string().optional(),
  numPages: z.number().int(),
  resultArray: z.array(z.number().int()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginationEncapsulatedParameterRes$ {
  /** @deprecated use `PaginationEncapsulatedParameterRes$inboundSchema` instead. */
  export const inboundSchema = PaginationEncapsulatedParameterRes$inboundSchema;
  /** @deprecated use `PaginationEncapsulatedParameterRes$outboundSchema` instead. */
  export const outboundSchema =
    PaginationEncapsulatedParameterRes$outboundSchema;
  /** @deprecated use `PaginationEncapsulatedParameterRes$Outbound` instead. */
  export type Outbound = PaginationEncapsulatedParameterRes$Outbound;
}

export function paginationEncapsulatedParameterResToJSON(
  paginationEncapsulatedParameterRes: PaginationEncapsulatedParameterRes,
): string {
  return JSON.stringify(
    PaginationEncapsulatedParameterRes$outboundSchema.parse(
      paginationEncapsulatedParameterRes,
    ),
  );
}

export function paginationEncapsulatedParameterResFromJSON(
  jsonString: string,
): SafeParseResult<PaginationEncapsulatedParameterRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PaginationEncapsulatedParameterRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginationEncapsulatedParameterRes' from JSON`,
  );
}

/** @internal */
export const PaginationEncapsulatedParameterResponse$inboundSchema: z.ZodType<
  PaginationEncapsulatedParameterResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => PaginationEncapsulatedParameterRes$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type PaginationEncapsulatedParameterResponse$Outbound = {
  Result: PaginationEncapsulatedParameterRes$Outbound;
};

/** @internal */
export const PaginationEncapsulatedParameterResponse$outboundSchema: z.ZodType<
  PaginationEncapsulatedParameterResponse$Outbound,
  z.ZodTypeDef,
  PaginationEncapsulatedParameterResponse
> = z.object({
  result: z.lazy(() => PaginationEncapsulatedParameterRes$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginationEncapsulatedParameterResponse$ {
  /** @deprecated use `PaginationEncapsulatedParameterResponse$inboundSchema` instead. */
  export const inboundSchema =
    PaginationEncapsulatedParameterResponse$inboundSchema;
  /** @deprecated use `PaginationEncapsulatedParameterResponse$outboundSchema` instead. */
  export const outboundSchema =
    PaginationEncapsulatedParameterResponse$outboundSchema;
  /** @deprecated use `PaginationEncapsulatedParameterResponse$Outbound` instead. */
  export type Outbound = PaginationEncapsulatedParameterResponse$Outbound;
}

export function paginationEncapsulatedParameterResponseToJSON(
  paginationEncapsulatedParameterResponse:
    PaginationEncapsulatedParameterResponse,
): string {
  return JSON.stringify(
    PaginationEncapsulatedParameterResponse$outboundSchema.parse(
      paginationEncapsulatedParameterResponse,
    ),
  );
}

export function paginationEncapsulatedParameterResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PaginationEncapsulatedParameterResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PaginationEncapsulatedParameterResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PaginationEncapsulatedParameterResponse' from JSON`,
  );
}
