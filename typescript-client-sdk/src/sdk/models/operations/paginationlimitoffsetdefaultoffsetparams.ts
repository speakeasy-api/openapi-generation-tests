/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PaginationLimitOffsetDefaultOffsetParamsServerList = [
  "http://localhost:35456",
] as const;

export type PaginationLimitOffsetDefaultOffsetParamsRequest = {
  limit?: number | undefined;
  offset?: number | undefined;
};

/**
 * OK
 */
export type PaginationLimitOffsetDefaultOffsetParamsRes = {
  next?: string | undefined;
  numPages: number;
  resultArray: Array<number>;
};

export type PaginationLimitOffsetDefaultOffsetParamsResponse = {
  result: PaginationLimitOffsetDefaultOffsetParamsRes;
};

/** @internal */
export const PaginationLimitOffsetDefaultOffsetParamsRequest$inboundSchema:
  z.ZodType<
    PaginationLimitOffsetDefaultOffsetParamsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    limit: z.number().int().default(15),
    offset: z.number().int().default(10),
  });

/** @internal */
export type PaginationLimitOffsetDefaultOffsetParamsRequest$Outbound = {
  limit: number;
  offset: number;
};

/** @internal */
export const PaginationLimitOffsetDefaultOffsetParamsRequest$outboundSchema:
  z.ZodType<
    PaginationLimitOffsetDefaultOffsetParamsRequest$Outbound,
    z.ZodTypeDef,
    PaginationLimitOffsetDefaultOffsetParamsRequest
  > = z.object({
    limit: z.number().int().default(15),
    offset: z.number().int().default(10),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginationLimitOffsetDefaultOffsetParamsRequest$ {
  /** @deprecated use `PaginationLimitOffsetDefaultOffsetParamsRequest$inboundSchema` instead. */
  export const inboundSchema =
    PaginationLimitOffsetDefaultOffsetParamsRequest$inboundSchema;
  /** @deprecated use `PaginationLimitOffsetDefaultOffsetParamsRequest$outboundSchema` instead. */
  export const outboundSchema =
    PaginationLimitOffsetDefaultOffsetParamsRequest$outboundSchema;
  /** @deprecated use `PaginationLimitOffsetDefaultOffsetParamsRequest$Outbound` instead. */
  export type Outbound =
    PaginationLimitOffsetDefaultOffsetParamsRequest$Outbound;
}

export function paginationLimitOffsetDefaultOffsetParamsRequestToJSON(
  paginationLimitOffsetDefaultOffsetParamsRequest:
    PaginationLimitOffsetDefaultOffsetParamsRequest,
): string {
  return JSON.stringify(
    PaginationLimitOffsetDefaultOffsetParamsRequest$outboundSchema.parse(
      paginationLimitOffsetDefaultOffsetParamsRequest,
    ),
  );
}

export function paginationLimitOffsetDefaultOffsetParamsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PaginationLimitOffsetDefaultOffsetParamsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PaginationLimitOffsetDefaultOffsetParamsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PaginationLimitOffsetDefaultOffsetParamsRequest' from JSON`,
  );
}

/** @internal */
export const PaginationLimitOffsetDefaultOffsetParamsRes$inboundSchema:
  z.ZodType<
    PaginationLimitOffsetDefaultOffsetParamsRes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    next: z.string().optional(),
    numPages: z.number().int(),
    resultArray: z.array(z.number().int()),
  });

/** @internal */
export type PaginationLimitOffsetDefaultOffsetParamsRes$Outbound = {
  next?: string | undefined;
  numPages: number;
  resultArray: Array<number>;
};

/** @internal */
export const PaginationLimitOffsetDefaultOffsetParamsRes$outboundSchema:
  z.ZodType<
    PaginationLimitOffsetDefaultOffsetParamsRes$Outbound,
    z.ZodTypeDef,
    PaginationLimitOffsetDefaultOffsetParamsRes
  > = z.object({
    next: z.string().optional(),
    numPages: z.number().int(),
    resultArray: z.array(z.number().int()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginationLimitOffsetDefaultOffsetParamsRes$ {
  /** @deprecated use `PaginationLimitOffsetDefaultOffsetParamsRes$inboundSchema` instead. */
  export const inboundSchema =
    PaginationLimitOffsetDefaultOffsetParamsRes$inboundSchema;
  /** @deprecated use `PaginationLimitOffsetDefaultOffsetParamsRes$outboundSchema` instead. */
  export const outboundSchema =
    PaginationLimitOffsetDefaultOffsetParamsRes$outboundSchema;
  /** @deprecated use `PaginationLimitOffsetDefaultOffsetParamsRes$Outbound` instead. */
  export type Outbound = PaginationLimitOffsetDefaultOffsetParamsRes$Outbound;
}

export function paginationLimitOffsetDefaultOffsetParamsResToJSON(
  paginationLimitOffsetDefaultOffsetParamsRes:
    PaginationLimitOffsetDefaultOffsetParamsRes,
): string {
  return JSON.stringify(
    PaginationLimitOffsetDefaultOffsetParamsRes$outboundSchema.parse(
      paginationLimitOffsetDefaultOffsetParamsRes,
    ),
  );
}

export function paginationLimitOffsetDefaultOffsetParamsResFromJSON(
  jsonString: string,
): SafeParseResult<
  PaginationLimitOffsetDefaultOffsetParamsRes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PaginationLimitOffsetDefaultOffsetParamsRes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PaginationLimitOffsetDefaultOffsetParamsRes' from JSON`,
  );
}

/** @internal */
export const PaginationLimitOffsetDefaultOffsetParamsResponse$inboundSchema:
  z.ZodType<
    PaginationLimitOffsetDefaultOffsetParamsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Result: z.lazy(() =>
      PaginationLimitOffsetDefaultOffsetParamsRes$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "Result": "result",
    });
  });

/** @internal */
export type PaginationLimitOffsetDefaultOffsetParamsResponse$Outbound = {
  Result: PaginationLimitOffsetDefaultOffsetParamsRes$Outbound;
};

/** @internal */
export const PaginationLimitOffsetDefaultOffsetParamsResponse$outboundSchema:
  z.ZodType<
    PaginationLimitOffsetDefaultOffsetParamsResponse$Outbound,
    z.ZodTypeDef,
    PaginationLimitOffsetDefaultOffsetParamsResponse
  > = z.object({
    result: z.lazy(() =>
      PaginationLimitOffsetDefaultOffsetParamsRes$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginationLimitOffsetDefaultOffsetParamsResponse$ {
  /** @deprecated use `PaginationLimitOffsetDefaultOffsetParamsResponse$inboundSchema` instead. */
  export const inboundSchema =
    PaginationLimitOffsetDefaultOffsetParamsResponse$inboundSchema;
  /** @deprecated use `PaginationLimitOffsetDefaultOffsetParamsResponse$outboundSchema` instead. */
  export const outboundSchema =
    PaginationLimitOffsetDefaultOffsetParamsResponse$outboundSchema;
  /** @deprecated use `PaginationLimitOffsetDefaultOffsetParamsResponse$Outbound` instead. */
  export type Outbound =
    PaginationLimitOffsetDefaultOffsetParamsResponse$Outbound;
}

export function paginationLimitOffsetDefaultOffsetParamsResponseToJSON(
  paginationLimitOffsetDefaultOffsetParamsResponse:
    PaginationLimitOffsetDefaultOffsetParamsResponse,
): string {
  return JSON.stringify(
    PaginationLimitOffsetDefaultOffsetParamsResponse$outboundSchema.parse(
      paginationLimitOffsetDefaultOffsetParamsResponse,
    ),
  );
}

export function paginationLimitOffsetDefaultOffsetParamsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PaginationLimitOffsetDefaultOffsetParamsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PaginationLimitOffsetDefaultOffsetParamsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PaginationLimitOffsetDefaultOffsetParamsResponse' from JSON`,
  );
}
