/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export const PaginationLimitOffsetOffsetParamsServerList = ["http://localhost:35456"] as const;

export type PaginationLimitOffsetOffsetParamsRequest = {
    limit?: number | undefined;
    offset?: number | undefined;
};

/**
 * OK
 */
export type PaginationLimitOffsetOffsetParamsRes = {
    next?: string | undefined;
    numPages: number;
    resultArray: Array<number>;
};

export type PaginationLimitOffsetOffsetParamsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: PaginationLimitOffsetOffsetParamsRes | undefined;
};

/** @internal */
export namespace PaginationLimitOffsetOffsetParamsRequest$ {
    export const inboundSchema: z.ZodType<
        PaginationLimitOffsetOffsetParamsRequest,
        z.ZodTypeDef,
        unknown
    > = z.object({
        limit: z.number().int().optional(),
        offset: z.number().int().optional(),
    });

    export type Outbound = {
        limit?: number | undefined;
        offset?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PaginationLimitOffsetOffsetParamsRequest
    > = z.object({
        limit: z.number().int().optional(),
        offset: z.number().int().optional(),
    });
}

/** @internal */
export namespace PaginationLimitOffsetOffsetParamsRes$ {
    export const inboundSchema: z.ZodType<
        PaginationLimitOffsetOffsetParamsRes,
        z.ZodTypeDef,
        unknown
    > = z.object({
        next: z.string().optional(),
        numPages: z.number().int(),
        resultArray: z.array(z.number().int()),
    });

    export type Outbound = {
        next?: string | undefined;
        numPages: number;
        resultArray: Array<number>;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PaginationLimitOffsetOffsetParamsRes
    > = z.object({
        next: z.string().optional(),
        numPages: z.number().int(),
        resultArray: z.array(z.number().int()),
    });
}

/** @internal */
export namespace PaginationLimitOffsetOffsetParamsResponse$ {
    export const inboundSchema: z.ZodType<
        PaginationLimitOffsetOffsetParamsResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => PaginationLimitOffsetOffsetParamsRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: PaginationLimitOffsetOffsetParamsRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PaginationLimitOffsetOffsetParamsResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => PaginationLimitOffsetOffsetParamsRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
