/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export const PaginationLimitOffsetPageBodyServerList = ["http://localhost:35456"] as const;

/**
 * OK
 */
export type PaginationLimitOffsetPageBodyRes = {
    next?: string | undefined;
    numPages: number;
    resultArray: Array<number>;
};

export type PaginationLimitOffsetPageBodyResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: PaginationLimitOffsetPageBodyRes | undefined;
};

/** @internal */
export namespace PaginationLimitOffsetPageBodyRes$ {
    export type Inbound = {
        next?: string | undefined;
        numPages: number;
        resultArray: Array<number>;
    };

    export const inboundSchema: z.ZodType<PaginationLimitOffsetPageBodyRes, z.ZodTypeDef, Inbound> =
        z
            .object({
                next: z.string().optional(),
                numPages: z.number().int(),
                resultArray: z.array(z.number().int()),
            })
            .transform((v) => {
                return {
                    ...(v.next === undefined ? null : { next: v.next }),
                    numPages: v.numPages,
                    resultArray: v.resultArray,
                };
            });

    export type Outbound = {
        next?: string | undefined;
        numPages: number;
        resultArray: Array<number>;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PaginationLimitOffsetPageBodyRes
    > = z
        .object({
            next: z.string().optional(),
            numPages: z.number().int(),
            resultArray: z.array(z.number().int()),
        })
        .transform((v) => {
            return {
                ...(v.next === undefined ? null : { next: v.next }),
                numPages: v.numPages,
                resultArray: v.resultArray,
            };
        });
}

/** @internal */
export namespace PaginationLimitOffsetPageBodyResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        res?: PaginationLimitOffsetPageBodyRes$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        PaginationLimitOffsetPageBodyResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => PaginationLimitOffsetPageBodyRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: PaginationLimitOffsetPageBodyRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PaginationLimitOffsetPageBodyResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => PaginationLimitOffsetPageBodyRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
