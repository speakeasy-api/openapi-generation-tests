/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export const PaginationURLParamsServerList = ["http://localhost:35456"] as const;

export type PaginationURLParamsRequest = {
    attempts: number;
    isReferencePath?: string | undefined;
};

/**
 * OK
 */
export type PaginationURLParamsRes = {
    next?: string | undefined;
    numPages: number;
    resultArray: Array<number>;
};

export type PaginationURLParamsResponse = {
    result: PaginationURLParamsRes;
};

/** @internal */
export namespace PaginationURLParamsRequest$ {
    export const inboundSchema: z.ZodType<PaginationURLParamsRequest, z.ZodTypeDef, unknown> = z
        .object({
            attempts: z.number().int(),
            "is-reference-path": z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                "is-reference-path": "isReferencePath",
            });
        });

    export type Outbound = {
        attempts: number;
        "is-reference-path"?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaginationURLParamsRequest> = z
        .object({
            attempts: z.number().int(),
            isReferencePath: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                isReferencePath: "is-reference-path",
            });
        });
}

/** @internal */
export namespace PaginationURLParamsRes$ {
    export const inboundSchema: z.ZodType<PaginationURLParamsRes, z.ZodTypeDef, unknown> = z.object(
        {
            next: z.string().optional(),
            numPages: z.number().int(),
            resultArray: z.array(z.number().int()),
        }
    );

    export type Outbound = {
        next?: string | undefined;
        numPages: number;
        resultArray: Array<number>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaginationURLParamsRes> =
        z.object({
            next: z.string().optional(),
            numPages: z.number().int(),
            resultArray: z.array(z.number().int()),
        });
}

/** @internal */
export namespace PaginationURLParamsResponse$ {
    export const inboundSchema: z.ZodType<PaginationURLParamsResponse, z.ZodTypeDef, unknown> = z
        .object({
            Result: z.lazy(() => PaginationURLParamsRes$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                Result: "result",
            });
        });

    export type Outbound = {
        Result: PaginationURLParamsRes$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaginationURLParamsResponse> = z
        .object({
            result: z.lazy(() => PaginationURLParamsRes$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                result: "Result",
            });
        });
}
