/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export const PaginationWithRetriesServerList = ["http://localhost:35456"] as const;

export type PaginationWithRetriesRequest = {
    /**
     * The page token used to request a specific page of the search results
     */
    cursor?: string | undefined;
    faultSettings?: string | undefined;
    requestId?: string | undefined;
};

/**
 * OK
 */
export type PaginationWithRetriesRes = {
    next?: string | undefined;
    numPages: number;
    resultArray: Array<string>;
};

export type PaginationWithRetriesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: PaginationWithRetriesRes | undefined;
};

/** @internal */
export namespace PaginationWithRetriesRequest$ {
    export const inboundSchema: z.ZodType<PaginationWithRetriesRequest, z.ZodTypeDef, unknown> = z
        .object({
            cursor: z.string().optional(),
            "fault-settings": z.string().default('{"error_code": 503, "error_count": 3}'),
            "request-id": z.string().default("paginationWithRetries"),
        })
        .transform((v) => {
            return remap$(v, {
                "fault-settings": "faultSettings",
                "request-id": "requestId",
            });
        });

    export type Outbound = {
        cursor?: string | undefined;
        "fault-settings": string;
        "request-id": string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaginationWithRetriesRequest> = z
        .object({
            cursor: z.string().optional(),
            faultSettings: z.string().default('{"error_code": 503, "error_count": 3}'),
            requestId: z.string().default("paginationWithRetries"),
        })
        .transform((v) => {
            return remap$(v, {
                faultSettings: "fault-settings",
                requestId: "request-id",
            });
        });
}

/** @internal */
export namespace PaginationWithRetriesRes$ {
    export const inboundSchema: z.ZodType<PaginationWithRetriesRes, z.ZodTypeDef, unknown> =
        z.object({
            next: z.string().optional(),
            numPages: z.number().int(),
            resultArray: z.array(z.string()),
        });

    export type Outbound = {
        next?: string | undefined;
        numPages: number;
        resultArray: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaginationWithRetriesRes> =
        z.object({
            next: z.string().optional(),
            numPages: z.number().int(),
            resultArray: z.array(z.string()),
        });
}

/** @internal */
export namespace PaginationWithRetriesResponse$ {
    export const inboundSchema: z.ZodType<PaginationWithRetriesResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => PaginationWithRetriesRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: PaginationWithRetriesRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaginationWithRetriesResponse> =
        z
            .object({
                contentType: z.string(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
                res: z.lazy(() => PaginationWithRetriesRes$.outboundSchema).optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    contentType: "ContentType",
                    statusCode: "StatusCode",
                    rawResponse: "RawResponse",
                });
            });
}
