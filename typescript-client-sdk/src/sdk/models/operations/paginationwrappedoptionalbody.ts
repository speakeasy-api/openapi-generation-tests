/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export const PaginationWrappedOptionalBodyServerList = [
  "http://localhost:35456",
] as const;

export type PaginationWrappedOptionalBodySecurity = {
  paginationAuth?: string | undefined;
};

export type PaginationWrappedOptionalBodyRequest = {
  idempotencyKey?: string | undefined;
  limitOffsetConfig?: shared.LimitOffsetConfig | undefined;
  requestId?: string | undefined;
};

/**
 * OK
 */
export type PaginationWrappedOptionalBodyRes = {
  next?: string | undefined;
  numPages: number;
  resultArray: Array<number>;
};

export type PaginationWrappedOptionalBodyResponse = {
  result: PaginationWrappedOptionalBodyRes;
};

/** @internal */
export const PaginationWrappedOptionalBodySecurity$inboundSchema: z.ZodType<
  PaginationWrappedOptionalBodySecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  paginationAuth: z.string().optional(),
});

/** @internal */
export type PaginationWrappedOptionalBodySecurity$Outbound = {
  paginationAuth?: string | undefined;
};

/** @internal */
export const PaginationWrappedOptionalBodySecurity$outboundSchema: z.ZodType<
  PaginationWrappedOptionalBodySecurity$Outbound,
  z.ZodTypeDef,
  PaginationWrappedOptionalBodySecurity
> = z.object({
  paginationAuth: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginationWrappedOptionalBodySecurity$ {
  /** @deprecated use `PaginationWrappedOptionalBodySecurity$inboundSchema` instead. */
  export const inboundSchema =
    PaginationWrappedOptionalBodySecurity$inboundSchema;
  /** @deprecated use `PaginationWrappedOptionalBodySecurity$outboundSchema` instead. */
  export const outboundSchema =
    PaginationWrappedOptionalBodySecurity$outboundSchema;
  /** @deprecated use `PaginationWrappedOptionalBodySecurity$Outbound` instead. */
  export type Outbound = PaginationWrappedOptionalBodySecurity$Outbound;
}

export function paginationWrappedOptionalBodySecurityToJSON(
  paginationWrappedOptionalBodySecurity: PaginationWrappedOptionalBodySecurity,
): string {
  return JSON.stringify(
    PaginationWrappedOptionalBodySecurity$outboundSchema.parse(
      paginationWrappedOptionalBodySecurity,
    ),
  );
}

export function paginationWrappedOptionalBodySecurityFromJSON(
  jsonString: string,
): SafeParseResult<PaginationWrappedOptionalBodySecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PaginationWrappedOptionalBodySecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginationWrappedOptionalBodySecurity' from JSON`,
  );
}

/** @internal */
export const PaginationWrappedOptionalBodyRequest$inboundSchema: z.ZodType<
  PaginationWrappedOptionalBodyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "idempotency-key": z.string().optional(),
  limitOffsetConfig: shared.LimitOffsetConfig$inboundSchema.optional(),
  "request-id": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "request-id": "requestId",
  });
});

/** @internal */
export type PaginationWrappedOptionalBodyRequest$Outbound = {
  "idempotency-key"?: string | undefined;
  limitOffsetConfig?: shared.LimitOffsetConfig$Outbound | undefined;
  "request-id"?: string | undefined;
};

/** @internal */
export const PaginationWrappedOptionalBodyRequest$outboundSchema: z.ZodType<
  PaginationWrappedOptionalBodyRequest$Outbound,
  z.ZodTypeDef,
  PaginationWrappedOptionalBodyRequest
> = z.object({
  idempotencyKey: z.string().optional(),
  limitOffsetConfig: shared.LimitOffsetConfig$outboundSchema.optional(),
  requestId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    requestId: "request-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginationWrappedOptionalBodyRequest$ {
  /** @deprecated use `PaginationWrappedOptionalBodyRequest$inboundSchema` instead. */
  export const inboundSchema =
    PaginationWrappedOptionalBodyRequest$inboundSchema;
  /** @deprecated use `PaginationWrappedOptionalBodyRequest$outboundSchema` instead. */
  export const outboundSchema =
    PaginationWrappedOptionalBodyRequest$outboundSchema;
  /** @deprecated use `PaginationWrappedOptionalBodyRequest$Outbound` instead. */
  export type Outbound = PaginationWrappedOptionalBodyRequest$Outbound;
}

export function paginationWrappedOptionalBodyRequestToJSON(
  paginationWrappedOptionalBodyRequest: PaginationWrappedOptionalBodyRequest,
): string {
  return JSON.stringify(
    PaginationWrappedOptionalBodyRequest$outboundSchema.parse(
      paginationWrappedOptionalBodyRequest,
    ),
  );
}

export function paginationWrappedOptionalBodyRequestFromJSON(
  jsonString: string,
): SafeParseResult<PaginationWrappedOptionalBodyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PaginationWrappedOptionalBodyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginationWrappedOptionalBodyRequest' from JSON`,
  );
}

/** @internal */
export const PaginationWrappedOptionalBodyRes$inboundSchema: z.ZodType<
  PaginationWrappedOptionalBodyRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  next: z.string().optional(),
  numPages: z.number().int(),
  resultArray: z.array(z.number().int()),
});

/** @internal */
export type PaginationWrappedOptionalBodyRes$Outbound = {
  next?: string | undefined;
  numPages: number;
  resultArray: Array<number>;
};

/** @internal */
export const PaginationWrappedOptionalBodyRes$outboundSchema: z.ZodType<
  PaginationWrappedOptionalBodyRes$Outbound,
  z.ZodTypeDef,
  PaginationWrappedOptionalBodyRes
> = z.object({
  next: z.string().optional(),
  numPages: z.number().int(),
  resultArray: z.array(z.number().int()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginationWrappedOptionalBodyRes$ {
  /** @deprecated use `PaginationWrappedOptionalBodyRes$inboundSchema` instead. */
  export const inboundSchema = PaginationWrappedOptionalBodyRes$inboundSchema;
  /** @deprecated use `PaginationWrappedOptionalBodyRes$outboundSchema` instead. */
  export const outboundSchema = PaginationWrappedOptionalBodyRes$outboundSchema;
  /** @deprecated use `PaginationWrappedOptionalBodyRes$Outbound` instead. */
  export type Outbound = PaginationWrappedOptionalBodyRes$Outbound;
}

export function paginationWrappedOptionalBodyResToJSON(
  paginationWrappedOptionalBodyRes: PaginationWrappedOptionalBodyRes,
): string {
  return JSON.stringify(
    PaginationWrappedOptionalBodyRes$outboundSchema.parse(
      paginationWrappedOptionalBodyRes,
    ),
  );
}

export function paginationWrappedOptionalBodyResFromJSON(
  jsonString: string,
): SafeParseResult<PaginationWrappedOptionalBodyRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaginationWrappedOptionalBodyRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginationWrappedOptionalBodyRes' from JSON`,
  );
}

/** @internal */
export const PaginationWrappedOptionalBodyResponse$inboundSchema: z.ZodType<
  PaginationWrappedOptionalBodyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => PaginationWrappedOptionalBodyRes$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type PaginationWrappedOptionalBodyResponse$Outbound = {
  Result: PaginationWrappedOptionalBodyRes$Outbound;
};

/** @internal */
export const PaginationWrappedOptionalBodyResponse$outboundSchema: z.ZodType<
  PaginationWrappedOptionalBodyResponse$Outbound,
  z.ZodTypeDef,
  PaginationWrappedOptionalBodyResponse
> = z.object({
  result: z.lazy(() => PaginationWrappedOptionalBodyRes$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginationWrappedOptionalBodyResponse$ {
  /** @deprecated use `PaginationWrappedOptionalBodyResponse$inboundSchema` instead. */
  export const inboundSchema =
    PaginationWrappedOptionalBodyResponse$inboundSchema;
  /** @deprecated use `PaginationWrappedOptionalBodyResponse$outboundSchema` instead. */
  export const outboundSchema =
    PaginationWrappedOptionalBodyResponse$outboundSchema;
  /** @deprecated use `PaginationWrappedOptionalBodyResponse$Outbound` instead. */
  export type Outbound = PaginationWrappedOptionalBodyResponse$Outbound;
}

export function paginationWrappedOptionalBodyResponseToJSON(
  paginationWrappedOptionalBodyResponse: PaginationWrappedOptionalBodyResponse,
): string {
  return JSON.stringify(
    PaginationWrappedOptionalBodyResponse$outboundSchema.parse(
      paginationWrappedOptionalBodyResponse,
    ),
  );
}

export function paginationWrappedOptionalBodyResponseFromJSON(
  jsonString: string,
): SafeParseResult<PaginationWrappedOptionalBodyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PaginationWrappedOptionalBodyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginationWrappedOptionalBodyResponse' from JSON`,
  );
}
