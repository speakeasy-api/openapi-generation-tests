/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared/index.js";
import * as z from "zod";

export type PathParameterJsonRequest = {
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    jsonObj: shared.SimpleObject;
};

/**
 * OK
 */
export type PathParameterJsonRes = {
    url: string;
};

/** @internal */
export namespace PathParameterJsonRequest$ {
    export const inboundSchema: z.ZodType<PathParameterJsonRequest, z.ZodTypeDef, unknown> =
        z.object({
            jsonObj: shared.SimpleObject$.inboundSchema,
        });

    export type Outbound = {
        jsonObj: shared.SimpleObject$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PathParameterJsonRequest> =
        z.object({
            jsonObj: shared.SimpleObject$.outboundSchema,
        });
}

/** @internal */
export namespace PathParameterJsonRes$ {
    export const inboundSchema: z.ZodType<PathParameterJsonRes, z.ZodTypeDef, unknown> = z.object({
        url: z.string(),
    });

    export type Outbound = {
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PathParameterJsonRes> = z.object(
        {
            url: z.string(),
        }
    );
}
