/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type PipeDelimitedQueryParamsArrayRequest = {
  arrParam?: Array<string> | undefined;
  arrParamExploded?: Array<number> | undefined;
  mapParam?: { [k: string]: string } | undefined;
  /**
   * A simple object that uses all our supported primitive types and enums and has optional properties.
   */
  objParam?: shared.SimpleObject | undefined;
};

export type PipeDelimitedQueryParamsArrayArgs = {
  arrParam: string;
  arrParamExploded: Array<string>;
};

/**
 * OK
 */
export type PipeDelimitedQueryParamsArrayRes = {
  args: PipeDelimitedQueryParamsArrayArgs;
  url: string;
};

/** @internal */
export const PipeDelimitedQueryParamsArrayRequest$inboundSchema: z.ZodType<
  PipeDelimitedQueryParamsArrayRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  arrParam: z.array(z.string()).optional(),
  arrParamExploded: z.array(z.number().int()).optional(),
  mapParam: z.record(z.string()).optional(),
  objParam: shared.SimpleObject$inboundSchema.optional(),
});

/** @internal */
export type PipeDelimitedQueryParamsArrayRequest$Outbound = {
  arrParam?: Array<string> | undefined;
  arrParamExploded?: Array<number> | undefined;
  mapParam?: { [k: string]: string } | undefined;
  objParam?: shared.SimpleObject$Outbound | undefined;
};

/** @internal */
export const PipeDelimitedQueryParamsArrayRequest$outboundSchema: z.ZodType<
  PipeDelimitedQueryParamsArrayRequest$Outbound,
  z.ZodTypeDef,
  PipeDelimitedQueryParamsArrayRequest
> = z.object({
  arrParam: z.array(z.string()).optional(),
  arrParamExploded: z.array(z.number().int()).optional(),
  mapParam: z.record(z.string()).optional(),
  objParam: shared.SimpleObject$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipeDelimitedQueryParamsArrayRequest$ {
  /** @deprecated use `PipeDelimitedQueryParamsArrayRequest$inboundSchema` instead. */
  export const inboundSchema =
    PipeDelimitedQueryParamsArrayRequest$inboundSchema;
  /** @deprecated use `PipeDelimitedQueryParamsArrayRequest$outboundSchema` instead. */
  export const outboundSchema =
    PipeDelimitedQueryParamsArrayRequest$outboundSchema;
  /** @deprecated use `PipeDelimitedQueryParamsArrayRequest$Outbound` instead. */
  export type Outbound = PipeDelimitedQueryParamsArrayRequest$Outbound;
}

export function pipeDelimitedQueryParamsArrayRequestToJSON(
  pipeDelimitedQueryParamsArrayRequest: PipeDelimitedQueryParamsArrayRequest,
): string {
  return JSON.stringify(
    PipeDelimitedQueryParamsArrayRequest$outboundSchema.parse(
      pipeDelimitedQueryParamsArrayRequest,
    ),
  );
}

export function pipeDelimitedQueryParamsArrayRequestFromJSON(
  jsonString: string,
): SafeParseResult<PipeDelimitedQueryParamsArrayRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PipeDelimitedQueryParamsArrayRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipeDelimitedQueryParamsArrayRequest' from JSON`,
  );
}

/** @internal */
export const PipeDelimitedQueryParamsArrayArgs$inboundSchema: z.ZodType<
  PipeDelimitedQueryParamsArrayArgs,
  z.ZodTypeDef,
  unknown
> = z.object({
  arrParam: z.string(),
  arrParamExploded: z.array(z.string()),
});

/** @internal */
export type PipeDelimitedQueryParamsArrayArgs$Outbound = {
  arrParam: string;
  arrParamExploded: Array<string>;
};

/** @internal */
export const PipeDelimitedQueryParamsArrayArgs$outboundSchema: z.ZodType<
  PipeDelimitedQueryParamsArrayArgs$Outbound,
  z.ZodTypeDef,
  PipeDelimitedQueryParamsArrayArgs
> = z.object({
  arrParam: z.string(),
  arrParamExploded: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipeDelimitedQueryParamsArrayArgs$ {
  /** @deprecated use `PipeDelimitedQueryParamsArrayArgs$inboundSchema` instead. */
  export const inboundSchema = PipeDelimitedQueryParamsArrayArgs$inboundSchema;
  /** @deprecated use `PipeDelimitedQueryParamsArrayArgs$outboundSchema` instead. */
  export const outboundSchema =
    PipeDelimitedQueryParamsArrayArgs$outboundSchema;
  /** @deprecated use `PipeDelimitedQueryParamsArrayArgs$Outbound` instead. */
  export type Outbound = PipeDelimitedQueryParamsArrayArgs$Outbound;
}

export function pipeDelimitedQueryParamsArrayArgsToJSON(
  pipeDelimitedQueryParamsArrayArgs: PipeDelimitedQueryParamsArrayArgs,
): string {
  return JSON.stringify(
    PipeDelimitedQueryParamsArrayArgs$outboundSchema.parse(
      pipeDelimitedQueryParamsArrayArgs,
    ),
  );
}

export function pipeDelimitedQueryParamsArrayArgsFromJSON(
  jsonString: string,
): SafeParseResult<PipeDelimitedQueryParamsArrayArgs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipeDelimitedQueryParamsArrayArgs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipeDelimitedQueryParamsArrayArgs' from JSON`,
  );
}

/** @internal */
export const PipeDelimitedQueryParamsArrayRes$inboundSchema: z.ZodType<
  PipeDelimitedQueryParamsArrayRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  args: z.lazy(() => PipeDelimitedQueryParamsArrayArgs$inboundSchema),
  url: z.string(),
});

/** @internal */
export type PipeDelimitedQueryParamsArrayRes$Outbound = {
  args: PipeDelimitedQueryParamsArrayArgs$Outbound;
  url: string;
};

/** @internal */
export const PipeDelimitedQueryParamsArrayRes$outboundSchema: z.ZodType<
  PipeDelimitedQueryParamsArrayRes$Outbound,
  z.ZodTypeDef,
  PipeDelimitedQueryParamsArrayRes
> = z.object({
  args: z.lazy(() => PipeDelimitedQueryParamsArrayArgs$outboundSchema),
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PipeDelimitedQueryParamsArrayRes$ {
  /** @deprecated use `PipeDelimitedQueryParamsArrayRes$inboundSchema` instead. */
  export const inboundSchema = PipeDelimitedQueryParamsArrayRes$inboundSchema;
  /** @deprecated use `PipeDelimitedQueryParamsArrayRes$outboundSchema` instead. */
  export const outboundSchema = PipeDelimitedQueryParamsArrayRes$outboundSchema;
  /** @deprecated use `PipeDelimitedQueryParamsArrayRes$Outbound` instead. */
  export type Outbound = PipeDelimitedQueryParamsArrayRes$Outbound;
}

export function pipeDelimitedQueryParamsArrayResToJSON(
  pipeDelimitedQueryParamsArrayRes: PipeDelimitedQueryParamsArrayRes,
): string {
  return JSON.stringify(
    PipeDelimitedQueryParamsArrayRes$outboundSchema.parse(
      pipeDelimitedQueryParamsArrayRes,
    ),
  );
}

export function pipeDelimitedQueryParamsArrayResFromJSON(
  jsonString: string,
): SafeParseResult<PipeDelimitedQueryParamsArrayRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PipeDelimitedQueryParamsArrayRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PipeDelimitedQueryParamsArrayRes' from JSON`,
  );
}
