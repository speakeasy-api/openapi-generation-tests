/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import * as z from "zod";

export type PipeDelimitedQueryParamsArrayRequest = {
    arrParam?: Array<string> | undefined;
    arrParamExploded?: Array<number> | undefined;
    mapParam?: Record<string, string> | undefined;
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    objParam?: shared.SimpleObject | undefined;
};

export type PipeDelimitedQueryParamsArrayArgs = {
    arrParam: string;
    arrParamExploded: Array<string>;
};

/**
 * OK
 */
export type PipeDelimitedQueryParamsArrayRes = {
    args: PipeDelimitedQueryParamsArrayArgs;
    url: string;
};

export type PipeDelimitedQueryParamsArrayResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: PipeDelimitedQueryParamsArrayRes | undefined;
};

/** @internal */
export namespace PipeDelimitedQueryParamsArrayRequest$ {
    export type Inbound = {
        arrParam?: Array<string> | undefined;
        arrParamExploded?: Array<number> | undefined;
        mapParam?: Record<string, string> | undefined;
        objParam?: shared.SimpleObject$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        PipeDelimitedQueryParamsArrayRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            arrParam: z.array(z.string()).optional(),
            arrParamExploded: z.array(z.number().int()).optional(),
            mapParam: z.record(z.string()).optional(),
            objParam: shared.SimpleObject$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.arrParam === undefined ? null : { arrParam: v.arrParam }),
                ...(v.arrParamExploded === undefined
                    ? null
                    : { arrParamExploded: v.arrParamExploded }),
                ...(v.mapParam === undefined ? null : { mapParam: v.mapParam }),
                ...(v.objParam === undefined ? null : { objParam: v.objParam }),
            };
        });

    export type Outbound = {
        arrParam?: Array<string> | undefined;
        arrParamExploded?: Array<number> | undefined;
        mapParam?: Record<string, string> | undefined;
        objParam?: shared.SimpleObject$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PipeDelimitedQueryParamsArrayRequest
    > = z
        .object({
            arrParam: z.array(z.string()).optional(),
            arrParamExploded: z.array(z.number().int()).optional(),
            mapParam: z.record(z.string()).optional(),
            objParam: shared.SimpleObject$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.arrParam === undefined ? null : { arrParam: v.arrParam }),
                ...(v.arrParamExploded === undefined
                    ? null
                    : { arrParamExploded: v.arrParamExploded }),
                ...(v.mapParam === undefined ? null : { mapParam: v.mapParam }),
                ...(v.objParam === undefined ? null : { objParam: v.objParam }),
            };
        });
}

/** @internal */
export namespace PipeDelimitedQueryParamsArrayArgs$ {
    export type Inbound = {
        arrParam: string;
        arrParamExploded: Array<string>;
    };

    export const inboundSchema: z.ZodType<
        PipeDelimitedQueryParamsArrayArgs,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            arrParam: z.string(),
            arrParamExploded: z.array(z.string()),
        })
        .transform((v) => {
            return {
                arrParam: v.arrParam,
                arrParamExploded: v.arrParamExploded,
            };
        });

    export type Outbound = {
        arrParam: string;
        arrParamExploded: Array<string>;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PipeDelimitedQueryParamsArrayArgs
    > = z
        .object({
            arrParam: z.string(),
            arrParamExploded: z.array(z.string()),
        })
        .transform((v) => {
            return {
                arrParam: v.arrParam,
                arrParamExploded: v.arrParamExploded,
            };
        });
}

/** @internal */
export namespace PipeDelimitedQueryParamsArrayRes$ {
    export type Inbound = {
        args: PipeDelimitedQueryParamsArrayArgs$.Inbound;
        url: string;
    };

    export const inboundSchema: z.ZodType<PipeDelimitedQueryParamsArrayRes, z.ZodTypeDef, Inbound> =
        z
            .object({
                args: z.lazy(() => PipeDelimitedQueryParamsArrayArgs$.inboundSchema),
                url: z.string(),
            })
            .transform((v) => {
                return {
                    args: v.args,
                    url: v.url,
                };
            });

    export type Outbound = {
        args: PipeDelimitedQueryParamsArrayArgs$.Outbound;
        url: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PipeDelimitedQueryParamsArrayRes
    > = z
        .object({
            args: z.lazy(() => PipeDelimitedQueryParamsArrayArgs$.outboundSchema),
            url: z.string(),
        })
        .transform((v) => {
            return {
                args: v.args,
                url: v.url,
            };
        });
}

/** @internal */
export namespace PipeDelimitedQueryParamsArrayResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        res?: PipeDelimitedQueryParamsArrayRes$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        PipeDelimitedQueryParamsArrayResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => PipeDelimitedQueryParamsArrayRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: PipeDelimitedQueryParamsArrayRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PipeDelimitedQueryParamsArrayResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => PipeDelimitedQueryParamsArrayRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
