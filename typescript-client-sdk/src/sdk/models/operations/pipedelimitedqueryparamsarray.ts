/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as shared from "../shared";
import * as z from "zod";

export type PipeDelimitedQueryParamsArrayRequest = {
    arrParam?: Array<string> | undefined;
    arrParamExploded?: Array<number> | undefined;
    mapParam?: { [k: string]: string } | undefined;
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    objParam?: shared.SimpleObject | undefined;
};

export type PipeDelimitedQueryParamsArrayArgs = {
    arrParam: string;
    arrParamExploded: Array<string>;
};

/**
 * OK
 */
export type PipeDelimitedQueryParamsArrayRes = {
    args: PipeDelimitedQueryParamsArrayArgs;
    url: string;
};

export type PipeDelimitedQueryParamsArrayResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: PipeDelimitedQueryParamsArrayRes | undefined;
};

/** @internal */
export namespace PipeDelimitedQueryParamsArrayRequest$ {
    export const inboundSchema: z.ZodType<
        PipeDelimitedQueryParamsArrayRequest,
        z.ZodTypeDef,
        unknown
    > = z.object({
        arrParam: z.array(z.string()).optional(),
        arrParamExploded: z.array(z.number().int()).optional(),
        mapParam: z.record(z.string()).optional(),
        objParam: shared.SimpleObject$.inboundSchema.optional(),
    });

    export type Outbound = {
        arrParam?: Array<string> | undefined;
        arrParamExploded?: Array<number> | undefined;
        mapParam?: { [k: string]: string } | undefined;
        objParam?: shared.SimpleObject$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PipeDelimitedQueryParamsArrayRequest
    > = z.object({
        arrParam: z.array(z.string()).optional(),
        arrParamExploded: z.array(z.number().int()).optional(),
        mapParam: z.record(z.string()).optional(),
        objParam: shared.SimpleObject$.outboundSchema.optional(),
    });
}

/** @internal */
export namespace PipeDelimitedQueryParamsArrayArgs$ {
    export const inboundSchema: z.ZodType<
        PipeDelimitedQueryParamsArrayArgs,
        z.ZodTypeDef,
        unknown
    > = z.object({
        arrParam: z.string(),
        arrParamExploded: z.array(z.string()),
    });

    export type Outbound = {
        arrParam: string;
        arrParamExploded: Array<string>;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PipeDelimitedQueryParamsArrayArgs
    > = z.object({
        arrParam: z.string(),
        arrParamExploded: z.array(z.string()),
    });
}

/** @internal */
export namespace PipeDelimitedQueryParamsArrayRes$ {
    export const inboundSchema: z.ZodType<PipeDelimitedQueryParamsArrayRes, z.ZodTypeDef, unknown> =
        z.object({
            args: z.lazy(() => PipeDelimitedQueryParamsArrayArgs$.inboundSchema),
            url: z.string(),
        });

    export type Outbound = {
        args: PipeDelimitedQueryParamsArrayArgs$.Outbound;
        url: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PipeDelimitedQueryParamsArrayRes
    > = z.object({
        args: z.lazy(() => PipeDelimitedQueryParamsArrayArgs$.outboundSchema),
        url: z.string(),
    });
}

/** @internal */
export namespace PipeDelimitedQueryParamsArrayResponse$ {
    export const inboundSchema: z.ZodType<
        PipeDelimitedQueryParamsArrayResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => PipeDelimitedQueryParamsArrayRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: PipeDelimitedQueryParamsArrayRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PipeDelimitedQueryParamsArrayResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => PipeDelimitedQueryParamsArrayRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
