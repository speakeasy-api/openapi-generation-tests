/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type PrimitiveTypeOneOfPostRequestBody = string | number | number | boolean;

export type PrimitiveTypeOneOfPostJson = string | number | number | boolean;

/**
 * OK
 */
export type PrimitiveTypeOneOfPostRes = {
    json: string | number | number | boolean;
};

export type PrimitiveTypeOneOfPostResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: PrimitiveTypeOneOfPostRes | undefined;
};

/** @internal */
export namespace PrimitiveTypeOneOfPostRequestBody$ {
    export type Inbound = string | number | number | boolean;

    export type Outbound = string | number | number | boolean;

    export const inboundSchema: z.ZodType<
        PrimitiveTypeOneOfPostRequestBody,
        z.ZodTypeDef,
        Inbound
    > = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PrimitiveTypeOneOfPostRequestBody
    > = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
}

/** @internal */
export namespace PrimitiveTypeOneOfPostJson$ {
    export type Inbound = string | number | number | boolean;

    export type Outbound = string | number | number | boolean;

    export const inboundSchema: z.ZodType<PrimitiveTypeOneOfPostJson, z.ZodTypeDef, Inbound> =
        z.union([z.string(), z.number().int(), z.number(), z.boolean()]);

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PrimitiveTypeOneOfPostJson> =
        z.union([z.string(), z.number().int(), z.number(), z.boolean()]);
}

/** @internal */
export namespace PrimitiveTypeOneOfPostRes$ {
    export type Inbound = {
        json: string | number | number | boolean;
    };

    export const inboundSchema: z.ZodType<PrimitiveTypeOneOfPostRes, z.ZodTypeDef, Inbound> = z
        .object({
            json: z.union([z.string(), z.number().int(), z.number(), z.boolean()]),
        })
        .transform((v) => {
            return {
                json: v.json,
            };
        });

    export type Outbound = {
        json: string | number | number | boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PrimitiveTypeOneOfPostRes> = z
        .object({
            json: z.union([z.string(), z.number().int(), z.number(), z.boolean()]),
        })
        .transform((v) => {
            return {
                json: v.json,
            };
        });
}

/** @internal */
export namespace PrimitiveTypeOneOfPostResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        res?: PrimitiveTypeOneOfPostRes$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PrimitiveTypeOneOfPostResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => PrimitiveTypeOneOfPostRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: PrimitiveTypeOneOfPostRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PrimitiveTypeOneOfPostResponse> =
        z
            .object({
                contentType: z.string(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
                res: z.lazy(() => PrimitiveTypeOneOfPostRes$.outboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    ContentType: v.contentType,
                    StatusCode: v.statusCode,
                    RawResponse: v.rawResponse,
                    ...(v.res === undefined ? null : { res: v.res }),
                };
            });
}
