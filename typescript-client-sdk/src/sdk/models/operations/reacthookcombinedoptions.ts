/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ReactHookCombinedOptionsRequest = {
  page: number;
};

export type ReactHookCombinedOptionsResponse = {
  result: { [k: string]: any };
};

/** @internal */
export const ReactHookCombinedOptionsRequest$inboundSchema: z.ZodType<
  ReactHookCombinedOptionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().int(),
});

/** @internal */
export type ReactHookCombinedOptionsRequest$Outbound = {
  page: number;
};

/** @internal */
export const ReactHookCombinedOptionsRequest$outboundSchema: z.ZodType<
  ReactHookCombinedOptionsRequest$Outbound,
  z.ZodTypeDef,
  ReactHookCombinedOptionsRequest
> = z.object({
  page: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReactHookCombinedOptionsRequest$ {
  /** @deprecated use `ReactHookCombinedOptionsRequest$inboundSchema` instead. */
  export const inboundSchema = ReactHookCombinedOptionsRequest$inboundSchema;
  /** @deprecated use `ReactHookCombinedOptionsRequest$outboundSchema` instead. */
  export const outboundSchema = ReactHookCombinedOptionsRequest$outboundSchema;
  /** @deprecated use `ReactHookCombinedOptionsRequest$Outbound` instead. */
  export type Outbound = ReactHookCombinedOptionsRequest$Outbound;
}

export function reactHookCombinedOptionsRequestToJSON(
  reactHookCombinedOptionsRequest: ReactHookCombinedOptionsRequest,
): string {
  return JSON.stringify(
    ReactHookCombinedOptionsRequest$outboundSchema.parse(
      reactHookCombinedOptionsRequest,
    ),
  );
}

export function reactHookCombinedOptionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ReactHookCombinedOptionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReactHookCombinedOptionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReactHookCombinedOptionsRequest' from JSON`,
  );
}

/** @internal */
export const ReactHookCombinedOptionsResponse$inboundSchema: z.ZodType<
  ReactHookCombinedOptionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ReactHookCombinedOptionsResponse$Outbound = {
  Result: { [k: string]: any };
};

/** @internal */
export const ReactHookCombinedOptionsResponse$outboundSchema: z.ZodType<
  ReactHookCombinedOptionsResponse$Outbound,
  z.ZodTypeDef,
  ReactHookCombinedOptionsResponse
> = z.object({
  result: z.record(z.any()),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReactHookCombinedOptionsResponse$ {
  /** @deprecated use `ReactHookCombinedOptionsResponse$inboundSchema` instead. */
  export const inboundSchema = ReactHookCombinedOptionsResponse$inboundSchema;
  /** @deprecated use `ReactHookCombinedOptionsResponse$outboundSchema` instead. */
  export const outboundSchema = ReactHookCombinedOptionsResponse$outboundSchema;
  /** @deprecated use `ReactHookCombinedOptionsResponse$Outbound` instead. */
  export type Outbound = ReactHookCombinedOptionsResponse$Outbound;
}

export function reactHookCombinedOptionsResponseToJSON(
  reactHookCombinedOptionsResponse: ReactHookCombinedOptionsResponse,
): string {
  return JSON.stringify(
    ReactHookCombinedOptionsResponse$outboundSchema.parse(
      reactHookCombinedOptionsResponse,
    ),
  );
}

export function reactHookCombinedOptionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ReactHookCombinedOptionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReactHookCombinedOptionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReactHookCombinedOptionsResponse' from JSON`,
  );
}
