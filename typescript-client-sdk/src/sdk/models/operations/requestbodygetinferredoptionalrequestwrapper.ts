/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const RequestBodyGetInferredOptionalRequestWrapperServerList = [
  "http://localhost:35123",
] as const;

export type RequestBodyGetInferredOptionalRequestWrapperRequest = {
  keyword?: string | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
};

export type RequestBodyGetInferredOptionalRequestWrapperArgs = {
  keyword?: string | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
};

/**
 * OK
 */
export type RequestBodyGetInferredOptionalRequestWrapperResponseBody = {
  args: RequestBodyGetInferredOptionalRequestWrapperArgs;
};

/** @internal */
export const RequestBodyGetInferredOptionalRequestWrapperRequest$inboundSchema:
  z.ZodType<
    RequestBodyGetInferredOptionalRequestWrapperRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    keyword: z.string().optional(),
    limit: z.number().int().optional(),
    offset: z.number().int().optional(),
  });

/** @internal */
export type RequestBodyGetInferredOptionalRequestWrapperRequest$Outbound = {
  keyword?: string | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
};

/** @internal */
export const RequestBodyGetInferredOptionalRequestWrapperRequest$outboundSchema:
  z.ZodType<
    RequestBodyGetInferredOptionalRequestWrapperRequest$Outbound,
    z.ZodTypeDef,
    RequestBodyGetInferredOptionalRequestWrapperRequest
  > = z.object({
    keyword: z.string().optional(),
    limit: z.number().int().optional(),
    offset: z.number().int().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyGetInferredOptionalRequestWrapperRequest$ {
  /** @deprecated use `RequestBodyGetInferredOptionalRequestWrapperRequest$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyGetInferredOptionalRequestWrapperRequest$inboundSchema;
  /** @deprecated use `RequestBodyGetInferredOptionalRequestWrapperRequest$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyGetInferredOptionalRequestWrapperRequest$outboundSchema;
  /** @deprecated use `RequestBodyGetInferredOptionalRequestWrapperRequest$Outbound` instead. */
  export type Outbound =
    RequestBodyGetInferredOptionalRequestWrapperRequest$Outbound;
}

export function requestBodyGetInferredOptionalRequestWrapperRequestToJSON(
  requestBodyGetInferredOptionalRequestWrapperRequest:
    RequestBodyGetInferredOptionalRequestWrapperRequest,
): string {
  return JSON.stringify(
    RequestBodyGetInferredOptionalRequestWrapperRequest$outboundSchema.parse(
      requestBodyGetInferredOptionalRequestWrapperRequest,
    ),
  );
}

export function requestBodyGetInferredOptionalRequestWrapperRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestBodyGetInferredOptionalRequestWrapperRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyGetInferredOptionalRequestWrapperRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RequestBodyGetInferredOptionalRequestWrapperRequest' from JSON`,
  );
}

/** @internal */
export const RequestBodyGetInferredOptionalRequestWrapperArgs$inboundSchema:
  z.ZodType<
    RequestBodyGetInferredOptionalRequestWrapperArgs,
    z.ZodTypeDef,
    unknown
  > = z.object({
    keyword: z.string().optional(),
    limit: z.number().int().optional(),
    offset: z.number().int().optional(),
  });

/** @internal */
export type RequestBodyGetInferredOptionalRequestWrapperArgs$Outbound = {
  keyword?: string | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
};

/** @internal */
export const RequestBodyGetInferredOptionalRequestWrapperArgs$outboundSchema:
  z.ZodType<
    RequestBodyGetInferredOptionalRequestWrapperArgs$Outbound,
    z.ZodTypeDef,
    RequestBodyGetInferredOptionalRequestWrapperArgs
  > = z.object({
    keyword: z.string().optional(),
    limit: z.number().int().optional(),
    offset: z.number().int().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyGetInferredOptionalRequestWrapperArgs$ {
  /** @deprecated use `RequestBodyGetInferredOptionalRequestWrapperArgs$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyGetInferredOptionalRequestWrapperArgs$inboundSchema;
  /** @deprecated use `RequestBodyGetInferredOptionalRequestWrapperArgs$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyGetInferredOptionalRequestWrapperArgs$outboundSchema;
  /** @deprecated use `RequestBodyGetInferredOptionalRequestWrapperArgs$Outbound` instead. */
  export type Outbound =
    RequestBodyGetInferredOptionalRequestWrapperArgs$Outbound;
}

export function requestBodyGetInferredOptionalRequestWrapperArgsToJSON(
  requestBodyGetInferredOptionalRequestWrapperArgs:
    RequestBodyGetInferredOptionalRequestWrapperArgs,
): string {
  return JSON.stringify(
    RequestBodyGetInferredOptionalRequestWrapperArgs$outboundSchema.parse(
      requestBodyGetInferredOptionalRequestWrapperArgs,
    ),
  );
}

export function requestBodyGetInferredOptionalRequestWrapperArgsFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestBodyGetInferredOptionalRequestWrapperArgs,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyGetInferredOptionalRequestWrapperArgs$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RequestBodyGetInferredOptionalRequestWrapperArgs' from JSON`,
  );
}

/** @internal */
export const RequestBodyGetInferredOptionalRequestWrapperResponseBody$inboundSchema:
  z.ZodType<
    RequestBodyGetInferredOptionalRequestWrapperResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    args: z.lazy(() =>
      RequestBodyGetInferredOptionalRequestWrapperArgs$inboundSchema
    ),
  });

/** @internal */
export type RequestBodyGetInferredOptionalRequestWrapperResponseBody$Outbound =
  {
    args: RequestBodyGetInferredOptionalRequestWrapperArgs$Outbound;
  };

/** @internal */
export const RequestBodyGetInferredOptionalRequestWrapperResponseBody$outboundSchema:
  z.ZodType<
    RequestBodyGetInferredOptionalRequestWrapperResponseBody$Outbound,
    z.ZodTypeDef,
    RequestBodyGetInferredOptionalRequestWrapperResponseBody
  > = z.object({
    args: z.lazy(() =>
      RequestBodyGetInferredOptionalRequestWrapperArgs$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyGetInferredOptionalRequestWrapperResponseBody$ {
  /** @deprecated use `RequestBodyGetInferredOptionalRequestWrapperResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyGetInferredOptionalRequestWrapperResponseBody$inboundSchema;
  /** @deprecated use `RequestBodyGetInferredOptionalRequestWrapperResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyGetInferredOptionalRequestWrapperResponseBody$outboundSchema;
  /** @deprecated use `RequestBodyGetInferredOptionalRequestWrapperResponseBody$Outbound` instead. */
  export type Outbound =
    RequestBodyGetInferredOptionalRequestWrapperResponseBody$Outbound;
}

export function requestBodyGetInferredOptionalRequestWrapperResponseBodyToJSON(
  requestBodyGetInferredOptionalRequestWrapperResponseBody:
    RequestBodyGetInferredOptionalRequestWrapperResponseBody,
): string {
  return JSON.stringify(
    RequestBodyGetInferredOptionalRequestWrapperResponseBody$outboundSchema
      .parse(requestBodyGetInferredOptionalRequestWrapperResponseBody),
  );
}

export function requestBodyGetInferredOptionalRequestWrapperResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestBodyGetInferredOptionalRequestWrapperResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyGetInferredOptionalRequestWrapperResponseBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RequestBodyGetInferredOptionalRequestWrapperResponseBody' from JSON`,
  );
}
