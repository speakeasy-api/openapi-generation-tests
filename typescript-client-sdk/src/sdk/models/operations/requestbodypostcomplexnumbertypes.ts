/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type RequestBodyPostComplexNumberTypesRequest = {
  complexNumberTypes: shared.ComplexNumberTypes;
  pathBigInt: bigint;
  pathBigIntStr: bigint;
  pathDecimal: Decimal$ | number;
  pathDecimalStr: Decimal$ | number;
  queryBigInt: bigint;
  queryBigIntStr: bigint;
  queryDecimal: Decimal$ | number;
  queryDecimalStr: Decimal$ | number;
};

/**
 * OK
 */
export type RequestBodyPostComplexNumberTypesResponseBody = {
  json: shared.ComplexNumberTypes;
  url: string;
};

/** @internal */
export const RequestBodyPostComplexNumberTypesRequest$inboundSchema: z.ZodType<
  RequestBodyPostComplexNumberTypesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  complexNumberTypes: shared.ComplexNumberTypes$inboundSchema,
  pathBigInt: z.number().transform(v => BigInt(v)),
  pathBigIntStr: z.string().transform(v => BigInt(v)),
  pathDecimal: z.number().transform(v => new Decimal$(v)),
  pathDecimalStr: z.string().transform(v => new Decimal$(v)),
  queryBigInt: z.number().transform(v => BigInt(v)),
  queryBigIntStr: z.string().transform(v => BigInt(v)),
  queryDecimal: z.number().transform(v => new Decimal$(v)),
  queryDecimalStr: z.string().transform(v => new Decimal$(v)),
});

/** @internal */
export type RequestBodyPostComplexNumberTypesRequest$Outbound = {
  complexNumberTypes: shared.ComplexNumberTypes$Outbound;
  pathBigInt: number;
  pathBigIntStr: string;
  pathDecimal: number;
  pathDecimalStr: string;
  queryBigInt: number;
  queryBigIntStr: string;
  queryDecimal: number;
  queryDecimalStr: string;
};

/** @internal */
export const RequestBodyPostComplexNumberTypesRequest$outboundSchema: z.ZodType<
  RequestBodyPostComplexNumberTypesRequest$Outbound,
  z.ZodTypeDef,
  RequestBodyPostComplexNumberTypesRequest
> = z.object({
  complexNumberTypes: shared.ComplexNumberTypes$outboundSchema,
  pathBigInt: z.bigint().transform(v => Number(v)),
  pathBigIntStr: z.bigint().transform(v => `${v}`),
  pathDecimal: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ),
  pathDecimalStr: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    `${v}`
  ),
  queryBigInt: z.bigint().transform(v => Number(v)),
  queryBigIntStr: z.bigint().transform(v => `${v}`),
  queryDecimal: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ),
  queryDecimalStr: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    `${v}`
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostComplexNumberTypesRequest$ {
  /** @deprecated use `RequestBodyPostComplexNumberTypesRequest$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPostComplexNumberTypesRequest$inboundSchema;
  /** @deprecated use `RequestBodyPostComplexNumberTypesRequest$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPostComplexNumberTypesRequest$outboundSchema;
  /** @deprecated use `RequestBodyPostComplexNumberTypesRequest$Outbound` instead. */
  export type Outbound = RequestBodyPostComplexNumberTypesRequest$Outbound;
}

export function requestBodyPostComplexNumberTypesRequestToJSON(
  requestBodyPostComplexNumberTypesRequest:
    RequestBodyPostComplexNumberTypesRequest,
): string {
  return JSON.stringify(
    RequestBodyPostComplexNumberTypesRequest$outboundSchema.parse(
      requestBodyPostComplexNumberTypesRequest,
    ),
  );
}

export function requestBodyPostComplexNumberTypesRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestBodyPostComplexNumberTypesRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyPostComplexNumberTypesRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RequestBodyPostComplexNumberTypesRequest' from JSON`,
  );
}

/** @internal */
export const RequestBodyPostComplexNumberTypesResponseBody$inboundSchema:
  z.ZodType<
    RequestBodyPostComplexNumberTypesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    json: shared.ComplexNumberTypes$inboundSchema,
    url: z.string(),
  });

/** @internal */
export type RequestBodyPostComplexNumberTypesResponseBody$Outbound = {
  json: shared.ComplexNumberTypes$Outbound;
  url: string;
};

/** @internal */
export const RequestBodyPostComplexNumberTypesResponseBody$outboundSchema:
  z.ZodType<
    RequestBodyPostComplexNumberTypesResponseBody$Outbound,
    z.ZodTypeDef,
    RequestBodyPostComplexNumberTypesResponseBody
  > = z.object({
    json: shared.ComplexNumberTypes$outboundSchema,
    url: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostComplexNumberTypesResponseBody$ {
  /** @deprecated use `RequestBodyPostComplexNumberTypesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPostComplexNumberTypesResponseBody$inboundSchema;
  /** @deprecated use `RequestBodyPostComplexNumberTypesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPostComplexNumberTypesResponseBody$outboundSchema;
  /** @deprecated use `RequestBodyPostComplexNumberTypesResponseBody$Outbound` instead. */
  export type Outbound = RequestBodyPostComplexNumberTypesResponseBody$Outbound;
}

export function requestBodyPostComplexNumberTypesResponseBodyToJSON(
  requestBodyPostComplexNumberTypesResponseBody:
    RequestBodyPostComplexNumberTypesResponseBody,
): string {
  return JSON.stringify(
    RequestBodyPostComplexNumberTypesResponseBody$outboundSchema.parse(
      requestBodyPostComplexNumberTypesResponseBody,
    ),
  );
}

export function requestBodyPostComplexNumberTypesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestBodyPostComplexNumberTypesResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyPostComplexNumberTypesResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RequestBodyPostComplexNumberTypesResponseBody' from JSON`,
  );
}
