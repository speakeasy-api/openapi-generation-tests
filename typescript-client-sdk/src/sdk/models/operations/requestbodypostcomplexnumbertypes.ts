/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { Decimal as Decimal$ } from "../../../sdk/types";
import * as z from "zod";

export type RequestBodyPostComplexNumberTypesRequest = {
    complexNumberTypes: shared.ComplexNumberTypes;
    pathBigInt: bigint;
    pathBigIntStr: bigint;
    pathDecimal: Decimal$ | number;
    pathDecimalStr: Decimal$ | number;
    queryBigInt: bigint;
    queryBigIntStr: bigint;
    queryDecimal: Decimal$ | number;
    queryDecimalStr: Decimal$ | number;
};

/**
 * OK
 */
export type RequestBodyPostComplexNumberTypesResponseBody = {
    json: shared.ComplexNumberTypes;
    url: string;
};

export type RequestBodyPostComplexNumberTypesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    object?: RequestBodyPostComplexNumberTypesResponseBody | undefined;
};

/** @internal */
export namespace RequestBodyPostComplexNumberTypesRequest$ {
    export type Inbound = {
        complexNumberTypes: shared.ComplexNumberTypes$.Inbound;
        pathBigInt: number;
        pathBigIntStr: string;
        pathDecimal: number;
        pathDecimalStr: string;
        queryBigInt: number;
        queryBigIntStr: string;
        queryDecimal: number;
        queryDecimalStr: string;
    };

    export const inboundSchema: z.ZodType<
        RequestBodyPostComplexNumberTypesRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            complexNumberTypes: shared.ComplexNumberTypes$.inboundSchema,
            pathBigInt: z.number().transform((v) => BigInt(v)),
            pathBigIntStr: z.string().transform((v) => BigInt(v)),
            pathDecimal: z.number().transform((v) => new Decimal$(v)),
            pathDecimalStr: z.string().transform((v) => new Decimal$(v)),
            queryBigInt: z.number().transform((v) => BigInt(v)),
            queryBigIntStr: z.string().transform((v) => BigInt(v)),
            queryDecimal: z.number().transform((v) => new Decimal$(v)),
            queryDecimalStr: z.string().transform((v) => new Decimal$(v)),
        })
        .transform((v) => {
            return {
                complexNumberTypes: v.complexNumberTypes,
                pathBigInt: v.pathBigInt,
                pathBigIntStr: v.pathBigIntStr,
                pathDecimal: v.pathDecimal,
                pathDecimalStr: v.pathDecimalStr,
                queryBigInt: v.queryBigInt,
                queryBigIntStr: v.queryBigIntStr,
                queryDecimal: v.queryDecimal,
                queryDecimalStr: v.queryDecimalStr,
            };
        });

    export type Outbound = {
        complexNumberTypes: shared.ComplexNumberTypes$.Outbound;
        pathBigInt: number;
        pathBigIntStr: string;
        pathDecimal: number;
        pathDecimalStr: string;
        queryBigInt: number;
        queryBigIntStr: string;
        queryDecimal: number;
        queryDecimalStr: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostComplexNumberTypesRequest
    > = z
        .object({
            complexNumberTypes: shared.ComplexNumberTypes$.outboundSchema,
            pathBigInt: z.bigint().transform((v) => Number(v)),
            pathBigIntStr: z.bigint().transform((v) => `${v}`),
            pathDecimal: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            pathDecimalStr: z.union([z.instanceof(Decimal$), z.number()]).transform((v) => `${v}`),
            queryBigInt: z.bigint().transform((v) => Number(v)),
            queryBigIntStr: z.bigint().transform((v) => `${v}`),
            queryDecimal: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            queryDecimalStr: z.union([z.instanceof(Decimal$), z.number()]).transform((v) => `${v}`),
        })
        .transform((v) => {
            return {
                complexNumberTypes: v.complexNumberTypes,
                pathBigInt: v.pathBigInt,
                pathBigIntStr: v.pathBigIntStr,
                pathDecimal: v.pathDecimal,
                pathDecimalStr: v.pathDecimalStr,
                queryBigInt: v.queryBigInt,
                queryBigIntStr: v.queryBigIntStr,
                queryDecimal: v.queryDecimal,
                queryDecimalStr: v.queryDecimalStr,
            };
        });
}

/** @internal */
export namespace RequestBodyPostComplexNumberTypesResponseBody$ {
    export type Inbound = {
        json: shared.ComplexNumberTypes$.Inbound;
        url: string;
    };

    export const inboundSchema: z.ZodType<
        RequestBodyPostComplexNumberTypesResponseBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            json: shared.ComplexNumberTypes$.inboundSchema,
            url: z.string(),
        })
        .transform((v) => {
            return {
                json: v.json,
                url: v.url,
            };
        });

    export type Outbound = {
        json: shared.ComplexNumberTypes$.Outbound;
        url: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostComplexNumberTypesResponseBody
    > = z
        .object({
            json: shared.ComplexNumberTypes$.outboundSchema,
            url: z.string(),
        })
        .transform((v) => {
            return {
                json: v.json,
                url: v.url,
            };
        });
}

/** @internal */
export namespace RequestBodyPostComplexNumberTypesResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: RequestBodyPostComplexNumberTypesResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        RequestBodyPostComplexNumberTypesResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z
                .lazy(() => RequestBodyPostComplexNumberTypesResponseBody$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: RequestBodyPostComplexNumberTypesResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostComplexNumberTypesResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z
                .lazy(() => RequestBodyPostComplexNumberTypesResponseBody$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
