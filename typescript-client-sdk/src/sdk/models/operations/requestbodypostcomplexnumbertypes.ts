/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types/decimal.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type RequestBodyPostComplexNumberTypesRequest = {
    complexNumberTypes: shared.ComplexNumberTypes;
    pathBigInt: bigint;
    pathBigIntStr: bigint;
    pathDecimal: Decimal$ | number;
    pathDecimalStr: Decimal$ | number;
    queryBigInt: bigint;
    queryBigIntStr: bigint;
    queryDecimal: Decimal$ | number;
    queryDecimalStr: Decimal$ | number;
};

/**
 * OK
 */
export type RequestBodyPostComplexNumberTypesResponseBody = {
    json: shared.ComplexNumberTypes;
    url: string;
};

/** @internal */
export namespace RequestBodyPostComplexNumberTypesRequest$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPostComplexNumberTypesRequest,
        z.ZodTypeDef,
        unknown
    > = z.object({
        complexNumberTypes: shared.ComplexNumberTypes$.inboundSchema,
        pathBigInt: z.number().transform((v) => BigInt(v)),
        pathBigIntStr: z.string().transform((v) => BigInt(v)),
        pathDecimal: z.number().transform((v) => new Decimal$(v)),
        pathDecimalStr: z.string().transform((v) => new Decimal$(v)),
        queryBigInt: z.number().transform((v) => BigInt(v)),
        queryBigIntStr: z.string().transform((v) => BigInt(v)),
        queryDecimal: z.number().transform((v) => new Decimal$(v)),
        queryDecimalStr: z.string().transform((v) => new Decimal$(v)),
    });

    export type Outbound = {
        complexNumberTypes: shared.ComplexNumberTypes$.Outbound;
        pathBigInt: number;
        pathBigIntStr: string;
        pathDecimal: number;
        pathDecimalStr: string;
        queryBigInt: number;
        queryBigIntStr: string;
        queryDecimal: number;
        queryDecimalStr: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostComplexNumberTypesRequest
    > = z.object({
        complexNumberTypes: shared.ComplexNumberTypes$.outboundSchema,
        pathBigInt: z.bigint().transform((v) => Number(v)),
        pathBigIntStr: z.bigint().transform((v) => `${v}`),
        pathDecimal: z
            .union([z.instanceof(Decimal$), z.number()])
            .transform((v) => (typeof v === "number" ? v : v.toNumber())),
        pathDecimalStr: z.union([z.instanceof(Decimal$), z.number()]).transform((v) => `${v}`),
        queryBigInt: z.bigint().transform((v) => Number(v)),
        queryBigIntStr: z.bigint().transform((v) => `${v}`),
        queryDecimal: z
            .union([z.instanceof(Decimal$), z.number()])
            .transform((v) => (typeof v === "number" ? v : v.toNumber())),
        queryDecimalStr: z.union([z.instanceof(Decimal$), z.number()]).transform((v) => `${v}`),
    });
}

/** @internal */
export namespace RequestBodyPostComplexNumberTypesResponseBody$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPostComplexNumberTypesResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        json: shared.ComplexNumberTypes$.inboundSchema,
        url: z.string(),
    });

    export type Outbound = {
        json: shared.ComplexNumberTypes$.Outbound;
        url: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostComplexNumberTypesResponseBody
    > = z.object({
        json: shared.ComplexNumberTypes$.outboundSchema,
        url: z.string(),
    });
}
