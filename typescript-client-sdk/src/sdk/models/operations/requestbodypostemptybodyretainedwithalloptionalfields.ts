/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody = {
  bool?: boolean | undefined;
  int?: number | undefined;
  str?: string | undefined;
};

export type RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsJson = {
  bool?: boolean | undefined;
  int?: number | undefined;
  str?: string | undefined;
};

/**
 * OK
 */
export type RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsResponseBody =
  {
    json: RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsJson;
  };

/** @internal */
export const RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody$inboundSchema:
  z.ZodType<
    RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    bool: z.boolean().optional(),
    int: z.number().int().optional(),
    str: z.string().optional(),
  });

/** @internal */
export type RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody$Outbound =
  {
    bool?: boolean | undefined;
    int?: number | undefined;
    str?: string | undefined;
  };

/** @internal */
export const RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody$outboundSchema:
  z.ZodType<
    RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody$Outbound,
    z.ZodTypeDef,
    RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody
  > = z.object({
    bool: z.boolean().optional(),
    int: z.number().int().optional(),
    str: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody$ {
  /** @deprecated use `RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody$inboundSchema;
  /** @deprecated use `RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody$outboundSchema;
  /** @deprecated use `RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody$Outbound` instead. */
  export type Outbound =
    RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody$Outbound;
}

export function requestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBodyToJSON(
  requestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody:
    RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody,
): string {
  return JSON.stringify(
    RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody$outboundSchema
      .parse(requestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody),
  );
}

export function requestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody' from JSON`,
  );
}

/** @internal */
export const RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsJson$inboundSchema:
  z.ZodType<
    RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsJson,
    z.ZodTypeDef,
    unknown
  > = z.object({
    bool: z.boolean().optional(),
    int: z.number().int().optional(),
    str: z.string().optional(),
  });

/** @internal */
export type RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsJson$Outbound =
  {
    bool?: boolean | undefined;
    int?: number | undefined;
    str?: string | undefined;
  };

/** @internal */
export const RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsJson$outboundSchema:
  z.ZodType<
    RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsJson$Outbound,
    z.ZodTypeDef,
    RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsJson
  > = z.object({
    bool: z.boolean().optional(),
    int: z.number().int().optional(),
    str: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsJson$ {
  /** @deprecated use `RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsJson$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsJson$inboundSchema;
  /** @deprecated use `RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsJson$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsJson$outboundSchema;
  /** @deprecated use `RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsJson$Outbound` instead. */
  export type Outbound =
    RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsJson$Outbound;
}

export function requestBodyPostEmptyBodyRetainedWithAllOptionalFieldsJsonToJSON(
  requestBodyPostEmptyBodyRetainedWithAllOptionalFieldsJson:
    RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsJson,
): string {
  return JSON.stringify(
    RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsJson$outboundSchema
      .parse(requestBodyPostEmptyBodyRetainedWithAllOptionalFieldsJson),
  );
}

export function requestBodyPostEmptyBodyRetainedWithAllOptionalFieldsJsonFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsJson,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsJson$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsJson' from JSON`,
  );
}

/** @internal */
export const RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsResponseBody$inboundSchema:
  z.ZodType<
    RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    json: z.lazy(() =>
      RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsJson$inboundSchema
    ),
  });

/** @internal */
export type RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsResponseBody$Outbound =
  {
    json: RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsJson$Outbound;
  };

/** @internal */
export const RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsResponseBody$outboundSchema:
  z.ZodType<
    RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsResponseBody$Outbound,
    z.ZodTypeDef,
    RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsResponseBody
  > = z.object({
    json: z.lazy(() =>
      RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsJson$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsResponseBody$ {
  /** @deprecated use `RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsResponseBody$inboundSchema;
  /** @deprecated use `RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsResponseBody$outboundSchema;
  /** @deprecated use `RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsResponseBody$Outbound` instead. */
  export type Outbound =
    RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsResponseBody$Outbound;
}

export function requestBodyPostEmptyBodyRetainedWithAllOptionalFieldsResponseBodyToJSON(
  requestBodyPostEmptyBodyRetainedWithAllOptionalFieldsResponseBody:
    RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsResponseBody,
): string {
  return JSON.stringify(
    RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsResponseBody$outboundSchema
      .parse(requestBodyPostEmptyBodyRetainedWithAllOptionalFieldsResponseBody),
  );
}

export function requestBodyPostEmptyBodyRetainedWithAllOptionalFieldsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsResponseBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsResponseBody' from JSON`,
  );
}
