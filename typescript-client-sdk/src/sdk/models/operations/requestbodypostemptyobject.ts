/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Empty = {};

export type EmptyWithEmptyProperties = {};

export type RequestBodyPostEmptyObjectRequestBody = {
    empty?: Empty | undefined;
    emptyWithEmptyProperties?: EmptyWithEmptyProperties | undefined;
};

export type RequestBodyPostEmptyObjectEmpty = {};

export type EmptyRespWithEmptyProperies = {};

/**
 * OK
 */
export type RequestBodyPostEmptyObjectResponseBody = {
    empty?: RequestBodyPostEmptyObjectEmpty | undefined;
    emptyRespWithEmptyProperies?: EmptyRespWithEmptyProperies | undefined;
};

/** @internal */
export namespace Empty$ {
    export const inboundSchema: z.ZodType<Empty, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Empty> = z.object({});
}

/** @internal */
export namespace EmptyWithEmptyProperties$ {
    export const inboundSchema: z.ZodType<EmptyWithEmptyProperties, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmptyWithEmptyProperties> =
        z.object({});
}

/** @internal */
export namespace RequestBodyPostEmptyObjectRequestBody$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPostEmptyObjectRequestBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        empty: z.lazy(() => Empty$.inboundSchema).optional(),
        emptyWithEmptyProperties: z.lazy(() => EmptyWithEmptyProperties$.inboundSchema).optional(),
    });

    export type Outbound = {
        empty?: Empty$.Outbound | undefined;
        emptyWithEmptyProperties?: EmptyWithEmptyProperties$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostEmptyObjectRequestBody
    > = z.object({
        empty: z.lazy(() => Empty$.outboundSchema).optional(),
        emptyWithEmptyProperties: z.lazy(() => EmptyWithEmptyProperties$.outboundSchema).optional(),
    });
}

/** @internal */
export namespace RequestBodyPostEmptyObjectEmpty$ {
    export const inboundSchema: z.ZodType<RequestBodyPostEmptyObjectEmpty, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostEmptyObjectEmpty
    > = z.object({});
}

/** @internal */
export namespace EmptyRespWithEmptyProperies$ {
    export const inboundSchema: z.ZodType<EmptyRespWithEmptyProperies, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmptyRespWithEmptyProperies> =
        z.object({});
}

/** @internal */
export namespace RequestBodyPostEmptyObjectResponseBody$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPostEmptyObjectResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        empty: z.lazy(() => RequestBodyPostEmptyObjectEmpty$.inboundSchema).optional(),
        emptyRespWithEmptyProperies: z
            .lazy(() => EmptyRespWithEmptyProperies$.inboundSchema)
            .optional(),
    });

    export type Outbound = {
        empty?: RequestBodyPostEmptyObjectEmpty$.Outbound | undefined;
        emptyRespWithEmptyProperies?: EmptyRespWithEmptyProperies$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostEmptyObjectResponseBody
    > = z.object({
        empty: z.lazy(() => RequestBodyPostEmptyObjectEmpty$.outboundSchema).optional(),
        emptyRespWithEmptyProperies: z
            .lazy(() => EmptyRespWithEmptyProperies$.outboundSchema)
            .optional(),
    });
}
