/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Empty = {};

export type EmptyWithEmptyProperties = {};

export type RequestBodyPostEmptyObjectRequestBody = {
  empty?: Empty | undefined;
  emptyWithEmptyProperties?: EmptyWithEmptyProperties | undefined;
};

export type RequestBodyPostEmptyObjectEmpty = {};

export type EmptyRespWithEmptyProperies = {};

/**
 * OK
 */
export type RequestBodyPostEmptyObjectResponseBody = {
  empty?: RequestBodyPostEmptyObjectEmpty | undefined;
  emptyRespWithEmptyProperies?: EmptyRespWithEmptyProperies | undefined;
};

/** @internal */
export const Empty$inboundSchema: z.ZodType<Empty, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Empty$Outbound = {};

/** @internal */
export const Empty$outboundSchema: z.ZodType<
  Empty$Outbound,
  z.ZodTypeDef,
  Empty
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Empty$ {
  /** @deprecated use `Empty$inboundSchema` instead. */
  export const inboundSchema = Empty$inboundSchema;
  /** @deprecated use `Empty$outboundSchema` instead. */
  export const outboundSchema = Empty$outboundSchema;
  /** @deprecated use `Empty$Outbound` instead. */
  export type Outbound = Empty$Outbound;
}

export function emptyToJSON(empty: Empty): string {
  return JSON.stringify(Empty$outboundSchema.parse(empty));
}

export function emptyFromJSON(
  jsonString: string,
): SafeParseResult<Empty, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Empty$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Empty' from JSON`,
  );
}

/** @internal */
export const EmptyWithEmptyProperties$inboundSchema: z.ZodType<
  EmptyWithEmptyProperties,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EmptyWithEmptyProperties$Outbound = {};

/** @internal */
export const EmptyWithEmptyProperties$outboundSchema: z.ZodType<
  EmptyWithEmptyProperties$Outbound,
  z.ZodTypeDef,
  EmptyWithEmptyProperties
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmptyWithEmptyProperties$ {
  /** @deprecated use `EmptyWithEmptyProperties$inboundSchema` instead. */
  export const inboundSchema = EmptyWithEmptyProperties$inboundSchema;
  /** @deprecated use `EmptyWithEmptyProperties$outboundSchema` instead. */
  export const outboundSchema = EmptyWithEmptyProperties$outboundSchema;
  /** @deprecated use `EmptyWithEmptyProperties$Outbound` instead. */
  export type Outbound = EmptyWithEmptyProperties$Outbound;
}

export function emptyWithEmptyPropertiesToJSON(
  emptyWithEmptyProperties: EmptyWithEmptyProperties,
): string {
  return JSON.stringify(
    EmptyWithEmptyProperties$outboundSchema.parse(emptyWithEmptyProperties),
  );
}

export function emptyWithEmptyPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<EmptyWithEmptyProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmptyWithEmptyProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmptyWithEmptyProperties' from JSON`,
  );
}

/** @internal */
export const RequestBodyPostEmptyObjectRequestBody$inboundSchema: z.ZodType<
  RequestBodyPostEmptyObjectRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  empty: z.lazy(() => Empty$inboundSchema).optional(),
  emptyWithEmptyProperties: z.lazy(() => EmptyWithEmptyProperties$inboundSchema)
    .optional(),
});

/** @internal */
export type RequestBodyPostEmptyObjectRequestBody$Outbound = {
  empty?: Empty$Outbound | undefined;
  emptyWithEmptyProperties?: EmptyWithEmptyProperties$Outbound | undefined;
};

/** @internal */
export const RequestBodyPostEmptyObjectRequestBody$outboundSchema: z.ZodType<
  RequestBodyPostEmptyObjectRequestBody$Outbound,
  z.ZodTypeDef,
  RequestBodyPostEmptyObjectRequestBody
> = z.object({
  empty: z.lazy(() => Empty$outboundSchema).optional(),
  emptyWithEmptyProperties: z.lazy(() =>
    EmptyWithEmptyProperties$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostEmptyObjectRequestBody$ {
  /** @deprecated use `RequestBodyPostEmptyObjectRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPostEmptyObjectRequestBody$inboundSchema;
  /** @deprecated use `RequestBodyPostEmptyObjectRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPostEmptyObjectRequestBody$outboundSchema;
  /** @deprecated use `RequestBodyPostEmptyObjectRequestBody$Outbound` instead. */
  export type Outbound = RequestBodyPostEmptyObjectRequestBody$Outbound;
}

export function requestBodyPostEmptyObjectRequestBodyToJSON(
  requestBodyPostEmptyObjectRequestBody: RequestBodyPostEmptyObjectRequestBody,
): string {
  return JSON.stringify(
    RequestBodyPostEmptyObjectRequestBody$outboundSchema.parse(
      requestBodyPostEmptyObjectRequestBody,
    ),
  );
}

export function requestBodyPostEmptyObjectRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<RequestBodyPostEmptyObjectRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyPostEmptyObjectRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestBodyPostEmptyObjectRequestBody' from JSON`,
  );
}

/** @internal */
export const RequestBodyPostEmptyObjectEmpty$inboundSchema: z.ZodType<
  RequestBodyPostEmptyObjectEmpty,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RequestBodyPostEmptyObjectEmpty$Outbound = {};

/** @internal */
export const RequestBodyPostEmptyObjectEmpty$outboundSchema: z.ZodType<
  RequestBodyPostEmptyObjectEmpty$Outbound,
  z.ZodTypeDef,
  RequestBodyPostEmptyObjectEmpty
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostEmptyObjectEmpty$ {
  /** @deprecated use `RequestBodyPostEmptyObjectEmpty$inboundSchema` instead. */
  export const inboundSchema = RequestBodyPostEmptyObjectEmpty$inboundSchema;
  /** @deprecated use `RequestBodyPostEmptyObjectEmpty$outboundSchema` instead. */
  export const outboundSchema = RequestBodyPostEmptyObjectEmpty$outboundSchema;
  /** @deprecated use `RequestBodyPostEmptyObjectEmpty$Outbound` instead. */
  export type Outbound = RequestBodyPostEmptyObjectEmpty$Outbound;
}

export function requestBodyPostEmptyObjectEmptyToJSON(
  requestBodyPostEmptyObjectEmpty: RequestBodyPostEmptyObjectEmpty,
): string {
  return JSON.stringify(
    RequestBodyPostEmptyObjectEmpty$outboundSchema.parse(
      requestBodyPostEmptyObjectEmpty,
    ),
  );
}

export function requestBodyPostEmptyObjectEmptyFromJSON(
  jsonString: string,
): SafeParseResult<RequestBodyPostEmptyObjectEmpty, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestBodyPostEmptyObjectEmpty$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestBodyPostEmptyObjectEmpty' from JSON`,
  );
}

/** @internal */
export const EmptyRespWithEmptyProperies$inboundSchema: z.ZodType<
  EmptyRespWithEmptyProperies,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EmptyRespWithEmptyProperies$Outbound = {};

/** @internal */
export const EmptyRespWithEmptyProperies$outboundSchema: z.ZodType<
  EmptyRespWithEmptyProperies$Outbound,
  z.ZodTypeDef,
  EmptyRespWithEmptyProperies
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmptyRespWithEmptyProperies$ {
  /** @deprecated use `EmptyRespWithEmptyProperies$inboundSchema` instead. */
  export const inboundSchema = EmptyRespWithEmptyProperies$inboundSchema;
  /** @deprecated use `EmptyRespWithEmptyProperies$outboundSchema` instead. */
  export const outboundSchema = EmptyRespWithEmptyProperies$outboundSchema;
  /** @deprecated use `EmptyRespWithEmptyProperies$Outbound` instead. */
  export type Outbound = EmptyRespWithEmptyProperies$Outbound;
}

export function emptyRespWithEmptyProperiesToJSON(
  emptyRespWithEmptyProperies: EmptyRespWithEmptyProperies,
): string {
  return JSON.stringify(
    EmptyRespWithEmptyProperies$outboundSchema.parse(
      emptyRespWithEmptyProperies,
    ),
  );
}

export function emptyRespWithEmptyProperiesFromJSON(
  jsonString: string,
): SafeParseResult<EmptyRespWithEmptyProperies, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmptyRespWithEmptyProperies$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmptyRespWithEmptyProperies' from JSON`,
  );
}

/** @internal */
export const RequestBodyPostEmptyObjectResponseBody$inboundSchema: z.ZodType<
  RequestBodyPostEmptyObjectResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  empty: z.lazy(() => RequestBodyPostEmptyObjectEmpty$inboundSchema).optional(),
  emptyRespWithEmptyProperies: z.lazy(() =>
    EmptyRespWithEmptyProperies$inboundSchema
  ).optional(),
});

/** @internal */
export type RequestBodyPostEmptyObjectResponseBody$Outbound = {
  empty?: RequestBodyPostEmptyObjectEmpty$Outbound | undefined;
  emptyRespWithEmptyProperies?:
    | EmptyRespWithEmptyProperies$Outbound
    | undefined;
};

/** @internal */
export const RequestBodyPostEmptyObjectResponseBody$outboundSchema: z.ZodType<
  RequestBodyPostEmptyObjectResponseBody$Outbound,
  z.ZodTypeDef,
  RequestBodyPostEmptyObjectResponseBody
> = z.object({
  empty: z.lazy(() => RequestBodyPostEmptyObjectEmpty$outboundSchema)
    .optional(),
  emptyRespWithEmptyProperies: z.lazy(() =>
    EmptyRespWithEmptyProperies$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostEmptyObjectResponseBody$ {
  /** @deprecated use `RequestBodyPostEmptyObjectResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPostEmptyObjectResponseBody$inboundSchema;
  /** @deprecated use `RequestBodyPostEmptyObjectResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPostEmptyObjectResponseBody$outboundSchema;
  /** @deprecated use `RequestBodyPostEmptyObjectResponseBody$Outbound` instead. */
  export type Outbound = RequestBodyPostEmptyObjectResponseBody$Outbound;
}

export function requestBodyPostEmptyObjectResponseBodyToJSON(
  requestBodyPostEmptyObjectResponseBody:
    RequestBodyPostEmptyObjectResponseBody,
): string {
  return JSON.stringify(
    RequestBodyPostEmptyObjectResponseBody$outboundSchema.parse(
      requestBodyPostEmptyObjectResponseBody,
    ),
  );
}

export function requestBodyPostEmptyObjectResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RequestBodyPostEmptyObjectResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyPostEmptyObjectResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestBodyPostEmptyObjectResponseBody' from JSON`,
  );
}
