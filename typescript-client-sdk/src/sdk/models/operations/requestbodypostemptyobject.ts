/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Empty = {};

export type EmptyWithEmptyProperties = {};

export type RequestBodyPostEmptyObjectRequestBody = {
    empty?: Empty | undefined;
    emptyWithEmptyProperties?: EmptyWithEmptyProperties | undefined;
};

export type RequestBodyPostEmptyObjectEmpty = {};

export type EmptyRespWithEmptyProperies = {};

/**
 * OK
 */
export type RequestBodyPostEmptyObjectResponseBody = {
    empty?: RequestBodyPostEmptyObjectEmpty | undefined;
    emptyRespWithEmptyProperies?: EmptyRespWithEmptyProperies | undefined;
};

export type RequestBodyPostEmptyObjectResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    object?: RequestBodyPostEmptyObjectResponseBody | undefined;
};

/** @internal */
export namespace Empty$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Empty, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Empty> = z.object({});
}

/** @internal */
export namespace EmptyWithEmptyProperties$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<EmptyWithEmptyProperties, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmptyWithEmptyProperties> =
        z.object({});
}

/** @internal */
export namespace RequestBodyPostEmptyObjectRequestBody$ {
    export type Inbound = {
        empty?: Empty$.Inbound | undefined;
        emptyWithEmptyProperties?: EmptyWithEmptyProperties$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        RequestBodyPostEmptyObjectRequestBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            empty: z.lazy(() => Empty$.inboundSchema).optional(),
            emptyWithEmptyProperties: z
                .lazy(() => EmptyWithEmptyProperties$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.empty === undefined ? null : { empty: v.empty }),
                ...(v.emptyWithEmptyProperties === undefined
                    ? null
                    : { emptyWithEmptyProperties: v.emptyWithEmptyProperties }),
            };
        });

    export type Outbound = {
        empty?: Empty$.Outbound | undefined;
        emptyWithEmptyProperties?: EmptyWithEmptyProperties$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostEmptyObjectRequestBody
    > = z
        .object({
            empty: z.lazy(() => Empty$.outboundSchema).optional(),
            emptyWithEmptyProperties: z
                .lazy(() => EmptyWithEmptyProperties$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.empty === undefined ? null : { empty: v.empty }),
                ...(v.emptyWithEmptyProperties === undefined
                    ? null
                    : { emptyWithEmptyProperties: v.emptyWithEmptyProperties }),
            };
        });
}

/** @internal */
export namespace RequestBodyPostEmptyObjectEmpty$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<RequestBodyPostEmptyObjectEmpty, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostEmptyObjectEmpty
    > = z.object({});
}

/** @internal */
export namespace EmptyRespWithEmptyProperies$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<EmptyRespWithEmptyProperies, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmptyRespWithEmptyProperies> =
        z.object({});
}

/** @internal */
export namespace RequestBodyPostEmptyObjectResponseBody$ {
    export type Inbound = {
        empty?: RequestBodyPostEmptyObjectEmpty$.Inbound | undefined;
        emptyRespWithEmptyProperies?: EmptyRespWithEmptyProperies$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        RequestBodyPostEmptyObjectResponseBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            empty: z.lazy(() => RequestBodyPostEmptyObjectEmpty$.inboundSchema).optional(),
            emptyRespWithEmptyProperies: z
                .lazy(() => EmptyRespWithEmptyProperies$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.empty === undefined ? null : { empty: v.empty }),
                ...(v.emptyRespWithEmptyProperies === undefined
                    ? null
                    : { emptyRespWithEmptyProperies: v.emptyRespWithEmptyProperies }),
            };
        });

    export type Outbound = {
        empty?: RequestBodyPostEmptyObjectEmpty$.Outbound | undefined;
        emptyRespWithEmptyProperies?: EmptyRespWithEmptyProperies$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostEmptyObjectResponseBody
    > = z
        .object({
            empty: z.lazy(() => RequestBodyPostEmptyObjectEmpty$.outboundSchema).optional(),
            emptyRespWithEmptyProperies: z
                .lazy(() => EmptyRespWithEmptyProperies$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.empty === undefined ? null : { empty: v.empty }),
                ...(v.emptyRespWithEmptyProperies === undefined
                    ? null
                    : { emptyRespWithEmptyProperies: v.emptyRespWithEmptyProperies }),
            };
        });
}

/** @internal */
export namespace RequestBodyPostEmptyObjectResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: RequestBodyPostEmptyObjectResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        RequestBodyPostEmptyObjectResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => RequestBodyPostEmptyObjectResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: RequestBodyPostEmptyObjectResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostEmptyObjectResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => RequestBodyPostEmptyObjectResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
