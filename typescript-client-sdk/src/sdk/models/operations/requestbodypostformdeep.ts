/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Form = {
    arr: string;
    bool: string;
    int: string;
    map: string;
    num: string;
    obj: string;
    str: string;
};

/**
 * OK
 */
export type RequestBodyPostFormDeepRes = {
    form: Form;
};

export type RequestBodyPostFormDeepResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: RequestBodyPostFormDeepRes | undefined;
};

/** @internal */
export namespace Form$ {
    export const inboundSchema: z.ZodType<Form, z.ZodTypeDef, unknown> = z
        .object({
            arr: z.string(),
            bool: z.string(),
            int: z.string(),
            map: z.string(),
            num: z.string(),
            obj: z.string(),
            str: z.string(),
        })
        .transform((v) => {
            return {
                arr: v.arr,
                bool: v.bool,
                int: v.int,
                map: v.map,
                num: v.num,
                obj: v.obj,
                str: v.str,
            };
        });

    export type Outbound = {
        arr: string;
        bool: string;
        int: string;
        map: string;
        num: string;
        obj: string;
        str: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Form> = z
        .object({
            arr: z.string(),
            bool: z.string(),
            int: z.string(),
            map: z.string(),
            num: z.string(),
            obj: z.string(),
            str: z.string(),
        })
        .transform((v) => {
            return {
                arr: v.arr,
                bool: v.bool,
                int: v.int,
                map: v.map,
                num: v.num,
                obj: v.obj,
                str: v.str,
            };
        });
}

/** @internal */
export namespace RequestBodyPostFormDeepRes$ {
    export const inboundSchema: z.ZodType<RequestBodyPostFormDeepRes, z.ZodTypeDef, unknown> = z
        .object({
            form: z.lazy(() => Form$.inboundSchema),
        })
        .transform((v) => {
            return {
                form: v.form,
            };
        });

    export type Outbound = {
        form: Form$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RequestBodyPostFormDeepRes> = z
        .object({
            form: z.lazy(() => Form$.outboundSchema),
        })
        .transform((v) => {
            return {
                form: v.form,
            };
        });
}

/** @internal */
export namespace RequestBodyPostFormDeepResponse$ {
    export const inboundSchema: z.ZodType<RequestBodyPostFormDeepResponse, z.ZodTypeDef, unknown> =
        z
            .object({
                ContentType: z.string(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
                res: z.lazy(() => RequestBodyPostFormDeepRes$.inboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    contentType: v.ContentType,
                    statusCode: v.StatusCode,
                    rawResponse: v.RawResponse,
                    ...(v.res === undefined ? null : { res: v.res }),
                };
            });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: RequestBodyPostFormDeepRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostFormDeepResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => RequestBodyPostFormDeepRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
