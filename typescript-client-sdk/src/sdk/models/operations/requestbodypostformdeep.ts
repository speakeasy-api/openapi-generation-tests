/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Form = {
  any: string;
  arr: string;
  bool: string;
  int: string;
  map: string;
  num: string;
  obj: string;
  str: string;
};

/**
 * OK
 */
export type RequestBodyPostFormDeepRes = {
  form: Form;
};

/** @internal */
export const Form$inboundSchema: z.ZodType<Form, z.ZodTypeDef, unknown> = z
  .object({
    any: z.string(),
    arr: z.string(),
    bool: z.string(),
    int: z.string(),
    map: z.string(),
    num: z.string(),
    obj: z.string(),
    str: z.string(),
  });

/** @internal */
export type Form$Outbound = {
  any: string;
  arr: string;
  bool: string;
  int: string;
  map: string;
  num: string;
  obj: string;
  str: string;
};

/** @internal */
export const Form$outboundSchema: z.ZodType<Form$Outbound, z.ZodTypeDef, Form> =
  z.object({
    any: z.string(),
    arr: z.string(),
    bool: z.string(),
    int: z.string(),
    map: z.string(),
    num: z.string(),
    obj: z.string(),
    str: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Form$ {
  /** @deprecated use `Form$inboundSchema` instead. */
  export const inboundSchema = Form$inboundSchema;
  /** @deprecated use `Form$outboundSchema` instead. */
  export const outboundSchema = Form$outboundSchema;
  /** @deprecated use `Form$Outbound` instead. */
  export type Outbound = Form$Outbound;
}

export function formToJSON(form: Form): string {
  return JSON.stringify(Form$outboundSchema.parse(form));
}

export function formFromJSON(
  jsonString: string,
): SafeParseResult<Form, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Form$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Form' from JSON`,
  );
}

/** @internal */
export const RequestBodyPostFormDeepRes$inboundSchema: z.ZodType<
  RequestBodyPostFormDeepRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  form: z.lazy(() => Form$inboundSchema),
});

/** @internal */
export type RequestBodyPostFormDeepRes$Outbound = {
  form: Form$Outbound;
};

/** @internal */
export const RequestBodyPostFormDeepRes$outboundSchema: z.ZodType<
  RequestBodyPostFormDeepRes$Outbound,
  z.ZodTypeDef,
  RequestBodyPostFormDeepRes
> = z.object({
  form: z.lazy(() => Form$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostFormDeepRes$ {
  /** @deprecated use `RequestBodyPostFormDeepRes$inboundSchema` instead. */
  export const inboundSchema = RequestBodyPostFormDeepRes$inboundSchema;
  /** @deprecated use `RequestBodyPostFormDeepRes$outboundSchema` instead. */
  export const outboundSchema = RequestBodyPostFormDeepRes$outboundSchema;
  /** @deprecated use `RequestBodyPostFormDeepRes$Outbound` instead. */
  export type Outbound = RequestBodyPostFormDeepRes$Outbound;
}

export function requestBodyPostFormDeepResToJSON(
  requestBodyPostFormDeepRes: RequestBodyPostFormDeepRes,
): string {
  return JSON.stringify(
    RequestBodyPostFormDeepRes$outboundSchema.parse(requestBodyPostFormDeepRes),
  );
}

export function requestBodyPostFormDeepResFromJSON(
  jsonString: string,
): SafeParseResult<RequestBodyPostFormDeepRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestBodyPostFormDeepRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestBodyPostFormDeepRes' from JSON`,
  );
}
