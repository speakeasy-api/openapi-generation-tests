/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type RequestBodyPostFormSimpleForm = {
    any: string;
    bigint?: string | undefined;
    bigintStr?: string | undefined;
    bool: string;
    boolOpt?: string | undefined;
    date: string;
    dateTime: string;
    decimal?: string | undefined;
    decimalStr?: string | undefined;
    enum: string;
    float32: string;
    int: string;
    int32: string;
    int32Enum: string;
    intEnum: string;
    intOptNull?: string | undefined;
    num: string;
    numOptNull?: string | undefined;
    str: string;
    strOpt?: string | undefined;
};

export type RequestBodyPostFormSimpleHeaders = {
    contentType: string;
};

/**
 * OK
 */
export type RequestBodyPostFormSimpleRes = {
    form: RequestBodyPostFormSimpleForm;
    headers: RequestBodyPostFormSimpleHeaders;
};

export type RequestBodyPostFormSimpleResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: RequestBodyPostFormSimpleRes | undefined;
};

/** @internal */
export namespace RequestBodyPostFormSimpleForm$ {
    export const inboundSchema: z.ZodType<RequestBodyPostFormSimpleForm, z.ZodTypeDef, unknown> =
        z.object({
            any: z.string(),
            bigint: z.string().optional(),
            bigintStr: z.string().optional(),
            bool: z.string(),
            boolOpt: z.string().optional(),
            date: z.string(),
            dateTime: z.string(),
            decimal: z.string().optional(),
            decimalStr: z.string().optional(),
            enum: z.string(),
            float32: z.string(),
            int: z.string(),
            int32: z.string(),
            int32Enum: z.string(),
            intEnum: z.string(),
            intOptNull: z.string().optional(),
            num: z.string(),
            numOptNull: z.string().optional(),
            str: z.string(),
            strOpt: z.string().optional(),
        });

    export type Outbound = {
        any: string;
        bigint?: string | undefined;
        bigintStr?: string | undefined;
        bool: string;
        boolOpt?: string | undefined;
        date: string;
        dateTime: string;
        decimal?: string | undefined;
        decimalStr?: string | undefined;
        enum: string;
        float32: string;
        int: string;
        int32: string;
        int32Enum: string;
        intEnum: string;
        intOptNull?: string | undefined;
        num: string;
        numOptNull?: string | undefined;
        str: string;
        strOpt?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RequestBodyPostFormSimpleForm> =
        z.object({
            any: z.string(),
            bigint: z.string().optional(),
            bigintStr: z.string().optional(),
            bool: z.string(),
            boolOpt: z.string().optional(),
            date: z.string(),
            dateTime: z.string(),
            decimal: z.string().optional(),
            decimalStr: z.string().optional(),
            enum: z.string(),
            float32: z.string(),
            int: z.string(),
            int32: z.string(),
            int32Enum: z.string(),
            intEnum: z.string(),
            intOptNull: z.string().optional(),
            num: z.string(),
            numOptNull: z.string().optional(),
            str: z.string(),
            strOpt: z.string().optional(),
        });
}

/** @internal */
export namespace RequestBodyPostFormSimpleHeaders$ {
    export const inboundSchema: z.ZodType<RequestBodyPostFormSimpleHeaders, z.ZodTypeDef, unknown> =
        z
            .object({
                "Content-Type": z.string(),
            })
            .transform((v) => {
                return remap$(v, {
                    "Content-Type": "contentType",
                });
            });

    export type Outbound = {
        "Content-Type": string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostFormSimpleHeaders
    > = z
        .object({
            contentType: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "Content-Type",
            });
        });
}

/** @internal */
export namespace RequestBodyPostFormSimpleRes$ {
    export const inboundSchema: z.ZodType<RequestBodyPostFormSimpleRes, z.ZodTypeDef, unknown> =
        z.object({
            form: z.lazy(() => RequestBodyPostFormSimpleForm$.inboundSchema),
            headers: z.lazy(() => RequestBodyPostFormSimpleHeaders$.inboundSchema),
        });

    export type Outbound = {
        form: RequestBodyPostFormSimpleForm$.Outbound;
        headers: RequestBodyPostFormSimpleHeaders$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RequestBodyPostFormSimpleRes> =
        z.object({
            form: z.lazy(() => RequestBodyPostFormSimpleForm$.outboundSchema),
            headers: z.lazy(() => RequestBodyPostFormSimpleHeaders$.outboundSchema),
        });
}

/** @internal */
export namespace RequestBodyPostFormSimpleResponse$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPostFormSimpleResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => RequestBodyPostFormSimpleRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: RequestBodyPostFormSimpleRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostFormSimpleResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => RequestBodyPostFormSimpleRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
