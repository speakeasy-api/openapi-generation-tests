/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type RequestBodyPostFormSimpleForm = {
    any: string;
    bigint?: string | undefined;
    bigintStr?: string | undefined;
    bool: string;
    boolOpt?: string | undefined;
    date: string;
    dateTime: string;
    decimal?: string | undefined;
    decimalStr?: string | undefined;
    enum: string;
    float32: string;
    int: string;
    int32: string;
    int32Enum: string;
    intEnum: string;
    intOptNull?: string | undefined;
    num: string;
    numOptNull?: string | undefined;
    str: string;
    strOpt?: string | undefined;
};

export type RequestBodyPostFormSimpleHeaders = {
    contentType: string;
};

/**
 * OK
 */
export type RequestBodyPostFormSimpleRes = {
    form: RequestBodyPostFormSimpleForm;
    headers: RequestBodyPostFormSimpleHeaders;
};

export type RequestBodyPostFormSimpleResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: RequestBodyPostFormSimpleRes | undefined;
};

/** @internal */
export namespace RequestBodyPostFormSimpleForm$ {
    export type Inbound = {
        any: string;
        bigint?: string | undefined;
        bigintStr?: string | undefined;
        bool: string;
        boolOpt?: string | undefined;
        date: string;
        dateTime: string;
        decimal?: string | undefined;
        decimalStr?: string | undefined;
        enum: string;
        float32: string;
        int: string;
        int32: string;
        int32Enum: string;
        intEnum: string;
        intOptNull?: string | undefined;
        num: string;
        numOptNull?: string | undefined;
        str: string;
        strOpt?: string | undefined;
    };

    export const inboundSchema: z.ZodType<RequestBodyPostFormSimpleForm, z.ZodTypeDef, Inbound> = z
        .object({
            any: z.string(),
            bigint: z.string().optional(),
            bigintStr: z.string().optional(),
            bool: z.string(),
            boolOpt: z.string().optional(),
            date: z.string(),
            dateTime: z.string(),
            decimal: z.string().optional(),
            decimalStr: z.string().optional(),
            enum: z.string(),
            float32: z.string(),
            int: z.string(),
            int32: z.string(),
            int32Enum: z.string(),
            intEnum: z.string(),
            intOptNull: z.string().optional(),
            num: z.string(),
            numOptNull: z.string().optional(),
            str: z.string(),
            strOpt: z.string().optional(),
        })
        .transform((v) => {
            return {
                any: v.any,
                ...(v.bigint === undefined ? null : { bigint: v.bigint }),
                ...(v.bigintStr === undefined ? null : { bigintStr: v.bigintStr }),
                bool: v.bool,
                ...(v.boolOpt === undefined ? null : { boolOpt: v.boolOpt }),
                date: v.date,
                dateTime: v.dateTime,
                ...(v.decimal === undefined ? null : { decimal: v.decimal }),
                ...(v.decimalStr === undefined ? null : { decimalStr: v.decimalStr }),
                enum: v.enum,
                float32: v.float32,
                int: v.int,
                int32: v.int32,
                int32Enum: v.int32Enum,
                intEnum: v.intEnum,
                ...(v.intOptNull === undefined ? null : { intOptNull: v.intOptNull }),
                num: v.num,
                ...(v.numOptNull === undefined ? null : { numOptNull: v.numOptNull }),
                str: v.str,
                ...(v.strOpt === undefined ? null : { strOpt: v.strOpt }),
            };
        });

    export type Outbound = {
        any: string;
        bigint?: string | undefined;
        bigintStr?: string | undefined;
        bool: string;
        boolOpt?: string | undefined;
        date: string;
        dateTime: string;
        decimal?: string | undefined;
        decimalStr?: string | undefined;
        enum: string;
        float32: string;
        int: string;
        int32: string;
        int32Enum: string;
        intEnum: string;
        intOptNull?: string | undefined;
        num: string;
        numOptNull?: string | undefined;
        str: string;
        strOpt?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RequestBodyPostFormSimpleForm> =
        z
            .object({
                any: z.string(),
                bigint: z.string().optional(),
                bigintStr: z.string().optional(),
                bool: z.string(),
                boolOpt: z.string().optional(),
                date: z.string(),
                dateTime: z.string(),
                decimal: z.string().optional(),
                decimalStr: z.string().optional(),
                enum: z.string(),
                float32: z.string(),
                int: z.string(),
                int32: z.string(),
                int32Enum: z.string(),
                intEnum: z.string(),
                intOptNull: z.string().optional(),
                num: z.string(),
                numOptNull: z.string().optional(),
                str: z.string(),
                strOpt: z.string().optional(),
            })
            .transform((v) => {
                return {
                    any: v.any,
                    ...(v.bigint === undefined ? null : { bigint: v.bigint }),
                    ...(v.bigintStr === undefined ? null : { bigintStr: v.bigintStr }),
                    bool: v.bool,
                    ...(v.boolOpt === undefined ? null : { boolOpt: v.boolOpt }),
                    date: v.date,
                    dateTime: v.dateTime,
                    ...(v.decimal === undefined ? null : { decimal: v.decimal }),
                    ...(v.decimalStr === undefined ? null : { decimalStr: v.decimalStr }),
                    enum: v.enum,
                    float32: v.float32,
                    int: v.int,
                    int32: v.int32,
                    int32Enum: v.int32Enum,
                    intEnum: v.intEnum,
                    ...(v.intOptNull === undefined ? null : { intOptNull: v.intOptNull }),
                    num: v.num,
                    ...(v.numOptNull === undefined ? null : { numOptNull: v.numOptNull }),
                    str: v.str,
                    ...(v.strOpt === undefined ? null : { strOpt: v.strOpt }),
                };
            });
}

/** @internal */
export namespace RequestBodyPostFormSimpleHeaders$ {
    export type Inbound = {
        "Content-Type": string;
    };

    export const inboundSchema: z.ZodType<RequestBodyPostFormSimpleHeaders, z.ZodTypeDef, Inbound> =
        z
            .object({
                "Content-Type": z.string(),
            })
            .transform((v) => {
                return {
                    contentType: v["Content-Type"],
                };
            });

    export type Outbound = {
        "Content-Type": string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostFormSimpleHeaders
    > = z
        .object({
            contentType: z.string(),
        })
        .transform((v) => {
            return {
                "Content-Type": v.contentType,
            };
        });
}

/** @internal */
export namespace RequestBodyPostFormSimpleRes$ {
    export type Inbound = {
        form: RequestBodyPostFormSimpleForm$.Inbound;
        headers: RequestBodyPostFormSimpleHeaders$.Inbound;
    };

    export const inboundSchema: z.ZodType<RequestBodyPostFormSimpleRes, z.ZodTypeDef, Inbound> = z
        .object({
            form: z.lazy(() => RequestBodyPostFormSimpleForm$.inboundSchema),
            headers: z.lazy(() => RequestBodyPostFormSimpleHeaders$.inboundSchema),
        })
        .transform((v) => {
            return {
                form: v.form,
                headers: v.headers,
            };
        });

    export type Outbound = {
        form: RequestBodyPostFormSimpleForm$.Outbound;
        headers: RequestBodyPostFormSimpleHeaders$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RequestBodyPostFormSimpleRes> = z
        .object({
            form: z.lazy(() => RequestBodyPostFormSimpleForm$.outboundSchema),
            headers: z.lazy(() => RequestBodyPostFormSimpleHeaders$.outboundSchema),
        })
        .transform((v) => {
            return {
                form: v.form,
                headers: v.headers,
            };
        });
}

/** @internal */
export namespace RequestBodyPostFormSimpleResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        res?: RequestBodyPostFormSimpleRes$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        RequestBodyPostFormSimpleResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => RequestBodyPostFormSimpleRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: RequestBodyPostFormSimpleRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostFormSimpleResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => RequestBodyPostFormSimpleRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
