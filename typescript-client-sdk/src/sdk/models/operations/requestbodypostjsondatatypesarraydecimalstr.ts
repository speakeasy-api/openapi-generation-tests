/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * OK
 */
export type RequestBodyPostJsonDataTypesArrayDecimalStrResponseBody = {
  data: string;
  json: Array<Decimal$ | number>;
};

/** @internal */
export const RequestBodyPostJsonDataTypesArrayDecimalStrResponseBody$inboundSchema:
  z.ZodType<
    RequestBodyPostJsonDataTypesArrayDecimalStrResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.string(),
    json: z.array(z.string().transform(v => new Decimal$(v))),
  });

/** @internal */
export type RequestBodyPostJsonDataTypesArrayDecimalStrResponseBody$Outbound = {
  data: string;
  json: Array<string>;
};

/** @internal */
export const RequestBodyPostJsonDataTypesArrayDecimalStrResponseBody$outboundSchema:
  z.ZodType<
    RequestBodyPostJsonDataTypesArrayDecimalStrResponseBody$Outbound,
    z.ZodTypeDef,
    RequestBodyPostJsonDataTypesArrayDecimalStrResponseBody
  > = z.object({
    data: z.string(),
    json: z.array(
      z.union([z.instanceof(Decimal$), z.number()]).transform(v => `${v}`),
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostJsonDataTypesArrayDecimalStrResponseBody$ {
  /** @deprecated use `RequestBodyPostJsonDataTypesArrayDecimalStrResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPostJsonDataTypesArrayDecimalStrResponseBody$inboundSchema;
  /** @deprecated use `RequestBodyPostJsonDataTypesArrayDecimalStrResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPostJsonDataTypesArrayDecimalStrResponseBody$outboundSchema;
  /** @deprecated use `RequestBodyPostJsonDataTypesArrayDecimalStrResponseBody$Outbound` instead. */
  export type Outbound =
    RequestBodyPostJsonDataTypesArrayDecimalStrResponseBody$Outbound;
}

export function requestBodyPostJsonDataTypesArrayDecimalStrResponseBodyToJSON(
  requestBodyPostJsonDataTypesArrayDecimalStrResponseBody:
    RequestBodyPostJsonDataTypesArrayDecimalStrResponseBody,
): string {
  return JSON.stringify(
    RequestBodyPostJsonDataTypesArrayDecimalStrResponseBody$outboundSchema
      .parse(requestBodyPostJsonDataTypesArrayDecimalStrResponseBody),
  );
}

export function requestBodyPostJsonDataTypesArrayDecimalStrResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestBodyPostJsonDataTypesArrayDecimalStrResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyPostJsonDataTypesArrayDecimalStrResponseBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RequestBodyPostJsonDataTypesArrayDecimalStrResponseBody' from JSON`,
  );
}
