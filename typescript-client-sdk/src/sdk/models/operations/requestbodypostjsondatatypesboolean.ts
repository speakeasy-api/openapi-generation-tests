/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * OK
 */
export type RequestBodyPostJsonDataTypesBooleanResponseBody = {
    json: boolean;
};

export type RequestBodyPostJsonDataTypesBooleanResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    object?: RequestBodyPostJsonDataTypesBooleanResponseBody | undefined;
};

/** @internal */
export namespace RequestBodyPostJsonDataTypesBooleanResponseBody$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPostJsonDataTypesBooleanResponseBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            json: z.boolean(),
        })
        .transform((v) => {
            return {
                json: v.json,
            };
        });

    export type Outbound = {
        json: boolean;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostJsonDataTypesBooleanResponseBody
    > = z
        .object({
            json: z.boolean(),
        })
        .transform((v) => {
            return {
                json: v.json,
            };
        });
}

/** @internal */
export namespace RequestBodyPostJsonDataTypesBooleanResponse$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPostJsonDataTypesBooleanResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z
                .lazy(() => RequestBodyPostJsonDataTypesBooleanResponseBody$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: RequestBodyPostJsonDataTypesBooleanResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostJsonDataTypesBooleanResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z
                .lazy(() => RequestBodyPostJsonDataTypesBooleanResponseBody$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
