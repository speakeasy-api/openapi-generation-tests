/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * OK
 */
export type RequestBodyPostJsonDataTypesDateResponseBody = {
  data: string;
  json: RFCDate;
};

/** @internal */
export const RequestBodyPostJsonDataTypesDateResponseBody$inboundSchema:
  z.ZodType<
    RequestBodyPostJsonDataTypesDateResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.string(),
    json: z.string().transform(v => new RFCDate(v)),
  });

/** @internal */
export type RequestBodyPostJsonDataTypesDateResponseBody$Outbound = {
  data: string;
  json: string;
};

/** @internal */
export const RequestBodyPostJsonDataTypesDateResponseBody$outboundSchema:
  z.ZodType<
    RequestBodyPostJsonDataTypesDateResponseBody$Outbound,
    z.ZodTypeDef,
    RequestBodyPostJsonDataTypesDateResponseBody
  > = z.object({
    data: z.string(),
    json: z.instanceof(RFCDate).transform(v => v.toString()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostJsonDataTypesDateResponseBody$ {
  /** @deprecated use `RequestBodyPostJsonDataTypesDateResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPostJsonDataTypesDateResponseBody$inboundSchema;
  /** @deprecated use `RequestBodyPostJsonDataTypesDateResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPostJsonDataTypesDateResponseBody$outboundSchema;
  /** @deprecated use `RequestBodyPostJsonDataTypesDateResponseBody$Outbound` instead. */
  export type Outbound = RequestBodyPostJsonDataTypesDateResponseBody$Outbound;
}

export function requestBodyPostJsonDataTypesDateResponseBodyToJSON(
  requestBodyPostJsonDataTypesDateResponseBody:
    RequestBodyPostJsonDataTypesDateResponseBody,
): string {
  return JSON.stringify(
    RequestBodyPostJsonDataTypesDateResponseBody$outboundSchema.parse(
      requestBodyPostJsonDataTypesDateResponseBody,
    ),
  );
}

export function requestBodyPostJsonDataTypesDateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestBodyPostJsonDataTypesDateResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyPostJsonDataTypesDateResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RequestBodyPostJsonDataTypesDateResponseBody' from JSON`,
  );
}
