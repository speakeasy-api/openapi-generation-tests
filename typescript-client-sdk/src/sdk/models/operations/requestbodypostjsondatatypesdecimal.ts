/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * OK
 */
export type RequestBodyPostJsonDataTypesDecimalResponseBody = {
  data: string;
  json: Decimal$ | number;
};

/** @internal */
export const RequestBodyPostJsonDataTypesDecimalResponseBody$inboundSchema:
  z.ZodType<
    RequestBodyPostJsonDataTypesDecimalResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.string(),
    json: z.number().transform(v => new Decimal$(v)),
  });

/** @internal */
export type RequestBodyPostJsonDataTypesDecimalResponseBody$Outbound = {
  data: string;
  json: number;
};

/** @internal */
export const RequestBodyPostJsonDataTypesDecimalResponseBody$outboundSchema:
  z.ZodType<
    RequestBodyPostJsonDataTypesDecimalResponseBody$Outbound,
    z.ZodTypeDef,
    RequestBodyPostJsonDataTypesDecimalResponseBody
  > = z.object({
    data: z.string(),
    json: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
      typeof v === "number" ? v : v.toNumber()
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostJsonDataTypesDecimalResponseBody$ {
  /** @deprecated use `RequestBodyPostJsonDataTypesDecimalResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPostJsonDataTypesDecimalResponseBody$inboundSchema;
  /** @deprecated use `RequestBodyPostJsonDataTypesDecimalResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPostJsonDataTypesDecimalResponseBody$outboundSchema;
  /** @deprecated use `RequestBodyPostJsonDataTypesDecimalResponseBody$Outbound` instead. */
  export type Outbound =
    RequestBodyPostJsonDataTypesDecimalResponseBody$Outbound;
}

export function requestBodyPostJsonDataTypesDecimalResponseBodyToJSON(
  requestBodyPostJsonDataTypesDecimalResponseBody:
    RequestBodyPostJsonDataTypesDecimalResponseBody,
): string {
  return JSON.stringify(
    RequestBodyPostJsonDataTypesDecimalResponseBody$outboundSchema.parse(
      requestBodyPostJsonDataTypesDecimalResponseBody,
    ),
  );
}

export function requestBodyPostJsonDataTypesDecimalResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestBodyPostJsonDataTypesDecimalResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyPostJsonDataTypesDecimalResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RequestBodyPostJsonDataTypesDecimalResponseBody' from JSON`,
  );
}
