/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * OK
 */
export type RequestBodyPostJsonDataTypesDecimalStrResponseBody = {
  data: string;
  json: Decimal$ | number;
};

/** @internal */
export const RequestBodyPostJsonDataTypesDecimalStrResponseBody$inboundSchema:
  z.ZodType<
    RequestBodyPostJsonDataTypesDecimalStrResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.string(),
    json: z.string().transform(v => new Decimal$(v)),
  });

/** @internal */
export type RequestBodyPostJsonDataTypesDecimalStrResponseBody$Outbound = {
  data: string;
  json: string;
};

/** @internal */
export const RequestBodyPostJsonDataTypesDecimalStrResponseBody$outboundSchema:
  z.ZodType<
    RequestBodyPostJsonDataTypesDecimalStrResponseBody$Outbound,
    z.ZodTypeDef,
    RequestBodyPostJsonDataTypesDecimalStrResponseBody
  > = z.object({
    data: z.string(),
    json: z.union([z.instanceof(Decimal$), z.number()]).transform(v => `${v}`),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostJsonDataTypesDecimalStrResponseBody$ {
  /** @deprecated use `RequestBodyPostJsonDataTypesDecimalStrResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPostJsonDataTypesDecimalStrResponseBody$inboundSchema;
  /** @deprecated use `RequestBodyPostJsonDataTypesDecimalStrResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPostJsonDataTypesDecimalStrResponseBody$outboundSchema;
  /** @deprecated use `RequestBodyPostJsonDataTypesDecimalStrResponseBody$Outbound` instead. */
  export type Outbound =
    RequestBodyPostJsonDataTypesDecimalStrResponseBody$Outbound;
}

export function requestBodyPostJsonDataTypesDecimalStrResponseBodyToJSON(
  requestBodyPostJsonDataTypesDecimalStrResponseBody:
    RequestBodyPostJsonDataTypesDecimalStrResponseBody,
): string {
  return JSON.stringify(
    RequestBodyPostJsonDataTypesDecimalStrResponseBody$outboundSchema.parse(
      requestBodyPostJsonDataTypesDecimalStrResponseBody,
    ),
  );
}

export function requestBodyPostJsonDataTypesDecimalStrResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestBodyPostJsonDataTypesDecimalStrResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyPostJsonDataTypesDecimalStrResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RequestBodyPostJsonDataTypesDecimalStrResponseBody' from JSON`,
  );
}
