/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * OK
 */
export type RequestBodyPostJsonDataTypesFloat32ResponseBody = {
  json: number;
};

/** @internal */
export const RequestBodyPostJsonDataTypesFloat32ResponseBody$inboundSchema:
  z.ZodType<
    RequestBodyPostJsonDataTypesFloat32ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    json: z.number(),
  });

/** @internal */
export type RequestBodyPostJsonDataTypesFloat32ResponseBody$Outbound = {
  json: number;
};

/** @internal */
export const RequestBodyPostJsonDataTypesFloat32ResponseBody$outboundSchema:
  z.ZodType<
    RequestBodyPostJsonDataTypesFloat32ResponseBody$Outbound,
    z.ZodTypeDef,
    RequestBodyPostJsonDataTypesFloat32ResponseBody
  > = z.object({
    json: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostJsonDataTypesFloat32ResponseBody$ {
  /** @deprecated use `RequestBodyPostJsonDataTypesFloat32ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPostJsonDataTypesFloat32ResponseBody$inboundSchema;
  /** @deprecated use `RequestBodyPostJsonDataTypesFloat32ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPostJsonDataTypesFloat32ResponseBody$outboundSchema;
  /** @deprecated use `RequestBodyPostJsonDataTypesFloat32ResponseBody$Outbound` instead. */
  export type Outbound =
    RequestBodyPostJsonDataTypesFloat32ResponseBody$Outbound;
}

export function requestBodyPostJsonDataTypesFloat32ResponseBodyToJSON(
  requestBodyPostJsonDataTypesFloat32ResponseBody:
    RequestBodyPostJsonDataTypesFloat32ResponseBody,
): string {
  return JSON.stringify(
    RequestBodyPostJsonDataTypesFloat32ResponseBody$outboundSchema.parse(
      requestBodyPostJsonDataTypesFloat32ResponseBody,
    ),
  );
}

export function requestBodyPostJsonDataTypesFloat32ResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestBodyPostJsonDataTypesFloat32ResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyPostJsonDataTypesFloat32ResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RequestBodyPostJsonDataTypesFloat32ResponseBody' from JSON`,
  );
}
