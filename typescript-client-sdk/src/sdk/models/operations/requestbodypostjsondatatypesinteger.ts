/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * OK
 */
export type RequestBodyPostJsonDataTypesIntegerResponseBody = {
  json: number;
};

/** @internal */
export const RequestBodyPostJsonDataTypesIntegerResponseBody$inboundSchema:
  z.ZodType<
    RequestBodyPostJsonDataTypesIntegerResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    json: z.number().int(),
  });

/** @internal */
export type RequestBodyPostJsonDataTypesIntegerResponseBody$Outbound = {
  json: number;
};

/** @internal */
export const RequestBodyPostJsonDataTypesIntegerResponseBody$outboundSchema:
  z.ZodType<
    RequestBodyPostJsonDataTypesIntegerResponseBody$Outbound,
    z.ZodTypeDef,
    RequestBodyPostJsonDataTypesIntegerResponseBody
  > = z.object({
    json: z.number().int(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostJsonDataTypesIntegerResponseBody$ {
  /** @deprecated use `RequestBodyPostJsonDataTypesIntegerResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPostJsonDataTypesIntegerResponseBody$inboundSchema;
  /** @deprecated use `RequestBodyPostJsonDataTypesIntegerResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPostJsonDataTypesIntegerResponseBody$outboundSchema;
  /** @deprecated use `RequestBodyPostJsonDataTypesIntegerResponseBody$Outbound` instead. */
  export type Outbound =
    RequestBodyPostJsonDataTypesIntegerResponseBody$Outbound;
}

export function requestBodyPostJsonDataTypesIntegerResponseBodyToJSON(
  requestBodyPostJsonDataTypesIntegerResponseBody:
    RequestBodyPostJsonDataTypesIntegerResponseBody,
): string {
  return JSON.stringify(
    RequestBodyPostJsonDataTypesIntegerResponseBody$outboundSchema.parse(
      requestBodyPostJsonDataTypesIntegerResponseBody,
    ),
  );
}

export function requestBodyPostJsonDataTypesIntegerResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestBodyPostJsonDataTypesIntegerResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyPostJsonDataTypesIntegerResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RequestBodyPostJsonDataTypesIntegerResponseBody' from JSON`,
  );
}
