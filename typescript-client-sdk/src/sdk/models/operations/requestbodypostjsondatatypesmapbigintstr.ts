/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * OK
 */
export type RequestBodyPostJsonDataTypesMapBigIntStrResponseBody = {
  data: string;
  json: { [k: string]: bigint };
};

/** @internal */
export const RequestBodyPostJsonDataTypesMapBigIntStrResponseBody$inboundSchema:
  z.ZodType<
    RequestBodyPostJsonDataTypesMapBigIntStrResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.string(),
    json: z.record(z.string().transform(v => BigInt(v))),
  });

/** @internal */
export type RequestBodyPostJsonDataTypesMapBigIntStrResponseBody$Outbound = {
  data: string;
  json: { [k: string]: string };
};

/** @internal */
export const RequestBodyPostJsonDataTypesMapBigIntStrResponseBody$outboundSchema:
  z.ZodType<
    RequestBodyPostJsonDataTypesMapBigIntStrResponseBody$Outbound,
    z.ZodTypeDef,
    RequestBodyPostJsonDataTypesMapBigIntStrResponseBody
  > = z.object({
    data: z.string(),
    json: z.record(z.bigint().transform(v => `${v}`)),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostJsonDataTypesMapBigIntStrResponseBody$ {
  /** @deprecated use `RequestBodyPostJsonDataTypesMapBigIntStrResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPostJsonDataTypesMapBigIntStrResponseBody$inboundSchema;
  /** @deprecated use `RequestBodyPostJsonDataTypesMapBigIntStrResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPostJsonDataTypesMapBigIntStrResponseBody$outboundSchema;
  /** @deprecated use `RequestBodyPostJsonDataTypesMapBigIntStrResponseBody$Outbound` instead. */
  export type Outbound =
    RequestBodyPostJsonDataTypesMapBigIntStrResponseBody$Outbound;
}

export function requestBodyPostJsonDataTypesMapBigIntStrResponseBodyToJSON(
  requestBodyPostJsonDataTypesMapBigIntStrResponseBody:
    RequestBodyPostJsonDataTypesMapBigIntStrResponseBody,
): string {
  return JSON.stringify(
    RequestBodyPostJsonDataTypesMapBigIntStrResponseBody$outboundSchema.parse(
      requestBodyPostJsonDataTypesMapBigIntStrResponseBody,
    ),
  );
}

export function requestBodyPostJsonDataTypesMapBigIntStrResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestBodyPostJsonDataTypesMapBigIntStrResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyPostJsonDataTypesMapBigIntStrResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RequestBodyPostJsonDataTypesMapBigIntStrResponseBody' from JSON`,
  );
}
