/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * OK
 */
export type RequestBodyPostJsonDataTypesMapDateTimeResponseBody = {
    data: string;
    json: { [k: string]: Date };
};

/** @internal */
export namespace RequestBodyPostJsonDataTypesMapDateTimeResponseBody$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPostJsonDataTypesMapDateTimeResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        data: z.string(),
        json: z.record(
            z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
        ),
    });

    export type Outbound = {
        data: string;
        json: { [k: string]: string };
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostJsonDataTypesMapDateTimeResponseBody
    > = z.object({
        data: z.string(),
        json: z.record(z.date().transform((v) => v.toISOString())),
    });
}
