/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * OK
 */
export type RequestBodyPostJsonDataTypesMapDateTimeResponseBody = {
  data: string;
  json: { [k: string]: Date };
};

/** @internal */
export const RequestBodyPostJsonDataTypesMapDateTimeResponseBody$inboundSchema:
  z.ZodType<
    RequestBodyPostJsonDataTypesMapDateTimeResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.string(),
    json: z.record(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ),
  });

/** @internal */
export type RequestBodyPostJsonDataTypesMapDateTimeResponseBody$Outbound = {
  data: string;
  json: { [k: string]: string };
};

/** @internal */
export const RequestBodyPostJsonDataTypesMapDateTimeResponseBody$outboundSchema:
  z.ZodType<
    RequestBodyPostJsonDataTypesMapDateTimeResponseBody$Outbound,
    z.ZodTypeDef,
    RequestBodyPostJsonDataTypesMapDateTimeResponseBody
  > = z.object({
    data: z.string(),
    json: z.record(z.date().transform(v => v.toISOString())),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostJsonDataTypesMapDateTimeResponseBody$ {
  /** @deprecated use `RequestBodyPostJsonDataTypesMapDateTimeResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPostJsonDataTypesMapDateTimeResponseBody$inboundSchema;
  /** @deprecated use `RequestBodyPostJsonDataTypesMapDateTimeResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPostJsonDataTypesMapDateTimeResponseBody$outboundSchema;
  /** @deprecated use `RequestBodyPostJsonDataTypesMapDateTimeResponseBody$Outbound` instead. */
  export type Outbound =
    RequestBodyPostJsonDataTypesMapDateTimeResponseBody$Outbound;
}

export function requestBodyPostJsonDataTypesMapDateTimeResponseBodyToJSON(
  requestBodyPostJsonDataTypesMapDateTimeResponseBody:
    RequestBodyPostJsonDataTypesMapDateTimeResponseBody,
): string {
  return JSON.stringify(
    RequestBodyPostJsonDataTypesMapDateTimeResponseBody$outboundSchema.parse(
      requestBodyPostJsonDataTypesMapDateTimeResponseBody,
    ),
  );
}

export function requestBodyPostJsonDataTypesMapDateTimeResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestBodyPostJsonDataTypesMapDateTimeResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyPostJsonDataTypesMapDateTimeResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RequestBodyPostJsonDataTypesMapDateTimeResponseBody' from JSON`,
  );
}
