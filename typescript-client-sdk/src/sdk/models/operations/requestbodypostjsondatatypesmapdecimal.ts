/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types/decimal.js";
import * as z from "zod";

/**
 * OK
 */
export type RequestBodyPostJsonDataTypesMapDecimalResponseBody = {
    data: string;
    json: { [k: string]: Decimal$ | number };
};

/** @internal */
export namespace RequestBodyPostJsonDataTypesMapDecimalResponseBody$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPostJsonDataTypesMapDecimalResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        data: z.string(),
        json: z.record(z.number().transform((v) => new Decimal$(v))),
    });

    export type Outbound = {
        data: string;
        json: { [k: string]: number };
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostJsonDataTypesMapDecimalResponseBody
    > = z.object({
        data: z.string(),
        json: z.record(
            z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
        ),
    });
}
