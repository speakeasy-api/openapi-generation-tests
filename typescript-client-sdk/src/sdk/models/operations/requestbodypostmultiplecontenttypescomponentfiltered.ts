/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * OK
 */
export type RequestBodyPostMultipleContentTypesComponentFilteredRes = {
  /**
   * A simple object that uses all our supported primitive types and enums and has optional properties.
   */
  json: shared.SimpleObject;
};

/** @internal */
export const RequestBodyPostMultipleContentTypesComponentFilteredRes$inboundSchema:
  z.ZodType<
    RequestBodyPostMultipleContentTypesComponentFilteredRes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    json: shared.SimpleObject$inboundSchema,
  });

/** @internal */
export type RequestBodyPostMultipleContentTypesComponentFilteredRes$Outbound = {
  json: shared.SimpleObject$Outbound;
};

/** @internal */
export const RequestBodyPostMultipleContentTypesComponentFilteredRes$outboundSchema:
  z.ZodType<
    RequestBodyPostMultipleContentTypesComponentFilteredRes$Outbound,
    z.ZodTypeDef,
    RequestBodyPostMultipleContentTypesComponentFilteredRes
  > = z.object({
    json: shared.SimpleObject$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostMultipleContentTypesComponentFilteredRes$ {
  /** @deprecated use `RequestBodyPostMultipleContentTypesComponentFilteredRes$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPostMultipleContentTypesComponentFilteredRes$inboundSchema;
  /** @deprecated use `RequestBodyPostMultipleContentTypesComponentFilteredRes$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPostMultipleContentTypesComponentFilteredRes$outboundSchema;
  /** @deprecated use `RequestBodyPostMultipleContentTypesComponentFilteredRes$Outbound` instead. */
  export type Outbound =
    RequestBodyPostMultipleContentTypesComponentFilteredRes$Outbound;
}

export function requestBodyPostMultipleContentTypesComponentFilteredResToJSON(
  requestBodyPostMultipleContentTypesComponentFilteredRes:
    RequestBodyPostMultipleContentTypesComponentFilteredRes,
): string {
  return JSON.stringify(
    RequestBodyPostMultipleContentTypesComponentFilteredRes$outboundSchema
      .parse(requestBodyPostMultipleContentTypesComponentFilteredRes),
  );
}

export function requestBodyPostMultipleContentTypesComponentFilteredResFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestBodyPostMultipleContentTypesComponentFilteredRes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyPostMultipleContentTypesComponentFilteredRes$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RequestBodyPostMultipleContentTypesComponentFilteredRes' from JSON`,
  );
}
