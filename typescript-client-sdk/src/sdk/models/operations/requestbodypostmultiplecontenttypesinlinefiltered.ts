/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type RequestBodyPostMultipleContentTypesInlineFilteredRequestBody = {
    bool: boolean;
    num: number;
    str: string;
};

/**
 * OK
 */
export type RequestBodyPostMultipleContentTypesInlineFilteredRes = {
    json?: { [k: string]: any } | undefined;
};

/** @internal */
export namespace RequestBodyPostMultipleContentTypesInlineFilteredRequestBody$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPostMultipleContentTypesInlineFilteredRequestBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        bool: z.boolean(),
        num: z.number(),
        str: z.string(),
    });

    export type Outbound = {
        bool: boolean;
        num: number;
        str: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostMultipleContentTypesInlineFilteredRequestBody
    > = z.object({
        bool: z.boolean(),
        num: z.number(),
        str: z.string(),
    });
}

/** @internal */
export namespace RequestBodyPostMultipleContentTypesInlineFilteredRes$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPostMultipleContentTypesInlineFilteredRes,
        z.ZodTypeDef,
        unknown
    > = z.object({
        json: z.record(z.any()).optional(),
    });

    export type Outbound = {
        json?: { [k: string]: any } | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostMultipleContentTypesInlineFilteredRes
    > = z.object({
        json: z.record(z.any()).optional(),
    });
}
