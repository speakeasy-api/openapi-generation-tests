/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RequestBodyPostMultipleContentTypesSplitFormRequestBody = {
  bool3: boolean;
  num3: number;
  str3: string;
};

/**
 * OK
 */
export type RequestBodyPostMultipleContentTypesSplitFormRes = {
  form?: { [k: string]: any } | undefined;
  json?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitFormRequestBody$inboundSchema:
  z.ZodType<
    RequestBodyPostMultipleContentTypesSplitFormRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    bool3: z.boolean(),
    num3: z.number(),
    str3: z.string(),
  });

/** @internal */
export type RequestBodyPostMultipleContentTypesSplitFormRequestBody$Outbound = {
  bool3: boolean;
  num3: number;
  str3: string;
};

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitFormRequestBody$outboundSchema:
  z.ZodType<
    RequestBodyPostMultipleContentTypesSplitFormRequestBody$Outbound,
    z.ZodTypeDef,
    RequestBodyPostMultipleContentTypesSplitFormRequestBody
  > = z.object({
    bool3: z.boolean(),
    num3: z.number(),
    str3: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostMultipleContentTypesSplitFormRequestBody$ {
  /** @deprecated use `RequestBodyPostMultipleContentTypesSplitFormRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPostMultipleContentTypesSplitFormRequestBody$inboundSchema;
  /** @deprecated use `RequestBodyPostMultipleContentTypesSplitFormRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPostMultipleContentTypesSplitFormRequestBody$outboundSchema;
  /** @deprecated use `RequestBodyPostMultipleContentTypesSplitFormRequestBody$Outbound` instead. */
  export type Outbound =
    RequestBodyPostMultipleContentTypesSplitFormRequestBody$Outbound;
}

export function requestBodyPostMultipleContentTypesSplitFormRequestBodyToJSON(
  requestBodyPostMultipleContentTypesSplitFormRequestBody:
    RequestBodyPostMultipleContentTypesSplitFormRequestBody,
): string {
  return JSON.stringify(
    RequestBodyPostMultipleContentTypesSplitFormRequestBody$outboundSchema
      .parse(requestBodyPostMultipleContentTypesSplitFormRequestBody),
  );
}

export function requestBodyPostMultipleContentTypesSplitFormRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestBodyPostMultipleContentTypesSplitFormRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyPostMultipleContentTypesSplitFormRequestBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RequestBodyPostMultipleContentTypesSplitFormRequestBody' from JSON`,
  );
}

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitFormRes$inboundSchema:
  z.ZodType<
    RequestBodyPostMultipleContentTypesSplitFormRes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    form: z.record(z.any()).optional(),
    json: z.nullable(z.record(z.any())).optional(),
  });

/** @internal */
export type RequestBodyPostMultipleContentTypesSplitFormRes$Outbound = {
  form?: { [k: string]: any } | undefined;
  json?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitFormRes$outboundSchema:
  z.ZodType<
    RequestBodyPostMultipleContentTypesSplitFormRes$Outbound,
    z.ZodTypeDef,
    RequestBodyPostMultipleContentTypesSplitFormRes
  > = z.object({
    form: z.record(z.any()).optional(),
    json: z.nullable(z.record(z.any())).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostMultipleContentTypesSplitFormRes$ {
  /** @deprecated use `RequestBodyPostMultipleContentTypesSplitFormRes$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPostMultipleContentTypesSplitFormRes$inboundSchema;
  /** @deprecated use `RequestBodyPostMultipleContentTypesSplitFormRes$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPostMultipleContentTypesSplitFormRes$outboundSchema;
  /** @deprecated use `RequestBodyPostMultipleContentTypesSplitFormRes$Outbound` instead. */
  export type Outbound =
    RequestBodyPostMultipleContentTypesSplitFormRes$Outbound;
}

export function requestBodyPostMultipleContentTypesSplitFormResToJSON(
  requestBodyPostMultipleContentTypesSplitFormRes:
    RequestBodyPostMultipleContentTypesSplitFormRes,
): string {
  return JSON.stringify(
    RequestBodyPostMultipleContentTypesSplitFormRes$outboundSchema.parse(
      requestBodyPostMultipleContentTypesSplitFormRes,
    ),
  );
}

export function requestBodyPostMultipleContentTypesSplitFormResFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestBodyPostMultipleContentTypesSplitFormRes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyPostMultipleContentTypesSplitFormRes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RequestBodyPostMultipleContentTypesSplitFormRes' from JSON`,
  );
}
