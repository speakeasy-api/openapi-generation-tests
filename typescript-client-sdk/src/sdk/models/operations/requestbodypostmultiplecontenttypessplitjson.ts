/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RequestBodyPostMultipleContentTypesSplitJsonRequestBody = {
  bool: boolean;
  num: number;
  str: string;
};

/**
 * OK
 */
export type RequestBodyPostMultipleContentTypesSplitJsonRes = {
  form?: { [k: string]: any } | undefined;
  json?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitJsonRequestBody$inboundSchema:
  z.ZodType<
    RequestBodyPostMultipleContentTypesSplitJsonRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    bool: z.boolean(),
    num: z.number(),
    str: z.string(),
  });

/** @internal */
export type RequestBodyPostMultipleContentTypesSplitJsonRequestBody$Outbound = {
  bool: boolean;
  num: number;
  str: string;
};

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitJsonRequestBody$outboundSchema:
  z.ZodType<
    RequestBodyPostMultipleContentTypesSplitJsonRequestBody$Outbound,
    z.ZodTypeDef,
    RequestBodyPostMultipleContentTypesSplitJsonRequestBody
  > = z.object({
    bool: z.boolean(),
    num: z.number(),
    str: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostMultipleContentTypesSplitJsonRequestBody$ {
  /** @deprecated use `RequestBodyPostMultipleContentTypesSplitJsonRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPostMultipleContentTypesSplitJsonRequestBody$inboundSchema;
  /** @deprecated use `RequestBodyPostMultipleContentTypesSplitJsonRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPostMultipleContentTypesSplitJsonRequestBody$outboundSchema;
  /** @deprecated use `RequestBodyPostMultipleContentTypesSplitJsonRequestBody$Outbound` instead. */
  export type Outbound =
    RequestBodyPostMultipleContentTypesSplitJsonRequestBody$Outbound;
}

export function requestBodyPostMultipleContentTypesSplitJsonRequestBodyToJSON(
  requestBodyPostMultipleContentTypesSplitJsonRequestBody:
    RequestBodyPostMultipleContentTypesSplitJsonRequestBody,
): string {
  return JSON.stringify(
    RequestBodyPostMultipleContentTypesSplitJsonRequestBody$outboundSchema
      .parse(requestBodyPostMultipleContentTypesSplitJsonRequestBody),
  );
}

export function requestBodyPostMultipleContentTypesSplitJsonRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestBodyPostMultipleContentTypesSplitJsonRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyPostMultipleContentTypesSplitJsonRequestBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RequestBodyPostMultipleContentTypesSplitJsonRequestBody' from JSON`,
  );
}

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitJsonRes$inboundSchema:
  z.ZodType<
    RequestBodyPostMultipleContentTypesSplitJsonRes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    form: z.record(z.any()).optional(),
    json: z.nullable(z.record(z.any())).optional(),
  });

/** @internal */
export type RequestBodyPostMultipleContentTypesSplitJsonRes$Outbound = {
  form?: { [k: string]: any } | undefined;
  json?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitJsonRes$outboundSchema:
  z.ZodType<
    RequestBodyPostMultipleContentTypesSplitJsonRes$Outbound,
    z.ZodTypeDef,
    RequestBodyPostMultipleContentTypesSplitJsonRes
  > = z.object({
    form: z.record(z.any()).optional(),
    json: z.nullable(z.record(z.any())).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostMultipleContentTypesSplitJsonRes$ {
  /** @deprecated use `RequestBodyPostMultipleContentTypesSplitJsonRes$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPostMultipleContentTypesSplitJsonRes$inboundSchema;
  /** @deprecated use `RequestBodyPostMultipleContentTypesSplitJsonRes$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPostMultipleContentTypesSplitJsonRes$outboundSchema;
  /** @deprecated use `RequestBodyPostMultipleContentTypesSplitJsonRes$Outbound` instead. */
  export type Outbound =
    RequestBodyPostMultipleContentTypesSplitJsonRes$Outbound;
}

export function requestBodyPostMultipleContentTypesSplitJsonResToJSON(
  requestBodyPostMultipleContentTypesSplitJsonRes:
    RequestBodyPostMultipleContentTypesSplitJsonRes,
): string {
  return JSON.stringify(
    RequestBodyPostMultipleContentTypesSplitJsonRes$outboundSchema.parse(
      requestBodyPostMultipleContentTypesSplitJsonRes,
    ),
  );
}

export function requestBodyPostMultipleContentTypesSplitJsonResFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestBodyPostMultipleContentTypesSplitJsonRes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyPostMultipleContentTypesSplitJsonRes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RequestBodyPostMultipleContentTypesSplitJsonRes' from JSON`,
  );
}
