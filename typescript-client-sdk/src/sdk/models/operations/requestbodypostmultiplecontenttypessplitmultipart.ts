/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RequestBodyPostMultipleContentTypesSplitMultipartRequestBody = {
  bool2: boolean;
  num2: number;
  str2: string;
};

/**
 * OK
 */
export type RequestBodyPostMultipleContentTypesSplitMultipartRes = {
  form?: { [k: string]: any } | undefined;
  json?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitMultipartRequestBody$inboundSchema:
  z.ZodType<
    RequestBodyPostMultipleContentTypesSplitMultipartRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    bool2: z.boolean(),
    num2: z.number(),
    str2: z.string(),
  });

/** @internal */
export type RequestBodyPostMultipleContentTypesSplitMultipartRequestBody$Outbound =
  {
    bool2: boolean;
    num2: number;
    str2: string;
  };

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitMultipartRequestBody$outboundSchema:
  z.ZodType<
    RequestBodyPostMultipleContentTypesSplitMultipartRequestBody$Outbound,
    z.ZodTypeDef,
    RequestBodyPostMultipleContentTypesSplitMultipartRequestBody
  > = z.object({
    bool2: z.boolean(),
    num2: z.number(),
    str2: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostMultipleContentTypesSplitMultipartRequestBody$ {
  /** @deprecated use `RequestBodyPostMultipleContentTypesSplitMultipartRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPostMultipleContentTypesSplitMultipartRequestBody$inboundSchema;
  /** @deprecated use `RequestBodyPostMultipleContentTypesSplitMultipartRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPostMultipleContentTypesSplitMultipartRequestBody$outboundSchema;
  /** @deprecated use `RequestBodyPostMultipleContentTypesSplitMultipartRequestBody$Outbound` instead. */
  export type Outbound =
    RequestBodyPostMultipleContentTypesSplitMultipartRequestBody$Outbound;
}

export function requestBodyPostMultipleContentTypesSplitMultipartRequestBodyToJSON(
  requestBodyPostMultipleContentTypesSplitMultipartRequestBody:
    RequestBodyPostMultipleContentTypesSplitMultipartRequestBody,
): string {
  return JSON.stringify(
    RequestBodyPostMultipleContentTypesSplitMultipartRequestBody$outboundSchema
      .parse(requestBodyPostMultipleContentTypesSplitMultipartRequestBody),
  );
}

export function requestBodyPostMultipleContentTypesSplitMultipartRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestBodyPostMultipleContentTypesSplitMultipartRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyPostMultipleContentTypesSplitMultipartRequestBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RequestBodyPostMultipleContentTypesSplitMultipartRequestBody' from JSON`,
  );
}

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitMultipartRes$inboundSchema:
  z.ZodType<
    RequestBodyPostMultipleContentTypesSplitMultipartRes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    form: z.record(z.any()).optional(),
    json: z.nullable(z.record(z.any())).optional(),
  });

/** @internal */
export type RequestBodyPostMultipleContentTypesSplitMultipartRes$Outbound = {
  form?: { [k: string]: any } | undefined;
  json?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitMultipartRes$outboundSchema:
  z.ZodType<
    RequestBodyPostMultipleContentTypesSplitMultipartRes$Outbound,
    z.ZodTypeDef,
    RequestBodyPostMultipleContentTypesSplitMultipartRes
  > = z.object({
    form: z.record(z.any()).optional(),
    json: z.nullable(z.record(z.any())).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostMultipleContentTypesSplitMultipartRes$ {
  /** @deprecated use `RequestBodyPostMultipleContentTypesSplitMultipartRes$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPostMultipleContentTypesSplitMultipartRes$inboundSchema;
  /** @deprecated use `RequestBodyPostMultipleContentTypesSplitMultipartRes$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPostMultipleContentTypesSplitMultipartRes$outboundSchema;
  /** @deprecated use `RequestBodyPostMultipleContentTypesSplitMultipartRes$Outbound` instead. */
  export type Outbound =
    RequestBodyPostMultipleContentTypesSplitMultipartRes$Outbound;
}

export function requestBodyPostMultipleContentTypesSplitMultipartResToJSON(
  requestBodyPostMultipleContentTypesSplitMultipartRes:
    RequestBodyPostMultipleContentTypesSplitMultipartRes,
): string {
  return JSON.stringify(
    RequestBodyPostMultipleContentTypesSplitMultipartRes$outboundSchema.parse(
      requestBodyPostMultipleContentTypesSplitMultipartRes,
    ),
  );
}

export function requestBodyPostMultipleContentTypesSplitMultipartResFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestBodyPostMultipleContentTypesSplitMultipartRes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyPostMultipleContentTypesSplitMultipartRes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RequestBodyPostMultipleContentTypesSplitMultipartRes' from JSON`,
  );
}
