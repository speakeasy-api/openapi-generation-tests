/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type RequestBodyPostMultipleContentTypesSplitMultipartRequestBody = {
    bool2: boolean;
    num2: number;
    str2: string;
};

/**
 * OK
 */
export type RequestBodyPostMultipleContentTypesSplitMultipartRes = {
    form?: { [k: string]: any } | undefined;
    json?: { [k: string]: any } | null | undefined;
};

export type RequestBodyPostMultipleContentTypesSplitMultipartResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: RequestBodyPostMultipleContentTypesSplitMultipartRes | undefined;
};

/** @internal */
export namespace RequestBodyPostMultipleContentTypesSplitMultipartRequestBody$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPostMultipleContentTypesSplitMultipartRequestBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            bool2: z.boolean(),
            num2: z.number(),
            str2: z.string(),
        })
        .transform((v) => {
            return {
                bool2: v.bool2,
                num2: v.num2,
                str2: v.str2,
            };
        });

    export type Outbound = {
        bool2: boolean;
        num2: number;
        str2: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostMultipleContentTypesSplitMultipartRequestBody
    > = z
        .object({
            bool2: z.boolean(),
            num2: z.number(),
            str2: z.string(),
        })
        .transform((v) => {
            return {
                bool2: v.bool2,
                num2: v.num2,
                str2: v.str2,
            };
        });
}

/** @internal */
export namespace RequestBodyPostMultipleContentTypesSplitMultipartRes$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPostMultipleContentTypesSplitMultipartRes,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            form: z.record(z.any()).optional(),
            json: z.nullable(z.record(z.any())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.form === undefined ? null : { form: v.form }),
                ...(v.json === undefined ? null : { json: v.json }),
            };
        });

    export type Outbound = {
        form?: { [k: string]: any } | undefined;
        json?: { [k: string]: any } | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostMultipleContentTypesSplitMultipartRes
    > = z
        .object({
            form: z.record(z.any()).optional(),
            json: z.nullable(z.record(z.any())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.form === undefined ? null : { form: v.form }),
                ...(v.json === undefined ? null : { json: v.json }),
            };
        });
}

/** @internal */
export namespace RequestBodyPostMultipleContentTypesSplitMultipartResponse$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPostMultipleContentTypesSplitMultipartResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z
                .lazy(() => RequestBodyPostMultipleContentTypesSplitMultipartRes$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: RequestBodyPostMultipleContentTypesSplitMultipartRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostMultipleContentTypesSplitMultipartResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z
                .lazy(() => RequestBodyPostMultipleContentTypesSplitMultipartRes$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
