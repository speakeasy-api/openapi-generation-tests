/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RequestBodyPostMultipleContentTypesSplitParamFormRequestBody = {
  bool3: boolean;
  num3: number;
  str3: string;
};

export type RequestBodyPostMultipleContentTypesSplitParamFormRequest = {
  requestBody: RequestBodyPostMultipleContentTypesSplitParamFormRequestBody;
  paramStr: string;
};

/**
 * OK
 */
export type RequestBodyPostMultipleContentTypesSplitParamFormRes = {
  args?: { [k: string]: string } | undefined;
  form?: { [k: string]: any } | undefined;
  json?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitParamFormRequestBody$inboundSchema:
  z.ZodType<
    RequestBodyPostMultipleContentTypesSplitParamFormRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    bool3: z.boolean(),
    num3: z.number(),
    str3: z.string(),
  });

/** @internal */
export type RequestBodyPostMultipleContentTypesSplitParamFormRequestBody$Outbound =
  {
    bool3: boolean;
    num3: number;
    str3: string;
  };

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitParamFormRequestBody$outboundSchema:
  z.ZodType<
    RequestBodyPostMultipleContentTypesSplitParamFormRequestBody$Outbound,
    z.ZodTypeDef,
    RequestBodyPostMultipleContentTypesSplitParamFormRequestBody
  > = z.object({
    bool3: z.boolean(),
    num3: z.number(),
    str3: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostMultipleContentTypesSplitParamFormRequestBody$ {
  /** @deprecated use `RequestBodyPostMultipleContentTypesSplitParamFormRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPostMultipleContentTypesSplitParamFormRequestBody$inboundSchema;
  /** @deprecated use `RequestBodyPostMultipleContentTypesSplitParamFormRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPostMultipleContentTypesSplitParamFormRequestBody$outboundSchema;
  /** @deprecated use `RequestBodyPostMultipleContentTypesSplitParamFormRequestBody$Outbound` instead. */
  export type Outbound =
    RequestBodyPostMultipleContentTypesSplitParamFormRequestBody$Outbound;
}

export function requestBodyPostMultipleContentTypesSplitParamFormRequestBodyToJSON(
  requestBodyPostMultipleContentTypesSplitParamFormRequestBody:
    RequestBodyPostMultipleContentTypesSplitParamFormRequestBody,
): string {
  return JSON.stringify(
    RequestBodyPostMultipleContentTypesSplitParamFormRequestBody$outboundSchema
      .parse(requestBodyPostMultipleContentTypesSplitParamFormRequestBody),
  );
}

export function requestBodyPostMultipleContentTypesSplitParamFormRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestBodyPostMultipleContentTypesSplitParamFormRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyPostMultipleContentTypesSplitParamFormRequestBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RequestBodyPostMultipleContentTypesSplitParamFormRequestBody' from JSON`,
  );
}

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitParamFormRequest$inboundSchema:
  z.ZodType<
    RequestBodyPostMultipleContentTypesSplitParamFormRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    RequestBody: z.lazy(() =>
      RequestBodyPostMultipleContentTypesSplitParamFormRequestBody$inboundSchema
    ),
    paramStr: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type RequestBodyPostMultipleContentTypesSplitParamFormRequest$Outbound =
  {
    RequestBody:
      RequestBodyPostMultipleContentTypesSplitParamFormRequestBody$Outbound;
    paramStr: string;
  };

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitParamFormRequest$outboundSchema:
  z.ZodType<
    RequestBodyPostMultipleContentTypesSplitParamFormRequest$Outbound,
    z.ZodTypeDef,
    RequestBodyPostMultipleContentTypesSplitParamFormRequest
  > = z.object({
    requestBody: z.lazy(() =>
      RequestBodyPostMultipleContentTypesSplitParamFormRequestBody$outboundSchema
    ),
    paramStr: z.string(),
  }).transform((v) => {
    return remap$(v, {
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostMultipleContentTypesSplitParamFormRequest$ {
  /** @deprecated use `RequestBodyPostMultipleContentTypesSplitParamFormRequest$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPostMultipleContentTypesSplitParamFormRequest$inboundSchema;
  /** @deprecated use `RequestBodyPostMultipleContentTypesSplitParamFormRequest$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPostMultipleContentTypesSplitParamFormRequest$outboundSchema;
  /** @deprecated use `RequestBodyPostMultipleContentTypesSplitParamFormRequest$Outbound` instead. */
  export type Outbound =
    RequestBodyPostMultipleContentTypesSplitParamFormRequest$Outbound;
}

export function requestBodyPostMultipleContentTypesSplitParamFormRequestToJSON(
  requestBodyPostMultipleContentTypesSplitParamFormRequest:
    RequestBodyPostMultipleContentTypesSplitParamFormRequest,
): string {
  return JSON.stringify(
    RequestBodyPostMultipleContentTypesSplitParamFormRequest$outboundSchema
      .parse(requestBodyPostMultipleContentTypesSplitParamFormRequest),
  );
}

export function requestBodyPostMultipleContentTypesSplitParamFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestBodyPostMultipleContentTypesSplitParamFormRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyPostMultipleContentTypesSplitParamFormRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RequestBodyPostMultipleContentTypesSplitParamFormRequest' from JSON`,
  );
}

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitParamFormRes$inboundSchema:
  z.ZodType<
    RequestBodyPostMultipleContentTypesSplitParamFormRes,
    z.ZodTypeDef,
    unknown
  > = z.object({
    args: z.record(z.string()).optional(),
    form: z.record(z.any()).optional(),
    json: z.nullable(z.record(z.any())).optional(),
  });

/** @internal */
export type RequestBodyPostMultipleContentTypesSplitParamFormRes$Outbound = {
  args?: { [k: string]: string } | undefined;
  form?: { [k: string]: any } | undefined;
  json?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitParamFormRes$outboundSchema:
  z.ZodType<
    RequestBodyPostMultipleContentTypesSplitParamFormRes$Outbound,
    z.ZodTypeDef,
    RequestBodyPostMultipleContentTypesSplitParamFormRes
  > = z.object({
    args: z.record(z.string()).optional(),
    form: z.record(z.any()).optional(),
    json: z.nullable(z.record(z.any())).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostMultipleContentTypesSplitParamFormRes$ {
  /** @deprecated use `RequestBodyPostMultipleContentTypesSplitParamFormRes$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPostMultipleContentTypesSplitParamFormRes$inboundSchema;
  /** @deprecated use `RequestBodyPostMultipleContentTypesSplitParamFormRes$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPostMultipleContentTypesSplitParamFormRes$outboundSchema;
  /** @deprecated use `RequestBodyPostMultipleContentTypesSplitParamFormRes$Outbound` instead. */
  export type Outbound =
    RequestBodyPostMultipleContentTypesSplitParamFormRes$Outbound;
}

export function requestBodyPostMultipleContentTypesSplitParamFormResToJSON(
  requestBodyPostMultipleContentTypesSplitParamFormRes:
    RequestBodyPostMultipleContentTypesSplitParamFormRes,
): string {
  return JSON.stringify(
    RequestBodyPostMultipleContentTypesSplitParamFormRes$outboundSchema.parse(
      requestBodyPostMultipleContentTypesSplitParamFormRes,
    ),
  );
}

export function requestBodyPostMultipleContentTypesSplitParamFormResFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestBodyPostMultipleContentTypesSplitParamFormRes,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyPostMultipleContentTypesSplitParamFormRes$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RequestBodyPostMultipleContentTypesSplitParamFormRes' from JSON`,
  );
}
