/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody = {
    bool: boolean;
    num: number;
    str: string;
};

export type RequestBodyPostMultipleContentTypesSplitParamJsonRequest = {
    requestBody: RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody;
    paramStr: string;
};

/**
 * OK
 */
export type RequestBodyPostMultipleContentTypesSplitParamJsonRes = {
    args?: { [k: string]: string } | undefined;
    form?: { [k: string]: any } | undefined;
    json?: { [k: string]: any } | null | undefined;
};

/** @internal */
export namespace RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        bool: z.boolean(),
        num: z.number(),
        str: z.string(),
    });

    export type Outbound = {
        bool: boolean;
        num: number;
        str: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody
    > = z.object({
        bool: z.boolean(),
        num: z.number(),
        str: z.string(),
    });
}

/** @internal */
export namespace RequestBodyPostMultipleContentTypesSplitParamJsonRequest$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPostMultipleContentTypesSplitParamJsonRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            RequestBody: z.lazy(
                () => RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody$.inboundSchema
            ),
            paramStr: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        RequestBody: RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody$.Outbound;
        paramStr: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostMultipleContentTypesSplitParamJsonRequest
    > = z
        .object({
            requestBody: z.lazy(
                () => RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody$.outboundSchema
            ),
            paramStr: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace RequestBodyPostMultipleContentTypesSplitParamJsonRes$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPostMultipleContentTypesSplitParamJsonRes,
        z.ZodTypeDef,
        unknown
    > = z.object({
        args: z.record(z.string()).optional(),
        form: z.record(z.any()).optional(),
        json: z.nullable(z.record(z.any())).optional(),
    });

    export type Outbound = {
        args?: { [k: string]: string } | undefined;
        form?: { [k: string]: any } | undefined;
        json?: { [k: string]: any } | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostMultipleContentTypesSplitParamJsonRes
    > = z.object({
        args: z.record(z.string()).optional(),
        form: z.record(z.any()).optional(),
        json: z.nullable(z.record(z.any())).optional(),
    });
}
