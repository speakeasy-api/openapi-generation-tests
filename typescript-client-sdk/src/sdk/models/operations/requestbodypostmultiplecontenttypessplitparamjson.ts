/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody = {
    bool: boolean;
    num: number;
    str: string;
};

export type RequestBodyPostMultipleContentTypesSplitParamJsonRequest = {
    requestBody: RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody;
    paramStr: string;
};

/**
 * OK
 */
export type RequestBodyPostMultipleContentTypesSplitParamJsonRes = {
    args?: { [k: string]: string } | undefined;
    form?: { [k: string]: any } | undefined;
    json?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody$inboundSchema: z.ZodType<
    RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    bool: z.boolean(),
    num: z.number(),
    str: z.string(),
});

/** @internal */
export type RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody$Outbound = {
    bool: boolean;
    num: number;
    str: string;
};

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody$outboundSchema: z.ZodType<
    RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody$Outbound,
    z.ZodTypeDef,
    RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody
> = z.object({
    bool: z.boolean(),
    num: z.number(),
    str: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody$ {
    /** @deprecated use `RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody$inboundSchema` instead. */
    export const inboundSchema =
        RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody$inboundSchema;
    /** @deprecated use `RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody$outboundSchema` instead. */
    export const outboundSchema =
        RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody$outboundSchema;
    /** @deprecated use `RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody$Outbound` instead. */
    export type Outbound = RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody$Outbound;
}

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitParamJsonRequest$inboundSchema: z.ZodType<
    RequestBodyPostMultipleContentTypesSplitParamJsonRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        RequestBody: z.lazy(
            () => RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody$inboundSchema
        ),
        paramStr: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            RequestBody: "requestBody",
        });
    });

/** @internal */
export type RequestBodyPostMultipleContentTypesSplitParamJsonRequest$Outbound = {
    RequestBody: RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody$Outbound;
    paramStr: string;
};

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitParamJsonRequest$outboundSchema: z.ZodType<
    RequestBodyPostMultipleContentTypesSplitParamJsonRequest$Outbound,
    z.ZodTypeDef,
    RequestBodyPostMultipleContentTypesSplitParamJsonRequest
> = z
    .object({
        requestBody: z.lazy(
            () => RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody$outboundSchema
        ),
        paramStr: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            requestBody: "RequestBody",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostMultipleContentTypesSplitParamJsonRequest$ {
    /** @deprecated use `RequestBodyPostMultipleContentTypesSplitParamJsonRequest$inboundSchema` instead. */
    export const inboundSchema =
        RequestBodyPostMultipleContentTypesSplitParamJsonRequest$inboundSchema;
    /** @deprecated use `RequestBodyPostMultipleContentTypesSplitParamJsonRequest$outboundSchema` instead. */
    export const outboundSchema =
        RequestBodyPostMultipleContentTypesSplitParamJsonRequest$outboundSchema;
    /** @deprecated use `RequestBodyPostMultipleContentTypesSplitParamJsonRequest$Outbound` instead. */
    export type Outbound = RequestBodyPostMultipleContentTypesSplitParamJsonRequest$Outbound;
}

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitParamJsonRes$inboundSchema: z.ZodType<
    RequestBodyPostMultipleContentTypesSplitParamJsonRes,
    z.ZodTypeDef,
    unknown
> = z.object({
    args: z.record(z.string()).optional(),
    form: z.record(z.any()).optional(),
    json: z.nullable(z.record(z.any())).optional(),
});

/** @internal */
export type RequestBodyPostMultipleContentTypesSplitParamJsonRes$Outbound = {
    args?: { [k: string]: string } | undefined;
    form?: { [k: string]: any } | undefined;
    json?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitParamJsonRes$outboundSchema: z.ZodType<
    RequestBodyPostMultipleContentTypesSplitParamJsonRes$Outbound,
    z.ZodTypeDef,
    RequestBodyPostMultipleContentTypesSplitParamJsonRes
> = z.object({
    args: z.record(z.string()).optional(),
    form: z.record(z.any()).optional(),
    json: z.nullable(z.record(z.any())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostMultipleContentTypesSplitParamJsonRes$ {
    /** @deprecated use `RequestBodyPostMultipleContentTypesSplitParamJsonRes$inboundSchema` instead. */
    export const inboundSchema = RequestBodyPostMultipleContentTypesSplitParamJsonRes$inboundSchema;
    /** @deprecated use `RequestBodyPostMultipleContentTypesSplitParamJsonRes$outboundSchema` instead. */
    export const outboundSchema =
        RequestBodyPostMultipleContentTypesSplitParamJsonRes$outboundSchema;
    /** @deprecated use `RequestBodyPostMultipleContentTypesSplitParamJsonRes$Outbound` instead. */
    export type Outbound = RequestBodyPostMultipleContentTypesSplitParamJsonRes$Outbound;
}
