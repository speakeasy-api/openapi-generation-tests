/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody = {
    bool2: boolean;
    num2: number;
    str2: string;
};

export type RequestBodyPostMultipleContentTypesSplitParamMultipartRequest = {
    requestBody: RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody;
    paramStr: string;
};

/**
 * OK
 */
export type RequestBodyPostMultipleContentTypesSplitParamMultipartRes = {
    args?: Record<string, string> | undefined;
    form?: Record<string, any> | undefined;
    json?: Record<string, any> | null | undefined;
};

export type RequestBodyPostMultipleContentTypesSplitParamMultipartResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: RequestBodyPostMultipleContentTypesSplitParamMultipartRes | undefined;
};

/** @internal */
export namespace RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody$ {
    export type Inbound = {
        bool2: boolean;
        num2: number;
        str2: string;
    };

    export const inboundSchema: z.ZodType<
        RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            bool2: z.boolean(),
            num2: z.number(),
            str2: z.string(),
        })
        .transform((v) => {
            return {
                bool2: v.bool2,
                num2: v.num2,
                str2: v.str2,
            };
        });

    export type Outbound = {
        bool2: boolean;
        num2: number;
        str2: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody
    > = z
        .object({
            bool2: z.boolean(),
            num2: z.number(),
            str2: z.string(),
        })
        .transform((v) => {
            return {
                bool2: v.bool2,
                num2: v.num2,
                str2: v.str2,
            };
        });
}

/** @internal */
export namespace RequestBodyPostMultipleContentTypesSplitParamMultipartRequest$ {
    export type Inbound = {
        RequestBody: RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody$.Inbound;
        paramStr: string;
    };

    export const inboundSchema: z.ZodType<
        RequestBodyPostMultipleContentTypesSplitParamMultipartRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            RequestBody: z.lazy(
                () =>
                    RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody$.inboundSchema
            ),
            paramStr: z.string(),
        })
        .transform((v) => {
            return {
                requestBody: v.RequestBody,
                paramStr: v.paramStr,
            };
        });

    export type Outbound = {
        RequestBody: RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody$.Outbound;
        paramStr: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostMultipleContentTypesSplitParamMultipartRequest
    > = z
        .object({
            requestBody: z.lazy(
                () =>
                    RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody$.outboundSchema
            ),
            paramStr: z.string(),
        })
        .transform((v) => {
            return {
                RequestBody: v.requestBody,
                paramStr: v.paramStr,
            };
        });
}

/** @internal */
export namespace RequestBodyPostMultipleContentTypesSplitParamMultipartRes$ {
    export type Inbound = {
        args?: Record<string, string> | undefined;
        form?: Record<string, any> | undefined;
        json?: Record<string, any> | null | undefined;
    };

    export const inboundSchema: z.ZodType<
        RequestBodyPostMultipleContentTypesSplitParamMultipartRes,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            args: z.record(z.string()).optional(),
            form: z.record(z.any()).optional(),
            json: z.nullable(z.record(z.any())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.args === undefined ? null : { args: v.args }),
                ...(v.form === undefined ? null : { form: v.form }),
                ...(v.json === undefined ? null : { json: v.json }),
            };
        });

    export type Outbound = {
        args?: Record<string, string> | undefined;
        form?: Record<string, any> | undefined;
        json?: Record<string, any> | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostMultipleContentTypesSplitParamMultipartRes
    > = z
        .object({
            args: z.record(z.string()).optional(),
            form: z.record(z.any()).optional(),
            json: z.nullable(z.record(z.any())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.args === undefined ? null : { args: v.args }),
                ...(v.form === undefined ? null : { form: v.form }),
                ...(v.json === undefined ? null : { json: v.json }),
            };
        });
}

/** @internal */
export namespace RequestBodyPostMultipleContentTypesSplitParamMultipartResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        res?: RequestBodyPostMultipleContentTypesSplitParamMultipartRes$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        RequestBodyPostMultipleContentTypesSplitParamMultipartResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z
                .lazy(
                    () => RequestBodyPostMultipleContentTypesSplitParamMultipartRes$.inboundSchema
                )
                .optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: RequestBodyPostMultipleContentTypesSplitParamMultipartRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostMultipleContentTypesSplitParamMultipartResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z
                .lazy(
                    () => RequestBodyPostMultipleContentTypesSplitParamMultipartRes$.outboundSchema
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
