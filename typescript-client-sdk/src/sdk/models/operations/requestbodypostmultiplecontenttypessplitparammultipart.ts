/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody = {
    bool2: boolean;
    num2: number;
    str2: string;
};

export type RequestBodyPostMultipleContentTypesSplitParamMultipartRequest = {
    requestBody: RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody;
    paramStr: string;
};

/**
 * OK
 */
export type RequestBodyPostMultipleContentTypesSplitParamMultipartRes = {
    args?: { [k: string]: string } | undefined;
    form?: { [k: string]: any } | undefined;
    json?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody$inboundSchema: z.ZodType<
    RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    bool2: z.boolean(),
    num2: z.number(),
    str2: z.string(),
});

/** @internal */
export type RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody$Outbound = {
    bool2: boolean;
    num2: number;
    str2: string;
};

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody$outboundSchema: z.ZodType<
    RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody$Outbound,
    z.ZodTypeDef,
    RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody
> = z.object({
    bool2: z.boolean(),
    num2: z.number(),
    str2: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody$ {
    /** @deprecated use `RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody$inboundSchema` instead. */
    export const inboundSchema =
        RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody$inboundSchema;
    /** @deprecated use `RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody$outboundSchema` instead. */
    export const outboundSchema =
        RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody$outboundSchema;
    /** @deprecated use `RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody$Outbound` instead. */
    export type Outbound =
        RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody$Outbound;
}

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitParamMultipartRequest$inboundSchema: z.ZodType<
    RequestBodyPostMultipleContentTypesSplitParamMultipartRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        RequestBody: z.lazy(
            () => RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody$inboundSchema
        ),
        paramStr: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            RequestBody: "requestBody",
        });
    });

/** @internal */
export type RequestBodyPostMultipleContentTypesSplitParamMultipartRequest$Outbound = {
    RequestBody: RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody$Outbound;
    paramStr: string;
};

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitParamMultipartRequest$outboundSchema: z.ZodType<
    RequestBodyPostMultipleContentTypesSplitParamMultipartRequest$Outbound,
    z.ZodTypeDef,
    RequestBodyPostMultipleContentTypesSplitParamMultipartRequest
> = z
    .object({
        requestBody: z.lazy(
            () => RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody$outboundSchema
        ),
        paramStr: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            requestBody: "RequestBody",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostMultipleContentTypesSplitParamMultipartRequest$ {
    /** @deprecated use `RequestBodyPostMultipleContentTypesSplitParamMultipartRequest$inboundSchema` instead. */
    export const inboundSchema =
        RequestBodyPostMultipleContentTypesSplitParamMultipartRequest$inboundSchema;
    /** @deprecated use `RequestBodyPostMultipleContentTypesSplitParamMultipartRequest$outboundSchema` instead. */
    export const outboundSchema =
        RequestBodyPostMultipleContentTypesSplitParamMultipartRequest$outboundSchema;
    /** @deprecated use `RequestBodyPostMultipleContentTypesSplitParamMultipartRequest$Outbound` instead. */
    export type Outbound = RequestBodyPostMultipleContentTypesSplitParamMultipartRequest$Outbound;
}

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitParamMultipartRes$inboundSchema: z.ZodType<
    RequestBodyPostMultipleContentTypesSplitParamMultipartRes,
    z.ZodTypeDef,
    unknown
> = z.object({
    args: z.record(z.string()).optional(),
    form: z.record(z.any()).optional(),
    json: z.nullable(z.record(z.any())).optional(),
});

/** @internal */
export type RequestBodyPostMultipleContentTypesSplitParamMultipartRes$Outbound = {
    args?: { [k: string]: string } | undefined;
    form?: { [k: string]: any } | undefined;
    json?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const RequestBodyPostMultipleContentTypesSplitParamMultipartRes$outboundSchema: z.ZodType<
    RequestBodyPostMultipleContentTypesSplitParamMultipartRes$Outbound,
    z.ZodTypeDef,
    RequestBodyPostMultipleContentTypesSplitParamMultipartRes
> = z.object({
    args: z.record(z.string()).optional(),
    form: z.record(z.any()).optional(),
    json: z.nullable(z.record(z.any())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostMultipleContentTypesSplitParamMultipartRes$ {
    /** @deprecated use `RequestBodyPostMultipleContentTypesSplitParamMultipartRes$inboundSchema` instead. */
    export const inboundSchema =
        RequestBodyPostMultipleContentTypesSplitParamMultipartRes$inboundSchema;
    /** @deprecated use `RequestBodyPostMultipleContentTypesSplitParamMultipartRes$outboundSchema` instead. */
    export const outboundSchema =
        RequestBodyPostMultipleContentTypesSplitParamMultipartRes$outboundSchema;
    /** @deprecated use `RequestBodyPostMultipleContentTypesSplitParamMultipartRes$Outbound` instead. */
    export type Outbound = RequestBodyPostMultipleContentTypesSplitParamMultipartRes$Outbound;
}
