/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody = {
    bool2: boolean;
    num2: number;
    str2: string;
};

export type RequestBodyPostMultipleContentTypesSplitParamMultipartRequest = {
    requestBody: RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody;
    paramStr: string;
};

/**
 * OK
 */
export type RequestBodyPostMultipleContentTypesSplitParamMultipartRes = {
    args?: { [k: string]: string } | undefined;
    form?: { [k: string]: any } | undefined;
    json?: { [k: string]: any } | null | undefined;
};

/** @internal */
export namespace RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        bool2: z.boolean(),
        num2: z.number(),
        str2: z.string(),
    });

    export type Outbound = {
        bool2: boolean;
        num2: number;
        str2: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody
    > = z.object({
        bool2: z.boolean(),
        num2: z.number(),
        str2: z.string(),
    });
}

/** @internal */
export namespace RequestBodyPostMultipleContentTypesSplitParamMultipartRequest$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPostMultipleContentTypesSplitParamMultipartRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            RequestBody: z.lazy(
                () =>
                    RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody$.inboundSchema
            ),
            paramStr: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        RequestBody: RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody$.Outbound;
        paramStr: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostMultipleContentTypesSplitParamMultipartRequest
    > = z
        .object({
            requestBody: z.lazy(
                () =>
                    RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody$.outboundSchema
            ),
            paramStr: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace RequestBodyPostMultipleContentTypesSplitParamMultipartRes$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPostMultipleContentTypesSplitParamMultipartRes,
        z.ZodTypeDef,
        unknown
    > = z.object({
        args: z.record(z.string()).optional(),
        form: z.record(z.any()).optional(),
        json: z.nullable(z.record(z.any())).optional(),
    });

    export type Outbound = {
        args?: { [k: string]: string } | undefined;
        form?: { [k: string]: any } | undefined;
        json?: { [k: string]: any } | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPostMultipleContentTypesSplitParamMultipartRes
    > = z.object({
        args: z.record(z.string()).optional(),
        form: z.record(z.any()).optional(),
        json: z.nullable(z.record(z.any())).optional(),
    });
}
