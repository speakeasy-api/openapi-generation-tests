/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * OK
 */
export type RequestBodyPostNullArrayResponseBody = {
  data: string;
};

/** @internal */
export const RequestBodyPostNullArrayResponseBody$inboundSchema: z.ZodType<
  RequestBodyPostNullArrayResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.string(),
});

/** @internal */
export type RequestBodyPostNullArrayResponseBody$Outbound = {
  data: string;
};

/** @internal */
export const RequestBodyPostNullArrayResponseBody$outboundSchema: z.ZodType<
  RequestBodyPostNullArrayResponseBody$Outbound,
  z.ZodTypeDef,
  RequestBodyPostNullArrayResponseBody
> = z.object({
  data: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostNullArrayResponseBody$ {
  /** @deprecated use `RequestBodyPostNullArrayResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPostNullArrayResponseBody$inboundSchema;
  /** @deprecated use `RequestBodyPostNullArrayResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPostNullArrayResponseBody$outboundSchema;
  /** @deprecated use `RequestBodyPostNullArrayResponseBody$Outbound` instead. */
  export type Outbound = RequestBodyPostNullArrayResponseBody$Outbound;
}

export function requestBodyPostNullArrayResponseBodyToJSON(
  requestBodyPostNullArrayResponseBody: RequestBodyPostNullArrayResponseBody,
): string {
  return JSON.stringify(
    RequestBodyPostNullArrayResponseBody$outboundSchema.parse(
      requestBodyPostNullArrayResponseBody,
    ),
  );
}

export function requestBodyPostNullArrayResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RequestBodyPostNullArrayResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyPostNullArrayResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestBodyPostNullArrayResponseBody' from JSON`,
  );
}
