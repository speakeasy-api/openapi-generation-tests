/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * OK
 */
export type RequestBodyPostNullDictionaryResponseBody = {
  data: string;
};

/** @internal */
export const RequestBodyPostNullDictionaryResponseBody$inboundSchema: z.ZodType<
  RequestBodyPostNullDictionaryResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.string(),
});

/** @internal */
export type RequestBodyPostNullDictionaryResponseBody$Outbound = {
  data: string;
};

/** @internal */
export const RequestBodyPostNullDictionaryResponseBody$outboundSchema:
  z.ZodType<
    RequestBodyPostNullDictionaryResponseBody$Outbound,
    z.ZodTypeDef,
    RequestBodyPostNullDictionaryResponseBody
  > = z.object({
    data: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostNullDictionaryResponseBody$ {
  /** @deprecated use `RequestBodyPostNullDictionaryResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPostNullDictionaryResponseBody$inboundSchema;
  /** @deprecated use `RequestBodyPostNullDictionaryResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPostNullDictionaryResponseBody$outboundSchema;
  /** @deprecated use `RequestBodyPostNullDictionaryResponseBody$Outbound` instead. */
  export type Outbound = RequestBodyPostNullDictionaryResponseBody$Outbound;
}

export function requestBodyPostNullDictionaryResponseBodyToJSON(
  requestBodyPostNullDictionaryResponseBody:
    RequestBodyPostNullDictionaryResponseBody,
): string {
  return JSON.stringify(
    RequestBodyPostNullDictionaryResponseBody$outboundSchema.parse(
      requestBodyPostNullDictionaryResponseBody,
    ),
  );
}

export function requestBodyPostNullDictionaryResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestBodyPostNullDictionaryResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyPostNullDictionaryResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RequestBodyPostNullDictionaryResponseBody' from JSON`,
  );
}
