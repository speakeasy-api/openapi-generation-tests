/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * OK
 */
export type RequestBodyPostWildcardRes = {
  data?: string | undefined;
  headers?: { [k: string]: any } | undefined;
};

/** @internal */
export const RequestBodyPostWildcardRes$inboundSchema: z.ZodType<
  RequestBodyPostWildcardRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.string().optional(),
  headers: z.record(z.any()).optional(),
});

/** @internal */
export type RequestBodyPostWildcardRes$Outbound = {
  data?: string | undefined;
  headers?: { [k: string]: any } | undefined;
};

/** @internal */
export const RequestBodyPostWildcardRes$outboundSchema: z.ZodType<
  RequestBodyPostWildcardRes$Outbound,
  z.ZodTypeDef,
  RequestBodyPostWildcardRes
> = z.object({
  data: z.string().optional(),
  headers: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPostWildcardRes$ {
  /** @deprecated use `RequestBodyPostWildcardRes$inboundSchema` instead. */
  export const inboundSchema = RequestBodyPostWildcardRes$inboundSchema;
  /** @deprecated use `RequestBodyPostWildcardRes$outboundSchema` instead. */
  export const outboundSchema = RequestBodyPostWildcardRes$outboundSchema;
  /** @deprecated use `RequestBodyPostWildcardRes$Outbound` instead. */
  export type Outbound = RequestBodyPostWildcardRes$Outbound;
}

export function requestBodyPostWildcardResToJSON(
  requestBodyPostWildcardRes: RequestBodyPostWildcardRes,
): string {
  return JSON.stringify(
    RequestBodyPostWildcardRes$outboundSchema.parse(requestBodyPostWildcardRes),
  );
}

export function requestBodyPostWildcardResFromJSON(
  jsonString: string,
): SafeParseResult<RequestBodyPostWildcardRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestBodyPostWildcardRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestBodyPostWildcardRes' from JSON`,
  );
}
