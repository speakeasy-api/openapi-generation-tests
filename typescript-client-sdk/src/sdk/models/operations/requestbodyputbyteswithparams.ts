/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../../lib/base64";
import * as z from "zod";

export type RequestBodyPutBytesWithParamsRequest = {
    requestBody: Uint8Array | string;
    queryStringParam: string;
};

export type RequestBodyPutBytesWithParamsArgs = {
    queryStringParam: string;
};

/**
 * OK
 */
export type RequestBodyPutBytesWithParamsRes = {
    args: RequestBodyPutBytesWithParamsArgs;
    data: string;
};

export type RequestBodyPutBytesWithParamsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: RequestBodyPutBytesWithParamsRes | undefined;
};

/** @internal */
export namespace RequestBodyPutBytesWithParamsRequest$ {
    export type Inbound = {
        RequestBody: Uint8Array | string;
        queryStringParam: string;
    };

    export const inboundSchema: z.ZodType<
        RequestBodyPutBytesWithParamsRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            RequestBody: b64$.zodInbound,
            queryStringParam: z.string(),
        })
        .transform((v) => {
            return {
                requestBody: v.RequestBody,
                queryStringParam: v.queryStringParam,
            };
        });

    export type Outbound = {
        RequestBody: Uint8Array;
        queryStringParam: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPutBytesWithParamsRequest
    > = z
        .object({
            requestBody: b64$.zodOutbound,
            queryStringParam: z.string(),
        })
        .transform((v) => {
            return {
                RequestBody: v.requestBody,
                queryStringParam: v.queryStringParam,
            };
        });
}

/** @internal */
export namespace RequestBodyPutBytesWithParamsArgs$ {
    export type Inbound = {
        queryStringParam: string;
    };

    export const inboundSchema: z.ZodType<
        RequestBodyPutBytesWithParamsArgs,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            queryStringParam: z.string(),
        })
        .transform((v) => {
            return {
                queryStringParam: v.queryStringParam,
            };
        });

    export type Outbound = {
        queryStringParam: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPutBytesWithParamsArgs
    > = z
        .object({
            queryStringParam: z.string(),
        })
        .transform((v) => {
            return {
                queryStringParam: v.queryStringParam,
            };
        });
}

/** @internal */
export namespace RequestBodyPutBytesWithParamsRes$ {
    export type Inbound = {
        args: RequestBodyPutBytesWithParamsArgs$.Inbound;
        data: string;
    };

    export const inboundSchema: z.ZodType<RequestBodyPutBytesWithParamsRes, z.ZodTypeDef, Inbound> =
        z
            .object({
                args: z.lazy(() => RequestBodyPutBytesWithParamsArgs$.inboundSchema),
                data: z.string(),
            })
            .transform((v) => {
                return {
                    args: v.args,
                    data: v.data,
                };
            });

    export type Outbound = {
        args: RequestBodyPutBytesWithParamsArgs$.Outbound;
        data: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPutBytesWithParamsRes
    > = z
        .object({
            args: z.lazy(() => RequestBodyPutBytesWithParamsArgs$.outboundSchema),
            data: z.string(),
        })
        .transform((v) => {
            return {
                args: v.args,
                data: v.data,
            };
        });
}

/** @internal */
export namespace RequestBodyPutBytesWithParamsResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        res?: RequestBodyPutBytesWithParamsRes$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        RequestBodyPutBytesWithParamsResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => RequestBodyPutBytesWithParamsRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: RequestBodyPutBytesWithParamsRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPutBytesWithParamsResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => RequestBodyPutBytesWithParamsRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
