/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../../lib/base64.js";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type RequestBodyPutBytesWithParamsRequest = {
    requestBody: Uint8Array | string;
    queryStringParam: string;
};

export type RequestBodyPutBytesWithParamsArgs = {
    queryStringParam: string;
};

/**
 * OK
 */
export type RequestBodyPutBytesWithParamsRes = {
    args: RequestBodyPutBytesWithParamsArgs;
    data: string;
};

/** @internal */
export namespace RequestBodyPutBytesWithParamsRequest$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPutBytesWithParamsRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            RequestBody: b64$.zodInbound,
            queryStringParam: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        RequestBody: Uint8Array;
        queryStringParam: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPutBytesWithParamsRequest
    > = z
        .object({
            requestBody: b64$.zodOutbound,
            queryStringParam: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace RequestBodyPutBytesWithParamsArgs$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPutBytesWithParamsArgs,
        z.ZodTypeDef,
        unknown
    > = z.object({
        queryStringParam: z.string(),
    });

    export type Outbound = {
        queryStringParam: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPutBytesWithParamsArgs
    > = z.object({
        queryStringParam: z.string(),
    });
}

/** @internal */
export namespace RequestBodyPutBytesWithParamsRes$ {
    export const inboundSchema: z.ZodType<RequestBodyPutBytesWithParamsRes, z.ZodTypeDef, unknown> =
        z.object({
            args: z.lazy(() => RequestBodyPutBytesWithParamsArgs$.inboundSchema),
            data: z.string(),
        });

    export type Outbound = {
        args: RequestBodyPutBytesWithParamsArgs$.Outbound;
        data: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPutBytesWithParamsRes
    > = z.object({
        args: z.lazy(() => RequestBodyPutBytesWithParamsArgs$.outboundSchema),
        data: z.string(),
    });
}
