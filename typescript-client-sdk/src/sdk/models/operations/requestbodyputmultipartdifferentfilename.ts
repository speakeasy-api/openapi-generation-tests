/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../../lib/base64.js";
import { blobLikeSchema } from "../../types/blobs.js";
import * as z from "zod";

export type DifferentFileName = {
    content: Uint8Array | string;
    fileName: string;
};

export type RequestBodyPutMultipartDifferentFileNameRequestBody = {
    differentFileName?: DifferentFileName | Blob | undefined;
};

/**
 * OK
 */
export type RequestBodyPutMultipartDifferentFileNameRes = {
    files: { [k: string]: string };
};

/** @internal */
export namespace DifferentFileName$ {
    export const inboundSchema: z.ZodType<DifferentFileName, z.ZodTypeDef, unknown> = z.object({
        content: b64$.zodInbound,
        fileName: z.string(),
    });

    export type Outbound = {
        content: Uint8Array;
        fileName: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DifferentFileName> = z.object({
        content: b64$.zodOutbound,
        fileName: z.string(),
    });
}

/** @internal */
export namespace RequestBodyPutMultipartDifferentFileNameRequestBody$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPutMultipartDifferentFileNameRequestBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        differentFileName: z.lazy(() => DifferentFileName$.inboundSchema).optional(),
    });

    export type Outbound = {
        differentFileName?: DifferentFileName$.Outbound | Blob | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPutMultipartDifferentFileNameRequestBody
    > = z.object({
        differentFileName: z
            .lazy(() => DifferentFileName$.outboundSchema)
            .or(blobLikeSchema)
            .optional(),
    });
}

/** @internal */
export namespace RequestBodyPutMultipartDifferentFileNameRes$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPutMultipartDifferentFileNameRes,
        z.ZodTypeDef,
        unknown
    > = z.object({
        files: z.record(z.string()),
    });

    export type Outbound = {
        files: { [k: string]: string };
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPutMultipartDifferentFileNameRes
    > = z.object({
        files: z.record(z.string()),
    });
}
