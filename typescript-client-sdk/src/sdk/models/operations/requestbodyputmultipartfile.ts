/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import * as b64$ from "../../../lib/base64.js";
import { blobLikeSchema } from "../../types/blobs.js";
import * as z from "zod";

export type FileT = {
    content: Uint8Array | string;
    fileName: string;
};

export type RequestBodyPutMultipartFileRequestBody = {
    file?: FileT | Blob | undefined;
};

/**
 * OK
 */
export type RequestBodyPutMultipartFileRes = {
    files: { [k: string]: string };
};

/** @internal */
export const FileT$inboundSchema: z.ZodType<FileT, z.ZodTypeDef, unknown> = z.object({
    content: b64$.zodInbound,
    fileName: z.string(),
});

/** @internal */
export type FileT$Outbound = {
    content: Uint8Array;
    fileName: string;
};

/** @internal */
export const FileT$outboundSchema: z.ZodType<FileT$Outbound, z.ZodTypeDef, FileT> = z.object({
    content: b64$.zodOutbound,
    fileName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileT$ {
    /** @deprecated use `FileT$inboundSchema` instead. */
    export const inboundSchema = FileT$inboundSchema;
    /** @deprecated use `FileT$outboundSchema` instead. */
    export const outboundSchema = FileT$outboundSchema;
    /** @deprecated use `FileT$Outbound` instead. */
    export type Outbound = FileT$Outbound;
}

/** @internal */
export const RequestBodyPutMultipartFileRequestBody$inboundSchema: z.ZodType<
    RequestBodyPutMultipartFileRequestBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    file: z.lazy(() => FileT$inboundSchema).optional(),
});

/** @internal */
export type RequestBodyPutMultipartFileRequestBody$Outbound = {
    file?: FileT$Outbound | Blob | undefined;
};

/** @internal */
export const RequestBodyPutMultipartFileRequestBody$outboundSchema: z.ZodType<
    RequestBodyPutMultipartFileRequestBody$Outbound,
    z.ZodTypeDef,
    RequestBodyPutMultipartFileRequestBody
> = z.object({
    file: z
        .lazy(() => FileT$outboundSchema)
        .or(blobLikeSchema)
        .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPutMultipartFileRequestBody$ {
    /** @deprecated use `RequestBodyPutMultipartFileRequestBody$inboundSchema` instead. */
    export const inboundSchema = RequestBodyPutMultipartFileRequestBody$inboundSchema;
    /** @deprecated use `RequestBodyPutMultipartFileRequestBody$outboundSchema` instead. */
    export const outboundSchema = RequestBodyPutMultipartFileRequestBody$outboundSchema;
    /** @deprecated use `RequestBodyPutMultipartFileRequestBody$Outbound` instead. */
    export type Outbound = RequestBodyPutMultipartFileRequestBody$Outbound;
}

/** @internal */
export const RequestBodyPutMultipartFileRes$inboundSchema: z.ZodType<
    RequestBodyPutMultipartFileRes,
    z.ZodTypeDef,
    unknown
> = z.object({
    files: z.record(z.string()),
});

/** @internal */
export type RequestBodyPutMultipartFileRes$Outbound = {
    files: { [k: string]: string };
};

/** @internal */
export const RequestBodyPutMultipartFileRes$outboundSchema: z.ZodType<
    RequestBodyPutMultipartFileRes$Outbound,
    z.ZodTypeDef,
    RequestBodyPutMultipartFileRes
> = z.object({
    files: z.record(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPutMultipartFileRes$ {
    /** @deprecated use `RequestBodyPutMultipartFileRes$inboundSchema` instead. */
    export const inboundSchema = RequestBodyPutMultipartFileRes$inboundSchema;
    /** @deprecated use `RequestBodyPutMultipartFileRes$outboundSchema` instead. */
    export const outboundSchema = RequestBodyPutMultipartFileRes$outboundSchema;
    /** @deprecated use `RequestBodyPutMultipartFileRes$Outbound` instead. */
    export type Outbound = RequestBodyPutMultipartFileRes$Outbound;
}
