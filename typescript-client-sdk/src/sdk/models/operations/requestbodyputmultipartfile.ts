/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../../lib/base64";
import { blobLikeSchema } from "../../../sdk/types";
import { z } from "zod";

export type FileT = {
    content: Uint8Array | string;
    fileName: string;
};

export type RequestBodyPutMultipartFileRequestBody = {
    file?: FileT | Blob | undefined;
};

/**
 * OK
 */
export type RequestBodyPutMultipartFileRes = {
    files: Record<string, string>;
};

export type RequestBodyPutMultipartFileResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: RequestBodyPutMultipartFileRes | undefined;
};

/** @internal */
export namespace FileT$ {
    export type Inbound = {
        content: Uint8Array | string;
        fileName: string;
    };

    export const inboundSchema: z.ZodType<FileT, z.ZodTypeDef, Inbound> = z
        .object({
            content: b64$.zodInbound,
            fileName: z.string(),
        })
        .transform((v) => {
            return {
                content: v.content,
                fileName: v.fileName,
            };
        });

    export type Outbound = {
        content: Uint8Array;
        fileName: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FileT> = z
        .object({
            content: b64$.zodOutbound,
            fileName: z.string(),
        })
        .transform((v) => {
            return {
                content: v.content,
                fileName: v.fileName,
            };
        });
}

/** @internal */
export namespace RequestBodyPutMultipartFileRequestBody$ {
    export type Inbound = {
        file?: FileT$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        RequestBodyPutMultipartFileRequestBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            file: z.lazy(() => FileT$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.file === undefined ? null : { file: v.file }),
            };
        });

    export type Outbound = {
        file?: FileT$.Outbound | Blob | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPutMultipartFileRequestBody
    > = z
        .object({
            file: z
                .lazy(() => FileT$.outboundSchema)
                .or(blobLikeSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.file === undefined ? null : { file: v.file }),
            };
        });
}

/** @internal */
export namespace RequestBodyPutMultipartFileRes$ {
    export type Inbound = {
        files: Record<string, string>;
    };

    export const inboundSchema: z.ZodType<RequestBodyPutMultipartFileRes, z.ZodTypeDef, Inbound> = z
        .object({
            files: z.record(z.string()),
        })
        .transform((v) => {
            return {
                files: v.files,
            };
        });

    export type Outbound = {
        files: Record<string, string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RequestBodyPutMultipartFileRes> =
        z
            .object({
                files: z.record(z.string()),
            })
            .transform((v) => {
                return {
                    files: v.files,
                };
            });
}

/** @internal */
export namespace RequestBodyPutMultipartFileResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        res?: RequestBodyPutMultipartFileRes$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        RequestBodyPutMultipartFileResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => RequestBodyPutMultipartFileRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: RequestBodyPutMultipartFileRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPutMultipartFileResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => RequestBodyPutMultipartFileRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
