/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../../lib/base64.js";
import { blobLikeSchema } from "../../types/blobs.js";
import * as z from "zod";

export type FileT = {
    content: Uint8Array | string;
    fileName: string;
};

export type RequestBodyPutMultipartFileRequestBody = {
    file?: FileT | Blob | undefined;
};

/**
 * OK
 */
export type RequestBodyPutMultipartFileRes = {
    files: { [k: string]: string };
};

/** @internal */
export namespace FileT$ {
    export const inboundSchema: z.ZodType<FileT, z.ZodTypeDef, unknown> = z.object({
        content: b64$.zodInbound,
        fileName: z.string(),
    });

    export type Outbound = {
        content: Uint8Array;
        fileName: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FileT> = z.object({
        content: b64$.zodOutbound,
        fileName: z.string(),
    });
}

/** @internal */
export namespace RequestBodyPutMultipartFileRequestBody$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPutMultipartFileRequestBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        file: z.lazy(() => FileT$.inboundSchema).optional(),
    });

    export type Outbound = {
        file?: FileT$.Outbound | Blob | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPutMultipartFileRequestBody
    > = z.object({
        file: z
            .lazy(() => FileT$.outboundSchema)
            .or(blobLikeSchema)
            .optional(),
    });
}

/** @internal */
export namespace RequestBodyPutMultipartFileRes$ {
    export const inboundSchema: z.ZodType<RequestBodyPutMultipartFileRes, z.ZodTypeDef, unknown> =
        z.object({
            files: z.record(z.string()),
        });

    export type Outbound = {
        files: { [k: string]: string };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RequestBodyPutMultipartFileRes> =
        z.object({
            files: z.record(z.string()),
        });
}
