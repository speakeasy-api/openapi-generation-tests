/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type RequestBodyPutMultipartFileRefRequestBody = {
  file?: shared.BinaryString | Blob | undefined;
};

/**
 * OK
 */
export type RequestBodyPutMultipartFileRefRes = {
  files: { [k: string]: string };
};

/** @internal */
export const RequestBodyPutMultipartFileRefRequestBody$inboundSchema: z.ZodType<
  RequestBodyPutMultipartFileRefRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  file: shared.BinaryString$inboundSchema.optional(),
});

/** @internal */
export type RequestBodyPutMultipartFileRefRequestBody$Outbound = {
  file?: shared.BinaryString$Outbound | Blob | undefined;
};

/** @internal */
export const RequestBodyPutMultipartFileRefRequestBody$outboundSchema:
  z.ZodType<
    RequestBodyPutMultipartFileRefRequestBody$Outbound,
    z.ZodTypeDef,
    RequestBodyPutMultipartFileRefRequestBody
  > = z.object({
    file: shared.BinaryString$outboundSchema.or(blobLikeSchema).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPutMultipartFileRefRequestBody$ {
  /** @deprecated use `RequestBodyPutMultipartFileRefRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPutMultipartFileRefRequestBody$inboundSchema;
  /** @deprecated use `RequestBodyPutMultipartFileRefRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPutMultipartFileRefRequestBody$outboundSchema;
  /** @deprecated use `RequestBodyPutMultipartFileRefRequestBody$Outbound` instead. */
  export type Outbound = RequestBodyPutMultipartFileRefRequestBody$Outbound;
}

export function requestBodyPutMultipartFileRefRequestBodyToJSON(
  requestBodyPutMultipartFileRefRequestBody:
    RequestBodyPutMultipartFileRefRequestBody,
): string {
  return JSON.stringify(
    RequestBodyPutMultipartFileRefRequestBody$outboundSchema.parse(
      requestBodyPutMultipartFileRefRequestBody,
    ),
  );
}

export function requestBodyPutMultipartFileRefRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  RequestBodyPutMultipartFileRefRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RequestBodyPutMultipartFileRefRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RequestBodyPutMultipartFileRefRequestBody' from JSON`,
  );
}

/** @internal */
export const RequestBodyPutMultipartFileRefRes$inboundSchema: z.ZodType<
  RequestBodyPutMultipartFileRefRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  files: z.record(z.string()),
});

/** @internal */
export type RequestBodyPutMultipartFileRefRes$Outbound = {
  files: { [k: string]: string };
};

/** @internal */
export const RequestBodyPutMultipartFileRefRes$outboundSchema: z.ZodType<
  RequestBodyPutMultipartFileRefRes$Outbound,
  z.ZodTypeDef,
  RequestBodyPutMultipartFileRefRes
> = z.object({
  files: z.record(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPutMultipartFileRefRes$ {
  /** @deprecated use `RequestBodyPutMultipartFileRefRes$inboundSchema` instead. */
  export const inboundSchema = RequestBodyPutMultipartFileRefRes$inboundSchema;
  /** @deprecated use `RequestBodyPutMultipartFileRefRes$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPutMultipartFileRefRes$outboundSchema;
  /** @deprecated use `RequestBodyPutMultipartFileRefRes$Outbound` instead. */
  export type Outbound = RequestBodyPutMultipartFileRefRes$Outbound;
}

export function requestBodyPutMultipartFileRefResToJSON(
  requestBodyPutMultipartFileRefRes: RequestBodyPutMultipartFileRefRes,
): string {
  return JSON.stringify(
    RequestBodyPutMultipartFileRefRes$outboundSchema.parse(
      requestBodyPutMultipartFileRefRes,
    ),
  );
}

export function requestBodyPutMultipartFileRefResFromJSON(
  jsonString: string,
): SafeParseResult<RequestBodyPutMultipartFileRefRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestBodyPutMultipartFileRefRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestBodyPutMultipartFileRefRes' from JSON`,
  );
}
