/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../../lib/base64.js";
import { blobLikeSchema } from "../../types/blobs.js";
import * as z from "zod";

export type SampleFile = {
    content: Uint8Array | string;
    fileName: string;
};

export type RequestBodyPutMultipartOptionalRequestBodyRequestBody = {
    sampleField?: string | undefined;
    sampleFile?: SampleFile | Blob | undefined;
};

export type RequestBodyPutMultipartOptionalRequestBodyForm = {
    sampleField?: string | undefined;
};

/**
 * OK
 */
export type RequestBodyPutMultipartOptionalRequestBodyRes = {
    files: { [k: string]: string };
    form?: RequestBodyPutMultipartOptionalRequestBodyForm | undefined;
};

/** @internal */
export namespace SampleFile$ {
    export const inboundSchema: z.ZodType<SampleFile, z.ZodTypeDef, unknown> = z.object({
        content: b64$.zodInbound,
        fileName: z.string(),
    });

    export type Outbound = {
        content: Uint8Array;
        fileName: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SampleFile> = z.object({
        content: b64$.zodOutbound,
        fileName: z.string(),
    });
}

/** @internal */
export namespace RequestBodyPutMultipartOptionalRequestBodyRequestBody$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPutMultipartOptionalRequestBodyRequestBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        sampleField: z.string().optional(),
        sampleFile: z.lazy(() => SampleFile$.inboundSchema).optional(),
    });

    export type Outbound = {
        sampleField?: string | undefined;
        sampleFile?: SampleFile$.Outbound | Blob | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPutMultipartOptionalRequestBodyRequestBody
    > = z.object({
        sampleField: z.string().optional(),
        sampleFile: z
            .lazy(() => SampleFile$.outboundSchema)
            .or(blobLikeSchema)
            .optional(),
    });
}

/** @internal */
export namespace RequestBodyPutMultipartOptionalRequestBodyForm$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPutMultipartOptionalRequestBodyForm,
        z.ZodTypeDef,
        unknown
    > = z.object({
        sampleField: z.string().optional(),
    });

    export type Outbound = {
        sampleField?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPutMultipartOptionalRequestBodyForm
    > = z.object({
        sampleField: z.string().optional(),
    });
}

/** @internal */
export namespace RequestBodyPutMultipartOptionalRequestBodyRes$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPutMultipartOptionalRequestBodyRes,
        z.ZodTypeDef,
        unknown
    > = z.object({
        files: z.record(z.string()),
        form: z
            .lazy(() => RequestBodyPutMultipartOptionalRequestBodyForm$.inboundSchema)
            .optional(),
    });

    export type Outbound = {
        files: { [k: string]: string };
        form?: RequestBodyPutMultipartOptionalRequestBodyForm$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPutMultipartOptionalRequestBodyRes
    > = z.object({
        files: z.record(z.string()),
        form: z
            .lazy(() => RequestBodyPutMultipartOptionalRequestBodyForm$.outboundSchema)
            .optional(),
    });
}
