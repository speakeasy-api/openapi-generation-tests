/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

export type RequestBodyPutMultipartSimpleForm = {
  any: string;
  bigint?: string | undefined;
  bigintStr?: string | undefined;
  bool: string;
  boolOpt?: string | undefined;
  date: string;
  dateTime: string;
  decimal?: string | undefined;
  decimalStr?: string | undefined;
  enum: string;
  float32: string;
  int: string;
  int32: string;
  int32Enum: string;
  intEnum: string;
  intOptNull?: string | undefined;
  num: string;
  numOptNull?: string | undefined;
  str: string;
  strOpt?: string | undefined;
};

export type RequestBodyPutMultipartSimpleHeaders = {
  contentType: string;
};

/**
 * OK
 */
export type RequestBodyPutMultipartSimpleRes = {
  form: RequestBodyPutMultipartSimpleForm;
  headers: RequestBodyPutMultipartSimpleHeaders;
};

/** @internal */
export const RequestBodyPutMultipartSimpleForm$inboundSchema: z.ZodType<
  RequestBodyPutMultipartSimpleForm,
  z.ZodTypeDef,
  unknown
> = z.object({
  any: z.string(),
  bigint: z.string().optional(),
  bigintStr: z.string().optional(),
  bool: z.string(),
  boolOpt: z.string().optional(),
  date: z.string(),
  dateTime: z.string(),
  decimal: z.string().optional(),
  decimalStr: z.string().optional(),
  enum: z.string(),
  float32: z.string(),
  int: z.string(),
  int32: z.string(),
  int32Enum: z.string(),
  intEnum: z.string(),
  intOptNull: z.string().optional(),
  num: z.string(),
  numOptNull: z.string().optional(),
  str: z.string(),
  strOpt: z.string().optional(),
});

/** @internal */
export type RequestBodyPutMultipartSimpleForm$Outbound = {
  any: string;
  bigint?: string | undefined;
  bigintStr?: string | undefined;
  bool: string;
  boolOpt?: string | undefined;
  date: string;
  dateTime: string;
  decimal?: string | undefined;
  decimalStr?: string | undefined;
  enum: string;
  float32: string;
  int: string;
  int32: string;
  int32Enum: string;
  intEnum: string;
  intOptNull?: string | undefined;
  num: string;
  numOptNull?: string | undefined;
  str: string;
  strOpt?: string | undefined;
};

/** @internal */
export const RequestBodyPutMultipartSimpleForm$outboundSchema: z.ZodType<
  RequestBodyPutMultipartSimpleForm$Outbound,
  z.ZodTypeDef,
  RequestBodyPutMultipartSimpleForm
> = z.object({
  any: z.string(),
  bigint: z.string().optional(),
  bigintStr: z.string().optional(),
  bool: z.string(),
  boolOpt: z.string().optional(),
  date: z.string(),
  dateTime: z.string(),
  decimal: z.string().optional(),
  decimalStr: z.string().optional(),
  enum: z.string(),
  float32: z.string(),
  int: z.string(),
  int32: z.string(),
  int32Enum: z.string(),
  intEnum: z.string(),
  intOptNull: z.string().optional(),
  num: z.string(),
  numOptNull: z.string().optional(),
  str: z.string(),
  strOpt: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPutMultipartSimpleForm$ {
  /** @deprecated use `RequestBodyPutMultipartSimpleForm$inboundSchema` instead. */
  export const inboundSchema = RequestBodyPutMultipartSimpleForm$inboundSchema;
  /** @deprecated use `RequestBodyPutMultipartSimpleForm$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPutMultipartSimpleForm$outboundSchema;
  /** @deprecated use `RequestBodyPutMultipartSimpleForm$Outbound` instead. */
  export type Outbound = RequestBodyPutMultipartSimpleForm$Outbound;
}

/** @internal */
export const RequestBodyPutMultipartSimpleHeaders$inboundSchema: z.ZodType<
  RequestBodyPutMultipartSimpleHeaders,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Content-Type": z.string(),
}).transform((v) => {
  return remap$(v, {
    "Content-Type": "contentType",
  });
});

/** @internal */
export type RequestBodyPutMultipartSimpleHeaders$Outbound = {
  "Content-Type": string;
};

/** @internal */
export const RequestBodyPutMultipartSimpleHeaders$outboundSchema: z.ZodType<
  RequestBodyPutMultipartSimpleHeaders$Outbound,
  z.ZodTypeDef,
  RequestBodyPutMultipartSimpleHeaders
> = z.object({
  contentType: z.string(),
}).transform((v) => {
  return remap$(v, {
    contentType: "Content-Type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPutMultipartSimpleHeaders$ {
  /** @deprecated use `RequestBodyPutMultipartSimpleHeaders$inboundSchema` instead. */
  export const inboundSchema =
    RequestBodyPutMultipartSimpleHeaders$inboundSchema;
  /** @deprecated use `RequestBodyPutMultipartSimpleHeaders$outboundSchema` instead. */
  export const outboundSchema =
    RequestBodyPutMultipartSimpleHeaders$outboundSchema;
  /** @deprecated use `RequestBodyPutMultipartSimpleHeaders$Outbound` instead. */
  export type Outbound = RequestBodyPutMultipartSimpleHeaders$Outbound;
}

/** @internal */
export const RequestBodyPutMultipartSimpleRes$inboundSchema: z.ZodType<
  RequestBodyPutMultipartSimpleRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  form: z.lazy(() => RequestBodyPutMultipartSimpleForm$inboundSchema),
  headers: z.lazy(() => RequestBodyPutMultipartSimpleHeaders$inboundSchema),
});

/** @internal */
export type RequestBodyPutMultipartSimpleRes$Outbound = {
  form: RequestBodyPutMultipartSimpleForm$Outbound;
  headers: RequestBodyPutMultipartSimpleHeaders$Outbound;
};

/** @internal */
export const RequestBodyPutMultipartSimpleRes$outboundSchema: z.ZodType<
  RequestBodyPutMultipartSimpleRes$Outbound,
  z.ZodTypeDef,
  RequestBodyPutMultipartSimpleRes
> = z.object({
  form: z.lazy(() => RequestBodyPutMultipartSimpleForm$outboundSchema),
  headers: z.lazy(() => RequestBodyPutMultipartSimpleHeaders$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyPutMultipartSimpleRes$ {
  /** @deprecated use `RequestBodyPutMultipartSimpleRes$inboundSchema` instead. */
  export const inboundSchema = RequestBodyPutMultipartSimpleRes$inboundSchema;
  /** @deprecated use `RequestBodyPutMultipartSimpleRes$outboundSchema` instead. */
  export const outboundSchema = RequestBodyPutMultipartSimpleRes$outboundSchema;
  /** @deprecated use `RequestBodyPutMultipartSimpleRes$Outbound` instead. */
  export type Outbound = RequestBodyPutMultipartSimpleRes$Outbound;
}
