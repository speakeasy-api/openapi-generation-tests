/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type RequestBodyPutMultipartSimpleForm = {
    any: string;
    bigint?: string | undefined;
    bigintStr?: string | undefined;
    bool: string;
    boolOpt?: string | undefined;
    date: string;
    dateTime: string;
    decimal?: string | undefined;
    decimalStr?: string | undefined;
    enum: string;
    float32: string;
    int: string;
    int32: string;
    int32Enum: string;
    intEnum: string;
    intOptNull?: string | undefined;
    num: string;
    numOptNull?: string | undefined;
    str: string;
    strOpt?: string | undefined;
};

export type RequestBodyPutMultipartSimpleHeaders = {
    contentType: string;
};

/**
 * OK
 */
export type RequestBodyPutMultipartSimpleRes = {
    form: RequestBodyPutMultipartSimpleForm;
    headers: RequestBodyPutMultipartSimpleHeaders;
};

/** @internal */
export namespace RequestBodyPutMultipartSimpleForm$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPutMultipartSimpleForm,
        z.ZodTypeDef,
        unknown
    > = z.object({
        any: z.string(),
        bigint: z.string().optional(),
        bigintStr: z.string().optional(),
        bool: z.string(),
        boolOpt: z.string().optional(),
        date: z.string(),
        dateTime: z.string(),
        decimal: z.string().optional(),
        decimalStr: z.string().optional(),
        enum: z.string(),
        float32: z.string(),
        int: z.string(),
        int32: z.string(),
        int32Enum: z.string(),
        intEnum: z.string(),
        intOptNull: z.string().optional(),
        num: z.string(),
        numOptNull: z.string().optional(),
        str: z.string(),
        strOpt: z.string().optional(),
    });

    export type Outbound = {
        any: string;
        bigint?: string | undefined;
        bigintStr?: string | undefined;
        bool: string;
        boolOpt?: string | undefined;
        date: string;
        dateTime: string;
        decimal?: string | undefined;
        decimalStr?: string | undefined;
        enum: string;
        float32: string;
        int: string;
        int32: string;
        int32Enum: string;
        intEnum: string;
        intOptNull?: string | undefined;
        num: string;
        numOptNull?: string | undefined;
        str: string;
        strOpt?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPutMultipartSimpleForm
    > = z.object({
        any: z.string(),
        bigint: z.string().optional(),
        bigintStr: z.string().optional(),
        bool: z.string(),
        boolOpt: z.string().optional(),
        date: z.string(),
        dateTime: z.string(),
        decimal: z.string().optional(),
        decimalStr: z.string().optional(),
        enum: z.string(),
        float32: z.string(),
        int: z.string(),
        int32: z.string(),
        int32Enum: z.string(),
        intEnum: z.string(),
        intOptNull: z.string().optional(),
        num: z.string(),
        numOptNull: z.string().optional(),
        str: z.string(),
        strOpt: z.string().optional(),
    });
}

/** @internal */
export namespace RequestBodyPutMultipartSimpleHeaders$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPutMultipartSimpleHeaders,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            "Content-Type": z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                "Content-Type": "contentType",
            });
        });

    export type Outbound = {
        "Content-Type": string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPutMultipartSimpleHeaders
    > = z
        .object({
            contentType: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "Content-Type",
            });
        });
}

/** @internal */
export namespace RequestBodyPutMultipartSimpleRes$ {
    export const inboundSchema: z.ZodType<RequestBodyPutMultipartSimpleRes, z.ZodTypeDef, unknown> =
        z.object({
            form: z.lazy(() => RequestBodyPutMultipartSimpleForm$.inboundSchema),
            headers: z.lazy(() => RequestBodyPutMultipartSimpleHeaders$.inboundSchema),
        });

    export type Outbound = {
        form: RequestBodyPutMultipartSimpleForm$.Outbound;
        headers: RequestBodyPutMultipartSimpleHeaders$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPutMultipartSimpleRes
    > = z.object({
        form: z.lazy(() => RequestBodyPutMultipartSimpleForm$.outboundSchema),
        headers: z.lazy(() => RequestBodyPutMultipartSimpleHeaders$.outboundSchema),
    });
}
