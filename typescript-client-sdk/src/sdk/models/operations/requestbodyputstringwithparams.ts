/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type RequestBodyPutStringWithParamsRequest = {
    requestBody: string;
    queryStringParam: string;
};

export type RequestBodyPutStringWithParamsArgs = {
    queryStringParam: string;
};

/**
 * OK
 */
export type RequestBodyPutStringWithParamsRes = {
    args: RequestBodyPutStringWithParamsArgs;
    data: string;
};

export type RequestBodyPutStringWithParamsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: RequestBodyPutStringWithParamsRes | undefined;
};

/** @internal */
export namespace RequestBodyPutStringWithParamsRequest$ {
    export type Inbound = {
        RequestBody: string;
        queryStringParam: string;
    };

    export const inboundSchema: z.ZodType<
        RequestBodyPutStringWithParamsRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            RequestBody: z.string(),
            queryStringParam: z.string(),
        })
        .transform((v) => {
            return {
                requestBody: v.RequestBody,
                queryStringParam: v.queryStringParam,
            };
        });

    export type Outbound = {
        RequestBody: string;
        queryStringParam: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPutStringWithParamsRequest
    > = z
        .object({
            requestBody: z.string(),
            queryStringParam: z.string(),
        })
        .transform((v) => {
            return {
                RequestBody: v.requestBody,
                queryStringParam: v.queryStringParam,
            };
        });
}

/** @internal */
export namespace RequestBodyPutStringWithParamsArgs$ {
    export type Inbound = {
        queryStringParam: string;
    };

    export const inboundSchema: z.ZodType<
        RequestBodyPutStringWithParamsArgs,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            queryStringParam: z.string(),
        })
        .transform((v) => {
            return {
                queryStringParam: v.queryStringParam,
            };
        });

    export type Outbound = {
        queryStringParam: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPutStringWithParamsArgs
    > = z
        .object({
            queryStringParam: z.string(),
        })
        .transform((v) => {
            return {
                queryStringParam: v.queryStringParam,
            };
        });
}

/** @internal */
export namespace RequestBodyPutStringWithParamsRes$ {
    export type Inbound = {
        args: RequestBodyPutStringWithParamsArgs$.Inbound;
        data: string;
    };

    export const inboundSchema: z.ZodType<
        RequestBodyPutStringWithParamsRes,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            args: z.lazy(() => RequestBodyPutStringWithParamsArgs$.inboundSchema),
            data: z.string(),
        })
        .transform((v) => {
            return {
                args: v.args,
                data: v.data,
            };
        });

    export type Outbound = {
        args: RequestBodyPutStringWithParamsArgs$.Outbound;
        data: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPutStringWithParamsRes
    > = z
        .object({
            args: z.lazy(() => RequestBodyPutStringWithParamsArgs$.outboundSchema),
            data: z.string(),
        })
        .transform((v) => {
            return {
                args: v.args,
                data: v.data,
            };
        });
}

/** @internal */
export namespace RequestBodyPutStringWithParamsResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        res?: RequestBodyPutStringWithParamsRes$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        RequestBodyPutStringWithParamsResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => RequestBodyPutStringWithParamsRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: RequestBodyPutStringWithParamsRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPutStringWithParamsResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => RequestBodyPutStringWithParamsRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
