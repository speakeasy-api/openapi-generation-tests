/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type RequestBodyPutStringWithParamsRequest = {
    requestBody: string;
    queryStringParam: string;
};

export type RequestBodyPutStringWithParamsArgs = {
    queryStringParam: string;
};

/**
 * OK
 */
export type RequestBodyPutStringWithParamsRes = {
    args: RequestBodyPutStringWithParamsArgs;
    data: string;
};

/** @internal */
export namespace RequestBodyPutStringWithParamsRequest$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPutStringWithParamsRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            RequestBody: z.string(),
            queryStringParam: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        RequestBody: string;
        queryStringParam: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPutStringWithParamsRequest
    > = z
        .object({
            requestBody: z.string(),
            queryStringParam: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace RequestBodyPutStringWithParamsArgs$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPutStringWithParamsArgs,
        z.ZodTypeDef,
        unknown
    > = z.object({
        queryStringParam: z.string(),
    });

    export type Outbound = {
        queryStringParam: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPutStringWithParamsArgs
    > = z.object({
        queryStringParam: z.string(),
    });
}

/** @internal */
export namespace RequestBodyPutStringWithParamsRes$ {
    export const inboundSchema: z.ZodType<
        RequestBodyPutStringWithParamsRes,
        z.ZodTypeDef,
        unknown
    > = z.object({
        args: z.lazy(() => RequestBodyPutStringWithParamsArgs$.inboundSchema),
        data: z.string(),
    });

    export type Outbound = {
        args: RequestBodyPutStringWithParamsArgs$.Outbound;
        data: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestBodyPutStringWithParamsRes
    > = z.object({
        args: z.lazy(() => RequestBodyPutStringWithParamsArgs$.outboundSchema),
        data: z.string(),
    });
}
