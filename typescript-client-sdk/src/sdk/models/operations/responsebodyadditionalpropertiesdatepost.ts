/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

/**
 * OK
 */
export type ResponseBodyAdditionalPropertiesDatePostResponseBody = {
    json: shared.ObjWithDateAdditionalProperties;
};

export type ResponseBodyAdditionalPropertiesDatePostResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    object?: ResponseBodyAdditionalPropertiesDatePostResponseBody | undefined;
};

/** @internal */
export namespace ResponseBodyAdditionalPropertiesDatePostResponseBody$ {
    export const inboundSchema: z.ZodType<
        ResponseBodyAdditionalPropertiesDatePostResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        json: shared.ObjWithDateAdditionalProperties$.inboundSchema,
    });

    export type Outbound = {
        json: shared.ObjWithDateAdditionalProperties$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ResponseBodyAdditionalPropertiesDatePostResponseBody
    > = z.object({
        json: shared.ObjWithDateAdditionalProperties$.outboundSchema,
    });
}

/** @internal */
export namespace ResponseBodyAdditionalPropertiesDatePostResponse$ {
    export const inboundSchema: z.ZodType<
        ResponseBodyAdditionalPropertiesDatePostResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z
                .lazy(() => ResponseBodyAdditionalPropertiesDatePostResponseBody$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: ResponseBodyAdditionalPropertiesDatePostResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ResponseBodyAdditionalPropertiesDatePostResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z
                .lazy(() => ResponseBodyAdditionalPropertiesDatePostResponseBody$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
