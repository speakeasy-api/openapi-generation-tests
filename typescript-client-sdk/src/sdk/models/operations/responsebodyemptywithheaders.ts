/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

export type ResponseBodyEmptyWithHeadersRequest = {
  xNumberHeader: number;
  xStringHeader: string;
};

export type ResponseBodyEmptyWithHeadersResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const ResponseBodyEmptyWithHeadersRequest$inboundSchema: z.ZodType<
  ResponseBodyEmptyWithHeadersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Number-Header": z.number(),
  "X-String-Header": z.string(),
}).transform((v) => {
  return remap$(v, {
    "X-Number-Header": "xNumberHeader",
    "X-String-Header": "xStringHeader",
  });
});

/** @internal */
export type ResponseBodyEmptyWithHeadersRequest$Outbound = {
  "X-Number-Header": number;
  "X-String-Header": string;
};

/** @internal */
export const ResponseBodyEmptyWithHeadersRequest$outboundSchema: z.ZodType<
  ResponseBodyEmptyWithHeadersRequest$Outbound,
  z.ZodTypeDef,
  ResponseBodyEmptyWithHeadersRequest
> = z.object({
  xNumberHeader: z.number(),
  xStringHeader: z.string(),
}).transform((v) => {
  return remap$(v, {
    xNumberHeader: "X-Number-Header",
    xStringHeader: "X-String-Header",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyEmptyWithHeadersRequest$ {
  /** @deprecated use `ResponseBodyEmptyWithHeadersRequest$inboundSchema` instead. */
  export const inboundSchema =
    ResponseBodyEmptyWithHeadersRequest$inboundSchema;
  /** @deprecated use `ResponseBodyEmptyWithHeadersRequest$outboundSchema` instead. */
  export const outboundSchema =
    ResponseBodyEmptyWithHeadersRequest$outboundSchema;
  /** @deprecated use `ResponseBodyEmptyWithHeadersRequest$Outbound` instead. */
  export type Outbound = ResponseBodyEmptyWithHeadersRequest$Outbound;
}

/** @internal */
export const ResponseBodyEmptyWithHeadersResponse$inboundSchema: z.ZodType<
  ResponseBodyEmptyWithHeadersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type ResponseBodyEmptyWithHeadersResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const ResponseBodyEmptyWithHeadersResponse$outboundSchema: z.ZodType<
  ResponseBodyEmptyWithHeadersResponse$Outbound,
  z.ZodTypeDef,
  ResponseBodyEmptyWithHeadersResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyEmptyWithHeadersResponse$ {
  /** @deprecated use `ResponseBodyEmptyWithHeadersResponse$inboundSchema` instead. */
  export const inboundSchema =
    ResponseBodyEmptyWithHeadersResponse$inboundSchema;
  /** @deprecated use `ResponseBodyEmptyWithHeadersResponse$outboundSchema` instead. */
  export const outboundSchema =
    ResponseBodyEmptyWithHeadersResponse$outboundSchema;
  /** @deprecated use `ResponseBodyEmptyWithHeadersResponse$Outbound` instead. */
  export type Outbound = ResponseBodyEmptyWithHeadersResponse$Outbound;
}
