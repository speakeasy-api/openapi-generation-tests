/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export const ResponseBodyOptionalGetServerList = [
  "http://localhost:35456",
] as const;

export type ResponseBodyOptionalGetResponse = shared.TypedObject1 | string;

/** @internal */
export const ResponseBodyOptionalGetResponse$inboundSchema: z.ZodType<
  ResponseBodyOptionalGetResponse,
  z.ZodTypeDef,
  unknown
> = z.union([shared.TypedObject1$inboundSchema, z.string()]);

/** @internal */
export type ResponseBodyOptionalGetResponse$Outbound =
  | shared.TypedObject1$Outbound
  | string;

/** @internal */
export const ResponseBodyOptionalGetResponse$outboundSchema: z.ZodType<
  ResponseBodyOptionalGetResponse$Outbound,
  z.ZodTypeDef,
  ResponseBodyOptionalGetResponse
> = z.union([shared.TypedObject1$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyOptionalGetResponse$ {
  /** @deprecated use `ResponseBodyOptionalGetResponse$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyOptionalGetResponse$inboundSchema;
  /** @deprecated use `ResponseBodyOptionalGetResponse$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyOptionalGetResponse$outboundSchema;
  /** @deprecated use `ResponseBodyOptionalGetResponse$Outbound` instead. */
  export type Outbound = ResponseBodyOptionalGetResponse$Outbound;
}

export function responseBodyOptionalGetResponseToJSON(
  responseBodyOptionalGetResponse: ResponseBodyOptionalGetResponse,
): string {
  return JSON.stringify(
    ResponseBodyOptionalGetResponse$outboundSchema.parse(
      responseBodyOptionalGetResponse,
    ),
  );
}

export function responseBodyOptionalGetResponseFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyOptionalGetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyOptionalGetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyOptionalGetResponse' from JSON`,
  );
}
