/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export const RetriesAfterServerList = ["http://localhost:35456"] as const;

export type RetriesAfterRequest = {
    numRetries?: number | undefined;
    requestId: string;
    retryAfterVal?: number | undefined;
};

/**
 * OK
 */
export type RetriesAfterRetries = {
    retries: number;
};

export type RetriesAfterResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    retries?: RetriesAfterRetries | undefined;
};

/** @internal */
export namespace RetriesAfterRequest$ {
    export const inboundSchema: z.ZodType<RetriesAfterRequest, z.ZodTypeDef, unknown> = z
        .object({
            "num-retries": z.number().int().optional(),
            "request-id": z.string(),
            "retry-after-val": z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v["num-retries"] === undefined ? null : { numRetries: v["num-retries"] }),
                requestId: v["request-id"],
                ...(v["retry-after-val"] === undefined
                    ? null
                    : { retryAfterVal: v["retry-after-val"] }),
            };
        });

    export type Outbound = {
        "num-retries"?: number | undefined;
        "request-id": string;
        "retry-after-val"?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RetriesAfterRequest> = z
        .object({
            numRetries: z.number().int().optional(),
            requestId: z.string(),
            retryAfterVal: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.numRetries === undefined ? null : { "num-retries": v.numRetries }),
                "request-id": v.requestId,
                ...(v.retryAfterVal === undefined ? null : { "retry-after-val": v.retryAfterVal }),
            };
        });
}

/** @internal */
export namespace RetriesAfterRetries$ {
    export const inboundSchema: z.ZodType<RetriesAfterRetries, z.ZodTypeDef, unknown> = z
        .object({
            retries: z.number().int(),
        })
        .transform((v) => {
            return {
                retries: v.retries,
            };
        });

    export type Outbound = {
        retries: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RetriesAfterRetries> = z
        .object({
            retries: z.number().int(),
        })
        .transform((v) => {
            return {
                retries: v.retries,
            };
        });
}

/** @internal */
export namespace RetriesAfterResponse$ {
    export const inboundSchema: z.ZodType<RetriesAfterResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            retries: z.lazy(() => RetriesAfterRetries$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.retries === undefined ? null : { retries: v.retries }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        retries?: RetriesAfterRetries$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RetriesAfterResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            retries: z.lazy(() => RetriesAfterRetries$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.retries === undefined ? null : { retries: v.retries }),
            };
        });
}
