/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as z from "zod";

export const RetriesFlatEmptyResponsePostServerList = ["http://localhost:35456"] as const;

export type RetriesFlatEmptyResponsePostRequestBody = {
    fieldOne: string;
};

export type RetriesFlatEmptyResponsePostRequest = {
    requestBody?: RetriesFlatEmptyResponsePostRequestBody | undefined;
    numRetries?: number | undefined;
    requestId: string;
};

export type RetriesFlatEmptyResponsePostResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace RetriesFlatEmptyResponsePostRequestBody$ {
    export const inboundSchema: z.ZodType<
        RetriesFlatEmptyResponsePostRequestBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            field_one: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                field_one: "fieldOne",
            });
        });

    export type Outbound = {
        field_one: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RetriesFlatEmptyResponsePostRequestBody
    > = z
        .object({
            fieldOne: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                fieldOne: "field_one",
            });
        });
}

/** @internal */
export namespace RetriesFlatEmptyResponsePostRequest$ {
    export const inboundSchema: z.ZodType<
        RetriesFlatEmptyResponsePostRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            RequestBody: z
                .lazy(() => RetriesFlatEmptyResponsePostRequestBody$.inboundSchema)
                .optional(),
            "num-retries": z.number().int().optional(),
            "request-id": z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
                "num-retries": "numRetries",
                "request-id": "requestId",
            });
        });

    export type Outbound = {
        RequestBody?: RetriesFlatEmptyResponsePostRequestBody$.Outbound | undefined;
        "num-retries"?: number | undefined;
        "request-id": string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RetriesFlatEmptyResponsePostRequest
    > = z
        .object({
            requestBody: z
                .lazy(() => RetriesFlatEmptyResponsePostRequestBody$.outboundSchema)
                .optional(),
            numRetries: z.number().int().optional(),
            requestId: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
                numRetries: "num-retries",
                requestId: "request-id",
            });
        });
}

/** @internal */
export namespace RetriesFlatEmptyResponsePostResponse$ {
    export const inboundSchema: z.ZodType<
        RetriesFlatEmptyResponsePostResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RetriesFlatEmptyResponsePostResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
