/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const RetriesGetServerList = [
  "http://localhost:35456",
] as const;

export type RetriesGetRequest = {
  numRetries?: number | undefined;
  requestId: string;
};

/**
 * OK
 */
export type RetriesGetRetries = {
  retries: number;
};

/** @internal */
export const RetriesGetRequest$inboundSchema: z.ZodType<
  RetriesGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "num-retries": z.number().int().optional(),
  "request-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "num-retries": "numRetries",
    "request-id": "requestId",
  });
});

/** @internal */
export type RetriesGetRequest$Outbound = {
  "num-retries"?: number | undefined;
  "request-id": string;
};

/** @internal */
export const RetriesGetRequest$outboundSchema: z.ZodType<
  RetriesGetRequest$Outbound,
  z.ZodTypeDef,
  RetriesGetRequest
> = z.object({
  numRetries: z.number().int().optional(),
  requestId: z.string(),
}).transform((v) => {
  return remap$(v, {
    numRetries: "num-retries",
    requestId: "request-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetriesGetRequest$ {
  /** @deprecated use `RetriesGetRequest$inboundSchema` instead. */
  export const inboundSchema = RetriesGetRequest$inboundSchema;
  /** @deprecated use `RetriesGetRequest$outboundSchema` instead. */
  export const outboundSchema = RetriesGetRequest$outboundSchema;
  /** @deprecated use `RetriesGetRequest$Outbound` instead. */
  export type Outbound = RetriesGetRequest$Outbound;
}

export function retriesGetRequestToJSON(
  retriesGetRequest: RetriesGetRequest,
): string {
  return JSON.stringify(
    RetriesGetRequest$outboundSchema.parse(retriesGetRequest),
  );
}

export function retriesGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<RetriesGetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetriesGetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetriesGetRequest' from JSON`,
  );
}

/** @internal */
export const RetriesGetRetries$inboundSchema: z.ZodType<
  RetriesGetRetries,
  z.ZodTypeDef,
  unknown
> = z.object({
  retries: z.number().int(),
});

/** @internal */
export type RetriesGetRetries$Outbound = {
  retries: number;
};

/** @internal */
export const RetriesGetRetries$outboundSchema: z.ZodType<
  RetriesGetRetries$Outbound,
  z.ZodTypeDef,
  RetriesGetRetries
> = z.object({
  retries: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetriesGetRetries$ {
  /** @deprecated use `RetriesGetRetries$inboundSchema` instead. */
  export const inboundSchema = RetriesGetRetries$inboundSchema;
  /** @deprecated use `RetriesGetRetries$outboundSchema` instead. */
  export const outboundSchema = RetriesGetRetries$outboundSchema;
  /** @deprecated use `RetriesGetRetries$Outbound` instead. */
  export type Outbound = RetriesGetRetries$Outbound;
}

export function retriesGetRetriesToJSON(
  retriesGetRetries: RetriesGetRetries,
): string {
  return JSON.stringify(
    RetriesGetRetries$outboundSchema.parse(retriesGetRetries),
  );
}

export function retriesGetRetriesFromJSON(
  jsonString: string,
): SafeParseResult<RetriesGetRetries, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetriesGetRetries$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetriesGetRetries' from JSON`,
  );
}
