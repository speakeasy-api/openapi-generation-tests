/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as z from "zod";

export const RetriesPostServerList = ["http://localhost:35456"] as const;

export type RetriesPostRequestBody = {
    fieldOne: string;
};

export type RetriesPostRequest = {
    requestBody?: RetriesPostRequestBody | undefined;
    numRetries?: number | undefined;
    requestId: string;
};

/**
 * OK
 */
export type RetriesPostRetries = {
    retries: number;
};

export type RetriesPostResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    retries?: RetriesPostRetries | undefined;
};

/** @internal */
export namespace RetriesPostRequestBody$ {
    export const inboundSchema: z.ZodType<RetriesPostRequestBody, z.ZodTypeDef, unknown> = z
        .object({
            field_one: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                field_one: "fieldOne",
            });
        });

    export type Outbound = {
        field_one: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RetriesPostRequestBody> = z
        .object({
            fieldOne: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                fieldOne: "field_one",
            });
        });
}

/** @internal */
export namespace RetriesPostRequest$ {
    export const inboundSchema: z.ZodType<RetriesPostRequest, z.ZodTypeDef, unknown> = z
        .object({
            RequestBody: z.lazy(() => RetriesPostRequestBody$.inboundSchema).optional(),
            "num-retries": z.number().int().optional(),
            "request-id": z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
                "num-retries": "numRetries",
                "request-id": "requestId",
            });
        });

    export type Outbound = {
        RequestBody?: RetriesPostRequestBody$.Outbound | undefined;
        "num-retries"?: number | undefined;
        "request-id": string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RetriesPostRequest> = z
        .object({
            requestBody: z.lazy(() => RetriesPostRequestBody$.outboundSchema).optional(),
            numRetries: z.number().int().optional(),
            requestId: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
                numRetries: "num-retries",
                requestId: "request-id",
            });
        });
}

/** @internal */
export namespace RetriesPostRetries$ {
    export const inboundSchema: z.ZodType<RetriesPostRetries, z.ZodTypeDef, unknown> = z.object({
        retries: z.number().int(),
    });

    export type Outbound = {
        retries: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RetriesPostRetries> = z.object({
        retries: z.number().int(),
    });
}

/** @internal */
export namespace RetriesPostResponse$ {
    export const inboundSchema: z.ZodType<RetriesPostResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            retries: z.lazy(() => RetriesPostRetries$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        retries?: RetriesPostRetries$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RetriesPostResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            retries: z.lazy(() => RetriesPostRetries$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
