/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const RetriesPostServerList = [
  "http://localhost:35456",
] as const;

export type RetriesPostRequestBody = {
  fieldOne: string;
};

export type RetriesPostRequest = {
  requestBody?: RetriesPostRequestBody | undefined;
  numRetries?: number | undefined;
  requestId: string;
};

/**
 * OK
 */
export type RetriesPostRetries = {
  retries: number;
};

/** @internal */
export const RetriesPostRequestBody$inboundSchema: z.ZodType<
  RetriesPostRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  field_one: z.string(),
}).transform((v) => {
  return remap$(v, {
    "field_one": "fieldOne",
  });
});

/** @internal */
export type RetriesPostRequestBody$Outbound = {
  field_one: string;
};

/** @internal */
export const RetriesPostRequestBody$outboundSchema: z.ZodType<
  RetriesPostRequestBody$Outbound,
  z.ZodTypeDef,
  RetriesPostRequestBody
> = z.object({
  fieldOne: z.string(),
}).transform((v) => {
  return remap$(v, {
    fieldOne: "field_one",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetriesPostRequestBody$ {
  /** @deprecated use `RetriesPostRequestBody$inboundSchema` instead. */
  export const inboundSchema = RetriesPostRequestBody$inboundSchema;
  /** @deprecated use `RetriesPostRequestBody$outboundSchema` instead. */
  export const outboundSchema = RetriesPostRequestBody$outboundSchema;
  /** @deprecated use `RetriesPostRequestBody$Outbound` instead. */
  export type Outbound = RetriesPostRequestBody$Outbound;
}

export function retriesPostRequestBodyToJSON(
  retriesPostRequestBody: RetriesPostRequestBody,
): string {
  return JSON.stringify(
    RetriesPostRequestBody$outboundSchema.parse(retriesPostRequestBody),
  );
}

export function retriesPostRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<RetriesPostRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetriesPostRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetriesPostRequestBody' from JSON`,
  );
}

/** @internal */
export const RetriesPostRequest$inboundSchema: z.ZodType<
  RetriesPostRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.lazy(() => RetriesPostRequestBody$inboundSchema).optional(),
  "num-retries": z.number().int().optional(),
  "request-id": z.string(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
    "num-retries": "numRetries",
    "request-id": "requestId",
  });
});

/** @internal */
export type RetriesPostRequest$Outbound = {
  RequestBody?: RetriesPostRequestBody$Outbound | undefined;
  "num-retries"?: number | undefined;
  "request-id": string;
};

/** @internal */
export const RetriesPostRequest$outboundSchema: z.ZodType<
  RetriesPostRequest$Outbound,
  z.ZodTypeDef,
  RetriesPostRequest
> = z.object({
  requestBody: z.lazy(() => RetriesPostRequestBody$outboundSchema).optional(),
  numRetries: z.number().int().optional(),
  requestId: z.string(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
    numRetries: "num-retries",
    requestId: "request-id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetriesPostRequest$ {
  /** @deprecated use `RetriesPostRequest$inboundSchema` instead. */
  export const inboundSchema = RetriesPostRequest$inboundSchema;
  /** @deprecated use `RetriesPostRequest$outboundSchema` instead. */
  export const outboundSchema = RetriesPostRequest$outboundSchema;
  /** @deprecated use `RetriesPostRequest$Outbound` instead. */
  export type Outbound = RetriesPostRequest$Outbound;
}

export function retriesPostRequestToJSON(
  retriesPostRequest: RetriesPostRequest,
): string {
  return JSON.stringify(
    RetriesPostRequest$outboundSchema.parse(retriesPostRequest),
  );
}

export function retriesPostRequestFromJSON(
  jsonString: string,
): SafeParseResult<RetriesPostRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetriesPostRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetriesPostRequest' from JSON`,
  );
}

/** @internal */
export const RetriesPostRetries$inboundSchema: z.ZodType<
  RetriesPostRetries,
  z.ZodTypeDef,
  unknown
> = z.object({
  retries: z.number().int(),
});

/** @internal */
export type RetriesPostRetries$Outbound = {
  retries: number;
};

/** @internal */
export const RetriesPostRetries$outboundSchema: z.ZodType<
  RetriesPostRetries$Outbound,
  z.ZodTypeDef,
  RetriesPostRetries
> = z.object({
  retries: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetriesPostRetries$ {
  /** @deprecated use `RetriesPostRetries$inboundSchema` instead. */
  export const inboundSchema = RetriesPostRetries$inboundSchema;
  /** @deprecated use `RetriesPostRetries$outboundSchema` instead. */
  export const outboundSchema = RetriesPostRetries$outboundSchema;
  /** @deprecated use `RetriesPostRetries$Outbound` instead. */
  export type Outbound = RetriesPostRetries$Outbound;
}

export function retriesPostRetriesToJSON(
  retriesPostRetries: RetriesPostRetries,
): string {
  return JSON.stringify(
    RetriesPostRetries$outboundSchema.parse(retriesPostRetries),
  );
}

export function retriesPostRetriesFromJSON(
  jsonString: string,
): SafeParseResult<RetriesPostRetries, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetriesPostRetries$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetriesPostRetries' from JSON`,
  );
}
