/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

export type SelectGlobalServerResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const SelectGlobalServerResponse$inboundSchema: z.ZodType<
  SelectGlobalServerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type SelectGlobalServerResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const SelectGlobalServerResponse$outboundSchema: z.ZodType<
  SelectGlobalServerResponse$Outbound,
  z.ZodTypeDef,
  SelectGlobalServerResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectGlobalServerResponse$ {
  /** @deprecated use `SelectGlobalServerResponse$inboundSchema` instead. */
  export const inboundSchema = SelectGlobalServerResponse$inboundSchema;
  /** @deprecated use `SelectGlobalServerResponse$outboundSchema` instead. */
  export const outboundSchema = SelectGlobalServerResponse$outboundSchema;
  /** @deprecated use `SelectGlobalServerResponse$Outbound` instead. */
  export type Outbound = SelectGlobalServerResponse$Outbound;
}
