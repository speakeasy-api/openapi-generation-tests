/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type SelectGlobalServerResponse = {
    headers: { [k: string]: Array<string> };
};

/** @internal */
export namespace SelectGlobalServerResponse$ {
    export const inboundSchema: z.ZodType<SelectGlobalServerResponse, z.ZodTypeDef, unknown> = z
        .object({
            Headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return remap$(v, {
                Headers: "headers",
            });
        });

    export type Outbound = {
        Headers: { [k: string]: Array<string> };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SelectGlobalServerResponse> = z
        .object({
            headers: z.record(z.array(z.string())),
        })
        .transform((v) => {
            return remap$(v, {
                headers: "Headers",
            });
        });
}
