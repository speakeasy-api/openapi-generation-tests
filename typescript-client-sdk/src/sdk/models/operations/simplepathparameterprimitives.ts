/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SimplePathParameterPrimitivesRequest = {
  boolParam: boolean;
  intParam: number;
  numParam: number;
  strParam: string;
};

/**
 * OK
 */
export type SimplePathParameterPrimitivesRes = {
  url: string;
};

/** @internal */
export const SimplePathParameterPrimitivesRequest$inboundSchema: z.ZodType<
  SimplePathParameterPrimitivesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  boolParam: z.boolean(),
  intParam: z.number().int(),
  numParam: z.number(),
  strParam: z.string(),
});

/** @internal */
export type SimplePathParameterPrimitivesRequest$Outbound = {
  boolParam: boolean;
  intParam: number;
  numParam: number;
  strParam: string;
};

/** @internal */
export const SimplePathParameterPrimitivesRequest$outboundSchema: z.ZodType<
  SimplePathParameterPrimitivesRequest$Outbound,
  z.ZodTypeDef,
  SimplePathParameterPrimitivesRequest
> = z.object({
  boolParam: z.boolean(),
  intParam: z.number().int(),
  numParam: z.number(),
  strParam: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SimplePathParameterPrimitivesRequest$ {
  /** @deprecated use `SimplePathParameterPrimitivesRequest$inboundSchema` instead. */
  export const inboundSchema =
    SimplePathParameterPrimitivesRequest$inboundSchema;
  /** @deprecated use `SimplePathParameterPrimitivesRequest$outboundSchema` instead. */
  export const outboundSchema =
    SimplePathParameterPrimitivesRequest$outboundSchema;
  /** @deprecated use `SimplePathParameterPrimitivesRequest$Outbound` instead. */
  export type Outbound = SimplePathParameterPrimitivesRequest$Outbound;
}

export function simplePathParameterPrimitivesRequestToJSON(
  simplePathParameterPrimitivesRequest: SimplePathParameterPrimitivesRequest,
): string {
  return JSON.stringify(
    SimplePathParameterPrimitivesRequest$outboundSchema.parse(
      simplePathParameterPrimitivesRequest,
    ),
  );
}

export function simplePathParameterPrimitivesRequestFromJSON(
  jsonString: string,
): SafeParseResult<SimplePathParameterPrimitivesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SimplePathParameterPrimitivesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SimplePathParameterPrimitivesRequest' from JSON`,
  );
}

/** @internal */
export const SimplePathParameterPrimitivesRes$inboundSchema: z.ZodType<
  SimplePathParameterPrimitivesRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
});

/** @internal */
export type SimplePathParameterPrimitivesRes$Outbound = {
  url: string;
};

/** @internal */
export const SimplePathParameterPrimitivesRes$outboundSchema: z.ZodType<
  SimplePathParameterPrimitivesRes$Outbound,
  z.ZodTypeDef,
  SimplePathParameterPrimitivesRes
> = z.object({
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SimplePathParameterPrimitivesRes$ {
  /** @deprecated use `SimplePathParameterPrimitivesRes$inboundSchema` instead. */
  export const inboundSchema = SimplePathParameterPrimitivesRes$inboundSchema;
  /** @deprecated use `SimplePathParameterPrimitivesRes$outboundSchema` instead. */
  export const outboundSchema = SimplePathParameterPrimitivesRes$outboundSchema;
  /** @deprecated use `SimplePathParameterPrimitivesRes$Outbound` instead. */
  export type Outbound = SimplePathParameterPrimitivesRes$Outbound;
}

export function simplePathParameterPrimitivesResToJSON(
  simplePathParameterPrimitivesRes: SimplePathParameterPrimitivesRes,
): string {
  return JSON.stringify(
    SimplePathParameterPrimitivesRes$outboundSchema.parse(
      simplePathParameterPrimitivesRes,
    ),
  );
}

export function simplePathParameterPrimitivesResFromJSON(
  jsonString: string,
): SafeParseResult<SimplePathParameterPrimitivesRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SimplePathParameterPrimitivesRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SimplePathParameterPrimitivesRes' from JSON`,
  );
}
