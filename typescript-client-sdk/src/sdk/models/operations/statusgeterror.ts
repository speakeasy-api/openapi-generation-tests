/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StatusGetErrorRequest = {
  statusCode: number;
};

/** @internal */
export const StatusGetErrorRequest$inboundSchema: z.ZodType<
  StatusGetErrorRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  statusCode: z.number().int(),
});

/** @internal */
export type StatusGetErrorRequest$Outbound = {
  statusCode: number;
};

/** @internal */
export const StatusGetErrorRequest$outboundSchema: z.ZodType<
  StatusGetErrorRequest$Outbound,
  z.ZodTypeDef,
  StatusGetErrorRequest
> = z.object({
  statusCode: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusGetErrorRequest$ {
  /** @deprecated use `StatusGetErrorRequest$inboundSchema` instead. */
  export const inboundSchema = StatusGetErrorRequest$inboundSchema;
  /** @deprecated use `StatusGetErrorRequest$outboundSchema` instead. */
  export const outboundSchema = StatusGetErrorRequest$outboundSchema;
  /** @deprecated use `StatusGetErrorRequest$Outbound` instead. */
  export type Outbound = StatusGetErrorRequest$Outbound;
}

export function statusGetErrorRequestToJSON(
  statusGetErrorRequest: StatusGetErrorRequest,
): string {
  return JSON.stringify(
    StatusGetErrorRequest$outboundSchema.parse(statusGetErrorRequest),
  );
}

export function statusGetErrorRequestFromJSON(
  jsonString: string,
): SafeParseResult<StatusGetErrorRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StatusGetErrorRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StatusGetErrorRequest' from JSON`,
  );
}
