/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

/**
 * OK
 */
export type StronglyTypedOneOfDiscriminatedPostRes = {
    json: shared.StronglyTypedOneOfDiscriminatedObject;
};

export type StronglyTypedOneOfDiscriminatedPostResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: StronglyTypedOneOfDiscriminatedPostRes | undefined;
};

/** @internal */
export namespace StronglyTypedOneOfDiscriminatedPostRes$ {
    export type Inbound = {
        json: shared.StronglyTypedOneOfDiscriminatedObject$.Inbound;
    };

    export const inboundSchema: z.ZodType<
        StronglyTypedOneOfDiscriminatedPostRes,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            json: shared.StronglyTypedOneOfDiscriminatedObject$.inboundSchema,
        })
        .transform((v) => {
            return {
                json: v.json,
            };
        });

    export type Outbound = {
        json: shared.StronglyTypedOneOfDiscriminatedObject$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        StronglyTypedOneOfDiscriminatedPostRes
    > = z
        .object({
            json: shared.StronglyTypedOneOfDiscriminatedObject$.outboundSchema,
        })
        .transform((v) => {
            return {
                json: v.json,
            };
        });
}

/** @internal */
export namespace StronglyTypedOneOfDiscriminatedPostResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        res?: StronglyTypedOneOfDiscriminatedPostRes$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        StronglyTypedOneOfDiscriminatedPostResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => StronglyTypedOneOfDiscriminatedPostRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: StronglyTypedOneOfDiscriminatedPostRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        StronglyTypedOneOfDiscriminatedPostResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => StronglyTypedOneOfDiscriminatedPostRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
