/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type TelemetrySpeakeasyUserAgentGetRequest = {
    userAgent: string;
};

/**
 * OK
 */
export type TelemetrySpeakeasyUserAgentGetRes = {
    headers: Record<string, string>;
};

export type TelemetrySpeakeasyUserAgentGetResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: TelemetrySpeakeasyUserAgentGetRes | undefined;
};

/** @internal */
export namespace TelemetrySpeakeasyUserAgentGetRequest$ {
    export type Inbound = {
        "User-Agent": string;
    };

    export const inboundSchema: z.ZodType<
        TelemetrySpeakeasyUserAgentGetRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            "User-Agent": z.string(),
        })
        .transform((v) => {
            return {
                userAgent: v["User-Agent"],
            };
        });

    export type Outbound = {
        "User-Agent": string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TelemetrySpeakeasyUserAgentGetRequest
    > = z
        .object({
            userAgent: z.string(),
        })
        .transform((v) => {
            return {
                "User-Agent": v.userAgent,
            };
        });
}

/** @internal */
export namespace TelemetrySpeakeasyUserAgentGetRes$ {
    export type Inbound = {
        headers: Record<string, string>;
    };

    export const inboundSchema: z.ZodType<
        TelemetrySpeakeasyUserAgentGetRes,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            headers: z.record(z.string()),
        })
        .transform((v) => {
            return {
                headers: v.headers,
            };
        });

    export type Outbound = {
        headers: Record<string, string>;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TelemetrySpeakeasyUserAgentGetRes
    > = z
        .object({
            headers: z.record(z.string()),
        })
        .transform((v) => {
            return {
                headers: v.headers,
            };
        });
}

/** @internal */
export namespace TelemetrySpeakeasyUserAgentGetResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        res?: TelemetrySpeakeasyUserAgentGetRes$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        TelemetrySpeakeasyUserAgentGetResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => TelemetrySpeakeasyUserAgentGetRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: TelemetrySpeakeasyUserAgentGetRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TelemetrySpeakeasyUserAgentGetResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => TelemetrySpeakeasyUserAgentGetRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
