/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TelemetrySpeakeasyUserAgentGetRequest = {
  userAgent: string;
};

/**
 * OK
 */
export type TelemetrySpeakeasyUserAgentGetRes = {
  headers: { [k: string]: string };
};

/** @internal */
export const TelemetrySpeakeasyUserAgentGetRequest$inboundSchema: z.ZodType<
  TelemetrySpeakeasyUserAgentGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "User-Agent": z.string(),
}).transform((v) => {
  return remap$(v, {
    "User-Agent": "userAgent",
  });
});

/** @internal */
export type TelemetrySpeakeasyUserAgentGetRequest$Outbound = {
  "User-Agent": string;
};

/** @internal */
export const TelemetrySpeakeasyUserAgentGetRequest$outboundSchema: z.ZodType<
  TelemetrySpeakeasyUserAgentGetRequest$Outbound,
  z.ZodTypeDef,
  TelemetrySpeakeasyUserAgentGetRequest
> = z.object({
  userAgent: z.string(),
}).transform((v) => {
  return remap$(v, {
    userAgent: "User-Agent",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TelemetrySpeakeasyUserAgentGetRequest$ {
  /** @deprecated use `TelemetrySpeakeasyUserAgentGetRequest$inboundSchema` instead. */
  export const inboundSchema =
    TelemetrySpeakeasyUserAgentGetRequest$inboundSchema;
  /** @deprecated use `TelemetrySpeakeasyUserAgentGetRequest$outboundSchema` instead. */
  export const outboundSchema =
    TelemetrySpeakeasyUserAgentGetRequest$outboundSchema;
  /** @deprecated use `TelemetrySpeakeasyUserAgentGetRequest$Outbound` instead. */
  export type Outbound = TelemetrySpeakeasyUserAgentGetRequest$Outbound;
}

export function telemetrySpeakeasyUserAgentGetRequestToJSON(
  telemetrySpeakeasyUserAgentGetRequest: TelemetrySpeakeasyUserAgentGetRequest,
): string {
  return JSON.stringify(
    TelemetrySpeakeasyUserAgentGetRequest$outboundSchema.parse(
      telemetrySpeakeasyUserAgentGetRequest,
    ),
  );
}

export function telemetrySpeakeasyUserAgentGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<TelemetrySpeakeasyUserAgentGetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TelemetrySpeakeasyUserAgentGetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TelemetrySpeakeasyUserAgentGetRequest' from JSON`,
  );
}

/** @internal */
export const TelemetrySpeakeasyUserAgentGetRes$inboundSchema: z.ZodType<
  TelemetrySpeakeasyUserAgentGetRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  headers: z.record(z.string()),
});

/** @internal */
export type TelemetrySpeakeasyUserAgentGetRes$Outbound = {
  headers: { [k: string]: string };
};

/** @internal */
export const TelemetrySpeakeasyUserAgentGetRes$outboundSchema: z.ZodType<
  TelemetrySpeakeasyUserAgentGetRes$Outbound,
  z.ZodTypeDef,
  TelemetrySpeakeasyUserAgentGetRes
> = z.object({
  headers: z.record(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TelemetrySpeakeasyUserAgentGetRes$ {
  /** @deprecated use `TelemetrySpeakeasyUserAgentGetRes$inboundSchema` instead. */
  export const inboundSchema = TelemetrySpeakeasyUserAgentGetRes$inboundSchema;
  /** @deprecated use `TelemetrySpeakeasyUserAgentGetRes$outboundSchema` instead. */
  export const outboundSchema =
    TelemetrySpeakeasyUserAgentGetRes$outboundSchema;
  /** @deprecated use `TelemetrySpeakeasyUserAgentGetRes$Outbound` instead. */
  export type Outbound = TelemetrySpeakeasyUserAgentGetRes$Outbound;
}

export function telemetrySpeakeasyUserAgentGetResToJSON(
  telemetrySpeakeasyUserAgentGetRes: TelemetrySpeakeasyUserAgentGetRes,
): string {
  return JSON.stringify(
    TelemetrySpeakeasyUserAgentGetRes$outboundSchema.parse(
      telemetrySpeakeasyUserAgentGetRes,
    ),
  );
}

export function telemetrySpeakeasyUserAgentGetResFromJSON(
  jsonString: string,
): SafeParseResult<TelemetrySpeakeasyUserAgentGetRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TelemetrySpeakeasyUserAgentGetRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TelemetrySpeakeasyUserAgentGetRes' from JSON`,
  );
}
