/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * OK
 */
export type TelemetryUserAgentGetRes = {
    headers: Record<string, string>;
};

export type TelemetryUserAgentGetResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: TelemetryUserAgentGetRes | undefined;
};

/** @internal */
export namespace TelemetryUserAgentGetRes$ {
    export type Inbound = {
        headers: Record<string, string>;
    };

    export const inboundSchema: z.ZodType<TelemetryUserAgentGetRes, z.ZodTypeDef, Inbound> = z
        .object({
            headers: z.record(z.string()),
        })
        .transform((v) => {
            return {
                headers: v.headers,
            };
        });

    export type Outbound = {
        headers: Record<string, string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TelemetryUserAgentGetRes> = z
        .object({
            headers: z.record(z.string()),
        })
        .transform((v) => {
            return {
                headers: v.headers,
            };
        });
}

/** @internal */
export namespace TelemetryUserAgentGetResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        res?: TelemetryUserAgentGetRes$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<TelemetryUserAgentGetResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => TelemetryUserAgentGetRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: TelemetryUserAgentGetRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TelemetryUserAgentGetResponse> =
        z
            .object({
                contentType: z.string(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
                res: z.lazy(() => TelemetryUserAgentGetRes$.outboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    ContentType: v.contentType,
                    StatusCode: v.statusCode,
                    RawResponse: v.rawResponse,
                    ...(v.res === undefined ? null : { res: v.res }),
                };
            });
}
