/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * OK
 */
export type TelemetryUserAgentGetRes = {
  headers: { [k: string]: string };
};

/** @internal */
export const TelemetryUserAgentGetRes$inboundSchema: z.ZodType<
  TelemetryUserAgentGetRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  headers: z.record(z.string()),
});

/** @internal */
export type TelemetryUserAgentGetRes$Outbound = {
  headers: { [k: string]: string };
};

/** @internal */
export const TelemetryUserAgentGetRes$outboundSchema: z.ZodType<
  TelemetryUserAgentGetRes$Outbound,
  z.ZodTypeDef,
  TelemetryUserAgentGetRes
> = z.object({
  headers: z.record(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TelemetryUserAgentGetRes$ {
  /** @deprecated use `TelemetryUserAgentGetRes$inboundSchema` instead. */
  export const inboundSchema = TelemetryUserAgentGetRes$inboundSchema;
  /** @deprecated use `TelemetryUserAgentGetRes$outboundSchema` instead. */
  export const outboundSchema = TelemetryUserAgentGetRes$outboundSchema;
  /** @deprecated use `TelemetryUserAgentGetRes$Outbound` instead. */
  export type Outbound = TelemetryUserAgentGetRes$Outbound;
}

export function telemetryUserAgentGetResToJSON(
  telemetryUserAgentGetRes: TelemetryUserAgentGetRes,
): string {
  return JSON.stringify(
    TelemetryUserAgentGetRes$outboundSchema.parse(telemetryUserAgentGetRes),
  );
}

export function telemetryUserAgentGetResFromJSON(
  jsonString: string,
): SafeParseResult<TelemetryUserAgentGetRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TelemetryUserAgentGetRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TelemetryUserAgentGetRes' from JSON`,
  );
}
