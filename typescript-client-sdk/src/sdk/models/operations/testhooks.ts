/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TestHooksRequest = {
  someParam: string;
};

export type TestHooksArgs = {
  someParam: string;
};

export type Headers = {
  clientLevelHeader?: string | undefined;
  idempotencyKey?: string | undefined;
};

/**
 * OK
 */
export type TestHooksRes = {
  args: TestHooksArgs;
  headers: Headers;
  url: string;
};

/** @internal */
export const TestHooksRequest$inboundSchema: z.ZodType<
  TestHooksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  someParam: z.string(),
});

/** @internal */
export type TestHooksRequest$Outbound = {
  someParam: string;
};

/** @internal */
export const TestHooksRequest$outboundSchema: z.ZodType<
  TestHooksRequest$Outbound,
  z.ZodTypeDef,
  TestHooksRequest
> = z.object({
  someParam: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestHooksRequest$ {
  /** @deprecated use `TestHooksRequest$inboundSchema` instead. */
  export const inboundSchema = TestHooksRequest$inboundSchema;
  /** @deprecated use `TestHooksRequest$outboundSchema` instead. */
  export const outboundSchema = TestHooksRequest$outboundSchema;
  /** @deprecated use `TestHooksRequest$Outbound` instead. */
  export type Outbound = TestHooksRequest$Outbound;
}

export function testHooksRequestToJSON(
  testHooksRequest: TestHooksRequest,
): string {
  return JSON.stringify(
    TestHooksRequest$outboundSchema.parse(testHooksRequest),
  );
}

export function testHooksRequestFromJSON(
  jsonString: string,
): SafeParseResult<TestHooksRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestHooksRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestHooksRequest' from JSON`,
  );
}

/** @internal */
export const TestHooksArgs$inboundSchema: z.ZodType<
  TestHooksArgs,
  z.ZodTypeDef,
  unknown
> = z.object({
  someParam: z.string(),
});

/** @internal */
export type TestHooksArgs$Outbound = {
  someParam: string;
};

/** @internal */
export const TestHooksArgs$outboundSchema: z.ZodType<
  TestHooksArgs$Outbound,
  z.ZodTypeDef,
  TestHooksArgs
> = z.object({
  someParam: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestHooksArgs$ {
  /** @deprecated use `TestHooksArgs$inboundSchema` instead. */
  export const inboundSchema = TestHooksArgs$inboundSchema;
  /** @deprecated use `TestHooksArgs$outboundSchema` instead. */
  export const outboundSchema = TestHooksArgs$outboundSchema;
  /** @deprecated use `TestHooksArgs$Outbound` instead. */
  export type Outbound = TestHooksArgs$Outbound;
}

export function testHooksArgsToJSON(testHooksArgs: TestHooksArgs): string {
  return JSON.stringify(TestHooksArgs$outboundSchema.parse(testHooksArgs));
}

export function testHooksArgsFromJSON(
  jsonString: string,
): SafeParseResult<TestHooksArgs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestHooksArgs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestHooksArgs' from JSON`,
  );
}

/** @internal */
export const Headers$inboundSchema: z.ZodType<Headers, z.ZodTypeDef, unknown> =
  z.object({
    "Client-Level-Header": z.string().optional(),
    "Idempotency-Key": z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "Client-Level-Header": "clientLevelHeader",
      "Idempotency-Key": "idempotencyKey",
    });
  });

/** @internal */
export type Headers$Outbound = {
  "Client-Level-Header"?: string | undefined;
  "Idempotency-Key"?: string | undefined;
};

/** @internal */
export const Headers$outboundSchema: z.ZodType<
  Headers$Outbound,
  z.ZodTypeDef,
  Headers
> = z.object({
  clientLevelHeader: z.string().optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    clientLevelHeader: "Client-Level-Header",
    idempotencyKey: "Idempotency-Key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Headers$ {
  /** @deprecated use `Headers$inboundSchema` instead. */
  export const inboundSchema = Headers$inboundSchema;
  /** @deprecated use `Headers$outboundSchema` instead. */
  export const outboundSchema = Headers$outboundSchema;
  /** @deprecated use `Headers$Outbound` instead. */
  export type Outbound = Headers$Outbound;
}

export function headersToJSON(headers: Headers): string {
  return JSON.stringify(Headers$outboundSchema.parse(headers));
}

export function headersFromJSON(
  jsonString: string,
): SafeParseResult<Headers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Headers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Headers' from JSON`,
  );
}

/** @internal */
export const TestHooksRes$inboundSchema: z.ZodType<
  TestHooksRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  args: z.lazy(() => TestHooksArgs$inboundSchema),
  headers: z.lazy(() => Headers$inboundSchema),
  url: z.string(),
});

/** @internal */
export type TestHooksRes$Outbound = {
  args: TestHooksArgs$Outbound;
  headers: Headers$Outbound;
  url: string;
};

/** @internal */
export const TestHooksRes$outboundSchema: z.ZodType<
  TestHooksRes$Outbound,
  z.ZodTypeDef,
  TestHooksRes
> = z.object({
  args: z.lazy(() => TestHooksArgs$outboundSchema),
  headers: z.lazy(() => Headers$outboundSchema),
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestHooksRes$ {
  /** @deprecated use `TestHooksRes$inboundSchema` instead. */
  export const inboundSchema = TestHooksRes$inboundSchema;
  /** @deprecated use `TestHooksRes$outboundSchema` instead. */
  export const outboundSchema = TestHooksRes$outboundSchema;
  /** @deprecated use `TestHooksRes$Outbound` instead. */
  export type Outbound = TestHooksRes$Outbound;
}

export function testHooksResToJSON(testHooksRes: TestHooksRes): string {
  return JSON.stringify(TestHooksRes$outboundSchema.parse(testHooksRes));
}

export function testHooksResFromJSON(
  jsonString: string,
): SafeParseResult<TestHooksRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestHooksRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestHooksRes' from JSON`,
  );
}
