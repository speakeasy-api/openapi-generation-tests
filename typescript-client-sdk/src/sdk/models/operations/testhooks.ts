/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type TestHooksRequest = {
    someParam: string;
};

export type TestHooksArgs = {
    someParam: string;
};

export type Headers = {
    clientLevelHeader?: string | undefined;
    idempotencyKey?: string | undefined;
};

/**
 * OK
 */
export type TestHooksRes = {
    args: TestHooksArgs;
    headers: Headers;
    url: string;
};

export type TestHooksResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: TestHooksRes | undefined;
};

/** @internal */
export namespace TestHooksRequest$ {
    export const inboundSchema: z.ZodType<TestHooksRequest, z.ZodTypeDef, unknown> = z.object({
        someParam: z.string(),
    });

    export type Outbound = {
        someParam: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TestHooksRequest> = z.object({
        someParam: z.string(),
    });
}

/** @internal */
export namespace TestHooksArgs$ {
    export const inboundSchema: z.ZodType<TestHooksArgs, z.ZodTypeDef, unknown> = z.object({
        someParam: z.string(),
    });

    export type Outbound = {
        someParam: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TestHooksArgs> = z.object({
        someParam: z.string(),
    });
}

/** @internal */
export namespace Headers$ {
    export const inboundSchema: z.ZodType<Headers, z.ZodTypeDef, unknown> = z
        .object({
            "Client-Level-Header": z.string().optional(),
            "Idempotency-Key": z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                "Client-Level-Header": "clientLevelHeader",
                "Idempotency-Key": "idempotencyKey",
            });
        });

    export type Outbound = {
        "Client-Level-Header"?: string | undefined;
        "Idempotency-Key"?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Headers> = z
        .object({
            clientLevelHeader: z.string().optional(),
            idempotencyKey: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                clientLevelHeader: "Client-Level-Header",
                idempotencyKey: "Idempotency-Key",
            });
        });
}

/** @internal */
export namespace TestHooksRes$ {
    export const inboundSchema: z.ZodType<TestHooksRes, z.ZodTypeDef, unknown> = z.object({
        args: z.lazy(() => TestHooksArgs$.inboundSchema),
        headers: z.lazy(() => Headers$.inboundSchema),
        url: z.string(),
    });

    export type Outbound = {
        args: TestHooksArgs$.Outbound;
        headers: Headers$.Outbound;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TestHooksRes> = z.object({
        args: z.lazy(() => TestHooksArgs$.outboundSchema),
        headers: z.lazy(() => Headers$.outboundSchema),
        url: z.string(),
    });
}

/** @internal */
export namespace TestHooksResponse$ {
    export const inboundSchema: z.ZodType<TestHooksResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => TestHooksRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: TestHooksRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TestHooksResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => TestHooksRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
