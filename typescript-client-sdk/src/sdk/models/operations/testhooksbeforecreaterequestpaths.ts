/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type TestHooksBeforeCreateRequestPathsRequest = {
    namespace: string;
};

export type TestHooksBeforeCreateRequestPathsHeaders = {
    oldPathname?: string | undefined;
};

/**
 * OK
 */
export type TestHooksBeforeCreateRequestPathsRes = {
    headers: TestHooksBeforeCreateRequestPathsHeaders;
    url: string;
};

export type TestHooksBeforeCreateRequestPathsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: TestHooksBeforeCreateRequestPathsRes | undefined;
};

/** @internal */
export namespace TestHooksBeforeCreateRequestPathsRequest$ {
    export const inboundSchema: z.ZodType<
        TestHooksBeforeCreateRequestPathsRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            namespace: z.string(),
        })
        .transform((v) => {
            return {
                namespace: v.namespace,
            };
        });

    export type Outbound = {
        namespace: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TestHooksBeforeCreateRequestPathsRequest
    > = z
        .object({
            namespace: z.string(),
        })
        .transform((v) => {
            return {
                namespace: v.namespace,
            };
        });
}

/** @internal */
export namespace TestHooksBeforeCreateRequestPathsHeaders$ {
    export const inboundSchema: z.ZodType<
        TestHooksBeforeCreateRequestPathsHeaders,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            "Old-Pathname": z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v["Old-Pathname"] === undefined ? null : { oldPathname: v["Old-Pathname"] }),
            };
        });

    export type Outbound = {
        "Old-Pathname"?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TestHooksBeforeCreateRequestPathsHeaders
    > = z
        .object({
            oldPathname: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.oldPathname === undefined ? null : { "Old-Pathname": v.oldPathname }),
            };
        });
}

/** @internal */
export namespace TestHooksBeforeCreateRequestPathsRes$ {
    export const inboundSchema: z.ZodType<
        TestHooksBeforeCreateRequestPathsRes,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            headers: z.lazy(() => TestHooksBeforeCreateRequestPathsHeaders$.inboundSchema),
            url: z.string(),
        })
        .transform((v) => {
            return {
                headers: v.headers,
                url: v.url,
            };
        });

    export type Outbound = {
        headers: TestHooksBeforeCreateRequestPathsHeaders$.Outbound;
        url: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TestHooksBeforeCreateRequestPathsRes
    > = z
        .object({
            headers: z.lazy(() => TestHooksBeforeCreateRequestPathsHeaders$.outboundSchema),
            url: z.string(),
        })
        .transform((v) => {
            return {
                headers: v.headers,
                url: v.url,
            };
        });
}

/** @internal */
export namespace TestHooksBeforeCreateRequestPathsResponse$ {
    export const inboundSchema: z.ZodType<
        TestHooksBeforeCreateRequestPathsResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => TestHooksBeforeCreateRequestPathsRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: TestHooksBeforeCreateRequestPathsRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TestHooksBeforeCreateRequestPathsResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => TestHooksBeforeCreateRequestPathsRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
