/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type TestHooksBeforeCreateRequestPathsRequest = {
    namespace: string;
};

export type TestHooksBeforeCreateRequestPathsHeaders = {
    oldPathname?: string | undefined;
};

/**
 * OK
 */
export type TestHooksBeforeCreateRequestPathsRes = {
    headers: TestHooksBeforeCreateRequestPathsHeaders;
    url: string;
};

/** @internal */
export namespace TestHooksBeforeCreateRequestPathsRequest$ {
    export const inboundSchema: z.ZodType<
        TestHooksBeforeCreateRequestPathsRequest,
        z.ZodTypeDef,
        unknown
    > = z.object({
        namespace: z.string(),
    });

    export type Outbound = {
        namespace: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TestHooksBeforeCreateRequestPathsRequest
    > = z.object({
        namespace: z.string(),
    });
}

/** @internal */
export namespace TestHooksBeforeCreateRequestPathsHeaders$ {
    export const inboundSchema: z.ZodType<
        TestHooksBeforeCreateRequestPathsHeaders,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            "Old-Pathname": z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                "Old-Pathname": "oldPathname",
            });
        });

    export type Outbound = {
        "Old-Pathname"?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TestHooksBeforeCreateRequestPathsHeaders
    > = z
        .object({
            oldPathname: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                oldPathname: "Old-Pathname",
            });
        });
}

/** @internal */
export namespace TestHooksBeforeCreateRequestPathsRes$ {
    export const inboundSchema: z.ZodType<
        TestHooksBeforeCreateRequestPathsRes,
        z.ZodTypeDef,
        unknown
    > = z.object({
        headers: z.lazy(() => TestHooksBeforeCreateRequestPathsHeaders$.inboundSchema),
        url: z.string(),
    });

    export type Outbound = {
        headers: TestHooksBeforeCreateRequestPathsHeaders$.Outbound;
        url: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TestHooksBeforeCreateRequestPathsRes
    > = z.object({
        headers: z.lazy(() => TestHooksBeforeCreateRequestPathsHeaders$.outboundSchema),
        url: z.string(),
    });
}
