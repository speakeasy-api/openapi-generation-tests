/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$, RFCDate } from "../../../sdk/types";
import { z } from "zod";

export type Obj = {
    bool: boolean;
    num: number;
    str: string;
};

export type TypedParameterGenerationGetRequest = {
    bigint?: bigint | undefined;
    date?: RFCDate | undefined;
    decimal?: Decimal$ | number | undefined;
    obj?: Obj | undefined;
};

export type TypedParameterGenerationGetResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace Obj$ {
    export type Inbound = {
        bool: boolean;
        num: number;
        str: string;
    };

    export const inboundSchema: z.ZodType<Obj, z.ZodTypeDef, Inbound> = z
        .object({
            bool: z.boolean(),
            num: z.number(),
            str: z.string(),
        })
        .transform((v) => {
            return {
                bool: v.bool,
                num: v.num,
                str: v.str,
            };
        });

    export type Outbound = {
        bool: boolean;
        num: number;
        str: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Obj> = z
        .object({
            bool: z.boolean(),
            num: z.number(),
            str: z.string(),
        })
        .transform((v) => {
            return {
                bool: v.bool,
                num: v.num,
                str: v.str,
            };
        });
}

/** @internal */
export namespace TypedParameterGenerationGetRequest$ {
    export type Inbound = {
        bigint?: number | undefined;
        date?: string | undefined;
        decimal?: number | undefined;
        obj?: Obj$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        TypedParameterGenerationGetRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            bigint: z
                .number()
                .transform((v) => BigInt(v))
                .optional(),
            date: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
            decimal: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            obj: z.lazy(() => Obj$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.bigint === undefined ? null : { bigint: v.bigint }),
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.decimal === undefined ? null : { decimal: v.decimal }),
                ...(v.obj === undefined ? null : { obj: v.obj }),
            };
        });

    export type Outbound = {
        bigint?: number | undefined;
        date?: string | undefined;
        decimal?: number | undefined;
        obj?: Obj$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TypedParameterGenerationGetRequest
    > = z
        .object({
            bigint: z
                .bigint()
                .transform((v) => Number(v))
                .optional(),
            date: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
            decimal: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            obj: z.lazy(() => Obj$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.bigint === undefined ? null : { bigint: v.bigint }),
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.decimal === undefined ? null : { decimal: v.decimal }),
                ...(v.obj === undefined ? null : { obj: v.obj }),
            };
        });
}

/** @internal */
export namespace TypedParameterGenerationGetResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        TypedParameterGenerationGetResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TypedParameterGenerationGetResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
