/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types/decimal.js";
import { RFCDate } from "../../types/rfcdate.js";
import * as z from "zod";

export type Obj = {
    bool: boolean;
    num: number;
    str: string;
};

export type TypedParameterGenerationGetRequest = {
    bigint?: bigint | undefined;
    date?: RFCDate | undefined;
    decimal?: Decimal$ | number | undefined;
    obj?: Obj | undefined;
};

/** @internal */
export namespace Obj$ {
    export const inboundSchema: z.ZodType<Obj, z.ZodTypeDef, unknown> = z.object({
        bool: z.boolean(),
        num: z.number(),
        str: z.string(),
    });

    export type Outbound = {
        bool: boolean;
        num: number;
        str: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Obj> = z.object({
        bool: z.boolean(),
        num: z.number(),
        str: z.string(),
    });
}

/** @internal */
export namespace TypedParameterGenerationGetRequest$ {
    export const inboundSchema: z.ZodType<
        TypedParameterGenerationGetRequest,
        z.ZodTypeDef,
        unknown
    > = z.object({
        bigint: z
            .number()
            .transform((v) => BigInt(v))
            .optional(),
        date: z
            .string()
            .transform((v) => new RFCDate(v))
            .optional(),
        decimal: z
            .number()
            .transform((v) => new Decimal$(v))
            .optional(),
        obj: z.lazy(() => Obj$.inboundSchema).optional(),
    });

    export type Outbound = {
        bigint?: number | undefined;
        date?: string | undefined;
        decimal?: number | undefined;
        obj?: Obj$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TypedParameterGenerationGetRequest
    > = z.object({
        bigint: z
            .bigint()
            .transform((v) => Number(v))
            .optional(),
        date: z
            .instanceof(RFCDate)
            .transform((v) => v.toString())
            .optional(),
        decimal: z
            .union([z.instanceof(Decimal$), z.number()])
            .transform((v) => (typeof v === "number" ? v : v.toNumber()))
            .optional(),
        obj: z.lazy(() => Obj$.outboundSchema).optional(),
    });
}
