/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Obj = {
  bool: boolean;
  num: number;
  str: string;
};

export type TypedParameterGenerationGetRequest = {
  bigint?: bigint | undefined;
  date?: RFCDate | undefined;
  decimal?: Decimal$ | number | undefined;
  obj?: Obj | undefined;
};

/** @internal */
export const Obj$inboundSchema: z.ZodType<Obj, z.ZodTypeDef, unknown> = z
  .object({
    bool: z.boolean(),
    num: z.number(),
    str: z.string(),
  });

/** @internal */
export type Obj$Outbound = {
  bool: boolean;
  num: number;
  str: string;
};

/** @internal */
export const Obj$outboundSchema: z.ZodType<Obj$Outbound, z.ZodTypeDef, Obj> = z
  .object({
    bool: z.boolean(),
    num: z.number(),
    str: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Obj$ {
  /** @deprecated use `Obj$inboundSchema` instead. */
  export const inboundSchema = Obj$inboundSchema;
  /** @deprecated use `Obj$outboundSchema` instead. */
  export const outboundSchema = Obj$outboundSchema;
  /** @deprecated use `Obj$Outbound` instead. */
  export type Outbound = Obj$Outbound;
}

export function objToJSON(obj: Obj): string {
  return JSON.stringify(Obj$outboundSchema.parse(obj));
}

export function objFromJSON(
  jsonString: string,
): SafeParseResult<Obj, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Obj$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Obj' from JSON`,
  );
}

/** @internal */
export const TypedParameterGenerationGetRequest$inboundSchema: z.ZodType<
  TypedParameterGenerationGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  bigint: z.number().transform(v => BigInt(v)).optional(),
  date: z.string().transform(v => new RFCDate(v)).optional(),
  decimal: z.number().transform(v => new Decimal$(v)).optional(),
  obj: z.lazy(() => Obj$inboundSchema).optional(),
});

/** @internal */
export type TypedParameterGenerationGetRequest$Outbound = {
  bigint?: number | undefined;
  date?: string | undefined;
  decimal?: number | undefined;
  obj?: Obj$Outbound | undefined;
};

/** @internal */
export const TypedParameterGenerationGetRequest$outboundSchema: z.ZodType<
  TypedParameterGenerationGetRequest$Outbound,
  z.ZodTypeDef,
  TypedParameterGenerationGetRequest
> = z.object({
  bigint: z.bigint().transform(v => Number(v)).optional(),
  date: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  decimal: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
  obj: z.lazy(() => Obj$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypedParameterGenerationGetRequest$ {
  /** @deprecated use `TypedParameterGenerationGetRequest$inboundSchema` instead. */
  export const inboundSchema = TypedParameterGenerationGetRequest$inboundSchema;
  /** @deprecated use `TypedParameterGenerationGetRequest$outboundSchema` instead. */
  export const outboundSchema =
    TypedParameterGenerationGetRequest$outboundSchema;
  /** @deprecated use `TypedParameterGenerationGetRequest$Outbound` instead. */
  export type Outbound = TypedParameterGenerationGetRequest$Outbound;
}

export function typedParameterGenerationGetRequestToJSON(
  typedParameterGenerationGetRequest: TypedParameterGenerationGetRequest,
): string {
  return JSON.stringify(
    TypedParameterGenerationGetRequest$outboundSchema.parse(
      typedParameterGenerationGetRequest,
    ),
  );
}

export function typedParameterGenerationGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<TypedParameterGenerationGetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TypedParameterGenerationGetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TypedParameterGenerationGetRequest' from JSON`,
  );
}
