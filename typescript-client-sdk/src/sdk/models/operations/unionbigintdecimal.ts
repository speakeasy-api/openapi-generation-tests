/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../../sdk/types";
import { z } from "zod";

export type UnionBigIntDecimalRequestBody = bigint | Decimal$ | number;

export type UnionBigIntDecimalJson = bigint | Decimal$ | number;

/**
 * OK
 */
export type UnionBigIntDecimalRes = {
    json: bigint | Decimal$ | number;
};

export type UnionBigIntDecimalResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: UnionBigIntDecimalRes | undefined;
};

/** @internal */
export namespace UnionBigIntDecimalRequestBody$ {
    export type Inbound = string | number;

    export type Outbound = string | number;

    export const inboundSchema: z.ZodType<UnionBigIntDecimalRequestBody, z.ZodTypeDef, Inbound> =
        z.union([
            z.string().transform((v) => BigInt(v)),
            z.number().transform((v) => new Decimal$(v)),
        ]);

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnionBigIntDecimalRequestBody> =
        z.union([
            z.bigint().transform((v) => `${v}`),
            z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
        ]);
}

/** @internal */
export namespace UnionBigIntDecimalJson$ {
    export type Inbound = string | number;

    export type Outbound = string | number;

    export const inboundSchema: z.ZodType<UnionBigIntDecimalJson, z.ZodTypeDef, Inbound> = z.union([
        z.string().transform((v) => BigInt(v)),
        z.number().transform((v) => new Decimal$(v)),
    ]);

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnionBigIntDecimalJson> =
        z.union([
            z.bigint().transform((v) => `${v}`),
            z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
        ]);
}

/** @internal */
export namespace UnionBigIntDecimalRes$ {
    export type Inbound = {
        json: string | number;
    };

    export const inboundSchema: z.ZodType<UnionBigIntDecimalRes, z.ZodTypeDef, Inbound> = z
        .object({
            json: z.union([
                z.string().transform((v) => BigInt(v)),
                z.number().transform((v) => new Decimal$(v)),
            ]),
        })
        .transform((v) => {
            return {
                json: v.json,
            };
        });

    export type Outbound = {
        json: string | number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnionBigIntDecimalRes> = z
        .object({
            json: z.union([
                z.bigint().transform((v) => `${v}`),
                z
                    .union([z.instanceof(Decimal$), z.number()])
                    .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            ]),
        })
        .transform((v) => {
            return {
                json: v.json,
            };
        });
}

/** @internal */
export namespace UnionBigIntDecimalResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        res?: UnionBigIntDecimalRes$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<UnionBigIntDecimalResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => UnionBigIntDecimalRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: UnionBigIntDecimalRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnionBigIntDecimalResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => UnionBigIntDecimalRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
