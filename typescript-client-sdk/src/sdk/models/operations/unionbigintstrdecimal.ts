/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types/decimal.js";
import * as z from "zod";

export type UnionBigIntStrDecimalRequestBody = bigint | Decimal$ | number;

export type UnionBigIntStrDecimalJson = bigint | Decimal$ | number;

/**
 * OK
 */
export type UnionBigIntStrDecimalRes = {
    json: bigint | Decimal$ | number;
};

/** @internal */
export namespace UnionBigIntStrDecimalRequestBody$ {
    export const inboundSchema: z.ZodType<UnionBigIntStrDecimalRequestBody, z.ZodTypeDef, unknown> =
        z.union([
            z.string().transform((v) => BigInt(v)),
            z.number().transform((v) => new Decimal$(v)),
        ]);

    export type Outbound = string | number;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnionBigIntStrDecimalRequestBody
    > = z.union([
        z.bigint().transform((v) => `${v}`),
        z
            .union([z.instanceof(Decimal$), z.number()])
            .transform((v) => (typeof v === "number" ? v : v.toNumber())),
    ]);
}

/** @internal */
export namespace UnionBigIntStrDecimalJson$ {
    export const inboundSchema: z.ZodType<UnionBigIntStrDecimalJson, z.ZodTypeDef, unknown> =
        z.union([
            z.string().transform((v) => BigInt(v)),
            z.number().transform((v) => new Decimal$(v)),
        ]);

    export type Outbound = string | number;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnionBigIntStrDecimalJson> =
        z.union([
            z.bigint().transform((v) => `${v}`),
            z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
        ]);
}

/** @internal */
export namespace UnionBigIntStrDecimalRes$ {
    export const inboundSchema: z.ZodType<UnionBigIntStrDecimalRes, z.ZodTypeDef, unknown> =
        z.object({
            json: z.union([
                z.string().transform((v) => BigInt(v)),
                z.number().transform((v) => new Decimal$(v)),
            ]),
        });

    export type Outbound = {
        json: string | number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnionBigIntStrDecimalRes> =
        z.object({
            json: z.union([
                z.bigint().transform((v) => `${v}`),
                z
                    .union([z.instanceof(Decimal$), z.number()])
                    .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            ]),
        });
}
