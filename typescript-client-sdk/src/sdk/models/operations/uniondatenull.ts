/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * OK
 */
export type UnionDateNullRes = {
  json: RFCDate | null;
};

/** @internal */
export const UnionDateNullRes$inboundSchema: z.ZodType<
  UnionDateNullRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  json: z.nullable(z.string().transform(v => new RFCDate(v))),
});

/** @internal */
export type UnionDateNullRes$Outbound = {
  json: string | null;
};

/** @internal */
export const UnionDateNullRes$outboundSchema: z.ZodType<
  UnionDateNullRes$Outbound,
  z.ZodTypeDef,
  UnionDateNullRes
> = z.object({
  json: z.nullable(z.instanceof(RFCDate).transform(v => v.toString())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnionDateNullRes$ {
  /** @deprecated use `UnionDateNullRes$inboundSchema` instead. */
  export const inboundSchema = UnionDateNullRes$inboundSchema;
  /** @deprecated use `UnionDateNullRes$outboundSchema` instead. */
  export const outboundSchema = UnionDateNullRes$outboundSchema;
  /** @deprecated use `UnionDateNullRes$Outbound` instead. */
  export type Outbound = UnionDateNullRes$Outbound;
}

export function unionDateNullResToJSON(
  unionDateNullRes: UnionDateNullRes,
): string {
  return JSON.stringify(
    UnionDateNullRes$outboundSchema.parse(unionDateNullRes),
  );
}

export function unionDateNullResFromJSON(
  jsonString: string,
): SafeParseResult<UnionDateNullRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnionDateNullRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnionDateNullRes' from JSON`,
  );
}
