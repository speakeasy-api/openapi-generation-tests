/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UnionDateTimeBigIntRequestBody = Date | bigint;

export type UnionDateTimeBigIntJson = Date | bigint;

/**
 * OK
 */
export type UnionDateTimeBigIntRes = {
  json: Date | bigint;
};

/** @internal */
export const UnionDateTimeBigIntRequestBody$inboundSchema: z.ZodType<
  UnionDateTimeBigIntRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string().datetime({ offset: true }).transform(v => new Date(v)),
  z.number().transform(v => BigInt(v)),
]);

/** @internal */
export type UnionDateTimeBigIntRequestBody$Outbound = string | number;

/** @internal */
export const UnionDateTimeBigIntRequestBody$outboundSchema: z.ZodType<
  UnionDateTimeBigIntRequestBody$Outbound,
  z.ZodTypeDef,
  UnionDateTimeBigIntRequestBody
> = z.union([
  z.date().transform(v => v.toISOString()),
  z.bigint().transform(v => Number(v)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnionDateTimeBigIntRequestBody$ {
  /** @deprecated use `UnionDateTimeBigIntRequestBody$inboundSchema` instead. */
  export const inboundSchema = UnionDateTimeBigIntRequestBody$inboundSchema;
  /** @deprecated use `UnionDateTimeBigIntRequestBody$outboundSchema` instead. */
  export const outboundSchema = UnionDateTimeBigIntRequestBody$outboundSchema;
  /** @deprecated use `UnionDateTimeBigIntRequestBody$Outbound` instead. */
  export type Outbound = UnionDateTimeBigIntRequestBody$Outbound;
}

export function unionDateTimeBigIntRequestBodyToJSON(
  unionDateTimeBigIntRequestBody: UnionDateTimeBigIntRequestBody,
): string {
  return JSON.stringify(
    UnionDateTimeBigIntRequestBody$outboundSchema.parse(
      unionDateTimeBigIntRequestBody,
    ),
  );
}

export function unionDateTimeBigIntRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UnionDateTimeBigIntRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnionDateTimeBigIntRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnionDateTimeBigIntRequestBody' from JSON`,
  );
}

/** @internal */
export const UnionDateTimeBigIntJson$inboundSchema: z.ZodType<
  UnionDateTimeBigIntJson,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string().datetime({ offset: true }).transform(v => new Date(v)),
  z.number().transform(v => BigInt(v)),
]);

/** @internal */
export type UnionDateTimeBigIntJson$Outbound = string | number;

/** @internal */
export const UnionDateTimeBigIntJson$outboundSchema: z.ZodType<
  UnionDateTimeBigIntJson$Outbound,
  z.ZodTypeDef,
  UnionDateTimeBigIntJson
> = z.union([
  z.date().transform(v => v.toISOString()),
  z.bigint().transform(v => Number(v)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnionDateTimeBigIntJson$ {
  /** @deprecated use `UnionDateTimeBigIntJson$inboundSchema` instead. */
  export const inboundSchema = UnionDateTimeBigIntJson$inboundSchema;
  /** @deprecated use `UnionDateTimeBigIntJson$outboundSchema` instead. */
  export const outboundSchema = UnionDateTimeBigIntJson$outboundSchema;
  /** @deprecated use `UnionDateTimeBigIntJson$Outbound` instead. */
  export type Outbound = UnionDateTimeBigIntJson$Outbound;
}

export function unionDateTimeBigIntJsonToJSON(
  unionDateTimeBigIntJson: UnionDateTimeBigIntJson,
): string {
  return JSON.stringify(
    UnionDateTimeBigIntJson$outboundSchema.parse(unionDateTimeBigIntJson),
  );
}

export function unionDateTimeBigIntJsonFromJSON(
  jsonString: string,
): SafeParseResult<UnionDateTimeBigIntJson, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnionDateTimeBigIntJson$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnionDateTimeBigIntJson' from JSON`,
  );
}

/** @internal */
export const UnionDateTimeBigIntRes$inboundSchema: z.ZodType<
  UnionDateTimeBigIntRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  json: z.union([
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
    z.number().transform(v => BigInt(v)),
  ]),
});

/** @internal */
export type UnionDateTimeBigIntRes$Outbound = {
  json: string | number;
};

/** @internal */
export const UnionDateTimeBigIntRes$outboundSchema: z.ZodType<
  UnionDateTimeBigIntRes$Outbound,
  z.ZodTypeDef,
  UnionDateTimeBigIntRes
> = z.object({
  json: z.union([
    z.date().transform(v => v.toISOString()),
    z.bigint().transform(v => Number(v)),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnionDateTimeBigIntRes$ {
  /** @deprecated use `UnionDateTimeBigIntRes$inboundSchema` instead. */
  export const inboundSchema = UnionDateTimeBigIntRes$inboundSchema;
  /** @deprecated use `UnionDateTimeBigIntRes$outboundSchema` instead. */
  export const outboundSchema = UnionDateTimeBigIntRes$outboundSchema;
  /** @deprecated use `UnionDateTimeBigIntRes$Outbound` instead. */
  export type Outbound = UnionDateTimeBigIntRes$Outbound;
}

export function unionDateTimeBigIntResToJSON(
  unionDateTimeBigIntRes: UnionDateTimeBigIntRes,
): string {
  return JSON.stringify(
    UnionDateTimeBigIntRes$outboundSchema.parse(unionDateTimeBigIntRes),
  );
}

export function unionDateTimeBigIntResFromJSON(
  jsonString: string,
): SafeParseResult<UnionDateTimeBigIntRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnionDateTimeBigIntRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnionDateTimeBigIntRes' from JSON`,
  );
}
