/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type UnionDateTimeBigIntRequestBody = Date | bigint;

export type UnionDateTimeBigIntJson = Date | bigint;

/**
 * OK
 */
export type UnionDateTimeBigIntRes = {
    json: Date | bigint;
};

export type UnionDateTimeBigIntResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: UnionDateTimeBigIntRes | undefined;
};

/** @internal */
export namespace UnionDateTimeBigIntRequestBody$ {
    export type Inbound = string | number;

    export type Outbound = string | number;

    export const inboundSchema: z.ZodType<UnionDateTimeBigIntRequestBody, z.ZodTypeDef, Inbound> =
        z.union([
            z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            z.number().transform((v) => BigInt(v)),
        ]);

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnionDateTimeBigIntRequestBody> =
        z.union([
            z.date().transform((v) => v.toISOString()),
            z.bigint().transform((v) => Number(v)),
        ]);
}

/** @internal */
export namespace UnionDateTimeBigIntJson$ {
    export type Inbound = string | number;

    export type Outbound = string | number;

    export const inboundSchema: z.ZodType<UnionDateTimeBigIntJson, z.ZodTypeDef, Inbound> = z.union(
        [
            z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            z.number().transform((v) => BigInt(v)),
        ]
    );

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnionDateTimeBigIntJson> =
        z.union([
            z.date().transform((v) => v.toISOString()),
            z.bigint().transform((v) => Number(v)),
        ]);
}

/** @internal */
export namespace UnionDateTimeBigIntRes$ {
    export type Inbound = {
        json: string | number;
    };

    export const inboundSchema: z.ZodType<UnionDateTimeBigIntRes, z.ZodTypeDef, Inbound> = z
        .object({
            json: z.union([
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v)),
                z.number().transform((v) => BigInt(v)),
            ]),
        })
        .transform((v) => {
            return {
                json: v.json,
            };
        });

    export type Outbound = {
        json: string | number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnionDateTimeBigIntRes> = z
        .object({
            json: z.union([
                z.date().transform((v) => v.toISOString()),
                z.bigint().transform((v) => Number(v)),
            ]),
        })
        .transform((v) => {
            return {
                json: v.json,
            };
        });
}

/** @internal */
export namespace UnionDateTimeBigIntResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        res?: UnionDateTimeBigIntRes$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<UnionDateTimeBigIntResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => UnionDateTimeBigIntRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: UnionDateTimeBigIntRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnionDateTimeBigIntResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => UnionDateTimeBigIntRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
