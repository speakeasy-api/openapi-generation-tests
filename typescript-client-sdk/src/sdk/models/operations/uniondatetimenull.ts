/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * OK
 */
export type UnionDateTimeNullRes = {
  json: Date | null;
};

/** @internal */
export const UnionDateTimeNullRes$inboundSchema: z.ZodType<
  UnionDateTimeNullRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  json: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
});

/** @internal */
export type UnionDateTimeNullRes$Outbound = {
  json: string | null;
};

/** @internal */
export const UnionDateTimeNullRes$outboundSchema: z.ZodType<
  UnionDateTimeNullRes$Outbound,
  z.ZodTypeDef,
  UnionDateTimeNullRes
> = z.object({
  json: z.nullable(z.date().transform(v => v.toISOString())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnionDateTimeNullRes$ {
  /** @deprecated use `UnionDateTimeNullRes$inboundSchema` instead. */
  export const inboundSchema = UnionDateTimeNullRes$inboundSchema;
  /** @deprecated use `UnionDateTimeNullRes$outboundSchema` instead. */
  export const outboundSchema = UnionDateTimeNullRes$outboundSchema;
  /** @deprecated use `UnionDateTimeNullRes$Outbound` instead. */
  export type Outbound = UnionDateTimeNullRes$Outbound;
}

export function unionDateTimeNullResToJSON(
  unionDateTimeNullRes: UnionDateTimeNullRes,
): string {
  return JSON.stringify(
    UnionDateTimeNullRes$outboundSchema.parse(unionDateTimeNullRes),
  );
}

export function unionDateTimeNullResFromJSON(
  jsonString: string,
): SafeParseResult<UnionDateTimeNullRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnionDateTimeNullRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnionDateTimeNullRes' from JSON`,
  );
}
