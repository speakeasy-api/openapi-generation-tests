/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type UnionMapOptionalRequestBody = {
  input?: { [k: string]: shared.OneOfPrimitives } | undefined;
};

export type UnionMapOptionalJson = {
  input?: { [k: string]: shared.OneOfPrimitives } | undefined;
};

/**
 * OK
 */
export type UnionMapOptionalRes = {
  json: UnionMapOptionalJson;
};

/** @internal */
export const UnionMapOptionalRequestBody$inboundSchema: z.ZodType<
  UnionMapOptionalRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  input: z.record(shared.OneOfPrimitives$inboundSchema).optional(),
});

/** @internal */
export type UnionMapOptionalRequestBody$Outbound = {
  input?: { [k: string]: shared.OneOfPrimitives$Outbound } | undefined;
};

/** @internal */
export const UnionMapOptionalRequestBody$outboundSchema: z.ZodType<
  UnionMapOptionalRequestBody$Outbound,
  z.ZodTypeDef,
  UnionMapOptionalRequestBody
> = z.object({
  input: z.record(shared.OneOfPrimitives$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnionMapOptionalRequestBody$ {
  /** @deprecated use `UnionMapOptionalRequestBody$inboundSchema` instead. */
  export const inboundSchema = UnionMapOptionalRequestBody$inboundSchema;
  /** @deprecated use `UnionMapOptionalRequestBody$outboundSchema` instead. */
  export const outboundSchema = UnionMapOptionalRequestBody$outboundSchema;
  /** @deprecated use `UnionMapOptionalRequestBody$Outbound` instead. */
  export type Outbound = UnionMapOptionalRequestBody$Outbound;
}

export function unionMapOptionalRequestBodyToJSON(
  unionMapOptionalRequestBody: UnionMapOptionalRequestBody,
): string {
  return JSON.stringify(
    UnionMapOptionalRequestBody$outboundSchema.parse(
      unionMapOptionalRequestBody,
    ),
  );
}

export function unionMapOptionalRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UnionMapOptionalRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnionMapOptionalRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnionMapOptionalRequestBody' from JSON`,
  );
}

/** @internal */
export const UnionMapOptionalJson$inboundSchema: z.ZodType<
  UnionMapOptionalJson,
  z.ZodTypeDef,
  unknown
> = z.object({
  input: z.record(shared.OneOfPrimitives$inboundSchema).optional(),
});

/** @internal */
export type UnionMapOptionalJson$Outbound = {
  input?: { [k: string]: shared.OneOfPrimitives$Outbound } | undefined;
};

/** @internal */
export const UnionMapOptionalJson$outboundSchema: z.ZodType<
  UnionMapOptionalJson$Outbound,
  z.ZodTypeDef,
  UnionMapOptionalJson
> = z.object({
  input: z.record(shared.OneOfPrimitives$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnionMapOptionalJson$ {
  /** @deprecated use `UnionMapOptionalJson$inboundSchema` instead. */
  export const inboundSchema = UnionMapOptionalJson$inboundSchema;
  /** @deprecated use `UnionMapOptionalJson$outboundSchema` instead. */
  export const outboundSchema = UnionMapOptionalJson$outboundSchema;
  /** @deprecated use `UnionMapOptionalJson$Outbound` instead. */
  export type Outbound = UnionMapOptionalJson$Outbound;
}

export function unionMapOptionalJsonToJSON(
  unionMapOptionalJson: UnionMapOptionalJson,
): string {
  return JSON.stringify(
    UnionMapOptionalJson$outboundSchema.parse(unionMapOptionalJson),
  );
}

export function unionMapOptionalJsonFromJSON(
  jsonString: string,
): SafeParseResult<UnionMapOptionalJson, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnionMapOptionalJson$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnionMapOptionalJson' from JSON`,
  );
}

/** @internal */
export const UnionMapOptionalRes$inboundSchema: z.ZodType<
  UnionMapOptionalRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  json: z.lazy(() => UnionMapOptionalJson$inboundSchema),
});

/** @internal */
export type UnionMapOptionalRes$Outbound = {
  json: UnionMapOptionalJson$Outbound;
};

/** @internal */
export const UnionMapOptionalRes$outboundSchema: z.ZodType<
  UnionMapOptionalRes$Outbound,
  z.ZodTypeDef,
  UnionMapOptionalRes
> = z.object({
  json: z.lazy(() => UnionMapOptionalJson$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnionMapOptionalRes$ {
  /** @deprecated use `UnionMapOptionalRes$inboundSchema` instead. */
  export const inboundSchema = UnionMapOptionalRes$inboundSchema;
  /** @deprecated use `UnionMapOptionalRes$outboundSchema` instead. */
  export const outboundSchema = UnionMapOptionalRes$outboundSchema;
  /** @deprecated use `UnionMapOptionalRes$Outbound` instead. */
  export type Outbound = UnionMapOptionalRes$Outbound;
}

export function unionMapOptionalResToJSON(
  unionMapOptionalRes: UnionMapOptionalRes,
): string {
  return JSON.stringify(
    UnionMapOptionalRes$outboundSchema.parse(unionMapOptionalRes),
  );
}

export function unionMapOptionalResFromJSON(
  jsonString: string,
): SafeParseResult<UnionMapOptionalRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnionMapOptionalRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnionMapOptionalRes' from JSON`,
  );
}
