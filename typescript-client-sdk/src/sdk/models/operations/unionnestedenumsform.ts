/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type UnionNestedEnumsFormRequestBody =
  | shared.NestedEnumMap
  | shared.NestedEnumArray;

/**
 * OK
 */
export type UnionNestedEnumsFormRes = {
  form: { [k: string]: any };
};

/** @internal */
export const UnionNestedEnumsFormRequestBody$inboundSchema: z.ZodType<
  UnionNestedEnumsFormRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  shared.NestedEnumMap$inboundSchema,
  shared.NestedEnumArray$inboundSchema,
]);

/** @internal */
export type UnionNestedEnumsFormRequestBody$Outbound =
  | shared.NestedEnumMap$Outbound
  | shared.NestedEnumArray$Outbound;

/** @internal */
export const UnionNestedEnumsFormRequestBody$outboundSchema: z.ZodType<
  UnionNestedEnumsFormRequestBody$Outbound,
  z.ZodTypeDef,
  UnionNestedEnumsFormRequestBody
> = z.union([
  shared.NestedEnumMap$outboundSchema,
  shared.NestedEnumArray$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnionNestedEnumsFormRequestBody$ {
  /** @deprecated use `UnionNestedEnumsFormRequestBody$inboundSchema` instead. */
  export const inboundSchema = UnionNestedEnumsFormRequestBody$inboundSchema;
  /** @deprecated use `UnionNestedEnumsFormRequestBody$outboundSchema` instead. */
  export const outboundSchema = UnionNestedEnumsFormRequestBody$outboundSchema;
  /** @deprecated use `UnionNestedEnumsFormRequestBody$Outbound` instead. */
  export type Outbound = UnionNestedEnumsFormRequestBody$Outbound;
}

export function unionNestedEnumsFormRequestBodyToJSON(
  unionNestedEnumsFormRequestBody: UnionNestedEnumsFormRequestBody,
): string {
  return JSON.stringify(
    UnionNestedEnumsFormRequestBody$outboundSchema.parse(
      unionNestedEnumsFormRequestBody,
    ),
  );
}

export function unionNestedEnumsFormRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UnionNestedEnumsFormRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnionNestedEnumsFormRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnionNestedEnumsFormRequestBody' from JSON`,
  );
}

/** @internal */
export const UnionNestedEnumsFormRes$inboundSchema: z.ZodType<
  UnionNestedEnumsFormRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  form: z.record(z.any()),
});

/** @internal */
export type UnionNestedEnumsFormRes$Outbound = {
  form: { [k: string]: any };
};

/** @internal */
export const UnionNestedEnumsFormRes$outboundSchema: z.ZodType<
  UnionNestedEnumsFormRes$Outbound,
  z.ZodTypeDef,
  UnionNestedEnumsFormRes
> = z.object({
  form: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnionNestedEnumsFormRes$ {
  /** @deprecated use `UnionNestedEnumsFormRes$inboundSchema` instead. */
  export const inboundSchema = UnionNestedEnumsFormRes$inboundSchema;
  /** @deprecated use `UnionNestedEnumsFormRes$outboundSchema` instead. */
  export const outboundSchema = UnionNestedEnumsFormRes$outboundSchema;
  /** @deprecated use `UnionNestedEnumsFormRes$Outbound` instead. */
  export type Outbound = UnionNestedEnumsFormRes$Outbound;
}

export function unionNestedEnumsFormResToJSON(
  unionNestedEnumsFormRes: UnionNestedEnumsFormRes,
): string {
  return JSON.stringify(
    UnionNestedEnumsFormRes$outboundSchema.parse(unionNestedEnumsFormRes),
  );
}

export function unionNestedEnumsFormResFromJSON(
  jsonString: string,
): SafeParseResult<UnionNestedEnumsFormRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnionNestedEnumsFormRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnionNestedEnumsFormRes' from JSON`,
  );
}
