/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type Enums = Array<shared.Enum> | { [k: string]: shared.Enum };

export type UnionNestedEnumsMultipartRequestBody = {
  enums: Array<shared.Enum> | { [k: string]: shared.Enum };
};

/**
 * OK
 */
export type UnionNestedEnumsMultipartRes = {
  form: { [k: string]: any };
};

/** @internal */
export const Enums$inboundSchema: z.ZodType<Enums, z.ZodTypeDef, unknown> = z
  .union([
    z.array(shared.Enum$inboundSchema),
    z.record(shared.Enum$inboundSchema),
  ]);

/** @internal */
export type Enums$Outbound = Array<string> | { [k: string]: string };

/** @internal */
export const Enums$outboundSchema: z.ZodType<
  Enums$Outbound,
  z.ZodTypeDef,
  Enums
> = z.union([
  z.array(shared.Enum$outboundSchema),
  z.record(shared.Enum$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Enums$ {
  /** @deprecated use `Enums$inboundSchema` instead. */
  export const inboundSchema = Enums$inboundSchema;
  /** @deprecated use `Enums$outboundSchema` instead. */
  export const outboundSchema = Enums$outboundSchema;
  /** @deprecated use `Enums$Outbound` instead. */
  export type Outbound = Enums$Outbound;
}

export function enumsToJSON(enums: Enums): string {
  return JSON.stringify(Enums$outboundSchema.parse(enums));
}

export function enumsFromJSON(
  jsonString: string,
): SafeParseResult<Enums, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Enums$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Enums' from JSON`,
  );
}

/** @internal */
export const UnionNestedEnumsMultipartRequestBody$inboundSchema: z.ZodType<
  UnionNestedEnumsMultipartRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  enums: z.union([
    z.array(shared.Enum$inboundSchema),
    z.record(shared.Enum$inboundSchema),
  ]),
});

/** @internal */
export type UnionNestedEnumsMultipartRequestBody$Outbound = {
  enums: Array<string> | { [k: string]: string };
};

/** @internal */
export const UnionNestedEnumsMultipartRequestBody$outboundSchema: z.ZodType<
  UnionNestedEnumsMultipartRequestBody$Outbound,
  z.ZodTypeDef,
  UnionNestedEnumsMultipartRequestBody
> = z.object({
  enums: z.union([
    z.array(shared.Enum$outboundSchema),
    z.record(shared.Enum$outboundSchema),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnionNestedEnumsMultipartRequestBody$ {
  /** @deprecated use `UnionNestedEnumsMultipartRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    UnionNestedEnumsMultipartRequestBody$inboundSchema;
  /** @deprecated use `UnionNestedEnumsMultipartRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UnionNestedEnumsMultipartRequestBody$outboundSchema;
  /** @deprecated use `UnionNestedEnumsMultipartRequestBody$Outbound` instead. */
  export type Outbound = UnionNestedEnumsMultipartRequestBody$Outbound;
}

export function unionNestedEnumsMultipartRequestBodyToJSON(
  unionNestedEnumsMultipartRequestBody: UnionNestedEnumsMultipartRequestBody,
): string {
  return JSON.stringify(
    UnionNestedEnumsMultipartRequestBody$outboundSchema.parse(
      unionNestedEnumsMultipartRequestBody,
    ),
  );
}

export function unionNestedEnumsMultipartRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UnionNestedEnumsMultipartRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UnionNestedEnumsMultipartRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnionNestedEnumsMultipartRequestBody' from JSON`,
  );
}

/** @internal */
export const UnionNestedEnumsMultipartRes$inboundSchema: z.ZodType<
  UnionNestedEnumsMultipartRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  form: z.record(z.any()),
});

/** @internal */
export type UnionNestedEnumsMultipartRes$Outbound = {
  form: { [k: string]: any };
};

/** @internal */
export const UnionNestedEnumsMultipartRes$outboundSchema: z.ZodType<
  UnionNestedEnumsMultipartRes$Outbound,
  z.ZodTypeDef,
  UnionNestedEnumsMultipartRes
> = z.object({
  form: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnionNestedEnumsMultipartRes$ {
  /** @deprecated use `UnionNestedEnumsMultipartRes$inboundSchema` instead. */
  export const inboundSchema = UnionNestedEnumsMultipartRes$inboundSchema;
  /** @deprecated use `UnionNestedEnumsMultipartRes$outboundSchema` instead. */
  export const outboundSchema = UnionNestedEnumsMultipartRes$outboundSchema;
  /** @deprecated use `UnionNestedEnumsMultipartRes$Outbound` instead. */
  export type Outbound = UnionNestedEnumsMultipartRes$Outbound;
}

export function unionNestedEnumsMultipartResToJSON(
  unionNestedEnumsMultipartRes: UnionNestedEnumsMultipartRes,
): string {
  return JSON.stringify(
    UnionNestedEnumsMultipartRes$outboundSchema.parse(
      unionNestedEnumsMultipartRes,
    ),
  );
}

export function unionNestedEnumsMultipartResFromJSON(
  jsonString: string,
): SafeParseResult<UnionNestedEnumsMultipartRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnionNestedEnumsMultipartRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnionNestedEnumsMultipartRes' from JSON`,
  );
}
