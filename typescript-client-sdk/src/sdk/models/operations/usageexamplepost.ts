/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { Decimal as Decimal$, RFCDate } from "../../../sdk/types";
import { z } from "zod";

export type UsageExamplePostSecurity = {
    password: string;
    username: string;
};

/**
 * A request body that contains fields with different formats for testing example generation
 */
export type UsageExamplePostRequestBody = {
    /**
     * A set of strings with format values that lead to relevant examples being generated for them
     */
    fakerFormattedStrings?: shared.FakerFormattedStrings | undefined;
    /**
     * A set of strings with fieldnames that lead to relevant examples being generated for them
     */
    fakerStrings?: shared.FakerStrings | undefined;
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    simpleObject?: shared.SimpleObject | undefined;
};

/**
 * An enum type
 */
export enum EnumParameter {
    Value1 = "value1",
    Value2 = "value2",
    Value3 = "value3",
}

/**
 * An enum type
 */
export enum OptEnumParameter {
    Value1 = "value1",
    Value2 = "value2",
    Value3 = "value3",
}

export type UsageExamplePostRequest = {
    /**
     * A request body that contains fields with different formats for testing example generation
     */
    requestBody?: UsageExamplePostRequestBody | undefined;
    /**
     * An bigint parameter
     */
    bigintParameter: bigint;
    /**
     * An bigint parameter
     */
    bigintParameterOptional?: bigint | undefined;
    /**
     * An bigint parameter
     */
    bigintStrParameter: bigint;
    /**
     * An bigint parameter
     */
    bigintStrParameterOptional?: bigint | undefined;
    /**
     * A boolean parameter
     */
    boolParameter: boolean;
    /**
     * A date parameter
     */
    dateParameter: RFCDate;
    /**
     * A date time parameter with a default value
     */
    dateTimeDefaultParameter: Date;
    /**
     * A date time parameter
     */
    dateTimeParameter: Date;
    /**
     * A decimal parameter
     */
    decimalParameter: Decimal$ | number;
    /**
     * A decimal parameter
     */
    decimalParameterOptional?: Decimal$ | number | undefined;
    /**
     * A decimal parameter
     */
    decimalStrParameter: Decimal$ | number;
    /**
     * A decimal parameter
     */
    decimalStrParameterOptional?: Decimal$ | number | undefined;
    /**
     * A double parameter
     */
    doubleParameter: number;
    /**
     * An enum parameter
     */
    enumParameter: EnumParameter;
    /**
     * A number parameter that contains a falsey example value
     */
    falseyNumberParameter: number;
    /**
     * A float32 parameter
     */
    float32Parameter: number;
    /**
     * A float parameter
     */
    floatParameter: number;
    /**
     * An int64 parameter
     */
    int64Parameter: number;
    /**
     * An integer parameter
     */
    intParameter: number;
    /**
     * An enum parameter
     */
    optEnumParameter?: OptEnumParameter | undefined;
    /**
     * A string parameter
     */
    strParameter: string;
};

export type UsageExamplePostJson = {
    /**
     * A set of strings with format values that lead to relevant examples being generated for them
     */
    fakerFormattedStrings?: shared.FakerFormattedStrings | undefined;
    /**
     * A set of strings with fieldnames that lead to relevant examples being generated for them
     */
    fakerStrings?: shared.FakerStrings | undefined;
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    simpleObject?: shared.SimpleObject | undefined;
};

/**
 * A response body that contains the simpleObject sent in the request body
 */
export type UsageExamplePostResponseBody = {
    json: UsageExamplePostJson;
};

export type UsageExamplePostResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * A successful response that contains the simpleObject sent in the request body
     */
    object?: UsageExamplePostResponseBody | undefined;
};

/** @internal */
export namespace UsageExamplePostRequestBody$ {
    export type Inbound = {
        fakerFormattedStrings?: shared.FakerFormattedStrings$.Inbound | undefined;
        fakerStrings?: shared.FakerStrings$.Inbound | undefined;
        simpleObject?: shared.SimpleObject$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<UsageExamplePostRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            fakerFormattedStrings: shared.FakerFormattedStrings$.inboundSchema.optional(),
            fakerStrings: shared.FakerStrings$.inboundSchema.optional(),
            simpleObject: shared.SimpleObject$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.fakerFormattedStrings === undefined
                    ? null
                    : { fakerFormattedStrings: v.fakerFormattedStrings }),
                ...(v.fakerStrings === undefined ? null : { fakerStrings: v.fakerStrings }),
                ...(v.simpleObject === undefined ? null : { simpleObject: v.simpleObject }),
            };
        });

    export type Outbound = {
        fakerFormattedStrings?: shared.FakerFormattedStrings$.Outbound | undefined;
        fakerStrings?: shared.FakerStrings$.Outbound | undefined;
        simpleObject?: shared.SimpleObject$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UsageExamplePostRequestBody> = z
        .object({
            fakerFormattedStrings: shared.FakerFormattedStrings$.outboundSchema.optional(),
            fakerStrings: shared.FakerStrings$.outboundSchema.optional(),
            simpleObject: shared.SimpleObject$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.fakerFormattedStrings === undefined
                    ? null
                    : { fakerFormattedStrings: v.fakerFormattedStrings }),
                ...(v.fakerStrings === undefined ? null : { fakerStrings: v.fakerStrings }),
                ...(v.simpleObject === undefined ? null : { simpleObject: v.simpleObject }),
            };
        });
}

/** @internal */
export const EnumParameter$ = z.nativeEnum(EnumParameter);

/** @internal */
export const OptEnumParameter$ = z.nativeEnum(OptEnumParameter);

/** @internal */
export namespace UsageExamplePostRequest$ {
    export type Inbound = {
        RequestBody?: UsageExamplePostRequestBody$.Inbound | undefined;
        bigintParameter: number;
        bigintParameterOptional?: number | undefined;
        bigintStrParameter: string;
        bigintStrParameterOptional?: string | undefined;
        boolParameter: boolean;
        dateParameter: string;
        dateTimeDefaultParameter: string;
        dateTimeParameter: string;
        decimalParameter: number;
        decimalParameterOptional?: number | undefined;
        decimalStrParameter: string;
        decimalStrParameterOptional?: string | undefined;
        doubleParameter: number;
        enumParameter: EnumParameter;
        falseyNumberParameter: number;
        float32Parameter: number;
        floatParameter: number;
        int64Parameter: number;
        intParameter: number;
        optEnumParameter?: OptEnumParameter | undefined;
        strParameter: string;
    };

    export const inboundSchema: z.ZodType<UsageExamplePostRequest, z.ZodTypeDef, Inbound> = z
        .object({
            RequestBody: z.lazy(() => UsageExamplePostRequestBody$.inboundSchema).optional(),
            bigintParameter: z.number().transform((v) => BigInt(v)),
            bigintParameterOptional: z
                .number()
                .transform((v) => BigInt(v))
                .optional(),
            bigintStrParameter: z.string().transform((v) => BigInt(v)),
            bigintStrParameterOptional: z
                .string()
                .transform((v) => BigInt(v))
                .optional(),
            boolParameter: z.boolean(),
            dateParameter: z.string().transform((v) => new RFCDate(v)),
            dateTimeDefaultParameter: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            dateTimeParameter: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            decimalParameter: z.number().transform((v) => new Decimal$(v)),
            decimalParameterOptional: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            decimalStrParameter: z.string().transform((v) => new Decimal$(v)),
            decimalStrParameterOptional: z
                .string()
                .transform((v) => new Decimal$(v))
                .optional(),
            doubleParameter: z.number(),
            enumParameter: EnumParameter$,
            falseyNumberParameter: z.number(),
            float32Parameter: z.number(),
            floatParameter: z.number(),
            int64Parameter: z.number().int(),
            intParameter: z.number().int(),
            optEnumParameter: OptEnumParameter$.optional(),
            strParameter: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
                bigintParameter: v.bigintParameter,
                ...(v.bigintParameterOptional === undefined
                    ? null
                    : { bigintParameterOptional: v.bigintParameterOptional }),
                bigintStrParameter: v.bigintStrParameter,
                ...(v.bigintStrParameterOptional === undefined
                    ? null
                    : { bigintStrParameterOptional: v.bigintStrParameterOptional }),
                boolParameter: v.boolParameter,
                dateParameter: v.dateParameter,
                dateTimeDefaultParameter: v.dateTimeDefaultParameter,
                dateTimeParameter: v.dateTimeParameter,
                decimalParameter: v.decimalParameter,
                ...(v.decimalParameterOptional === undefined
                    ? null
                    : { decimalParameterOptional: v.decimalParameterOptional }),
                decimalStrParameter: v.decimalStrParameter,
                ...(v.decimalStrParameterOptional === undefined
                    ? null
                    : { decimalStrParameterOptional: v.decimalStrParameterOptional }),
                doubleParameter: v.doubleParameter,
                enumParameter: v.enumParameter,
                falseyNumberParameter: v.falseyNumberParameter,
                float32Parameter: v.float32Parameter,
                floatParameter: v.floatParameter,
                int64Parameter: v.int64Parameter,
                intParameter: v.intParameter,
                ...(v.optEnumParameter === undefined
                    ? null
                    : { optEnumParameter: v.optEnumParameter }),
                strParameter: v.strParameter,
            };
        });

    export type Outbound = {
        RequestBody?: UsageExamplePostRequestBody$.Outbound | undefined;
        bigintParameter: number;
        bigintParameterOptional?: number | undefined;
        bigintStrParameter: string;
        bigintStrParameterOptional?: string | undefined;
        boolParameter: boolean;
        dateParameter: string;
        dateTimeDefaultParameter: string;
        dateTimeParameter: string;
        decimalParameter: number;
        decimalParameterOptional?: number | undefined;
        decimalStrParameter: string;
        decimalStrParameterOptional?: string | undefined;
        doubleParameter: number;
        enumParameter: EnumParameter;
        falseyNumberParameter: number;
        float32Parameter: number;
        floatParameter: number;
        int64Parameter: number;
        intParameter: number;
        optEnumParameter?: OptEnumParameter | undefined;
        strParameter: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UsageExamplePostRequest> = z
        .object({
            requestBody: z.lazy(() => UsageExamplePostRequestBody$.outboundSchema).optional(),
            bigintParameter: z.bigint().transform((v) => Number(v)),
            bigintParameterOptional: z
                .bigint()
                .transform((v) => Number(v))
                .optional(),
            bigintStrParameter: z.bigint().transform((v) => `${v}`),
            bigintStrParameterOptional: z
                .bigint()
                .transform((v) => `${v}`)
                .optional(),
            boolParameter: z.boolean(),
            dateParameter: z.instanceof(RFCDate).transform((v) => v.toString()),
            dateTimeDefaultParameter: z.date().transform((v) => v.toISOString()),
            dateTimeParameter: z.date().transform((v) => v.toISOString()),
            decimalParameter: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            decimalParameterOptional: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            decimalStrParameter: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => `${v}`),
            decimalStrParameterOptional: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => `${v}`)
                .optional(),
            doubleParameter: z.number(),
            enumParameter: EnumParameter$,
            falseyNumberParameter: z.number(),
            float32Parameter: z.number(),
            floatParameter: z.number(),
            int64Parameter: z.number().int(),
            intParameter: z.number().int(),
            optEnumParameter: OptEnumParameter$.optional(),
            strParameter: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
                bigintParameter: v.bigintParameter,
                ...(v.bigintParameterOptional === undefined
                    ? null
                    : { bigintParameterOptional: v.bigintParameterOptional }),
                bigintStrParameter: v.bigintStrParameter,
                ...(v.bigintStrParameterOptional === undefined
                    ? null
                    : { bigintStrParameterOptional: v.bigintStrParameterOptional }),
                boolParameter: v.boolParameter,
                dateParameter: v.dateParameter,
                dateTimeDefaultParameter: v.dateTimeDefaultParameter,
                dateTimeParameter: v.dateTimeParameter,
                decimalParameter: v.decimalParameter,
                ...(v.decimalParameterOptional === undefined
                    ? null
                    : { decimalParameterOptional: v.decimalParameterOptional }),
                decimalStrParameter: v.decimalStrParameter,
                ...(v.decimalStrParameterOptional === undefined
                    ? null
                    : { decimalStrParameterOptional: v.decimalStrParameterOptional }),
                doubleParameter: v.doubleParameter,
                enumParameter: v.enumParameter,
                falseyNumberParameter: v.falseyNumberParameter,
                float32Parameter: v.float32Parameter,
                floatParameter: v.floatParameter,
                int64Parameter: v.int64Parameter,
                intParameter: v.intParameter,
                ...(v.optEnumParameter === undefined
                    ? null
                    : { optEnumParameter: v.optEnumParameter }),
                strParameter: v.strParameter,
            };
        });
}

/** @internal */
export namespace UsageExamplePostJson$ {
    export type Inbound = {
        fakerFormattedStrings?: shared.FakerFormattedStrings$.Inbound | undefined;
        fakerStrings?: shared.FakerStrings$.Inbound | undefined;
        simpleObject?: shared.SimpleObject$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<UsageExamplePostJson, z.ZodTypeDef, Inbound> = z
        .object({
            fakerFormattedStrings: shared.FakerFormattedStrings$.inboundSchema.optional(),
            fakerStrings: shared.FakerStrings$.inboundSchema.optional(),
            simpleObject: shared.SimpleObject$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.fakerFormattedStrings === undefined
                    ? null
                    : { fakerFormattedStrings: v.fakerFormattedStrings }),
                ...(v.fakerStrings === undefined ? null : { fakerStrings: v.fakerStrings }),
                ...(v.simpleObject === undefined ? null : { simpleObject: v.simpleObject }),
            };
        });

    export type Outbound = {
        fakerFormattedStrings?: shared.FakerFormattedStrings$.Outbound | undefined;
        fakerStrings?: shared.FakerStrings$.Outbound | undefined;
        simpleObject?: shared.SimpleObject$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UsageExamplePostJson> = z
        .object({
            fakerFormattedStrings: shared.FakerFormattedStrings$.outboundSchema.optional(),
            fakerStrings: shared.FakerStrings$.outboundSchema.optional(),
            simpleObject: shared.SimpleObject$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.fakerFormattedStrings === undefined
                    ? null
                    : { fakerFormattedStrings: v.fakerFormattedStrings }),
                ...(v.fakerStrings === undefined ? null : { fakerStrings: v.fakerStrings }),
                ...(v.simpleObject === undefined ? null : { simpleObject: v.simpleObject }),
            };
        });
}

/** @internal */
export namespace UsageExamplePostResponseBody$ {
    export type Inbound = {
        json: UsageExamplePostJson$.Inbound;
    };

    export const inboundSchema: z.ZodType<UsageExamplePostResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            json: z.lazy(() => UsageExamplePostJson$.inboundSchema),
        })
        .transform((v) => {
            return {
                json: v.json,
            };
        });

    export type Outbound = {
        json: UsageExamplePostJson$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UsageExamplePostResponseBody> = z
        .object({
            json: z.lazy(() => UsageExamplePostJson$.outboundSchema),
        })
        .transform((v) => {
            return {
                json: v.json,
            };
        });
}

/** @internal */
export namespace UsageExamplePostResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: UsageExamplePostResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<UsageExamplePostResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => UsageExamplePostResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: UsageExamplePostResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UsageExamplePostResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => UsageExamplePostResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
