/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RFCDate } from "../../types";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class UsageExamplePostSecurity extends SpeakeasyBase {
    @SpeakeasyMetadata({ data: "security, scheme=true;type=http;subtype=basic;name=password" })
    password: string;

    @SpeakeasyMetadata({ data: "security, scheme=true;type=http;subtype=basic;name=username" })
    username: string;
}

/**
 * A request body that contains fields with different formats for testing example generation
 */
export class UsageExamplePostRequestBody extends SpeakeasyBase {
    /**
     * A field called email that will have emails generated as examples
     */
    @SpeakeasyMetadata()
    @Expose({ name: "email" })
    email?: string;

    /**
     * A field formatted as an email that will have emails generated as examples
     */
    @SpeakeasyMetadata()
    @Expose({ name: "formatEmail" })
    formatEmail?: string;

    /**
     * A field formatted as a uri that will have uris generated as examples
     */
    @SpeakeasyMetadata()
    @Expose({ name: "formatUri" })
    formatUri?: string;

    /**
     * A field formatted as a uuid that will have uuids generated as examples
     */
    @SpeakeasyMetadata()
    @Expose({ name: "formatUuid" })
    formatUuid?: string;

    /**
     * A field formatted as a hostname that will have hostnames generated as examples
     */
    @SpeakeasyMetadata()
    @Expose({ name: "hostname" })
    hostname?: string;

    /**
     * A field formatted as an ipv4 that will have ipv4s generated as examples
     */
    @SpeakeasyMetadata()
    @Expose({ name: "ipv4" })
    ipv4?: string;

    /**
     * A field formatted as an ipv6 that will have ipv6s generated as examples
     */
    @SpeakeasyMetadata()
    @Expose({ name: "ipv6" })
    ipv6?: string;

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "simpleObject" })
    @Type(() => shared.SimpleObject)
    simpleObject?: shared.SimpleObject;

    /**
     * A field formatted as an unknown that will have random strings generated as examples
     */
    @SpeakeasyMetadata()
    @Expose({ name: "unknown" })
    unknown?: string;

    /**
     * A field called uri that will have uris generated as examples
     */
    @SpeakeasyMetadata()
    @Expose({ name: "uri" })
    uri?: string;

    /**
     * A field called uuid that will have uuids generated as examples
     */
    @SpeakeasyMetadata()
    @Expose({ name: "uuid" })
    uuid?: string;
}

/**
 * An enum type
 */
export enum UsageExamplePostEnumParameter {
    Value1 = "value1",
    Value2 = "value2",
    Value3 = "value3",
}

/**
 * An enum type
 */
export enum UsageExamplePostOptEnumParameter {
    Value1 = "value1",
    Value2 = "value2",
    Value3 = "value3",
}

export class UsageExamplePostRequest extends SpeakeasyBase {
    /**
     * A request body that contains fields with different formats for testing example generation
     */
    @SpeakeasyMetadata({ data: "request, media_type=application/json" })
    requestBody?: UsageExamplePostRequestBody;

    /**
     * A boolean parameter
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=boolParameter" })
    boolParameter: boolean;

    /**
     * A date parameter
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=dateParameter" })
    dateParameter: RFCDate;

    /**
     * A date time parameter
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=dateTimeParameter" })
    dateTimeParameter: Date;

    /**
     * A double parameter
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=doubleParameter" })
    doubleParameter: number;

    /**
     * An enum parameter
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=enumParameter" })
    enumParameter: UsageExamplePostEnumParameter;

    /**
     * A number parameter that contains a falsey example value
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=falseyNumberParameter" })
    falseyNumberParameter: number;

    /**
     * A float parameter
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=floatParameter" })
    floatParameter: number;

    /**
     * An int64 parameter
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=int64Parameter" })
    int64Parameter: number;

    /**
     * An integer parameter
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=intParameter" })
    intParameter: number;

    /**
     * An enum parameter
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=optEnumParameter" })
    optEnumParameter?: UsageExamplePostOptEnumParameter;

    /**
     * A string parameter
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=strParameter" })
    strParameter: string;
}

export class UsageExamplePost200ApplicationJSONJSON extends SpeakeasyBase {
    /**
     * A field called email that will have emails generated as examples
     */
    @SpeakeasyMetadata()
    @Expose({ name: "email" })
    email?: string;

    /**
     * A field formatted as an email that will have emails generated as examples
     */
    @SpeakeasyMetadata()
    @Expose({ name: "formatEmail" })
    formatEmail?: string;

    /**
     * A field formatted as a uri that will have uris generated as examples
     */
    @SpeakeasyMetadata()
    @Expose({ name: "formatUri" })
    formatUri?: string;

    /**
     * A field formatted as a uuid that will have uuids generated as examples
     */
    @SpeakeasyMetadata()
    @Expose({ name: "formatUuid" })
    formatUuid?: string;

    /**
     * A field formatted as a hostname that will have hostnames generated as examples
     */
    @SpeakeasyMetadata()
    @Expose({ name: "hostname" })
    hostname?: string;

    /**
     * A field formatted as an ipv4 that will have ipv4s generated as examples
     */
    @SpeakeasyMetadata()
    @Expose({ name: "ipv4" })
    ipv4?: string;

    /**
     * A field formatted as an ipv6 that will have ipv6s generated as examples
     */
    @SpeakeasyMetadata()
    @Expose({ name: "ipv6" })
    ipv6?: string;

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "simpleObject" })
    @Type(() => shared.SimpleObject)
    simpleObject?: shared.SimpleObject;

    /**
     * A field formatted as an unknown that will have random strings generated as examples
     */
    @SpeakeasyMetadata()
    @Expose({ name: "unknown" })
    unknown?: string;

    /**
     * A field called uri that will have uris generated as examples
     */
    @SpeakeasyMetadata()
    @Expose({ name: "uri" })
    uri?: string;

    /**
     * A field called uuid that will have uuids generated as examples
     */
    @SpeakeasyMetadata()
    @Expose({ name: "uuid" })
    uuid?: string;
}

/**
 * A response body that contains the simpleObject sent in the request body
 */
export class UsageExamplePost200ApplicationJSON extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "json" })
    @Type(() => UsageExamplePost200ApplicationJSONJSON)
    json: UsageExamplePost200ApplicationJSONJSON;
}

export class UsageExamplePostResponse extends SpeakeasyBase {
    @SpeakeasyMetadata()
    contentType: string;

    @SpeakeasyMetadata()
    statusCode: number;

    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;

    /**
     * A successful response that contains the simpleObject sent in the request body
     */
    @SpeakeasyMetadata()
    usageExamplePost200ApplicationJSONObject?: UsageExamplePost200ApplicationJSON;
}
