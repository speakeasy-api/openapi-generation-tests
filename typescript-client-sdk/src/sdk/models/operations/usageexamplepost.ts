/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { ClosedEnum } from "../../types/enums.js";
import { RFCDate } from "../../types/rfcdate.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type UsageExamplePostSecurity = {
    password: string;
    username: string;
};

/**
 * A request body that contains fields with different formats for testing example generation
 */
export type UsageExamplePostRequestBody = {
    /**
     * A set of strings with format values that lead to relevant examples being generated for them
     */
    fakerFormattedStrings?: shared.FakerFormattedStrings | undefined;
    /**
     * A set of strings with fieldnames that lead to relevant examples being generated for them
     */
    fakerStrings?: shared.FakerStrings | undefined;
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    simpleObject?: shared.SimpleObject | undefined;
};

/**
 * An enum type
 */
export const EnumParameter = {
    Value1: "value1",
    Value2: "value2",
    Value3: "value3",
} as const;
/**
 * An enum type
 */
export type EnumParameter = ClosedEnum<typeof EnumParameter>;

/**
 * An enum type
 */
export const OptEnumParameter = {
    Value1: "value1",
    Value2: "value2",
    Value3: "value3",
} as const;
/**
 * An enum type
 */
export type OptEnumParameter = ClosedEnum<typeof OptEnumParameter>;

export type UsageExamplePostRequest = {
    /**
     * A request body that contains fields with different formats for testing example generation
     */
    requestBody?: UsageExamplePostRequestBody | undefined;
    /**
     * An bigint parameter
     */
    bigintParameter: bigint;
    /**
     * An bigint parameter
     */
    bigintParameterOptional?: bigint | undefined;
    /**
     * An bigint parameter
     */
    bigintStrParameter: bigint;
    /**
     * An bigint parameter
     */
    bigintStrParameterOptional?: bigint | undefined;
    /**
     * A boolean parameter
     */
    boolParameter: boolean;
    /**
     * A date parameter
     */
    dateParameter: RFCDate;
    /**
     * A date time parameter with a default value
     */
    dateTimeDefaultParameter: Date;
    /**
     * A date time parameter
     */
    dateTimeParameter: Date;
    /**
     * A decimal parameter
     */
    decimalParameter: Decimal$ | number;
    /**
     * A decimal parameter
     */
    decimalParameterOptional?: Decimal$ | number | undefined;
    /**
     * A decimal parameter
     */
    decimalStrParameter: Decimal$ | number;
    /**
     * A decimal parameter
     */
    decimalStrParameterOptional?: Decimal$ | number | undefined;
    /**
     * A double parameter
     */
    doubleParameter: number;
    /**
     * An enum parameter
     */
    enumParameter: EnumParameter;
    /**
     * A number parameter that contains a falsey example value
     */
    falseyNumberParameter: number;
    /**
     * A float32 parameter
     */
    float32Parameter: number;
    /**
     * A float64 parameter
     */
    float64StringParameter: number;
    /**
     * A float parameter
     */
    floatParameter: number;
    /**
     * An int64 parameter
     */
    int64Parameter: number;
    /**
     * An int64 parameter
     */
    int64StringParameter: number;
    /**
     * An integer parameter
     */
    intParameter: number;
    /**
     * An enum parameter
     */
    optEnumParameter?: OptEnumParameter | undefined;
    /**
     * A string parameter
     */
    strParameter: string;
};

export type UsageExamplePostJson = {
    /**
     * A set of strings with format values that lead to relevant examples being generated for them
     */
    fakerFormattedStrings?: shared.FakerFormattedStrings | undefined;
    /**
     * A set of strings with fieldnames that lead to relevant examples being generated for them
     */
    fakerStrings?: shared.FakerStrings | undefined;
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    simpleObject?: shared.SimpleObject | undefined;
};

/**
 * A response body that contains the simpleObject sent in the request body
 */
export type UsageExamplePostResponseBody = {
    json: UsageExamplePostJson | null;
};

/** @internal */
export const UsageExamplePostSecurity$inboundSchema: z.ZodType<
    UsageExamplePostSecurity,
    z.ZodTypeDef,
    unknown
> = z.object({
    password: z.string(),
    username: z.string(),
});

/** @internal */
export type UsageExamplePostSecurity$Outbound = {
    password: string;
    username: string;
};

/** @internal */
export const UsageExamplePostSecurity$outboundSchema: z.ZodType<
    UsageExamplePostSecurity$Outbound,
    z.ZodTypeDef,
    UsageExamplePostSecurity
> = z.object({
    password: z.string(),
    username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsageExamplePostSecurity$ {
    /** @deprecated use `UsageExamplePostSecurity$inboundSchema` instead. */
    export const inboundSchema = UsageExamplePostSecurity$inboundSchema;
    /** @deprecated use `UsageExamplePostSecurity$outboundSchema` instead. */
    export const outboundSchema = UsageExamplePostSecurity$outboundSchema;
    /** @deprecated use `UsageExamplePostSecurity$Outbound` instead. */
    export type Outbound = UsageExamplePostSecurity$Outbound;
}

/** @internal */
export const UsageExamplePostRequestBody$inboundSchema: z.ZodType<
    UsageExamplePostRequestBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    fakerFormattedStrings: shared.FakerFormattedStrings$inboundSchema.optional(),
    fakerStrings: shared.FakerStrings$inboundSchema.optional(),
    simpleObject: shared.SimpleObject$inboundSchema.optional(),
});

/** @internal */
export type UsageExamplePostRequestBody$Outbound = {
    fakerFormattedStrings?: shared.FakerFormattedStrings$Outbound | undefined;
    fakerStrings?: shared.FakerStrings$Outbound | undefined;
    simpleObject?: shared.SimpleObject$Outbound | undefined;
};

/** @internal */
export const UsageExamplePostRequestBody$outboundSchema: z.ZodType<
    UsageExamplePostRequestBody$Outbound,
    z.ZodTypeDef,
    UsageExamplePostRequestBody
> = z.object({
    fakerFormattedStrings: shared.FakerFormattedStrings$outboundSchema.optional(),
    fakerStrings: shared.FakerStrings$outboundSchema.optional(),
    simpleObject: shared.SimpleObject$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsageExamplePostRequestBody$ {
    /** @deprecated use `UsageExamplePostRequestBody$inboundSchema` instead. */
    export const inboundSchema = UsageExamplePostRequestBody$inboundSchema;
    /** @deprecated use `UsageExamplePostRequestBody$outboundSchema` instead. */
    export const outboundSchema = UsageExamplePostRequestBody$outboundSchema;
    /** @deprecated use `UsageExamplePostRequestBody$Outbound` instead. */
    export type Outbound = UsageExamplePostRequestBody$Outbound;
}

/** @internal */
export const EnumParameter$inboundSchema: z.ZodNativeEnum<typeof EnumParameter> =
    z.nativeEnum(EnumParameter);

/** @internal */
export const EnumParameter$outboundSchema: z.ZodNativeEnum<typeof EnumParameter> =
    EnumParameter$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnumParameter$ {
    /** @deprecated use `EnumParameter$inboundSchema` instead. */
    export const inboundSchema = EnumParameter$inboundSchema;
    /** @deprecated use `EnumParameter$outboundSchema` instead. */
    export const outboundSchema = EnumParameter$outboundSchema;
}

/** @internal */
export const OptEnumParameter$inboundSchema: z.ZodNativeEnum<typeof OptEnumParameter> =
    z.nativeEnum(OptEnumParameter);

/** @internal */
export const OptEnumParameter$outboundSchema: z.ZodNativeEnum<typeof OptEnumParameter> =
    OptEnumParameter$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OptEnumParameter$ {
    /** @deprecated use `OptEnumParameter$inboundSchema` instead. */
    export const inboundSchema = OptEnumParameter$inboundSchema;
    /** @deprecated use `OptEnumParameter$outboundSchema` instead. */
    export const outboundSchema = OptEnumParameter$outboundSchema;
}

/** @internal */
export const UsageExamplePostRequest$inboundSchema: z.ZodType<
    UsageExamplePostRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        RequestBody: z.lazy(() => UsageExamplePostRequestBody$inboundSchema).optional(),
        bigintParameter: z.number().transform((v) => BigInt(v)),
        bigintParameterOptional: z
            .number()
            .transform((v) => BigInt(v))
            .optional(),
        bigintStrParameter: z.string().transform((v) => BigInt(v)),
        bigintStrParameterOptional: z
            .string()
            .transform((v) => BigInt(v))
            .optional(),
        boolParameter: z.boolean(),
        dateParameter: z.string().transform((v) => new RFCDate(v)),
        dateTimeDefaultParameter: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        dateTimeParameter: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        decimalParameter: z.number().transform((v) => new Decimal$(v)),
        decimalParameterOptional: z
            .number()
            .transform((v) => new Decimal$(v))
            .optional(),
        decimalStrParameter: z.string().transform((v) => new Decimal$(v)),
        decimalStrParameterOptional: z
            .string()
            .transform((v) => new Decimal$(v))
            .optional(),
        doubleParameter: z.number(),
        enumParameter: EnumParameter$inboundSchema,
        falseyNumberParameter: z.number(),
        float32Parameter: z.number(),
        float64StringParameter: z.string().transform((v) => parseFloat(v)),
        floatParameter: z.number(),
        int64Parameter: z.number().int(),
        int64StringParameter: z.string().transform((v) => parseInt(v)),
        intParameter: z.number().int(),
        optEnumParameter: OptEnumParameter$inboundSchema.optional(),
        strParameter: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            RequestBody: "requestBody",
        });
    });

/** @internal */
export type UsageExamplePostRequest$Outbound = {
    RequestBody?: UsageExamplePostRequestBody$Outbound | undefined;
    bigintParameter: number;
    bigintParameterOptional?: number | undefined;
    bigintStrParameter: string;
    bigintStrParameterOptional?: string | undefined;
    boolParameter: boolean;
    dateParameter: string;
    dateTimeDefaultParameter: string;
    dateTimeParameter: string;
    decimalParameter: number;
    decimalParameterOptional?: number | undefined;
    decimalStrParameter: string;
    decimalStrParameterOptional?: string | undefined;
    doubleParameter: number;
    enumParameter: string;
    falseyNumberParameter: number;
    float32Parameter: number;
    float64StringParameter: string;
    floatParameter: number;
    int64Parameter: number;
    int64StringParameter: string;
    intParameter: number;
    optEnumParameter?: string | undefined;
    strParameter: string;
};

/** @internal */
export const UsageExamplePostRequest$outboundSchema: z.ZodType<
    UsageExamplePostRequest$Outbound,
    z.ZodTypeDef,
    UsageExamplePostRequest
> = z
    .object({
        requestBody: z.lazy(() => UsageExamplePostRequestBody$outboundSchema).optional(),
        bigintParameter: z.bigint().transform((v) => Number(v)),
        bigintParameterOptional: z
            .bigint()
            .transform((v) => Number(v))
            .optional(),
        bigintStrParameter: z.bigint().transform((v) => `${v}`),
        bigintStrParameterOptional: z
            .bigint()
            .transform((v) => `${v}`)
            .optional(),
        boolParameter: z.boolean(),
        dateParameter: z.instanceof(RFCDate).transform((v) => v.toString()),
        dateTimeDefaultParameter: z.date().transform((v) => v.toISOString()),
        dateTimeParameter: z.date().transform((v) => v.toISOString()),
        decimalParameter: z
            .union([z.instanceof(Decimal$), z.number()])
            .transform((v) => (typeof v === "number" ? v : v.toNumber())),
        decimalParameterOptional: z
            .union([z.instanceof(Decimal$), z.number()])
            .transform((v) => (typeof v === "number" ? v : v.toNumber()))
            .optional(),
        decimalStrParameter: z.union([z.instanceof(Decimal$), z.number()]).transform((v) => `${v}`),
        decimalStrParameterOptional: z
            .union([z.instanceof(Decimal$), z.number()])
            .transform((v) => `${v}`)
            .optional(),
        doubleParameter: z.number(),
        enumParameter: EnumParameter$outboundSchema,
        falseyNumberParameter: z.number(),
        float32Parameter: z.number(),
        float64StringParameter: z.number().transform((v) => `${v}`),
        floatParameter: z.number(),
        int64Parameter: z.number().int(),
        int64StringParameter: z
            .number()
            .int()
            .transform((v) => `${v}`),
        intParameter: z.number().int(),
        optEnumParameter: OptEnumParameter$outboundSchema.optional(),
        strParameter: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            requestBody: "RequestBody",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsageExamplePostRequest$ {
    /** @deprecated use `UsageExamplePostRequest$inboundSchema` instead. */
    export const inboundSchema = UsageExamplePostRequest$inboundSchema;
    /** @deprecated use `UsageExamplePostRequest$outboundSchema` instead. */
    export const outboundSchema = UsageExamplePostRequest$outboundSchema;
    /** @deprecated use `UsageExamplePostRequest$Outbound` instead. */
    export type Outbound = UsageExamplePostRequest$Outbound;
}

/** @internal */
export const UsageExamplePostJson$inboundSchema: z.ZodType<
    UsageExamplePostJson,
    z.ZodTypeDef,
    unknown
> = z.object({
    fakerFormattedStrings: shared.FakerFormattedStrings$inboundSchema.optional(),
    fakerStrings: shared.FakerStrings$inboundSchema.optional(),
    simpleObject: shared.SimpleObject$inboundSchema.optional(),
});

/** @internal */
export type UsageExamplePostJson$Outbound = {
    fakerFormattedStrings?: shared.FakerFormattedStrings$Outbound | undefined;
    fakerStrings?: shared.FakerStrings$Outbound | undefined;
    simpleObject?: shared.SimpleObject$Outbound | undefined;
};

/** @internal */
export const UsageExamplePostJson$outboundSchema: z.ZodType<
    UsageExamplePostJson$Outbound,
    z.ZodTypeDef,
    UsageExamplePostJson
> = z.object({
    fakerFormattedStrings: shared.FakerFormattedStrings$outboundSchema.optional(),
    fakerStrings: shared.FakerStrings$outboundSchema.optional(),
    simpleObject: shared.SimpleObject$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsageExamplePostJson$ {
    /** @deprecated use `UsageExamplePostJson$inboundSchema` instead. */
    export const inboundSchema = UsageExamplePostJson$inboundSchema;
    /** @deprecated use `UsageExamplePostJson$outboundSchema` instead. */
    export const outboundSchema = UsageExamplePostJson$outboundSchema;
    /** @deprecated use `UsageExamplePostJson$Outbound` instead. */
    export type Outbound = UsageExamplePostJson$Outbound;
}

/** @internal */
export const UsageExamplePostResponseBody$inboundSchema: z.ZodType<
    UsageExamplePostResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    json: z.nullable(z.lazy(() => UsageExamplePostJson$inboundSchema)),
});

/** @internal */
export type UsageExamplePostResponseBody$Outbound = {
    json: UsageExamplePostJson$Outbound | null;
};

/** @internal */
export const UsageExamplePostResponseBody$outboundSchema: z.ZodType<
    UsageExamplePostResponseBody$Outbound,
    z.ZodTypeDef,
    UsageExamplePostResponseBody
> = z.object({
    json: z.nullable(z.lazy(() => UsageExamplePostJson$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsageExamplePostResponseBody$ {
    /** @deprecated use `UsageExamplePostResponseBody$inboundSchema` instead. */
    export const inboundSchema = UsageExamplePostResponseBody$inboundSchema;
    /** @deprecated use `UsageExamplePostResponseBody$outboundSchema` instead. */
    export const outboundSchema = UsageExamplePostResponseBody$outboundSchema;
    /** @deprecated use `UsageExamplePostResponseBody$Outbound` instead. */
    export type Outbound = UsageExamplePostResponseBody$Outbound;
}
