/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as shared from "../shared";
import * as z from "zod";

/**
 * OK
 */
export type WeaklyTypedOneOfPostRes = {
    json: shared.WeaklyTypedOneOfObject;
};

export type WeaklyTypedOneOfPostResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    res?: WeaklyTypedOneOfPostRes | undefined;
};

/** @internal */
export namespace WeaklyTypedOneOfPostRes$ {
    export const inboundSchema: z.ZodType<WeaklyTypedOneOfPostRes, z.ZodTypeDef, unknown> =
        z.object({
            json: shared.WeaklyTypedOneOfObject$.inboundSchema,
        });

    export type Outbound = {
        json: shared.WeaklyTypedOneOfObject$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WeaklyTypedOneOfPostRes> =
        z.object({
            json: shared.WeaklyTypedOneOfObject$.outboundSchema,
        });
}

/** @internal */
export namespace WeaklyTypedOneOfPostResponse$ {
    export const inboundSchema: z.ZodType<WeaklyTypedOneOfPostResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.lazy(() => WeaklyTypedOneOfPostRes$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: WeaklyTypedOneOfPostRes$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WeaklyTypedOneOfPostResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.lazy(() => WeaklyTypedOneOfPostRes$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
