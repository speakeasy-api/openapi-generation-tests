/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type AllOfToAllOf = {
    id?: string | undefined;
};

/** @internal */
export const AllOfToAllOf$inboundSchema: z.ZodType<AllOfToAllOf, z.ZodTypeDef, unknown> = z.object({
    id: z.string().optional(),
});

/** @internal */
export type AllOfToAllOf$Outbound = {
    id?: string | undefined;
};

/** @internal */
export const AllOfToAllOf$outboundSchema: z.ZodType<
    AllOfToAllOf$Outbound,
    z.ZodTypeDef,
    AllOfToAllOf
> = z.object({
    id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AllOfToAllOf$ {
    /** @deprecated use `AllOfToAllOf$inboundSchema` instead. */
    export const inboundSchema = AllOfToAllOf$inboundSchema;
    /** @deprecated use `AllOfToAllOf$outboundSchema` instead. */
    export const outboundSchema = AllOfToAllOf$outboundSchema;
    /** @deprecated use `AllOfToAllOf$Outbound` instead. */
    export type Outbound = AllOfToAllOf$Outbound;
}
