/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type ArrayCircularReferenceObject = {
    circular: Array<ArrayCircularReferenceObject>;
};

/** @internal */
export namespace ArrayCircularReferenceObject$ {
    export const inboundSchema: z.ZodType<ArrayCircularReferenceObject, z.ZodTypeDef, unknown> =
        z.object({
            circular: z.array(z.lazy(() => ArrayCircularReferenceObject$.inboundSchema)),
        });

    export type Outbound = {
        circular: Array<ArrayCircularReferenceObject$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ArrayCircularReferenceObject> =
        z.object({
            circular: z.array(z.lazy(() => ArrayCircularReferenceObject$.outboundSchema)),
        });
}
