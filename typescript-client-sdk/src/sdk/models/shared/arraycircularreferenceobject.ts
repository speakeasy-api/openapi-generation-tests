/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ArrayCircularReferenceObject = {
  circular: Array<ArrayCircularReferenceObject>;
};

/** @internal */
export const ArrayCircularReferenceObject$inboundSchema: z.ZodType<
  ArrayCircularReferenceObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  circular: z.array(z.lazy(() => ArrayCircularReferenceObject$inboundSchema)),
});

/** @internal */
export type ArrayCircularReferenceObject$Outbound = {
  circular: Array<ArrayCircularReferenceObject$Outbound>;
};

/** @internal */
export const ArrayCircularReferenceObject$outboundSchema: z.ZodType<
  ArrayCircularReferenceObject$Outbound,
  z.ZodTypeDef,
  ArrayCircularReferenceObject
> = z.object({
  circular: z.array(z.lazy(() => ArrayCircularReferenceObject$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArrayCircularReferenceObject$ {
  /** @deprecated use `ArrayCircularReferenceObject$inboundSchema` instead. */
  export const inboundSchema = ArrayCircularReferenceObject$inboundSchema;
  /** @deprecated use `ArrayCircularReferenceObject$outboundSchema` instead. */
  export const outboundSchema = ArrayCircularReferenceObject$outboundSchema;
  /** @deprecated use `ArrayCircularReferenceObject$Outbound` instead. */
  export type Outbound = ArrayCircularReferenceObject$Outbound;
}

export function arrayCircularReferenceObjectToJSON(
  arrayCircularReferenceObject: ArrayCircularReferenceObject,
): string {
  return JSON.stringify(
    ArrayCircularReferenceObject$outboundSchema.parse(
      arrayCircularReferenceObject,
    ),
  );
}

export function arrayCircularReferenceObjectFromJSON(
  jsonString: string,
): SafeParseResult<ArrayCircularReferenceObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ArrayCircularReferenceObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ArrayCircularReferenceObject' from JSON`,
  );
}
