/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SimpleObjectCamelCase,
  SimpleObjectCamelCase$inboundSchema,
  SimpleObjectCamelCase$Outbound,
  SimpleObjectCamelCase$outboundSchema,
} from "./simpleobjectcamelcase.js";

export type ArrObjValueCamelCase = {
  json?: Array<SimpleObjectCamelCase> | undefined;
  required?: any | undefined;
};

/** @internal */
export const ArrObjValueCamelCase$inboundSchema: z.ZodType<
  ArrObjValueCamelCase,
  z.ZodTypeDef,
  unknown
> = z.object({
  json: z.array(SimpleObjectCamelCase$inboundSchema).optional(),
  required: z.any().optional(),
});

/** @internal */
export type ArrObjValueCamelCase$Outbound = {
  json?: Array<SimpleObjectCamelCase$Outbound> | undefined;
  required?: any | undefined;
};

/** @internal */
export const ArrObjValueCamelCase$outboundSchema: z.ZodType<
  ArrObjValueCamelCase$Outbound,
  z.ZodTypeDef,
  ArrObjValueCamelCase
> = z.object({
  json: z.array(SimpleObjectCamelCase$outboundSchema).optional(),
  required: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArrObjValueCamelCase$ {
  /** @deprecated use `ArrObjValueCamelCase$inboundSchema` instead. */
  export const inboundSchema = ArrObjValueCamelCase$inboundSchema;
  /** @deprecated use `ArrObjValueCamelCase$outboundSchema` instead. */
  export const outboundSchema = ArrObjValueCamelCase$outboundSchema;
  /** @deprecated use `ArrObjValueCamelCase$Outbound` instead. */
  export type Outbound = ArrObjValueCamelCase$Outbound;
}

export function arrObjValueCamelCaseToJSON(
  arrObjValueCamelCase: ArrObjValueCamelCase,
): string {
  return JSON.stringify(
    ArrObjValueCamelCase$outboundSchema.parse(arrObjValueCamelCase),
  );
}

export function arrObjValueCamelCaseFromJSON(
  jsonString: string,
): SafeParseResult<ArrObjValueCamelCase, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ArrObjValueCamelCase$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ArrObjValueCamelCase' from JSON`,
  );
}
