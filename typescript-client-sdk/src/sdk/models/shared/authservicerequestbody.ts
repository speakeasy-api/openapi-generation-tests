/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type BasicAuth = {
  password: string;
  username: string;
};

export type HeaderAuth = {
  expectedValue: string;
  headerName: string;
};

export type AuthServiceRequestBody = {
  basicAuth?: BasicAuth | undefined;
  headerAuth?: Array<HeaderAuth> | undefined;
};

/** @internal */
export const BasicAuth$inboundSchema: z.ZodType<
  BasicAuth,
  z.ZodTypeDef,
  unknown
> = z.object({
  password: z.string(),
  username: z.string(),
});

/** @internal */
export type BasicAuth$Outbound = {
  password: string;
  username: string;
};

/** @internal */
export const BasicAuth$outboundSchema: z.ZodType<
  BasicAuth$Outbound,
  z.ZodTypeDef,
  BasicAuth
> = z.object({
  password: z.string(),
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BasicAuth$ {
  /** @deprecated use `BasicAuth$inboundSchema` instead. */
  export const inboundSchema = BasicAuth$inboundSchema;
  /** @deprecated use `BasicAuth$outboundSchema` instead. */
  export const outboundSchema = BasicAuth$outboundSchema;
  /** @deprecated use `BasicAuth$Outbound` instead. */
  export type Outbound = BasicAuth$Outbound;
}

/** @internal */
export const HeaderAuth$inboundSchema: z.ZodType<
  HeaderAuth,
  z.ZodTypeDef,
  unknown
> = z.object({
  expectedValue: z.string(),
  headerName: z.string(),
});

/** @internal */
export type HeaderAuth$Outbound = {
  expectedValue: string;
  headerName: string;
};

/** @internal */
export const HeaderAuth$outboundSchema: z.ZodType<
  HeaderAuth$Outbound,
  z.ZodTypeDef,
  HeaderAuth
> = z.object({
  expectedValue: z.string(),
  headerName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HeaderAuth$ {
  /** @deprecated use `HeaderAuth$inboundSchema` instead. */
  export const inboundSchema = HeaderAuth$inboundSchema;
  /** @deprecated use `HeaderAuth$outboundSchema` instead. */
  export const outboundSchema = HeaderAuth$outboundSchema;
  /** @deprecated use `HeaderAuth$Outbound` instead. */
  export type Outbound = HeaderAuth$Outbound;
}

/** @internal */
export const AuthServiceRequestBody$inboundSchema: z.ZodType<
  AuthServiceRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  basicAuth: z.lazy(() => BasicAuth$inboundSchema).optional(),
  headerAuth: z.array(z.lazy(() => HeaderAuth$inboundSchema)).optional(),
});

/** @internal */
export type AuthServiceRequestBody$Outbound = {
  basicAuth?: BasicAuth$Outbound | undefined;
  headerAuth?: Array<HeaderAuth$Outbound> | undefined;
};

/** @internal */
export const AuthServiceRequestBody$outboundSchema: z.ZodType<
  AuthServiceRequestBody$Outbound,
  z.ZodTypeDef,
  AuthServiceRequestBody
> = z.object({
  basicAuth: z.lazy(() => BasicAuth$outboundSchema).optional(),
  headerAuth: z.array(z.lazy(() => HeaderAuth$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthServiceRequestBody$ {
  /** @deprecated use `AuthServiceRequestBody$inboundSchema` instead. */
  export const inboundSchema = AuthServiceRequestBody$inboundSchema;
  /** @deprecated use `AuthServiceRequestBody$outboundSchema` instead. */
  export const outboundSchema = AuthServiceRequestBody$outboundSchema;
  /** @deprecated use `AuthServiceRequestBody$Outbound` instead. */
  export type Outbound = AuthServiceRequestBody$Outbound;
}
