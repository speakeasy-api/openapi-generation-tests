/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type BasicAuth = {
    password: string;
    username: string;
};

export type HeaderAuth = {
    expectedValue: string;
    headerName: string;
};

export type AuthServiceRequestBody = {
    basicAuth?: BasicAuth | undefined;
    headerAuth?: Array<HeaderAuth> | undefined;
};

/** @internal */
export namespace BasicAuth$ {
    export type Inbound = {
        password: string;
        username: string;
    };

    export const inboundSchema: z.ZodType<BasicAuth, z.ZodTypeDef, Inbound> = z
        .object({
            password: z.string(),
            username: z.string(),
        })
        .transform((v) => {
            return {
                password: v.password,
                username: v.username,
            };
        });

    export type Outbound = {
        password: string;
        username: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BasicAuth> = z
        .object({
            password: z.string(),
            username: z.string(),
        })
        .transform((v) => {
            return {
                password: v.password,
                username: v.username,
            };
        });
}

/** @internal */
export namespace HeaderAuth$ {
    export type Inbound = {
        expectedValue: string;
        headerName: string;
    };

    export const inboundSchema: z.ZodType<HeaderAuth, z.ZodTypeDef, Inbound> = z
        .object({
            expectedValue: z.string(),
            headerName: z.string(),
        })
        .transform((v) => {
            return {
                expectedValue: v.expectedValue,
                headerName: v.headerName,
            };
        });

    export type Outbound = {
        expectedValue: string;
        headerName: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HeaderAuth> = z
        .object({
            expectedValue: z.string(),
            headerName: z.string(),
        })
        .transform((v) => {
            return {
                expectedValue: v.expectedValue,
                headerName: v.headerName,
            };
        });
}

/** @internal */
export namespace AuthServiceRequestBody$ {
    export type Inbound = {
        basicAuth?: BasicAuth$.Inbound | undefined;
        headerAuth?: Array<HeaderAuth$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<AuthServiceRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            basicAuth: z.lazy(() => BasicAuth$.inboundSchema).optional(),
            headerAuth: z.array(z.lazy(() => HeaderAuth$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.basicAuth === undefined ? null : { basicAuth: v.basicAuth }),
                ...(v.headerAuth === undefined ? null : { headerAuth: v.headerAuth }),
            };
        });

    export type Outbound = {
        basicAuth?: BasicAuth$.Outbound | undefined;
        headerAuth?: Array<HeaderAuth$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AuthServiceRequestBody> = z
        .object({
            basicAuth: z.lazy(() => BasicAuth$.outboundSchema).optional(),
            headerAuth: z.array(z.lazy(() => HeaderAuth$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.basicAuth === undefined ? null : { basicAuth: v.basicAuth }),
                ...(v.headerAuth === undefined ? null : { headerAuth: v.headerAuth }),
            };
        });
}
