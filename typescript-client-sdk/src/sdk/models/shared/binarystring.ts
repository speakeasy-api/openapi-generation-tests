/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BinaryString = {
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
  fileName: string;
};

/** @internal */
export const BinaryString$inboundSchema: z.ZodType<
  BinaryString,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
  fileName: z.string(),
});

/** @internal */
export type BinaryString$Outbound = {
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
  fileName: string;
};

/** @internal */
export const BinaryString$outboundSchema: z.ZodType<
  BinaryString$Outbound,
  z.ZodTypeDef,
  BinaryString
> = z.object({
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
  fileName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BinaryString$ {
  /** @deprecated use `BinaryString$inboundSchema` instead. */
  export const inboundSchema = BinaryString$inboundSchema;
  /** @deprecated use `BinaryString$outboundSchema` instead. */
  export const outboundSchema = BinaryString$outboundSchema;
  /** @deprecated use `BinaryString$Outbound` instead. */
  export type Outbound = BinaryString$Outbound;
}

export function binaryStringToJSON(binaryString: BinaryString): string {
  return JSON.stringify(BinaryString$outboundSchema.parse(binaryString));
}

export function binaryStringFromJSON(
  jsonString: string,
): SafeParseResult<BinaryString, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BinaryString$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BinaryString' from JSON`,
  );
}
