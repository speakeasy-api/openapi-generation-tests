/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Data = {
    content: string;
};

/**
 * Represents a chat completion event which contains printable content
 */
export type ChatCompletionEvent = {
    data: Data;
};

/** @internal */
export namespace Data$ {
    export type Inbound = {
        content: string;
    };

    export const inboundSchema: z.ZodType<Data, z.ZodTypeDef, Inbound> = z
        .object({
            content: z.string(),
        })
        .transform((v) => {
            return {
                content: v.content,
            };
        });

    export type Outbound = {
        content: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Data> = z
        .object({
            content: z.string(),
        })
        .transform((v) => {
            return {
                content: v.content,
            };
        });
}

/** @internal */
export namespace ChatCompletionEvent$ {
    export type Inbound = {
        data: Data$.Inbound;
    };

    export const inboundSchema: z.ZodType<ChatCompletionEvent, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.lazy(() => Data$.inboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: Data$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ChatCompletionEvent> = z
        .object({
            data: z.lazy(() => Data$.outboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}
