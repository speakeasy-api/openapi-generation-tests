/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChatCompletionEvent,
  ChatCompletionEvent$inboundSchema,
  ChatCompletionEvent$Outbound,
  ChatCompletionEvent$outboundSchema,
} from "./chatcompletionevent.js";
import {
  SentinelEvent,
  SentinelEvent$inboundSchema,
  SentinelEvent$Outbound,
  SentinelEvent$outboundSchema,
} from "./sentinelevent.js";

export type ChatCompletionResult = ChatCompletionEvent | SentinelEvent;

/** @internal */
export const ChatCompletionResult$inboundSchema: z.ZodType<
  ChatCompletionResult,
  z.ZodTypeDef,
  unknown
> = z.union([ChatCompletionEvent$inboundSchema, SentinelEvent$inboundSchema]);

/** @internal */
export type ChatCompletionResult$Outbound =
  | ChatCompletionEvent$Outbound
  | SentinelEvent$Outbound;

/** @internal */
export const ChatCompletionResult$outboundSchema: z.ZodType<
  ChatCompletionResult$Outbound,
  z.ZodTypeDef,
  ChatCompletionResult
> = z.union([ChatCompletionEvent$outboundSchema, SentinelEvent$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionResult$ {
  /** @deprecated use `ChatCompletionResult$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionResult$inboundSchema;
  /** @deprecated use `ChatCompletionResult$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionResult$outboundSchema;
  /** @deprecated use `ChatCompletionResult$Outbound` instead. */
  export type Outbound = ChatCompletionResult$Outbound;
}

export function chatCompletionResultToJSON(
  chatCompletionResult: ChatCompletionResult,
): string {
  return JSON.stringify(
    ChatCompletionResult$outboundSchema.parse(chatCompletionResult),
  );
}

export function chatCompletionResultFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionResult' from JSON`,
  );
}
