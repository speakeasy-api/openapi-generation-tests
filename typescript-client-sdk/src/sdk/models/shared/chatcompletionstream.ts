/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChatCompletionEvent,
  ChatCompletionEvent$inboundSchema,
  ChatCompletionEvent$Outbound,
  ChatCompletionEvent$outboundSchema,
} from "./chatcompletionevent.js";
import {
  SentinelEvent,
  SentinelEvent$inboundSchema,
  SentinelEvent$Outbound,
  SentinelEvent$outboundSchema,
} from "./sentinelevent.js";

export type ChatCompletionStream = ChatCompletionEvent | SentinelEvent;

/** @internal */
export const ChatCompletionStream$inboundSchema: z.ZodType<
  ChatCompletionStream,
  z.ZodTypeDef,
  unknown
> = z.union([ChatCompletionEvent$inboundSchema, SentinelEvent$inboundSchema]);

/** @internal */
export type ChatCompletionStream$Outbound =
  | ChatCompletionEvent$Outbound
  | SentinelEvent$Outbound;

/** @internal */
export const ChatCompletionStream$outboundSchema: z.ZodType<
  ChatCompletionStream$Outbound,
  z.ZodTypeDef,
  ChatCompletionStream
> = z.union([ChatCompletionEvent$outboundSchema, SentinelEvent$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionStream$ {
  /** @deprecated use `ChatCompletionStream$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionStream$inboundSchema;
  /** @deprecated use `ChatCompletionStream$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionStream$outboundSchema;
  /** @deprecated use `ChatCompletionStream$Outbound` instead. */
  export type Outbound = ChatCompletionStream$Outbound;
}

export function chatCompletionStreamToJSON(
  chatCompletionStream: ChatCompletionStream,
): string {
  return JSON.stringify(
    ChatCompletionStream$outboundSchema.parse(chatCompletionStream),
  );
}

export function chatCompletionStreamFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionStream, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionStream$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionStream' from JSON`,
  );
}
