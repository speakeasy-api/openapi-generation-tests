/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CollectionOneOfObject = { [k: string]: any } | Array<any>;

/** @internal */
export const CollectionOneOfObject$inboundSchema: z.ZodType<
  CollectionOneOfObject,
  z.ZodTypeDef,
  unknown
> = z.union([z.record(z.any()), z.array(z.any())]);

/** @internal */
export type CollectionOneOfObject$Outbound = { [k: string]: any } | Array<any>;

/** @internal */
export const CollectionOneOfObject$outboundSchema: z.ZodType<
  CollectionOneOfObject$Outbound,
  z.ZodTypeDef,
  CollectionOneOfObject
> = z.union([z.record(z.any()), z.array(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionOneOfObject$ {
  /** @deprecated use `CollectionOneOfObject$inboundSchema` instead. */
  export const inboundSchema = CollectionOneOfObject$inboundSchema;
  /** @deprecated use `CollectionOneOfObject$outboundSchema` instead. */
  export const outboundSchema = CollectionOneOfObject$outboundSchema;
  /** @deprecated use `CollectionOneOfObject$Outbound` instead. */
  export type Outbound = CollectionOneOfObject$Outbound;
}

export function collectionOneOfObjectToJSON(
  collectionOneOfObject: CollectionOneOfObject,
): string {
  return JSON.stringify(
    CollectionOneOfObject$outboundSchema.parse(collectionOneOfObject),
  );
}

export function collectionOneOfObjectFromJSON(
  jsonString: string,
): SafeParseResult<CollectionOneOfObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CollectionOneOfObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CollectionOneOfObject' from JSON`,
  );
}
