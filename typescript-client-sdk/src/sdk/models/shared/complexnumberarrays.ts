/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types/decimal.js";
import * as z from "zod";

export type ComplexNumberArrays = {
    bigintArray?: Array<bigint> | undefined;
    bigintStrArray?: Array<bigint> | undefined;
    decimalArray?: Array<Decimal$ | number> | undefined;
    decimalStrArray?: Array<Decimal$ | number> | undefined;
};

/** @internal */
export const ComplexNumberArrays$inboundSchema: z.ZodType<
    ComplexNumberArrays,
    z.ZodTypeDef,
    unknown
> = z.object({
    bigintArray: z.array(z.number().transform((v) => BigInt(v))).optional(),
    bigintStrArray: z.array(z.string().transform((v) => BigInt(v))).optional(),
    decimalArray: z.array(z.number().transform((v) => new Decimal$(v))).optional(),
    decimalStrArray: z.array(z.string().transform((v) => new Decimal$(v))).optional(),
});

/** @internal */
export type ComplexNumberArrays$Outbound = {
    bigintArray?: Array<number> | undefined;
    bigintStrArray?: Array<string> | undefined;
    decimalArray?: Array<number> | undefined;
    decimalStrArray?: Array<string> | undefined;
};

/** @internal */
export const ComplexNumberArrays$outboundSchema: z.ZodType<
    ComplexNumberArrays$Outbound,
    z.ZodTypeDef,
    ComplexNumberArrays
> = z.object({
    bigintArray: z.array(z.bigint().transform((v) => Number(v))).optional(),
    bigintStrArray: z.array(z.bigint().transform((v) => `${v}`)).optional(),
    decimalArray: z
        .array(
            z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
        )
        .optional(),
    decimalStrArray: z
        .array(z.union([z.instanceof(Decimal$), z.number()]).transform((v) => `${v}`))
        .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComplexNumberArrays$ {
    /** @deprecated use `ComplexNumberArrays$inboundSchema` instead. */
    export const inboundSchema = ComplexNumberArrays$inboundSchema;
    /** @deprecated use `ComplexNumberArrays$outboundSchema` instead. */
    export const outboundSchema = ComplexNumberArrays$outboundSchema;
    /** @deprecated use `ComplexNumberArrays$Outbound` instead. */
    export type Outbound = ComplexNumberArrays$Outbound;
}
