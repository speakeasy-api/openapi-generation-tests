/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../../sdk/types";
import * as z from "zod";

export type ComplexNumberArrays = {
    bigintArray?: Array<bigint> | undefined;
    bigintStrArray?: Array<bigint> | undefined;
    decimalArray?: Array<Decimal$ | number> | undefined;
    decimalStrArray?: Array<Decimal$ | number> | undefined;
};

/** @internal */
export namespace ComplexNumberArrays$ {
    export type Inbound = {
        bigintArray?: Array<number> | undefined;
        bigintStrArray?: Array<string> | undefined;
        decimalArray?: Array<number> | undefined;
        decimalStrArray?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<ComplexNumberArrays, z.ZodTypeDef, Inbound> = z
        .object({
            bigintArray: z.array(z.number().transform((v) => BigInt(v))).optional(),
            bigintStrArray: z.array(z.string().transform((v) => BigInt(v))).optional(),
            decimalArray: z.array(z.number().transform((v) => new Decimal$(v))).optional(),
            decimalStrArray: z.array(z.string().transform((v) => new Decimal$(v))).optional(),
        })
        .transform((v) => {
            return {
                ...(v.bigintArray === undefined ? null : { bigintArray: v.bigintArray }),
                ...(v.bigintStrArray === undefined ? null : { bigintStrArray: v.bigintStrArray }),
                ...(v.decimalArray === undefined ? null : { decimalArray: v.decimalArray }),
                ...(v.decimalStrArray === undefined
                    ? null
                    : { decimalStrArray: v.decimalStrArray }),
            };
        });

    export type Outbound = {
        bigintArray?: Array<number> | undefined;
        bigintStrArray?: Array<string> | undefined;
        decimalArray?: Array<number> | undefined;
        decimalStrArray?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ComplexNumberArrays> = z
        .object({
            bigintArray: z.array(z.bigint().transform((v) => Number(v))).optional(),
            bigintStrArray: z.array(z.bigint().transform((v) => `${v}`)).optional(),
            decimalArray: z
                .array(
                    z
                        .union([z.instanceof(Decimal$), z.number()])
                        .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                )
                .optional(),
            decimalStrArray: z
                .array(z.union([z.instanceof(Decimal$), z.number()]).transform((v) => `${v}`))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.bigintArray === undefined ? null : { bigintArray: v.bigintArray }),
                ...(v.bigintStrArray === undefined ? null : { bigintStrArray: v.bigintStrArray }),
                ...(v.decimalArray === undefined ? null : { decimalArray: v.decimalArray }),
                ...(v.decimalStrArray === undefined
                    ? null
                    : { decimalStrArray: v.decimalStrArray }),
            };
        });
}
