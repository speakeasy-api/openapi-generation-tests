/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../../sdk/types";
import * as z from "zod";

export type ComplexNumberMaps = {
    bigintMap?: Record<string, bigint> | undefined;
    bigintStrMap?: Record<string, bigint> | undefined;
    decimalMap?: Record<string, Decimal$ | number> | undefined;
    decimalStrMap?: Record<string, Decimal$ | number> | undefined;
};

/** @internal */
export namespace ComplexNumberMaps$ {
    export type Inbound = {
        bigintMap?: Record<string, number> | undefined;
        bigintStrMap?: Record<string, string> | undefined;
        decimalMap?: Record<string, number> | undefined;
        decimalStrMap?: Record<string, string> | undefined;
    };

    export const inboundSchema: z.ZodType<ComplexNumberMaps, z.ZodTypeDef, Inbound> = z
        .object({
            bigintMap: z.record(z.number().transform((v) => BigInt(v))).optional(),
            bigintStrMap: z.record(z.string().transform((v) => BigInt(v))).optional(),
            decimalMap: z.record(z.number().transform((v) => new Decimal$(v))).optional(),
            decimalStrMap: z.record(z.string().transform((v) => new Decimal$(v))).optional(),
        })
        .transform((v) => {
            return {
                ...(v.bigintMap === undefined ? null : { bigintMap: v.bigintMap }),
                ...(v.bigintStrMap === undefined ? null : { bigintStrMap: v.bigintStrMap }),
                ...(v.decimalMap === undefined ? null : { decimalMap: v.decimalMap }),
                ...(v.decimalStrMap === undefined ? null : { decimalStrMap: v.decimalStrMap }),
            };
        });

    export type Outbound = {
        bigintMap?: Record<string, number> | undefined;
        bigintStrMap?: Record<string, string> | undefined;
        decimalMap?: Record<string, number> | undefined;
        decimalStrMap?: Record<string, string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ComplexNumberMaps> = z
        .object({
            bigintMap: z.record(z.bigint().transform((v) => Number(v))).optional(),
            bigintStrMap: z.record(z.bigint().transform((v) => `${v}`)).optional(),
            decimalMap: z
                .record(
                    z
                        .union([z.instanceof(Decimal$), z.number()])
                        .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                )
                .optional(),
            decimalStrMap: z
                .record(z.union([z.instanceof(Decimal$), z.number()]).transform((v) => `${v}`))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.bigintMap === undefined ? null : { bigintMap: v.bigintMap }),
                ...(v.bigintStrMap === undefined ? null : { bigintStrMap: v.bigintStrMap }),
                ...(v.decimalMap === undefined ? null : { decimalMap: v.decimalMap }),
                ...(v.decimalStrMap === undefined ? null : { decimalStrMap: v.decimalStrMap }),
            };
        });
}
