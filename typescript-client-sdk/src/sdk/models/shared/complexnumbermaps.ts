/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types/decimal.js";
import * as z from "zod";

export type ComplexNumberMaps = {
    bigintMap?: { [k: string]: bigint } | undefined;
    bigintStrMap?: { [k: string]: bigint } | undefined;
    decimalMap?: { [k: string]: Decimal$ | number } | undefined;
    decimalStrMap?: { [k: string]: Decimal$ | number } | undefined;
};

/** @internal */
export const ComplexNumberMaps$inboundSchema: z.ZodType<ComplexNumberMaps, z.ZodTypeDef, unknown> =
    z.object({
        bigintMap: z.record(z.number().transform((v) => BigInt(v))).optional(),
        bigintStrMap: z.record(z.string().transform((v) => BigInt(v))).optional(),
        decimalMap: z.record(z.number().transform((v) => new Decimal$(v))).optional(),
        decimalStrMap: z.record(z.string().transform((v) => new Decimal$(v))).optional(),
    });

/** @internal */
export type ComplexNumberMaps$Outbound = {
    bigintMap?: { [k: string]: number } | undefined;
    bigintStrMap?: { [k: string]: string } | undefined;
    decimalMap?: { [k: string]: number } | undefined;
    decimalStrMap?: { [k: string]: string } | undefined;
};

/** @internal */
export const ComplexNumberMaps$outboundSchema: z.ZodType<
    ComplexNumberMaps$Outbound,
    z.ZodTypeDef,
    ComplexNumberMaps
> = z.object({
    bigintMap: z.record(z.bigint().transform((v) => Number(v))).optional(),
    bigintStrMap: z.record(z.bigint().transform((v) => `${v}`)).optional(),
    decimalMap: z
        .record(
            z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
        )
        .optional(),
    decimalStrMap: z
        .record(z.union([z.instanceof(Decimal$), z.number()]).transform((v) => `${v}`))
        .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComplexNumberMaps$ {
    /** @deprecated use `ComplexNumberMaps$inboundSchema` instead. */
    export const inboundSchema = ComplexNumberMaps$inboundSchema;
    /** @deprecated use `ComplexNumberMaps$outboundSchema` instead. */
    export const outboundSchema = ComplexNumberMaps$outboundSchema;
    /** @deprecated use `ComplexNumberMaps$Outbound` instead. */
    export type Outbound = ComplexNumberMaps$Outbound;
}
