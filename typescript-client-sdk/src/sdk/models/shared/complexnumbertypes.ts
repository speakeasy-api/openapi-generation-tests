/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types/decimal.js";
import * as z from "zod";

export type ComplexNumberTypes = {
    bigint: bigint;
    bigintStr: bigint;
    decimal: Decimal$ | number;
    decimalStr: Decimal$ | number;
};

/** @internal */
export const ComplexNumberTypes$inboundSchema: z.ZodType<
    ComplexNumberTypes,
    z.ZodTypeDef,
    unknown
> = z.object({
    bigint: z.number().transform((v) => BigInt(v)),
    bigintStr: z.string().transform((v) => BigInt(v)),
    decimal: z.number().transform((v) => new Decimal$(v)),
    decimalStr: z.string().transform((v) => new Decimal$(v)),
});

/** @internal */
export type ComplexNumberTypes$Outbound = {
    bigint: number;
    bigintStr: string;
    decimal: number;
    decimalStr: string;
};

/** @internal */
export const ComplexNumberTypes$outboundSchema: z.ZodType<
    ComplexNumberTypes$Outbound,
    z.ZodTypeDef,
    ComplexNumberTypes
> = z.object({
    bigint: z.bigint().transform((v) => Number(v)),
    bigintStr: z.bigint().transform((v) => `${v}`),
    decimal: z
        .union([z.instanceof(Decimal$), z.number()])
        .transform((v) => (typeof v === "number" ? v : v.toNumber())),
    decimalStr: z.union([z.instanceof(Decimal$), z.number()]).transform((v) => `${v}`),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComplexNumberTypes$ {
    /** @deprecated use `ComplexNumberTypes$inboundSchema` instead. */
    export const inboundSchema = ComplexNumberTypes$inboundSchema;
    /** @deprecated use `ComplexNumberTypes$outboundSchema` instead. */
    export const outboundSchema = ComplexNumberTypes$outboundSchema;
    /** @deprecated use `ComplexNumberTypes$Outbound` instead. */
    export type Outbound = ComplexNumberTypes$Outbound;
}
