/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types/decimal.js";
import * as z from "zod";

export type ComplexNumberTypes = {
    bigint: bigint;
    bigintStr: bigint;
    decimal: Decimal$ | number;
    decimalStr: Decimal$ | number;
};

/** @internal */
export namespace ComplexNumberTypes$ {
    export const inboundSchema: z.ZodType<ComplexNumberTypes, z.ZodTypeDef, unknown> = z.object({
        bigint: z.number().transform((v) => BigInt(v)),
        bigintStr: z.string().transform((v) => BigInt(v)),
        decimal: z.number().transform((v) => new Decimal$(v)),
        decimalStr: z.string().transform((v) => new Decimal$(v)),
    });

    export type Outbound = {
        bigint: number;
        bigintStr: string;
        decimal: number;
        decimalStr: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ComplexNumberTypes> = z.object({
        bigint: z.bigint().transform((v) => Number(v)),
        bigintStr: z.bigint().transform((v) => `${v}`),
        decimal: z
            .union([z.instanceof(Decimal$), z.number()])
            .transform((v) => (typeof v === "number" ? v : v.toNumber())),
        decimalStr: z.union([z.instanceof(Decimal$), z.number()]).transform((v) => `${v}`),
    });
}
