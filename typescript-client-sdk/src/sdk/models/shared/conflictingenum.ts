/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const ObjectT = {
    Obj1: "OBJ1",
    Obj2: "OBJ2",
} as const;
export type ObjectT = ClosedEnum<typeof ObjectT>;

export type ConflictingEnum = {
    object?: ObjectT | undefined;
};

/** @internal */
export namespace ObjectT$ {
    export const inboundSchema: z.ZodNativeEnum<typeof ObjectT> = z.nativeEnum(ObjectT);
    export const outboundSchema: z.ZodNativeEnum<typeof ObjectT> = inboundSchema;
}

/** @internal */
export namespace ConflictingEnum$ {
    export const inboundSchema: z.ZodType<ConflictingEnum, z.ZodTypeDef, unknown> = z.object({
        object: ObjectT$.inboundSchema.optional(),
    });

    export type Outbound = {
        object?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConflictingEnum> = z.object({
        object: ObjectT$.outboundSchema.optional(),
    });
}
