/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ObjectT = {
  Obj1: "OBJ1",
  Obj2: "OBJ2",
} as const;
export type ObjectT = ClosedEnum<typeof ObjectT>;

export type ConflictingEnum = {
  object?: ObjectT | undefined;
};

/** @internal */
export const ObjectT$inboundSchema: z.ZodNativeEnum<typeof ObjectT> = z
  .nativeEnum(ObjectT);

/** @internal */
export const ObjectT$outboundSchema: z.ZodNativeEnum<typeof ObjectT> =
  ObjectT$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ObjectT$ {
  /** @deprecated use `ObjectT$inboundSchema` instead. */
  export const inboundSchema = ObjectT$inboundSchema;
  /** @deprecated use `ObjectT$outboundSchema` instead. */
  export const outboundSchema = ObjectT$outboundSchema;
}

/** @internal */
export const ConflictingEnum$inboundSchema: z.ZodType<
  ConflictingEnum,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: ObjectT$inboundSchema.optional(),
});

/** @internal */
export type ConflictingEnum$Outbound = {
  object?: string | undefined;
};

/** @internal */
export const ConflictingEnum$outboundSchema: z.ZodType<
  ConflictingEnum$Outbound,
  z.ZodTypeDef,
  ConflictingEnum
> = z.object({
  object: ObjectT$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConflictingEnum$ {
  /** @deprecated use `ConflictingEnum$inboundSchema` instead. */
  export const inboundSchema = ConflictingEnum$inboundSchema;
  /** @deprecated use `ConflictingEnum$outboundSchema` instead. */
  export const outboundSchema = ConflictingEnum$outboundSchema;
  /** @deprecated use `ConflictingEnum$Outbound` instead. */
  export type Outbound = ConflictingEnum$Outbound;
}

export function conflictingEnumToJSON(
  conflictingEnum: ConflictingEnum,
): string {
  return JSON.stringify(ConflictingEnum$outboundSchema.parse(conflictingEnum));
}

export function conflictingEnumFromJSON(
  jsonString: string,
): SafeParseResult<ConflictingEnum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConflictingEnum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConflictingEnum' from JSON`,
  );
}
