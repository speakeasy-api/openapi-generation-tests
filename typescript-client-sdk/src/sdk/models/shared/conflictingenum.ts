/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum ObjectT {
    Obj1 = "OBJ1",
    Obj2 = "OBJ2",
}

export type ConflictingEnum = {
    object?: ObjectT | undefined;
};

/** @internal */
export const ObjectT$ = z.nativeEnum(ObjectT);

/** @internal */
export namespace ConflictingEnum$ {
    export type Inbound = {
        object?: ObjectT | undefined;
    };

    export const inboundSchema: z.ZodType<ConflictingEnum, z.ZodTypeDef, Inbound> = z
        .object({
            object: ObjectT$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        object?: ObjectT | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConflictingEnum> = z
        .object({
            object: ObjectT$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
