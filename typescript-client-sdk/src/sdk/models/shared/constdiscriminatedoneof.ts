/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConstObject1,
  ConstObject1$inboundSchema,
  ConstObject1$Outbound,
  ConstObject1$outboundSchema,
} from "./constobject1.js";
import {
  ConstObject2,
  ConstObject2$inboundSchema,
  ConstObject2$Outbound,
  ConstObject2$outboundSchema,
} from "./constobject2.js";

export type ConstDiscriminatedOneOf =
  | (ConstObject1 & { tag: "tag1" })
  | (ConstObject2 & { tag: "tag2" });

/** @internal */
export const ConstDiscriminatedOneOf$inboundSchema: z.ZodType<
  ConstDiscriminatedOneOf,
  z.ZodTypeDef,
  unknown
> = z.union([
  ConstObject1$inboundSchema.and(
    z.object({ tag: z.literal("tag1") }).transform((v) => ({ tag: v.tag })),
  ),
  ConstObject2$inboundSchema.and(
    z.object({ tag: z.literal("tag2") }).transform((v) => ({ tag: v.tag })),
  ),
]);

/** @internal */
export type ConstDiscriminatedOneOf$Outbound =
  | (ConstObject1$Outbound & { tag: "tag1" })
  | (ConstObject2$Outbound & { tag: "tag2" });

/** @internal */
export const ConstDiscriminatedOneOf$outboundSchema: z.ZodType<
  ConstDiscriminatedOneOf$Outbound,
  z.ZodTypeDef,
  ConstDiscriminatedOneOf
> = z.union([
  ConstObject1$outboundSchema.and(
    z.object({ tag: z.literal("tag1") }).transform((v) => ({ tag: v.tag })),
  ),
  ConstObject2$outboundSchema.and(
    z.object({ tag: z.literal("tag2") }).transform((v) => ({ tag: v.tag })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConstDiscriminatedOneOf$ {
  /** @deprecated use `ConstDiscriminatedOneOf$inboundSchema` instead. */
  export const inboundSchema = ConstDiscriminatedOneOf$inboundSchema;
  /** @deprecated use `ConstDiscriminatedOneOf$outboundSchema` instead. */
  export const outboundSchema = ConstDiscriminatedOneOf$outboundSchema;
  /** @deprecated use `ConstDiscriminatedOneOf$Outbound` instead. */
  export type Outbound = ConstDiscriminatedOneOf$Outbound;
}

export function constDiscriminatedOneOfToJSON(
  constDiscriminatedOneOf: ConstDiscriminatedOneOf,
): string {
  return JSON.stringify(
    ConstDiscriminatedOneOf$outboundSchema.parse(constDiscriminatedOneOf),
  );
}

export function constDiscriminatedOneOfFromJSON(
  jsonString: string,
): SafeParseResult<ConstDiscriminatedOneOf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConstDiscriminatedOneOf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConstDiscriminatedOneOf' from JSON`,
  );
}
