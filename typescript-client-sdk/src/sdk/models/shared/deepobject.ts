/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import {
    SimpleObject,
    SimpleObject$inboundSchema,
    SimpleObject$Outbound,
    SimpleObject$outboundSchema,
} from "./simpleobject.js";
import * as z from "zod";

export type Any = SimpleObject | string;

export type DeepObject = {
    any: SimpleObject | string;
    arr: Array<SimpleObject>;
    bool: boolean;
    int: number;
    map: { [k: string]: SimpleObject };
    num: number;
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    obj: SimpleObject;
    str: string;
    type?: string | undefined;
};

/** @internal */
export const Any$inboundSchema: z.ZodType<Any, z.ZodTypeDef, unknown> = z.union([
    SimpleObject$inboundSchema,
    z.string(),
]);

/** @internal */
export type Any$Outbound = SimpleObject$Outbound | string;

/** @internal */
export const Any$outboundSchema: z.ZodType<Any$Outbound, z.ZodTypeDef, Any> = z.union([
    SimpleObject$outboundSchema,
    z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Any$ {
    /** @deprecated use `Any$inboundSchema` instead. */
    export const inboundSchema = Any$inboundSchema;
    /** @deprecated use `Any$outboundSchema` instead. */
    export const outboundSchema = Any$outboundSchema;
    /** @deprecated use `Any$Outbound` instead. */
    export type Outbound = Any$Outbound;
}

/** @internal */
export const DeepObject$inboundSchema: z.ZodType<DeepObject, z.ZodTypeDef, unknown> = z.object({
    any: z.union([SimpleObject$inboundSchema, z.string()]),
    arr: z.array(SimpleObject$inboundSchema),
    bool: z.boolean(),
    int: z.number().int(),
    map: z.record(SimpleObject$inboundSchema),
    num: z.number(),
    obj: SimpleObject$inboundSchema,
    str: z.string(),
    type: z.string().optional(),
});

/** @internal */
export type DeepObject$Outbound = {
    any: SimpleObject$Outbound | string;
    arr: Array<SimpleObject$Outbound>;
    bool: boolean;
    int: number;
    map: { [k: string]: SimpleObject$Outbound };
    num: number;
    obj: SimpleObject$Outbound;
    str: string;
    type?: string | undefined;
};

/** @internal */
export const DeepObject$outboundSchema: z.ZodType<DeepObject$Outbound, z.ZodTypeDef, DeepObject> =
    z.object({
        any: z.union([SimpleObject$outboundSchema, z.string()]),
        arr: z.array(SimpleObject$outboundSchema),
        bool: z.boolean(),
        int: z.number().int(),
        map: z.record(SimpleObject$outboundSchema),
        num: z.number(),
        obj: SimpleObject$outboundSchema,
        str: z.string(),
        type: z.string().optional(),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeepObject$ {
    /** @deprecated use `DeepObject$inboundSchema` instead. */
    export const inboundSchema = DeepObject$inboundSchema;
    /** @deprecated use `DeepObject$outboundSchema` instead. */
    export const outboundSchema = DeepObject$outboundSchema;
    /** @deprecated use `DeepObject$Outbound` instead. */
    export type Outbound = DeepObject$Outbound;
}
