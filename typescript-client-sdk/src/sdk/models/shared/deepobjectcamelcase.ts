/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SimpleObjectCamelCase,
  SimpleObjectCamelCase$inboundSchema,
  SimpleObjectCamelCase$Outbound,
  SimpleObjectCamelCase$outboundSchema,
} from "./simpleobjectcamelcase.js";

export type AnyVal = SimpleObjectCamelCase | string;

export type DeepObjectCamelCase = {
  anyVal: SimpleObjectCamelCase | string;
  arrVal: Array<SimpleObjectCamelCase>;
  boolVal: boolean;
  intVal: number;
  mapVal: { [k: string]: SimpleObjectCamelCase };
  numVal: number;
  /**
   * A simple object that uses all our supported primitive types and enums and has optional properties.
   */
  objVal: SimpleObjectCamelCase;
  strVal: string;
  type?: string | undefined;
};

/** @internal */
export const AnyVal$inboundSchema: z.ZodType<AnyVal, z.ZodTypeDef, unknown> = z
  .union([SimpleObjectCamelCase$inboundSchema, z.string()]);

/** @internal */
export type AnyVal$Outbound = SimpleObjectCamelCase$Outbound | string;

/** @internal */
export const AnyVal$outboundSchema: z.ZodType<
  AnyVal$Outbound,
  z.ZodTypeDef,
  AnyVal
> = z.union([SimpleObjectCamelCase$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnyVal$ {
  /** @deprecated use `AnyVal$inboundSchema` instead. */
  export const inboundSchema = AnyVal$inboundSchema;
  /** @deprecated use `AnyVal$outboundSchema` instead. */
  export const outboundSchema = AnyVal$outboundSchema;
  /** @deprecated use `AnyVal$Outbound` instead. */
  export type Outbound = AnyVal$Outbound;
}

export function anyValToJSON(anyVal: AnyVal): string {
  return JSON.stringify(AnyVal$outboundSchema.parse(anyVal));
}

export function anyValFromJSON(
  jsonString: string,
): SafeParseResult<AnyVal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnyVal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnyVal' from JSON`,
  );
}

/** @internal */
export const DeepObjectCamelCase$inboundSchema: z.ZodType<
  DeepObjectCamelCase,
  z.ZodTypeDef,
  unknown
> = z.object({
  any_val: z.union([SimpleObjectCamelCase$inboundSchema, z.string()]),
  arr_val: z.array(SimpleObjectCamelCase$inboundSchema),
  bool_val: z.boolean(),
  int_val: z.number().int(),
  map_val: z.record(SimpleObjectCamelCase$inboundSchema),
  num_val: z.number(),
  obj_val: SimpleObjectCamelCase$inboundSchema,
  str_val: z.string(),
  type: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "any_val": "anyVal",
    "arr_val": "arrVal",
    "bool_val": "boolVal",
    "int_val": "intVal",
    "map_val": "mapVal",
    "num_val": "numVal",
    "obj_val": "objVal",
    "str_val": "strVal",
  });
});

/** @internal */
export type DeepObjectCamelCase$Outbound = {
  any_val: SimpleObjectCamelCase$Outbound | string;
  arr_val: Array<SimpleObjectCamelCase$Outbound>;
  bool_val: boolean;
  int_val: number;
  map_val: { [k: string]: SimpleObjectCamelCase$Outbound };
  num_val: number;
  obj_val: SimpleObjectCamelCase$Outbound;
  str_val: string;
  type?: string | undefined;
};

/** @internal */
export const DeepObjectCamelCase$outboundSchema: z.ZodType<
  DeepObjectCamelCase$Outbound,
  z.ZodTypeDef,
  DeepObjectCamelCase
> = z.object({
  anyVal: z.union([SimpleObjectCamelCase$outboundSchema, z.string()]),
  arrVal: z.array(SimpleObjectCamelCase$outboundSchema),
  boolVal: z.boolean(),
  intVal: z.number().int(),
  mapVal: z.record(SimpleObjectCamelCase$outboundSchema),
  numVal: z.number(),
  objVal: SimpleObjectCamelCase$outboundSchema,
  strVal: z.string(),
  type: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    anyVal: "any_val",
    arrVal: "arr_val",
    boolVal: "bool_val",
    intVal: "int_val",
    mapVal: "map_val",
    numVal: "num_val",
    objVal: "obj_val",
    strVal: "str_val",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeepObjectCamelCase$ {
  /** @deprecated use `DeepObjectCamelCase$inboundSchema` instead. */
  export const inboundSchema = DeepObjectCamelCase$inboundSchema;
  /** @deprecated use `DeepObjectCamelCase$outboundSchema` instead. */
  export const outboundSchema = DeepObjectCamelCase$outboundSchema;
  /** @deprecated use `DeepObjectCamelCase$Outbound` instead. */
  export type Outbound = DeepObjectCamelCase$Outbound;
}

export function deepObjectCamelCaseToJSON(
  deepObjectCamelCase: DeepObjectCamelCase,
): string {
  return JSON.stringify(
    DeepObjectCamelCase$outboundSchema.parse(deepObjectCamelCase),
  );
}

export function deepObjectCamelCaseFromJSON(
  jsonString: string,
): SafeParseResult<DeepObjectCamelCase, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeepObjectCamelCase$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeepObjectCamelCase' from JSON`,
  );
}
