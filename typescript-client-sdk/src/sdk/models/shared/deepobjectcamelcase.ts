/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { SimpleObjectCamelCase, SimpleObjectCamelCase$ } from "./simpleobjectcamelcase.js";
import * as z from "zod";

export type AnyVal = SimpleObjectCamelCase | string;

export type DeepObjectCamelCase = {
    anyVal: SimpleObjectCamelCase | string;
    arrVal: Array<SimpleObjectCamelCase>;
    boolVal: boolean;
    intVal: number;
    mapVal: { [k: string]: SimpleObjectCamelCase };
    numVal: number;
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    objVal: SimpleObjectCamelCase;
    strVal: string;
    type?: string | undefined;
};

/** @internal */
export namespace AnyVal$ {
    export const inboundSchema: z.ZodType<AnyVal, z.ZodTypeDef, unknown> = z.union([
        SimpleObjectCamelCase$.inboundSchema,
        z.string(),
    ]);

    export type Outbound = SimpleObjectCamelCase$.Outbound | string;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AnyVal> = z.union([
        SimpleObjectCamelCase$.outboundSchema,
        z.string(),
    ]);
}

/** @internal */
export namespace DeepObjectCamelCase$ {
    export const inboundSchema: z.ZodType<DeepObjectCamelCase, z.ZodTypeDef, unknown> = z
        .object({
            any_val: z.union([SimpleObjectCamelCase$.inboundSchema, z.string()]),
            arr_val: z.array(SimpleObjectCamelCase$.inboundSchema),
            bool_val: z.boolean(),
            int_val: z.number().int(),
            map_val: z.record(SimpleObjectCamelCase$.inboundSchema),
            num_val: z.number(),
            obj_val: SimpleObjectCamelCase$.inboundSchema,
            str_val: z.string(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                any_val: "anyVal",
                arr_val: "arrVal",
                bool_val: "boolVal",
                int_val: "intVal",
                map_val: "mapVal",
                num_val: "numVal",
                obj_val: "objVal",
                str_val: "strVal",
            });
        });

    export type Outbound = {
        any_val: SimpleObjectCamelCase$.Outbound | string;
        arr_val: Array<SimpleObjectCamelCase$.Outbound>;
        bool_val: boolean;
        int_val: number;
        map_val: { [k: string]: SimpleObjectCamelCase$.Outbound };
        num_val: number;
        obj_val: SimpleObjectCamelCase$.Outbound;
        str_val: string;
        type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeepObjectCamelCase> = z
        .object({
            anyVal: z.union([SimpleObjectCamelCase$.outboundSchema, z.string()]),
            arrVal: z.array(SimpleObjectCamelCase$.outboundSchema),
            boolVal: z.boolean(),
            intVal: z.number().int(),
            mapVal: z.record(SimpleObjectCamelCase$.outboundSchema),
            numVal: z.number(),
            objVal: SimpleObjectCamelCase$.outboundSchema,
            strVal: z.string(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                anyVal: "any_val",
                arrVal: "arr_val",
                boolVal: "bool_val",
                intVal: "int_val",
                mapVal: "map_val",
                numVal: "num_val",
                objVal: "obj_val",
                strVal: "str_val",
            });
        });
}
