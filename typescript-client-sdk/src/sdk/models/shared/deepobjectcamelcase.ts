/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SimpleObjectCamelCase, SimpleObjectCamelCase$ } from "./simpleobjectcamelcase";
import { z } from "zod";

export type AnyVal = SimpleObjectCamelCase | string;

export type DeepObjectCamelCase = {
    anyVal: SimpleObjectCamelCase | string;
    arrVal: Array<SimpleObjectCamelCase>;
    boolVal: boolean;
    intVal: number;
    mapVal: Record<string, SimpleObjectCamelCase>;
    numVal: number;
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    objVal: SimpleObjectCamelCase;
    strVal: string;
    type?: string | undefined;
};

/** @internal */
export namespace AnyVal$ {
    export type Inbound = SimpleObjectCamelCase$.Inbound | string;

    export type Outbound = SimpleObjectCamelCase$.Outbound | string;

    export const inboundSchema: z.ZodType<AnyVal, z.ZodTypeDef, Inbound> = z.union([
        SimpleObjectCamelCase$.inboundSchema,
        z.string(),
    ]);

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AnyVal> = z.union([
        SimpleObjectCamelCase$.outboundSchema,
        z.string(),
    ]);
}

/** @internal */
export namespace DeepObjectCamelCase$ {
    export type Inbound = {
        any_val: SimpleObjectCamelCase$.Inbound | string;
        arr_val: Array<SimpleObjectCamelCase$.Inbound>;
        bool_val: boolean;
        int_val: number;
        map_val: Record<string, SimpleObjectCamelCase$.Inbound>;
        num_val: number;
        obj_val: SimpleObjectCamelCase$.Inbound;
        str_val: string;
        type?: string | undefined;
    };

    export const inboundSchema: z.ZodType<DeepObjectCamelCase, z.ZodTypeDef, Inbound> = z
        .object({
            any_val: z.union([SimpleObjectCamelCase$.inboundSchema, z.string()]),
            arr_val: z.array(SimpleObjectCamelCase$.inboundSchema),
            bool_val: z.boolean(),
            int_val: z.number().int(),
            map_val: z.record(SimpleObjectCamelCase$.inboundSchema),
            num_val: z.number(),
            obj_val: SimpleObjectCamelCase$.inboundSchema,
            str_val: z.string(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return {
                anyVal: v.any_val,
                arrVal: v.arr_val,
                boolVal: v.bool_val,
                intVal: v.int_val,
                mapVal: v.map_val,
                numVal: v.num_val,
                objVal: v.obj_val,
                strVal: v.str_val,
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        any_val: SimpleObjectCamelCase$.Outbound | string;
        arr_val: Array<SimpleObjectCamelCase$.Outbound>;
        bool_val: boolean;
        int_val: number;
        map_val: Record<string, SimpleObjectCamelCase$.Outbound>;
        num_val: number;
        obj_val: SimpleObjectCamelCase$.Outbound;
        str_val: string;
        type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeepObjectCamelCase> = z
        .object({
            anyVal: z.union([SimpleObjectCamelCase$.outboundSchema, z.string()]),
            arrVal: z.array(SimpleObjectCamelCase$.outboundSchema),
            boolVal: z.boolean(),
            intVal: z.number().int(),
            mapVal: z.record(SimpleObjectCamelCase$.outboundSchema),
            numVal: z.number(),
            objVal: SimpleObjectCamelCase$.outboundSchema,
            strVal: z.string(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return {
                any_val: v.anyVal,
                arr_val: v.arrVal,
                bool_val: v.boolVal,
                int_val: v.intVal,
                map_val: v.mapVal,
                num_val: v.numVal,
                obj_val: v.objVal,
                str_val: v.strVal,
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}
