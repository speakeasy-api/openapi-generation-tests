/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SimpleObject,
  SimpleObject$inboundSchema,
  SimpleObject$Outbound,
  SimpleObject$outboundSchema,
} from "./simpleobject.js";

/**
 * deepObject style query parameter serialization is undefined for arrays or nested objects by the specification:
 *
 * @remarks
 *    https://github.com/OAI/OpenAPI-Specification/issues/1706
 * This schema covers the intended implementation cases rather than the fully complex deepObject schema.
 */
export type DeepObjectQueryParams = {
  arr: Array<string>;
  bool: boolean;
  int: number;
  map: { [k: string]: string };
  num: number;
  /**
   * A simple object that uses all our supported primitive types and enums and has optional properties.
   */
  obj: SimpleObject;
  str: string;
};

/** @internal */
export const DeepObjectQueryParams$inboundSchema: z.ZodType<
  DeepObjectQueryParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  arr: z.array(z.string()),
  bool: z.boolean(),
  int: z.number().int(),
  map: z.record(z.string()),
  num: z.number(),
  obj: SimpleObject$inboundSchema,
  str: z.string(),
});

/** @internal */
export type DeepObjectQueryParams$Outbound = {
  arr: Array<string>;
  bool: boolean;
  int: number;
  map: { [k: string]: string };
  num: number;
  obj: SimpleObject$Outbound;
  str: string;
};

/** @internal */
export const DeepObjectQueryParams$outboundSchema: z.ZodType<
  DeepObjectQueryParams$Outbound,
  z.ZodTypeDef,
  DeepObjectQueryParams
> = z.object({
  arr: z.array(z.string()),
  bool: z.boolean(),
  int: z.number().int(),
  map: z.record(z.string()),
  num: z.number(),
  obj: SimpleObject$outboundSchema,
  str: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeepObjectQueryParams$ {
  /** @deprecated use `DeepObjectQueryParams$inboundSchema` instead. */
  export const inboundSchema = DeepObjectQueryParams$inboundSchema;
  /** @deprecated use `DeepObjectQueryParams$outboundSchema` instead. */
  export const outboundSchema = DeepObjectQueryParams$outboundSchema;
  /** @deprecated use `DeepObjectQueryParams$Outbound` instead. */
  export type Outbound = DeepObjectQueryParams$Outbound;
}

export function deepObjectQueryParamsToJSON(
  deepObjectQueryParams: DeepObjectQueryParams,
): string {
  return JSON.stringify(
    DeepObjectQueryParams$outboundSchema.parse(deepObjectQueryParams),
  );
}

export function deepObjectQueryParamsFromJSON(
  jsonString: string,
): SafeParseResult<DeepObjectQueryParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeepObjectQueryParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeepObjectQueryParams' from JSON`,
  );
}
