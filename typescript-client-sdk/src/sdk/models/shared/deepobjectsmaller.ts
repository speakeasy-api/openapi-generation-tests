/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  SimpleObject,
  SimpleObject$inboundSchema,
  SimpleObject$Outbound,
  SimpleObject$outboundSchema,
} from "./simpleobject.js";

export type DeepObjectSmallerAny = SimpleObject | string;

export type DeepObjectSmaller = {
  any: SimpleObject | string;
  arr: Array<SimpleObject>;
  bool: boolean;
  int: number;
  map: { [k: string]: SimpleObject };
  num: number;
  /**
   * A simple object that uses all our supported primitive types and enums and has optional properties.
   */
  obj: SimpleObject;
  str: string;
  type?: string | undefined;
};

/** @internal */
export const DeepObjectSmallerAny$inboundSchema: z.ZodType<
  DeepObjectSmallerAny,
  z.ZodTypeDef,
  unknown
> = z.union([SimpleObject$inboundSchema, z.string()]);

/** @internal */
export type DeepObjectSmallerAny$Outbound = SimpleObject$Outbound | string;

/** @internal */
export const DeepObjectSmallerAny$outboundSchema: z.ZodType<
  DeepObjectSmallerAny$Outbound,
  z.ZodTypeDef,
  DeepObjectSmallerAny
> = z.union([SimpleObject$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeepObjectSmallerAny$ {
  /** @deprecated use `DeepObjectSmallerAny$inboundSchema` instead. */
  export const inboundSchema = DeepObjectSmallerAny$inboundSchema;
  /** @deprecated use `DeepObjectSmallerAny$outboundSchema` instead. */
  export const outboundSchema = DeepObjectSmallerAny$outboundSchema;
  /** @deprecated use `DeepObjectSmallerAny$Outbound` instead. */
  export type Outbound = DeepObjectSmallerAny$Outbound;
}

/** @internal */
export const DeepObjectSmaller$inboundSchema: z.ZodType<
  DeepObjectSmaller,
  z.ZodTypeDef,
  unknown
> = z.object({
  any: z.union([SimpleObject$inboundSchema, z.string()]),
  arr: z.array(SimpleObject$inboundSchema),
  bool: z.boolean(),
  int: z.number().int(),
  map: z.record(SimpleObject$inboundSchema),
  num: z.number(),
  obj: SimpleObject$inboundSchema,
  str: z.string(),
  type: z.string().optional(),
});

/** @internal */
export type DeepObjectSmaller$Outbound = {
  any: SimpleObject$Outbound | string;
  arr: Array<SimpleObject$Outbound>;
  bool: boolean;
  int: number;
  map: { [k: string]: SimpleObject$Outbound };
  num: number;
  obj: SimpleObject$Outbound;
  str: string;
  type?: string | undefined;
};

/** @internal */
export const DeepObjectSmaller$outboundSchema: z.ZodType<
  DeepObjectSmaller$Outbound,
  z.ZodTypeDef,
  DeepObjectSmaller
> = z.object({
  any: z.union([SimpleObject$outboundSchema, z.string()]),
  arr: z.array(SimpleObject$outboundSchema),
  bool: z.boolean(),
  int: z.number().int(),
  map: z.record(SimpleObject$outboundSchema),
  num: z.number(),
  obj: SimpleObject$outboundSchema,
  str: z.string(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeepObjectSmaller$ {
  /** @deprecated use `DeepObjectSmaller$inboundSchema` instead. */
  export const inboundSchema = DeepObjectSmaller$inboundSchema;
  /** @deprecated use `DeepObjectSmaller$outboundSchema` instead. */
  export const outboundSchema = DeepObjectSmaller$outboundSchema;
  /** @deprecated use `DeepObjectSmaller$Outbound` instead. */
  export type Outbound = DeepObjectSmaller$Outbound;
}
