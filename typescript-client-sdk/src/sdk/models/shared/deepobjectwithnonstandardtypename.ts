/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import {
    SimpleObject,
    SimpleObject$inboundSchema,
    SimpleObject$Outbound,
    SimpleObject$outboundSchema,
} from "./simpleobject.js";
import * as z from "zod";

export type DeepObjectWithNonStandardTypeNameAny = SimpleObject | string;

export type DeepObjectWithNonStandardTypeName = {
    any: SimpleObject | string;
    arr: Array<SimpleObject>;
    bool: boolean;
    int: number;
    map: { [k: string]: SimpleObject };
    num: number;
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    obj: SimpleObject;
    objType?: string | undefined;
    str: string;
    type?: string | undefined;
};

/** @internal */
export const DeepObjectWithNonStandardTypeNameAny$inboundSchema: z.ZodType<
    DeepObjectWithNonStandardTypeNameAny,
    z.ZodTypeDef,
    unknown
> = z.union([SimpleObject$inboundSchema, z.string()]);

/** @internal */
export type DeepObjectWithNonStandardTypeNameAny$Outbound = SimpleObject$Outbound | string;

/** @internal */
export const DeepObjectWithNonStandardTypeNameAny$outboundSchema: z.ZodType<
    DeepObjectWithNonStandardTypeNameAny$Outbound,
    z.ZodTypeDef,
    DeepObjectWithNonStandardTypeNameAny
> = z.union([SimpleObject$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeepObjectWithNonStandardTypeNameAny$ {
    /** @deprecated use `DeepObjectWithNonStandardTypeNameAny$inboundSchema` instead. */
    export const inboundSchema = DeepObjectWithNonStandardTypeNameAny$inboundSchema;
    /** @deprecated use `DeepObjectWithNonStandardTypeNameAny$outboundSchema` instead. */
    export const outboundSchema = DeepObjectWithNonStandardTypeNameAny$outboundSchema;
    /** @deprecated use `DeepObjectWithNonStandardTypeNameAny$Outbound` instead. */
    export type Outbound = DeepObjectWithNonStandardTypeNameAny$Outbound;
}

/** @internal */
export const DeepObjectWithNonStandardTypeName$inboundSchema: z.ZodType<
    DeepObjectWithNonStandardTypeName,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        any: z.union([SimpleObject$inboundSchema, z.string()]),
        arr: z.array(SimpleObject$inboundSchema),
        bool: z.boolean(),
        int: z.number().int(),
        map: z.record(SimpleObject$inboundSchema),
        num: z.number(),
        obj: SimpleObject$inboundSchema,
        "obj.type": z.string().optional(),
        str: z.string(),
        type: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            "obj.type": "objType",
        });
    });

/** @internal */
export type DeepObjectWithNonStandardTypeName$Outbound = {
    any: SimpleObject$Outbound | string;
    arr: Array<SimpleObject$Outbound>;
    bool: boolean;
    int: number;
    map: { [k: string]: SimpleObject$Outbound };
    num: number;
    obj: SimpleObject$Outbound;
    "obj.type"?: string | undefined;
    str: string;
    type?: string | undefined;
};

/** @internal */
export const DeepObjectWithNonStandardTypeName$outboundSchema: z.ZodType<
    DeepObjectWithNonStandardTypeName$Outbound,
    z.ZodTypeDef,
    DeepObjectWithNonStandardTypeName
> = z
    .object({
        any: z.union([SimpleObject$outboundSchema, z.string()]),
        arr: z.array(SimpleObject$outboundSchema),
        bool: z.boolean(),
        int: z.number().int(),
        map: z.record(SimpleObject$outboundSchema),
        num: z.number(),
        obj: SimpleObject$outboundSchema,
        objType: z.string().optional(),
        str: z.string(),
        type: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            objType: "obj.type",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeepObjectWithNonStandardTypeName$ {
    /** @deprecated use `DeepObjectWithNonStandardTypeName$inboundSchema` instead. */
    export const inboundSchema = DeepObjectWithNonStandardTypeName$inboundSchema;
    /** @deprecated use `DeepObjectWithNonStandardTypeName$outboundSchema` instead. */
    export const outboundSchema = DeepObjectWithNonStandardTypeName$outboundSchema;
    /** @deprecated use `DeepObjectWithNonStandardTypeName$Outbound` instead. */
    export type Outbound = DeepObjectWithNonStandardTypeName$Outbound;
}
