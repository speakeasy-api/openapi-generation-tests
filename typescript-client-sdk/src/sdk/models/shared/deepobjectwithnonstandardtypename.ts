/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { SimpleObject, SimpleObject$ } from "./simpleobject.js";
import * as z from "zod";

export type DeepObjectWithNonStandardTypeNameAny = SimpleObject | string;

export type DeepObjectWithNonStandardTypeName = {
    any: SimpleObject | string;
    arr: Array<SimpleObject>;
    bool: boolean;
    int: number;
    map: { [k: string]: SimpleObject };
    num: number;
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    obj: SimpleObject;
    objType?: string | undefined;
    str: string;
    type?: string | undefined;
};

/** @internal */
export namespace DeepObjectWithNonStandardTypeNameAny$ {
    export const inboundSchema: z.ZodType<
        DeepObjectWithNonStandardTypeNameAny,
        z.ZodTypeDef,
        unknown
    > = z.union([SimpleObject$.inboundSchema, z.string()]);

    export type Outbound = SimpleObject$.Outbound | string;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DeepObjectWithNonStandardTypeNameAny
    > = z.union([SimpleObject$.outboundSchema, z.string()]);
}

/** @internal */
export namespace DeepObjectWithNonStandardTypeName$ {
    export const inboundSchema: z.ZodType<
        DeepObjectWithNonStandardTypeName,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            any: z.union([SimpleObject$.inboundSchema, z.string()]),
            arr: z.array(SimpleObject$.inboundSchema),
            bool: z.boolean(),
            int: z.number().int(),
            map: z.record(SimpleObject$.inboundSchema),
            num: z.number(),
            obj: SimpleObject$.inboundSchema,
            "obj.type": z.string().optional(),
            str: z.string(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                "obj.type": "objType",
            });
        });

    export type Outbound = {
        any: SimpleObject$.Outbound | string;
        arr: Array<SimpleObject$.Outbound>;
        bool: boolean;
        int: number;
        map: { [k: string]: SimpleObject$.Outbound };
        num: number;
        obj: SimpleObject$.Outbound;
        "obj.type"?: string | undefined;
        str: string;
        type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DeepObjectWithNonStandardTypeName
    > = z
        .object({
            any: z.union([SimpleObject$.outboundSchema, z.string()]),
            arr: z.array(SimpleObject$.outboundSchema),
            bool: z.boolean(),
            int: z.number().int(),
            map: z.record(SimpleObject$.outboundSchema),
            num: z.number(),
            obj: SimpleObject$.outboundSchema,
            objType: z.string().optional(),
            str: z.string(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                objType: "obj.type",
            });
        });
}
