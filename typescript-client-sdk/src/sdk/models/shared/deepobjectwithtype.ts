/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { SimpleObject } from "./simpleobject";
import { Expose, Transform, Type } from "class-transformer";

export class DeepObjectWithType extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "any" })
    any: any;

    @SpeakeasyMetadata({ elemType: SimpleObject })
    @Expose({ name: "arr" })
    @Type(() => SimpleObject)
    arr: SimpleObject[];

    @SpeakeasyMetadata()
    @Expose({ name: "bool" })
    bool: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "int" })
    int: number;

    @SpeakeasyMetadata({ elemType: SimpleObject })
    @Expose({ name: "map" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, SimpleObject> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], SimpleObject);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    map: Record<string, SimpleObject>;

    @SpeakeasyMetadata()
    @Expose({ name: "num" })
    num: number;

    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "obj" })
    @Type(() => SimpleObject)
    obj: SimpleObject;

    @SpeakeasyMetadata()
    @Expose({ name: "str" })
    str: string;

    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: string;
}
