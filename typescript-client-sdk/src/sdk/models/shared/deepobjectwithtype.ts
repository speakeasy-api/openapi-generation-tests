/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SimpleObject,
  SimpleObject$inboundSchema,
  SimpleObject$Outbound,
  SimpleObject$outboundSchema,
} from "./simpleobject.js";

export type DeepObjectWithTypeAny = SimpleObject | string;

export type DeepObjectWithType = {
  any: SimpleObject | string;
  arr: Array<SimpleObject>;
  bool: boolean;
  int: number;
  map: { [k: string]: SimpleObject };
  num: number;
  /**
   * A simple object that uses all our supported primitive types and enums and has optional properties.
   */
  obj: SimpleObject;
  str: string;
  type?: string | undefined;
};

/** @internal */
export const DeepObjectWithTypeAny$inboundSchema: z.ZodType<
  DeepObjectWithTypeAny,
  z.ZodTypeDef,
  unknown
> = z.union([SimpleObject$inboundSchema, z.string()]);

/** @internal */
export type DeepObjectWithTypeAny$Outbound = SimpleObject$Outbound | string;

/** @internal */
export const DeepObjectWithTypeAny$outboundSchema: z.ZodType<
  DeepObjectWithTypeAny$Outbound,
  z.ZodTypeDef,
  DeepObjectWithTypeAny
> = z.union([SimpleObject$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeepObjectWithTypeAny$ {
  /** @deprecated use `DeepObjectWithTypeAny$inboundSchema` instead. */
  export const inboundSchema = DeepObjectWithTypeAny$inboundSchema;
  /** @deprecated use `DeepObjectWithTypeAny$outboundSchema` instead. */
  export const outboundSchema = DeepObjectWithTypeAny$outboundSchema;
  /** @deprecated use `DeepObjectWithTypeAny$Outbound` instead. */
  export type Outbound = DeepObjectWithTypeAny$Outbound;
}

export function deepObjectWithTypeAnyToJSON(
  deepObjectWithTypeAny: DeepObjectWithTypeAny,
): string {
  return JSON.stringify(
    DeepObjectWithTypeAny$outboundSchema.parse(deepObjectWithTypeAny),
  );
}

export function deepObjectWithTypeAnyFromJSON(
  jsonString: string,
): SafeParseResult<DeepObjectWithTypeAny, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeepObjectWithTypeAny$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeepObjectWithTypeAny' from JSON`,
  );
}

/** @internal */
export const DeepObjectWithType$inboundSchema: z.ZodType<
  DeepObjectWithType,
  z.ZodTypeDef,
  unknown
> = z.object({
  any: z.union([SimpleObject$inboundSchema, z.string()]),
  arr: z.array(SimpleObject$inboundSchema),
  bool: z.boolean(),
  int: z.number().int(),
  map: z.record(SimpleObject$inboundSchema),
  num: z.number(),
  obj: SimpleObject$inboundSchema,
  str: z.string(),
  type: z.string().optional(),
});

/** @internal */
export type DeepObjectWithType$Outbound = {
  any: SimpleObject$Outbound | string;
  arr: Array<SimpleObject$Outbound>;
  bool: boolean;
  int: number;
  map: { [k: string]: SimpleObject$Outbound };
  num: number;
  obj: SimpleObject$Outbound;
  str: string;
  type?: string | undefined;
};

/** @internal */
export const DeepObjectWithType$outboundSchema: z.ZodType<
  DeepObjectWithType$Outbound,
  z.ZodTypeDef,
  DeepObjectWithType
> = z.object({
  any: z.union([SimpleObject$outboundSchema, z.string()]),
  arr: z.array(SimpleObject$outboundSchema),
  bool: z.boolean(),
  int: z.number().int(),
  map: z.record(SimpleObject$outboundSchema),
  num: z.number(),
  obj: SimpleObject$outboundSchema,
  str: z.string(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeepObjectWithType$ {
  /** @deprecated use `DeepObjectWithType$inboundSchema` instead. */
  export const inboundSchema = DeepObjectWithType$inboundSchema;
  /** @deprecated use `DeepObjectWithType$outboundSchema` instead. */
  export const outboundSchema = DeepObjectWithType$outboundSchema;
  /** @deprecated use `DeepObjectWithType$Outbound` instead. */
  export type Outbound = DeepObjectWithType$Outbound;
}

export function deepObjectWithTypeToJSON(
  deepObjectWithType: DeepObjectWithType,
): string {
  return JSON.stringify(
    DeepObjectWithType$outboundSchema.parse(deepObjectWithType),
  );
}

export function deepObjectWithTypeFromJSON(
  jsonString: string,
): SafeParseResult<DeepObjectWithType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeepObjectWithType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeepObjectWithType' from JSON`,
  );
}
