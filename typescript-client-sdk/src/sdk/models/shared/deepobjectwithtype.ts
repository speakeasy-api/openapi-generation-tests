/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SimpleObject, SimpleObject$ } from "./simpleobject.js";
import * as z from "zod";

export type DeepObjectWithTypeAny = SimpleObject | string;

export type DeepObjectWithType = {
    any: SimpleObject | string;
    arr: Array<SimpleObject>;
    bool: boolean;
    int: number;
    map: { [k: string]: SimpleObject };
    num: number;
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    obj: SimpleObject;
    str: string;
    type?: string | undefined;
};

/** @internal */
export namespace DeepObjectWithTypeAny$ {
    export const inboundSchema: z.ZodType<DeepObjectWithTypeAny, z.ZodTypeDef, unknown> = z.union([
        SimpleObject$.inboundSchema,
        z.string(),
    ]);

    export type Outbound = SimpleObject$.Outbound | string;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeepObjectWithTypeAny> = z.union(
        [SimpleObject$.outboundSchema, z.string()]
    );
}

/** @internal */
export namespace DeepObjectWithType$ {
    export const inboundSchema: z.ZodType<DeepObjectWithType, z.ZodTypeDef, unknown> = z.object({
        any: z.union([SimpleObject$.inboundSchema, z.string()]),
        arr: z.array(SimpleObject$.inboundSchema),
        bool: z.boolean(),
        int: z.number().int(),
        map: z.record(SimpleObject$.inboundSchema),
        num: z.number(),
        obj: SimpleObject$.inboundSchema,
        str: z.string(),
        type: z.string().optional(),
    });

    export type Outbound = {
        any: SimpleObject$.Outbound | string;
        arr: Array<SimpleObject$.Outbound>;
        bool: boolean;
        int: number;
        map: { [k: string]: SimpleObject$.Outbound };
        num: number;
        obj: SimpleObject$.Outbound;
        str: string;
        type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeepObjectWithType> = z.object({
        any: z.union([SimpleObject$.outboundSchema, z.string()]),
        arr: z.array(SimpleObject$.outboundSchema),
        bool: z.boolean(),
        int: z.number().int(),
        map: z.record(SimpleObject$.outboundSchema),
        num: z.number(),
        obj: SimpleObject$.outboundSchema,
        str: z.string(),
        type: z.string().optional(),
    });
}
