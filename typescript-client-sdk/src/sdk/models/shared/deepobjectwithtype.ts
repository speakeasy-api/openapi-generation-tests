/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    SimpleObject,
    SimpleObject$inboundSchema,
    SimpleObject$Outbound,
    SimpleObject$outboundSchema,
} from "./simpleobject.js";
import * as z from "zod";

export type DeepObjectWithTypeAny = SimpleObject | string;

export type DeepObjectWithType = {
    any: SimpleObject | string;
    arr: Array<SimpleObject>;
    bool: boolean;
    int: number;
    map: { [k: string]: SimpleObject };
    num: number;
    /**
     * A simple object that uses all our supported primitive types and enums and has optional properties.
     */
    obj: SimpleObject;
    str: string;
    type?: string | undefined;
};

/** @internal */
export const DeepObjectWithTypeAny$inboundSchema: z.ZodType<
    DeepObjectWithTypeAny,
    z.ZodTypeDef,
    unknown
> = z.union([SimpleObject$inboundSchema, z.string()]);

/** @internal */
export type DeepObjectWithTypeAny$Outbound = SimpleObject$Outbound | string;

/** @internal */
export const DeepObjectWithTypeAny$outboundSchema: z.ZodType<
    DeepObjectWithTypeAny$Outbound,
    z.ZodTypeDef,
    DeepObjectWithTypeAny
> = z.union([SimpleObject$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeepObjectWithTypeAny$ {
    /** @deprecated use `DeepObjectWithTypeAny$inboundSchema` instead. */
    export const inboundSchema = DeepObjectWithTypeAny$inboundSchema;
    /** @deprecated use `DeepObjectWithTypeAny$outboundSchema` instead. */
    export const outboundSchema = DeepObjectWithTypeAny$outboundSchema;
    /** @deprecated use `DeepObjectWithTypeAny$Outbound` instead. */
    export type Outbound = DeepObjectWithTypeAny$Outbound;
}

/** @internal */
export const DeepObjectWithType$inboundSchema: z.ZodType<
    DeepObjectWithType,
    z.ZodTypeDef,
    unknown
> = z.object({
    any: z.union([SimpleObject$inboundSchema, z.string()]),
    arr: z.array(SimpleObject$inboundSchema),
    bool: z.boolean(),
    int: z.number().int(),
    map: z.record(SimpleObject$inboundSchema),
    num: z.number(),
    obj: SimpleObject$inboundSchema,
    str: z.string(),
    type: z.string().optional(),
});

/** @internal */
export type DeepObjectWithType$Outbound = {
    any: SimpleObject$Outbound | string;
    arr: Array<SimpleObject$Outbound>;
    bool: boolean;
    int: number;
    map: { [k: string]: SimpleObject$Outbound };
    num: number;
    obj: SimpleObject$Outbound;
    str: string;
    type?: string | undefined;
};

/** @internal */
export const DeepObjectWithType$outboundSchema: z.ZodType<
    DeepObjectWithType$Outbound,
    z.ZodTypeDef,
    DeepObjectWithType
> = z.object({
    any: z.union([SimpleObject$outboundSchema, z.string()]),
    arr: z.array(SimpleObject$outboundSchema),
    bool: z.boolean(),
    int: z.number().int(),
    map: z.record(SimpleObject$outboundSchema),
    num: z.number(),
    obj: SimpleObject$outboundSchema,
    str: z.string(),
    type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeepObjectWithType$ {
    /** @deprecated use `DeepObjectWithType$inboundSchema` instead. */
    export const inboundSchema = DeepObjectWithType$inboundSchema;
    /** @deprecated use `DeepObjectWithType$outboundSchema` instead. */
    export const outboundSchema = DeepObjectWithType$outboundSchema;
    /** @deprecated use `DeepObjectWithType$Outbound` instead. */
    export type Outbound = DeepObjectWithType$Outbound;
}
