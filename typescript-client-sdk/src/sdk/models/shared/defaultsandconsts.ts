/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types/decimal.js";
import { ClosedEnum } from "../../types/enums.js";
import { RFCDate } from "../../types/rfcdate.js";
import * as z from "zod";

export const ConstEnumInt = {
    One: 1,
    Two: 2,
    Three: 3,
} as const;
export type ConstEnumInt = ClosedEnum<typeof ConstEnumInt>;

export const ConstEnumStr = {
    One: "one",
    Two: "two",
    Three: "three",
} as const;
export type ConstEnumStr = ClosedEnum<typeof ConstEnumStr>;

export const DefaultEnumInt = {
    One: 1,
    Two: 2,
    Three: 3,
} as const;
export type DefaultEnumInt = ClosedEnum<typeof DefaultEnumInt>;

export const DefaultEnumStr = {
    One: "one",
    Two: "two",
    Three: "three",
} as const;
export type DefaultEnumStr = ClosedEnum<typeof DefaultEnumStr>;

export type DefaultsAndConsts = {
    constBigInt?: 9007199254740991n | undefined;
    constBigIntStr?: 9223372036854775807n | undefined;
    constBool?: true | undefined;
    constDate?: RFCDate | undefined;
    constDateTime?: Date | undefined;
    constDecimal?: Decimal$ | number | undefined;
    constDecimalStr?: Decimal$ | number | undefined;
    constEnumInt?: 2 | undefined;
    constEnumStr?: "two" | undefined;
    constInt?: 123 | undefined;
    constNum?: 123.456 | undefined;
    constStr?: "const" | undefined;
    constStrDQuotes?: 'const with "double quotes"' | undefined;
    constStrNull?: null | undefined;
    constStrSQuotes?: "const with 'single quotes'" | undefined;
    defaultBigInt?: bigint | undefined;
    defaultBigIntStr?: bigint | undefined;
    defaultBool?: boolean | undefined;
    defaultDate?: RFCDate | undefined;
    defaultDateTime?: Date | undefined;
    defaultDecimal?: Decimal$ | number | undefined;
    defaultDecimalStr?: Decimal$ | number | undefined;
    defaultEnumInt?: DefaultEnumInt | undefined;
    defaultEnumStr?: DefaultEnumStr | undefined;
    defaultInt?: number | undefined;
    defaultNum?: number | undefined;
    defaultStr?: string | undefined;
    defaultStrDQuotes?: string | undefined;
    defaultStrNullable?: string | null | undefined;
    defaultStrOptional?: string | undefined;
    defaultStrSQuotes?: string | undefined;
    normalField: string;
};

/** @internal */
export const ConstEnumInt$inboundSchema: z.ZodNativeEnum<typeof ConstEnumInt> =
    z.nativeEnum(ConstEnumInt);

/** @internal */
export const ConstEnumInt$outboundSchema: z.ZodNativeEnum<typeof ConstEnumInt> =
    ConstEnumInt$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConstEnumInt$ {
    /** @deprecated use `ConstEnumInt$inboundSchema` instead. */
    export const inboundSchema = ConstEnumInt$inboundSchema;
    /** @deprecated use `ConstEnumInt$outboundSchema` instead. */
    export const outboundSchema = ConstEnumInt$outboundSchema;
}

/** @internal */
export const ConstEnumStr$inboundSchema: z.ZodNativeEnum<typeof ConstEnumStr> =
    z.nativeEnum(ConstEnumStr);

/** @internal */
export const ConstEnumStr$outboundSchema: z.ZodNativeEnum<typeof ConstEnumStr> =
    ConstEnumStr$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConstEnumStr$ {
    /** @deprecated use `ConstEnumStr$inboundSchema` instead. */
    export const inboundSchema = ConstEnumStr$inboundSchema;
    /** @deprecated use `ConstEnumStr$outboundSchema` instead. */
    export const outboundSchema = ConstEnumStr$outboundSchema;
}

/** @internal */
export const DefaultEnumInt$inboundSchema: z.ZodNativeEnum<typeof DefaultEnumInt> =
    z.nativeEnum(DefaultEnumInt);

/** @internal */
export const DefaultEnumInt$outboundSchema: z.ZodNativeEnum<typeof DefaultEnumInt> =
    DefaultEnumInt$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DefaultEnumInt$ {
    /** @deprecated use `DefaultEnumInt$inboundSchema` instead. */
    export const inboundSchema = DefaultEnumInt$inboundSchema;
    /** @deprecated use `DefaultEnumInt$outboundSchema` instead. */
    export const outboundSchema = DefaultEnumInt$outboundSchema;
}

/** @internal */
export const DefaultEnumStr$inboundSchema: z.ZodNativeEnum<typeof DefaultEnumStr> =
    z.nativeEnum(DefaultEnumStr);

/** @internal */
export const DefaultEnumStr$outboundSchema: z.ZodNativeEnum<typeof DefaultEnumStr> =
    DefaultEnumStr$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DefaultEnumStr$ {
    /** @deprecated use `DefaultEnumStr$inboundSchema` instead. */
    export const inboundSchema = DefaultEnumStr$inboundSchema;
    /** @deprecated use `DefaultEnumStr$outboundSchema` instead. */
    export const outboundSchema = DefaultEnumStr$outboundSchema;
}

/** @internal */
export const DefaultsAndConsts$inboundSchema: z.ZodType<DefaultsAndConsts, z.ZodTypeDef, unknown> =
    z.object({
        constBigInt: z
            .number()
            .transform((v) => BigInt(v))
            .pipe(z.literal(BigInt("9007199254740991") as 9007199254740991n))
            .optional(),
        constBigIntStr: z
            .string()
            .transform((v) => BigInt(v))
            .pipe(z.literal(BigInt("9223372036854775807") as 9223372036854775807n))
            .optional(),
        constBool: z.literal(true).optional(),
        constDate: z
            .literal("2020-01-01")
            .transform((v) => new RFCDate(v))
            .optional(),
        constDateTime: z
            .literal("2020-01-01T00:00:00Z")
            .pipe(z.string().datetime({ offset: true }))
            .transform((v) => new Date(v))
            .optional(),
        constDecimal: z
            .literal(3.141592653589793)
            .transform((v) => new Decimal$(v))
            .optional(),
        constDecimalStr: z
            .literal("3.141592653589793238462643383279")
            .transform((v) => new Decimal$(v))
            .optional(),
        constEnumInt: z.literal(2).optional(),
        constEnumStr: z.literal("two").optional(),
        constInt: z.literal(123).optional(),
        constNum: z.literal(123.456).optional(),
        constStr: z.literal("const").optional(),
        constStrDQuotes: z.literal('const with "double quotes"').optional(),
        constStrNull: z.literal(null),
        constStrSQuotes: z.literal("const with 'single quotes'").optional(),
        defaultBigInt: z
            .number()
            .default(9007199254740991)
            .transform((v) => BigInt(v)),
        defaultBigIntStr: z
            .string()
            .default("9223372036854775807")
            .transform((v) => BigInt(v)),
        defaultBool: z.boolean().default(true),
        defaultDate: z
            .string()
            .default("2020-01-01")
            .transform((v) => new RFCDate(v)),
        defaultDateTime: z
            .string()
            .datetime({ offset: true })
            .default("2020-01-01T00:00:00Z")
            .transform((v) => new Date(v)),
        defaultDecimal: z.number().transform((v) => new Decimal$(v ?? "3.141592653589793")),
        defaultDecimalStr: z
            .string()
            .transform((v) => new Decimal$(v ?? "3.141592653589793238462643383279")),
        defaultEnumInt: DefaultEnumInt$inboundSchema.default(2),
        defaultEnumStr: DefaultEnumStr$inboundSchema.default("two"),
        defaultInt: z.number().int().default(123),
        defaultNum: z.number().default(123.456),
        defaultStr: z.string().default("default"),
        defaultStrDQuotes: z.string().default('default with "double quotes"'),
        defaultStrNullable: z.nullable(z.string()).default(null),
        defaultStrOptional: z.string().default("default"),
        defaultStrSQuotes: z.string().default("default with 'single quotes'"),
        normalField: z.string(),
    });

/** @internal */
export type DefaultsAndConsts$Outbound = {
    constBigInt: number;
    constBigIntStr: string;
    constBool: true;
    constDate: string;
    constDateTime: string;
    constDecimal: number;
    constDecimalStr: string;
    constEnumInt: 2;
    constEnumStr: "two";
    constInt: 123;
    constNum: 123.456;
    constStr: "const";
    constStrDQuotes: 'const with "double quotes"';
    constStrNull: null;
    constStrSQuotes: "const with 'single quotes'";
    defaultBigInt: number;
    defaultBigIntStr: string;
    defaultBool: boolean;
    defaultDate: string;
    defaultDateTime: string;
    defaultDecimal: number;
    defaultDecimalStr: string;
    defaultEnumInt: number;
    defaultEnumStr: string;
    defaultInt: number;
    defaultNum: number;
    defaultStr: string;
    defaultStrDQuotes: string;
    defaultStrNullable: string | null;
    defaultStrOptional: string;
    defaultStrSQuotes: string;
    normalField: string;
};

/** @internal */
export const DefaultsAndConsts$outboundSchema: z.ZodType<
    DefaultsAndConsts$Outbound,
    z.ZodTypeDef,
    DefaultsAndConsts
> = z.object({
    constBigInt: z
        .literal(BigInt("9007199254740991") as 9007199254740991n)
        .default(BigInt("9007199254740991") as 9007199254740991n)
        .transform((v) => Number(v)),
    constBigIntStr: z
        .literal(BigInt("9223372036854775807") as 9223372036854775807n)
        .default(BigInt("9223372036854775807") as 9223372036854775807n)
        .transform((v) => `${v}`),
    constBool: z.literal(true).default(true as const),
    constDate: z
        .instanceof(RFCDate)
        .default(new RFCDate("2020-01-01"))
        .refine((v) => v.toString() === "2020-01-01", { message: "Value must be 2020-01-01" })
        .transform((v) => v.toString()),
    constDateTime: z
        .date()
        .default(new Date("2020-01-01T00:00:00Z"))
        .refine((v) => v.getTime() === new Date("2020-01-01T00:00:00Z").getTime(), {
            message: "Value must be 2020-01-01T00:00:00Z",
        })
        .transform((v) => v.toISOString()),
    constDecimal: z
        .union([z.instanceof(Decimal$), z.number()])
        .default(new Decimal$("3.141592653589793"))
        .refine((v) => v.toString() === "3.141592653589793", {
            message: "Value must be 3.141592653589793",
        })
        .transform((v) => (typeof v === "number" ? v : v.toNumber())),
    constDecimalStr: z
        .union([z.instanceof(Decimal$), z.number()])
        .default(new Decimal$("3.141592653589793238462643383279"))
        .refine((v) => v.toString() === "3.141592653589793238462643383279", {
            message: "Value must be 3.141592653589793238462643383279",
        })
        .transform((v) => `${v}`),
    constEnumInt: z.literal(2).default(2),
    constEnumStr: z.literal("two").default("two"),
    constInt: z.literal(123).default(123 as const),
    constNum: z.literal(123.456).default(123.456 as const),
    constStr: z.literal("const").default("const" as const),
    constStrDQuotes: z
        .literal('const with "double quotes"')
        .default('const with "double quotes"' as const),
    constStrNull: z.literal(null).default(null),
    constStrSQuotes: z
        .literal("const with 'single quotes'")
        .default("const with 'single quotes'" as const),
    defaultBigInt: z
        .bigint()
        .default(BigInt("9007199254740991"))
        .transform((v) => Number(v)),
    defaultBigIntStr: z
        .bigint()
        .default(BigInt("9223372036854775807"))
        .transform((v) => `${v}`),
    defaultBool: z.boolean().default(true),
    defaultDate: z
        .instanceof(RFCDate)
        .default(() => new RFCDate("2020-01-01"))
        .transform((v) => v.toString()),
    defaultDateTime: z
        .date()
        .default(() => new Date("2020-01-01T00:00:00Z"))
        .transform((v) => v.toISOString()),
    defaultDecimal: z
        .union([z.instanceof(Decimal$), z.number()])
        .default(() => new Decimal$("3.141592653589793"))
        .transform((v) => (typeof v === "number" ? v : v.toNumber())),
    defaultDecimalStr: z
        .union([z.instanceof(Decimal$), z.number()])
        .default(() => new Decimal$("3.141592653589793238462643383279"))
        .transform((v) => `${v}`),
    defaultEnumInt: DefaultEnumInt$outboundSchema.default(2),
    defaultEnumStr: DefaultEnumStr$outboundSchema.default("two"),
    defaultInt: z.number().int().default(123),
    defaultNum: z.number().default(123.456),
    defaultStr: z.string().default("default"),
    defaultStrDQuotes: z.string().default('default with "double quotes"'),
    defaultStrNullable: z.nullable(z.string()).default(null),
    defaultStrOptional: z.string().default("default"),
    defaultStrSQuotes: z.string().default("default with 'single quotes'"),
    normalField: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DefaultsAndConsts$ {
    /** @deprecated use `DefaultsAndConsts$inboundSchema` instead. */
    export const inboundSchema = DefaultsAndConsts$inboundSchema;
    /** @deprecated use `DefaultsAndConsts$outboundSchema` instead. */
    export const outboundSchema = DefaultsAndConsts$outboundSchema;
    /** @deprecated use `DefaultsAndConsts$Outbound` instead. */
    export type Outbound = DefaultsAndConsts$Outbound;
}
