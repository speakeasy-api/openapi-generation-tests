/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$, RFCDate } from "../../../sdk/types";
import { z } from "zod";

export enum ConstEnumInt {
    One = 1,
    Two = 2,
    Three = 3,
}

export enum ConstEnumStr {
    One = "one",
    Two = "two",
    Three = "three",
}

export enum DefaultEnumInt {
    One = 1,
    Two = 2,
    Three = 3,
}

export enum DefaultEnumStr {
    One = "one",
    Two = "two",
    Three = "three",
}

export type DefaultsAndConsts = {
    constBigInt: 9007199254740991n;
    constBigIntStr: 9223372036854775807n;
    constBool: true;
    constDate: RFCDate;
    constDateTime: Date;
    constDecimal: Decimal$ | number;
    constDecimalStr: Decimal$ | number;
    constEnumInt: ConstEnumInt.Two;
    constEnumStr: ConstEnumStr.Two;
    constInt: 123;
    constNum: 123.456;
    constStr: "const";
    constStrDQuotes: 'const with "double quotes"';
    constStrNull: null;
    constStrSQuotes: "const with 'single quotes'";
    defaultBigInt?: bigint | undefined;
    defaultBigIntStr?: bigint | undefined;
    defaultBool?: boolean | undefined;
    defaultDate?: RFCDate | undefined;
    defaultDateTime?: Date | undefined;
    defaultDecimal?: Decimal$ | number | undefined;
    defaultDecimalStr?: Decimal$ | number | undefined;
    defaultEnumInt?: DefaultEnumInt | undefined;
    defaultEnumStr?: DefaultEnumStr | undefined;
    defaultInt?: number | undefined;
    defaultNum?: number | undefined;
    defaultStr?: string | undefined;
    defaultStrDQuotes?: string | undefined;
    defaultStrNullable?: string | null | undefined;
    defaultStrOptional?: string | undefined;
    defaultStrSQuotes?: string | undefined;
    normalField: string;
};

/** @internal */
export const ConstEnumInt$ = z.nativeEnum(ConstEnumInt);

/** @internal */
export const ConstEnumStr$ = z.nativeEnum(ConstEnumStr);

/** @internal */
export const DefaultEnumInt$ = z.nativeEnum(DefaultEnumInt);

/** @internal */
export const DefaultEnumStr$ = z.nativeEnum(DefaultEnumStr);

/** @internal */
export namespace DefaultsAndConsts$ {
    export type Inbound = {
        constBigInt: number;
        constBigIntStr: string;
        constBool: true;
        constDate: string;
        constDateTime: string;
        constDecimal: number;
        constDecimalStr: string;
        constEnumInt: ConstEnumInt.Two;
        constEnumStr: ConstEnumStr.Two;
        constInt: 123;
        constNum: 123.456;
        constStr: "const";
        constStrDQuotes: 'const with "double quotes"';
        constStrNull: null;
        constStrSQuotes: "const with 'single quotes'";
        defaultBigInt?: number | undefined;
        defaultBigIntStr?: string | undefined;
        defaultBool?: boolean | undefined;
        defaultDate?: string | undefined;
        defaultDateTime?: string | undefined;
        defaultDecimal?: number | undefined;
        defaultDecimalStr?: string | undefined;
        defaultEnumInt?: DefaultEnumInt | undefined;
        defaultEnumStr?: DefaultEnumStr | undefined;
        defaultInt?: number | undefined;
        defaultNum?: number | undefined;
        defaultStr?: string | undefined;
        defaultStrDQuotes?: string | undefined;
        defaultStrNullable?: string | null | undefined;
        defaultStrOptional?: string | undefined;
        defaultStrSQuotes?: string | undefined;
        normalField: string;
    };

    export const inboundSchema: z.ZodType<DefaultsAndConsts, z.ZodTypeDef, Inbound> = z
        .object({
            constBigInt: z
                .number()
                .transform((v) => BigInt(v))
                .pipe(z.literal(BigInt("9007199254740991") as 9007199254740991n)),
            constBigIntStr: z
                .string()
                .transform((v) => BigInt(v))
                .pipe(z.literal(BigInt("9223372036854775807") as 9223372036854775807n)),
            constBool: z.literal(true),
            constDate: z.literal("2020-01-01").transform((v) => new RFCDate(v)),
            constDateTime: z
                .literal("2020-01-01T00:00:00Z")
                .pipe(z.string().datetime({ offset: true }))
                .transform((v) => new Date(v)),
            constDecimal: z.literal(3.141592653589793).transform((v) => new Decimal$(v)),
            constDecimalStr: z
                .literal("3.141592653589793238462643383279")
                .transform((v) => new Decimal$(v)),
            constEnumInt: z.literal(ConstEnumInt.Two),
            constEnumStr: z.literal(ConstEnumStr.Two),
            constInt: z.literal(123),
            constNum: z.literal(123.456),
            constStr: z.literal("const"),
            constStrDQuotes: z.literal('const with "double quotes"'),
            constStrNull: z.literal(null),
            constStrSQuotes: z.literal("const with 'single quotes'"),
            defaultBigInt: z
                .number()
                .default(9007199254740991)
                .transform((v) => BigInt(v)),
            defaultBigIntStr: z
                .string()
                .default("9223372036854775807")
                .transform((v) => BigInt(v)),
            defaultBool: z.boolean().default(true),
            defaultDate: z
                .string()
                .default("2020-01-01")
                .transform((v) => new RFCDate(v)),
            defaultDateTime: z
                .string()
                .datetime({ offset: true })
                .default("2020-01-01T00:00:00Z")
                .transform((v) => new Date(v)),
            defaultDecimal: z.number().transform((v) => new Decimal$(v ?? "3.141592653589793")),
            defaultDecimalStr: z
                .string()
                .transform((v) => new Decimal$(v ?? "3.141592653589793238462643383279")),
            defaultEnumInt: DefaultEnumInt$.default(DefaultEnumInt.Two),
            defaultEnumStr: DefaultEnumStr$.default(DefaultEnumStr.Two),
            defaultInt: z.number().int().default(123),
            defaultNum: z.number().default(123.456),
            defaultStr: z.string().default("default"),
            defaultStrDQuotes: z.string().default('default with "double quotes"'),
            defaultStrNullable: z.nullable(z.string()).default(null),
            defaultStrOptional: z.string().default("default"),
            defaultStrSQuotes: z.string().default("default with 'single quotes'"),
            normalField: z.string(),
        })
        .transform((v) => {
            return {
                constBigInt: v.constBigInt,
                constBigIntStr: v.constBigIntStr,
                constBool: v.constBool,
                constDate: v.constDate,
                constDateTime: v.constDateTime,
                constDecimal: v.constDecimal,
                constDecimalStr: v.constDecimalStr,
                constEnumInt: v.constEnumInt,
                constEnumStr: v.constEnumStr,
                constInt: v.constInt,
                constNum: v.constNum,
                constStr: v.constStr,
                constStrDQuotes: v.constStrDQuotes,
                constStrNull: v.constStrNull,
                constStrSQuotes: v.constStrSQuotes,
                defaultBigInt: v.defaultBigInt,
                defaultBigIntStr: v.defaultBigIntStr,
                defaultBool: v.defaultBool,
                defaultDate: v.defaultDate,
                defaultDateTime: v.defaultDateTime,
                defaultDecimal: v.defaultDecimal,
                defaultDecimalStr: v.defaultDecimalStr,
                defaultEnumInt: v.defaultEnumInt,
                defaultEnumStr: v.defaultEnumStr,
                defaultInt: v.defaultInt,
                defaultNum: v.defaultNum,
                defaultStr: v.defaultStr,
                defaultStrDQuotes: v.defaultStrDQuotes,
                defaultStrNullable: v.defaultStrNullable,
                defaultStrOptional: v.defaultStrOptional,
                defaultStrSQuotes: v.defaultStrSQuotes,
                normalField: v.normalField,
            };
        });

    export type Outbound = {
        constBigInt: number;
        constBigIntStr: string;
        constBool: true;
        constDate: string;
        constDateTime: string;
        constDecimal: number;
        constDecimalStr: string;
        constEnumInt: ConstEnumInt.Two;
        constEnumStr: ConstEnumStr.Two;
        constInt: 123;
        constNum: 123.456;
        constStr: "const";
        constStrDQuotes: 'const with "double quotes"';
        constStrNull: null;
        constStrSQuotes: "const with 'single quotes'";
        defaultBigInt: number;
        defaultBigIntStr: string;
        defaultBool: boolean;
        defaultDate: string;
        defaultDateTime: string;
        defaultDecimal: number;
        defaultDecimalStr: string;
        defaultEnumInt: DefaultEnumInt;
        defaultEnumStr: DefaultEnumStr;
        defaultInt: number;
        defaultNum: number;
        defaultStr: string;
        defaultStrDQuotes: string;
        defaultStrNullable: string | null;
        defaultStrOptional: string;
        defaultStrSQuotes: string;
        normalField: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DefaultsAndConsts> = z
        .object({
            constBigInt: z
                .literal(BigInt("9007199254740991") as 9007199254740991n)
                .transform((v) => Number(v)),
            constBigIntStr: z
                .literal(BigInt("9223372036854775807") as 9223372036854775807n)
                .transform((v) => `${v}`),
            constBool: z.literal(true),
            constDate: z
                .instanceof(RFCDate)
                .refine((v) => v.toString() === "2020-01-01", {
                    message: "Value must be 2020-01-01",
                })
                .transform((v) => v.toString()),
            constDateTime: z
                .date()
                .refine((v) => v.getTime() === new Date("2020-01-01T00:00:00Z").getTime(), {
                    message: "Value must be 2020-01-01T00:00:00Z",
                })
                .transform((v) => v.toISOString()),
            constDecimal: z
                .union([z.instanceof(Decimal$), z.number()])
                .refine((v) => v.toString() === "3.141592653589793", {
                    message: "Value must be 3.141592653589793",
                })
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            constDecimalStr: z
                .union([z.instanceof(Decimal$), z.number()])
                .refine((v) => v.toString() === "3.141592653589793238462643383279", {
                    message: "Value must be 3.141592653589793238462643383279",
                })
                .transform((v) => `${v}`),
            constEnumInt: z.literal(ConstEnumInt.Two),
            constEnumStr: z.literal(ConstEnumStr.Two),
            constInt: z.literal(123),
            constNum: z.literal(123.456),
            constStr: z.literal("const"),
            constStrDQuotes: z.literal('const with "double quotes"'),
            constStrNull: z.literal(null),
            constStrSQuotes: z.literal("const with 'single quotes'"),
            defaultBigInt: z
                .bigint()
                .default(BigInt("9007199254740991"))
                .transform((v) => Number(v)),
            defaultBigIntStr: z
                .bigint()
                .default(BigInt("9223372036854775807"))
                .transform((v) => `${v}`),
            defaultBool: z.boolean().default(true),
            defaultDate: z
                .instanceof(RFCDate)
                .default(() => new RFCDate("2020-01-01"))
                .transform((v) => v.toString()),
            defaultDateTime: z
                .date()
                .default(() => new Date("2020-01-01T00:00:00Z"))
                .transform((v) => v.toISOString()),
            defaultDecimal: z
                .union([z.instanceof(Decimal$), z.number()])
                .default(() => new Decimal$("3.141592653589793"))
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            defaultDecimalStr: z
                .union([z.instanceof(Decimal$), z.number()])
                .default(() => new Decimal$("3.141592653589793238462643383279"))
                .transform((v) => `${v}`),
            defaultEnumInt: DefaultEnumInt$.default(DefaultEnumInt.Two),
            defaultEnumStr: DefaultEnumStr$.default(DefaultEnumStr.Two),
            defaultInt: z.number().int().default(123),
            defaultNum: z.number().default(123.456),
            defaultStr: z.string().default("default"),
            defaultStrDQuotes: z.string().default('default with "double quotes"'),
            defaultStrNullable: z.nullable(z.string()).default(null),
            defaultStrOptional: z.string().default("default"),
            defaultStrSQuotes: z.string().default("default with 'single quotes'"),
            normalField: z.string(),
        })
        .transform((v) => {
            return {
                constBigInt: v.constBigInt,
                constBigIntStr: v.constBigIntStr,
                constBool: v.constBool,
                constDate: v.constDate,
                constDateTime: v.constDateTime,
                constDecimal: v.constDecimal,
                constDecimalStr: v.constDecimalStr,
                constEnumInt: v.constEnumInt,
                constEnumStr: v.constEnumStr,
                constInt: v.constInt,
                constNum: v.constNum,
                constStr: v.constStr,
                constStrDQuotes: v.constStrDQuotes,
                constStrNull: v.constStrNull,
                constStrSQuotes: v.constStrSQuotes,
                defaultBigInt: v.defaultBigInt,
                defaultBigIntStr: v.defaultBigIntStr,
                defaultBool: v.defaultBool,
                defaultDate: v.defaultDate,
                defaultDateTime: v.defaultDateTime,
                defaultDecimal: v.defaultDecimal,
                defaultDecimalStr: v.defaultDecimalStr,
                defaultEnumInt: v.defaultEnumInt,
                defaultEnumStr: v.defaultEnumStr,
                defaultInt: v.defaultInt,
                defaultNum: v.defaultNum,
                defaultStr: v.defaultStr,
                defaultStrDQuotes: v.defaultStrDQuotes,
                defaultStrNullable: v.defaultStrNullable,
                defaultStrOptional: v.defaultStrOptional,
                defaultStrSQuotes: v.defaultStrSQuotes,
                normalField: v.normalField,
            };
        });
}
