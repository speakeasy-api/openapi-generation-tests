/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types/decimal.js";
import { RFCDate } from "../../types/rfcdate.js";
import * as z from "zod";

export enum ConstEnumInt {
    One = 1,
    Two = 2,
    Three = 3,
}

export enum ConstEnumStr {
    One = "one",
    Two = "two",
    Three = "three",
}

export enum DefaultEnumInt {
    One = 1,
    Two = 2,
    Three = 3,
}

export enum DefaultEnumStr {
    One = "one",
    Two = "two",
    Three = "three",
}

export type DefaultsAndConsts = {
    constBigInt?: 9007199254740991n | undefined;
    constBigIntStr?: 9223372036854775807n | undefined;
    constBool?: true | undefined;
    constDate?: RFCDate | undefined;
    constDateTime?: Date | undefined;
    constDecimal?: Decimal$ | number | undefined;
    constDecimalStr?: Decimal$ | number | undefined;
    constEnumInt?: ConstEnumInt.Two | undefined;
    constEnumStr?: ConstEnumStr.Two | undefined;
    constInt?: 123 | undefined;
    constNum?: 123.456 | undefined;
    constStr?: "const" | undefined;
    constStrDQuotes?: 'const with "double quotes"' | undefined;
    constStrNull?: null | undefined;
    constStrSQuotes?: "const with 'single quotes'" | undefined;
    defaultBigInt?: bigint | undefined;
    defaultBigIntStr?: bigint | undefined;
    defaultBool?: boolean | undefined;
    defaultDate?: RFCDate | undefined;
    defaultDateTime?: Date | undefined;
    defaultDecimal?: Decimal$ | number | undefined;
    defaultDecimalStr?: Decimal$ | number | undefined;
    defaultEnumInt?: DefaultEnumInt | undefined;
    defaultEnumStr?: DefaultEnumStr | undefined;
    defaultInt?: number | undefined;
    defaultNum?: number | undefined;
    defaultStr?: string | undefined;
    defaultStrDQuotes?: string | undefined;
    defaultStrNullable?: string | null | undefined;
    defaultStrOptional?: string | undefined;
    defaultStrSQuotes?: string | undefined;
    normalField: string;
};

/** @internal */
export namespace ConstEnumInt$ {
    export const inboundSchema: z.ZodNativeEnum<typeof ConstEnumInt> = z.nativeEnum(ConstEnumInt);
    export const outboundSchema: z.ZodNativeEnum<typeof ConstEnumInt> = inboundSchema;
}

/** @internal */
export namespace ConstEnumStr$ {
    export const inboundSchema: z.ZodNativeEnum<typeof ConstEnumStr> = z.nativeEnum(ConstEnumStr);
    export const outboundSchema: z.ZodNativeEnum<typeof ConstEnumStr> = inboundSchema;
}

/** @internal */
export namespace DefaultEnumInt$ {
    export const inboundSchema: z.ZodNativeEnum<typeof DefaultEnumInt> =
        z.nativeEnum(DefaultEnumInt);
    export const outboundSchema: z.ZodNativeEnum<typeof DefaultEnumInt> = inboundSchema;
}

/** @internal */
export namespace DefaultEnumStr$ {
    export const inboundSchema: z.ZodNativeEnum<typeof DefaultEnumStr> =
        z.nativeEnum(DefaultEnumStr);
    export const outboundSchema: z.ZodNativeEnum<typeof DefaultEnumStr> = inboundSchema;
}

/** @internal */
export namespace DefaultsAndConsts$ {
    export const inboundSchema: z.ZodType<DefaultsAndConsts, z.ZodTypeDef, unknown> = z.object({
        constBigInt: z
            .number()
            .transform((v) => BigInt(v))
            .pipe(z.literal(BigInt("9007199254740991") as 9007199254740991n))
            .optional(),
        constBigIntStr: z
            .string()
            .transform((v) => BigInt(v))
            .pipe(z.literal(BigInt("9223372036854775807") as 9223372036854775807n))
            .optional(),
        constBool: z.literal(true).optional(),
        constDate: z
            .literal("2020-01-01")
            .transform((v) => new RFCDate(v))
            .optional(),
        constDateTime: z
            .literal("2020-01-01T00:00:00Z")
            .pipe(z.string().datetime({ offset: true }))
            .transform((v) => new Date(v))
            .optional(),
        constDecimal: z
            .literal(3.141592653589793)
            .transform((v) => new Decimal$(v))
            .optional(),
        constDecimalStr: z
            .literal("3.141592653589793238462643383279")
            .transform((v) => new Decimal$(v))
            .optional(),
        constEnumInt: z.literal(ConstEnumInt.Two).optional(),
        constEnumStr: z.literal(ConstEnumStr.Two).optional(),
        constInt: z.literal(123).optional(),
        constNum: z.literal(123.456).optional(),
        constStr: z.literal("const").optional(),
        constStrDQuotes: z.literal('const with "double quotes"').optional(),
        constStrNull: z.literal(null),
        constStrSQuotes: z.literal("const with 'single quotes'").optional(),
        defaultBigInt: z
            .number()
            .default(9007199254740991)
            .transform((v) => BigInt(v)),
        defaultBigIntStr: z
            .string()
            .default("9223372036854775807")
            .transform((v) => BigInt(v)),
        defaultBool: z.boolean().default(true),
        defaultDate: z
            .string()
            .default("2020-01-01")
            .transform((v) => new RFCDate(v)),
        defaultDateTime: z
            .string()
            .datetime({ offset: true })
            .default("2020-01-01T00:00:00Z")
            .transform((v) => new Date(v)),
        defaultDecimal: z.number().transform((v) => new Decimal$(v ?? "3.141592653589793")),
        defaultDecimalStr: z
            .string()
            .transform((v) => new Decimal$(v ?? "3.141592653589793238462643383279")),
        defaultEnumInt: DefaultEnumInt$.inboundSchema.default(DefaultEnumInt.Two),
        defaultEnumStr: DefaultEnumStr$.inboundSchema.default(DefaultEnumStr.Two),
        defaultInt: z.number().int().default(123),
        defaultNum: z.number().default(123.456),
        defaultStr: z.string().default("default"),
        defaultStrDQuotes: z.string().default('default with "double quotes"'),
        defaultStrNullable: z.nullable(z.string()).default(null),
        defaultStrOptional: z.string().default("default"),
        defaultStrSQuotes: z.string().default("default with 'single quotes'"),
        normalField: z.string(),
    });

    export type Outbound = {
        constBigInt: number;
        constBigIntStr: string;
        constBool: true;
        constDate: string;
        constDateTime: string;
        constDecimal: number;
        constDecimalStr: string;
        constEnumInt: ConstEnumInt.Two;
        constEnumStr: ConstEnumStr.Two;
        constInt: 123;
        constNum: 123.456;
        constStr: "const";
        constStrDQuotes: 'const with "double quotes"';
        constStrNull: null;
        constStrSQuotes: "const with 'single quotes'";
        defaultBigInt: number;
        defaultBigIntStr: string;
        defaultBool: boolean;
        defaultDate: string;
        defaultDateTime: string;
        defaultDecimal: number;
        defaultDecimalStr: string;
        defaultEnumInt: number;
        defaultEnumStr: string;
        defaultInt: number;
        defaultNum: number;
        defaultStr: string;
        defaultStrDQuotes: string;
        defaultStrNullable: string | null;
        defaultStrOptional: string;
        defaultStrSQuotes: string;
        normalField: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DefaultsAndConsts> = z.object({
        constBigInt: z
            .literal(BigInt("9007199254740991") as 9007199254740991n)
            .default(BigInt("9007199254740991") as 9007199254740991n)
            .transform((v) => Number(v)),
        constBigIntStr: z
            .literal(BigInt("9223372036854775807") as 9223372036854775807n)
            .default(BigInt("9223372036854775807") as 9223372036854775807n)
            .transform((v) => `${v}`),
        constBool: z.literal(true).default(true as const),
        constDate: z
            .instanceof(RFCDate)
            .default(new RFCDate("2020-01-01"))
            .refine((v) => v.toString() === "2020-01-01", { message: "Value must be 2020-01-01" })
            .transform((v) => v.toString()),
        constDateTime: z
            .date()
            .default(new Date("2020-01-01T00:00:00Z"))
            .refine((v) => v.getTime() === new Date("2020-01-01T00:00:00Z").getTime(), {
                message: "Value must be 2020-01-01T00:00:00Z",
            })
            .transform((v) => v.toISOString()),
        constDecimal: z
            .union([z.instanceof(Decimal$), z.number()])
            .default(new Decimal$("3.141592653589793"))
            .refine((v) => v.toString() === "3.141592653589793", {
                message: "Value must be 3.141592653589793",
            })
            .transform((v) => (typeof v === "number" ? v : v.toNumber())),
        constDecimalStr: z
            .union([z.instanceof(Decimal$), z.number()])
            .default(new Decimal$("3.141592653589793238462643383279"))
            .refine((v) => v.toString() === "3.141592653589793238462643383279", {
                message: "Value must be 3.141592653589793238462643383279",
            })
            .transform((v) => `${v}`),
        constEnumInt: z.literal(ConstEnumInt.Two).default(ConstEnumInt.Two),
        constEnumStr: z.literal(ConstEnumStr.Two).default(ConstEnumStr.Two),
        constInt: z.literal(123).default(123 as const),
        constNum: z.literal(123.456).default(123.456 as const),
        constStr: z.literal("const").default("const" as const),
        constStrDQuotes: z
            .literal('const with "double quotes"')
            .default('const with "double quotes"' as const),
        constStrNull: z.literal(null).default(null),
        constStrSQuotes: z
            .literal("const with 'single quotes'")
            .default("const with 'single quotes'" as const),
        defaultBigInt: z
            .bigint()
            .default(BigInt("9007199254740991"))
            .transform((v) => Number(v)),
        defaultBigIntStr: z
            .bigint()
            .default(BigInt("9223372036854775807"))
            .transform((v) => `${v}`),
        defaultBool: z.boolean().default(true),
        defaultDate: z
            .instanceof(RFCDate)
            .default(() => new RFCDate("2020-01-01"))
            .transform((v) => v.toString()),
        defaultDateTime: z
            .date()
            .default(() => new Date("2020-01-01T00:00:00Z"))
            .transform((v) => v.toISOString()),
        defaultDecimal: z
            .union([z.instanceof(Decimal$), z.number()])
            .default(() => new Decimal$("3.141592653589793"))
            .transform((v) => (typeof v === "number" ? v : v.toNumber())),
        defaultDecimalStr: z
            .union([z.instanceof(Decimal$), z.number()])
            .default(() => new Decimal$("3.141592653589793238462643383279"))
            .transform((v) => `${v}`),
        defaultEnumInt: DefaultEnumInt$.outboundSchema.default(DefaultEnumInt.Two),
        defaultEnumStr: DefaultEnumStr$.outboundSchema.default(DefaultEnumStr.Two),
        defaultInt: z.number().int().default(123),
        defaultNum: z.number().default(123.456),
        defaultStr: z.string().default("default"),
        defaultStrDQuotes: z.string().default('default with "double quotes"'),
        defaultStrNullable: z.nullable(z.string()).default(null),
        defaultStrOptional: z.string().default("default"),
        defaultStrSQuotes: z.string().default("default with 'single quotes'"),
        normalField: z.string(),
    });
}
