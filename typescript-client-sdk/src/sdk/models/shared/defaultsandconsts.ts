/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RFCDate } from "../../../sdk/types";
import { Expose, Transform, Type } from "class-transformer";

export enum ConstEnumInt {
    One = 1,
    Two = 2,
    Three = 3,
}

export enum ConstEnumStr {
    One = "one",
    Two = "two",
    Three = "three",
}

export enum DefaultEnumInt {
    One = 1,
    Two = 2,
    Three = 3,
}

export enum DefaultEnumStr {
    One = "one",
    Two = "two",
    Three = "three",
}

export class DefaultsAndConsts extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "constBigInt" })
    constBigInt: number;

    @SpeakeasyMetadata()
    @Expose({ name: "constBigIntStr" })
    constBigIntStr: string;

    @SpeakeasyMetadata()
    @Expose({ name: "constBool" })
    constBool: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "constDate" })
    @Type(() => String)
    @Transform(({ value }) => new RFCDate(value), { toClassOnly: true })
    constDate: RFCDate;

    @SpeakeasyMetadata()
    @Expose({ name: "constDateTime" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    constDateTime: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "constDecimal" })
    constDecimal: number;

    @SpeakeasyMetadata()
    @Expose({ name: "constDecimalStr" })
    constDecimalStr: string;

    @SpeakeasyMetadata()
    @Expose({ name: "constEnumInt" })
    constEnumInt: ConstEnumInt;

    @SpeakeasyMetadata()
    @Expose({ name: "constEnumStr" })
    constEnumStr: ConstEnumStr;

    @SpeakeasyMetadata()
    @Expose({ name: "constInt" })
    constInt: number;

    @SpeakeasyMetadata()
    @Expose({ name: "constNum" })
    constNum: number;

    @SpeakeasyMetadata()
    @Expose({ name: "constStr" })
    constStr: string;

    @SpeakeasyMetadata()
    @Expose({ name: "constStrNull" })
    constStrNull: string;

    @SpeakeasyMetadata()
    @Expose({ name: "defaultBigInt" })
    defaultBigInt: number;

    @SpeakeasyMetadata()
    @Expose({ name: "defaultBigIntStr" })
    defaultBigIntStr: string;

    @SpeakeasyMetadata()
    @Expose({ name: "defaultBool" })
    defaultBool: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "defaultDate" })
    @Type(() => String)
    @Transform(({ value }) => new RFCDate(value), { toClassOnly: true })
    defaultDate: RFCDate;

    @SpeakeasyMetadata()
    @Expose({ name: "defaultDateTime" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    defaultDateTime: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "defaultDecimal" })
    defaultDecimal: number;

    @SpeakeasyMetadata()
    @Expose({ name: "defaultDecimalStr" })
    defaultDecimalStr: string;

    @SpeakeasyMetadata()
    @Expose({ name: "defaultEnumInt" })
    defaultEnumInt: DefaultEnumInt;

    @SpeakeasyMetadata()
    @Expose({ name: "defaultEnumStr" })
    defaultEnumStr: DefaultEnumStr;

    @SpeakeasyMetadata()
    @Expose({ name: "defaultInt" })
    defaultInt: number;

    @SpeakeasyMetadata()
    @Expose({ name: "defaultNum" })
    defaultNum: number;

    @SpeakeasyMetadata()
    @Expose({ name: "defaultStr" })
    defaultStr: string;

    @SpeakeasyMetadata()
    @Expose({ name: "defaultStrNullable" })
    defaultStrNullable: string;

    @SpeakeasyMetadata()
    @Expose({ name: "defaultStrOptional" })
    defaultStrOptional?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "normalField" })
    normalField: string;
}
