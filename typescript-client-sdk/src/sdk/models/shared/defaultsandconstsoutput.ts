/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$, RFCDate } from "../../types";
import * as z from "zod";

export enum DefaultsAndConstsOutputConstEnumInt {
    One = 1,
    Two = 2,
    Three = 3,
}

export enum DefaultsAndConstsOutputConstEnumStr {
    One = "one",
    Two = "two",
    Three = "three",
}

export enum DefaultsAndConstsOutputDefaultEnumInt {
    One = 1,
    Two = 2,
    Three = 3,
}

export enum DefaultsAndConstsOutputDefaultEnumStr {
    One = "one",
    Two = "two",
    Three = "three",
}

export type DefaultsAndConstsOutput = {
    constBigInt: bigint;
    constBigIntStr: bigint;
    constBool: boolean;
    constDate: RFCDate;
    constDateTime: Date;
    constDecimal: Decimal$ | number;
    constDecimalStr: Decimal$ | number;
    constEnumInt: DefaultsAndConstsOutputConstEnumInt;
    constEnumStr: DefaultsAndConstsOutputConstEnumStr;
    constInt: number;
    constNum: number;
    constStr: string;
    constStrDQuotes: string;
    constStrNull: string | null;
    constStrSQuotes: string;
    defaultBigInt: bigint;
    defaultBigIntStr: bigint;
    defaultBool: boolean;
    defaultDate: RFCDate;
    defaultDateTime: Date;
    defaultDecimal: Decimal$ | number;
    defaultDecimalStr: Decimal$ | number;
    defaultEnumInt: DefaultsAndConstsOutputDefaultEnumInt;
    defaultEnumStr: DefaultsAndConstsOutputDefaultEnumStr;
    defaultInt: number;
    defaultNum: number;
    defaultStr: string;
    defaultStrDQuotes: string;
    defaultStrNullable: string | null;
    defaultStrOptional?: string | undefined;
    defaultStrSQuotes: string;
    normalField: string;
};

/** @internal */
export const DefaultsAndConstsOutputConstEnumInt$ = z.nativeEnum(
    DefaultsAndConstsOutputConstEnumInt
);

/** @internal */
export const DefaultsAndConstsOutputConstEnumStr$ = z.nativeEnum(
    DefaultsAndConstsOutputConstEnumStr
);

/** @internal */
export const DefaultsAndConstsOutputDefaultEnumInt$ = z.nativeEnum(
    DefaultsAndConstsOutputDefaultEnumInt
);

/** @internal */
export const DefaultsAndConstsOutputDefaultEnumStr$ = z.nativeEnum(
    DefaultsAndConstsOutputDefaultEnumStr
);

/** @internal */
export namespace DefaultsAndConstsOutput$ {
    export type Inbound = {
        constBigInt: number;
        constBigIntStr: string;
        constBool: boolean;
        constDate: string;
        constDateTime: string;
        constDecimal: number;
        constDecimalStr: string;
        constEnumInt: DefaultsAndConstsOutputConstEnumInt;
        constEnumStr: DefaultsAndConstsOutputConstEnumStr;
        constInt: number;
        constNum: number;
        constStr: string;
        constStrDQuotes: string;
        constStrNull: string | null;
        constStrSQuotes: string;
        defaultBigInt: number;
        defaultBigIntStr: string;
        defaultBool: boolean;
        defaultDate: string;
        defaultDateTime: string;
        defaultDecimal: number;
        defaultDecimalStr: string;
        defaultEnumInt: DefaultsAndConstsOutputDefaultEnumInt;
        defaultEnumStr: DefaultsAndConstsOutputDefaultEnumStr;
        defaultInt: number;
        defaultNum: number;
        defaultStr: string;
        defaultStrDQuotes: string;
        defaultStrNullable: string | null;
        defaultStrOptional?: string | undefined;
        defaultStrSQuotes: string;
        normalField: string;
    };

    export const inboundSchema: z.ZodType<DefaultsAndConstsOutput, z.ZodTypeDef, Inbound> = z
        .object({
            constBigInt: z.number().transform((v) => BigInt(v)),
            constBigIntStr: z.string().transform((v) => BigInt(v)),
            constBool: z.boolean(),
            constDate: z.string().transform((v) => new RFCDate(v)),
            constDateTime: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            constDecimal: z.number().transform((v) => new Decimal$(v)),
            constDecimalStr: z.string().transform((v) => new Decimal$(v)),
            constEnumInt: DefaultsAndConstsOutputConstEnumInt$,
            constEnumStr: DefaultsAndConstsOutputConstEnumStr$,
            constInt: z.number().int(),
            constNum: z.number(),
            constStr: z.string(),
            constStrDQuotes: z.string(),
            constStrNull: z.nullable(z.string()),
            constStrSQuotes: z.string(),
            defaultBigInt: z.number().transform((v) => BigInt(v)),
            defaultBigIntStr: z.string().transform((v) => BigInt(v)),
            defaultBool: z.boolean(),
            defaultDate: z.string().transform((v) => new RFCDate(v)),
            defaultDateTime: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            defaultDecimal: z.number().transform((v) => new Decimal$(v)),
            defaultDecimalStr: z.string().transform((v) => new Decimal$(v)),
            defaultEnumInt: DefaultsAndConstsOutputDefaultEnumInt$,
            defaultEnumStr: DefaultsAndConstsOutputDefaultEnumStr$,
            defaultInt: z.number().int(),
            defaultNum: z.number(),
            defaultStr: z.string(),
            defaultStrDQuotes: z.string(),
            defaultStrNullable: z.nullable(z.string()),
            defaultStrOptional: z.string().optional(),
            defaultStrSQuotes: z.string(),
            normalField: z.string(),
        })
        .transform((v) => {
            return {
                constBigInt: v.constBigInt,
                constBigIntStr: v.constBigIntStr,
                constBool: v.constBool,
                constDate: v.constDate,
                constDateTime: v.constDateTime,
                constDecimal: v.constDecimal,
                constDecimalStr: v.constDecimalStr,
                constEnumInt: v.constEnumInt,
                constEnumStr: v.constEnumStr,
                constInt: v.constInt,
                constNum: v.constNum,
                constStr: v.constStr,
                constStrDQuotes: v.constStrDQuotes,
                constStrNull: v.constStrNull,
                constStrSQuotes: v.constStrSQuotes,
                defaultBigInt: v.defaultBigInt,
                defaultBigIntStr: v.defaultBigIntStr,
                defaultBool: v.defaultBool,
                defaultDate: v.defaultDate,
                defaultDateTime: v.defaultDateTime,
                defaultDecimal: v.defaultDecimal,
                defaultDecimalStr: v.defaultDecimalStr,
                defaultEnumInt: v.defaultEnumInt,
                defaultEnumStr: v.defaultEnumStr,
                defaultInt: v.defaultInt,
                defaultNum: v.defaultNum,
                defaultStr: v.defaultStr,
                defaultStrDQuotes: v.defaultStrDQuotes,
                defaultStrNullable: v.defaultStrNullable,
                ...(v.defaultStrOptional === undefined
                    ? null
                    : { defaultStrOptional: v.defaultStrOptional }),
                defaultStrSQuotes: v.defaultStrSQuotes,
                normalField: v.normalField,
            };
        });

    export type Outbound = {
        constBigInt: number;
        constBigIntStr: string;
        constBool: boolean;
        constDate: string;
        constDateTime: string;
        constDecimal: number;
        constDecimalStr: string;
        constEnumInt: DefaultsAndConstsOutputConstEnumInt;
        constEnumStr: DefaultsAndConstsOutputConstEnumStr;
        constInt: number;
        constNum: number;
        constStr: string;
        constStrDQuotes: string;
        constStrNull: string | null;
        constStrSQuotes: string;
        defaultBigInt: number;
        defaultBigIntStr: string;
        defaultBool: boolean;
        defaultDate: string;
        defaultDateTime: string;
        defaultDecimal: number;
        defaultDecimalStr: string;
        defaultEnumInt: DefaultsAndConstsOutputDefaultEnumInt;
        defaultEnumStr: DefaultsAndConstsOutputDefaultEnumStr;
        defaultInt: number;
        defaultNum: number;
        defaultStr: string;
        defaultStrDQuotes: string;
        defaultStrNullable: string | null;
        defaultStrOptional?: string | undefined;
        defaultStrSQuotes: string;
        normalField: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DefaultsAndConstsOutput> = z
        .object({
            constBigInt: z.bigint().transform((v) => Number(v)),
            constBigIntStr: z.bigint().transform((v) => `${v}`),
            constBool: z.boolean(),
            constDate: z.instanceof(RFCDate).transform((v) => v.toString()),
            constDateTime: z.date().transform((v) => v.toISOString()),
            constDecimal: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            constDecimalStr: z.union([z.instanceof(Decimal$), z.number()]).transform((v) => `${v}`),
            constEnumInt: DefaultsAndConstsOutputConstEnumInt$,
            constEnumStr: DefaultsAndConstsOutputConstEnumStr$,
            constInt: z.number().int(),
            constNum: z.number(),
            constStr: z.string(),
            constStrDQuotes: z.string(),
            constStrNull: z.nullable(z.string()),
            constStrSQuotes: z.string(),
            defaultBigInt: z.bigint().transform((v) => Number(v)),
            defaultBigIntStr: z.bigint().transform((v) => `${v}`),
            defaultBool: z.boolean(),
            defaultDate: z.instanceof(RFCDate).transform((v) => v.toString()),
            defaultDateTime: z.date().transform((v) => v.toISOString()),
            defaultDecimal: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            defaultDecimalStr: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => `${v}`),
            defaultEnumInt: DefaultsAndConstsOutputDefaultEnumInt$,
            defaultEnumStr: DefaultsAndConstsOutputDefaultEnumStr$,
            defaultInt: z.number().int(),
            defaultNum: z.number(),
            defaultStr: z.string(),
            defaultStrDQuotes: z.string(),
            defaultStrNullable: z.nullable(z.string()),
            defaultStrOptional: z.string().optional(),
            defaultStrSQuotes: z.string(),
            normalField: z.string(),
        })
        .transform((v) => {
            return {
                constBigInt: v.constBigInt,
                constBigIntStr: v.constBigIntStr,
                constBool: v.constBool,
                constDate: v.constDate,
                constDateTime: v.constDateTime,
                constDecimal: v.constDecimal,
                constDecimalStr: v.constDecimalStr,
                constEnumInt: v.constEnumInt,
                constEnumStr: v.constEnumStr,
                constInt: v.constInt,
                constNum: v.constNum,
                constStr: v.constStr,
                constStrDQuotes: v.constStrDQuotes,
                constStrNull: v.constStrNull,
                constStrSQuotes: v.constStrSQuotes,
                defaultBigInt: v.defaultBigInt,
                defaultBigIntStr: v.defaultBigIntStr,
                defaultBool: v.defaultBool,
                defaultDate: v.defaultDate,
                defaultDateTime: v.defaultDateTime,
                defaultDecimal: v.defaultDecimal,
                defaultDecimalStr: v.defaultDecimalStr,
                defaultEnumInt: v.defaultEnumInt,
                defaultEnumStr: v.defaultEnumStr,
                defaultInt: v.defaultInt,
                defaultNum: v.defaultNum,
                defaultStr: v.defaultStr,
                defaultStrDQuotes: v.defaultStrDQuotes,
                defaultStrNullable: v.defaultStrNullable,
                ...(v.defaultStrOptional === undefined
                    ? null
                    : { defaultStrOptional: v.defaultStrOptional }),
                defaultStrSQuotes: v.defaultStrSQuotes,
                normalField: v.normalField,
            };
        });
}
