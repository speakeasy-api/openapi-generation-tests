/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types/decimal.js";
import { ClosedEnum } from "../../types/enums.js";
import { RFCDate } from "../../types/rfcdate.js";
import * as z from "zod";

export const DefaultsAndConstsOutputConstEnumInt = {
    One: 1,
    Two: 2,
    Three: 3,
} as const;
export type DefaultsAndConstsOutputConstEnumInt = ClosedEnum<
    typeof DefaultsAndConstsOutputConstEnumInt
>;

export const DefaultsAndConstsOutputConstEnumStr = {
    One: "one",
    Two: "two",
    Three: "three",
} as const;
export type DefaultsAndConstsOutputConstEnumStr = ClosedEnum<
    typeof DefaultsAndConstsOutputConstEnumStr
>;

export const DefaultsAndConstsOutputDefaultEnumInt = {
    One: 1,
    Two: 2,
    Three: 3,
} as const;
export type DefaultsAndConstsOutputDefaultEnumInt = ClosedEnum<
    typeof DefaultsAndConstsOutputDefaultEnumInt
>;

export const DefaultsAndConstsOutputDefaultEnumStr = {
    One: "one",
    Two: "two",
    Three: "three",
} as const;
export type DefaultsAndConstsOutputDefaultEnumStr = ClosedEnum<
    typeof DefaultsAndConstsOutputDefaultEnumStr
>;

export type DefaultsAndConstsOutput = {
    constBigInt: bigint;
    constBigIntStr: bigint;
    constBool: boolean;
    constDate: RFCDate;
    constDateTime: Date;
    constDecimal: Decimal$ | number;
    constDecimalStr: Decimal$ | number;
    constEnumInt: DefaultsAndConstsOutputConstEnumInt;
    constEnumStr: DefaultsAndConstsOutputConstEnumStr;
    constInt: number;
    constNum: number;
    constStr: string;
    constStrDQuotes: string;
    constStrNull: string | null;
    constStrSQuotes: string;
    defaultBigInt: bigint;
    defaultBigIntStr: bigint;
    defaultBool: boolean;
    defaultDate: RFCDate;
    defaultDateTime: Date;
    defaultDecimal: Decimal$ | number;
    defaultDecimalStr: Decimal$ | number;
    defaultEnumInt: DefaultsAndConstsOutputDefaultEnumInt;
    defaultEnumStr: DefaultsAndConstsOutputDefaultEnumStr;
    defaultInt: number;
    defaultNum: number;
    defaultStr: string;
    defaultStrDQuotes: string;
    defaultStrNullable: string | null;
    defaultStrOptional?: string | undefined;
    defaultStrSQuotes: string;
    normalField: string;
};

/** @internal */
export const DefaultsAndConstsOutputConstEnumInt$inboundSchema: z.ZodNativeEnum<
    typeof DefaultsAndConstsOutputConstEnumInt
> = z.nativeEnum(DefaultsAndConstsOutputConstEnumInt);

/** @internal */
export const DefaultsAndConstsOutputConstEnumInt$outboundSchema: z.ZodNativeEnum<
    typeof DefaultsAndConstsOutputConstEnumInt
> = DefaultsAndConstsOutputConstEnumInt$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DefaultsAndConstsOutputConstEnumInt$ {
    /** @deprecated use `DefaultsAndConstsOutputConstEnumInt$inboundSchema` instead. */
    export const inboundSchema = DefaultsAndConstsOutputConstEnumInt$inboundSchema;
    /** @deprecated use `DefaultsAndConstsOutputConstEnumInt$outboundSchema` instead. */
    export const outboundSchema = DefaultsAndConstsOutputConstEnumInt$outboundSchema;
}

/** @internal */
export const DefaultsAndConstsOutputConstEnumStr$inboundSchema: z.ZodNativeEnum<
    typeof DefaultsAndConstsOutputConstEnumStr
> = z.nativeEnum(DefaultsAndConstsOutputConstEnumStr);

/** @internal */
export const DefaultsAndConstsOutputConstEnumStr$outboundSchema: z.ZodNativeEnum<
    typeof DefaultsAndConstsOutputConstEnumStr
> = DefaultsAndConstsOutputConstEnumStr$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DefaultsAndConstsOutputConstEnumStr$ {
    /** @deprecated use `DefaultsAndConstsOutputConstEnumStr$inboundSchema` instead. */
    export const inboundSchema = DefaultsAndConstsOutputConstEnumStr$inboundSchema;
    /** @deprecated use `DefaultsAndConstsOutputConstEnumStr$outboundSchema` instead. */
    export const outboundSchema = DefaultsAndConstsOutputConstEnumStr$outboundSchema;
}

/** @internal */
export const DefaultsAndConstsOutputDefaultEnumInt$inboundSchema: z.ZodNativeEnum<
    typeof DefaultsAndConstsOutputDefaultEnumInt
> = z.nativeEnum(DefaultsAndConstsOutputDefaultEnumInt);

/** @internal */
export const DefaultsAndConstsOutputDefaultEnumInt$outboundSchema: z.ZodNativeEnum<
    typeof DefaultsAndConstsOutputDefaultEnumInt
> = DefaultsAndConstsOutputDefaultEnumInt$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DefaultsAndConstsOutputDefaultEnumInt$ {
    /** @deprecated use `DefaultsAndConstsOutputDefaultEnumInt$inboundSchema` instead. */
    export const inboundSchema = DefaultsAndConstsOutputDefaultEnumInt$inboundSchema;
    /** @deprecated use `DefaultsAndConstsOutputDefaultEnumInt$outboundSchema` instead. */
    export const outboundSchema = DefaultsAndConstsOutputDefaultEnumInt$outboundSchema;
}

/** @internal */
export const DefaultsAndConstsOutputDefaultEnumStr$inboundSchema: z.ZodNativeEnum<
    typeof DefaultsAndConstsOutputDefaultEnumStr
> = z.nativeEnum(DefaultsAndConstsOutputDefaultEnumStr);

/** @internal */
export const DefaultsAndConstsOutputDefaultEnumStr$outboundSchema: z.ZodNativeEnum<
    typeof DefaultsAndConstsOutputDefaultEnumStr
> = DefaultsAndConstsOutputDefaultEnumStr$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DefaultsAndConstsOutputDefaultEnumStr$ {
    /** @deprecated use `DefaultsAndConstsOutputDefaultEnumStr$inboundSchema` instead. */
    export const inboundSchema = DefaultsAndConstsOutputDefaultEnumStr$inboundSchema;
    /** @deprecated use `DefaultsAndConstsOutputDefaultEnumStr$outboundSchema` instead. */
    export const outboundSchema = DefaultsAndConstsOutputDefaultEnumStr$outboundSchema;
}

/** @internal */
export const DefaultsAndConstsOutput$inboundSchema: z.ZodType<
    DefaultsAndConstsOutput,
    z.ZodTypeDef,
    unknown
> = z.object({
    constBigInt: z.number().transform((v) => BigInt(v)),
    constBigIntStr: z.string().transform((v) => BigInt(v)),
    constBool: z.boolean(),
    constDate: z.string().transform((v) => new RFCDate(v)),
    constDateTime: z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    constDecimal: z.number().transform((v) => new Decimal$(v)),
    constDecimalStr: z.string().transform((v) => new Decimal$(v)),
    constEnumInt: DefaultsAndConstsOutputConstEnumInt$inboundSchema,
    constEnumStr: DefaultsAndConstsOutputConstEnumStr$inboundSchema,
    constInt: z.number().int(),
    constNum: z.number(),
    constStr: z.string(),
    constStrDQuotes: z.string(),
    constStrNull: z.nullable(z.string()),
    constStrSQuotes: z.string(),
    defaultBigInt: z.number().transform((v) => BigInt(v)),
    defaultBigIntStr: z.string().transform((v) => BigInt(v)),
    defaultBool: z.boolean(),
    defaultDate: z.string().transform((v) => new RFCDate(v)),
    defaultDateTime: z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    defaultDecimal: z.number().transform((v) => new Decimal$(v)),
    defaultDecimalStr: z.string().transform((v) => new Decimal$(v)),
    defaultEnumInt: DefaultsAndConstsOutputDefaultEnumInt$inboundSchema,
    defaultEnumStr: DefaultsAndConstsOutputDefaultEnumStr$inboundSchema,
    defaultInt: z.number().int(),
    defaultNum: z.number(),
    defaultStr: z.string(),
    defaultStrDQuotes: z.string(),
    defaultStrNullable: z.nullable(z.string()),
    defaultStrOptional: z.string().optional(),
    defaultStrSQuotes: z.string(),
    normalField: z.string(),
});

/** @internal */
export type DefaultsAndConstsOutput$Outbound = {
    constBigInt: number;
    constBigIntStr: string;
    constBool: boolean;
    constDate: string;
    constDateTime: string;
    constDecimal: number;
    constDecimalStr: string;
    constEnumInt: number;
    constEnumStr: string;
    constInt: number;
    constNum: number;
    constStr: string;
    constStrDQuotes: string;
    constStrNull: string | null;
    constStrSQuotes: string;
    defaultBigInt: number;
    defaultBigIntStr: string;
    defaultBool: boolean;
    defaultDate: string;
    defaultDateTime: string;
    defaultDecimal: number;
    defaultDecimalStr: string;
    defaultEnumInt: number;
    defaultEnumStr: string;
    defaultInt: number;
    defaultNum: number;
    defaultStr: string;
    defaultStrDQuotes: string;
    defaultStrNullable: string | null;
    defaultStrOptional?: string | undefined;
    defaultStrSQuotes: string;
    normalField: string;
};

/** @internal */
export const DefaultsAndConstsOutput$outboundSchema: z.ZodType<
    DefaultsAndConstsOutput$Outbound,
    z.ZodTypeDef,
    DefaultsAndConstsOutput
> = z.object({
    constBigInt: z.bigint().transform((v) => Number(v)),
    constBigIntStr: z.bigint().transform((v) => `${v}`),
    constBool: z.boolean(),
    constDate: z.instanceof(RFCDate).transform((v) => v.toString()),
    constDateTime: z.date().transform((v) => v.toISOString()),
    constDecimal: z
        .union([z.instanceof(Decimal$), z.number()])
        .transform((v) => (typeof v === "number" ? v : v.toNumber())),
    constDecimalStr: z.union([z.instanceof(Decimal$), z.number()]).transform((v) => `${v}`),
    constEnumInt: DefaultsAndConstsOutputConstEnumInt$outboundSchema,
    constEnumStr: DefaultsAndConstsOutputConstEnumStr$outboundSchema,
    constInt: z.number().int(),
    constNum: z.number(),
    constStr: z.string(),
    constStrDQuotes: z.string(),
    constStrNull: z.nullable(z.string()),
    constStrSQuotes: z.string(),
    defaultBigInt: z.bigint().transform((v) => Number(v)),
    defaultBigIntStr: z.bigint().transform((v) => `${v}`),
    defaultBool: z.boolean(),
    defaultDate: z.instanceof(RFCDate).transform((v) => v.toString()),
    defaultDateTime: z.date().transform((v) => v.toISOString()),
    defaultDecimal: z
        .union([z.instanceof(Decimal$), z.number()])
        .transform((v) => (typeof v === "number" ? v : v.toNumber())),
    defaultDecimalStr: z.union([z.instanceof(Decimal$), z.number()]).transform((v) => `${v}`),
    defaultEnumInt: DefaultsAndConstsOutputDefaultEnumInt$outboundSchema,
    defaultEnumStr: DefaultsAndConstsOutputDefaultEnumStr$outboundSchema,
    defaultInt: z.number().int(),
    defaultNum: z.number(),
    defaultStr: z.string(),
    defaultStrDQuotes: z.string(),
    defaultStrNullable: z.nullable(z.string()),
    defaultStrOptional: z.string().optional(),
    defaultStrSQuotes: z.string(),
    normalField: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DefaultsAndConstsOutput$ {
    /** @deprecated use `DefaultsAndConstsOutput$inboundSchema` instead. */
    export const inboundSchema = DefaultsAndConstsOutput$inboundSchema;
    /** @deprecated use `DefaultsAndConstsOutput$outboundSchema` instead. */
    export const outboundSchema = DefaultsAndConstsOutput$outboundSchema;
    /** @deprecated use `DefaultsAndConstsOutput$Outbound` instead. */
    export type Outbound = DefaultsAndConstsOutput$Outbound;
}
