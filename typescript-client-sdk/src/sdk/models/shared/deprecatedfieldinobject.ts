/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * @deprecated enum: This enum is deprecated.
 */
export enum DeprecatedEnum {
    A = "a",
    B = "b",
    C = "c",
}

export type DeprecatedFieldInObject = {
    /**
     * @deprecated field: This enum is deprecated.
     */
    deprecatedEnum?: DeprecatedEnum | undefined;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible. Use newField instead.
     */
    deprecatedField?: string | undefined;
    newField?: string | undefined;
};

/** @internal */
export const DeprecatedEnum$ = z.nativeEnum(DeprecatedEnum);

/** @internal */
export namespace DeprecatedFieldInObject$ {
    export type Inbound = {
        deprecatedEnum?: DeprecatedEnum | undefined;
        deprecatedField?: string | undefined;
        newField?: string | undefined;
    };

    export const inboundSchema: z.ZodType<DeprecatedFieldInObject, z.ZodTypeDef, Inbound> = z
        .object({
            deprecatedEnum: DeprecatedEnum$.optional(),
            deprecatedField: z.string().optional(),
            newField: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.deprecatedEnum === undefined ? null : { deprecatedEnum: v.deprecatedEnum }),
                ...(v.deprecatedField === undefined
                    ? null
                    : { deprecatedField: v.deprecatedField }),
                ...(v.newField === undefined ? null : { newField: v.newField }),
            };
        });

    export type Outbound = {
        deprecatedEnum?: DeprecatedEnum | undefined;
        deprecatedField?: string | undefined;
        newField?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeprecatedFieldInObject> = z
        .object({
            deprecatedEnum: DeprecatedEnum$.optional(),
            deprecatedField: z.string().optional(),
            newField: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.deprecatedEnum === undefined ? null : { deprecatedEnum: v.deprecatedEnum }),
                ...(v.deprecatedField === undefined
                    ? null
                    : { deprecatedField: v.deprecatedField }),
                ...(v.newField === undefined ? null : { newField: v.newField }),
            };
        });
}
