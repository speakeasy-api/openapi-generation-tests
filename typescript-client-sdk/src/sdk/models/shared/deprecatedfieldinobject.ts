/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * @deprecated enum: This enum is deprecated.
 */
export enum DeprecatedEnum {
    A = "a",
    B = "b",
    C = "c",
}

export type DeprecatedFieldInObject = {
    /**
     * @deprecated field: This enum is deprecated.
     */
    deprecatedEnum?: DeprecatedEnum | undefined;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible. Use newField instead.
     */
    deprecatedField?: string | undefined;
    newField?: string | undefined;
};

/** @internal */
export namespace DeprecatedEnum$ {
    export const inboundSchema = z.nativeEnum(DeprecatedEnum);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace DeprecatedFieldInObject$ {
    export const inboundSchema: z.ZodType<DeprecatedFieldInObject, z.ZodTypeDef, unknown> =
        z.object({
            deprecatedEnum: DeprecatedEnum$.inboundSchema.optional(),
            deprecatedField: z.string().optional(),
            newField: z.string().optional(),
        });

    export type Outbound = {
        deprecatedEnum?: string | undefined;
        deprecatedField?: string | undefined;
        newField?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeprecatedFieldInObject> =
        z.object({
            deprecatedEnum: DeprecatedEnum$.outboundSchema.optional(),
            deprecatedField: z.string().optional(),
            newField: z.string().optional(),
        });
}
