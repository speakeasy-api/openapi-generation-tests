/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * @deprecated class: This object is deprecated.
 */
export type DeprecatedObject = {
  str?: string | undefined;
};

/** @internal */
export const DeprecatedObject$inboundSchema: z.ZodType<
  DeprecatedObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  str: z.string().optional(),
});

/** @internal */
export type DeprecatedObject$Outbound = {
  str?: string | undefined;
};

/** @internal */
export const DeprecatedObject$outboundSchema: z.ZodType<
  DeprecatedObject$Outbound,
  z.ZodTypeDef,
  DeprecatedObject
> = z.object({
  str: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeprecatedObject$ {
  /** @deprecated use `DeprecatedObject$inboundSchema` instead. */
  export const inboundSchema = DeprecatedObject$inboundSchema;
  /** @deprecated use `DeprecatedObject$outboundSchema` instead. */
  export const outboundSchema = DeprecatedObject$outboundSchema;
  /** @deprecated use `DeprecatedObject$Outbound` instead. */
  export type Outbound = DeprecatedObject$Outbound;
}

export function deprecatedObjectToJSON(
  deprecatedObject: DeprecatedObject,
): string {
  return JSON.stringify(
    DeprecatedObject$outboundSchema.parse(deprecatedObject),
  );
}

export function deprecatedObjectFromJSON(
  jsonString: string,
): SafeParseResult<DeprecatedObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeprecatedObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeprecatedObject' from JSON`,
  );
}
