/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { MessageEvent, MessageEvent$ } from "./messageevent";
import { UrlEvent, UrlEvent$ } from "./urlevent";
import { z } from "zod";

export type DifferentDataSchemasData = MessageEvent | UrlEvent;

export enum Event {
    Message = "message",
    Url = "url",
}

/**
 * Represents an event with different schemas for the data property
 */
export type DifferentDataSchemas = {
    data: MessageEvent | UrlEvent;
    event: Event;
    id: string;
};

/** @internal */
export namespace DifferentDataSchemasData$ {
    export type Inbound = MessageEvent$.Inbound | UrlEvent$.Inbound;

    export type Outbound = MessageEvent$.Outbound | UrlEvent$.Outbound;

    export const inboundSchema: z.ZodType<DifferentDataSchemasData, z.ZodTypeDef, Inbound> =
        z.union([MessageEvent$.inboundSchema, UrlEvent$.inboundSchema]);

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DifferentDataSchemasData> =
        z.union([MessageEvent$.outboundSchema, UrlEvent$.outboundSchema]);
}

/** @internal */
export const Event$ = z.nativeEnum(Event);

/** @internal */
export namespace DifferentDataSchemas$ {
    export type Inbound = {
        data: string;
        event: Event;
        id: string;
    };

    export const inboundSchema: z.ZodType<DifferentDataSchemas, z.ZodTypeDef, Inbound> = z
        .object({
            data: z
                .string()
                .transform((v, ctx) => {
                    try {
                        return JSON.parse(v);
                    } catch (err) {
                        ctx.addIssue({
                            code: z.ZodIssueCode.custom,
                            message: `malformed json: ${err}`,
                        });
                        return z.NEVER;
                    }
                })
                .pipe(z.union([MessageEvent$.inboundSchema, UrlEvent$.inboundSchema])),
            event: Event$,
            id: z.string(),
        })
        .transform((v) => {
            return {
                data: v.data,
                event: v.event,
                id: v.id,
            };
        });

    export type Outbound = {
        data: MessageEvent$.Outbound | UrlEvent$.Outbound;
        event: Event;
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DifferentDataSchemas> = z
        .object({
            data: z.union([MessageEvent$.outboundSchema, UrlEvent$.outboundSchema]),
            event: Event$,
            id: z.string(),
        })
        .transform((v) => {
            return {
                data: v.data,
                event: v.event,
                id: v.id,
            };
        });
}
