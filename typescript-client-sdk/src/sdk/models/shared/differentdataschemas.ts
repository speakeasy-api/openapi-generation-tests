/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { MessageEvent, MessageEvent$ } from "./messageevent";
import { UrlEvent, UrlEvent$ } from "./urlevent";
import * as z from "zod";

export type DifferentDataSchemasData = MessageEvent | UrlEvent;

export enum Event {
    Message = "message",
    Url = "url",
}

/**
 * Represents an event with different schemas for the data property
 */
export type DifferentDataSchemas = {
    data: MessageEvent | UrlEvent;
    event: Event;
    id: string;
};

/** @internal */
export namespace DifferentDataSchemasData$ {
    export const inboundSchema: z.ZodType<DifferentDataSchemasData, z.ZodTypeDef, unknown> =
        z.union([MessageEvent$.inboundSchema, UrlEvent$.inboundSchema]);

    export type Outbound = MessageEvent$.Outbound | UrlEvent$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DifferentDataSchemasData> =
        z.union([MessageEvent$.outboundSchema, UrlEvent$.outboundSchema]);
}

/** @internal */
export namespace Event$ {
    export const inboundSchema = z.nativeEnum(Event);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace DifferentDataSchemas$ {
    export const inboundSchema: z.ZodType<DifferentDataSchemas, z.ZodTypeDef, unknown> = z.object({
        data: z
            .string()
            .transform((v, ctx) => {
                try {
                    return JSON.parse(v);
                } catch (err) {
                    ctx.addIssue({
                        code: z.ZodIssueCode.custom,
                        message: `malformed json: ${err}`,
                    });
                    return z.NEVER;
                }
            })
            .pipe(z.union([MessageEvent$.inboundSchema, UrlEvent$.inboundSchema])),
        event: Event$.inboundSchema,
        id: z.string(),
    });

    export type Outbound = {
        data: MessageEvent$.Outbound | UrlEvent$.Outbound;
        event: string;
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DifferentDataSchemas> = z.object(
        {
            data: z.union([MessageEvent$.outboundSchema, UrlEvent$.outboundSchema]),
            event: Event$.outboundSchema,
            id: z.string(),
        }
    );
}
