/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import {
    MessageEvent,
    MessageEvent$inboundSchema,
    MessageEvent$Outbound,
    MessageEvent$outboundSchema,
} from "./messageevent.js";
import {
    UrlEvent,
    UrlEvent$inboundSchema,
    UrlEvent$Outbound,
    UrlEvent$outboundSchema,
} from "./urlevent.js";
import * as z from "zod";

export type DifferentDataSchemasData = MessageEvent | UrlEvent;

export const Event = {
    Message: "message",
    Url: "url",
} as const;
export type Event = ClosedEnum<typeof Event>;

/**
 * Represents an event with different schemas for the data property
 */
export type DifferentDataSchemas = {
    data: MessageEvent | UrlEvent;
    event: Event;
    id: string;
};

/** @internal */
export const DifferentDataSchemasData$inboundSchema: z.ZodType<
    DifferentDataSchemasData,
    z.ZodTypeDef,
    unknown
> = z.union([MessageEvent$inboundSchema, UrlEvent$inboundSchema]);

/** @internal */
export type DifferentDataSchemasData$Outbound = MessageEvent$Outbound | UrlEvent$Outbound;

/** @internal */
export const DifferentDataSchemasData$outboundSchema: z.ZodType<
    DifferentDataSchemasData$Outbound,
    z.ZodTypeDef,
    DifferentDataSchemasData
> = z.union([MessageEvent$outboundSchema, UrlEvent$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DifferentDataSchemasData$ {
    /** @deprecated use `DifferentDataSchemasData$inboundSchema` instead. */
    export const inboundSchema = DifferentDataSchemasData$inboundSchema;
    /** @deprecated use `DifferentDataSchemasData$outboundSchema` instead. */
    export const outboundSchema = DifferentDataSchemasData$outboundSchema;
    /** @deprecated use `DifferentDataSchemasData$Outbound` instead. */
    export type Outbound = DifferentDataSchemasData$Outbound;
}

/** @internal */
export const Event$inboundSchema: z.ZodNativeEnum<typeof Event> = z.nativeEnum(Event);

/** @internal */
export const Event$outboundSchema: z.ZodNativeEnum<typeof Event> = Event$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Event$ {
    /** @deprecated use `Event$inboundSchema` instead. */
    export const inboundSchema = Event$inboundSchema;
    /** @deprecated use `Event$outboundSchema` instead. */
    export const outboundSchema = Event$outboundSchema;
}

/** @internal */
export const DifferentDataSchemas$inboundSchema: z.ZodType<
    DifferentDataSchemas,
    z.ZodTypeDef,
    unknown
> = z.object({
    data: z
        .string()
        .transform((v, ctx) => {
            try {
                return JSON.parse(v);
            } catch (err) {
                ctx.addIssue({ code: z.ZodIssueCode.custom, message: `malformed json: ${err}` });
                return z.NEVER;
            }
        })
        .pipe(z.union([MessageEvent$inboundSchema, UrlEvent$inboundSchema])),
    event: Event$inboundSchema,
    id: z.string(),
});

/** @internal */
export type DifferentDataSchemas$Outbound = {
    data: MessageEvent$Outbound | UrlEvent$Outbound;
    event: string;
    id: string;
};

/** @internal */
export const DifferentDataSchemas$outboundSchema: z.ZodType<
    DifferentDataSchemas$Outbound,
    z.ZodTypeDef,
    DifferentDataSchemas
> = z.object({
    data: z.union([MessageEvent$outboundSchema, UrlEvent$outboundSchema]),
    event: Event$outboundSchema,
    id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DifferentDataSchemas$ {
    /** @deprecated use `DifferentDataSchemas$inboundSchema` instead. */
    export const inboundSchema = DifferentDataSchemas$inboundSchema;
    /** @deprecated use `DifferentDataSchemas$outboundSchema` instead. */
    export const outboundSchema = DifferentDataSchemas$outboundSchema;
    /** @deprecated use `DifferentDataSchemas$Outbound` instead. */
    export type Outbound = DifferentDataSchemas$Outbound;
}
