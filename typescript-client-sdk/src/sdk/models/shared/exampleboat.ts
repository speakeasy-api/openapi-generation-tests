/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const Type = {
    Boat: "boat",
} as const;
export type Type = ClosedEnum<typeof Type>;

export type ExampleBoat = {
    createdAt?: Date | undefined;
    length: number;
    name: string;
    type: Type;
    updatedAt?: Date | undefined;
};

/** @internal */
export namespace Type$ {
    export const inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(Type);
    export const outboundSchema: z.ZodNativeEnum<typeof Type> = inboundSchema;
}

/** @internal */
export namespace ExampleBoat$ {
    export const inboundSchema: z.ZodType<ExampleBoat, z.ZodTypeDef, unknown> = z.object({
        createdAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        length: z.number(),
        name: z.string(),
        type: Type$.inboundSchema,
        updatedAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    });

    export type Outbound = {
        createdAt?: string | undefined;
        length: number;
        name: string;
        type: string;
        updatedAt?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ExampleBoat> = z.object({
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        length: z.number(),
        name: z.string(),
        type: Type$.outboundSchema,
        updatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    });
}
