/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const Type = {
    Boat: "boat",
} as const;
export type Type = ClosedEnum<typeof Type>;

export type ExampleBoat = {
    createdAt?: Date | undefined;
    length: number;
    name: string;
    type: Type;
    updatedAt?: Date | undefined;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(Type);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> = Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
    /** @deprecated use `Type$inboundSchema` instead. */
    export const inboundSchema = Type$inboundSchema;
    /** @deprecated use `Type$outboundSchema` instead. */
    export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const ExampleBoat$inboundSchema: z.ZodType<ExampleBoat, z.ZodTypeDef, unknown> = z.object({
    createdAt: z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v))
        .optional(),
    length: z.number(),
    name: z.string(),
    type: Type$inboundSchema,
    updatedAt: z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v))
        .optional(),
});

/** @internal */
export type ExampleBoat$Outbound = {
    createdAt?: string | undefined;
    length: number;
    name: string;
    type: string;
    updatedAt?: string | undefined;
};

/** @internal */
export const ExampleBoat$outboundSchema: z.ZodType<
    ExampleBoat$Outbound,
    z.ZodTypeDef,
    ExampleBoat
> = z.object({
    createdAt: z
        .date()
        .transform((v) => v.toISOString())
        .optional(),
    length: z.number(),
    name: z.string(),
    type: Type$outboundSchema,
    updatedAt: z
        .date()
        .transform((v) => v.toISOString())
        .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExampleBoat$ {
    /** @deprecated use `ExampleBoat$inboundSchema` instead. */
    export const inboundSchema = ExampleBoat$inboundSchema;
    /** @deprecated use `ExampleBoat$outboundSchema` instead. */
    export const outboundSchema = ExampleBoat$outboundSchema;
    /** @deprecated use `ExampleBoat$Outbound` instead. */
    export type Outbound = ExampleBoat$Outbound;
}
