/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

export const ExampleCarType = {
  Car: "car",
} as const;
export type ExampleCarType = ClosedEnum<typeof ExampleCarType>;

export type ExampleCar = {
  createdAt?: Date | undefined;
  make: string;
  model: string;
  name: string;
  type: ExampleCarType;
  updatedAt?: Date | undefined;
  year: number;
};

/** @internal */
export const ExampleCarType$inboundSchema: z.ZodNativeEnum<
  typeof ExampleCarType
> = z.nativeEnum(ExampleCarType);

/** @internal */
export const ExampleCarType$outboundSchema: z.ZodNativeEnum<
  typeof ExampleCarType
> = ExampleCarType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExampleCarType$ {
  /** @deprecated use `ExampleCarType$inboundSchema` instead. */
  export const inboundSchema = ExampleCarType$inboundSchema;
  /** @deprecated use `ExampleCarType$outboundSchema` instead. */
  export const outboundSchema = ExampleCarType$outboundSchema;
}

/** @internal */
export const ExampleCar$inboundSchema: z.ZodType<
  ExampleCar,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  make: z.string(),
  model: z.string(),
  name: z.string(),
  type: ExampleCarType$inboundSchema,
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  year: z.number(),
});

/** @internal */
export type ExampleCar$Outbound = {
  createdAt?: string | undefined;
  make: string;
  model: string;
  name: string;
  type: string;
  updatedAt?: string | undefined;
  year: number;
};

/** @internal */
export const ExampleCar$outboundSchema: z.ZodType<
  ExampleCar$Outbound,
  z.ZodTypeDef,
  ExampleCar
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  make: z.string(),
  model: z.string(),
  name: z.string(),
  type: ExampleCarType$outboundSchema,
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  year: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExampleCar$ {
  /** @deprecated use `ExampleCar$inboundSchema` instead. */
  export const inboundSchema = ExampleCar$inboundSchema;
  /** @deprecated use `ExampleCar$outboundSchema` instead. */
  export const outboundSchema = ExampleCar$outboundSchema;
  /** @deprecated use `ExampleCar$Outbound` instead. */
  export type Outbound = ExampleCar$Outbound;
}
