/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum ExampleCarType {
    Car = "car",
}

export type ExampleCar = {
    createdAt?: Date | undefined;
    make: string;
    model: string;
    name: string;
    type: ExampleCarType;
    updatedAt?: Date | undefined;
    year: number;
};

/** @internal */
export const ExampleCarType$ = z.nativeEnum(ExampleCarType);

/** @internal */
export namespace ExampleCar$ {
    export type Inbound = {
        createdAt?: string | undefined;
        make: string;
        model: string;
        name: string;
        type: ExampleCarType;
        updatedAt?: string | undefined;
        year: number;
    };

    export const inboundSchema: z.ZodType<ExampleCar, z.ZodTypeDef, Inbound> = z
        .object({
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            make: z.string(),
            model: z.string(),
            name: z.string(),
            type: ExampleCarType$,
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            year: z.number(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                make: v.make,
                model: v.model,
                name: v.name,
                type: v.type,
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                year: v.year,
            };
        });

    export type Outbound = {
        createdAt?: string | undefined;
        make: string;
        model: string;
        name: string;
        type: ExampleCarType;
        updatedAt?: string | undefined;
        year: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ExampleCar> = z
        .object({
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            make: z.string(),
            model: z.string(),
            name: z.string(),
            type: ExampleCarType$,
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            year: z.number(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                make: v.make,
                model: v.model,
                name: v.name,
                type: v.type,
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                year: v.year,
            };
        });
}
