/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const ExampleCarType = {
    Car: "car",
} as const;
export type ExampleCarType = ClosedEnum<typeof ExampleCarType>;

export type ExampleCar = {
    createdAt?: Date | undefined;
    make: string;
    model: string;
    name: string;
    type: ExampleCarType;
    updatedAt?: Date | undefined;
    year: number;
};

/** @internal */
export namespace ExampleCarType$ {
    export const inboundSchema: z.ZodNativeEnum<typeof ExampleCarType> =
        z.nativeEnum(ExampleCarType);
    export const outboundSchema: z.ZodNativeEnum<typeof ExampleCarType> = inboundSchema;
}

/** @internal */
export namespace ExampleCar$ {
    export const inboundSchema: z.ZodType<ExampleCar, z.ZodTypeDef, unknown> = z.object({
        createdAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        make: z.string(),
        model: z.string(),
        name: z.string(),
        type: ExampleCarType$.inboundSchema,
        updatedAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        year: z.number(),
    });

    export type Outbound = {
        createdAt?: string | undefined;
        make: string;
        model: string;
        name: string;
        type: string;
        updatedAt?: string | undefined;
        year: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ExampleCar> = z.object({
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        make: z.string(),
        model: z.string(),
        name: z.string(),
        type: ExampleCarType$.outboundSchema,
        updatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        year: z.number(),
    });
}
