/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
  ExampleVehicle,
  ExampleVehicle$inboundSchema,
  ExampleVehicle$Outbound,
  ExampleVehicle$outboundSchema,
} from "./examplevehicle.js";

export type Chocolates = {
  description: string;
};

export const EnumNumber = {
  One: 1,
  Two: 2,
  Three: 3,
} as const;
export type EnumNumber = ClosedEnum<typeof EnumNumber>;

export const EnumStr = {
  One: "one",
  Two: "two",
  Three: "three",
} as const;
export type EnumStr = ClosedEnum<typeof EnumStr>;

export type InlineObject = {
  inlineName?: string | undefined;
};

export type ExampleResource = {
  arrayOfNumber?: Array<number> | undefined;
  arrayOfString?: Array<string> | undefined;
  chocolates: Array<Chocolates>;
  createdAt?: Date | undefined;
  enumNumber?: EnumNumber | undefined;
  enumStr?: EnumStr | undefined;
  id: string;
  inlineObject?: InlineObject | undefined;
  mapOfInteger?: { [k: string]: number } | undefined;
  mapOfString?: { [k: string]: string } | undefined;
  name: string;
  namePrefix?: string | undefined;
  updatedAt?: Date | undefined;
  vehicle: ExampleVehicle;
};

/** @internal */
export const Chocolates$inboundSchema: z.ZodType<
  Chocolates,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string(),
});

/** @internal */
export type Chocolates$Outbound = {
  description: string;
};

/** @internal */
export const Chocolates$outboundSchema: z.ZodType<
  Chocolates$Outbound,
  z.ZodTypeDef,
  Chocolates
> = z.object({
  description: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Chocolates$ {
  /** @deprecated use `Chocolates$inboundSchema` instead. */
  export const inboundSchema = Chocolates$inboundSchema;
  /** @deprecated use `Chocolates$outboundSchema` instead. */
  export const outboundSchema = Chocolates$outboundSchema;
  /** @deprecated use `Chocolates$Outbound` instead. */
  export type Outbound = Chocolates$Outbound;
}

/** @internal */
export const EnumNumber$inboundSchema: z.ZodNativeEnum<typeof EnumNumber> = z
  .nativeEnum(EnumNumber);

/** @internal */
export const EnumNumber$outboundSchema: z.ZodNativeEnum<typeof EnumNumber> =
  EnumNumber$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnumNumber$ {
  /** @deprecated use `EnumNumber$inboundSchema` instead. */
  export const inboundSchema = EnumNumber$inboundSchema;
  /** @deprecated use `EnumNumber$outboundSchema` instead. */
  export const outboundSchema = EnumNumber$outboundSchema;
}

/** @internal */
export const EnumStr$inboundSchema: z.ZodNativeEnum<typeof EnumStr> = z
  .nativeEnum(EnumStr);

/** @internal */
export const EnumStr$outboundSchema: z.ZodNativeEnum<typeof EnumStr> =
  EnumStr$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnumStr$ {
  /** @deprecated use `EnumStr$inboundSchema` instead. */
  export const inboundSchema = EnumStr$inboundSchema;
  /** @deprecated use `EnumStr$outboundSchema` instead. */
  export const outboundSchema = EnumStr$outboundSchema;
}

/** @internal */
export const InlineObject$inboundSchema: z.ZodType<
  InlineObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  inline_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "inline_name": "inlineName",
  });
});

/** @internal */
export type InlineObject$Outbound = {
  inline_name?: string | undefined;
};

/** @internal */
export const InlineObject$outboundSchema: z.ZodType<
  InlineObject$Outbound,
  z.ZodTypeDef,
  InlineObject
> = z.object({
  inlineName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    inlineName: "inline_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InlineObject$ {
  /** @deprecated use `InlineObject$inboundSchema` instead. */
  export const inboundSchema = InlineObject$inboundSchema;
  /** @deprecated use `InlineObject$outboundSchema` instead. */
  export const outboundSchema = InlineObject$outboundSchema;
  /** @deprecated use `InlineObject$Outbound` instead. */
  export type Outbound = InlineObject$Outbound;
}

/** @internal */
export const ExampleResource$inboundSchema: z.ZodType<
  ExampleResource,
  z.ZodTypeDef,
  unknown
> = z.object({
  arrayOfNumber: z.array(z.number()).optional(),
  arrayOfString: z.array(z.string()).optional(),
  chocolates: z.array(z.lazy(() => Chocolates$inboundSchema)),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  enumNumber: EnumNumber$inboundSchema.optional(),
  enumStr: EnumStr$inboundSchema.optional(),
  id: z.string(),
  inlineObject: z.lazy(() => InlineObject$inboundSchema).optional(),
  mapOfInteger: z.record(z.number().int()).optional(),
  mapOfString: z.record(z.string()).optional(),
  name: z.string(),
  name_prefix: z.string().optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  vehicle: ExampleVehicle$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "name_prefix": "namePrefix",
  });
});

/** @internal */
export type ExampleResource$Outbound = {
  arrayOfNumber?: Array<number> | undefined;
  arrayOfString?: Array<string> | undefined;
  chocolates: Array<Chocolates$Outbound>;
  createdAt?: string | undefined;
  enumNumber?: number | undefined;
  enumStr?: string | undefined;
  id: string;
  inlineObject?: InlineObject$Outbound | undefined;
  mapOfInteger?: { [k: string]: number } | undefined;
  mapOfString?: { [k: string]: string } | undefined;
  name: string;
  name_prefix?: string | undefined;
  updatedAt?: string | undefined;
  vehicle: ExampleVehicle$Outbound;
};

/** @internal */
export const ExampleResource$outboundSchema: z.ZodType<
  ExampleResource$Outbound,
  z.ZodTypeDef,
  ExampleResource
> = z.object({
  arrayOfNumber: z.array(z.number()).optional(),
  arrayOfString: z.array(z.string()).optional(),
  chocolates: z.array(z.lazy(() => Chocolates$outboundSchema)),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  enumNumber: EnumNumber$outboundSchema.optional(),
  enumStr: EnumStr$outboundSchema.optional(),
  id: z.string(),
  inlineObject: z.lazy(() => InlineObject$outboundSchema).optional(),
  mapOfInteger: z.record(z.number().int()).optional(),
  mapOfString: z.record(z.string()).optional(),
  name: z.string(),
  namePrefix: z.string().optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  vehicle: ExampleVehicle$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    namePrefix: "name_prefix",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExampleResource$ {
  /** @deprecated use `ExampleResource$inboundSchema` instead. */
  export const inboundSchema = ExampleResource$inboundSchema;
  /** @deprecated use `ExampleResource$outboundSchema` instead. */
  export const outboundSchema = ExampleResource$outboundSchema;
  /** @deprecated use `ExampleResource$Outbound` instead. */
  export type Outbound = ExampleResource$Outbound;
}
