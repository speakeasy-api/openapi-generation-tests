/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import { ExampleVehicle, ExampleVehicle$ } from "./examplevehicle";
import * as z from "zod";

export type Chocolates = {
    description: string;
};

export enum EnumNumber {
    One = 1,
    Two = 2,
    Three = 3,
}

export enum EnumStr {
    One = "one",
    Two = "two",
    Three = "three",
}

export type InlineObject = {
    inlineName?: string | undefined;
};

export type ExampleResource = {
    arrayOfNumber?: Array<number> | undefined;
    arrayOfString?: Array<string> | undefined;
    chocolates: Array<Chocolates>;
    createdAt?: Date | undefined;
    enumNumber?: EnumNumber | undefined;
    enumStr?: EnumStr | undefined;
    id: string;
    inlineObject?: InlineObject | undefined;
    mapOfInteger?: { [k: string]: number } | undefined;
    mapOfString?: { [k: string]: string } | undefined;
    name: string;
    namePrefix?: string | undefined;
    updatedAt?: Date | undefined;
    vehicle: ExampleVehicle;
};

/** @internal */
export namespace Chocolates$ {
    export const inboundSchema: z.ZodType<Chocolates, z.ZodTypeDef, unknown> = z.object({
        description: z.string(),
    });

    export type Outbound = {
        description: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Chocolates> = z.object({
        description: z.string(),
    });
}

/** @internal */
export namespace EnumNumber$ {
    export const inboundSchema = z.nativeEnum(EnumNumber);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace EnumStr$ {
    export const inboundSchema = z.nativeEnum(EnumStr);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace InlineObject$ {
    export const inboundSchema: z.ZodType<InlineObject, z.ZodTypeDef, unknown> = z
        .object({
            inline_name: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                inline_name: "inlineName",
            });
        });

    export type Outbound = {
        inline_name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InlineObject> = z
        .object({
            inlineName: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                inlineName: "inline_name",
            });
        });
}

/** @internal */
export namespace ExampleResource$ {
    export const inboundSchema: z.ZodType<ExampleResource, z.ZodTypeDef, unknown> = z
        .object({
            arrayOfNumber: z.array(z.number()).optional(),
            arrayOfString: z.array(z.string()).optional(),
            chocolates: z.array(z.lazy(() => Chocolates$.inboundSchema)),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            enumNumber: EnumNumber$.inboundSchema.optional(),
            enumStr: EnumStr$.inboundSchema.optional(),
            id: z.string(),
            inlineObject: z.lazy(() => InlineObject$.inboundSchema).optional(),
            mapOfInteger: z.record(z.number().int()).optional(),
            mapOfString: z.record(z.string()).optional(),
            name: z.string(),
            name_prefix: z.string().optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            vehicle: ExampleVehicle$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                name_prefix: "namePrefix",
            });
        });

    export type Outbound = {
        arrayOfNumber?: Array<number> | undefined;
        arrayOfString?: Array<string> | undefined;
        chocolates: Array<Chocolates$.Outbound>;
        createdAt?: string | undefined;
        enumNumber?: number | undefined;
        enumStr?: string | undefined;
        id: string;
        inlineObject?: InlineObject$.Outbound | undefined;
        mapOfInteger?: { [k: string]: number } | undefined;
        mapOfString?: { [k: string]: string } | undefined;
        name: string;
        name_prefix?: string | undefined;
        updatedAt?: string | undefined;
        vehicle: ExampleVehicle$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ExampleResource> = z
        .object({
            arrayOfNumber: z.array(z.number()).optional(),
            arrayOfString: z.array(z.string()).optional(),
            chocolates: z.array(z.lazy(() => Chocolates$.outboundSchema)),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            enumNumber: EnumNumber$.outboundSchema.optional(),
            enumStr: EnumStr$.outboundSchema.optional(),
            id: z.string(),
            inlineObject: z.lazy(() => InlineObject$.outboundSchema).optional(),
            mapOfInteger: z.record(z.number().int()).optional(),
            mapOfString: z.record(z.string()).optional(),
            name: z.string(),
            namePrefix: z.string().optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            vehicle: ExampleVehicle$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                namePrefix: "name_prefix",
            });
        });
}
