/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A set of strings with camel case fieldnames that lead to relevant examples being generated for them
 */
export type FakerCamelCasePropertyNameStrings = {
  city: string;
  iban: string;
  id: string;
  iPv4: string;
  iPv6: string;
};

/** @internal */
export const FakerCamelCasePropertyNameStrings$inboundSchema: z.ZodType<
  FakerCamelCasePropertyNameStrings,
  z.ZodTypeDef,
  unknown
> = z.object({
  City: z.string(),
  IBAN: z.string(),
  ID: z.string(),
  IPv4: z.string(),
  IPv6: z.string(),
}).transform((v) => {
  return remap$(v, {
    "City": "city",
    "IBAN": "iban",
    "ID": "id",
    "IPv4": "iPv4",
    "IPv6": "iPv6",
  });
});

/** @internal */
export type FakerCamelCasePropertyNameStrings$Outbound = {
  City: string;
  IBAN: string;
  ID: string;
  IPv4: string;
  IPv6: string;
};

/** @internal */
export const FakerCamelCasePropertyNameStrings$outboundSchema: z.ZodType<
  FakerCamelCasePropertyNameStrings$Outbound,
  z.ZodTypeDef,
  FakerCamelCasePropertyNameStrings
> = z.object({
  city: z.string(),
  iban: z.string(),
  id: z.string(),
  iPv4: z.string(),
  iPv6: z.string(),
}).transform((v) => {
  return remap$(v, {
    city: "City",
    iban: "IBAN",
    id: "ID",
    iPv4: "IPv4",
    iPv6: "IPv6",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FakerCamelCasePropertyNameStrings$ {
  /** @deprecated use `FakerCamelCasePropertyNameStrings$inboundSchema` instead. */
  export const inboundSchema = FakerCamelCasePropertyNameStrings$inboundSchema;
  /** @deprecated use `FakerCamelCasePropertyNameStrings$outboundSchema` instead. */
  export const outboundSchema =
    FakerCamelCasePropertyNameStrings$outboundSchema;
  /** @deprecated use `FakerCamelCasePropertyNameStrings$Outbound` instead. */
  export type Outbound = FakerCamelCasePropertyNameStrings$Outbound;
}

export function fakerCamelCasePropertyNameStringsToJSON(
  fakerCamelCasePropertyNameStrings: FakerCamelCasePropertyNameStrings,
): string {
  return JSON.stringify(
    FakerCamelCasePropertyNameStrings$outboundSchema.parse(
      fakerCamelCasePropertyNameStrings,
    ),
  );
}

export function fakerCamelCasePropertyNameStringsFromJSON(
  jsonString: string,
): SafeParseResult<FakerCamelCasePropertyNameStrings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FakerCamelCasePropertyNameStrings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FakerCamelCasePropertyNameStrings' from JSON`,
  );
}
