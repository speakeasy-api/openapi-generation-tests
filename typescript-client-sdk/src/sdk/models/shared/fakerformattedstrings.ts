/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A set of strings with format values that lead to relevant examples being generated for them
 */
export type FakerFormattedStrings = {
  /**
   * A field that will have an address generated as example
   */
  addressFormat?: string | undefined;
  /**
   * A field that will have a directory path generated as example
   */
  directoryFormat?: string | undefined;
  /**
   * A field that will have a domain name generated as example
   */
  domainFormat?: string | undefined;
  /**
   * A field that will have an email address generated as example
   */
  emailFormat?: string | undefined;
  /**
   * A field that will have a filename generated as example
   */
  filenameFormat?: string | undefined;
  /**
   * A field that will have a file path generated as example
   */
  filepathFormat?: string | undefined;
  /**
   * A field that will have a image url generated as example
   */
  imageFormat?: string | undefined;
  /**
   * A field that will have an IPv4 address generated as example
   */
  ipv4Format?: string | undefined;
  /**
   * A field that will have an IPv6 address generated as example
   */
  ipv6Format?: string | undefined;
  /**
   * A field that will have a JSON generated as example
   */
  jsonFormat?: string | undefined;
  /**
   * A field that will have a MAC address generated as example
   */
  macFormat?: string | undefined;
  /**
   * A field that will have a fake password generated as example
   */
  passwordFormat?: string | undefined;
  /**
   * A field that will have a phone number generated as example
   */
  phoneFormat?: string | undefined;
  /**
   * A field that will have a timezone generated as example
   */
  timezoneFormat?: string | undefined;
  /**
   * A field that will have random words generated as example
   */
  unknownFormat?: string | undefined;
  /**
   * A field that will have a URL generated as example
   */
  urlFormat?: string | undefined;
  /**
   * A field that will have a UUID generated as example
   */
  uuidFormat?: string | undefined;
  /**
   * A field that will have a postal code generated as example
   */
  zipcodeFormat?: string | undefined;
};

/** @internal */
export const FakerFormattedStrings$inboundSchema: z.ZodType<
  FakerFormattedStrings,
  z.ZodTypeDef,
  unknown
> = z.object({
  addressFormat: z.string().optional(),
  directoryFormat: z.string().optional(),
  domainFormat: z.string().optional(),
  emailFormat: z.string().optional(),
  filenameFormat: z.string().optional(),
  filepathFormat: z.string().optional(),
  imageFormat: z.string().optional(),
  ipv4Format: z.string().optional(),
  ipv6Format: z.string().optional(),
  jsonFormat: z.string().optional(),
  macFormat: z.string().optional(),
  passwordFormat: z.string().optional(),
  phoneFormat: z.string().optional(),
  timezoneFormat: z.string().optional(),
  unknownFormat: z.string().optional(),
  urlFormat: z.string().optional(),
  uuidFormat: z.string().optional(),
  zipcodeFormat: z.string().optional(),
});

/** @internal */
export type FakerFormattedStrings$Outbound = {
  addressFormat?: string | undefined;
  directoryFormat?: string | undefined;
  domainFormat?: string | undefined;
  emailFormat?: string | undefined;
  filenameFormat?: string | undefined;
  filepathFormat?: string | undefined;
  imageFormat?: string | undefined;
  ipv4Format?: string | undefined;
  ipv6Format?: string | undefined;
  jsonFormat?: string | undefined;
  macFormat?: string | undefined;
  passwordFormat?: string | undefined;
  phoneFormat?: string | undefined;
  timezoneFormat?: string | undefined;
  unknownFormat?: string | undefined;
  urlFormat?: string | undefined;
  uuidFormat?: string | undefined;
  zipcodeFormat?: string | undefined;
};

/** @internal */
export const FakerFormattedStrings$outboundSchema: z.ZodType<
  FakerFormattedStrings$Outbound,
  z.ZodTypeDef,
  FakerFormattedStrings
> = z.object({
  addressFormat: z.string().optional(),
  directoryFormat: z.string().optional(),
  domainFormat: z.string().optional(),
  emailFormat: z.string().optional(),
  filenameFormat: z.string().optional(),
  filepathFormat: z.string().optional(),
  imageFormat: z.string().optional(),
  ipv4Format: z.string().optional(),
  ipv6Format: z.string().optional(),
  jsonFormat: z.string().optional(),
  macFormat: z.string().optional(),
  passwordFormat: z.string().optional(),
  phoneFormat: z.string().optional(),
  timezoneFormat: z.string().optional(),
  unknownFormat: z.string().optional(),
  urlFormat: z.string().optional(),
  uuidFormat: z.string().optional(),
  zipcodeFormat: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FakerFormattedStrings$ {
  /** @deprecated use `FakerFormattedStrings$inboundSchema` instead. */
  export const inboundSchema = FakerFormattedStrings$inboundSchema;
  /** @deprecated use `FakerFormattedStrings$outboundSchema` instead. */
  export const outboundSchema = FakerFormattedStrings$outboundSchema;
  /** @deprecated use `FakerFormattedStrings$Outbound` instead. */
  export type Outbound = FakerFormattedStrings$Outbound;
}

export function fakerFormattedStringsToJSON(
  fakerFormattedStrings: FakerFormattedStrings,
): string {
  return JSON.stringify(
    FakerFormattedStrings$outboundSchema.parse(fakerFormattedStrings),
  );
}

export function fakerFormattedStringsFromJSON(
  jsonString: string,
): SafeParseResult<FakerFormattedStrings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FakerFormattedStrings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FakerFormattedStrings' from JSON`,
  );
}
