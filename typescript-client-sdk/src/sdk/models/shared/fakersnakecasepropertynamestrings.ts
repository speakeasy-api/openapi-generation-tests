/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A set of strings with snake case fieldnames that lead to relevant examples being generated for them
 */
export type FakerSnakeCasePropertyNameStrings = {
  countryCode: string;
  /**
   * RFC3339 formatted timestamp
   */
  createdAt: string;
  /**
   * RFC3339 formatted timestamp
   */
  expiredAt: string;
  /**
   * RFC3339 formatted timestamp
   */
  updatedAt: string;
};

/** @internal */
export const FakerSnakeCasePropertyNameStrings$inboundSchema: z.ZodType<
  FakerSnakeCasePropertyNameStrings,
  z.ZodTypeDef,
  unknown
> = z.object({
  country_code: z.string(),
  created_at: z.string(),
  expired_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "country_code": "countryCode",
    "created_at": "createdAt",
    "expired_at": "expiredAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type FakerSnakeCasePropertyNameStrings$Outbound = {
  country_code: string;
  created_at: string;
  expired_at: string;
  updated_at: string;
};

/** @internal */
export const FakerSnakeCasePropertyNameStrings$outboundSchema: z.ZodType<
  FakerSnakeCasePropertyNameStrings$Outbound,
  z.ZodTypeDef,
  FakerSnakeCasePropertyNameStrings
> = z.object({
  countryCode: z.string(),
  createdAt: z.string(),
  expiredAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    countryCode: "country_code",
    createdAt: "created_at",
    expiredAt: "expired_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FakerSnakeCasePropertyNameStrings$ {
  /** @deprecated use `FakerSnakeCasePropertyNameStrings$inboundSchema` instead. */
  export const inboundSchema = FakerSnakeCasePropertyNameStrings$inboundSchema;
  /** @deprecated use `FakerSnakeCasePropertyNameStrings$outboundSchema` instead. */
  export const outboundSchema =
    FakerSnakeCasePropertyNameStrings$outboundSchema;
  /** @deprecated use `FakerSnakeCasePropertyNameStrings$Outbound` instead. */
  export type Outbound = FakerSnakeCasePropertyNameStrings$Outbound;
}

export function fakerSnakeCasePropertyNameStringsToJSON(
  fakerSnakeCasePropertyNameStrings: FakerSnakeCasePropertyNameStrings,
): string {
  return JSON.stringify(
    FakerSnakeCasePropertyNameStrings$outboundSchema.parse(
      fakerSnakeCasePropertyNameStrings,
    ),
  );
}

export function fakerSnakeCasePropertyNameStringsFromJSON(
  jsonString: string,
): SafeParseResult<FakerSnakeCasePropertyNameStrings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FakerSnakeCasePropertyNameStrings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FakerSnakeCasePropertyNameStrings' from JSON`,
  );
}
