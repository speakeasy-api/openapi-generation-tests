/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FigmaSubcanvasNode,
  FigmaSubcanvasNode$inboundSchema,
  FigmaSubcanvasNode$Outbound,
  FigmaSubcanvasNode$outboundSchema,
} from "./figmasubcanvasnode.js";

export type FigmaComponentNode = {
  children?: Array<FigmaSubcanvasNode> | undefined;
  type?: string | undefined;
};

/** @internal */
export const FigmaComponentNode$inboundSchema: z.ZodType<
  FigmaComponentNode,
  z.ZodTypeDef,
  unknown
> = z.object({
  children: z.array(z.lazy(() => FigmaSubcanvasNode$inboundSchema)).optional(),
  type: z.string().optional(),
});

/** @internal */
export type FigmaComponentNode$Outbound = {
  children?: Array<FigmaSubcanvasNode$Outbound> | undefined;
  type?: string | undefined;
};

/** @internal */
export const FigmaComponentNode$outboundSchema: z.ZodType<
  FigmaComponentNode$Outbound,
  z.ZodTypeDef,
  FigmaComponentNode
> = z.object({
  children: z.array(z.lazy(() => FigmaSubcanvasNode$outboundSchema)).optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FigmaComponentNode$ {
  /** @deprecated use `FigmaComponentNode$inboundSchema` instead. */
  export const inboundSchema = FigmaComponentNode$inboundSchema;
  /** @deprecated use `FigmaComponentNode$outboundSchema` instead. */
  export const outboundSchema = FigmaComponentNode$outboundSchema;
  /** @deprecated use `FigmaComponentNode$Outbound` instead. */
  export type Outbound = FigmaComponentNode$Outbound;
}

export function figmaComponentNodeToJSON(
  figmaComponentNode: FigmaComponentNode,
): string {
  return JSON.stringify(
    FigmaComponentNode$outboundSchema.parse(figmaComponentNode),
  );
}

export function figmaComponentNodeFromJSON(
  jsonString: string,
): SafeParseResult<FigmaComponentNode, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FigmaComponentNode$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FigmaComponentNode' from JSON`,
  );
}
