/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { Bike, Bike$inboundSchema, Bike$Outbound, Bike$outboundSchema } from "./bike.js";
import { Car, Car$inboundSchema, Car$Outbound, Car$outboundSchema } from "./car.js";
import * as z from "zod";

export type HasWheels = (Car & { wheelsType: "four" }) | (Bike & { wheelsType: "two" });

/** @internal */
export const HasWheels$inboundSchema: z.ZodType<HasWheels, z.ZodTypeDef, unknown> = z.union([
    Car$inboundSchema.and(
        z.object({ wheelsType: z.literal("four") }).transform((v) => ({ wheelsType: v.wheelsType }))
    ),
    Bike$inboundSchema.and(
        z.object({ wheelsType: z.literal("two") }).transform((v) => ({ wheelsType: v.wheelsType }))
    ),
]);

/** @internal */
export type HasWheels$Outbound =
    | (Car$Outbound & { wheelsType: "four" })
    | (Bike$Outbound & { wheelsType: "two" });

/** @internal */
export const HasWheels$outboundSchema: z.ZodType<HasWheels$Outbound, z.ZodTypeDef, HasWheels> =
    z.union([
        Car$outboundSchema.and(
            z
                .object({ wheelsType: z.literal("four") })
                .transform((v) => ({ wheelsType: v.wheelsType }))
        ),
        Bike$outboundSchema.and(
            z
                .object({ wheelsType: z.literal("two") })
                .transform((v) => ({ wheelsType: v.wheelsType }))
        ),
    ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HasWheels$ {
    /** @deprecated use `HasWheels$inboundSchema` instead. */
    export const inboundSchema = HasWheels$inboundSchema;
    /** @deprecated use `HasWheels$outboundSchema` instead. */
    export const outboundSchema = HasWheels$outboundSchema;
    /** @deprecated use `HasWheels$Outbound` instead. */
    export type Outbound = HasWheels$Outbound;
}
