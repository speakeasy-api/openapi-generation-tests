/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Represents a single heartbeat event
 */
export type HeartbeatEvent = {
    data: string;
    event?: "heartbeat" | undefined;
    retry?: number | undefined;
};

/** @internal */
export namespace HeartbeatEvent$ {
    export type Inbound = {
        data: string;
        event?: "heartbeat" | undefined;
        retry?: number | undefined;
    };

    export const inboundSchema: z.ZodType<HeartbeatEvent, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.string(),
            event: z.literal("heartbeat").optional(),
            retry: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                data: v.data,
                ...(v.event === undefined ? null : { event: v.event }),
                ...(v.retry === undefined ? null : { retry: v.retry }),
            };
        });

    export type Outbound = {
        data: string;
        event: "heartbeat";
        retry?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HeartbeatEvent> = z
        .object({
            data: z.string(),
            event: z.literal("heartbeat").default("heartbeat" as const),
            retry: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                data: v.data,
                event: v.event,
                ...(v.retry === undefined ? null : { retry: v.retry }),
            };
        });
}
