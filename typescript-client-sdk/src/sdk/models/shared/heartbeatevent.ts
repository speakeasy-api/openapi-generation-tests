/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Represents a single heartbeat event
 */
export type HeartbeatEvent = {
    data: string;
    event?: "heartbeat" | undefined;
    retry?: number | undefined;
};

/** @internal */
export const HeartbeatEvent$inboundSchema: z.ZodType<HeartbeatEvent, z.ZodTypeDef, unknown> =
    z.object({
        data: z.string(),
        event: z.literal("heartbeat").optional(),
        retry: z.number().int().optional(),
    });

/** @internal */
export type HeartbeatEvent$Outbound = {
    data: string;
    event: "heartbeat";
    retry?: number | undefined;
};

/** @internal */
export const HeartbeatEvent$outboundSchema: z.ZodType<
    HeartbeatEvent$Outbound,
    z.ZodTypeDef,
    HeartbeatEvent
> = z.object({
    data: z.string(),
    event: z.literal("heartbeat").default("heartbeat" as const),
    retry: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HeartbeatEvent$ {
    /** @deprecated use `HeartbeatEvent$inboundSchema` instead. */
    export const inboundSchema = HeartbeatEvent$inboundSchema;
    /** @deprecated use `HeartbeatEvent$outboundSchema` instead. */
    export const outboundSchema = HeartbeatEvent$outboundSchema;
    /** @deprecated use `HeartbeatEvent$Outbound` instead. */
    export type Outbound = HeartbeatEvent$Outbound;
}
