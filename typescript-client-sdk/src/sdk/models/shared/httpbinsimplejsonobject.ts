/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Slides = {
    items?: Array<string> | undefined;
    title: string;
    type: string;
};

export type Slideshow = {
    author: string;
    date: string;
    slides: Array<Slides>;
    title: string;
};

export type HttpBinSimpleJsonObject = {
    slideshow: Slideshow;
};

/** @internal */
export namespace Slides$ {
    export const inboundSchema: z.ZodType<Slides, z.ZodTypeDef, unknown> = z
        .object({
            items: z.array(z.string()).optional(),
            title: z.string(),
            type: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.items === undefined ? null : { items: v.items }),
                title: v.title,
                type: v.type,
            };
        });

    export type Outbound = {
        items?: Array<string> | undefined;
        title: string;
        type: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Slides> = z
        .object({
            items: z.array(z.string()).optional(),
            title: z.string(),
            type: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.items === undefined ? null : { items: v.items }),
                title: v.title,
                type: v.type,
            };
        });
}

/** @internal */
export namespace Slideshow$ {
    export const inboundSchema: z.ZodType<Slideshow, z.ZodTypeDef, unknown> = z
        .object({
            author: z.string(),
            date: z.string(),
            slides: z.array(z.lazy(() => Slides$.inboundSchema)),
            title: z.string(),
        })
        .transform((v) => {
            return {
                author: v.author,
                date: v.date,
                slides: v.slides,
                title: v.title,
            };
        });

    export type Outbound = {
        author: string;
        date: string;
        slides: Array<Slides$.Outbound>;
        title: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Slideshow> = z
        .object({
            author: z.string(),
            date: z.string(),
            slides: z.array(z.lazy(() => Slides$.outboundSchema)),
            title: z.string(),
        })
        .transform((v) => {
            return {
                author: v.author,
                date: v.date,
                slides: v.slides,
                title: v.title,
            };
        });
}

/** @internal */
export namespace HttpBinSimpleJsonObject$ {
    export const inboundSchema: z.ZodType<HttpBinSimpleJsonObject, z.ZodTypeDef, unknown> = z
        .object({
            slideshow: z.lazy(() => Slideshow$.inboundSchema),
        })
        .transform((v) => {
            return {
                slideshow: v.slideshow,
            };
        });

    export type Outbound = {
        slideshow: Slideshow$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HttpBinSimpleJsonObject> = z
        .object({
            slideshow: z.lazy(() => Slideshow$.outboundSchema),
        })
        .transform((v) => {
            return {
                slideshow: v.slideshow,
            };
        });
}
