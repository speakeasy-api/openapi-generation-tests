/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type JsonEventData = {
    content: string;
};

/**
 * Represents a single event in a json stream
 */
export type JsonEvent = {
    data: JsonEventData;
};

/** @internal */
export const JsonEventData$inboundSchema: z.ZodType<JsonEventData, z.ZodTypeDef, unknown> =
    z.object({
        content: z.string(),
    });

/** @internal */
export type JsonEventData$Outbound = {
    content: string;
};

/** @internal */
export const JsonEventData$outboundSchema: z.ZodType<
    JsonEventData$Outbound,
    z.ZodTypeDef,
    JsonEventData
> = z.object({
    content: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JsonEventData$ {
    /** @deprecated use `JsonEventData$inboundSchema` instead. */
    export const inboundSchema = JsonEventData$inboundSchema;
    /** @deprecated use `JsonEventData$outboundSchema` instead. */
    export const outboundSchema = JsonEventData$outboundSchema;
    /** @deprecated use `JsonEventData$Outbound` instead. */
    export type Outbound = JsonEventData$Outbound;
}

/** @internal */
export const JsonEvent$inboundSchema: z.ZodType<JsonEvent, z.ZodTypeDef, unknown> = z.object({
    data: z
        .string()
        .transform((v, ctx) => {
            try {
                return JSON.parse(v);
            } catch (err) {
                ctx.addIssue({ code: z.ZodIssueCode.custom, message: `malformed json: ${err}` });
                return z.NEVER;
            }
        })
        .pipe(z.lazy(() => JsonEventData$inboundSchema)),
});

/** @internal */
export type JsonEvent$Outbound = {
    data: JsonEventData$Outbound;
};

/** @internal */
export const JsonEvent$outboundSchema: z.ZodType<JsonEvent$Outbound, z.ZodTypeDef, JsonEvent> =
    z.object({
        data: z.lazy(() => JsonEventData$outboundSchema),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JsonEvent$ {
    /** @deprecated use `JsonEvent$inboundSchema` instead. */
    export const inboundSchema = JsonEvent$inboundSchema;
    /** @deprecated use `JsonEvent$outboundSchema` instead. */
    export const outboundSchema = JsonEvent$outboundSchema;
    /** @deprecated use `JsonEvent$Outbound` instead. */
    export type Outbound = JsonEvent$Outbound;
}
