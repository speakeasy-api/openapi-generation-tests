/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type JsonEventData = {
    content: string;
};

/**
 * Represents a single event in a json stream
 */
export type JsonEvent = {
    data: JsonEventData;
};

/** @internal */
export namespace JsonEventData$ {
    export type Inbound = {
        content: string;
    };

    export const inboundSchema: z.ZodType<JsonEventData, z.ZodTypeDef, Inbound> = z
        .object({
            content: z.string(),
        })
        .transform((v) => {
            return {
                content: v.content,
            };
        });

    export type Outbound = {
        content: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JsonEventData> = z
        .object({
            content: z.string(),
        })
        .transform((v) => {
            return {
                content: v.content,
            };
        });
}

/** @internal */
export namespace JsonEvent$ {
    export type Inbound = {
        data: JsonEventData$.Inbound;
    };

    export const inboundSchema: z.ZodType<JsonEvent, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.lazy(() => JsonEventData$.inboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: JsonEventData$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JsonEvent> = z
        .object({
            data: z.lazy(() => JsonEventData$.outboundSchema),
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}
