/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LimitOffsetConfigWithDefaults = {
  limit?: number | undefined;
  offset?: number | undefined;
  page?: number | undefined;
};

/** @internal */
export const LimitOffsetConfigWithDefaults$inboundSchema: z.ZodType<
  LimitOffsetConfigWithDefaults,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().int().default(15),
  offset: z.number().int().default(10),
  page: z.number().int().optional(),
});

/** @internal */
export type LimitOffsetConfigWithDefaults$Outbound = {
  limit: number;
  offset: number;
  page?: number | undefined;
};

/** @internal */
export const LimitOffsetConfigWithDefaults$outboundSchema: z.ZodType<
  LimitOffsetConfigWithDefaults$Outbound,
  z.ZodTypeDef,
  LimitOffsetConfigWithDefaults
> = z.object({
  limit: z.number().int().default(15),
  offset: z.number().int().default(10),
  page: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LimitOffsetConfigWithDefaults$ {
  /** @deprecated use `LimitOffsetConfigWithDefaults$inboundSchema` instead. */
  export const inboundSchema = LimitOffsetConfigWithDefaults$inboundSchema;
  /** @deprecated use `LimitOffsetConfigWithDefaults$outboundSchema` instead. */
  export const outboundSchema = LimitOffsetConfigWithDefaults$outboundSchema;
  /** @deprecated use `LimitOffsetConfigWithDefaults$Outbound` instead. */
  export type Outbound = LimitOffsetConfigWithDefaults$Outbound;
}

export function limitOffsetConfigWithDefaultsToJSON(
  limitOffsetConfigWithDefaults: LimitOffsetConfigWithDefaults,
): string {
  return JSON.stringify(
    LimitOffsetConfigWithDefaults$outboundSchema.parse(
      limitOffsetConfigWithDefaults,
    ),
  );
}

export function limitOffsetConfigWithDefaultsFromJSON(
  jsonString: string,
): SafeParseResult<LimitOffsetConfigWithDefaults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LimitOffsetConfigWithDefaults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LimitOffsetConfigWithDefaults' from JSON`,
  );
}
