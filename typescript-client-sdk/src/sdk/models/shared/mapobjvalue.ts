/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SimpleObject, SimpleObject$ } from "./simpleobject";
import * as z from "zod";

export type MapObjValue = {
    json?: { [k: string]: SimpleObject } | undefined;
    required?: any | undefined;
};

/** @internal */
export namespace MapObjValue$ {
    export const inboundSchema: z.ZodType<MapObjValue, z.ZodTypeDef, unknown> = z.object({
        json: z.record(SimpleObject$.inboundSchema).optional(),
        required: z.any().optional(),
    });

    export type Outbound = {
        json?: { [k: string]: SimpleObject$.Outbound } | undefined;
        required?: any | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MapObjValue> = z.object({
        json: z.record(SimpleObject$.outboundSchema).optional(),
        required: z.any().optional(),
    });
}
