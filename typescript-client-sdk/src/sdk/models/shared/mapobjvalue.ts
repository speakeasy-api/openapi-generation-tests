/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    SimpleObject,
    SimpleObject$inboundSchema,
    SimpleObject$Outbound,
    SimpleObject$outboundSchema,
} from "./simpleobject.js";
import * as z from "zod";

export type MapObjValue = {
    json?: { [k: string]: SimpleObject } | undefined;
    required?: any | undefined;
};

/** @internal */
export const MapObjValue$inboundSchema: z.ZodType<MapObjValue, z.ZodTypeDef, unknown> = z.object({
    json: z.record(SimpleObject$inboundSchema).optional(),
    required: z.any().optional(),
});

/** @internal */
export type MapObjValue$Outbound = {
    json?: { [k: string]: SimpleObject$Outbound } | undefined;
    required?: any | undefined;
};

/** @internal */
export const MapObjValue$outboundSchema: z.ZodType<
    MapObjValue$Outbound,
    z.ZodTypeDef,
    MapObjValue
> = z.object({
    json: z.record(SimpleObject$outboundSchema).optional(),
    required: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MapObjValue$ {
    /** @deprecated use `MapObjValue$inboundSchema` instead. */
    export const inboundSchema = MapObjValue$inboundSchema;
    /** @deprecated use `MapObjValue$outboundSchema` instead. */
    export const outboundSchema = MapObjValue$outboundSchema;
    /** @deprecated use `MapObjValue$Outbound` instead. */
    export type Outbound = MapObjValue$Outbound;
}
