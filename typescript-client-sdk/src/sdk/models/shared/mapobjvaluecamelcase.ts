/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SimpleObjectCamelCase, SimpleObjectCamelCase$ } from "./simpleobjectcamelcase";
import { z } from "zod";

export type MapObjValueCamelCase = {
    json?: Record<string, SimpleObjectCamelCase> | undefined;
    required?: any | undefined;
};

/** @internal */
export namespace MapObjValueCamelCase$ {
    export type Inbound = {
        json?: Record<string, SimpleObjectCamelCase$.Inbound> | undefined;
        required?: any | undefined;
    };

    export const inboundSchema: z.ZodType<MapObjValueCamelCase, z.ZodTypeDef, Inbound> = z
        .object({
            json: z.record(SimpleObjectCamelCase$.inboundSchema).optional(),
            required: z.any().optional(),
        })
        .transform((v) => {
            return {
                ...(v.json === undefined ? null : { json: v.json }),
                ...(v.required === undefined ? null : { required: v.required }),
            };
        });

    export type Outbound = {
        json?: Record<string, SimpleObjectCamelCase$.Outbound> | undefined;
        required?: any | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MapObjValueCamelCase> = z
        .object({
            json: z.record(SimpleObjectCamelCase$.outboundSchema).optional(),
            required: z.any().optional(),
        })
        .transform((v) => {
            return {
                ...(v.json === undefined ? null : { json: v.json }),
                ...(v.required === undefined ? null : { required: v.required }),
            };
        });
}
