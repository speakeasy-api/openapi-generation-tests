/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Bike,
  Bike$inboundSchema,
  Bike$Outbound,
  Bike$outboundSchema,
} from "./bike.js";

export type MixedUnionTypes = Bike | Array<Bike>;

/** @internal */
export const MixedUnionTypes$inboundSchema: z.ZodType<
  MixedUnionTypes,
  z.ZodTypeDef,
  unknown
> = z.union([Bike$inboundSchema, z.array(Bike$inboundSchema)]);

/** @internal */
export type MixedUnionTypes$Outbound = Bike$Outbound | Array<Bike$Outbound>;

/** @internal */
export const MixedUnionTypes$outboundSchema: z.ZodType<
  MixedUnionTypes$Outbound,
  z.ZodTypeDef,
  MixedUnionTypes
> = z.union([Bike$outboundSchema, z.array(Bike$outboundSchema)]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MixedUnionTypes$ {
  /** @deprecated use `MixedUnionTypes$inboundSchema` instead. */
  export const inboundSchema = MixedUnionTypes$inboundSchema;
  /** @deprecated use `MixedUnionTypes$outboundSchema` instead. */
  export const outboundSchema = MixedUnionTypes$outboundSchema;
  /** @deprecated use `MixedUnionTypes$Outbound` instead. */
  export type Outbound = MixedUnionTypes$Outbound;
}

export function mixedUnionTypesToJSON(
  mixedUnionTypes: MixedUnionTypes,
): string {
  return JSON.stringify(MixedUnionTypes$outboundSchema.parse(mixedUnionTypes));
}

export function mixedUnionTypesFromJSON(
  jsonString: string,
): SafeParseResult<MixedUnionTypes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MixedUnionTypes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MixedUnionTypes' from JSON`,
  );
}
