/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Enum, Enum$inboundSchema, Enum$outboundSchema } from "./enum.js";

export type NestedEnumArray = {
  enums: Array<Enum>;
  tags: string;
};

/** @internal */
export const NestedEnumArray$inboundSchema: z.ZodType<
  NestedEnumArray,
  z.ZodTypeDef,
  unknown
> = z.object({
  enums: z.array(Enum$inboundSchema),
  tags: z.string(),
});

/** @internal */
export type NestedEnumArray$Outbound = {
  enums: Array<string>;
  tags: string;
};

/** @internal */
export const NestedEnumArray$outboundSchema: z.ZodType<
  NestedEnumArray$Outbound,
  z.ZodTypeDef,
  NestedEnumArray
> = z.object({
  enums: z.array(Enum$outboundSchema),
  tags: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NestedEnumArray$ {
  /** @deprecated use `NestedEnumArray$inboundSchema` instead. */
  export const inboundSchema = NestedEnumArray$inboundSchema;
  /** @deprecated use `NestedEnumArray$outboundSchema` instead. */
  export const outboundSchema = NestedEnumArray$outboundSchema;
  /** @deprecated use `NestedEnumArray$Outbound` instead. */
  export type Outbound = NestedEnumArray$Outbound;
}
