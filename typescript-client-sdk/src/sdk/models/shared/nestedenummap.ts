/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Enum, Enum$inboundSchema, Enum$outboundSchema } from "./enum.js";

export type NestedEnumMap = {
  enums: { [k: string]: Enum };
};

/** @internal */
export const NestedEnumMap$inboundSchema: z.ZodType<
  NestedEnumMap,
  z.ZodTypeDef,
  unknown
> = z.object({
  enums: z.record(Enum$inboundSchema),
});

/** @internal */
export type NestedEnumMap$Outbound = {
  enums: { [k: string]: string };
};

/** @internal */
export const NestedEnumMap$outboundSchema: z.ZodType<
  NestedEnumMap$Outbound,
  z.ZodTypeDef,
  NestedEnumMap
> = z.object({
  enums: z.record(Enum$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NestedEnumMap$ {
  /** @deprecated use `NestedEnumMap$inboundSchema` instead. */
  export const inboundSchema = NestedEnumMap$inboundSchema;
  /** @deprecated use `NestedEnumMap$outboundSchema` instead. */
  export const outboundSchema = NestedEnumMap$outboundSchema;
  /** @deprecated use `NestedEnumMap$Outbound` instead. */
  export type Outbound = NestedEnumMap$Outbound;
}

export function nestedEnumMapToJSON(nestedEnumMap: NestedEnumMap): string {
  return JSON.stringify(NestedEnumMap$outboundSchema.parse(nestedEnumMap));
}

export function nestedEnumMapFromJSON(
  jsonString: string,
): SafeParseResult<NestedEnumMap, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NestedEnumMap$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NestedEnumMap' from JSON`,
  );
}
