/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { Enum, Enum$inboundSchema, Enum$outboundSchema } from "./enum.js";
import * as z from "zod";

export type NestedEnumMap = {
    enums: { [k: string]: Enum };
};

/** @internal */
export const NestedEnumMap$inboundSchema: z.ZodType<NestedEnumMap, z.ZodTypeDef, unknown> =
    z.object({
        enums: z.record(Enum$inboundSchema),
    });

/** @internal */
export type NestedEnumMap$Outbound = {
    enums: { [k: string]: string };
};

/** @internal */
export const NestedEnumMap$outboundSchema: z.ZodType<
    NestedEnumMap$Outbound,
    z.ZodTypeDef,
    NestedEnumMap
> = z.object({
    enums: z.record(Enum$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NestedEnumMap$ {
    /** @deprecated use `NestedEnumMap$inboundSchema` instead. */
    export const inboundSchema = NestedEnumMap$inboundSchema;
    /** @deprecated use `NestedEnumMap$outboundSchema` instead. */
    export const outboundSchema = NestedEnumMap$outboundSchema;
    /** @deprecated use `NestedEnumMap$Outbound` instead. */
    export type Outbound = NestedEnumMap$Outbound;
}
