/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { TypedObject1, TypedObject1$ } from "./typedobject1";
import { TypedObject2, TypedObject2$ } from "./typedobject2";
import * as z from "zod";

export type NullableOneOfTwo = TypedObject1 | TypedObject2;

export type OneOfOne = TypedObject1;

export type NullableOneOfRefInObject = {
    nullableOneOfOne: TypedObject1 | null;
    nullableOneOfTwo: TypedObject1 | TypedObject2 | null;
    oneOfOne: TypedObject1;
};

/** @internal */
export namespace NullableOneOfTwo$ {
    export const inboundSchema: z.ZodType<NullableOneOfTwo, z.ZodTypeDef, unknown> = z.union([
        TypedObject1$.inboundSchema,
        TypedObject2$.inboundSchema,
    ]);

    export type Outbound = TypedObject1$.Outbound | TypedObject2$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NullableOneOfTwo> = z.union([
        TypedObject1$.outboundSchema,
        TypedObject2$.outboundSchema,
    ]);
}

/** @internal */
export namespace OneOfOne$ {
    export const inboundSchema: z.ZodType<OneOfOne, z.ZodTypeDef, unknown> =
        TypedObject1$.inboundSchema;

    export type Outbound = TypedObject1$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OneOfOne> =
        TypedObject1$.outboundSchema;
}

/** @internal */
export namespace NullableOneOfRefInObject$ {
    export const inboundSchema: z.ZodType<NullableOneOfRefInObject, z.ZodTypeDef, unknown> = z
        .object({
            NullableOneOfOne: z.nullable(TypedObject1$.inboundSchema),
            NullableOneOfTwo: z.nullable(
                z.union([TypedObject1$.inboundSchema, TypedObject2$.inboundSchema])
            ),
            OneOfOne: TypedObject1$.inboundSchema,
        })
        .transform((v) => {
            return {
                nullableOneOfOne: v.NullableOneOfOne,
                nullableOneOfTwo: v.NullableOneOfTwo,
                oneOfOne: v.OneOfOne,
            };
        });

    export type Outbound = {
        NullableOneOfOne: TypedObject1$.Outbound | null;
        NullableOneOfTwo: TypedObject1$.Outbound | TypedObject2$.Outbound | null;
        OneOfOne: TypedObject1$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NullableOneOfRefInObject> = z
        .object({
            nullableOneOfOne: z.nullable(TypedObject1$.outboundSchema),
            nullableOneOfTwo: z.nullable(
                z.union([TypedObject1$.outboundSchema, TypedObject2$.outboundSchema])
            ),
            oneOfOne: TypedObject1$.outboundSchema,
        })
        .transform((v) => {
            return {
                NullableOneOfOne: v.nullableOneOfOne,
                NullableOneOfTwo: v.nullableOneOfTwo,
                OneOfOne: v.oneOfOne,
            };
        });
}
