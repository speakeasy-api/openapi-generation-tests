/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import {
    TypedObject1,
    TypedObject1$inboundSchema,
    TypedObject1$Outbound,
    TypedObject1$outboundSchema,
} from "./typedobject1.js";
import {
    TypedObject2,
    TypedObject2$inboundSchema,
    TypedObject2$Outbound,
    TypedObject2$outboundSchema,
} from "./typedobject2.js";
import * as z from "zod";

export type NullableOneOfTwo = TypedObject1 | TypedObject2;

export type OneOfOne = TypedObject1;

export type NullableOneOfRefInObject = {
    nullableOneOfOne: TypedObject1 | null;
    nullableOneOfTwo: TypedObject1 | TypedObject2 | null;
    oneOfOne: TypedObject1;
};

/** @internal */
export const NullableOneOfTwo$inboundSchema: z.ZodType<NullableOneOfTwo, z.ZodTypeDef, unknown> =
    z.union([TypedObject1$inboundSchema, TypedObject2$inboundSchema]);

/** @internal */
export type NullableOneOfTwo$Outbound = TypedObject1$Outbound | TypedObject2$Outbound;

/** @internal */
export const NullableOneOfTwo$outboundSchema: z.ZodType<
    NullableOneOfTwo$Outbound,
    z.ZodTypeDef,
    NullableOneOfTwo
> = z.union([TypedObject1$outboundSchema, TypedObject2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableOneOfTwo$ {
    /** @deprecated use `NullableOneOfTwo$inboundSchema` instead. */
    export const inboundSchema = NullableOneOfTwo$inboundSchema;
    /** @deprecated use `NullableOneOfTwo$outboundSchema` instead. */
    export const outboundSchema = NullableOneOfTwo$outboundSchema;
    /** @deprecated use `NullableOneOfTwo$Outbound` instead. */
    export type Outbound = NullableOneOfTwo$Outbound;
}

/** @internal */
export const OneOfOne$inboundSchema: z.ZodType<OneOfOne, z.ZodTypeDef, unknown> =
    TypedObject1$inboundSchema;

/** @internal */
export type OneOfOne$Outbound = TypedObject1$Outbound;

/** @internal */
export const OneOfOne$outboundSchema: z.ZodType<OneOfOne$Outbound, z.ZodTypeDef, OneOfOne> =
    TypedObject1$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OneOfOne$ {
    /** @deprecated use `OneOfOne$inboundSchema` instead. */
    export const inboundSchema = OneOfOne$inboundSchema;
    /** @deprecated use `OneOfOne$outboundSchema` instead. */
    export const outboundSchema = OneOfOne$outboundSchema;
    /** @deprecated use `OneOfOne$Outbound` instead. */
    export type Outbound = OneOfOne$Outbound;
}

/** @internal */
export const NullableOneOfRefInObject$inboundSchema: z.ZodType<
    NullableOneOfRefInObject,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        NullableOneOfOne: z.nullable(TypedObject1$inboundSchema),
        NullableOneOfTwo: z.nullable(
            z.union([TypedObject1$inboundSchema, TypedObject2$inboundSchema])
        ),
        OneOfOne: TypedObject1$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            NullableOneOfOne: "nullableOneOfOne",
            NullableOneOfTwo: "nullableOneOfTwo",
            OneOfOne: "oneOfOne",
        });
    });

/** @internal */
export type NullableOneOfRefInObject$Outbound = {
    NullableOneOfOne: TypedObject1$Outbound | null;
    NullableOneOfTwo: TypedObject1$Outbound | TypedObject2$Outbound | null;
    OneOfOne: TypedObject1$Outbound;
};

/** @internal */
export const NullableOneOfRefInObject$outboundSchema: z.ZodType<
    NullableOneOfRefInObject$Outbound,
    z.ZodTypeDef,
    NullableOneOfRefInObject
> = z
    .object({
        nullableOneOfOne: z.nullable(TypedObject1$outboundSchema),
        nullableOneOfTwo: z.nullable(
            z.union([TypedObject1$outboundSchema, TypedObject2$outboundSchema])
        ),
        oneOfOne: TypedObject1$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            nullableOneOfOne: "NullableOneOfOne",
            nullableOneOfTwo: "NullableOneOfTwo",
            oneOfOne: "OneOfOne",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableOneOfRefInObject$ {
    /** @deprecated use `NullableOneOfRefInObject$inboundSchema` instead. */
    export const inboundSchema = NullableOneOfRefInObject$inboundSchema;
    /** @deprecated use `NullableOneOfRefInObject$outboundSchema` instead. */
    export const outboundSchema = NullableOneOfRefInObject$outboundSchema;
    /** @deprecated use `NullableOneOfRefInObject$Outbound` instead. */
    export type Outbound = NullableOneOfRefInObject$Outbound;
}
