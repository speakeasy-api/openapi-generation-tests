/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as z from "zod";

export type NullableOneOfTypeInObjectNullableOneOfTwo = boolean | number;

export type NullableOneOfTypeInObject = {
    nullableOneOfOne: boolean | null;
    nullableOneOfTwo: boolean | number | null;
    oneOfOne: boolean;
};

/** @internal */
export namespace NullableOneOfTypeInObjectNullableOneOfTwo$ {
    export const inboundSchema: z.ZodType<
        NullableOneOfTypeInObjectNullableOneOfTwo,
        z.ZodTypeDef,
        unknown
    > = z.union([z.boolean(), z.number().int()]);

    export type Outbound = boolean | number;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NullableOneOfTypeInObjectNullableOneOfTwo
    > = z.union([z.boolean(), z.number().int()]);
}

/** @internal */
export namespace NullableOneOfTypeInObject$ {
    export const inboundSchema: z.ZodType<NullableOneOfTypeInObject, z.ZodTypeDef, unknown> = z
        .object({
            NullableOneOfOne: z.nullable(z.boolean()),
            NullableOneOfTwo: z.nullable(z.union([z.boolean(), z.number().int()])),
            OneOfOne: z.boolean(),
        })
        .transform((v) => {
            return remap$(v, {
                NullableOneOfOne: "nullableOneOfOne",
                NullableOneOfTwo: "nullableOneOfTwo",
                OneOfOne: "oneOfOne",
            });
        });

    export type Outbound = {
        NullableOneOfOne: boolean | null;
        NullableOneOfTwo: boolean | number | null;
        OneOfOne: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NullableOneOfTypeInObject> = z
        .object({
            nullableOneOfOne: z.nullable(z.boolean()),
            nullableOneOfTwo: z.nullable(z.union([z.boolean(), z.number().int()])),
            oneOfOne: z.boolean(),
        })
        .transform((v) => {
            return remap$(v, {
                nullableOneOfOne: "NullableOneOfOne",
                nullableOneOfTwo: "NullableOneOfTwo",
                oneOfOne: "OneOfOne",
            });
        });
}
