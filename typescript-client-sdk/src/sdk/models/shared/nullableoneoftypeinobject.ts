/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type NullableOneOfTypeInObjectNullableOneOfTwo = boolean | number;

export type NullableOneOfTypeInObject = {
    nullableOneOfOne: boolean | null;
    nullableOneOfTwo: boolean | number | null;
    oneOfOne: boolean;
};

/** @internal */
export const NullableOneOfTypeInObjectNullableOneOfTwo$inboundSchema: z.ZodType<
    NullableOneOfTypeInObjectNullableOneOfTwo,
    z.ZodTypeDef,
    unknown
> = z.union([z.boolean(), z.number().int()]);

/** @internal */
export type NullableOneOfTypeInObjectNullableOneOfTwo$Outbound = boolean | number;

/** @internal */
export const NullableOneOfTypeInObjectNullableOneOfTwo$outboundSchema: z.ZodType<
    NullableOneOfTypeInObjectNullableOneOfTwo$Outbound,
    z.ZodTypeDef,
    NullableOneOfTypeInObjectNullableOneOfTwo
> = z.union([z.boolean(), z.number().int()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableOneOfTypeInObjectNullableOneOfTwo$ {
    /** @deprecated use `NullableOneOfTypeInObjectNullableOneOfTwo$inboundSchema` instead. */
    export const inboundSchema = NullableOneOfTypeInObjectNullableOneOfTwo$inboundSchema;
    /** @deprecated use `NullableOneOfTypeInObjectNullableOneOfTwo$outboundSchema` instead. */
    export const outboundSchema = NullableOneOfTypeInObjectNullableOneOfTwo$outboundSchema;
    /** @deprecated use `NullableOneOfTypeInObjectNullableOneOfTwo$Outbound` instead. */
    export type Outbound = NullableOneOfTypeInObjectNullableOneOfTwo$Outbound;
}

/** @internal */
export const NullableOneOfTypeInObject$inboundSchema: z.ZodType<
    NullableOneOfTypeInObject,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        NullableOneOfOne: z.nullable(z.boolean()),
        NullableOneOfTwo: z.nullable(z.union([z.boolean(), z.number().int()])),
        OneOfOne: z.boolean(),
    })
    .transform((v) => {
        return remap$(v, {
            NullableOneOfOne: "nullableOneOfOne",
            NullableOneOfTwo: "nullableOneOfTwo",
            OneOfOne: "oneOfOne",
        });
    });

/** @internal */
export type NullableOneOfTypeInObject$Outbound = {
    NullableOneOfOne: boolean | null;
    NullableOneOfTwo: boolean | number | null;
    OneOfOne: boolean;
};

/** @internal */
export const NullableOneOfTypeInObject$outboundSchema: z.ZodType<
    NullableOneOfTypeInObject$Outbound,
    z.ZodTypeDef,
    NullableOneOfTypeInObject
> = z
    .object({
        nullableOneOfOne: z.nullable(z.boolean()),
        nullableOneOfTwo: z.nullable(z.union([z.boolean(), z.number().int()])),
        oneOfOne: z.boolean(),
    })
    .transform((v) => {
        return remap$(v, {
            nullableOneOfOne: "NullableOneOfOne",
            nullableOneOfTwo: "NullableOneOfTwo",
            oneOfOne: "OneOfOne",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableOneOfTypeInObject$ {
    /** @deprecated use `NullableOneOfTypeInObject$inboundSchema` instead. */
    export const inboundSchema = NullableOneOfTypeInObject$inboundSchema;
    /** @deprecated use `NullableOneOfTypeInObject$outboundSchema` instead. */
    export const outboundSchema = NullableOneOfTypeInObject$outboundSchema;
    /** @deprecated use `NullableOneOfTypeInObject$Outbound` instead. */
    export type Outbound = NullableOneOfTypeInObject$Outbound;
}
