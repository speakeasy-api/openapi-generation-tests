/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NullableOneOfTypeInObjectNullableOneOfTwo = boolean | number;

export type NullableOneOfTypeInObject = {
  nullableOneOfOne: boolean | null;
  nullableOneOfTwo: boolean | number | null;
  oneOfOne: boolean;
};

/** @internal */
export const NullableOneOfTypeInObjectNullableOneOfTwo$inboundSchema: z.ZodType<
  NullableOneOfTypeInObjectNullableOneOfTwo,
  z.ZodTypeDef,
  unknown
> = z.union([z.boolean(), z.number().int()]);

/** @internal */
export type NullableOneOfTypeInObjectNullableOneOfTwo$Outbound =
  | boolean
  | number;

/** @internal */
export const NullableOneOfTypeInObjectNullableOneOfTwo$outboundSchema:
  z.ZodType<
    NullableOneOfTypeInObjectNullableOneOfTwo$Outbound,
    z.ZodTypeDef,
    NullableOneOfTypeInObjectNullableOneOfTwo
  > = z.union([z.boolean(), z.number().int()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableOneOfTypeInObjectNullableOneOfTwo$ {
  /** @deprecated use `NullableOneOfTypeInObjectNullableOneOfTwo$inboundSchema` instead. */
  export const inboundSchema =
    NullableOneOfTypeInObjectNullableOneOfTwo$inboundSchema;
  /** @deprecated use `NullableOneOfTypeInObjectNullableOneOfTwo$outboundSchema` instead. */
  export const outboundSchema =
    NullableOneOfTypeInObjectNullableOneOfTwo$outboundSchema;
  /** @deprecated use `NullableOneOfTypeInObjectNullableOneOfTwo$Outbound` instead. */
  export type Outbound = NullableOneOfTypeInObjectNullableOneOfTwo$Outbound;
}

export function nullableOneOfTypeInObjectNullableOneOfTwoToJSON(
  nullableOneOfTypeInObjectNullableOneOfTwo:
    NullableOneOfTypeInObjectNullableOneOfTwo,
): string {
  return JSON.stringify(
    NullableOneOfTypeInObjectNullableOneOfTwo$outboundSchema.parse(
      nullableOneOfTypeInObjectNullableOneOfTwo,
    ),
  );
}

export function nullableOneOfTypeInObjectNullableOneOfTwoFromJSON(
  jsonString: string,
): SafeParseResult<
  NullableOneOfTypeInObjectNullableOneOfTwo,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NullableOneOfTypeInObjectNullableOneOfTwo$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'NullableOneOfTypeInObjectNullableOneOfTwo' from JSON`,
  );
}

/** @internal */
export const NullableOneOfTypeInObject$inboundSchema: z.ZodType<
  NullableOneOfTypeInObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  NullableOneOfOne: z.nullable(z.boolean()),
  NullableOneOfTwo: z.nullable(z.union([z.boolean(), z.number().int()])),
  OneOfOne: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "NullableOneOfOne": "nullableOneOfOne",
    "NullableOneOfTwo": "nullableOneOfTwo",
    "OneOfOne": "oneOfOne",
  });
});

/** @internal */
export type NullableOneOfTypeInObject$Outbound = {
  NullableOneOfOne: boolean | null;
  NullableOneOfTwo: boolean | number | null;
  OneOfOne: boolean;
};

/** @internal */
export const NullableOneOfTypeInObject$outboundSchema: z.ZodType<
  NullableOneOfTypeInObject$Outbound,
  z.ZodTypeDef,
  NullableOneOfTypeInObject
> = z.object({
  nullableOneOfOne: z.nullable(z.boolean()),
  nullableOneOfTwo: z.nullable(z.union([z.boolean(), z.number().int()])),
  oneOfOne: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    nullableOneOfOne: "NullableOneOfOne",
    nullableOneOfTwo: "NullableOneOfTwo",
    oneOfOne: "OneOfOne",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NullableOneOfTypeInObject$ {
  /** @deprecated use `NullableOneOfTypeInObject$inboundSchema` instead. */
  export const inboundSchema = NullableOneOfTypeInObject$inboundSchema;
  /** @deprecated use `NullableOneOfTypeInObject$outboundSchema` instead. */
  export const outboundSchema = NullableOneOfTypeInObject$outboundSchema;
  /** @deprecated use `NullableOneOfTypeInObject$Outbound` instead. */
  export type Outbound = NullableOneOfTypeInObject$Outbound;
}

export function nullableOneOfTypeInObjectToJSON(
  nullableOneOfTypeInObject: NullableOneOfTypeInObject,
): string {
  return JSON.stringify(
    NullableOneOfTypeInObject$outboundSchema.parse(nullableOneOfTypeInObject),
  );
}

export function nullableOneOfTypeInObjectFromJSON(
  jsonString: string,
): SafeParseResult<NullableOneOfTypeInObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NullableOneOfTypeInObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NullableOneOfTypeInObject' from JSON`,
  );
}
