/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types/decimal.js";
import * as z from "zod";

export type NumericUnion = number | number | bigint | Decimal$ | number;

/** @internal */
export const NumericUnion$inboundSchema: z.ZodType<NumericUnion, z.ZodTypeDef, unknown> = z.union([
    z.number().int(),
    z.number(),
    z.number().transform((v) => BigInt(v)),
    z.string().transform((v) => new Decimal$(v)),
]);

/** @internal */
export type NumericUnion$Outbound = number | number | number | string;

/** @internal */
export const NumericUnion$outboundSchema: z.ZodType<
    NumericUnion$Outbound,
    z.ZodTypeDef,
    NumericUnion
> = z.union([
    z.number().int(),
    z.number(),
    z.bigint().transform((v) => Number(v)),
    z.union([z.instanceof(Decimal$), z.number()]).transform((v) => `${v}`),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NumericUnion$ {
    /** @deprecated use `NumericUnion$inboundSchema` instead. */
    export const inboundSchema = NumericUnion$inboundSchema;
    /** @deprecated use `NumericUnion$outboundSchema` instead. */
    export const outboundSchema = NumericUnion$outboundSchema;
    /** @deprecated use `NumericUnion$Outbound` instead. */
    export type Outbound = NumericUnion$Outbound;
}
