/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types/decimal.js";
import * as z from "zod";

export type NumericUnion = number | number | bigint | Decimal$ | number;

/** @internal */
export namespace NumericUnion$ {
    export const inboundSchema: z.ZodType<NumericUnion, z.ZodTypeDef, unknown> = z.union([
        z.number().int(),
        z.number(),
        z.number().transform((v) => BigInt(v)),
        z.string().transform((v) => new Decimal$(v)),
    ]);

    export type Outbound = number | number | number | string;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NumericUnion> = z.union([
        z.number().int(),
        z.number(),
        z.bigint().transform((v) => Number(v)),
        z.union([z.instanceof(Decimal$), z.number()]).transform((v) => `${v}`),
    ]);
}
