/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NumericUnion = number | number | bigint | Decimal$ | number;

/** @internal */
export const NumericUnion$inboundSchema: z.ZodType<
  NumericUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.number().int(),
  z.number(),
  z.number().transform(v => BigInt(v)),
  z.string().transform(v => new Decimal$(v)),
]);

/** @internal */
export type NumericUnion$Outbound = number | number | number | string;

/** @internal */
export const NumericUnion$outboundSchema: z.ZodType<
  NumericUnion$Outbound,
  z.ZodTypeDef,
  NumericUnion
> = z.union([
  z.number().int(),
  z.number(),
  z.bigint().transform(v => Number(v)),
  z.union([z.instanceof(Decimal$), z.number()]).transform(v => `${v}`),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NumericUnion$ {
  /** @deprecated use `NumericUnion$inboundSchema` instead. */
  export const inboundSchema = NumericUnion$inboundSchema;
  /** @deprecated use `NumericUnion$outboundSchema` instead. */
  export const outboundSchema = NumericUnion$outboundSchema;
  /** @deprecated use `NumericUnion$Outbound` instead. */
  export type Outbound = NumericUnion$Outbound;
}

export function numericUnionToJSON(numericUnion: NumericUnion): string {
  return JSON.stringify(NumericUnion$outboundSchema.parse(numericUnion));
}

export function numericUnionFromJSON(
  jsonString: string,
): SafeParseResult<NumericUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NumericUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NumericUnion' from JSON`,
  );
}
