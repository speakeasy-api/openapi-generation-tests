/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type ObjectCircularReferenceObject = {
  circular?: ObjectCircularReferenceObject | undefined;
};

/** @internal */
export const ObjectCircularReferenceObject$inboundSchema: z.ZodType<
  ObjectCircularReferenceObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  circular: z.lazy(() => ObjectCircularReferenceObject$inboundSchema)
    .optional(),
});

/** @internal */
export type ObjectCircularReferenceObject$Outbound = {
  circular?: ObjectCircularReferenceObject$Outbound | undefined;
};

/** @internal */
export const ObjectCircularReferenceObject$outboundSchema: z.ZodType<
  ObjectCircularReferenceObject$Outbound,
  z.ZodTypeDef,
  ObjectCircularReferenceObject
> = z.object({
  circular: z.lazy(() => ObjectCircularReferenceObject$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ObjectCircularReferenceObject$ {
  /** @deprecated use `ObjectCircularReferenceObject$inboundSchema` instead. */
  export const inboundSchema = ObjectCircularReferenceObject$inboundSchema;
  /** @deprecated use `ObjectCircularReferenceObject$outboundSchema` instead. */
  export const outboundSchema = ObjectCircularReferenceObject$outboundSchema;
  /** @deprecated use `ObjectCircularReferenceObject$Outbound` instead. */
  export type Outbound = ObjectCircularReferenceObject$Outbound;
}
