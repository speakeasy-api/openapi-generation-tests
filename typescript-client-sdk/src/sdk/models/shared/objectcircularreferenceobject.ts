/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type ObjectCircularReferenceObject = {
    circular?: ObjectCircularReferenceObject | undefined;
};

/** @internal */
export namespace ObjectCircularReferenceObject$ {
    export const inboundSchema: z.ZodType<ObjectCircularReferenceObject, z.ZodTypeDef, unknown> = z
        .object({
            circular: z.lazy(() => ObjectCircularReferenceObject$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.circular === undefined ? null : { circular: v.circular }),
            };
        });

    export type Outbound = {
        circular?: ObjectCircularReferenceObject$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ObjectCircularReferenceObject> =
        z
            .object({
                circular: z.lazy(() => ObjectCircularReferenceObject$.outboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    ...(v.circular === undefined ? null : { circular: v.circular }),
                };
            });
}
