/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type ObjWithAnyAdditionalProperties = {
    normalField?: string | undefined;
    additionalProperties: Record<string, any>;
};

/** @internal */
export namespace ObjWithAnyAdditionalProperties$ {
    export type Inbound = {
        [additionalProperties: string]: unknown;

        normalField?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ObjWithAnyAdditionalProperties, z.ZodTypeDef, Inbound> = z
        .object({
            normalField: z.string().optional(),
        })
        .catchall(z.any())
        .transform((v) => {
            const { normalField, ...additionalProperties } = v;

            return {
                ...(v.normalField === undefined ? null : { normalField: v.normalField }),
                additionalProperties,
            };
        });

    export type Outbound = {
        normalField?: string | undefined;
        [additionalProperties: string]: unknown;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ObjWithAnyAdditionalProperties> =
        z
            .object({
                additionalProperties: z.record(z.any()),

                normalField: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...v.additionalProperties,
                    ...(v.normalField === undefined ? null : { normalField: v.normalField }),
                };
            });
}
