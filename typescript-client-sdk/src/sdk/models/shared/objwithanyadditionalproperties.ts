/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import { collectExtraKeys as collectExtraKeys$ } from "../../../lib/schemas";
import * as z from "zod";

export type ObjWithAnyAdditionalProperties = {
    normalField?: string | undefined;
    additionalProperties: { [k: string]: any };
};

/** @internal */
export namespace ObjWithAnyAdditionalProperties$ {
    export const inboundSchema: z.ZodType<ObjWithAnyAdditionalProperties, z.ZodTypeDef, unknown> =
        collectExtraKeys$(
            z
                .object({
                    normalField: z.string().optional(),
                })
                .catchall(z.any()),
            "additionalProperties"
        );

    export type Outbound = {
        normalField?: string | undefined;
        [additionalProperties: string]: unknown;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ObjWithAnyAdditionalProperties> =
        z
            .object({
                additionalProperties: z.record(z.any()),

                normalField: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...v.additionalProperties,
                    ...remap$(v, {
                        additionalProperties: null,
                    }),
                };
            });
}
