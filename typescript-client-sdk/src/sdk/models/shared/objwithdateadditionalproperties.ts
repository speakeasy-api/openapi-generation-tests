/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RFCDate } from "../../../sdk/types";
import * as z from "zod";

export type ObjWithDateAdditionalProperties = {
    normalField: string;
    additionalProperties: Record<string, RFCDate>;
};

/** @internal */
export namespace ObjWithDateAdditionalProperties$ {
    export type Inbound = {
        [additionalProperties: string]: unknown;

        normalField: string;
    };

    export const inboundSchema: z.ZodType<ObjWithDateAdditionalProperties, z.ZodTypeDef, Inbound> =
        z
            .object({
                normalField: z.string(),
            })
            .catchall(z.string().transform((v) => new RFCDate(v)))
            .transform((v) => {
                const { normalField, ...additionalProperties } = v;

                return {
                    normalField: v.normalField,
                    additionalProperties,
                };
            });

    export type Outbound = {
        normalField: string;
        [additionalProperties: string]: unknown;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ObjWithDateAdditionalProperties
    > = z
        .object({
            additionalProperties: z.record(z.instanceof(RFCDate).transform((v) => v.toString())),

            normalField: z.string(),
        })
        .transform((v) => {
            return {
                ...v.additionalProperties,
                normalField: v.normalField,
            };
        });
}
