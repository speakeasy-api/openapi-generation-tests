/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$ } from "../../../lib/schemas.js";
import { RFCDate } from "../../types/rfcdate.js";
import * as z from "zod";

export type ObjWithDateAdditionalProperties = {
    normalField: string;
    additionalProperties: { [k: string]: RFCDate };
};

/** @internal */
export namespace ObjWithDateAdditionalProperties$ {
    export const inboundSchema: z.ZodType<ObjWithDateAdditionalProperties, z.ZodTypeDef, unknown> =
        collectExtraKeys$(
            z
                .object({
                    normalField: z.string(),
                })
                .catchall(z.string().transform((v) => new RFCDate(v))),
            "additionalProperties"
        );

    export type Outbound = {
        normalField: string;
        [additionalProperties: string]: unknown;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ObjWithDateAdditionalProperties
    > = z
        .object({
            additionalProperties: z.record(z.instanceof(RFCDate).transform((v) => v.toString())),

            normalField: z.string(),
        })
        .transform((v) => {
            return {
                ...v.additionalProperties,
                ...remap$(v, {
                    additionalProperties: null,
                }),
            };
        });
}
