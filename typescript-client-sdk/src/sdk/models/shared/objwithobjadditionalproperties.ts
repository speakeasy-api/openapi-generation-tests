/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$ } from "../../../lib/schemas.js";
import { SimpleObject, SimpleObject$ } from "./simpleobject.js";
import * as z from "zod";

export type ObjWithObjAdditionalProperties = {
    additionalProperties: Array<number>;
    datetime: Date;
    additionalPropertiesT: { [k: string]: SimpleObject };
};

/** @internal */
export namespace ObjWithObjAdditionalProperties$ {
    export const inboundSchema: z.ZodType<ObjWithObjAdditionalProperties, z.ZodTypeDef, unknown> =
        collectExtraKeys$(
            z
                .object({
                    AdditionalProperties: z.array(z.number().int()),
                    datetime: z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v)),
                })
                .catchall(SimpleObject$.inboundSchema),
            "additionalPropertiesT"
        ).transform((v) => {
            return remap$(v, {
                AdditionalProperties: "additionalProperties",
            });
        });

    export type Outbound = {
        AdditionalProperties: Array<number>;
        datetime: string;
        [additionalProperties: string]: unknown;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ObjWithObjAdditionalProperties> =
        z
            .object({
                additionalProperties: z.array(z.number().int()),
                additionalPropertiesT: z.record(SimpleObject$.outboundSchema),

                datetime: z.date().transform((v) => v.toISOString()),
            })
            .transform((v) => {
                return {
                    ...v.additionalPropertiesT,
                    ...remap$(v, {
                        additionalProperties: "AdditionalProperties",
                        additionalPropertiesT: null,
                    }),
                };
            });
}
