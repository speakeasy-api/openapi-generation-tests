/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SimpleObject, SimpleObject$ } from "./simpleobject";
import * as z from "zod";

export type ObjWithObjAdditionalProperties = {
    additionalProperties: Array<number>;
    datetime: Date;
    additionalPropertiesT: Record<string, SimpleObject>;
};

/** @internal */
export namespace ObjWithObjAdditionalProperties$ {
    export type Inbound = {
        [additionalProperties: string]: unknown;

        AdditionalProperties: Array<number>;
        datetime: string;
    };

    export const inboundSchema: z.ZodType<ObjWithObjAdditionalProperties, z.ZodTypeDef, Inbound> = z
        .object({
            AdditionalProperties: z.array(z.number().int()),
            datetime: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
        })
        .catchall(SimpleObject$.inboundSchema)
        .transform((v) => {
            const { AdditionalProperties, datetime, ...additionalPropertiesT } = v;

            return {
                additionalProperties: v.AdditionalProperties,
                datetime: v.datetime,
                additionalPropertiesT,
            };
        });

    export type Outbound = {
        AdditionalProperties: Array<number>;
        datetime: string;
        [additionalProperties: string]: unknown;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ObjWithObjAdditionalProperties> =
        z
            .object({
                additionalProperties: z.array(z.number().int()),
                additionalPropertiesT: z.record(SimpleObject$.outboundSchema),

                datetime: z.date().transform((v) => v.toISOString()),
            })
            .transform((v) => {
                return {
                    ...v.additionalPropertiesT,
                    AdditionalProperties: v.additionalProperties,
                    datetime: v.datetime,
                };
            });
}
