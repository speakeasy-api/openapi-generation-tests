/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ObjWithOptionalProperties = {
  optInt?: number | undefined;
  optStr?: string | undefined;
};

/** @internal */
export const ObjWithOptionalProperties$inboundSchema: z.ZodType<
  ObjWithOptionalProperties,
  z.ZodTypeDef,
  unknown
> = z.object({
  optInt: z.number().int().optional(),
  optStr: z.string().optional(),
});

/** @internal */
export type ObjWithOptionalProperties$Outbound = {
  optInt?: number | undefined;
  optStr?: string | undefined;
};

/** @internal */
export const ObjWithOptionalProperties$outboundSchema: z.ZodType<
  ObjWithOptionalProperties$Outbound,
  z.ZodTypeDef,
  ObjWithOptionalProperties
> = z.object({
  optInt: z.number().int().optional(),
  optStr: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ObjWithOptionalProperties$ {
  /** @deprecated use `ObjWithOptionalProperties$inboundSchema` instead. */
  export const inboundSchema = ObjWithOptionalProperties$inboundSchema;
  /** @deprecated use `ObjWithOptionalProperties$outboundSchema` instead. */
  export const outboundSchema = ObjWithOptionalProperties$outboundSchema;
  /** @deprecated use `ObjWithOptionalProperties$Outbound` instead. */
  export type Outbound = ObjWithOptionalProperties$Outbound;
}

export function objWithOptionalPropertiesToJSON(
  objWithOptionalProperties: ObjWithOptionalProperties,
): string {
  return JSON.stringify(
    ObjWithOptionalProperties$outboundSchema.parse(objWithOptionalProperties),
  );
}

export function objWithOptionalPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<ObjWithOptionalProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ObjWithOptionalProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ObjWithOptionalProperties' from JSON`,
  );
}
