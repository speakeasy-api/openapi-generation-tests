/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type ObjWithStringAdditionalProperties = {
    normalField: string;
    additionalProperties: Record<string, string>;
};

/** @internal */
export namespace ObjWithStringAdditionalProperties$ {
    export type Inbound = {
        [additionalProperties: string]: unknown;

        normalField: string;
    };

    export const inboundSchema: z.ZodType<
        ObjWithStringAdditionalProperties,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            normalField: z.string(),
        })
        .catchall(z.string())
        .transform((v) => {
            const { normalField, ...additionalProperties } = v;

            return {
                normalField: v.normalField,
                additionalProperties,
            };
        });

    export type Outbound = {
        normalField: string;
        [additionalProperties: string]: unknown;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ObjWithStringAdditionalProperties
    > = z
        .object({
            additionalProperties: z.record(z.string()),

            normalField: z.string(),
        })
        .transform((v) => {
            return {
                ...v.additionalProperties,
                normalField: v.normalField,
            };
        });
}
