/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$, RFCDate } from "../../types";
import * as z from "zod";

export type ObjWithZeroValueComplexTypePtrs = {
    bigint?: bigint | undefined;
    bigintStr?: bigint | undefined;
    /**
     * A date property.
     */
    date?: RFCDate | undefined;
    /**
     * A date-time property.
     */
    dateTime?: Date | undefined;
    decimal?: Decimal$ | number | undefined;
};

/** @internal */
export namespace ObjWithZeroValueComplexTypePtrs$ {
    export type Inbound = {
        bigint?: number | undefined;
        bigintStr?: string | undefined;
        date?: string | undefined;
        dateTime?: string | undefined;
        decimal?: number | undefined;
    };

    export const inboundSchema: z.ZodType<ObjWithZeroValueComplexTypePtrs, z.ZodTypeDef, Inbound> =
        z
            .object({
                bigint: z
                    .number()
                    .transform((v) => BigInt(v))
                    .optional(),
                bigintStr: z
                    .string()
                    .transform((v) => BigInt(v))
                    .optional(),
                date: z
                    .string()
                    .transform((v) => new RFCDate(v))
                    .optional(),
                dateTime: z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
                    .optional(),
                decimal: z
                    .number()
                    .transform((v) => new Decimal$(v))
                    .optional(),
            })
            .transform((v) => {
                return {
                    ...(v.bigint === undefined ? null : { bigint: v.bigint }),
                    ...(v.bigintStr === undefined ? null : { bigintStr: v.bigintStr }),
                    ...(v.date === undefined ? null : { date: v.date }),
                    ...(v.dateTime === undefined ? null : { dateTime: v.dateTime }),
                    ...(v.decimal === undefined ? null : { decimal: v.decimal }),
                };
            });

    export type Outbound = {
        bigint?: number | undefined;
        bigintStr?: string | undefined;
        date?: string | undefined;
        dateTime?: string | undefined;
        decimal?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ObjWithZeroValueComplexTypePtrs
    > = z
        .object({
            bigint: z
                .bigint()
                .transform((v) => Number(v))
                .optional(),
            bigintStr: z
                .bigint()
                .transform((v) => `${v}`)
                .optional(),
            date: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
            dateTime: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            decimal: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.bigint === undefined ? null : { bigint: v.bigint }),
                ...(v.bigintStr === undefined ? null : { bigintStr: v.bigintStr }),
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.dateTime === undefined ? null : { dateTime: v.dateTime }),
                ...(v.decimal === undefined ? null : { decimal: v.decimal }),
            };
        });
}
