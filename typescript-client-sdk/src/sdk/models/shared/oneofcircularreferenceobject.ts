/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SimpleObject,
  SimpleObject$inboundSchema,
  SimpleObject$Outbound,
  SimpleObject$outboundSchema,
} from "./simpleobject.js";

export type Child = OneOfCircularReferenceObject | SimpleObject;

export type OneOfCircularReferenceObject = {
  child: OneOfCircularReferenceObject | SimpleObject;
};

/** @internal */
export const Child$inboundSchema: z.ZodType<Child, z.ZodTypeDef, unknown> = z
  .union([
    z.lazy(() => OneOfCircularReferenceObject$inboundSchema),
    SimpleObject$inboundSchema,
  ]);

/** @internal */
export type Child$Outbound =
  | OneOfCircularReferenceObject$Outbound
  | SimpleObject$Outbound;

/** @internal */
export const Child$outboundSchema: z.ZodType<
  Child$Outbound,
  z.ZodTypeDef,
  Child
> = z.union([
  z.lazy(() => OneOfCircularReferenceObject$outboundSchema),
  SimpleObject$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Child$ {
  /** @deprecated use `Child$inboundSchema` instead. */
  export const inboundSchema = Child$inboundSchema;
  /** @deprecated use `Child$outboundSchema` instead. */
  export const outboundSchema = Child$outboundSchema;
  /** @deprecated use `Child$Outbound` instead. */
  export type Outbound = Child$Outbound;
}

export function childToJSON(child: Child): string {
  return JSON.stringify(Child$outboundSchema.parse(child));
}

export function childFromJSON(
  jsonString: string,
): SafeParseResult<Child, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Child$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Child' from JSON`,
  );
}

/** @internal */
export const OneOfCircularReferenceObject$inboundSchema: z.ZodType<
  OneOfCircularReferenceObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  child: z.union([
    z.lazy(() => OneOfCircularReferenceObject$inboundSchema),
    SimpleObject$inboundSchema,
  ]),
});

/** @internal */
export type OneOfCircularReferenceObject$Outbound = {
  child: OneOfCircularReferenceObject$Outbound | SimpleObject$Outbound;
};

/** @internal */
export const OneOfCircularReferenceObject$outboundSchema: z.ZodType<
  OneOfCircularReferenceObject$Outbound,
  z.ZodTypeDef,
  OneOfCircularReferenceObject
> = z.object({
  child: z.union([
    z.lazy(() => OneOfCircularReferenceObject$outboundSchema),
    SimpleObject$outboundSchema,
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OneOfCircularReferenceObject$ {
  /** @deprecated use `OneOfCircularReferenceObject$inboundSchema` instead. */
  export const inboundSchema = OneOfCircularReferenceObject$inboundSchema;
  /** @deprecated use `OneOfCircularReferenceObject$outboundSchema` instead. */
  export const outboundSchema = OneOfCircularReferenceObject$outboundSchema;
  /** @deprecated use `OneOfCircularReferenceObject$Outbound` instead. */
  export type Outbound = OneOfCircularReferenceObject$Outbound;
}

export function oneOfCircularReferenceObjectToJSON(
  oneOfCircularReferenceObject: OneOfCircularReferenceObject,
): string {
  return JSON.stringify(
    OneOfCircularReferenceObject$outboundSchema.parse(
      oneOfCircularReferenceObject,
    ),
  );
}

export function oneOfCircularReferenceObjectFromJSON(
  jsonString: string,
): SafeParseResult<OneOfCircularReferenceObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OneOfCircularReferenceObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OneOfCircularReferenceObject' from JSON`,
  );
}
