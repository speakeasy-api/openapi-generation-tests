/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SimpleObject, SimpleObject$ } from "./simpleobject";
import * as z from "zod";

export type Child = OneOfCircularReferenceObject | SimpleObject;

export type OneOfCircularReferenceObject = {
    child: OneOfCircularReferenceObject | SimpleObject;
};

/** @internal */
export namespace Child$ {
    export const inboundSchema: z.ZodType<Child, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => OneOfCircularReferenceObject$.inboundSchema),
        SimpleObject$.inboundSchema,
    ]);

    export type Outbound = OneOfCircularReferenceObject$.Outbound | SimpleObject$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Child> = z.union([
        z.lazy(() => OneOfCircularReferenceObject$.outboundSchema),
        SimpleObject$.outboundSchema,
    ]);
}

/** @internal */
export namespace OneOfCircularReferenceObject$ {
    export const inboundSchema: z.ZodType<OneOfCircularReferenceObject, z.ZodTypeDef, unknown> = z
        .object({
            child: z.union([
                z.lazy(() => OneOfCircularReferenceObject$.inboundSchema),
                SimpleObject$.inboundSchema,
            ]),
        })
        .transform((v) => {
            return {
                child: v.child,
            };
        });

    export type Outbound = {
        child: OneOfCircularReferenceObject$.Outbound | SimpleObject$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OneOfCircularReferenceObject> = z
        .object({
            child: z.union([
                z.lazy(() => OneOfCircularReferenceObject$.outboundSchema),
                SimpleObject$.outboundSchema,
            ]),
        })
        .transform((v) => {
            return {
                child: v.child,
            };
        });
}
