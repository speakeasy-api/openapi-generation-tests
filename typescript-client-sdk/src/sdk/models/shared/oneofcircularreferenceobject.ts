/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    SimpleObject,
    SimpleObject$inboundSchema,
    SimpleObject$Outbound,
    SimpleObject$outboundSchema,
} from "./simpleobject.js";
import * as z from "zod";

export type Child = OneOfCircularReferenceObject | SimpleObject;

export type OneOfCircularReferenceObject = {
    child: OneOfCircularReferenceObject | SimpleObject;
};

/** @internal */
export const Child$inboundSchema: z.ZodType<Child, z.ZodTypeDef, unknown> = z.union([
    z.lazy(() => OneOfCircularReferenceObject$inboundSchema),
    SimpleObject$inboundSchema,
]);

/** @internal */
export type Child$Outbound = OneOfCircularReferenceObject$Outbound | SimpleObject$Outbound;

/** @internal */
export const Child$outboundSchema: z.ZodType<Child$Outbound, z.ZodTypeDef, Child> = z.union([
    z.lazy(() => OneOfCircularReferenceObject$outboundSchema),
    SimpleObject$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Child$ {
    /** @deprecated use `Child$inboundSchema` instead. */
    export const inboundSchema = Child$inboundSchema;
    /** @deprecated use `Child$outboundSchema` instead. */
    export const outboundSchema = Child$outboundSchema;
    /** @deprecated use `Child$Outbound` instead. */
    export type Outbound = Child$Outbound;
}

/** @internal */
export const OneOfCircularReferenceObject$inboundSchema: z.ZodType<
    OneOfCircularReferenceObject,
    z.ZodTypeDef,
    unknown
> = z.object({
    child: z.union([
        z.lazy(() => OneOfCircularReferenceObject$inboundSchema),
        SimpleObject$inboundSchema,
    ]),
});

/** @internal */
export type OneOfCircularReferenceObject$Outbound = {
    child: OneOfCircularReferenceObject$Outbound | SimpleObject$Outbound;
};

/** @internal */
export const OneOfCircularReferenceObject$outboundSchema: z.ZodType<
    OneOfCircularReferenceObject$Outbound,
    z.ZodTypeDef,
    OneOfCircularReferenceObject
> = z.object({
    child: z.union([
        z.lazy(() => OneOfCircularReferenceObject$outboundSchema),
        SimpleObject$outboundSchema,
    ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OneOfCircularReferenceObject$ {
    /** @deprecated use `OneOfCircularReferenceObject$inboundSchema` instead. */
    export const inboundSchema = OneOfCircularReferenceObject$inboundSchema;
    /** @deprecated use `OneOfCircularReferenceObject$outboundSchema` instead. */
    export const outboundSchema = OneOfCircularReferenceObject$outboundSchema;
    /** @deprecated use `OneOfCircularReferenceObject$Outbound` instead. */
    export type Outbound = OneOfCircularReferenceObject$Outbound;
}
