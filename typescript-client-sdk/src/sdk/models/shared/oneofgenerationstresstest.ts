/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OneOfFromArrayOfTypes = string | number;

export const OneOfGenerationStressTest2 = {
  Latest: "latest",
} as const;
export type OneOfGenerationStressTest2 = ClosedEnum<
  typeof OneOfGenerationStressTest2
>;

export type OneOfSameType = string | OneOfGenerationStressTest2;

export type OneOfGenerationStressTest = {
  any?: any | undefined;
  nullableAny?: any | null | undefined;
  oneOfFromArrayOfTypes: string | number | null;
  oneOfSameType: string | OneOfGenerationStressTest2 | null;
};

/** @internal */
export const OneOfFromArrayOfTypes$inboundSchema: z.ZodType<
  OneOfFromArrayOfTypes,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number().int()]);

/** @internal */
export type OneOfFromArrayOfTypes$Outbound = string | number;

/** @internal */
export const OneOfFromArrayOfTypes$outboundSchema: z.ZodType<
  OneOfFromArrayOfTypes$Outbound,
  z.ZodTypeDef,
  OneOfFromArrayOfTypes
> = z.union([z.string(), z.number().int()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OneOfFromArrayOfTypes$ {
  /** @deprecated use `OneOfFromArrayOfTypes$inboundSchema` instead. */
  export const inboundSchema = OneOfFromArrayOfTypes$inboundSchema;
  /** @deprecated use `OneOfFromArrayOfTypes$outboundSchema` instead. */
  export const outboundSchema = OneOfFromArrayOfTypes$outboundSchema;
  /** @deprecated use `OneOfFromArrayOfTypes$Outbound` instead. */
  export type Outbound = OneOfFromArrayOfTypes$Outbound;
}

export function oneOfFromArrayOfTypesToJSON(
  oneOfFromArrayOfTypes: OneOfFromArrayOfTypes,
): string {
  return JSON.stringify(
    OneOfFromArrayOfTypes$outboundSchema.parse(oneOfFromArrayOfTypes),
  );
}

export function oneOfFromArrayOfTypesFromJSON(
  jsonString: string,
): SafeParseResult<OneOfFromArrayOfTypes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OneOfFromArrayOfTypes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OneOfFromArrayOfTypes' from JSON`,
  );
}

/** @internal */
export const OneOfGenerationStressTest2$inboundSchema: z.ZodNativeEnum<
  typeof OneOfGenerationStressTest2
> = z.nativeEnum(OneOfGenerationStressTest2);

/** @internal */
export const OneOfGenerationStressTest2$outboundSchema: z.ZodNativeEnum<
  typeof OneOfGenerationStressTest2
> = OneOfGenerationStressTest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OneOfGenerationStressTest2$ {
  /** @deprecated use `OneOfGenerationStressTest2$inboundSchema` instead. */
  export const inboundSchema = OneOfGenerationStressTest2$inboundSchema;
  /** @deprecated use `OneOfGenerationStressTest2$outboundSchema` instead. */
  export const outboundSchema = OneOfGenerationStressTest2$outboundSchema;
}

/** @internal */
export const OneOfSameType$inboundSchema: z.ZodType<
  OneOfSameType,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), OneOfGenerationStressTest2$inboundSchema]);

/** @internal */
export type OneOfSameType$Outbound = string | string;

/** @internal */
export const OneOfSameType$outboundSchema: z.ZodType<
  OneOfSameType$Outbound,
  z.ZodTypeDef,
  OneOfSameType
> = z.union([z.string(), OneOfGenerationStressTest2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OneOfSameType$ {
  /** @deprecated use `OneOfSameType$inboundSchema` instead. */
  export const inboundSchema = OneOfSameType$inboundSchema;
  /** @deprecated use `OneOfSameType$outboundSchema` instead. */
  export const outboundSchema = OneOfSameType$outboundSchema;
  /** @deprecated use `OneOfSameType$Outbound` instead. */
  export type Outbound = OneOfSameType$Outbound;
}

export function oneOfSameTypeToJSON(oneOfSameType: OneOfSameType): string {
  return JSON.stringify(OneOfSameType$outboundSchema.parse(oneOfSameType));
}

export function oneOfSameTypeFromJSON(
  jsonString: string,
): SafeParseResult<OneOfSameType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OneOfSameType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OneOfSameType' from JSON`,
  );
}

/** @internal */
export const OneOfGenerationStressTest$inboundSchema: z.ZodType<
  OneOfGenerationStressTest,
  z.ZodTypeDef,
  unknown
> = z.object({
  any: z.any().optional(),
  nullableAny: z.nullable(z.any()).optional(),
  oneOfFromArrayOfTypes: z.nullable(z.union([z.string(), z.number().int()])),
  oneOfSameType: z.nullable(
    z.union([z.string(), OneOfGenerationStressTest2$inboundSchema]),
  ),
});

/** @internal */
export type OneOfGenerationStressTest$Outbound = {
  any?: any | undefined;
  nullableAny?: any | null | undefined;
  oneOfFromArrayOfTypes: string | number | null;
  oneOfSameType: string | string | null;
};

/** @internal */
export const OneOfGenerationStressTest$outboundSchema: z.ZodType<
  OneOfGenerationStressTest$Outbound,
  z.ZodTypeDef,
  OneOfGenerationStressTest
> = z.object({
  any: z.any().optional(),
  nullableAny: z.nullable(z.any()).optional(),
  oneOfFromArrayOfTypes: z.nullable(z.union([z.string(), z.number().int()])),
  oneOfSameType: z.nullable(
    z.union([z.string(), OneOfGenerationStressTest2$outboundSchema]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OneOfGenerationStressTest$ {
  /** @deprecated use `OneOfGenerationStressTest$inboundSchema` instead. */
  export const inboundSchema = OneOfGenerationStressTest$inboundSchema;
  /** @deprecated use `OneOfGenerationStressTest$outboundSchema` instead. */
  export const outboundSchema = OneOfGenerationStressTest$outboundSchema;
  /** @deprecated use `OneOfGenerationStressTest$Outbound` instead. */
  export type Outbound = OneOfGenerationStressTest$Outbound;
}

export function oneOfGenerationStressTestToJSON(
  oneOfGenerationStressTest: OneOfGenerationStressTest,
): string {
  return JSON.stringify(
    OneOfGenerationStressTest$outboundSchema.parse(oneOfGenerationStressTest),
  );
}

export function oneOfGenerationStressTestFromJSON(
  jsonString: string,
): SafeParseResult<OneOfGenerationStressTest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OneOfGenerationStressTest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OneOfGenerationStressTest' from JSON`,
  );
}
