/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export type OneOfFromArrayOfTypes = string | number;

export const Two = {
    Latest: "latest",
} as const;
export type Two = ClosedEnum<typeof Two>;

export type OneOfSameType = string | Two;

export type OneOfGenerationStressTest = {
    any?: any | undefined;
    nullableAny?: any | null | undefined;
    oneOfFromArrayOfTypes: string | number | null;
    oneOfSameType: string | Two | null;
};

/** @internal */
export const OneOfFromArrayOfTypes$inboundSchema: z.ZodType<
    OneOfFromArrayOfTypes,
    z.ZodTypeDef,
    unknown
> = z.union([z.string(), z.number().int()]);

/** @internal */
export type OneOfFromArrayOfTypes$Outbound = string | number;

/** @internal */
export const OneOfFromArrayOfTypes$outboundSchema: z.ZodType<
    OneOfFromArrayOfTypes$Outbound,
    z.ZodTypeDef,
    OneOfFromArrayOfTypes
> = z.union([z.string(), z.number().int()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OneOfFromArrayOfTypes$ {
    /** @deprecated use `OneOfFromArrayOfTypes$inboundSchema` instead. */
    export const inboundSchema = OneOfFromArrayOfTypes$inboundSchema;
    /** @deprecated use `OneOfFromArrayOfTypes$outboundSchema` instead. */
    export const outboundSchema = OneOfFromArrayOfTypes$outboundSchema;
    /** @deprecated use `OneOfFromArrayOfTypes$Outbound` instead. */
    export type Outbound = OneOfFromArrayOfTypes$Outbound;
}

/** @internal */
export const Two$inboundSchema: z.ZodNativeEnum<typeof Two> = z.nativeEnum(Two);

/** @internal */
export const Two$outboundSchema: z.ZodNativeEnum<typeof Two> = Two$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Two$ {
    /** @deprecated use `Two$inboundSchema` instead. */
    export const inboundSchema = Two$inboundSchema;
    /** @deprecated use `Two$outboundSchema` instead. */
    export const outboundSchema = Two$outboundSchema;
}

/** @internal */
export const OneOfSameType$inboundSchema: z.ZodType<OneOfSameType, z.ZodTypeDef, unknown> = z.union(
    [z.string(), Two$inboundSchema]
);

/** @internal */
export type OneOfSameType$Outbound = string | string;

/** @internal */
export const OneOfSameType$outboundSchema: z.ZodType<
    OneOfSameType$Outbound,
    z.ZodTypeDef,
    OneOfSameType
> = z.union([z.string(), Two$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OneOfSameType$ {
    /** @deprecated use `OneOfSameType$inboundSchema` instead. */
    export const inboundSchema = OneOfSameType$inboundSchema;
    /** @deprecated use `OneOfSameType$outboundSchema` instead. */
    export const outboundSchema = OneOfSameType$outboundSchema;
    /** @deprecated use `OneOfSameType$Outbound` instead. */
    export type Outbound = OneOfSameType$Outbound;
}

/** @internal */
export const OneOfGenerationStressTest$inboundSchema: z.ZodType<
    OneOfGenerationStressTest,
    z.ZodTypeDef,
    unknown
> = z.object({
    any: z.any().optional(),
    nullableAny: z.nullable(z.any()).optional(),
    oneOfFromArrayOfTypes: z.nullable(z.union([z.string(), z.number().int()])),
    oneOfSameType: z.nullable(z.union([z.string(), Two$inboundSchema])),
});

/** @internal */
export type OneOfGenerationStressTest$Outbound = {
    any?: any | undefined;
    nullableAny?: any | null | undefined;
    oneOfFromArrayOfTypes: string | number | null;
    oneOfSameType: string | string | null;
};

/** @internal */
export const OneOfGenerationStressTest$outboundSchema: z.ZodType<
    OneOfGenerationStressTest$Outbound,
    z.ZodTypeDef,
    OneOfGenerationStressTest
> = z.object({
    any: z.any().optional(),
    nullableAny: z.nullable(z.any()).optional(),
    oneOfFromArrayOfTypes: z.nullable(z.union([z.string(), z.number().int()])),
    oneOfSameType: z.nullable(z.union([z.string(), Two$outboundSchema])),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OneOfGenerationStressTest$ {
    /** @deprecated use `OneOfGenerationStressTest$inboundSchema` instead. */
    export const inboundSchema = OneOfGenerationStressTest$inboundSchema;
    /** @deprecated use `OneOfGenerationStressTest$outboundSchema` instead. */
    export const outboundSchema = OneOfGenerationStressTest$outboundSchema;
    /** @deprecated use `OneOfGenerationStressTest$Outbound` instead. */
    export type Outbound = OneOfGenerationStressTest$Outbound;
}
