/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Obj2 = {
    field1: string;
    field2: boolean;
};

export type Obj1 = {
    field1: string;
};

export type OneOfOverlappingObjects = Obj1 | Obj2;

/** @internal */
export namespace Obj2$ {
    export const inboundSchema: z.ZodType<Obj2, z.ZodTypeDef, unknown> = z.object({
        field1: z.string(),
        field2: z.boolean(),
    });

    export type Outbound = {
        field1: string;
        field2: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Obj2> = z.object({
        field1: z.string(),
        field2: z.boolean(),
    });
}

/** @internal */
export namespace Obj1$ {
    export const inboundSchema: z.ZodType<Obj1, z.ZodTypeDef, unknown> = z.object({
        field1: z.string(),
    });

    export type Outbound = {
        field1: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Obj1> = z.object({
        field1: z.string(),
    });
}

/** @internal */
export namespace OneOfOverlappingObjects$ {
    export const inboundSchema: z.ZodType<OneOfOverlappingObjects, z.ZodTypeDef, unknown> = z.union(
        [z.lazy(() => Obj1$.inboundSchema), z.lazy(() => Obj2$.inboundSchema)]
    );

    export type Outbound = Obj1$.Outbound | Obj2$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OneOfOverlappingObjects> =
        z.union([z.lazy(() => Obj1$.outboundSchema), z.lazy(() => Obj2$.outboundSchema)]);
}
