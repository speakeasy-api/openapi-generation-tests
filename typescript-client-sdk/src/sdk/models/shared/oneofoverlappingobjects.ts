/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Obj2 = {
    field1: string;
    field2: boolean;
};

export type Obj1 = {
    field1: string;
};

export type OneOfOverlappingObjects = Obj1 | Obj2;

/** @internal */
export const Obj2$inboundSchema: z.ZodType<Obj2, z.ZodTypeDef, unknown> = z.object({
    field1: z.string(),
    field2: z.boolean(),
});

/** @internal */
export type Obj2$Outbound = {
    field1: string;
    field2: boolean;
};

/** @internal */
export const Obj2$outboundSchema: z.ZodType<Obj2$Outbound, z.ZodTypeDef, Obj2> = z.object({
    field1: z.string(),
    field2: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Obj2$ {
    /** @deprecated use `Obj2$inboundSchema` instead. */
    export const inboundSchema = Obj2$inboundSchema;
    /** @deprecated use `Obj2$outboundSchema` instead. */
    export const outboundSchema = Obj2$outboundSchema;
    /** @deprecated use `Obj2$Outbound` instead. */
    export type Outbound = Obj2$Outbound;
}

/** @internal */
export const Obj1$inboundSchema: z.ZodType<Obj1, z.ZodTypeDef, unknown> = z.object({
    field1: z.string(),
});

/** @internal */
export type Obj1$Outbound = {
    field1: string;
};

/** @internal */
export const Obj1$outboundSchema: z.ZodType<Obj1$Outbound, z.ZodTypeDef, Obj1> = z.object({
    field1: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Obj1$ {
    /** @deprecated use `Obj1$inboundSchema` instead. */
    export const inboundSchema = Obj1$inboundSchema;
    /** @deprecated use `Obj1$outboundSchema` instead. */
    export const outboundSchema = Obj1$outboundSchema;
    /** @deprecated use `Obj1$Outbound` instead. */
    export type Outbound = Obj1$Outbound;
}

/** @internal */
export const OneOfOverlappingObjects$inboundSchema: z.ZodType<
    OneOfOverlappingObjects,
    z.ZodTypeDef,
    unknown
> = z.union([z.lazy(() => Obj1$inboundSchema), z.lazy(() => Obj2$inboundSchema)]);

/** @internal */
export type OneOfOverlappingObjects$Outbound = Obj1$Outbound | Obj2$Outbound;

/** @internal */
export const OneOfOverlappingObjects$outboundSchema: z.ZodType<
    OneOfOverlappingObjects$Outbound,
    z.ZodTypeDef,
    OneOfOverlappingObjects
> = z.union([z.lazy(() => Obj1$outboundSchema), z.lazy(() => Obj2$outboundSchema)]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OneOfOverlappingObjects$ {
    /** @deprecated use `OneOfOverlappingObjects$inboundSchema` instead. */
    export const inboundSchema = OneOfOverlappingObjects$inboundSchema;
    /** @deprecated use `OneOfOverlappingObjects$outboundSchema` instead. */
    export const outboundSchema = OneOfOverlappingObjects$outboundSchema;
    /** @deprecated use `OneOfOverlappingObjects$Outbound` instead. */
    export type Outbound = OneOfOverlappingObjects$Outbound;
}
