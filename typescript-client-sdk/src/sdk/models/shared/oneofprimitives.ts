/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OneOfPrimitives = boolean | string;

/** @internal */
export const OneOfPrimitives$inboundSchema: z.ZodType<
  OneOfPrimitives,
  z.ZodTypeDef,
  unknown
> = z.union([z.boolean(), z.string()]);

/** @internal */
export type OneOfPrimitives$Outbound = boolean | string;

/** @internal */
export const OneOfPrimitives$outboundSchema: z.ZodType<
  OneOfPrimitives$Outbound,
  z.ZodTypeDef,
  OneOfPrimitives
> = z.union([z.boolean(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OneOfPrimitives$ {
  /** @deprecated use `OneOfPrimitives$inboundSchema` instead. */
  export const inboundSchema = OneOfPrimitives$inboundSchema;
  /** @deprecated use `OneOfPrimitives$outboundSchema` instead. */
  export const outboundSchema = OneOfPrimitives$outboundSchema;
  /** @deprecated use `OneOfPrimitives$Outbound` instead. */
  export type Outbound = OneOfPrimitives$Outbound;
}

export function oneOfPrimitivesToJSON(
  oneOfPrimitives: OneOfPrimitives,
): string {
  return JSON.stringify(OneOfPrimitives$outboundSchema.parse(oneOfPrimitives));
}

export function oneOfPrimitivesFromJSON(
  jsonString: string,
): SafeParseResult<OneOfPrimitives, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OneOfPrimitives$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OneOfPrimitives' from JSON`,
  );
}
