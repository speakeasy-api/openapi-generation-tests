/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import * as z from "zod";

export type PrimitiveTypeUnion = string | number | number | number | number | boolean;

/** @internal */
export const PrimitiveTypeUnion$inboundSchema: z.ZodType<
    PrimitiveTypeUnion,
    z.ZodTypeDef,
    unknown
> = z.union([z.string(), z.number().int(), z.number().int(), z.number(), z.number(), z.boolean()]);

/** @internal */
export type PrimitiveTypeUnion$Outbound = string | number | number | number | number | boolean;

/** @internal */
export const PrimitiveTypeUnion$outboundSchema: z.ZodType<
    PrimitiveTypeUnion$Outbound,
    z.ZodTypeDef,
    PrimitiveTypeUnion
> = z.union([z.string(), z.number().int(), z.number().int(), z.number(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrimitiveTypeUnion$ {
    /** @deprecated use `PrimitiveTypeUnion$inboundSchema` instead. */
    export const inboundSchema = PrimitiveTypeUnion$inboundSchema;
    /** @deprecated use `PrimitiveTypeUnion$outboundSchema` instead. */
    export const outboundSchema = PrimitiveTypeUnion$outboundSchema;
    /** @deprecated use `PrimitiveTypeUnion$Outbound` instead. */
    export type Outbound = PrimitiveTypeUnion$Outbound;
}
