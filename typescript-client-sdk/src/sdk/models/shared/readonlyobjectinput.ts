/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ReadOnlyObjectInput = {};

/** @internal */
export const ReadOnlyObjectInput$inboundSchema: z.ZodType<
  ReadOnlyObjectInput,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ReadOnlyObjectInput$Outbound = {};

/** @internal */
export const ReadOnlyObjectInput$outboundSchema: z.ZodType<
  ReadOnlyObjectInput$Outbound,
  z.ZodTypeDef,
  ReadOnlyObjectInput
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadOnlyObjectInput$ {
  /** @deprecated use `ReadOnlyObjectInput$inboundSchema` instead. */
  export const inboundSchema = ReadOnlyObjectInput$inboundSchema;
  /** @deprecated use `ReadOnlyObjectInput$outboundSchema` instead. */
  export const outboundSchema = ReadOnlyObjectInput$outboundSchema;
  /** @deprecated use `ReadOnlyObjectInput$Outbound` instead. */
  export type Outbound = ReadOnlyObjectInput$Outbound;
}

export function readOnlyObjectInputToJSON(
  readOnlyObjectInput: ReadOnlyObjectInput,
): string {
  return JSON.stringify(
    ReadOnlyObjectInput$outboundSchema.parse(readOnlyObjectInput),
  );
}

export function readOnlyObjectInputFromJSON(
  jsonString: string,
): SafeParseResult<ReadOnlyObjectInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadOnlyObjectInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadOnlyObjectInput' from JSON`,
  );
}
