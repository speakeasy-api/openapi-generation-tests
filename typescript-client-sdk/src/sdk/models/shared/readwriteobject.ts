/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type ReadWriteObject = {
    num1: number;
    num2: number;
    num3: number;
};

/** @internal */
export namespace ReadWriteObject$ {
    export const inboundSchema: z.ZodType<ReadWriteObject, z.ZodTypeDef, unknown> = z
        .object({
            num1: z.number().int(),
            num2: z.number().int(),
            num3: z.number().int(),
        })
        .transform((v) => {
            return {
                num1: v.num1,
                num2: v.num2,
                num3: v.num3,
            };
        });

    export type Outbound = {
        num1: number;
        num2: number;
        num3: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReadWriteObject> = z
        .object({
            num1: z.number().int(),
            num2: z.number().int(),
            num3: z.number().int(),
        })
        .transform((v) => {
            return {
                num1: v.num1,
                num2: v.num2,
                num3: v.num3,
            };
        });
}
