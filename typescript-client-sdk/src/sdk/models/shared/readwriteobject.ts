/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ReadWriteObject = {
  num1: number;
  num2: number;
  num3: number;
};

/** @internal */
export const ReadWriteObject$inboundSchema: z.ZodType<
  ReadWriteObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  num1: z.number().int(),
  num2: z.number().int(),
  num3: z.number().int(),
});

/** @internal */
export type ReadWriteObject$Outbound = {
  num1: number;
  num2: number;
  num3: number;
};

/** @internal */
export const ReadWriteObject$outboundSchema: z.ZodType<
  ReadWriteObject$Outbound,
  z.ZodTypeDef,
  ReadWriteObject
> = z.object({
  num1: z.number().int(),
  num2: z.number().int(),
  num3: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadWriteObject$ {
  /** @deprecated use `ReadWriteObject$inboundSchema` instead. */
  export const inboundSchema = ReadWriteObject$inboundSchema;
  /** @deprecated use `ReadWriteObject$outboundSchema` instead. */
  export const outboundSchema = ReadWriteObject$outboundSchema;
  /** @deprecated use `ReadWriteObject$Outbound` instead. */
  export type Outbound = ReadWriteObject$Outbound;
}

export function readWriteObjectToJSON(
  readWriteObject: ReadWriteObject,
): string {
  return JSON.stringify(ReadWriteObject$outboundSchema.parse(readWriteObject));
}

export function readWriteObjectFromJSON(
  jsonString: string,
): SafeParseResult<ReadWriteObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadWriteObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadWriteObject' from JSON`,
  );
}
