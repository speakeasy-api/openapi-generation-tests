/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type ReadWriteObjectOutput = {
    num3: number;
    sum: number;
};

/** @internal */
export namespace ReadWriteObjectOutput$ {
    export const inboundSchema: z.ZodType<ReadWriteObjectOutput, z.ZodTypeDef, unknown> = z
        .object({
            num3: z.number().int(),
            sum: z.number().int(),
        })
        .transform((v) => {
            return {
                num3: v.num3,
                sum: v.sum,
            };
        });

    export type Outbound = {
        num3: number;
        sum: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReadWriteObjectOutput> = z
        .object({
            num3: z.number().int(),
            sum: z.number().int(),
        })
        .transform((v) => {
            return {
                num3: v.num3,
                sum: v.sum,
            };
        });
}
