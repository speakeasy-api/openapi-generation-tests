/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type RefQueryParamObj = {
  bool: boolean;
  int: number;
  num: number;
  str: string;
};

/** @internal */
export const RefQueryParamObj$inboundSchema: z.ZodType<
  RefQueryParamObj,
  z.ZodTypeDef,
  unknown
> = z.object({
  bool: z.boolean(),
  int: z.number().int(),
  num: z.number(),
  str: z.string(),
});

/** @internal */
export type RefQueryParamObj$Outbound = {
  bool: boolean;
  int: number;
  num: number;
  str: string;
};

/** @internal */
export const RefQueryParamObj$outboundSchema: z.ZodType<
  RefQueryParamObj$Outbound,
  z.ZodTypeDef,
  RefQueryParamObj
> = z.object({
  bool: z.boolean(),
  int: z.number().int(),
  num: z.number(),
  str: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefQueryParamObj$ {
  /** @deprecated use `RefQueryParamObj$inboundSchema` instead. */
  export const inboundSchema = RefQueryParamObj$inboundSchema;
  /** @deprecated use `RefQueryParamObj$outboundSchema` instead. */
  export const outboundSchema = RefQueryParamObj$outboundSchema;
  /** @deprecated use `RefQueryParamObj$Outbound` instead. */
  export type Outbound = RefQueryParamObj$Outbound;
}
