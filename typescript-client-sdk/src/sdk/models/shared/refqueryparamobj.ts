/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type RefQueryParamObj = {
    bool: boolean;
    int: number;
    num: number;
    str: string;
};

/** @internal */
export namespace RefQueryParamObj$ {
    export type Inbound = {
        bool: boolean;
        int: number;
        num: number;
        str: string;
    };

    export const inboundSchema: z.ZodType<RefQueryParamObj, z.ZodTypeDef, Inbound> = z
        .object({
            bool: z.boolean(),
            int: z.number().int(),
            num: z.number(),
            str: z.string(),
        })
        .transform((v) => {
            return {
                bool: v.bool,
                int: v.int,
                num: v.num,
                str: v.str,
            };
        });

    export type Outbound = {
        bool: boolean;
        int: number;
        num: number;
        str: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RefQueryParamObj> = z
        .object({
            bool: z.boolean(),
            int: z.number().int(),
            num: z.number(),
            str: z.string(),
        })
        .transform((v) => {
            return {
                bool: v.bool,
                int: v.int,
                num: v.num,
                str: v.str,
            };
        });
}
