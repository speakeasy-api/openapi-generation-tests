/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RefQueryParamObjExploded = {
  bool: boolean;
  int: number;
  num: number;
  str: string;
};

/** @internal */
export const RefQueryParamObjExploded$inboundSchema: z.ZodType<
  RefQueryParamObjExploded,
  z.ZodTypeDef,
  unknown
> = z.object({
  bool: z.boolean(),
  int: z.number().int(),
  num: z.number(),
  str: z.string(),
});

/** @internal */
export type RefQueryParamObjExploded$Outbound = {
  bool: boolean;
  int: number;
  num: number;
  str: string;
};

/** @internal */
export const RefQueryParamObjExploded$outboundSchema: z.ZodType<
  RefQueryParamObjExploded$Outbound,
  z.ZodTypeDef,
  RefQueryParamObjExploded
> = z.object({
  bool: z.boolean(),
  int: z.number().int(),
  num: z.number(),
  str: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefQueryParamObjExploded$ {
  /** @deprecated use `RefQueryParamObjExploded$inboundSchema` instead. */
  export const inboundSchema = RefQueryParamObjExploded$inboundSchema;
  /** @deprecated use `RefQueryParamObjExploded$outboundSchema` instead. */
  export const outboundSchema = RefQueryParamObjExploded$outboundSchema;
  /** @deprecated use `RefQueryParamObjExploded$Outbound` instead. */
  export type Outbound = RefQueryParamObjExploded$Outbound;
}

export function refQueryParamObjExplodedToJSON(
  refQueryParamObjExploded: RefQueryParamObjExploded,
): string {
  return JSON.stringify(
    RefQueryParamObjExploded$outboundSchema.parse(refQueryParamObjExploded),
  );
}

export function refQueryParamObjExplodedFromJSON(
  jsonString: string,
): SafeParseResult<RefQueryParamObjExploded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RefQueryParamObjExploded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefQueryParamObjExploded' from JSON`,
  );
}
