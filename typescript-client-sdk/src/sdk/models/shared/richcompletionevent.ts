/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum StopReason {
    StopSequence = "stop_sequence",
    MaxTokens = "max_tokens",
    LessThanNilGreaterThan = "<nil>",
}

export type RichCompletionEventData = {
    completion: string;
    model?: string | undefined;
    stopReason: StopReason | null;
};

/**
 * Represents a single event in a completion stream
 */
export type RichCompletionEvent = {
    data: RichCompletionEventData;
    event: "completion";
    id: string;
};

/** @internal */
export const StopReason$ = z.nativeEnum(StopReason);

/** @internal */
export namespace RichCompletionEventData$ {
    export type Inbound = {
        completion: string;
        model?: string | undefined;
        stop_reason: StopReason | null;
    };

    export const inboundSchema: z.ZodType<RichCompletionEventData, z.ZodTypeDef, Inbound> = z
        .object({
            completion: z.string(),
            model: z.string().optional(),
            stop_reason: z.nullable(StopReason$),
        })
        .transform((v) => {
            return {
                completion: v.completion,
                ...(v.model === undefined ? null : { model: v.model }),
                stopReason: v.stop_reason,
            };
        });

    export type Outbound = {
        completion: string;
        model?: string | undefined;
        stop_reason: StopReason | null;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RichCompletionEventData> = z
        .object({
            completion: z.string(),
            model: z.string().optional(),
            stopReason: z.nullable(StopReason$),
        })
        .transform((v) => {
            return {
                completion: v.completion,
                ...(v.model === undefined ? null : { model: v.model }),
                stop_reason: v.stopReason,
            };
        });
}

/** @internal */
export namespace RichCompletionEvent$ {
    export type Inbound = {
        data: RichCompletionEventData$.Inbound;
        event: "completion";
        id: string;
    };

    export const inboundSchema: z.ZodType<RichCompletionEvent, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.lazy(() => RichCompletionEventData$.inboundSchema),
            event: z.literal("completion"),
            id: z.string(),
        })
        .transform((v) => {
            return {
                data: v.data,
                event: v.event,
                id: v.id,
            };
        });

    export type Outbound = {
        data: RichCompletionEventData$.Outbound;
        event: "completion";
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RichCompletionEvent> = z
        .object({
            data: z.lazy(() => RichCompletionEventData$.outboundSchema),
            event: z.literal("completion"),
            id: z.string(),
        })
        .transform((v) => {
            return {
                data: v.data,
                event: v.event,
                id: v.id,
            };
        });
}
