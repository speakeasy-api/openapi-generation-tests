/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RichCompletionEventData, RichCompletionEventData$ } from "./richcompletioneventdata";
import * as z from "zod";

/**
 * Represents a single event in a completion stream
 */
export type RichCompletionEvent = {
    data: RichCompletionEventData;
    event?: "completion" | undefined;
    id: string;
};

/** @internal */
export namespace RichCompletionEvent$ {
    export const inboundSchema: z.ZodType<RichCompletionEvent, z.ZodTypeDef, unknown> = z.object({
        data: z
            .string()
            .transform((v, ctx) => {
                try {
                    return JSON.parse(v);
                } catch (err) {
                    ctx.addIssue({
                        code: z.ZodIssueCode.custom,
                        message: `malformed json: ${err}`,
                    });
                    return z.NEVER;
                }
            })
            .pipe(RichCompletionEventData$.inboundSchema),
        event: z.literal("completion").optional(),
        id: z.string(),
    });

    export type Outbound = {
        data: RichCompletionEventData$.Outbound;
        event: "completion";
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RichCompletionEvent> = z.object({
        data: RichCompletionEventData$.outboundSchema,
        event: z.literal("completion").default("completion" as const),
        id: z.string(),
    });
}
