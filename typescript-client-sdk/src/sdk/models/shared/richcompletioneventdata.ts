/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as z from "zod";

export enum StopReason {
    StopSequence = "stop_sequence",
    MaxTokens = "max_tokens",
}

export type RichCompletionEventData = {
    completion: string;
    model?: string | undefined;
    stopReason: StopReason | null;
};

/** @internal */
export namespace StopReason$ {
    export const inboundSchema = z.nativeEnum(StopReason);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RichCompletionEventData$ {
    export const inboundSchema: z.ZodType<RichCompletionEventData, z.ZodTypeDef, unknown> = z
        .object({
            completion: z.string(),
            model: z.string().optional(),
            stop_reason: z.nullable(StopReason$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                stop_reason: "stopReason",
            });
        });

    export type Outbound = {
        completion: string;
        model?: string | undefined;
        stop_reason: string | null;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RichCompletionEventData> = z
        .object({
            completion: z.string(),
            model: z.string().optional(),
            stopReason: z.nullable(StopReason$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                stopReason: "stop_reason",
            });
        });
}
