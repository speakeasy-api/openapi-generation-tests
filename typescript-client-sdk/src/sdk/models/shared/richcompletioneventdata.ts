/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const StopReason = {
  StopSequence: "stop_sequence",
  MaxTokens: "max_tokens",
} as const;
export type StopReason = ClosedEnum<typeof StopReason>;

export type RichCompletionEventData = {
  completion: string;
  model?: string | undefined;
  stopReason: StopReason | null;
};

/** @internal */
export const StopReason$inboundSchema: z.ZodNativeEnum<typeof StopReason> = z
  .nativeEnum(StopReason);

/** @internal */
export const StopReason$outboundSchema: z.ZodNativeEnum<typeof StopReason> =
  StopReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StopReason$ {
  /** @deprecated use `StopReason$inboundSchema` instead. */
  export const inboundSchema = StopReason$inboundSchema;
  /** @deprecated use `StopReason$outboundSchema` instead. */
  export const outboundSchema = StopReason$outboundSchema;
}

/** @internal */
export const RichCompletionEventData$inboundSchema: z.ZodType<
  RichCompletionEventData,
  z.ZodTypeDef,
  unknown
> = z.object({
  completion: z.string(),
  model: z.string().optional(),
  stop_reason: z.nullable(StopReason$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "stop_reason": "stopReason",
  });
});

/** @internal */
export type RichCompletionEventData$Outbound = {
  completion: string;
  model?: string | undefined;
  stop_reason: string | null;
};

/** @internal */
export const RichCompletionEventData$outboundSchema: z.ZodType<
  RichCompletionEventData$Outbound,
  z.ZodTypeDef,
  RichCompletionEventData
> = z.object({
  completion: z.string(),
  model: z.string().optional(),
  stopReason: z.nullable(StopReason$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    stopReason: "stop_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RichCompletionEventData$ {
  /** @deprecated use `RichCompletionEventData$inboundSchema` instead. */
  export const inboundSchema = RichCompletionEventData$inboundSchema;
  /** @deprecated use `RichCompletionEventData$outboundSchema` instead. */
  export const outboundSchema = RichCompletionEventData$outboundSchema;
  /** @deprecated use `RichCompletionEventData$Outbound` instead. */
  export type Outbound = RichCompletionEventData$Outbound;
}

export function richCompletionEventDataToJSON(
  richCompletionEventData: RichCompletionEventData,
): string {
  return JSON.stringify(
    RichCompletionEventData$outboundSchema.parse(richCompletionEventData),
  );
}

export function richCompletionEventDataFromJSON(
  jsonString: string,
): SafeParseResult<RichCompletionEventData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RichCompletionEventData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RichCompletionEventData' from JSON`,
  );
}
