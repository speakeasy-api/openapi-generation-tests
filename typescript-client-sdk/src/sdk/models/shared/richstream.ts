/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { HeartbeatEvent, HeartbeatEvent$ } from "./heartbeatevent.js";
import { RichCompletionEvent, RichCompletionEvent$ } from "./richcompletionevent.js";
import * as z from "zod";

export type RichStream =
    | (RichCompletionEvent & { event: "completion" })
    | (HeartbeatEvent & { event: "heartbeat" });

/** @internal */
export namespace RichStream$ {
    export const inboundSchema: z.ZodType<RichStream, z.ZodTypeDef, unknown> = z.union([
        RichCompletionEvent$.inboundSchema.and(
            z.object({ event: z.literal("completion") }).transform((v) => ({ event: v.event }))
        ),
        HeartbeatEvent$.inboundSchema.and(
            z.object({ event: z.literal("heartbeat") }).transform((v) => ({ event: v.event }))
        ),
    ]);

    export type Outbound =
        | (RichCompletionEvent$.Outbound & { event: "completion" })
        | (HeartbeatEvent$.Outbound & { event: "heartbeat" });
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RichStream> = z.union([
        RichCompletionEvent$.outboundSchema.and(
            z.object({ event: z.literal("completion") }).transform((v) => ({ event: v.event }))
        ),
        HeartbeatEvent$.outboundSchema.and(
            z.object({ event: z.literal("heartbeat") }).transform((v) => ({ event: v.event }))
        ),
    ]);
}
