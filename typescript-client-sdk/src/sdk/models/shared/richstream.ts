/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { HeartbeatEvent, HeartbeatEvent$ } from "./heartbeatevent";
import { RichCompletionEvent, RichCompletionEvent$ } from "./richcompletionevent";
import { z } from "zod";

export type RichStream =
    | (RichCompletionEvent & { event: "completion" })
    | (HeartbeatEvent & { event: "heartbeat" });

/** @internal */
export namespace RichStream$ {
    export type Inbound =
        | (RichCompletionEvent$.Inbound & { event: "completion" })
        | (HeartbeatEvent$.Inbound & { event: "heartbeat" });

    export type Outbound =
        | (RichCompletionEvent$.Outbound & { event: "completion" })
        | (HeartbeatEvent$.Outbound & { event: "heartbeat" });

    export const inboundSchema: z.ZodType<RichStream, z.ZodTypeDef, Inbound> = z.union([
        RichCompletionEvent$.inboundSchema.and(z.object({ event: z.literal("completion") })),
        HeartbeatEvent$.inboundSchema.and(z.object({ event: z.literal("heartbeat") })),
    ]);

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RichStream> = z.union([
        RichCompletionEvent$.outboundSchema.and(z.object({ event: z.literal("completion") })),
        HeartbeatEvent$.outboundSchema.and(z.object({ event: z.literal("heartbeat") })),
    ]);
}
