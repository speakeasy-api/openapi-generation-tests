/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  HeartbeatEvent,
  HeartbeatEvent$inboundSchema,
  HeartbeatEvent$Outbound,
  HeartbeatEvent$outboundSchema,
} from "./heartbeatevent.js";
import {
  RichCompletionEvent,
  RichCompletionEvent$inboundSchema,
  RichCompletionEvent$Outbound,
  RichCompletionEvent$outboundSchema,
} from "./richcompletionevent.js";

export type RichStream =
  | (RichCompletionEvent & { event: "completion" })
  | (HeartbeatEvent & { event: "heartbeat" });

/** @internal */
export const RichStream$inboundSchema: z.ZodType<
  RichStream,
  z.ZodTypeDef,
  unknown
> = z.union([
  RichCompletionEvent$inboundSchema.and(
    z.object({ event: z.literal("completion") }).transform((v) => ({
      event: v.event,
    })),
  ),
  HeartbeatEvent$inboundSchema.and(
    z.object({ event: z.literal("heartbeat") }).transform((v) => ({
      event: v.event,
    })),
  ),
]);

/** @internal */
export type RichStream$Outbound =
  | (RichCompletionEvent$Outbound & { event: "completion" })
  | (HeartbeatEvent$Outbound & { event: "heartbeat" });

/** @internal */
export const RichStream$outboundSchema: z.ZodType<
  RichStream$Outbound,
  z.ZodTypeDef,
  RichStream
> = z.union([
  RichCompletionEvent$outboundSchema.and(
    z.object({ event: z.literal("completion") }).transform((v) => ({
      event: v.event,
    })),
  ),
  HeartbeatEvent$outboundSchema.and(
    z.object({ event: z.literal("heartbeat") }).transform((v) => ({
      event: v.event,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RichStream$ {
  /** @deprecated use `RichStream$inboundSchema` instead. */
  export const inboundSchema = RichStream$inboundSchema;
  /** @deprecated use `RichStream$outboundSchema` instead. */
  export const outboundSchema = RichStream$outboundSchema;
  /** @deprecated use `RichStream$Outbound` instead. */
  export type Outbound = RichStream$Outbound;
}

export function richStreamToJSON(richStream: RichStream): string {
  return JSON.stringify(RichStream$outboundSchema.parse(richStream));
}

export function richStreamFromJSON(
  jsonString: string,
): SafeParseResult<RichStream, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RichStream$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RichStream' from JSON`,
  );
}
