/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type SchemeBasicAuth = {
    password: string;
    username: string;
};

/** @internal */
export const SchemeBasicAuth$inboundSchema: z.ZodType<SchemeBasicAuth, z.ZodTypeDef, unknown> = z
    .object({
        Password: z.string(),
        Username: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            Password: "password",
            Username: "username",
        });
    });

/** @internal */
export type SchemeBasicAuth$Outbound = {
    Password: string;
    Username: string;
};

/** @internal */
export const SchemeBasicAuth$outboundSchema: z.ZodType<
    SchemeBasicAuth$Outbound,
    z.ZodTypeDef,
    SchemeBasicAuth
> = z
    .object({
        password: z.string(),
        username: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            password: "Password",
            username: "Username",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemeBasicAuth$ {
    /** @deprecated use `SchemeBasicAuth$inboundSchema` instead. */
    export const inboundSchema = SchemeBasicAuth$inboundSchema;
    /** @deprecated use `SchemeBasicAuth$outboundSchema` instead. */
    export const outboundSchema = SchemeBasicAuth$outboundSchema;
    /** @deprecated use `SchemeBasicAuth$Outbound` instead. */
    export type Outbound = SchemeBasicAuth$Outbound;
}
