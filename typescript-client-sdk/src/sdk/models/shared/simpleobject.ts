/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types/decimal.js";
import { ClosedEnum } from "../../types/enums.js";
import { RFCDate } from "../../types/rfcdate.js";
import { Enum, Enum$inboundSchema, Enum$outboundSchema } from "./enum.js";
import * as z from "zod";

/**
 * An int32 enum property.
 */
export const Int32Enum = {
    FiftyFive: 55,
    SixtyNine: 69,
    OneHundredAndEightyOne: 181,
} as const;
/**
 * An int32 enum property.
 */
export type Int32Enum = ClosedEnum<typeof Int32Enum>;

/**
 * An integer enum property.
 */
export enum IntEnum {
    First = 1,
    Second = 2,
    Third = 3,
}

/**
 * A simple object that uses all our supported primitive types and enums and has optional properties.
 *
 * @see {@link https://speakeasy.com/docs} - A link to the external docs.
 */
export type SimpleObject = {
    /**
     * A boolean property.
     */
    bool: boolean;
    /**
     * A date property.
     */
    date: RFCDate;
    /**
     * A date-time property.
     */
    dateTime: Date;
    /**
     * A string based enum
     */
    enum: Enum;
    /**
     * A float32 property.
     */
    float32: number;
    /**
     * An integer property.
     */
    int: number;
    /**
     * An int32 property.
     */
    int32: number;
    /**
     * An int32 enum property.
     */
    int32Enum: Int32Enum;
    /**
     * An integer enum property.
     */
    intEnum: IntEnum;
    /**
     * A number property.
     */
    num: number;
    /**
     * A string property.
     */
    str: string;
    /**
     * An any property.
     */
    any?: any | undefined;
    bigint?: bigint | undefined;
    bigintStr?: bigint | undefined;
    /**
     * An optional boolean property.
     */
    boolOpt?: boolean | undefined;
    decimal?: Decimal$ | number | undefined;
    decimalStr?: Decimal$ | number | undefined;
    /**
     * A float64 string
     */
    float64Str?: number | undefined;
    /**
     * An int64 string
     */
    int64Str?: number | undefined;
    /**
     * An optional integer property will be null for tests.
     */
    intOptNull?: number | undefined;
    /**
     * An optional number property will be null for tests.
     */
    numOptNull?: number | undefined;
    /**
     * An optional string property.
     */
    strOpt?: string | undefined;
};

/** @internal */
export const Int32Enum$inboundSchema: z.ZodNativeEnum<typeof Int32Enum> = z.nativeEnum(Int32Enum);

/** @internal */
export const Int32Enum$outboundSchema: z.ZodNativeEnum<typeof Int32Enum> = Int32Enum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Int32Enum$ {
    /** @deprecated use `Int32Enum$inboundSchema` instead. */
    export const inboundSchema = Int32Enum$inboundSchema;
    /** @deprecated use `Int32Enum$outboundSchema` instead. */
    export const outboundSchema = Int32Enum$outboundSchema;
}

/** @internal */
export const IntEnum$inboundSchema: z.ZodNativeEnum<typeof IntEnum> = z.nativeEnum(IntEnum);

/** @internal */
export const IntEnum$outboundSchema: z.ZodNativeEnum<typeof IntEnum> = IntEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntEnum$ {
    /** @deprecated use `IntEnum$inboundSchema` instead. */
    export const inboundSchema = IntEnum$inboundSchema;
    /** @deprecated use `IntEnum$outboundSchema` instead. */
    export const outboundSchema = IntEnum$outboundSchema;
}

/** @internal */
export const SimpleObject$inboundSchema: z.ZodType<SimpleObject, z.ZodTypeDef, unknown> = z.object({
    bool: z.boolean(),
    date: z.string().transform((v) => new RFCDate(v)),
    dateTime: z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    enum: Enum$inboundSchema,
    float32: z.number(),
    int: z.number().int(),
    int32: z.number().int(),
    int32Enum: Int32Enum$inboundSchema,
    intEnum: IntEnum$inboundSchema,
    num: z.number(),
    str: z.string(),
    any: z.any().optional(),
    bigint: z
        .number()
        .transform((v) => BigInt(v))
        .optional(),
    bigintStr: z
        .string()
        .transform((v) => BigInt(v))
        .optional(),
    boolOpt: z.boolean().optional(),
    decimal: z
        .number()
        .transform((v) => new Decimal$(v))
        .optional(),
    decimalStr: z
        .string()
        .transform((v) => new Decimal$(v))
        .optional(),
    float64Str: z
        .string()
        .transform((v) => parseFloat(v))
        .optional(),
    int64Str: z
        .string()
        .transform((v) => parseInt(v))
        .optional(),
    intOptNull: z.number().int().optional(),
    numOptNull: z.number().optional(),
    strOpt: z.string().optional(),
});

/** @internal */
export type SimpleObject$Outbound = {
    bool: boolean;
    date: string;
    dateTime: string;
    enum: string;
    float32: number;
    int: number;
    int32: number;
    int32Enum: number;
    intEnum: number;
    num: number;
    str: string;
    any?: any | undefined;
    bigint?: number | undefined;
    bigintStr?: string | undefined;
    boolOpt?: boolean | undefined;
    decimal?: number | undefined;
    decimalStr?: string | undefined;
    float64Str?: string | undefined;
    int64Str?: string | undefined;
    intOptNull?: number | undefined;
    numOptNull?: number | undefined;
    strOpt?: string | undefined;
};

/** @internal */
export const SimpleObject$outboundSchema: z.ZodType<
    SimpleObject$Outbound,
    z.ZodTypeDef,
    SimpleObject
> = z.object({
    bool: z.boolean(),
    date: z.instanceof(RFCDate).transform((v) => v.toString()),
    dateTime: z.date().transform((v) => v.toISOString()),
    enum: Enum$outboundSchema,
    float32: z.number(),
    int: z.number().int(),
    int32: z.number().int(),
    int32Enum: Int32Enum$outboundSchema,
    intEnum: IntEnum$outboundSchema,
    num: z.number(),
    str: z.string(),
    any: z.any().optional(),
    bigint: z
        .bigint()
        .transform((v) => Number(v))
        .optional(),
    bigintStr: z
        .bigint()
        .transform((v) => `${v}`)
        .optional(),
    boolOpt: z.boolean().optional(),
    decimal: z
        .union([z.instanceof(Decimal$), z.number()])
        .transform((v) => (typeof v === "number" ? v : v.toNumber()))
        .optional(),
    decimalStr: z
        .union([z.instanceof(Decimal$), z.number()])
        .transform((v) => `${v}`)
        .optional(),
    float64Str: z
        .number()
        .transform((v) => `${v}`)
        .optional(),
    int64Str: z
        .number()
        .int()
        .transform((v) => `${v}`)
        .optional(),
    intOptNull: z.number().int().optional(),
    numOptNull: z.number().optional(),
    strOpt: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SimpleObject$ {
    /** @deprecated use `SimpleObject$inboundSchema` instead. */
    export const inboundSchema = SimpleObject$inboundSchema;
    /** @deprecated use `SimpleObject$outboundSchema` instead. */
    export const outboundSchema = SimpleObject$outboundSchema;
    /** @deprecated use `SimpleObject$Outbound` instead. */
    export type Outbound = SimpleObject$Outbound;
}
