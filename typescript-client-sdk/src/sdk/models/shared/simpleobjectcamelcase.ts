/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { ClosedEnum } from "../../types/enums.js";
import { RFCDate } from "../../types/rfcdate.js";
import { Enum, Enum$inboundSchema, Enum$outboundSchema } from "./enum.js";
import * as z from "zod";

/**
 * An int32 enum property.
 */
export const Int32EnumVal = {
    FiftyFive: 55,
    SixtyNine: 69,
    OneHundredAndEightyOne: 181,
} as const;
/**
 * An int32 enum property.
 */
export type Int32EnumVal = ClosedEnum<typeof Int32EnumVal>;

/**
 * An integer enum property.
 */
export enum IntEnumVal {
    First = 1,
    Second = 2,
    Third = 3,
}

/**
 * A simple object that uses all our supported primitive types and enums and has optional properties.
 *
 * @see {@link https://speakeasy.com/docs} - A link to the external docs.
 */
export type SimpleObjectCamelCase = {
    /**
     * An any property.
     */
    anyVal?: any | undefined;
    bigintStrVal?: bigint | undefined;
    bigintVal?: bigint | undefined;
    /**
     * An optional boolean property.
     */
    boolOptVal?: boolean | undefined;
    /**
     * A boolean property.
     */
    boolVal: boolean;
    /**
     * A date-time property.
     */
    dateTimeVal: Date;
    /**
     * A date property.
     */
    dateVal: RFCDate;
    decimalVal?: Decimal$ | number | undefined;
    /**
     * A string based enum
     */
    enumVal: Enum;
    /**
     * A float32 property.
     */
    float32Val: number;
    /**
     * An int32 enum property.
     */
    int32EnumVal: Int32EnumVal;
    /**
     * An int32 property.
     */
    int32Val: number;
    /**
     * An integer enum property.
     */
    intEnumVal: IntEnumVal;
    /**
     * An optional integer property will be null for tests.
     */
    intOptNullVal?: number | undefined;
    /**
     * An integer property.
     */
    intVal: number;
    /**
     * An optional number property will be null for tests.
     */
    numOptNullVal?: number | undefined;
    /**
     * A number property.
     */
    numVal: number;
    /**
     * An optional string property.
     */
    strOptVal?: string | undefined;
    /**
     * A string property.
     */
    strVal: string;
};

/** @internal */
export const Int32EnumVal$inboundSchema: z.ZodNativeEnum<typeof Int32EnumVal> =
    z.nativeEnum(Int32EnumVal);

/** @internal */
export const Int32EnumVal$outboundSchema: z.ZodNativeEnum<typeof Int32EnumVal> =
    Int32EnumVal$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Int32EnumVal$ {
    /** @deprecated use `Int32EnumVal$inboundSchema` instead. */
    export const inboundSchema = Int32EnumVal$inboundSchema;
    /** @deprecated use `Int32EnumVal$outboundSchema` instead. */
    export const outboundSchema = Int32EnumVal$outboundSchema;
}

/** @internal */
export const IntEnumVal$inboundSchema: z.ZodNativeEnum<typeof IntEnumVal> =
    z.nativeEnum(IntEnumVal);

/** @internal */
export const IntEnumVal$outboundSchema: z.ZodNativeEnum<typeof IntEnumVal> =
    IntEnumVal$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntEnumVal$ {
    /** @deprecated use `IntEnumVal$inboundSchema` instead. */
    export const inboundSchema = IntEnumVal$inboundSchema;
    /** @deprecated use `IntEnumVal$outboundSchema` instead. */
    export const outboundSchema = IntEnumVal$outboundSchema;
}

/** @internal */
export const SimpleObjectCamelCase$inboundSchema: z.ZodType<
    SimpleObjectCamelCase,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        any_val: z.any().optional(),
        bigint_str_val: z
            .string()
            .transform((v) => BigInt(v))
            .optional(),
        bigint_val: z
            .number()
            .transform((v) => BigInt(v))
            .optional(),
        bool_opt_val: z.boolean().optional(),
        bool_val: z.boolean(),
        date_time_val: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        date_val: z.string().transform((v) => new RFCDate(v)),
        decimal_val: z
            .number()
            .transform((v) => new Decimal$(v))
            .optional(),
        enum_val: Enum$inboundSchema,
        float32_val: z.number(),
        int32_enum_val: Int32EnumVal$inboundSchema,
        int32_val: z.number().int(),
        int_enum_val: IntEnumVal$inboundSchema,
        int_opt_null_val: z.number().int().optional(),
        int_val: z.number().int(),
        num_opt_null_val: z.number().optional(),
        num_val: z.number(),
        str_opt_val: z.string().optional(),
        str_val: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            any_val: "anyVal",
            bigint_str_val: "bigintStrVal",
            bigint_val: "bigintVal",
            bool_opt_val: "boolOptVal",
            bool_val: "boolVal",
            date_time_val: "dateTimeVal",
            date_val: "dateVal",
            decimal_val: "decimalVal",
            enum_val: "enumVal",
            float32_val: "float32Val",
            int32_enum_val: "int32EnumVal",
            int32_val: "int32Val",
            int_enum_val: "intEnumVal",
            int_opt_null_val: "intOptNullVal",
            int_val: "intVal",
            num_opt_null_val: "numOptNullVal",
            num_val: "numVal",
            str_opt_val: "strOptVal",
            str_val: "strVal",
        });
    });

/** @internal */
export type SimpleObjectCamelCase$Outbound = {
    any_val?: any | undefined;
    bigint_str_val?: string | undefined;
    bigint_val?: number | undefined;
    bool_opt_val?: boolean | undefined;
    bool_val: boolean;
    date_time_val: string;
    date_val: string;
    decimal_val?: number | undefined;
    enum_val: string;
    float32_val: number;
    int32_enum_val: number;
    int32_val: number;
    int_enum_val: number;
    int_opt_null_val?: number | undefined;
    int_val: number;
    num_opt_null_val?: number | undefined;
    num_val: number;
    str_opt_val?: string | undefined;
    str_val: string;
};

/** @internal */
export const SimpleObjectCamelCase$outboundSchema: z.ZodType<
    SimpleObjectCamelCase$Outbound,
    z.ZodTypeDef,
    SimpleObjectCamelCase
> = z
    .object({
        anyVal: z.any().optional(),
        bigintStrVal: z
            .bigint()
            .transform((v) => `${v}`)
            .optional(),
        bigintVal: z
            .bigint()
            .transform((v) => Number(v))
            .optional(),
        boolOptVal: z.boolean().optional(),
        boolVal: z.boolean(),
        dateTimeVal: z.date().transform((v) => v.toISOString()),
        dateVal: z.instanceof(RFCDate).transform((v) => v.toString()),
        decimalVal: z
            .union([z.instanceof(Decimal$), z.number()])
            .transform((v) => (typeof v === "number" ? v : v.toNumber()))
            .optional(),
        enumVal: Enum$outboundSchema,
        float32Val: z.number(),
        int32EnumVal: Int32EnumVal$outboundSchema,
        int32Val: z.number().int(),
        intEnumVal: IntEnumVal$outboundSchema,
        intOptNullVal: z.number().int().optional(),
        intVal: z.number().int(),
        numOptNullVal: z.number().optional(),
        numVal: z.number(),
        strOptVal: z.string().optional(),
        strVal: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            anyVal: "any_val",
            bigintStrVal: "bigint_str_val",
            bigintVal: "bigint_val",
            boolOptVal: "bool_opt_val",
            boolVal: "bool_val",
            dateTimeVal: "date_time_val",
            dateVal: "date_val",
            decimalVal: "decimal_val",
            enumVal: "enum_val",
            float32Val: "float32_val",
            int32EnumVal: "int32_enum_val",
            int32Val: "int32_val",
            intEnumVal: "int_enum_val",
            intOptNullVal: "int_opt_null_val",
            intVal: "int_val",
            numOptNullVal: "num_opt_null_val",
            numVal: "num_val",
            strOptVal: "str_opt_val",
            strVal: "str_val",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SimpleObjectCamelCase$ {
    /** @deprecated use `SimpleObjectCamelCase$inboundSchema` instead. */
    export const inboundSchema = SimpleObjectCamelCase$inboundSchema;
    /** @deprecated use `SimpleObjectCamelCase$outboundSchema` instead. */
    export const outboundSchema = SimpleObjectCamelCase$outboundSchema;
    /** @deprecated use `SimpleObjectCamelCase$Outbound` instead. */
    export type Outbound = SimpleObjectCamelCase$Outbound;
}
