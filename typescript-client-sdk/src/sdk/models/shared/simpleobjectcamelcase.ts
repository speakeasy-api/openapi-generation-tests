/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$, RFCDate } from "../../../sdk/types";
import { Enum, Enum$ } from "./enum";
import * as z from "zod";

/**
 * An int32 enum property.
 */
export enum Int32EnumVal {
    FiftyFive = 55,
    SixtyNine = 69,
    OneHundredAndEightyOne = 181,
}

/**
 * An integer enum property.
 */
export enum IntEnumVal {
    First = 1,
    Second = 2,
    Third = 3,
}

/**
 * A simple object that uses all our supported primitive types and enums and has optional properties.
 *
 * @see {@link https://docs.speakeasyapi.dev} - A link to the external docs.
 */
export type SimpleObjectCamelCase = {
    /**
     * An any property.
     */
    anyVal?: any | undefined;
    bigintStrVal?: bigint | undefined;
    bigintVal?: bigint | undefined;
    /**
     * An optional boolean property.
     */
    boolOptVal?: boolean | undefined;
    /**
     * A boolean property.
     */
    boolVal: boolean;
    /**
     * A date-time property.
     */
    dateTimeVal: Date;
    /**
     * A date property.
     */
    dateVal: RFCDate;
    decimalVal?: Decimal$ | number | undefined;
    /**
     * A string based enum
     */
    enumVal: Enum;
    /**
     * A float32 property.
     */
    float32Val: number;
    /**
     * An int32 enum property.
     */
    int32EnumVal: Int32EnumVal;
    /**
     * An int32 property.
     */
    int32Val: number;
    /**
     * An integer enum property.
     */
    intEnumVal: IntEnumVal;
    /**
     * An optional integer property will be null for tests.
     */
    intOptNullVal?: number | undefined;
    /**
     * An integer property.
     */
    intVal: number;
    /**
     * An optional number property will be null for tests.
     */
    numOptNullVal?: number | undefined;
    /**
     * A number property.
     */
    numVal: number;
    /**
     * An optional string property.
     */
    strOptVal?: string | undefined;
    /**
     * A string property.
     */
    strVal: string;
};

/** @internal */
export const Int32EnumVal$ = z.nativeEnum(Int32EnumVal);

/** @internal */
export const IntEnumVal$ = z.nativeEnum(IntEnumVal);

/** @internal */
export namespace SimpleObjectCamelCase$ {
    export type Inbound = {
        any_val?: any | undefined;
        bigint_str_val?: string | undefined;
        bigint_val?: number | undefined;
        bool_opt_val?: boolean | undefined;
        bool_val: boolean;
        date_time_val: string;
        date_val: string;
        decimal_val?: number | undefined;
        enum_val: Enum;
        float32_val: number;
        int32_enum_val: Int32EnumVal;
        int32_val: number;
        int_enum_val: IntEnumVal;
        int_opt_null_val?: number | undefined;
        int_val: number;
        num_opt_null_val?: number | undefined;
        num_val: number;
        str_opt_val?: string | undefined;
        str_val: string;
    };

    export const inboundSchema: z.ZodType<SimpleObjectCamelCase, z.ZodTypeDef, Inbound> = z
        .object({
            any_val: z.any().optional(),
            bigint_str_val: z
                .string()
                .transform((v) => BigInt(v))
                .optional(),
            bigint_val: z
                .number()
                .transform((v) => BigInt(v))
                .optional(),
            bool_opt_val: z.boolean().optional(),
            bool_val: z.boolean(),
            date_time_val: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            date_val: z.string().transform((v) => new RFCDate(v)),
            decimal_val: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            enum_val: Enum$,
            float32_val: z.number(),
            int32_enum_val: Int32EnumVal$,
            int32_val: z.number().int(),
            int_enum_val: IntEnumVal$,
            int_opt_null_val: z.number().int().optional(),
            int_val: z.number().int(),
            num_opt_null_val: z.number().optional(),
            num_val: z.number(),
            str_opt_val: z.string().optional(),
            str_val: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.any_val === undefined ? null : { anyVal: v.any_val }),
                ...(v.bigint_str_val === undefined ? null : { bigintStrVal: v.bigint_str_val }),
                ...(v.bigint_val === undefined ? null : { bigintVal: v.bigint_val }),
                ...(v.bool_opt_val === undefined ? null : { boolOptVal: v.bool_opt_val }),
                boolVal: v.bool_val,
                dateTimeVal: v.date_time_val,
                dateVal: v.date_val,
                ...(v.decimal_val === undefined ? null : { decimalVal: v.decimal_val }),
                enumVal: v.enum_val,
                float32Val: v.float32_val,
                int32EnumVal: v.int32_enum_val,
                int32Val: v.int32_val,
                intEnumVal: v.int_enum_val,
                ...(v.int_opt_null_val === undefined
                    ? null
                    : { intOptNullVal: v.int_opt_null_val }),
                intVal: v.int_val,
                ...(v.num_opt_null_val === undefined
                    ? null
                    : { numOptNullVal: v.num_opt_null_val }),
                numVal: v.num_val,
                ...(v.str_opt_val === undefined ? null : { strOptVal: v.str_opt_val }),
                strVal: v.str_val,
            };
        });

    export type Outbound = {
        any_val?: any | undefined;
        bigint_str_val?: string | undefined;
        bigint_val?: number | undefined;
        bool_opt_val?: boolean | undefined;
        bool_val: boolean;
        date_time_val: string;
        date_val: string;
        decimal_val?: number | undefined;
        enum_val: Enum;
        float32_val: number;
        int32_enum_val: Int32EnumVal;
        int32_val: number;
        int_enum_val: IntEnumVal;
        int_opt_null_val?: number | undefined;
        int_val: number;
        num_opt_null_val?: number | undefined;
        num_val: number;
        str_opt_val?: string | undefined;
        str_val: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SimpleObjectCamelCase> = z
        .object({
            anyVal: z.any().optional(),
            bigintStrVal: z
                .bigint()
                .transform((v) => `${v}`)
                .optional(),
            bigintVal: z
                .bigint()
                .transform((v) => Number(v))
                .optional(),
            boolOptVal: z.boolean().optional(),
            boolVal: z.boolean(),
            dateTimeVal: z.date().transform((v) => v.toISOString()),
            dateVal: z.instanceof(RFCDate).transform((v) => v.toString()),
            decimalVal: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            enumVal: Enum$,
            float32Val: z.number(),
            int32EnumVal: Int32EnumVal$,
            int32Val: z.number().int(),
            intEnumVal: IntEnumVal$,
            intOptNullVal: z.number().int().optional(),
            intVal: z.number().int(),
            numOptNullVal: z.number().optional(),
            numVal: z.number(),
            strOptVal: z.string().optional(),
            strVal: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.anyVal === undefined ? null : { any_val: v.anyVal }),
                ...(v.bigintStrVal === undefined ? null : { bigint_str_val: v.bigintStrVal }),
                ...(v.bigintVal === undefined ? null : { bigint_val: v.bigintVal }),
                ...(v.boolOptVal === undefined ? null : { bool_opt_val: v.boolOptVal }),
                bool_val: v.boolVal,
                date_time_val: v.dateTimeVal,
                date_val: v.dateVal,
                ...(v.decimalVal === undefined ? null : { decimal_val: v.decimalVal }),
                enum_val: v.enumVal,
                float32_val: v.float32Val,
                int32_enum_val: v.int32EnumVal,
                int32_val: v.int32Val,
                int_enum_val: v.intEnumVal,
                ...(v.intOptNullVal === undefined ? null : { int_opt_null_val: v.intOptNullVal }),
                int_val: v.intVal,
                ...(v.numOptNullVal === undefined ? null : { num_opt_null_val: v.numOptNullVal }),
                num_val: v.numVal,
                ...(v.strOptVal === undefined ? null : { str_opt_val: v.strOptVal }),
                str_val: v.strVal,
            };
        });
}
