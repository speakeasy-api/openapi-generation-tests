/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RFCDate } from "../../types";
import { Enum } from "./enum";
import { Expose, Transform } from "class-transformer";

/**
 * An int32 enum property.
 */
export enum SimpleObjectCamelCaseInt32EnumVal {
    FiftyFive = 55,
    SixtyNine = 69,
    OneHundredAndEightyOne = 181,
}

/**
 * An integer enum property.
 */
export enum SimpleObjectCamelCaseIntEnumVal {
    First = 1,
    Second = 2,
    Third = 3,
}

/**
 * A simple object that uses all our supported primitive types and enums and has optional properties.
 *
 * @see {@link https://docs.speakeasyapi.dev} - A link to the external docs.
 */
export class SimpleObjectCamelCase extends SpeakeasyBase {
    /**
     * An any property.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "any_val" })
    anyVal: any;

    @SpeakeasyMetadata()
    @Expose({ name: "bigint_str_val" })
    bigintStrVal?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "bigint_val" })
    bigintVal?: number;

    /**
     * An optional boolean property.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "bool_opt_val" })
    boolOptVal?: boolean;

    /**
     * A boolean property.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "bool_val" })
    boolVal: boolean;

    /**
     * A date-time property.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "date_time_val" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    dateTimeVal: Date;

    /**
     * A date property.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "date_val" })
    @Transform(({ value }) => new RFCDate(value), { toClassOnly: true })
    dateVal: RFCDate;

    @SpeakeasyMetadata()
    @Expose({ name: "decimal_val" })
    decimalVal?: number;

    /**
     * A string based enum
     */
    @SpeakeasyMetadata()
    @Expose({ name: "enum_val" })
    enumVal: Enum;

    /**
     * A float32 property.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "float32_val" })
    float32Val: number;

    /**
     * An int32 enum property.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "int32_enum_val" })
    int32EnumVal: SimpleObjectCamelCaseInt32EnumVal;

    /**
     * An int32 property.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "int32_val" })
    int32Val: number;

    /**
     * An integer enum property.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "int_enum_val" })
    intEnumVal: SimpleObjectCamelCaseIntEnumVal;

    /**
     * An optional integer property will be null for tests.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "int_opt_null_val" })
    intOptNullVal?: number;

    /**
     * An integer property.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "int_val" })
    intVal: number;

    /**
     * An optional number property will be null for tests.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "num_opt_null_val" })
    numOptNullVal?: number;

    /**
     * A number property.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "num_val" })
    numVal: number;

    /**
     * An optional string property.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "str_opt_val" })
    strOptVal?: string;

    /**
     * A string property.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "str_val" })
    strVal: string;
}
