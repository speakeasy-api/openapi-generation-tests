/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { ClosedEnum } from "../../types/enums.js";
import { RFCDate } from "../../types/rfcdate.js";
import { Enum, Enum$inboundSchema, Enum$outboundSchema } from "./enum.js";
import * as z from "zod";

/**
 * An int32 enum property.
 */
export const SimpleObjectWithNonStandardTypeNameInt32Enum = {
    FiftyFive: 55,
    SixtyNine: 69,
    OneHundredAndEightyOne: 181,
} as const;
/**
 * An int32 enum property.
 */
export type SimpleObjectWithNonStandardTypeNameInt32Enum = ClosedEnum<
    typeof SimpleObjectWithNonStandardTypeNameInt32Enum
>;

/**
 * An integer enum property.
 */
export enum SimpleObjectWithNonStandardTypeNameIntEnum {
    First = 1,
    Second = 2,
    Third = 3,
}

/**
 * A simple object that uses all our supported primitive types and enums and has optional properties.
 *
 * @see {@link https://docs.speakeasyapi.dev} - A link to the external docs.
 */
export type SimpleObjectWithNonStandardTypeName = {
    /**
     * An any property.
     */
    any?: any | undefined;
    bigint?: bigint | undefined;
    bigintStr?: bigint | undefined;
    /**
     * A boolean property.
     */
    bool: boolean;
    /**
     * An optional boolean property.
     */
    boolOpt?: boolean | undefined;
    /**
     * A date property.
     */
    date: RFCDate;
    /**
     * A date-time property.
     */
    dateTime: Date;
    decimal?: Decimal$ | number | undefined;
    decimalStr?: Decimal$ | number | undefined;
    /**
     * A string based enum
     */
    enum: Enum;
    /**
     * A float32 property.
     */
    float32: number;
    /**
     * A float64 string
     */
    float64Str?: number | undefined;
    /**
     * An integer property.
     */
    int: number;
    /**
     * An int32 property.
     */
    int32: number;
    /**
     * An int32 enum property.
     */
    int32Enum: SimpleObjectWithNonStandardTypeNameInt32Enum;
    /**
     * An int64 string
     */
    int64Str?: number | undefined;
    /**
     * An integer enum property.
     */
    intEnum: SimpleObjectWithNonStandardTypeNameIntEnum;
    /**
     * An optional integer property will be null for tests.
     */
    intOptNull?: number | undefined;
    /**
     * A number property.
     */
    num: number;
    /**
     * An optional number property will be null for tests.
     */
    numOptNull?: number | undefined;
    objType: string;
    /**
     * A string property.
     */
    str: string;
    /**
     * An optional string property.
     */
    strOpt?: string | undefined;
};

/** @internal */
export const SimpleObjectWithNonStandardTypeNameInt32Enum$inboundSchema: z.ZodNativeEnum<
    typeof SimpleObjectWithNonStandardTypeNameInt32Enum
> = z.nativeEnum(SimpleObjectWithNonStandardTypeNameInt32Enum);

/** @internal */
export const SimpleObjectWithNonStandardTypeNameInt32Enum$outboundSchema: z.ZodNativeEnum<
    typeof SimpleObjectWithNonStandardTypeNameInt32Enum
> = SimpleObjectWithNonStandardTypeNameInt32Enum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SimpleObjectWithNonStandardTypeNameInt32Enum$ {
    /** @deprecated use `SimpleObjectWithNonStandardTypeNameInt32Enum$inboundSchema` instead. */
    export const inboundSchema = SimpleObjectWithNonStandardTypeNameInt32Enum$inboundSchema;
    /** @deprecated use `SimpleObjectWithNonStandardTypeNameInt32Enum$outboundSchema` instead. */
    export const outboundSchema = SimpleObjectWithNonStandardTypeNameInt32Enum$outboundSchema;
}

/** @internal */
export const SimpleObjectWithNonStandardTypeNameIntEnum$inboundSchema: z.ZodNativeEnum<
    typeof SimpleObjectWithNonStandardTypeNameIntEnum
> = z.nativeEnum(SimpleObjectWithNonStandardTypeNameIntEnum);

/** @internal */
export const SimpleObjectWithNonStandardTypeNameIntEnum$outboundSchema: z.ZodNativeEnum<
    typeof SimpleObjectWithNonStandardTypeNameIntEnum
> = SimpleObjectWithNonStandardTypeNameIntEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SimpleObjectWithNonStandardTypeNameIntEnum$ {
    /** @deprecated use `SimpleObjectWithNonStandardTypeNameIntEnum$inboundSchema` instead. */
    export const inboundSchema = SimpleObjectWithNonStandardTypeNameIntEnum$inboundSchema;
    /** @deprecated use `SimpleObjectWithNonStandardTypeNameIntEnum$outboundSchema` instead. */
    export const outboundSchema = SimpleObjectWithNonStandardTypeNameIntEnum$outboundSchema;
}

/** @internal */
export const SimpleObjectWithNonStandardTypeName$inboundSchema: z.ZodType<
    SimpleObjectWithNonStandardTypeName,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        any: z.any().optional(),
        bigint: z
            .number()
            .transform((v) => BigInt(v))
            .optional(),
        bigintStr: z
            .string()
            .transform((v) => BigInt(v))
            .optional(),
        bool: z.boolean(),
        boolOpt: z.boolean().optional(),
        date: z.string().transform((v) => new RFCDate(v)),
        dateTime: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        decimal: z
            .number()
            .transform((v) => new Decimal$(v))
            .optional(),
        decimalStr: z
            .string()
            .transform((v) => new Decimal$(v))
            .optional(),
        enum: Enum$inboundSchema,
        float32: z.number(),
        float64Str: z
            .string()
            .transform((v) => parseFloat(v))
            .optional(),
        int: z.number().int(),
        int32: z.number().int(),
        int32Enum: SimpleObjectWithNonStandardTypeNameInt32Enum$inboundSchema,
        int64Str: z
            .string()
            .transform((v) => parseInt(v))
            .optional(),
        intEnum: SimpleObjectWithNonStandardTypeNameIntEnum$inboundSchema,
        intOptNull: z.number().int().optional(),
        num: z.number(),
        numOptNull: z.number().optional(),
        "obj.type": z.string(),
        str: z.string(),
        strOpt: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            "obj.type": "objType",
        });
    });

/** @internal */
export type SimpleObjectWithNonStandardTypeName$Outbound = {
    any?: any | undefined;
    bigint?: number | undefined;
    bigintStr?: string | undefined;
    bool: boolean;
    boolOpt?: boolean | undefined;
    date: string;
    dateTime: string;
    decimal?: number | undefined;
    decimalStr?: string | undefined;
    enum: string;
    float32: number;
    float64Str?: string | undefined;
    int: number;
    int32: number;
    int32Enum: number;
    int64Str?: string | undefined;
    intEnum: number;
    intOptNull?: number | undefined;
    num: number;
    numOptNull?: number | undefined;
    "obj.type": string;
    str: string;
    strOpt?: string | undefined;
};

/** @internal */
export const SimpleObjectWithNonStandardTypeName$outboundSchema: z.ZodType<
    SimpleObjectWithNonStandardTypeName$Outbound,
    z.ZodTypeDef,
    SimpleObjectWithNonStandardTypeName
> = z
    .object({
        any: z.any().optional(),
        bigint: z
            .bigint()
            .transform((v) => Number(v))
            .optional(),
        bigintStr: z
            .bigint()
            .transform((v) => `${v}`)
            .optional(),
        bool: z.boolean(),
        boolOpt: z.boolean().optional(),
        date: z.instanceof(RFCDate).transform((v) => v.toString()),
        dateTime: z.date().transform((v) => v.toISOString()),
        decimal: z
            .union([z.instanceof(Decimal$), z.number()])
            .transform((v) => (typeof v === "number" ? v : v.toNumber()))
            .optional(),
        decimalStr: z
            .union([z.instanceof(Decimal$), z.number()])
            .transform((v) => `${v}`)
            .optional(),
        enum: Enum$outboundSchema,
        float32: z.number(),
        float64Str: z
            .number()
            .transform((v) => `${v}`)
            .optional(),
        int: z.number().int(),
        int32: z.number().int(),
        int32Enum: SimpleObjectWithNonStandardTypeNameInt32Enum$outboundSchema,
        int64Str: z
            .number()
            .int()
            .transform((v) => `${v}`)
            .optional(),
        intEnum: SimpleObjectWithNonStandardTypeNameIntEnum$outboundSchema,
        intOptNull: z.number().int().optional(),
        num: z.number(),
        numOptNull: z.number().optional(),
        objType: z.string(),
        str: z.string(),
        strOpt: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            objType: "obj.type",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SimpleObjectWithNonStandardTypeName$ {
    /** @deprecated use `SimpleObjectWithNonStandardTypeName$inboundSchema` instead. */
    export const inboundSchema = SimpleObjectWithNonStandardTypeName$inboundSchema;
    /** @deprecated use `SimpleObjectWithNonStandardTypeName$outboundSchema` instead. */
    export const outboundSchema = SimpleObjectWithNonStandardTypeName$outboundSchema;
    /** @deprecated use `SimpleObjectWithNonStandardTypeName$Outbound` instead. */
    export type Outbound = SimpleObjectWithNonStandardTypeName$Outbound;
}
