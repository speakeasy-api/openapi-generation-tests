/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$, RFCDate } from "../../../sdk/types";
import { Enum, Enum$ } from "./enum";
import { z } from "zod";

/**
 * An int32 enum property.
 */
export enum SimpleObjectWithNonStandardTypeNameInt32Enum {
    FiftyFive = 55,
    SixtyNine = 69,
    OneHundredAndEightyOne = 181,
}

/**
 * An integer enum property.
 */
export enum SimpleObjectWithNonStandardTypeNameIntEnum {
    First = 1,
    Second = 2,
    Third = 3,
}

/**
 * A simple object that uses all our supported primitive types and enums and has optional properties.
 *
 * @see {@link https://docs.speakeasyapi.dev} - A link to the external docs.
 */
export type SimpleObjectWithNonStandardTypeName = {
    /**
     * An any property.
     */
    any?: any | undefined;
    bigint?: bigint | undefined;
    bigintStr?: bigint | undefined;
    /**
     * A boolean property.
     */
    bool: boolean;
    /**
     * An optional boolean property.
     */
    boolOpt?: boolean | undefined;
    /**
     * A date property.
     */
    date: RFCDate;
    /**
     * A date-time property.
     */
    dateTime: Date;
    decimal?: Decimal$ | number | undefined;
    decimalStr?: Decimal$ | number | undefined;
    /**
     * A string based enum
     */
    enum: Enum;
    /**
     * A float32 property.
     */
    float32: number;
    /**
     * An integer property.
     */
    int: number;
    /**
     * An int32 property.
     */
    int32: number;
    /**
     * An int32 enum property.
     */
    int32Enum: SimpleObjectWithNonStandardTypeNameInt32Enum;
    /**
     * An integer enum property.
     */
    intEnum: SimpleObjectWithNonStandardTypeNameIntEnum;
    /**
     * An optional integer property will be null for tests.
     */
    intOptNull?: number | undefined;
    /**
     * A number property.
     */
    num: number;
    /**
     * An optional number property will be null for tests.
     */
    numOptNull?: number | undefined;
    objType: string;
    /**
     * A string property.
     */
    str: string;
    /**
     * An optional string property.
     */
    strOpt?: string | undefined;
};

/** @internal */
export const SimpleObjectWithNonStandardTypeNameInt32Enum$ = z.nativeEnum(
    SimpleObjectWithNonStandardTypeNameInt32Enum
);

/** @internal */
export const SimpleObjectWithNonStandardTypeNameIntEnum$ = z.nativeEnum(
    SimpleObjectWithNonStandardTypeNameIntEnum
);

/** @internal */
export namespace SimpleObjectWithNonStandardTypeName$ {
    export type Inbound = {
        any?: any | undefined;
        bigint?: number | undefined;
        bigintStr?: string | undefined;
        bool: boolean;
        boolOpt?: boolean | undefined;
        date: string;
        dateTime: string;
        decimal?: number | undefined;
        decimalStr?: string | undefined;
        enum: Enum;
        float32: number;
        int: number;
        int32: number;
        int32Enum: SimpleObjectWithNonStandardTypeNameInt32Enum;
        intEnum: SimpleObjectWithNonStandardTypeNameIntEnum;
        intOptNull?: number | undefined;
        num: number;
        numOptNull?: number | undefined;
        "obj.type": string;
        str: string;
        strOpt?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        SimpleObjectWithNonStandardTypeName,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            any: z.any().optional(),
            bigint: z
                .number()
                .transform((v) => BigInt(v))
                .optional(),
            bigintStr: z
                .string()
                .transform((v) => BigInt(v))
                .optional(),
            bool: z.boolean(),
            boolOpt: z.boolean().optional(),
            date: z.string().transform((v) => new RFCDate(v)),
            dateTime: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            decimal: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            decimalStr: z
                .string()
                .transform((v) => new Decimal$(v))
                .optional(),
            enum: Enum$,
            float32: z.number(),
            int: z.number().int(),
            int32: z.number().int(),
            int32Enum: SimpleObjectWithNonStandardTypeNameInt32Enum$,
            intEnum: SimpleObjectWithNonStandardTypeNameIntEnum$,
            intOptNull: z.number().int().optional(),
            num: z.number(),
            numOptNull: z.number().optional(),
            "obj.type": z.string(),
            str: z.string(),
            strOpt: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.any === undefined ? null : { any: v.any }),
                ...(v.bigint === undefined ? null : { bigint: v.bigint }),
                ...(v.bigintStr === undefined ? null : { bigintStr: v.bigintStr }),
                bool: v.bool,
                ...(v.boolOpt === undefined ? null : { boolOpt: v.boolOpt }),
                date: v.date,
                dateTime: v.dateTime,
                ...(v.decimal === undefined ? null : { decimal: v.decimal }),
                ...(v.decimalStr === undefined ? null : { decimalStr: v.decimalStr }),
                enum: v.enum,
                float32: v.float32,
                int: v.int,
                int32: v.int32,
                int32Enum: v.int32Enum,
                intEnum: v.intEnum,
                ...(v.intOptNull === undefined ? null : { intOptNull: v.intOptNull }),
                num: v.num,
                ...(v.numOptNull === undefined ? null : { numOptNull: v.numOptNull }),
                objType: v["obj.type"],
                str: v.str,
                ...(v.strOpt === undefined ? null : { strOpt: v.strOpt }),
            };
        });

    export type Outbound = {
        any?: any | undefined;
        bigint?: number | undefined;
        bigintStr?: string | undefined;
        bool: boolean;
        boolOpt?: boolean | undefined;
        date: string;
        dateTime: string;
        decimal?: number | undefined;
        decimalStr?: string | undefined;
        enum: Enum;
        float32: number;
        int: number;
        int32: number;
        int32Enum: SimpleObjectWithNonStandardTypeNameInt32Enum;
        intEnum: SimpleObjectWithNonStandardTypeNameIntEnum;
        intOptNull?: number | undefined;
        num: number;
        numOptNull?: number | undefined;
        "obj.type": string;
        str: string;
        strOpt?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        SimpleObjectWithNonStandardTypeName
    > = z
        .object({
            any: z.any().optional(),
            bigint: z
                .bigint()
                .transform((v) => Number(v))
                .optional(),
            bigintStr: z
                .bigint()
                .transform((v) => `${v}`)
                .optional(),
            bool: z.boolean(),
            boolOpt: z.boolean().optional(),
            date: z.instanceof(RFCDate).transform((v) => v.toString()),
            dateTime: z.date().transform((v) => v.toISOString()),
            decimal: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            decimalStr: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => `${v}`)
                .optional(),
            enum: Enum$,
            float32: z.number(),
            int: z.number().int(),
            int32: z.number().int(),
            int32Enum: SimpleObjectWithNonStandardTypeNameInt32Enum$,
            intEnum: SimpleObjectWithNonStandardTypeNameIntEnum$,
            intOptNull: z.number().int().optional(),
            num: z.number(),
            numOptNull: z.number().optional(),
            objType: z.string(),
            str: z.string(),
            strOpt: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.any === undefined ? null : { any: v.any }),
                ...(v.bigint === undefined ? null : { bigint: v.bigint }),
                ...(v.bigintStr === undefined ? null : { bigintStr: v.bigintStr }),
                bool: v.bool,
                ...(v.boolOpt === undefined ? null : { boolOpt: v.boolOpt }),
                date: v.date,
                dateTime: v.dateTime,
                ...(v.decimal === undefined ? null : { decimal: v.decimal }),
                ...(v.decimalStr === undefined ? null : { decimalStr: v.decimalStr }),
                enum: v.enum,
                float32: v.float32,
                int: v.int,
                int32: v.int32,
                int32Enum: v.int32Enum,
                intEnum: v.intEnum,
                ...(v.intOptNull === undefined ? null : { intOptNull: v.intOptNull }),
                num: v.num,
                ...(v.numOptNull === undefined ? null : { numOptNull: v.numOptNull }),
                "obj.type": v.objType,
                str: v.str,
                ...(v.strOpt === undefined ? null : { strOpt: v.strOpt }),
            };
        });
}
