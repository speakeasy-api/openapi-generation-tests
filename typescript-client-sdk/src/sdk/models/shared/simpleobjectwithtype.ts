/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$, RFCDate } from "../../types";
import { Enum, Enum$ } from "./enum";
import * as z from "zod";

/**
 * An int32 enum property.
 */
export enum SimpleObjectWithTypeInt32Enum {
    FiftyFive = 55,
    SixtyNine = 69,
    OneHundredAndEightyOne = 181,
}

/**
 * An integer enum property.
 */
export enum SimpleObjectWithTypeIntEnum {
    First = 1,
    Second = 2,
    Third = 3,
}

/**
 * A simple object that uses all our supported primitive types and enums and has optional properties.
 *
 * @see {@link https://docs.speakeasyapi.dev} - A link to the external docs.
 */
export type SimpleObjectWithType = {
    /**
     * An any property.
     */
    any?: any | undefined;
    bigint?: bigint | undefined;
    bigintStr?: bigint | undefined;
    /**
     * A boolean property.
     */
    bool: boolean;
    /**
     * An optional boolean property.
     */
    boolOpt?: boolean | undefined;
    /**
     * A date property.
     */
    date: RFCDate;
    /**
     * A date-time property.
     */
    dateTime: Date;
    decimal?: Decimal$ | number | undefined;
    decimalStr?: Decimal$ | number | undefined;
    /**
     * A string based enum
     */
    enum: Enum;
    /**
     * A float32 property.
     */
    float32: number;
    /**
     * A float64 string
     */
    float64Str?: number | undefined;
    /**
     * An integer property.
     */
    int: number;
    /**
     * An int32 property.
     */
    int32: number;
    /**
     * An int32 enum property.
     */
    int32Enum: SimpleObjectWithTypeInt32Enum;
    /**
     * An int64 string
     */
    int64Str?: number | undefined;
    /**
     * An integer enum property.
     */
    intEnum: SimpleObjectWithTypeIntEnum;
    /**
     * An optional integer property will be null for tests.
     */
    intOptNull?: number | undefined;
    /**
     * A number property.
     */
    num: number;
    /**
     * An optional number property will be null for tests.
     */
    numOptNull?: number | undefined;
    /**
     * A string property.
     */
    str: string;
    /**
     * An optional string property.
     */
    strOpt?: string | undefined;
    type: string;
};

/** @internal */
export namespace SimpleObjectWithTypeInt32Enum$ {
    export const inboundSchema = z.nativeEnum(SimpleObjectWithTypeInt32Enum);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace SimpleObjectWithTypeIntEnum$ {
    export const inboundSchema = z.nativeEnum(SimpleObjectWithTypeIntEnum);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace SimpleObjectWithType$ {
    export const inboundSchema: z.ZodType<SimpleObjectWithType, z.ZodTypeDef, unknown> = z
        .object({
            any: z.any().optional(),
            bigint: z
                .number()
                .transform((v) => BigInt(v))
                .optional(),
            bigintStr: z
                .string()
                .transform((v) => BigInt(v))
                .optional(),
            bool: z.boolean(),
            boolOpt: z.boolean().optional(),
            date: z.string().transform((v) => new RFCDate(v)),
            dateTime: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            decimal: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            decimalStr: z
                .string()
                .transform((v) => new Decimal$(v))
                .optional(),
            enum: Enum$.inboundSchema,
            float32: z.number(),
            float64Str: z
                .string()
                .transform((v) => parseFloat(v))
                .optional(),
            int: z.number().int(),
            int32: z.number().int(),
            int32Enum: SimpleObjectWithTypeInt32Enum$.inboundSchema,
            int64Str: z
                .string()
                .transform((v) => parseInt(v))
                .optional(),
            intEnum: SimpleObjectWithTypeIntEnum$.inboundSchema,
            intOptNull: z.number().int().optional(),
            num: z.number(),
            numOptNull: z.number().optional(),
            str: z.string(),
            strOpt: z.string().optional(),
            type: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.any === undefined ? null : { any: v.any }),
                ...(v.bigint === undefined ? null : { bigint: v.bigint }),
                ...(v.bigintStr === undefined ? null : { bigintStr: v.bigintStr }),
                bool: v.bool,
                ...(v.boolOpt === undefined ? null : { boolOpt: v.boolOpt }),
                date: v.date,
                dateTime: v.dateTime,
                ...(v.decimal === undefined ? null : { decimal: v.decimal }),
                ...(v.decimalStr === undefined ? null : { decimalStr: v.decimalStr }),
                enum: v.enum,
                float32: v.float32,
                ...(v.float64Str === undefined ? null : { float64Str: v.float64Str }),
                int: v.int,
                int32: v.int32,
                int32Enum: v.int32Enum,
                ...(v.int64Str === undefined ? null : { int64Str: v.int64Str }),
                intEnum: v.intEnum,
                ...(v.intOptNull === undefined ? null : { intOptNull: v.intOptNull }),
                num: v.num,
                ...(v.numOptNull === undefined ? null : { numOptNull: v.numOptNull }),
                str: v.str,
                ...(v.strOpt === undefined ? null : { strOpt: v.strOpt }),
                type: v.type,
            };
        });

    export type Outbound = {
        any?: any | undefined;
        bigint?: number | undefined;
        bigintStr?: string | undefined;
        bool: boolean;
        boolOpt?: boolean | undefined;
        date: string;
        dateTime: string;
        decimal?: number | undefined;
        decimalStr?: string | undefined;
        enum: string;
        float32: number;
        float64Str?: string | undefined;
        int: number;
        int32: number;
        int32Enum: number;
        int64Str?: string | undefined;
        intEnum: number;
        intOptNull?: number | undefined;
        num: number;
        numOptNull?: number | undefined;
        str: string;
        strOpt?: string | undefined;
        type: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SimpleObjectWithType> = z
        .object({
            any: z.any().optional(),
            bigint: z
                .bigint()
                .transform((v) => Number(v))
                .optional(),
            bigintStr: z
                .bigint()
                .transform((v) => `${v}`)
                .optional(),
            bool: z.boolean(),
            boolOpt: z.boolean().optional(),
            date: z.instanceof(RFCDate).transform((v) => v.toString()),
            dateTime: z.date().transform((v) => v.toISOString()),
            decimal: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            decimalStr: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => `${v}`)
                .optional(),
            enum: Enum$.outboundSchema,
            float32: z.number(),
            float64Str: z
                .number()
                .transform((v) => `${v}`)
                .optional(),
            int: z.number().int(),
            int32: z.number().int(),
            int32Enum: SimpleObjectWithTypeInt32Enum$.outboundSchema,
            int64Str: z
                .number()
                .int()
                .transform((v) => `${v}`)
                .optional(),
            intEnum: SimpleObjectWithTypeIntEnum$.outboundSchema,
            intOptNull: z.number().int().optional(),
            num: z.number(),
            numOptNull: z.number().optional(),
            str: z.string(),
            strOpt: z.string().optional(),
            type: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.any === undefined ? null : { any: v.any }),
                ...(v.bigint === undefined ? null : { bigint: v.bigint }),
                ...(v.bigintStr === undefined ? null : { bigintStr: v.bigintStr }),
                bool: v.bool,
                ...(v.boolOpt === undefined ? null : { boolOpt: v.boolOpt }),
                date: v.date,
                dateTime: v.dateTime,
                ...(v.decimal === undefined ? null : { decimal: v.decimal }),
                ...(v.decimalStr === undefined ? null : { decimalStr: v.decimalStr }),
                enum: v.enum,
                float32: v.float32,
                ...(v.float64Str === undefined ? null : { float64Str: v.float64Str }),
                int: v.int,
                int32: v.int32,
                int32Enum: v.int32Enum,
                ...(v.int64Str === undefined ? null : { int64Str: v.int64Str }),
                intEnum: v.intEnum,
                ...(v.intOptNull === undefined ? null : { intOptNull: v.intOptNull }),
                num: v.num,
                ...(v.numOptNull === undefined ? null : { numOptNull: v.numOptNull }),
                str: v.str,
                ...(v.strOpt === undefined ? null : { strOpt: v.strOpt }),
                type: v.type,
            };
        });
}
