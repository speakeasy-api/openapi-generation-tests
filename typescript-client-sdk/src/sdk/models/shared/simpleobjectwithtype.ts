/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Decimal as Decimal$ } from "../../types/decimal.js";
import { ClosedEnum } from "../../types/enums.js";
import { RFCDate } from "../../types/rfcdate.js";
import { Enum, Enum$inboundSchema, Enum$outboundSchema } from "./enum.js";

/**
 * An int32 enum property.
 */
export const SimpleObjectWithTypeInt32Enum = {
  FiftyFive: 55,
  SixtyNine: 69,
  OneHundredAndEightyOne: 181,
} as const;
/**
 * An int32 enum property.
 */
export type SimpleObjectWithTypeInt32Enum = ClosedEnum<
  typeof SimpleObjectWithTypeInt32Enum
>;

/**
 * An integer enum property.
 */
export enum SimpleObjectWithTypeIntEnum {
  First = 1,
  Second = 2,
  Third = 3,
}

/**
 * A simple object that uses all our supported primitive types and enums and has optional properties.
 *
 * @see {@link https://speakeasy.com/docs} - A link to the external docs.
 */
export type SimpleObjectWithType = {
  /**
   * An any property.
   */
  any?: any | undefined;
  bigint?: bigint | undefined;
  bigintStr?: bigint | undefined;
  /**
   * A boolean property.
   */
  bool: boolean;
  /**
   * An optional boolean property.
   */
  boolOpt?: boolean | undefined;
  /**
   * A date property.
   */
  date: RFCDate;
  /**
   * A date-time property.
   */
  dateTime: Date;
  decimal?: Decimal$ | number | undefined;
  decimalNullableOpt?: Decimal$ | number | null | undefined;
  decimalStr?: Decimal$ | number | undefined;
  /**
   * A string based enum
   */
  enum: Enum;
  /**
   * A float32 property.
   */
  float32: number;
  /**
   * A float64 string
   */
  float64Str?: number | undefined;
  /**
   * An integer property.
   */
  int: number;
  /**
   * An int32 property.
   */
  int32: number;
  /**
   * An int32 enum property.
   */
  int32Enum: SimpleObjectWithTypeInt32Enum;
  /**
   * An int64 string
   */
  int64Str?: number | undefined;
  /**
   * An integer enum property.
   */
  intEnum: SimpleObjectWithTypeIntEnum;
  /**
   * An optional integer property will be null for tests.
   */
  intOptNull?: number | undefined;
  /**
   * A number property.
   */
  num: number;
  /**
   * An optional number property will be null for tests.
   */
  numOptNull?: number | undefined;
  /**
   * A string property.
   */
  str: string;
  /**
   * An optional string property.
   */
  strOpt?: string | undefined;
  type: string;
};

/** @internal */
export const SimpleObjectWithTypeInt32Enum$inboundSchema: z.ZodNativeEnum<
  typeof SimpleObjectWithTypeInt32Enum
> = z.nativeEnum(SimpleObjectWithTypeInt32Enum);

/** @internal */
export const SimpleObjectWithTypeInt32Enum$outboundSchema: z.ZodNativeEnum<
  typeof SimpleObjectWithTypeInt32Enum
> = SimpleObjectWithTypeInt32Enum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SimpleObjectWithTypeInt32Enum$ {
  /** @deprecated use `SimpleObjectWithTypeInt32Enum$inboundSchema` instead. */
  export const inboundSchema = SimpleObjectWithTypeInt32Enum$inboundSchema;
  /** @deprecated use `SimpleObjectWithTypeInt32Enum$outboundSchema` instead. */
  export const outboundSchema = SimpleObjectWithTypeInt32Enum$outboundSchema;
}

/** @internal */
export const SimpleObjectWithTypeIntEnum$inboundSchema: z.ZodNativeEnum<
  typeof SimpleObjectWithTypeIntEnum
> = z.nativeEnum(SimpleObjectWithTypeIntEnum);

/** @internal */
export const SimpleObjectWithTypeIntEnum$outboundSchema: z.ZodNativeEnum<
  typeof SimpleObjectWithTypeIntEnum
> = SimpleObjectWithTypeIntEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SimpleObjectWithTypeIntEnum$ {
  /** @deprecated use `SimpleObjectWithTypeIntEnum$inboundSchema` instead. */
  export const inboundSchema = SimpleObjectWithTypeIntEnum$inboundSchema;
  /** @deprecated use `SimpleObjectWithTypeIntEnum$outboundSchema` instead. */
  export const outboundSchema = SimpleObjectWithTypeIntEnum$outboundSchema;
}

/** @internal */
export const SimpleObjectWithType$inboundSchema: z.ZodType<
  SimpleObjectWithType,
  z.ZodTypeDef,
  unknown
> = z.object({
  any: z.any().optional(),
  bigint: z.number().transform(v => BigInt(v)).optional(),
  bigintStr: z.string().transform(v => BigInt(v)).optional(),
  bool: z.boolean(),
  boolOpt: z.boolean().optional(),
  date: z.string().transform(v => new RFCDate(v)),
  dateTime: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  decimal: z.number().transform(v => new Decimal$(v)).optional(),
  decimalNullableOpt: z.nullable(z.number().transform(v => new Decimal$(v)))
    .optional(),
  decimalStr: z.string().transform(v => new Decimal$(v)).optional(),
  enum: Enum$inboundSchema,
  float32: z.number(),
  float64Str: z.string().transform(v => parseFloat(v)).optional(),
  int: z.number().int(),
  int32: z.number().int(),
  int32Enum: SimpleObjectWithTypeInt32Enum$inboundSchema,
  int64Str: z.string().transform(v => parseInt(v, 10)).optional(),
  intEnum: SimpleObjectWithTypeIntEnum$inboundSchema,
  intOptNull: z.number().int().optional(),
  num: z.number(),
  numOptNull: z.number().optional(),
  str: z.string(),
  strOpt: z.string().optional(),
  type: z.string(),
});

/** @internal */
export type SimpleObjectWithType$Outbound = {
  any?: any | undefined;
  bigint?: number | undefined;
  bigintStr?: string | undefined;
  bool: boolean;
  boolOpt?: boolean | undefined;
  date: string;
  dateTime: string;
  decimal?: number | undefined;
  decimalNullableOpt?: number | null | undefined;
  decimalStr?: string | undefined;
  enum: string;
  float32: number;
  float64Str?: string | undefined;
  int: number;
  int32: number;
  int32Enum: number;
  int64Str?: string | undefined;
  intEnum: number;
  intOptNull?: number | undefined;
  num: number;
  numOptNull?: number | undefined;
  str: string;
  strOpt?: string | undefined;
  type: string;
};

/** @internal */
export const SimpleObjectWithType$outboundSchema: z.ZodType<
  SimpleObjectWithType$Outbound,
  z.ZodTypeDef,
  SimpleObjectWithType
> = z.object({
  any: z.any().optional(),
  bigint: z.bigint().transform(v => Number(v)).optional(),
  bigintStr: z.bigint().transform(v => `${v}`).optional(),
  bool: z.boolean(),
  boolOpt: z.boolean().optional(),
  date: z.instanceof(RFCDate).transform(v => v.toString()),
  dateTime: z.date().transform(v => v.toISOString()),
  decimal: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    typeof v === "number" ? v : v.toNumber()
  ).optional(),
  decimalNullableOpt: z.nullable(
    z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
      typeof v === "number" ? v : v.toNumber()
    ),
  ).optional(),
  decimalStr: z.union([z.instanceof(Decimal$), z.number()]).transform(v =>
    `${v}`
  ).optional(),
  enum: Enum$outboundSchema,
  float32: z.number(),
  float64Str: z.number().transform(v => `${v}`).optional(),
  int: z.number().int(),
  int32: z.number().int(),
  int32Enum: SimpleObjectWithTypeInt32Enum$outboundSchema,
  int64Str: z.number().int().transform(v => `${v}`).optional(),
  intEnum: SimpleObjectWithTypeIntEnum$outboundSchema,
  intOptNull: z.number().int().optional(),
  num: z.number(),
  numOptNull: z.number().optional(),
  str: z.string(),
  strOpt: z.string().optional(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SimpleObjectWithType$ {
  /** @deprecated use `SimpleObjectWithType$inboundSchema` instead. */
  export const inboundSchema = SimpleObjectWithType$inboundSchema;
  /** @deprecated use `SimpleObjectWithType$outboundSchema` instead. */
  export const outboundSchema = SimpleObjectWithType$outboundSchema;
  /** @deprecated use `SimpleObjectWithType$Outbound` instead. */
  export type Outbound = SimpleObjectWithType$Outbound;
}
