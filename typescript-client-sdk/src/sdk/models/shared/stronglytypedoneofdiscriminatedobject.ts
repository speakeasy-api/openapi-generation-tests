/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Tag, TaggedObject1, TaggedObject1$ } from "./taggedobject1";
import { TaggedObject2, TaggedObject2$, TaggedObject2Tag } from "./taggedobject2";
import { TaggedObject3, TaggedObject3$ } from "./taggedobject3";
import * as z from "zod";

export type StronglyTypedOneOfDiscriminatedObject =
    | (TaggedObject1 & { tag: Tag.Tag1 })
    | (TaggedObject2 & { tag: TaggedObject2Tag.Tag2 })
    | (TaggedObject3 & { tag: "tag3" });

/** @internal */
export namespace StronglyTypedOneOfDiscriminatedObject$ {
    export type Inbound =
        | (TaggedObject1$.Inbound & { tag: Tag.Tag1 })
        | (TaggedObject2$.Inbound & { tag: TaggedObject2Tag.Tag2 })
        | (TaggedObject3$.Inbound & { tag: "tag3" });

    export type Outbound =
        | (TaggedObject1$.Outbound & { tag: Tag.Tag1 })
        | (TaggedObject2$.Outbound & { tag: TaggedObject2Tag.Tag2 })
        | (TaggedObject3$.Outbound & { tag: "tag3" });
    export const inboundSchema: z.ZodType<
        StronglyTypedOneOfDiscriminatedObject,
        z.ZodTypeDef,
        Inbound
    > = z.union([
        TaggedObject1$.inboundSchema.and(
            z.object({ tag: z.literal(Tag.Tag1) }).transform((v) => ({ tag: v.tag }))
        ),
        TaggedObject2$.inboundSchema.and(
            z.object({ tag: z.literal(TaggedObject2Tag.Tag2) }).transform((v) => ({ tag: v.tag }))
        ),
        TaggedObject3$.inboundSchema.and(
            z.object({ tag: z.literal("tag3") }).transform((v) => ({ tag: v.tag }))
        ),
    ]);
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        StronglyTypedOneOfDiscriminatedObject
    > = z.union([
        TaggedObject1$.outboundSchema.and(
            z.object({ tag: z.literal(Tag.Tag1) }).transform((v) => ({ tag: v.tag }))
        ),
        TaggedObject2$.outboundSchema.and(
            z.object({ tag: z.literal(TaggedObject2Tag.Tag2) }).transform((v) => ({ tag: v.tag }))
        ),
        TaggedObject3$.outboundSchema.and(
            z.object({ tag: z.literal("tag3") }).transform((v) => ({ tag: v.tag }))
        ),
    ]);
}
