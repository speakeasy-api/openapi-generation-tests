/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    TaggedObject1,
    TaggedObject1$inboundSchema,
    TaggedObject1$Outbound,
    TaggedObject1$outboundSchema,
} from "./taggedobject1.js";
import {
    TaggedObject2,
    TaggedObject2$inboundSchema,
    TaggedObject2$Outbound,
    TaggedObject2$outboundSchema,
} from "./taggedobject2.js";
import {
    TaggedObject3,
    TaggedObject3$inboundSchema,
    TaggedObject3$Outbound,
    TaggedObject3$outboundSchema,
} from "./taggedobject3.js";
import * as z from "zod";

export type StronglyTypedOneOfDiscriminatedObject =
    | (TaggedObject1 & { tag: "tag1" })
    | (TaggedObject2 & { tag: "tag2" })
    | (TaggedObject3 & { tag: "tag3" });

/** @internal */
export const StronglyTypedOneOfDiscriminatedObject$inboundSchema: z.ZodType<
    StronglyTypedOneOfDiscriminatedObject,
    z.ZodTypeDef,
    unknown
> = z.union([
    TaggedObject1$inboundSchema.and(
        z.object({ tag: z.literal("tag1") }).transform((v) => ({ tag: v.tag }))
    ),
    TaggedObject2$inboundSchema.and(
        z.object({ tag: z.literal("tag2") }).transform((v) => ({ tag: v.tag }))
    ),
    TaggedObject3$inboundSchema.and(
        z.object({ tag: z.literal("tag3") }).transform((v) => ({ tag: v.tag }))
    ),
]);

/** @internal */
export type StronglyTypedOneOfDiscriminatedObject$Outbound =
    | (TaggedObject1$Outbound & { tag: "tag1" })
    | (TaggedObject2$Outbound & { tag: "tag2" })
    | (TaggedObject3$Outbound & { tag: "tag3" });

/** @internal */
export const StronglyTypedOneOfDiscriminatedObject$outboundSchema: z.ZodType<
    StronglyTypedOneOfDiscriminatedObject$Outbound,
    z.ZodTypeDef,
    StronglyTypedOneOfDiscriminatedObject
> = z.union([
    TaggedObject1$outboundSchema.and(
        z.object({ tag: z.literal("tag1") }).transform((v) => ({ tag: v.tag }))
    ),
    TaggedObject2$outboundSchema.and(
        z.object({ tag: z.literal("tag2") }).transform((v) => ({ tag: v.tag }))
    ),
    TaggedObject3$outboundSchema.and(
        z.object({ tag: z.literal("tag3") }).transform((v) => ({ tag: v.tag }))
    ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StronglyTypedOneOfDiscriminatedObject$ {
    /** @deprecated use `StronglyTypedOneOfDiscriminatedObject$inboundSchema` instead. */
    export const inboundSchema = StronglyTypedOneOfDiscriminatedObject$inboundSchema;
    /** @deprecated use `StronglyTypedOneOfDiscriminatedObject$outboundSchema` instead. */
    export const outboundSchema = StronglyTypedOneOfDiscriminatedObject$outboundSchema;
    /** @deprecated use `StronglyTypedOneOfDiscriminatedObject$Outbound` instead. */
    export type Outbound = StronglyTypedOneOfDiscriminatedObject$Outbound;
}
