/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { DeepObjectWithType, DeepObjectWithType$ } from "./deepobjectwithtype";
import { SimpleObjectWithType, SimpleObjectWithType$ } from "./simpleobjectwithtype";
import { z } from "zod";

export type StronglyTypedOneOfObject =
    | (DeepObjectWithType & { type: "deepObjectWithType" })
    | (SimpleObjectWithType & { type: "simpleObjectWithType" });

/** @internal */
export namespace StronglyTypedOneOfObject$ {
    export type Inbound =
        | (DeepObjectWithType$.Inbound & { type: "deepObjectWithType" })
        | (SimpleObjectWithType$.Inbound & { type: "simpleObjectWithType" });

    export type Outbound =
        | (DeepObjectWithType$.Outbound & { type: "deepObjectWithType" })
        | (SimpleObjectWithType$.Outbound & { type: "simpleObjectWithType" });

    export const inboundSchema: z.ZodType<StronglyTypedOneOfObject, z.ZodTypeDef, Inbound> =
        z.union([
            DeepObjectWithType$.inboundSchema.and(
                z.object({ type: z.literal("deepObjectWithType") })
            ),
            SimpleObjectWithType$.inboundSchema.and(
                z.object({ type: z.literal("simpleObjectWithType") })
            ),
        ]);

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, StronglyTypedOneOfObject> =
        z.union([
            DeepObjectWithType$.outboundSchema.and(
                z.object({ type: z.literal("deepObjectWithType") })
            ),
            SimpleObjectWithType$.outboundSchema.and(
                z.object({ type: z.literal("simpleObjectWithType") })
            ),
        ]);
}
