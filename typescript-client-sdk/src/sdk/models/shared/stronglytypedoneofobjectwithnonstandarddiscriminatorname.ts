/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    DeepObjectWithNonStandardTypeName,
    DeepObjectWithNonStandardTypeName$,
} from "./deepobjectwithnonstandardtypename";
import {
    SimpleObjectWithNonStandardTypeName,
    SimpleObjectWithNonStandardTypeName$,
} from "./simpleobjectwithnonstandardtypename";
import * as z from "zod";

export type StronglyTypedOneOfObjectWithNonStandardDiscriminatorName =
    | (DeepObjectWithNonStandardTypeName & { objType: "deepObjectWithNonStandardTypeName" })
    | (SimpleObjectWithNonStandardTypeName & { objType: "simpleObjectWithNonStandardTypeName" });

/** @internal */
export namespace StronglyTypedOneOfObjectWithNonStandardDiscriminatorName$ {
    export const inboundSchema: z.ZodType<
        StronglyTypedOneOfObjectWithNonStandardDiscriminatorName,
        z.ZodTypeDef,
        unknown
    > = z.union([
        DeepObjectWithNonStandardTypeName$.inboundSchema.and(
            z
                .object({ "obj.type": z.literal("deepObjectWithNonStandardTypeName") })
                .transform((v) => ({ objType: v["obj.type"] }))
        ),
        SimpleObjectWithNonStandardTypeName$.inboundSchema.and(
            z
                .object({ "obj.type": z.literal("simpleObjectWithNonStandardTypeName") })
                .transform((v) => ({ objType: v["obj.type"] }))
        ),
    ]);

    export type Outbound =
        | (DeepObjectWithNonStandardTypeName$.Outbound & {
              "obj.type": "deepObjectWithNonStandardTypeName";
          })
        | (SimpleObjectWithNonStandardTypeName$.Outbound & {
              "obj.type": "simpleObjectWithNonStandardTypeName";
          });
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        StronglyTypedOneOfObjectWithNonStandardDiscriminatorName
    > = z.union([
        DeepObjectWithNonStandardTypeName$.outboundSchema.and(
            z
                .object({ objType: z.literal("deepObjectWithNonStandardTypeName") })
                .transform((v) => ({ "obj.type": v.objType }))
        ),
        SimpleObjectWithNonStandardTypeName$.outboundSchema.and(
            z
                .object({ objType: z.literal("simpleObjectWithNonStandardTypeName") })
                .transform((v) => ({ "obj.type": v.objType }))
        ),
    ]);
}
