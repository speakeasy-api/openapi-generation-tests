/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    DeepObjectWithNonStandardTypeName,
    DeepObjectWithNonStandardTypeName$inboundSchema,
    DeepObjectWithNonStandardTypeName$Outbound,
    DeepObjectWithNonStandardTypeName$outboundSchema,
} from "./deepobjectwithnonstandardtypename.js";
import {
    SimpleObjectWithNonStandardTypeName,
    SimpleObjectWithNonStandardTypeName$inboundSchema,
    SimpleObjectWithNonStandardTypeName$Outbound,
    SimpleObjectWithNonStandardTypeName$outboundSchema,
} from "./simpleobjectwithnonstandardtypename.js";
import * as z from "zod";

export type StronglyTypedOneOfObjectWithNonStandardDiscriminatorName =
    | (DeepObjectWithNonStandardTypeName & { objType: "deepObjectWithNonStandardTypeName" })
    | (SimpleObjectWithNonStandardTypeName & { objType: "simpleObjectWithNonStandardTypeName" });

/** @internal */
export const StronglyTypedOneOfObjectWithNonStandardDiscriminatorName$inboundSchema: z.ZodType<
    StronglyTypedOneOfObjectWithNonStandardDiscriminatorName,
    z.ZodTypeDef,
    unknown
> = z.union([
    DeepObjectWithNonStandardTypeName$inboundSchema.and(
        z
            .object({ "obj.type": z.literal("deepObjectWithNonStandardTypeName") })
            .transform((v) => ({ objType: v["obj.type"] }))
    ),
    SimpleObjectWithNonStandardTypeName$inboundSchema.and(
        z
            .object({ "obj.type": z.literal("simpleObjectWithNonStandardTypeName") })
            .transform((v) => ({ objType: v["obj.type"] }))
    ),
]);

/** @internal */
export type StronglyTypedOneOfObjectWithNonStandardDiscriminatorName$Outbound =
    | (DeepObjectWithNonStandardTypeName$Outbound & {
          "obj.type": "deepObjectWithNonStandardTypeName";
      })
    | (SimpleObjectWithNonStandardTypeName$Outbound & {
          "obj.type": "simpleObjectWithNonStandardTypeName";
      });

/** @internal */
export const StronglyTypedOneOfObjectWithNonStandardDiscriminatorName$outboundSchema: z.ZodType<
    StronglyTypedOneOfObjectWithNonStandardDiscriminatorName$Outbound,
    z.ZodTypeDef,
    StronglyTypedOneOfObjectWithNonStandardDiscriminatorName
> = z.union([
    DeepObjectWithNonStandardTypeName$outboundSchema.and(
        z
            .object({ objType: z.literal("deepObjectWithNonStandardTypeName") })
            .transform((v) => ({ "obj.type": v.objType }))
    ),
    SimpleObjectWithNonStandardTypeName$outboundSchema.and(
        z
            .object({ objType: z.literal("simpleObjectWithNonStandardTypeName") })
            .transform((v) => ({ "obj.type": v.objType }))
    ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StronglyTypedOneOfObjectWithNonStandardDiscriminatorName$ {
    /** @deprecated use `StronglyTypedOneOfObjectWithNonStandardDiscriminatorName$inboundSchema` instead. */
    export const inboundSchema =
        StronglyTypedOneOfObjectWithNonStandardDiscriminatorName$inboundSchema;
    /** @deprecated use `StronglyTypedOneOfObjectWithNonStandardDiscriminatorName$outboundSchema` instead. */
    export const outboundSchema =
        StronglyTypedOneOfObjectWithNonStandardDiscriminatorName$outboundSchema;
    /** @deprecated use `StronglyTypedOneOfObjectWithNonStandardDiscriminatorName$Outbound` instead. */
    export type Outbound = StronglyTypedOneOfObjectWithNonStandardDiscriminatorName$Outbound;
}
