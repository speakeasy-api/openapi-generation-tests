/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const Tag = {
    Tag1: "tag1",
} as const;
export type Tag = ClosedEnum<typeof Tag>;

export type TaggedObject1 = {
    imageURL: string;
    tag: Tag;
};

/** @internal */
export namespace Tag$ {
    export const inboundSchema: z.ZodNativeEnum<typeof Tag> = z.nativeEnum(Tag);
    export const outboundSchema: z.ZodNativeEnum<typeof Tag> = inboundSchema;
}

/** @internal */
export namespace TaggedObject1$ {
    export const inboundSchema: z.ZodType<TaggedObject1, z.ZodTypeDef, unknown> = z.object({
        imageURL: z.string(),
        tag: Tag$.inboundSchema,
    });

    export type Outbound = {
        imageURL: string;
        tag: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaggedObject1> = z.object({
        imageURL: z.string(),
        tag: Tag$.outboundSchema,
    });
}
