/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum Tag {
    Tag1 = "tag1",
}

export type TaggedObject1 = {
    imageURL: string;
    tag: Tag;
};

/** @internal */
export const Tag$ = z.nativeEnum(Tag);

/** @internal */
export namespace TaggedObject1$ {
    export type Inbound = {
        imageURL: string;
        tag: Tag;
    };

    export const inboundSchema: z.ZodType<TaggedObject1, z.ZodTypeDef, Inbound> = z
        .object({
            imageURL: z.string(),
            tag: Tag$,
        })
        .transform((v) => {
            return {
                imageURL: v.imageURL,
                tag: v.tag,
            };
        });

    export type Outbound = {
        imageURL: string;
        tag: Tag;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaggedObject1> = z
        .object({
            imageURL: z.string(),
            tag: Tag$,
        })
        .transform((v) => {
            return {
                imageURL: v.imageURL,
                tag: v.tag,
            };
        });
}
