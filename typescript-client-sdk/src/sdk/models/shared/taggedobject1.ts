/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

export const Tag = {
  Tag1: "tag1",
} as const;
export type Tag = ClosedEnum<typeof Tag>;

export type TaggedObject1 = {
  imageURL: string;
  tag: Tag;
};

/** @internal */
export const Tag$inboundSchema: z.ZodNativeEnum<typeof Tag> = z.nativeEnum(Tag);

/** @internal */
export const Tag$outboundSchema: z.ZodNativeEnum<typeof Tag> =
  Tag$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tag$ {
  /** @deprecated use `Tag$inboundSchema` instead. */
  export const inboundSchema = Tag$inboundSchema;
  /** @deprecated use `Tag$outboundSchema` instead. */
  export const outboundSchema = Tag$outboundSchema;
}

/** @internal */
export const TaggedObject1$inboundSchema: z.ZodType<
  TaggedObject1,
  z.ZodTypeDef,
  unknown
> = z.object({
  imageURL: z.string(),
  tag: Tag$inboundSchema,
});

/** @internal */
export type TaggedObject1$Outbound = {
  imageURL: string;
  tag: string;
};

/** @internal */
export const TaggedObject1$outboundSchema: z.ZodType<
  TaggedObject1$Outbound,
  z.ZodTypeDef,
  TaggedObject1
> = z.object({
  imageURL: z.string(),
  tag: Tag$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaggedObject1$ {
  /** @deprecated use `TaggedObject1$inboundSchema` instead. */
  export const inboundSchema = TaggedObject1$inboundSchema;
  /** @deprecated use `TaggedObject1$outboundSchema` instead. */
  export const outboundSchema = TaggedObject1$outboundSchema;
  /** @deprecated use `TaggedObject1$Outbound` instead. */
  export type Outbound = TaggedObject1$Outbound;
}
