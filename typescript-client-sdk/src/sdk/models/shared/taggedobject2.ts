/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum TaggedObject2Tag {
    Tag2 = "tag2",
}

export type TaggedObject2 = {
    profileId: string;
    tag: TaggedObject2Tag;
};

/** @internal */
export namespace TaggedObject2Tag$ {
    export const inboundSchema = z.nativeEnum(TaggedObject2Tag);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace TaggedObject2$ {
    export const inboundSchema: z.ZodType<TaggedObject2, z.ZodTypeDef, unknown> = z
        .object({
            profileId: z.string(),
            tag: TaggedObject2Tag$.inboundSchema,
        })
        .transform((v) => {
            return {
                profileId: v.profileId,
                tag: v.tag,
            };
        });

    export type Outbound = {
        profileId: string;
        tag: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaggedObject2> = z
        .object({
            profileId: z.string(),
            tag: TaggedObject2Tag$.outboundSchema,
        })
        .transform((v) => {
            return {
                profileId: v.profileId,
                tag: v.tag,
            };
        });
}
