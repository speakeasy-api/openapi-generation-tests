/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TaggedObject3 = {
  phone: string;
  tag?: "tag3" | undefined;
};

/** @internal */
export const TaggedObject3$inboundSchema: z.ZodType<
  TaggedObject3,
  z.ZodTypeDef,
  unknown
> = z.object({
  phone: z.string(),
  tag: z.literal("tag3").optional(),
});

/** @internal */
export type TaggedObject3$Outbound = {
  phone: string;
  tag: "tag3";
};

/** @internal */
export const TaggedObject3$outboundSchema: z.ZodType<
  TaggedObject3$Outbound,
  z.ZodTypeDef,
  TaggedObject3
> = z.object({
  phone: z.string(),
  tag: z.literal("tag3").default("tag3" as const),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaggedObject3$ {
  /** @deprecated use `TaggedObject3$inboundSchema` instead. */
  export const inboundSchema = TaggedObject3$inboundSchema;
  /** @deprecated use `TaggedObject3$outboundSchema` instead. */
  export const outboundSchema = TaggedObject3$outboundSchema;
  /** @deprecated use `TaggedObject3$Outbound` instead. */
  export type Outbound = TaggedObject3$Outbound;
}

export function taggedObject3ToJSON(taggedObject3: TaggedObject3): string {
  return JSON.stringify(TaggedObject3$outboundSchema.parse(taggedObject3));
}

export function taggedObject3FromJSON(
  jsonString: string,
): SafeParseResult<TaggedObject3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaggedObject3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaggedObject3' from JSON`,
  );
}
