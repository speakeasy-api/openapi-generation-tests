/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Represents a single event in a text stream
 */
export type TextEvent = {
    data: string;
};

/** @internal */
export const TextEvent$inboundSchema: z.ZodType<TextEvent, z.ZodTypeDef, unknown> = z.object({
    data: z.string(),
});

/** @internal */
export type TextEvent$Outbound = {
    data: string;
};

/** @internal */
export const TextEvent$outboundSchema: z.ZodType<TextEvent$Outbound, z.ZodTypeDef, TextEvent> =
    z.object({
        data: z.string(),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TextEvent$ {
    /** @deprecated use `TextEvent$inboundSchema` instead. */
    export const inboundSchema = TextEvent$inboundSchema;
    /** @deprecated use `TextEvent$outboundSchema` instead. */
    export const outboundSchema = TextEvent$outboundSchema;
    /** @deprecated use `TextEvent$Outbound` instead. */
    export type Outbound = TextEvent$Outbound;
}
