/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  catchUnrecognizedEnum,
  ClosedEnum,
  OpenEnum,
  Unrecognized,
} from "../../types/enums.js";

export const Color = {
  Red: "red",
  Green: "green",
  Blue: "blue",
  Return: "return",
  Class: "class",
  Int: "int",
} as const;
export type Color = OpenEnum<typeof Color>;

export const HeroWidth = {
  FourHundredAndEighty: 480,
  SevenHundredAndTwenty: 720,
  OneThousandAndEighty: 1080,
} as const;
export type HeroWidth = OpenEnum<typeof HeroWidth>;

export const Icon = {
  Tick: "tick",
  ThumbsUp: "thumbs-up",
  Fire: "fire",
} as const;
export type Icon = ClosedEnum<typeof Icon>;

export type Theme = {
  color?: Color | undefined;
  heroWidth?: HeroWidth | undefined;
  icon?: Icon | undefined;
};

/** @internal */
export const Color$inboundSchema: z.ZodType<Color, z.ZodTypeDef, unknown> = z
  .union([
    z.nativeEnum(Color),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Color$outboundSchema: z.ZodType<Color, z.ZodTypeDef, Color> = z
  .union([
    z.nativeEnum(Color),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Color$ {
  /** @deprecated use `Color$inboundSchema` instead. */
  export const inboundSchema = Color$inboundSchema;
  /** @deprecated use `Color$outboundSchema` instead. */
  export const outboundSchema = Color$outboundSchema;
}

/** @internal */
export const HeroWidth$inboundSchema: z.ZodType<
  HeroWidth,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(HeroWidth),
    z.number().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const HeroWidth$outboundSchema: z.ZodType<
  HeroWidth,
  z.ZodTypeDef,
  HeroWidth
> = z.union([
  z.nativeEnum(HeroWidth),
  z.number().and(z.custom<Unrecognized<number>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HeroWidth$ {
  /** @deprecated use `HeroWidth$inboundSchema` instead. */
  export const inboundSchema = HeroWidth$inboundSchema;
  /** @deprecated use `HeroWidth$outboundSchema` instead. */
  export const outboundSchema = HeroWidth$outboundSchema;
}

/** @internal */
export const Icon$inboundSchema: z.ZodNativeEnum<typeof Icon> = z.nativeEnum(
  Icon,
);

/** @internal */
export const Icon$outboundSchema: z.ZodNativeEnum<typeof Icon> =
  Icon$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Icon$ {
  /** @deprecated use `Icon$inboundSchema` instead. */
  export const inboundSchema = Icon$inboundSchema;
  /** @deprecated use `Icon$outboundSchema` instead. */
  export const outboundSchema = Icon$outboundSchema;
}

/** @internal */
export const Theme$inboundSchema: z.ZodType<Theme, z.ZodTypeDef, unknown> = z
  .object({
    color: Color$inboundSchema.default("blue"),
    heroWidth: HeroWidth$inboundSchema.optional(),
    icon: Icon$inboundSchema.optional(),
  });

/** @internal */
export type Theme$Outbound = {
  color: string;
  heroWidth?: number | undefined;
  icon?: string | undefined;
};

/** @internal */
export const Theme$outboundSchema: z.ZodType<
  Theme$Outbound,
  z.ZodTypeDef,
  Theme
> = z.object({
  color: Color$outboundSchema.default("blue"),
  heroWidth: HeroWidth$outboundSchema.optional(),
  icon: Icon$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Theme$ {
  /** @deprecated use `Theme$inboundSchema` instead. */
  export const inboundSchema = Theme$inboundSchema;
  /** @deprecated use `Theme$outboundSchema` instead. */
  export const outboundSchema = Theme$outboundSchema;
  /** @deprecated use `Theme$Outbound` instead. */
  export type Outbound = Theme$Outbound;
}
