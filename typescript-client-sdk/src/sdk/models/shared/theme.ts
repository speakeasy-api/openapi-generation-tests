/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { catchUnrecognizedEnum, ClosedEnum, OpenEnum, Unrecognized } from "../../types/enums.js";
import * as z from "zod";

export const Color = {
    Red: "red",
    Green: "green",
    Blue: "blue",
} as const;
export type Color = OpenEnum<typeof Color>;

export const HeroWidth = {
    FourHundredAndEighty: 480,
    SevenHundredAndTwenty: 720,
    OneThousandAndEighty: 1080,
} as const;
export type HeroWidth = OpenEnum<typeof HeroWidth>;

export const Icon = {
    Tick: "tick",
    ThumbsUp: "thumbs-up",
    Fire: "fire",
} as const;
export type Icon = ClosedEnum<typeof Icon>;

export type Theme = {
    color?: Color | undefined;
    heroWidth?: HeroWidth | undefined;
    icon?: Icon | undefined;
};

/** @internal */
export namespace Color$ {
    export const inboundSchema: z.ZodType<Color, z.ZodTypeDef, unknown> = z.union([
        z.nativeEnum(Color),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema: z.ZodType<Color, z.ZodTypeDef, Color> = z.union([
        z.nativeEnum(Color),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace HeroWidth$ {
    export const inboundSchema: z.ZodType<HeroWidth, z.ZodTypeDef, unknown> = z.union([
        z.nativeEnum(HeroWidth),
        z.number().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema: z.ZodType<HeroWidth, z.ZodTypeDef, HeroWidth> = z.union([
        z.nativeEnum(HeroWidth),
        z.number().and(z.custom<Unrecognized<number>>()),
    ]);
}

/** @internal */
export namespace Icon$ {
    export const inboundSchema: z.ZodNativeEnum<typeof Icon> = z.nativeEnum(Icon);
    export const outboundSchema: z.ZodNativeEnum<typeof Icon> = inboundSchema;
}

/** @internal */
export namespace Theme$ {
    export const inboundSchema: z.ZodType<Theme, z.ZodTypeDef, unknown> = z.object({
        color: Color$.inboundSchema.default("blue"),
        heroWidth: HeroWidth$.inboundSchema.optional(),
        icon: Icon$.inboundSchema.optional(),
    });

    export type Outbound = {
        color: string;
        heroWidth?: number | undefined;
        icon?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Theme> = z.object({
        color: Color$.outboundSchema.default("blue"),
        heroWidth: HeroWidth$.outboundSchema.optional(),
        icon: Icon$.outboundSchema.optional(),
    });
}
