/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { catchUnrecognizedEnum, OpenEnum, Unrecognized } from "../../types/enums.js";
import * as z from "zod";

export enum Color {
    Red = "red",
    Green = "green",
    Blue = "blue",
}
export type ColorOpen = OpenEnum<typeof Color>;

export enum HeroWidth {
    FourHundredAndEighty = 480,
    SevenHundredAndTwenty = 720,
    OneThousandAndEighty = 1080,
}
export type HeroWidthOpen = OpenEnum<typeof HeroWidth>;

export enum Icon {
    Tick = "tick",
    ThumbsUp = "thumbs-up",
    Fire = "fire",
}

export type Theme = {
    color?: ColorOpen | undefined;
    heroWidth?: HeroWidthOpen | undefined;
    icon?: Icon | undefined;
};

/** @internal */
export namespace Color$ {
    export const inboundSchema: z.ZodType<ColorOpen, z.ZodTypeDef, unknown> = z.union([
        z.nativeEnum(Color),
        z.string().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema: z.ZodType<ColorOpen, z.ZodTypeDef, ColorOpen> = z.union([
        z.nativeEnum(Color),
        z.string().and(z.custom<Unrecognized<string>>()),
    ]);
}

/** @internal */
export namespace HeroWidth$ {
    export const inboundSchema: z.ZodType<HeroWidthOpen, z.ZodTypeDef, unknown> = z.union([
        z.nativeEnum(HeroWidth),
        z.number().transform(catchUnrecognizedEnum),
    ]);

    export const outboundSchema: z.ZodType<HeroWidthOpen, z.ZodTypeDef, HeroWidthOpen> = z.union([
        z.nativeEnum(HeroWidth),
        z.number().and(z.custom<Unrecognized<number>>()),
    ]);
}

/** @internal */
export namespace Icon$ {
    export const inboundSchema: z.ZodNativeEnum<typeof Icon> = z.nativeEnum(Icon);
    export const outboundSchema: z.ZodNativeEnum<typeof Icon> = inboundSchema;
}

/** @internal */
export namespace Theme$ {
    export const inboundSchema: z.ZodType<Theme, z.ZodTypeDef, unknown> = z.object({
        color: Color$.inboundSchema.default(Color.Blue),
        heroWidth: HeroWidth$.inboundSchema.optional(),
        icon: Icon$.inboundSchema.optional(),
    });

    export type Outbound = {
        color: string;
        heroWidth?: number | undefined;
        icon?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Theme> = z.object({
        color: Color$.outboundSchema.default(Color.Blue),
        heroWidth: HeroWidth$.outboundSchema.optional(),
        icon: Icon$.outboundSchema.optional(),
    });
}
