/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ThemeRequestOpaque = {
  color?: string | undefined;
  heroWidth?: number | undefined;
  icon?: string | undefined;
};

/** @internal */
export const ThemeRequestOpaque$inboundSchema: z.ZodType<
  ThemeRequestOpaque,
  z.ZodTypeDef,
  unknown
> = z.object({
  color: z.string().optional(),
  heroWidth: z.number().int().optional(),
  icon: z.string().optional(),
});

/** @internal */
export type ThemeRequestOpaque$Outbound = {
  color?: string | undefined;
  heroWidth?: number | undefined;
  icon?: string | undefined;
};

/** @internal */
export const ThemeRequestOpaque$outboundSchema: z.ZodType<
  ThemeRequestOpaque$Outbound,
  z.ZodTypeDef,
  ThemeRequestOpaque
> = z.object({
  color: z.string().optional(),
  heroWidth: z.number().int().optional(),
  icon: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThemeRequestOpaque$ {
  /** @deprecated use `ThemeRequestOpaque$inboundSchema` instead. */
  export const inboundSchema = ThemeRequestOpaque$inboundSchema;
  /** @deprecated use `ThemeRequestOpaque$outboundSchema` instead. */
  export const outboundSchema = ThemeRequestOpaque$outboundSchema;
  /** @deprecated use `ThemeRequestOpaque$Outbound` instead. */
  export type Outbound = ThemeRequestOpaque$Outbound;
}

export function themeRequestOpaqueToJSON(
  themeRequestOpaque: ThemeRequestOpaque,
): string {
  return JSON.stringify(
    ThemeRequestOpaque$outboundSchema.parse(themeRequestOpaque),
  );
}

export function themeRequestOpaqueFromJSON(
  jsonString: string,
): SafeParseResult<ThemeRequestOpaque, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ThemeRequestOpaque$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ThemeRequestOpaque' from JSON`,
  );
}
