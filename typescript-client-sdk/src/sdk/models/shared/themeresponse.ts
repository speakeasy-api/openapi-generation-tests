/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Theme,
  Theme$inboundSchema,
  Theme$Outbound,
  Theme$outboundSchema,
} from "./theme.js";

export type ThemeResponse = {
  json: Theme;
};

/** @internal */
export const ThemeResponse$inboundSchema: z.ZodType<
  ThemeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  json: Theme$inboundSchema,
});

/** @internal */
export type ThemeResponse$Outbound = {
  json: Theme$Outbound;
};

/** @internal */
export const ThemeResponse$outboundSchema: z.ZodType<
  ThemeResponse$Outbound,
  z.ZodTypeDef,
  ThemeResponse
> = z.object({
  json: Theme$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThemeResponse$ {
  /** @deprecated use `ThemeResponse$inboundSchema` instead. */
  export const inboundSchema = ThemeResponse$inboundSchema;
  /** @deprecated use `ThemeResponse$outboundSchema` instead. */
  export const outboundSchema = ThemeResponse$outboundSchema;
  /** @deprecated use `ThemeResponse$Outbound` instead. */
  export type Outbound = ThemeResponse$Outbound;
}

export function themeResponseToJSON(themeResponse: ThemeResponse): string {
  return JSON.stringify(ThemeResponse$outboundSchema.parse(themeResponse));
}

export function themeResponseFromJSON(
  jsonString: string,
): SafeParseResult<ThemeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ThemeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ThemeResponse' from JSON`,
  );
}
