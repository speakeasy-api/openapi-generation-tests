/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum TypedObject1Type {
    Obj1 = "obj1",
}

export type TypedObject1 = {
    type: TypedObject1Type;
    value: string;
};

/** @internal */
export namespace TypedObject1Type$ {
    export const inboundSchema = z.nativeEnum(TypedObject1Type);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace TypedObject1$ {
    export const inboundSchema: z.ZodType<TypedObject1, z.ZodTypeDef, unknown> = z.object({
        type: TypedObject1Type$.inboundSchema,
        value: z.string(),
    });

    export type Outbound = {
        type: string;
        value: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TypedObject1> = z.object({
        type: TypedObject1Type$.outboundSchema,
        value: z.string(),
    });
}
