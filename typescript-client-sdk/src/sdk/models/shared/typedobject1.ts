/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const TypedObject1Type = {
  Obj1: "obj1",
} as const;
export type TypedObject1Type = ClosedEnum<typeof TypedObject1Type>;

export type TypedObject1 = {
  type: TypedObject1Type;
  value: string;
};

/** @internal */
export const TypedObject1Type$inboundSchema: z.ZodNativeEnum<
  typeof TypedObject1Type
> = z.nativeEnum(TypedObject1Type);

/** @internal */
export const TypedObject1Type$outboundSchema: z.ZodNativeEnum<
  typeof TypedObject1Type
> = TypedObject1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypedObject1Type$ {
  /** @deprecated use `TypedObject1Type$inboundSchema` instead. */
  export const inboundSchema = TypedObject1Type$inboundSchema;
  /** @deprecated use `TypedObject1Type$outboundSchema` instead. */
  export const outboundSchema = TypedObject1Type$outboundSchema;
}

/** @internal */
export const TypedObject1$inboundSchema: z.ZodType<
  TypedObject1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypedObject1Type$inboundSchema,
  value: z.string(),
});

/** @internal */
export type TypedObject1$Outbound = {
  type: string;
  value: string;
};

/** @internal */
export const TypedObject1$outboundSchema: z.ZodType<
  TypedObject1$Outbound,
  z.ZodTypeDef,
  TypedObject1
> = z.object({
  type: TypedObject1Type$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypedObject1$ {
  /** @deprecated use `TypedObject1$inboundSchema` instead. */
  export const inboundSchema = TypedObject1$inboundSchema;
  /** @deprecated use `TypedObject1$outboundSchema` instead. */
  export const outboundSchema = TypedObject1$outboundSchema;
  /** @deprecated use `TypedObject1$Outbound` instead. */
  export type Outbound = TypedObject1$Outbound;
}

export function typedObject1ToJSON(typedObject1: TypedObject1): string {
  return JSON.stringify(TypedObject1$outboundSchema.parse(typedObject1));
}

export function typedObject1FromJSON(
  jsonString: string,
): SafeParseResult<TypedObject1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TypedObject1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TypedObject1' from JSON`,
  );
}
