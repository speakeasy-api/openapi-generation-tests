/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const TypedObject2Type = {
    Obj2: "obj2",
} as const;
export type TypedObject2Type = ClosedEnum<typeof TypedObject2Type>;

export type TypedObject2 = {
    type: TypedObject2Type;
    value: string;
};

/** @internal */
export namespace TypedObject2Type$ {
    export const inboundSchema: z.ZodNativeEnum<typeof TypedObject2Type> =
        z.nativeEnum(TypedObject2Type);
    export const outboundSchema: z.ZodNativeEnum<typeof TypedObject2Type> = inboundSchema;
}

/** @internal */
export namespace TypedObject2$ {
    export const inboundSchema: z.ZodType<TypedObject2, z.ZodTypeDef, unknown> = z.object({
        type: TypedObject2Type$.inboundSchema,
        value: z.string(),
    });

    export type Outbound = {
        type: string;
        value: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TypedObject2> = z.object({
        type: TypedObject2Type$.outboundSchema,
        value: z.string(),
    });
}
