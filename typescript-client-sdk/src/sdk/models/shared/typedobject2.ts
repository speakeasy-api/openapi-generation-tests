/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum TypedObject2Type {
    Obj2 = "obj2",
}

export type TypedObject2 = {
    type: TypedObject2Type;
    value: string;
};

/** @internal */
export namespace TypedObject2Type$ {
    export const inboundSchema = z.nativeEnum(TypedObject2Type);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace TypedObject2$ {
    export const inboundSchema: z.ZodType<TypedObject2, z.ZodTypeDef, unknown> = z
        .object({
            type: TypedObject2Type$.inboundSchema,
            value: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                value: v.value,
            };
        });

    export type Outbound = {
        type: string;
        value: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TypedObject2> = z
        .object({
            type: TypedObject2Type$.outboundSchema,
            value: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                value: v.value,
            };
        });
}
