/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const TypedObject2Type = {
  Obj2: "obj2",
} as const;
export type TypedObject2Type = ClosedEnum<typeof TypedObject2Type>;

export type TypedObject2 = {
  type: TypedObject2Type;
  value: string;
};

/** @internal */
export const TypedObject2Type$inboundSchema: z.ZodNativeEnum<
  typeof TypedObject2Type
> = z.nativeEnum(TypedObject2Type);

/** @internal */
export const TypedObject2Type$outboundSchema: z.ZodNativeEnum<
  typeof TypedObject2Type
> = TypedObject2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypedObject2Type$ {
  /** @deprecated use `TypedObject2Type$inboundSchema` instead. */
  export const inboundSchema = TypedObject2Type$inboundSchema;
  /** @deprecated use `TypedObject2Type$outboundSchema` instead. */
  export const outboundSchema = TypedObject2Type$outboundSchema;
}

/** @internal */
export const TypedObject2$inboundSchema: z.ZodType<
  TypedObject2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypedObject2Type$inboundSchema,
  value: z.string(),
});

/** @internal */
export type TypedObject2$Outbound = {
  type: string;
  value: string;
};

/** @internal */
export const TypedObject2$outboundSchema: z.ZodType<
  TypedObject2$Outbound,
  z.ZodTypeDef,
  TypedObject2
> = z.object({
  type: TypedObject2Type$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypedObject2$ {
  /** @deprecated use `TypedObject2$inboundSchema` instead. */
  export const inboundSchema = TypedObject2$inboundSchema;
  /** @deprecated use `TypedObject2$outboundSchema` instead. */
  export const outboundSchema = TypedObject2$outboundSchema;
  /** @deprecated use `TypedObject2$Outbound` instead. */
  export type Outbound = TypedObject2$Outbound;
}

export function typedObject2ToJSON(typedObject2: TypedObject2): string {
  return JSON.stringify(TypedObject2$outboundSchema.parse(typedObject2));
}

export function typedObject2FromJSON(
  jsonString: string,
): SafeParseResult<TypedObject2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TypedObject2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TypedObject2' from JSON`,
  );
}
