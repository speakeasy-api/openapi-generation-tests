/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const TypedObject3Type = {
  Obj3: "obj3",
} as const;
export type TypedObject3Type = ClosedEnum<typeof TypedObject3Type>;

export type TypedObject3 = {
  type: TypedObject3Type;
  value: string;
};

/** @internal */
export const TypedObject3Type$inboundSchema: z.ZodNativeEnum<
  typeof TypedObject3Type
> = z.nativeEnum(TypedObject3Type);

/** @internal */
export const TypedObject3Type$outboundSchema: z.ZodNativeEnum<
  typeof TypedObject3Type
> = TypedObject3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypedObject3Type$ {
  /** @deprecated use `TypedObject3Type$inboundSchema` instead. */
  export const inboundSchema = TypedObject3Type$inboundSchema;
  /** @deprecated use `TypedObject3Type$outboundSchema` instead. */
  export const outboundSchema = TypedObject3Type$outboundSchema;
}

/** @internal */
export const TypedObject3$inboundSchema: z.ZodType<
  TypedObject3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypedObject3Type$inboundSchema,
  value: z.string(),
});

/** @internal */
export type TypedObject3$Outbound = {
  type: string;
  value: string;
};

/** @internal */
export const TypedObject3$outboundSchema: z.ZodType<
  TypedObject3$Outbound,
  z.ZodTypeDef,
  TypedObject3
> = z.object({
  type: TypedObject3Type$outboundSchema,
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypedObject3$ {
  /** @deprecated use `TypedObject3$inboundSchema` instead. */
  export const inboundSchema = TypedObject3$inboundSchema;
  /** @deprecated use `TypedObject3$outboundSchema` instead. */
  export const outboundSchema = TypedObject3$outboundSchema;
  /** @deprecated use `TypedObject3$Outbound` instead. */
  export type Outbound = TypedObject3$Outbound;
}

export function typedObject3ToJSON(typedObject3: TypedObject3): string {
  return JSON.stringify(TypedObject3$outboundSchema.parse(typedObject3));
}

export function typedObject3FromJSON(
  jsonString: string,
): SafeParseResult<TypedObject3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TypedObject3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TypedObject3' from JSON`,
  );
}
