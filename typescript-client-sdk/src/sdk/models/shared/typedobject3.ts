/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum TypedObject3Type {
    Obj3 = "obj3",
}

export type TypedObject3 = {
    type: TypedObject3Type;
    value: string;
};

/** @internal */
export const TypedObject3Type$ = z.nativeEnum(TypedObject3Type);

/** @internal */
export namespace TypedObject3$ {
    export type Inbound = {
        type: TypedObject3Type;
        value: string;
    };

    export const inboundSchema: z.ZodType<TypedObject3, z.ZodTypeDef, Inbound> = z
        .object({
            type: TypedObject3Type$,
            value: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                value: v.value,
            };
        });

    export type Outbound = {
        type: TypedObject3Type;
        value: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TypedObject3> = z
        .object({
            type: TypedObject3Type$,
            value: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                value: v.value,
            };
        });
}
