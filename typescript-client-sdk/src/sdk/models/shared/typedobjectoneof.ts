/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TypedObject1,
  TypedObject1$inboundSchema,
  TypedObject1$Outbound,
  TypedObject1$outboundSchema,
} from "./typedobject1.js";
import {
  TypedObject2,
  TypedObject2$inboundSchema,
  TypedObject2$Outbound,
  TypedObject2$outboundSchema,
} from "./typedobject2.js";
import {
  TypedObject3,
  TypedObject3$inboundSchema,
  TypedObject3$Outbound,
  TypedObject3$outboundSchema,
} from "./typedobject3.js";

export type TypedObjectOneOf = TypedObject1 | TypedObject2 | TypedObject3;

/** @internal */
export const TypedObjectOneOf$inboundSchema: z.ZodType<
  TypedObjectOneOf,
  z.ZodTypeDef,
  unknown
> = z.union([
  TypedObject1$inboundSchema,
  TypedObject2$inboundSchema,
  TypedObject3$inboundSchema,
]);

/** @internal */
export type TypedObjectOneOf$Outbound =
  | TypedObject1$Outbound
  | TypedObject2$Outbound
  | TypedObject3$Outbound;

/** @internal */
export const TypedObjectOneOf$outboundSchema: z.ZodType<
  TypedObjectOneOf$Outbound,
  z.ZodTypeDef,
  TypedObjectOneOf
> = z.union([
  TypedObject1$outboundSchema,
  TypedObject2$outboundSchema,
  TypedObject3$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypedObjectOneOf$ {
  /** @deprecated use `TypedObjectOneOf$inboundSchema` instead. */
  export const inboundSchema = TypedObjectOneOf$inboundSchema;
  /** @deprecated use `TypedObjectOneOf$outboundSchema` instead. */
  export const outboundSchema = TypedObjectOneOf$outboundSchema;
  /** @deprecated use `TypedObjectOneOf$Outbound` instead. */
  export type Outbound = TypedObjectOneOf$Outbound;
}

export function typedObjectOneOfToJSON(
  typedObjectOneOf: TypedObjectOneOf,
): string {
  return JSON.stringify(
    TypedObjectOneOf$outboundSchema.parse(typedObjectOneOf),
  );
}

export function typedObjectOneOfFromJSON(
  jsonString: string,
): SafeParseResult<TypedObjectOneOf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TypedObjectOneOf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TypedObjectOneOf' from JSON`,
  );
}
