/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { TypedObject1, TypedObject1$ } from "./typedobject1";
import { TypedObject2, TypedObject2$ } from "./typedobject2";
import { TypedObject3, TypedObject3$ } from "./typedobject3";
import * as z from "zod";

export type TypedObjectOneOf = TypedObject1 | TypedObject2 | TypedObject3;

/** @internal */
export namespace TypedObjectOneOf$ {
    export type Inbound = TypedObject1$.Inbound | TypedObject2$.Inbound | TypedObject3$.Inbound;

    export type Outbound = TypedObject1$.Outbound | TypedObject2$.Outbound | TypedObject3$.Outbound;
    export const inboundSchema: z.ZodType<TypedObjectOneOf, z.ZodTypeDef, Inbound> = z.union([
        TypedObject1$.inboundSchema,
        TypedObject2$.inboundSchema,
        TypedObject3$.inboundSchema,
    ]);
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TypedObjectOneOf> = z.union([
        TypedObject1$.outboundSchema,
        TypedObject2$.outboundSchema,
        TypedObject3$.outboundSchema,
    ]);
}
