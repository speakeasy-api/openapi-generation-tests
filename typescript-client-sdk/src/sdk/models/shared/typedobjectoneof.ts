/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import {
    TypedObject1,
    TypedObject1$inboundSchema,
    TypedObject1$Outbound,
    TypedObject1$outboundSchema,
} from "./typedobject1.js";
import {
    TypedObject2,
    TypedObject2$inboundSchema,
    TypedObject2$Outbound,
    TypedObject2$outboundSchema,
} from "./typedobject2.js";
import {
    TypedObject3,
    TypedObject3$inboundSchema,
    TypedObject3$Outbound,
    TypedObject3$outboundSchema,
} from "./typedobject3.js";
import * as z from "zod";

export type TypedObjectOneOf = TypedObject1 | TypedObject2 | TypedObject3;

/** @internal */
export const TypedObjectOneOf$inboundSchema: z.ZodType<TypedObjectOneOf, z.ZodTypeDef, unknown> =
    z.union([TypedObject1$inboundSchema, TypedObject2$inboundSchema, TypedObject3$inboundSchema]);

/** @internal */
export type TypedObjectOneOf$Outbound =
    | TypedObject1$Outbound
    | TypedObject2$Outbound
    | TypedObject3$Outbound;

/** @internal */
export const TypedObjectOneOf$outboundSchema: z.ZodType<
    TypedObjectOneOf$Outbound,
    z.ZodTypeDef,
    TypedObjectOneOf
> = z.union([
    TypedObject1$outboundSchema,
    TypedObject2$outboundSchema,
    TypedObject3$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypedObjectOneOf$ {
    /** @deprecated use `TypedObjectOneOf$inboundSchema` instead. */
    export const inboundSchema = TypedObjectOneOf$inboundSchema;
    /** @deprecated use `TypedObjectOneOf$outboundSchema` instead. */
    export const outboundSchema = TypedObjectOneOf$outboundSchema;
    /** @deprecated use `TypedObjectOneOf$Outbound` instead. */
    export type Outbound = TypedObjectOneOf$Outbound;
}
