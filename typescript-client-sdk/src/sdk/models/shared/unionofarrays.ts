/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type Three = {
  baz: string;
};

export type UnionOfArrays2 = {
  bar: string;
};

export type One = {
  foo: string;
};

export type UnionOfArrays = Array<One> | Array<UnionOfArrays2> | Array<Three>;

/** @internal */
export const Three$inboundSchema: z.ZodType<Three, z.ZodTypeDef, unknown> = z
  .object({
    baz: z.string(),
  });

/** @internal */
export type Three$Outbound = {
  baz: string;
};

/** @internal */
export const Three$outboundSchema: z.ZodType<
  Three$Outbound,
  z.ZodTypeDef,
  Three
> = z.object({
  baz: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Three$ {
  /** @deprecated use `Three$inboundSchema` instead. */
  export const inboundSchema = Three$inboundSchema;
  /** @deprecated use `Three$outboundSchema` instead. */
  export const outboundSchema = Three$outboundSchema;
  /** @deprecated use `Three$Outbound` instead. */
  export type Outbound = Three$Outbound;
}

/** @internal */
export const UnionOfArrays2$inboundSchema: z.ZodType<
  UnionOfArrays2,
  z.ZodTypeDef,
  unknown
> = z.object({
  bar: z.string(),
});

/** @internal */
export type UnionOfArrays2$Outbound = {
  bar: string;
};

/** @internal */
export const UnionOfArrays2$outboundSchema: z.ZodType<
  UnionOfArrays2$Outbound,
  z.ZodTypeDef,
  UnionOfArrays2
> = z.object({
  bar: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnionOfArrays2$ {
  /** @deprecated use `UnionOfArrays2$inboundSchema` instead. */
  export const inboundSchema = UnionOfArrays2$inboundSchema;
  /** @deprecated use `UnionOfArrays2$outboundSchema` instead. */
  export const outboundSchema = UnionOfArrays2$outboundSchema;
  /** @deprecated use `UnionOfArrays2$Outbound` instead. */
  export type Outbound = UnionOfArrays2$Outbound;
}

/** @internal */
export const One$inboundSchema: z.ZodType<One, z.ZodTypeDef, unknown> = z
  .object({
    foo: z.string(),
  });

/** @internal */
export type One$Outbound = {
  foo: string;
};

/** @internal */
export const One$outboundSchema: z.ZodType<One$Outbound, z.ZodTypeDef, One> = z
  .object({
    foo: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One$ {
  /** @deprecated use `One$inboundSchema` instead. */
  export const inboundSchema = One$inboundSchema;
  /** @deprecated use `One$outboundSchema` instead. */
  export const outboundSchema = One$outboundSchema;
  /** @deprecated use `One$Outbound` instead. */
  export type Outbound = One$Outbound;
}

/** @internal */
export const UnionOfArrays$inboundSchema: z.ZodType<
  UnionOfArrays,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.array(z.lazy(() => One$inboundSchema)),
  z.array(z.lazy(() => UnionOfArrays2$inboundSchema)),
  z.array(z.lazy(() => Three$inboundSchema)),
]);

/** @internal */
export type UnionOfArrays$Outbound =
  | Array<One$Outbound>
  | Array<UnionOfArrays2$Outbound>
  | Array<Three$Outbound>;

/** @internal */
export const UnionOfArrays$outboundSchema: z.ZodType<
  UnionOfArrays$Outbound,
  z.ZodTypeDef,
  UnionOfArrays
> = z.union([
  z.array(z.lazy(() => One$outboundSchema)),
  z.array(z.lazy(() => UnionOfArrays2$outboundSchema)),
  z.array(z.lazy(() => Three$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnionOfArrays$ {
  /** @deprecated use `UnionOfArrays$inboundSchema` instead. */
  export const inboundSchema = UnionOfArrays$inboundSchema;
  /** @deprecated use `UnionOfArrays$outboundSchema` instead. */
  export const outboundSchema = UnionOfArrays$outboundSchema;
  /** @deprecated use `UnionOfArrays$Outbound` instead. */
  export type Outbound = UnionOfArrays$Outbound;
}
