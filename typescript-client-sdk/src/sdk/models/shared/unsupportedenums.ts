/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type UnsupportedEnums = {
    booleanEnum: boolean;
    numberEnum: number;
};

/** @internal */
export const UnsupportedEnums$inboundSchema: z.ZodType<UnsupportedEnums, z.ZodTypeDef, unknown> =
    z.object({
        booleanEnum: z.boolean(),
        numberEnum: z.number(),
    });

/** @internal */
export type UnsupportedEnums$Outbound = {
    booleanEnum: boolean;
    numberEnum: number;
};

/** @internal */
export const UnsupportedEnums$outboundSchema: z.ZodType<
    UnsupportedEnums$Outbound,
    z.ZodTypeDef,
    UnsupportedEnums
> = z.object({
    booleanEnum: z.boolean(),
    numberEnum: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnsupportedEnums$ {
    /** @deprecated use `UnsupportedEnums$inboundSchema` instead. */
    export const inboundSchema = UnsupportedEnums$inboundSchema;
    /** @deprecated use `UnsupportedEnums$outboundSchema` instead. */
    export const outboundSchema = UnsupportedEnums$outboundSchema;
    /** @deprecated use `UnsupportedEnums$Outbound` instead. */
    export type Outbound = UnsupportedEnums$Outbound;
}
