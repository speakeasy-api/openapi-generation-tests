/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type ValidCircularReferenceObject = {
    circular?: Array<ValidCircularReferenceObject> | undefined;
};

/** @internal */
export namespace ValidCircularReferenceObject$ {
    export type Inbound = {
        circular?: Array<ValidCircularReferenceObject$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<ValidCircularReferenceObject, z.ZodTypeDef, Inbound> = z
        .object({
            circular: z.array(z.lazy(() => ValidCircularReferenceObject$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.circular === undefined ? null : { circular: v.circular }),
            };
        });

    export type Outbound = {
        circular?: Array<ValidCircularReferenceObject$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ValidCircularReferenceObject> = z
        .object({
            circular: z
                .array(z.lazy(() => ValidCircularReferenceObject$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.circular === undefined ? null : { circular: v.circular }),
            };
        });
}
