/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type ValidCircularReferenceObject = {
    circular?: Array<ValidCircularReferenceObject> | undefined;
};

/** @internal */
export const ValidCircularReferenceObject$inboundSchema: z.ZodType<
    ValidCircularReferenceObject,
    z.ZodTypeDef,
    unknown
> = z.object({
    circular: z.array(z.lazy(() => ValidCircularReferenceObject$inboundSchema)).optional(),
});

/** @internal */
export type ValidCircularReferenceObject$Outbound = {
    circular?: Array<ValidCircularReferenceObject$Outbound> | undefined;
};

/** @internal */
export const ValidCircularReferenceObject$outboundSchema: z.ZodType<
    ValidCircularReferenceObject$Outbound,
    z.ZodTypeDef,
    ValidCircularReferenceObject
> = z.object({
    circular: z.array(z.lazy(() => ValidCircularReferenceObject$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidCircularReferenceObject$ {
    /** @deprecated use `ValidCircularReferenceObject$inboundSchema` instead. */
    export const inboundSchema = ValidCircularReferenceObject$inboundSchema;
    /** @deprecated use `ValidCircularReferenceObject$outboundSchema` instead. */
    export const outboundSchema = ValidCircularReferenceObject$outboundSchema;
    /** @deprecated use `ValidCircularReferenceObject$Outbound` instead. */
    export type Outbound = ValidCircularReferenceObject$Outbound;
}
