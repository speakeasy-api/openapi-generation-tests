/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { Bike, Bike$inboundSchema, Bike$Outbound, Bike$outboundSchema } from "./bike.js";
import { Car, Car$inboundSchema, Car$Outbound, Car$outboundSchema } from "./car.js";
import * as z from "zod";

export type Vehicle = (Car & { vehicleType: "car" }) | (Bike & { vehicleType: "bike" });

/** @internal */
export const Vehicle$inboundSchema: z.ZodType<Vehicle, z.ZodTypeDef, unknown> = z.union([
    Car$inboundSchema.and(
        z
            .object({ vehicleType: z.literal("car") })
            .transform((v) => ({ vehicleType: v.vehicleType }))
    ),
    Bike$inboundSchema.and(
        z
            .object({ vehicleType: z.literal("bike") })
            .transform((v) => ({ vehicleType: v.vehicleType }))
    ),
]);

/** @internal */
export type Vehicle$Outbound =
    | (Car$Outbound & { vehicleType: "car" })
    | (Bike$Outbound & { vehicleType: "bike" });

/** @internal */
export const Vehicle$outboundSchema: z.ZodType<Vehicle$Outbound, z.ZodTypeDef, Vehicle> = z.union([
    Car$outboundSchema.and(
        z
            .object({ vehicleType: z.literal("car") })
            .transform((v) => ({ vehicleType: v.vehicleType }))
    ),
    Bike$outboundSchema.and(
        z
            .object({ vehicleType: z.literal("bike") })
            .transform((v) => ({ vehicleType: v.vehicleType }))
    ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Vehicle$ {
    /** @deprecated use `Vehicle$inboundSchema` instead. */
    export const inboundSchema = Vehicle$inboundSchema;
    /** @deprecated use `Vehicle$outboundSchema` instead. */
    export const outboundSchema = Vehicle$outboundSchema;
    /** @deprecated use `Vehicle$Outbound` instead. */
    export type Outbound = Vehicle$Outbound;
}
