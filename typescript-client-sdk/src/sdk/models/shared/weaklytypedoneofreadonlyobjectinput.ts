/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ReadOnlyObjectInput, ReadOnlyObjectInput$ } from "./readonlyobjectinput";
import { SimpleObject, SimpleObject$ } from "./simpleobject";
import { z } from "zod";

export type WeaklyTypedOneOfReadOnlyObjectInput = ReadOnlyObjectInput | SimpleObject;

/** @internal */
export namespace WeaklyTypedOneOfReadOnlyObjectInput$ {
    export type Inbound = ReadOnlyObjectInput$.Inbound | SimpleObject$.Inbound;

    export type Outbound = ReadOnlyObjectInput$.Outbound | SimpleObject$.Outbound;

    export const inboundSchema: z.ZodType<
        WeaklyTypedOneOfReadOnlyObjectInput,
        z.ZodTypeDef,
        Inbound
    > = z.union([ReadOnlyObjectInput$.inboundSchema, SimpleObject$.inboundSchema]);

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        WeaklyTypedOneOfReadOnlyObjectInput
    > = z.union([ReadOnlyObjectInput$.outboundSchema, SimpleObject$.outboundSchema]);
}
