/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ReadWriteObject,
  ReadWriteObject$inboundSchema,
  ReadWriteObject$Outbound,
  ReadWriteObject$outboundSchema,
} from "./readwriteobject.js";
import {
  SimpleObject,
  SimpleObject$inboundSchema,
  SimpleObject$Outbound,
  SimpleObject$outboundSchema,
} from "./simpleobject.js";

export type WeaklyTypedOneOfReadWriteObject = ReadWriteObject | SimpleObject;

/** @internal */
export const WeaklyTypedOneOfReadWriteObject$inboundSchema: z.ZodType<
  WeaklyTypedOneOfReadWriteObject,
  z.ZodTypeDef,
  unknown
> = z.union([ReadWriteObject$inboundSchema, SimpleObject$inboundSchema]);

/** @internal */
export type WeaklyTypedOneOfReadWriteObject$Outbound =
  | ReadWriteObject$Outbound
  | SimpleObject$Outbound;

/** @internal */
export const WeaklyTypedOneOfReadWriteObject$outboundSchema: z.ZodType<
  WeaklyTypedOneOfReadWriteObject$Outbound,
  z.ZodTypeDef,
  WeaklyTypedOneOfReadWriteObject
> = z.union([ReadWriteObject$outboundSchema, SimpleObject$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WeaklyTypedOneOfReadWriteObject$ {
  /** @deprecated use `WeaklyTypedOneOfReadWriteObject$inboundSchema` instead. */
  export const inboundSchema = WeaklyTypedOneOfReadWriteObject$inboundSchema;
  /** @deprecated use `WeaklyTypedOneOfReadWriteObject$outboundSchema` instead. */
  export const outboundSchema = WeaklyTypedOneOfReadWriteObject$outboundSchema;
  /** @deprecated use `WeaklyTypedOneOfReadWriteObject$Outbound` instead. */
  export type Outbound = WeaklyTypedOneOfReadWriteObject$Outbound;
}

export function weaklyTypedOneOfReadWriteObjectToJSON(
  weaklyTypedOneOfReadWriteObject: WeaklyTypedOneOfReadWriteObject,
): string {
  return JSON.stringify(
    WeaklyTypedOneOfReadWriteObject$outboundSchema.parse(
      weaklyTypedOneOfReadWriteObject,
    ),
  );
}

export function weaklyTypedOneOfReadWriteObjectFromJSON(
  jsonString: string,
): SafeParseResult<WeaklyTypedOneOfReadWriteObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WeaklyTypedOneOfReadWriteObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WeaklyTypedOneOfReadWriteObject' from JSON`,
  );
}
