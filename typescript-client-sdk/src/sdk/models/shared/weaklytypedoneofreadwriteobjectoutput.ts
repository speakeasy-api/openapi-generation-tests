/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ReadWriteObjectOutput, ReadWriteObjectOutput$ } from "./readwriteobjectoutput";
import { SimpleObject, SimpleObject$ } from "./simpleobject";
import * as z from "zod";

export type WeaklyTypedOneOfReadWriteObjectOutput = ReadWriteObjectOutput | SimpleObject;

/** @internal */
export namespace WeaklyTypedOneOfReadWriteObjectOutput$ {
    export type Inbound = ReadWriteObjectOutput$.Inbound | SimpleObject$.Inbound;

    export type Outbound = ReadWriteObjectOutput$.Outbound | SimpleObject$.Outbound;
    export const inboundSchema: z.ZodType<
        WeaklyTypedOneOfReadWriteObjectOutput,
        z.ZodTypeDef,
        Inbound
    > = z.union([ReadWriteObjectOutput$.inboundSchema, SimpleObject$.inboundSchema]);
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        WeaklyTypedOneOfReadWriteObjectOutput
    > = z.union([ReadWriteObjectOutput$.outboundSchema, SimpleObject$.outboundSchema]);
}
