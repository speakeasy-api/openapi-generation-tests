/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SimpleObject, SimpleObject$ } from "./simpleobject";
import { WriteOnlyObject, WriteOnlyObject$ } from "./writeonlyobject";
import { z } from "zod";

export type WeaklyTypedOneOfWriteOnlyObject = WriteOnlyObject | SimpleObject;

/** @internal */
export namespace WeaklyTypedOneOfWriteOnlyObject$ {
    export type Inbound = WriteOnlyObject$.Inbound | SimpleObject$.Inbound;

    export type Outbound = WriteOnlyObject$.Outbound | SimpleObject$.Outbound;

    export const inboundSchema: z.ZodType<WeaklyTypedOneOfWriteOnlyObject, z.ZodTypeDef, Inbound> =
        z.union([WriteOnlyObject$.inboundSchema, SimpleObject$.inboundSchema]);

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        WeaklyTypedOneOfWriteOnlyObject
    > = z.union([WriteOnlyObject$.outboundSchema, SimpleObject$.outboundSchema]);
}
