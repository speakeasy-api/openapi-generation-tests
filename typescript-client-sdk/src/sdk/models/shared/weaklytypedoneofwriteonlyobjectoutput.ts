/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SimpleObject, SimpleObject$ } from "./simpleobject";
import { WriteOnlyObjectOutput, WriteOnlyObjectOutput$ } from "./writeonlyobjectoutput";
import * as z from "zod";

export type WeaklyTypedOneOfWriteOnlyObjectOutput = WriteOnlyObjectOutput | SimpleObject;

/** @internal */
export namespace WeaklyTypedOneOfWriteOnlyObjectOutput$ {
    export type Inbound = WriteOnlyObjectOutput$.Inbound | SimpleObject$.Inbound;

    export type Outbound = WriteOnlyObjectOutput$.Outbound | SimpleObject$.Outbound;
    export const inboundSchema: z.ZodType<
        WeaklyTypedOneOfWriteOnlyObjectOutput,
        z.ZodTypeDef,
        Inbound
    > = z.union([WriteOnlyObjectOutput$.inboundSchema, SimpleObject$.inboundSchema]);
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        WeaklyTypedOneOfWriteOnlyObjectOutput
    > = z.union([WriteOnlyObjectOutput$.outboundSchema, SimpleObject$.outboundSchema]);
}
