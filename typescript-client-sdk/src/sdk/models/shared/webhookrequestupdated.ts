/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SimpleObject,
  SimpleObject$inboundSchema,
  SimpleObject$Outbound,
  SimpleObject$outboundSchema,
} from "./simpleobject.js";

export const WebhookRequestUpdatedType = {
  WebhookUpdated: "webhook.updated",
} as const;
export type WebhookRequestUpdatedType = ClosedEnum<
  typeof WebhookRequestUpdatedType
>;

export type WebhookRequestUpdated = {
  /**
   * A simple object that uses all our supported primitive types and enums and has optional properties.
   */
  data: SimpleObject;
  type: WebhookRequestUpdatedType;
};

/** @internal */
export const WebhookRequestUpdatedType$inboundSchema: z.ZodNativeEnum<
  typeof WebhookRequestUpdatedType
> = z.nativeEnum(WebhookRequestUpdatedType);

/** @internal */
export const WebhookRequestUpdatedType$outboundSchema: z.ZodNativeEnum<
  typeof WebhookRequestUpdatedType
> = WebhookRequestUpdatedType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookRequestUpdatedType$ {
  /** @deprecated use `WebhookRequestUpdatedType$inboundSchema` instead. */
  export const inboundSchema = WebhookRequestUpdatedType$inboundSchema;
  /** @deprecated use `WebhookRequestUpdatedType$outboundSchema` instead. */
  export const outboundSchema = WebhookRequestUpdatedType$outboundSchema;
}

/** @internal */
export const WebhookRequestUpdated$inboundSchema: z.ZodType<
  WebhookRequestUpdated,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: SimpleObject$inboundSchema,
  type: WebhookRequestUpdatedType$inboundSchema,
});

/** @internal */
export type WebhookRequestUpdated$Outbound = {
  data: SimpleObject$Outbound;
  type: string;
};

/** @internal */
export const WebhookRequestUpdated$outboundSchema: z.ZodType<
  WebhookRequestUpdated$Outbound,
  z.ZodTypeDef,
  WebhookRequestUpdated
> = z.object({
  data: SimpleObject$outboundSchema,
  type: WebhookRequestUpdatedType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookRequestUpdated$ {
  /** @deprecated use `WebhookRequestUpdated$inboundSchema` instead. */
  export const inboundSchema = WebhookRequestUpdated$inboundSchema;
  /** @deprecated use `WebhookRequestUpdated$outboundSchema` instead. */
  export const outboundSchema = WebhookRequestUpdated$outboundSchema;
  /** @deprecated use `WebhookRequestUpdated$Outbound` instead. */
  export type Outbound = WebhookRequestUpdated$Outbound;
}

export function webhookRequestUpdatedToJSON(
  webhookRequestUpdated: WebhookRequestUpdated,
): string {
  return JSON.stringify(
    WebhookRequestUpdated$outboundSchema.parse(webhookRequestUpdated),
  );
}

export function webhookRequestUpdatedFromJSON(
  jsonString: string,
): SafeParseResult<WebhookRequestUpdated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookRequestUpdated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookRequestUpdated' from JSON`,
  );
}
