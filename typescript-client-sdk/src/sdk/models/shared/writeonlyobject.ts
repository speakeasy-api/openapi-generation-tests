/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type WriteOnlyObject = {
    bool: boolean;
    num: number;
    string: string;
};

/** @internal */
export const WriteOnlyObject$inboundSchema: z.ZodType<WriteOnlyObject, z.ZodTypeDef, unknown> =
    z.object({
        bool: z.boolean(),
        num: z.number(),
        string: z.string(),
    });

/** @internal */
export type WriteOnlyObject$Outbound = {
    bool: boolean;
    num: number;
    string: string;
};

/** @internal */
export const WriteOnlyObject$outboundSchema: z.ZodType<
    WriteOnlyObject$Outbound,
    z.ZodTypeDef,
    WriteOnlyObject
> = z.object({
    bool: z.boolean(),
    num: z.number(),
    string: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WriteOnlyObject$ {
    /** @deprecated use `WriteOnlyObject$inboundSchema` instead. */
    export const inboundSchema = WriteOnlyObject$inboundSchema;
    /** @deprecated use `WriteOnlyObject$outboundSchema` instead. */
    export const outboundSchema = WriteOnlyObject$outboundSchema;
    /** @deprecated use `WriteOnlyObject$Outbound` instead. */
    export type Outbound = WriteOnlyObject$Outbound;
}
