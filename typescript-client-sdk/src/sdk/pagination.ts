/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { dlv } from "../lib/dlv.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { SDKError } from "./models/errors/sdkerror.js";
import { SDKValidationError } from "./models/errors/sdkvalidationerror.js";
import * as operations from "./models/operations/index.js";
import { PaginationCursorBodyServerList } from "./models/operations/paginationcursorbody.js";
import { PaginationCursorNonNumericServerList } from "./models/operations/paginationcursornonnumeric.js";
import { PaginationCursorParamsServerList } from "./models/operations/paginationcursorparams.js";
import { PaginationLimitOffsetDeepOutputsPageBodyServerList } from "./models/operations/paginationlimitoffsetdeepoutputspagebody.js";
import { PaginationLimitOffsetOffsetBodyServerList } from "./models/operations/paginationlimitoffsetoffsetbody.js";
import { PaginationLimitOffsetOffsetParamsServerList } from "./models/operations/paginationlimitoffsetoffsetparams.js";
import { PaginationLimitOffsetPageBodyServerList } from "./models/operations/paginationlimitoffsetpagebody.js";
import { PaginationLimitOffsetPageParamsServerList } from "./models/operations/paginationlimitoffsetpageparams.js";
import { PaginationURLParamsServerList } from "./models/operations/paginationurlparams.js";
import { PaginationWithRetriesServerList } from "./models/operations/paginationwithretries.js";
import * as shared from "./models/shared/index.js";
import { unwrap as unwrap$ } from "./types/fp.js";
import { createPageIterator, PageIterator, Paginator } from "./types/operations.js";
import jp from "jsonpath";

const URL_OVERRIDE = Symbol("URL_OVERRIDE");

export class Pagination extends ClientSDK {
    async paginationCursorBody(
        request: operations.PaginationCursorBodyRequestBody,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationCursorBodyResponse>> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.PaginationCursorBodyRequestBody$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const baseURL$ =
            options?.serverURL ||
            pathToFunc(PaginationCursorBodyServerList[0], { charEncoding: "percent" })();

        const path$ = pathToFunc("/pagination/cursor")();

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "paginationCursorBody",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PUT",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$, raw$] = await m$.match<
            operations.PaginationCursorBodyResponse,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.PaginationCursorBodyResponse$inboundSchema, { key: "Result" }),
            m$.fail(["4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        const nextFunc = (
            responseData: unknown
        ): Paginator<operations.PaginationCursorBodyResponse> => {
            const nextCursor = jp.value(responseData, "$.resultArray[(@.length-1)]");

            if (nextCursor == null) {
                return () => null;
            }

            return () =>
                this.paginationCursorBody(
                    {
                        ...input$,
                        cursor: nextCursor,
                    },
                    options
                );
        };

        const page$ = { ...unwrap$(result$), next: nextFunc(raw$) };
        return { ...page$, ...createPageIterator(page$, !result$.ok) };
    }

    async paginationCursorNonNumeric(
        cursor?: string | undefined,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationCursorNonNumericResponse>> {
        const input$: operations.PaginationCursorNonNumericRequest = {
            cursor: cursor,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.PaginationCursorNonNumericRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const baseURL$ =
            options?.serverURL ||
            pathToFunc(PaginationCursorNonNumericServerList[0], { charEncoding: "percent" })();

        const path$ = pathToFunc("/pagination/cursor_non_numeric")();

        const query$ = encodeFormQuery$({
            cursor: payload$.cursor,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "paginationCursorNonNumeric",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$, raw$] = await m$.match<
            operations.PaginationCursorNonNumericResponse,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.PaginationCursorNonNumericResponse$inboundSchema, {
                key: "Result",
            }),
            m$.fail(["4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        const nextFunc = (
            responseData: unknown
        ): Paginator<operations.PaginationCursorNonNumericResponse> => {
            const nextCursor = jp.value(responseData, "$.resultArray[(@.length-1)]");

            if (nextCursor == null) {
                return () => null;
            }

            return () => this.paginationCursorNonNumeric(nextCursor, options);
        };

        const page$ = { ...unwrap$(result$), next: nextFunc(raw$) };
        return { ...page$, ...createPageIterator(page$, !result$.ok) };
    }

    async paginationCursorParams(
        cursor: number,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationCursorParamsResponse>> {
        const input$: operations.PaginationCursorParamsRequest = {
            cursor: cursor,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.PaginationCursorParamsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const baseURL$ =
            options?.serverURL ||
            pathToFunc(PaginationCursorParamsServerList[0], { charEncoding: "percent" })();

        const path$ = pathToFunc("/pagination/cursor")();

        const query$ = encodeFormQuery$({
            cursor: payload$.cursor,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "paginationCursorParams",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$, raw$] = await m$.match<
            operations.PaginationCursorParamsResponse,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.PaginationCursorParamsResponse$inboundSchema, {
                key: "Result",
            }),
            m$.fail(["4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        const nextFunc = (
            responseData: unknown
        ): Paginator<operations.PaginationCursorParamsResponse> => {
            const nextCursor = jp.value(responseData, "$.resultArray[(@.length-1)]");

            if (nextCursor == null) {
                return () => null;
            }

            return () => this.paginationCursorParams(nextCursor, options);
        };

        const page$ = { ...unwrap$(result$), next: nextFunc(raw$) };
        return { ...page$, ...createPageIterator(page$, !result$.ok) };
    }

    async paginationLimitOffsetDeepOutputsPageBody(
        request: shared.LimitOffsetConfig,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationLimitOffsetDeepOutputsPageBodyResponse>> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => shared.LimitOffsetConfig$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const baseURL$ =
            options?.serverURL ||
            pathToFunc(PaginationLimitOffsetDeepOutputsPageBodyServerList[0], {
                charEncoding: "percent",
            })();

        const path$ = pathToFunc("/pagination/limitoffset/deep_outputs/page")();

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "paginationLimitOffsetDeepOutputsPageBody",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PUT",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$, raw$] = await m$.match<
            operations.PaginationLimitOffsetDeepOutputsPageBodyResponse,
            SDKError | SDKValidationError
        >(
            m$.json(
                200,
                operations.PaginationLimitOffsetDeepOutputsPageBodyResponse$inboundSchema,
                { key: "Result" }
            ),
            m$.fail(["4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        const nextFunc = (
            responseData: unknown
        ): Paginator<operations.PaginationLimitOffsetDeepOutputsPageBodyResponse> => {
            const page = input$.page || 0;
            const nextPage = page + 1;
            const numPages = dlv(responseData, "pageInfo.numPages");
            if (numPages == null || numPages <= page) {
                return () => null;
            }

            if (!responseData) {
                return () => null;
            }

            return () =>
                this.paginationLimitOffsetDeepOutputsPageBody(
                    {
                        ...input$,
                        page: nextPage,
                    },
                    options
                );
        };

        const page$ = { ...unwrap$(result$), next: nextFunc(raw$) };
        return { ...page$, ...createPageIterator(page$, !result$.ok) };
    }

    async paginationLimitOffsetOffsetBody(
        request: shared.LimitOffsetConfig,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationLimitOffsetOffsetBodyResponse>> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => shared.LimitOffsetConfig$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const baseURL$ =
            options?.serverURL ||
            pathToFunc(PaginationLimitOffsetOffsetBodyServerList[0], { charEncoding: "percent" })();

        const path$ = pathToFunc("/pagination/limitoffset/offset")();

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "paginationLimitOffsetOffsetBody",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PUT",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$, raw$] = await m$.match<
            operations.PaginationLimitOffsetOffsetBodyResponse,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.PaginationLimitOffsetOffsetBodyResponse$inboundSchema, {
                key: "Result",
            }),
            m$.fail(["4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        const nextFunc = (
            responseData: unknown
        ): Paginator<operations.PaginationLimitOffsetOffsetBodyResponse> => {
            const offset = input$.offset || 0;

            if (!responseData) {
                return () => null;
            }
            const results = dlv(responseData, "resultArray");
            if (!Array.isArray(results) || !results.length) {
                return () => null;
            }
            const limit = input$.limit || 0;
            if (results.length < limit) {
                return () => null;
            }
            const nextOffset = offset + results.length;

            return () =>
                this.paginationLimitOffsetOffsetBody(
                    {
                        ...input$,
                        offset: nextOffset,
                    },
                    options
                );
        };

        const page$ = { ...unwrap$(result$), next: nextFunc(raw$) };
        return { ...page$, ...createPageIterator(page$, !result$.ok) };
    }

    async paginationLimitOffsetOffsetParams(
        limit?: number | undefined,
        offset?: number | undefined,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationLimitOffsetOffsetParamsResponse>> {
        const input$: operations.PaginationLimitOffsetOffsetParamsRequest = {
            limit: limit,
            offset: offset,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) =>
                operations.PaginationLimitOffsetOffsetParamsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const baseURL$ =
            options?.serverURL ||
            pathToFunc(PaginationLimitOffsetOffsetParamsServerList[0], {
                charEncoding: "percent",
            })();

        const path$ = pathToFunc("/pagination/limitoffset/offset")();

        const query$ = encodeFormQuery$({
            limit: payload$.limit,
            offset: payload$.offset,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "paginationLimitOffsetOffsetParams",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$, raw$] = await m$.match<
            operations.PaginationLimitOffsetOffsetParamsResponse,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.PaginationLimitOffsetOffsetParamsResponse$inboundSchema, {
                key: "Result",
            }),
            m$.fail(["4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        const nextFunc = (
            responseData: unknown
        ): Paginator<operations.PaginationLimitOffsetOffsetParamsResponse> => {
            const offset = input$.offset || 0;

            if (!responseData) {
                return () => null;
            }
            const results = dlv(responseData, "resultArray");
            if (!Array.isArray(results) || !results.length) {
                return () => null;
            }
            const limit = input$.limit || 0;
            if (results.length < limit) {
                return () => null;
            }
            const nextOffset = offset + results.length;

            return () => this.paginationLimitOffsetOffsetParams(limit, nextOffset, options);
        };

        const page$ = { ...unwrap$(result$), next: nextFunc(raw$) };
        return { ...page$, ...createPageIterator(page$, !result$.ok) };
    }

    async paginationLimitOffsetPageBody(
        request: shared.LimitOffsetConfig,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationLimitOffsetPageBodyResponse>> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => shared.LimitOffsetConfig$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const baseURL$ =
            options?.serverURL ||
            pathToFunc(PaginationLimitOffsetPageBodyServerList[0], { charEncoding: "percent" })();

        const path$ = pathToFunc("/pagination/limitoffset/page")();

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "paginationLimitOffsetPageBody",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PUT",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$, raw$] = await m$.match<
            operations.PaginationLimitOffsetPageBodyResponse,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.PaginationLimitOffsetPageBodyResponse$inboundSchema, {
                key: "Result",
            }),
            m$.fail(["4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        const nextFunc = (
            responseData: unknown
        ): Paginator<operations.PaginationLimitOffsetPageBodyResponse> => {
            const page = input$.page || 0;
            const nextPage = page + 1;
            const numPages = dlv(responseData, "numPages");
            if (numPages == null || numPages <= page) {
                return () => null;
            }

            if (!responseData) {
                return () => null;
            }

            return () =>
                this.paginationLimitOffsetPageBody(
                    {
                        ...input$,
                        page: nextPage,
                    },
                    options
                );
        };

        const page$ = { ...unwrap$(result$), next: nextFunc(raw$) };
        return { ...page$, ...createPageIterator(page$, !result$.ok) };
    }

    async paginationLimitOffsetPageParams(
        page: number,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationLimitOffsetPageParamsResponse>> {
        const input$: operations.PaginationLimitOffsetPageParamsRequest = {
            page: page,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) =>
                operations.PaginationLimitOffsetPageParamsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const baseURL$ =
            options?.serverURL ||
            pathToFunc(PaginationLimitOffsetPageParamsServerList[0], { charEncoding: "percent" })();

        const path$ = pathToFunc("/pagination/limitoffset/page")();

        const query$ = encodeFormQuery$({
            page: payload$.page,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "paginationLimitOffsetPageParams",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$, raw$] = await m$.match<
            operations.PaginationLimitOffsetPageParamsResponse,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.PaginationLimitOffsetPageParamsResponse$inboundSchema, {
                key: "Result",
            }),
            m$.fail(["4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        const nextFunc = (
            responseData: unknown
        ): Paginator<operations.PaginationLimitOffsetPageParamsResponse> => {
            const page = input$.page || 0;
            const nextPage = page + 1;

            if (!responseData) {
                return () => null;
            }
            const results = dlv(responseData, "resultArray");
            if (!Array.isArray(results) || !results.length) {
                return () => null;
            }

            return () => this.paginationLimitOffsetPageParams(nextPage, options);
        };

        const page$ = { ...unwrap$(result$), next: nextFunc(raw$) };
        return { ...page$, ...createPageIterator(page$, !result$.ok) };
    }

    async paginationURLParams(
        attempts: number,
        isReferencePath?: string | undefined,
        options?: RequestOptions & { serverURL?: string; [URL_OVERRIDE]?: URL }
    ): Promise<PageIterator<operations.PaginationURLParamsResponse>> {
        const input$: operations.PaginationURLParamsRequest = {
            attempts: attempts,
            isReferencePath: isReferencePath,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.PaginationURLParamsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;
        const baseURL$ =
            options?.[URL_OVERRIDE] &&
            options[URL_OVERRIDE].origin &&
            options[URL_OVERRIDE].origin !== ""
                ? options[URL_OVERRIDE].origin
                : options?.serverURL ||
                  pathToFunc(PaginationURLParamsServerList[0], { charEncoding: "percent" })();

        const path$ = options?.[URL_OVERRIDE]
            ? options[URL_OVERRIDE].pathname
            : pathToFunc("/pagination/url")();

        const query$ = options?.[URL_OVERRIDE]
            ? options[URL_OVERRIDE].search.substring(1)
            : encodeFormQuery$({
                  attempts: payload$.attempts,
                  "is-reference-path": payload$["is-reference-path"],
              });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "paginationURLParams",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$, raw$] = await m$.match<
            operations.PaginationURLParamsResponse,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.PaginationURLParamsResponse$inboundSchema, { key: "Result" }),
            m$.fail(["4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        const nextFunc = (
            responseData: unknown
        ): Paginator<operations.PaginationURLParamsResponse> => {
            let nextURL = dlv(responseData, "next");
            if (nextURL == null) {
                return () => null;
            }

            if (nextURL.startsWith("/")) {
                nextURL = `${baseURL$}${nextURL}`;
            }

            try {
                new URL(nextURL);
            } catch (_error) {
                return () => null;
            }

            return () =>
                this.paginationURLParams(attempts, isReferencePath, {
                    ...options,
                    [URL_OVERRIDE]: new URL(nextURL),
                });
        };

        const page$ = { ...unwrap$(result$), next: nextFunc(raw$) };
        return { ...page$, ...createPageIterator(page$, !result$.ok) };
    }

    async paginationWithRetries(
        cursor?: string | undefined,
        faultSettings?: string | undefined,
        requestId?: string | undefined,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationWithRetriesResponse>> {
        const input$: operations.PaginationWithRetriesRequest = {
            cursor: cursor,
            faultSettings: faultSettings,
            requestId: requestId,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.PaginationWithRetriesRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const baseURL$ =
            options?.serverURL ||
            pathToFunc(PaginationWithRetriesServerList[0], { charEncoding: "percent" })();

        const path$ = pathToFunc("/pagination/cursor_non_numeric#withRetries")();

        const query$ = encodeFormQuery$({
            cursor: payload$.cursor,
        });

        const headers$ = new Headers({
            Accept: "application/json",
            "fault-settings": encodeSimple$("fault-settings", payload$["fault-settings"], {
                explode: false,
                charEncoding: "none",
            }),
            "request-id": encodeSimple$("request-id", payload$["request-id"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "paginationWithRetries",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries ||
                this.options$.retryConfig || {
                    strategy: "backoff",
                    backoff: {
                        initialInterval: 10,
                        maxInterval: 100,
                        exponent: 1.5,
                        maxElapsedTime: 1000,
                    },
                    retryConnectionErrors: false,
                },
            retryCodes: options?.retryCodes || ["503"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$, raw$] = await m$.match<
            operations.PaginationWithRetriesResponse,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.PaginationWithRetriesResponse$inboundSchema, { key: "Result" }),
            m$.fail(["4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        const nextFunc = (
            responseData: unknown
        ): Paginator<operations.PaginationWithRetriesResponse> => {
            const nextCursor = jp.value(responseData, "$.resultArray[(@.length-1)]");

            if (nextCursor == null) {
                return () => null;
            }

            return () => this.paginationWithRetries(nextCursor, faultSettings, requestId, options);
        };

        const page$ = { ...unwrap$(result$), next: nextFunc(raw$) };
        return { ...page$, ...createPageIterator(page$, !result$.ok) };
    }
}
