/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "./models/errors";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { createPageIterator, PageIterator, Paginator } from "./types";
import jp from "jsonpath";

const URL_OVERRIDE = Symbol("URL_OVERRIDE");

export class Pagination extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    async paginationCursorBody(
        request: operations.PaginationCursorBodyRequestBody,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationCursorBodyResponse>> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.PaginationCursorBodyRequestBody$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });
        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.PaginationCursorBodyServerList[0], {
                charEncoding: "percent",
            })();

        const path$ = this.templateURLComponent("/pagination/cursor")();

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "paginationCursorBody",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PUT",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const nextFunc = (
            responseData: unknown
        ): Paginator<operations.PaginationCursorBodyResponse> => {
            const nextCursor = jp.value(responseData, "$.resultArray[(@.length-1)]");
            if (nextCursor == null) {
                return () => null;
            }

            return () =>
                this.paginationCursorBody(
                    {
                        ...input$,
                        cursor: nextCursor,
                    },
                    options
                );
        };

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const parsed = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.PaginationCursorBodyResponse$.inboundSchema.parse({
                        ...responseFields$,
                        res: val$,
                    });
                },
                "Response validation failed"
            );
            const next$ = nextFunc(responseBody);
            const page$ = { ...parsed, next: next$ };
            const result = { ...page$, ...createPageIterator(page$) };
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError(
                "Unexpected API response status or content-type",
                response,
                responseBody
            );
        }
    }

    async paginationCursorNonNumeric(
        cursor?: string | undefined,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationCursorNonNumericResponse>> {
        const input$: operations.PaginationCursorNonNumericRequest = {
            cursor: cursor,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.PaginationCursorNonNumericRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;
        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.PaginationCursorNonNumericServerList[0], {
                charEncoding: "percent",
            })();

        const path$ = this.templateURLComponent("/pagination/cursor_non_numeric")();

        const query$ = [
            enc$.encodeForm("cursor", payload$.cursor, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "paginationCursorNonNumeric",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const nextFunc = (
            responseData: unknown
        ): Paginator<operations.PaginationCursorNonNumericResponse> => {
            const nextCursor = jp.value(responseData, "$.resultArray[(@.length-1)]");
            if (nextCursor == null) {
                return () => null;
            }

            return () => this.paginationCursorNonNumeric(nextCursor, options);
        };

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const parsed = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.PaginationCursorNonNumericResponse$.inboundSchema.parse({
                        ...responseFields$,
                        res: val$,
                    });
                },
                "Response validation failed"
            );
            const next$ = nextFunc(responseBody);
            const page$ = { ...parsed, next: next$ };
            const result = { ...page$, ...createPageIterator(page$) };
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError(
                "Unexpected API response status or content-type",
                response,
                responseBody
            );
        }
    }

    async paginationCursorParams(
        cursor: number,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationCursorParamsResponse>> {
        const input$: operations.PaginationCursorParamsRequest = {
            cursor: cursor,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.PaginationCursorParamsRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;
        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.PaginationCursorParamsServerList[0], {
                charEncoding: "percent",
            })();

        const path$ = this.templateURLComponent("/pagination/cursor")();

        const query$ = [
            enc$.encodeForm("cursor", payload$.cursor, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "paginationCursorParams",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const nextFunc = (
            responseData: unknown
        ): Paginator<operations.PaginationCursorParamsResponse> => {
            const nextCursor = jp.value(responseData, "$.resultArray[(@.length-1)]");
            if (nextCursor == null) {
                return () => null;
            }

            return () => this.paginationCursorParams(nextCursor, options);
        };

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const parsed = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.PaginationCursorParamsResponse$.inboundSchema.parse({
                        ...responseFields$,
                        res: val$,
                    });
                },
                "Response validation failed"
            );
            const next$ = nextFunc(responseBody);
            const page$ = { ...parsed, next: next$ };
            const result = { ...page$, ...createPageIterator(page$) };
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError(
                "Unexpected API response status or content-type",
                response,
                responseBody
            );
        }
    }

    async paginationLimitOffsetOffsetBody(
        request: shared.LimitOffsetConfig,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationLimitOffsetOffsetBodyResponse>> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => shared.LimitOffsetConfig$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });
        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.PaginationLimitOffsetOffsetBodyServerList[0], {
                charEncoding: "percent",
            })();

        const path$ = this.templateURLComponent("/pagination/limitoffset/offset")();

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "paginationLimitOffsetOffsetBody",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PUT",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const nextFunc = (
            responseData: unknown
        ): Paginator<operations.PaginationLimitOffsetOffsetBodyResponse> => {
            const offset = input$.offset || 0;

            if (!responseData) {
                return () => null;
            }
            const results = jp.value(responseData, "$.resultArray");
            if (!results.length) {
                return () => null;
            }
            const limit = input$.limit || 0;
            if (results.length < limit) {
                return () => null;
            }
            const nextOffset = offset + results.length;

            return () =>
                this.paginationLimitOffsetOffsetBody(
                    {
                        ...input$,
                        offset: nextOffset,
                    },
                    options
                );
        };

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const parsed = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.PaginationLimitOffsetOffsetBodyResponse$.inboundSchema.parse({
                        ...responseFields$,
                        res: val$,
                    });
                },
                "Response validation failed"
            );
            const next$ = nextFunc(responseBody);
            const page$ = { ...parsed, next: next$ };
            const result = { ...page$, ...createPageIterator(page$) };
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError(
                "Unexpected API response status or content-type",
                response,
                responseBody
            );
        }
    }

    async paginationLimitOffsetOffsetParams(
        limit?: number | undefined,
        offset?: number | undefined,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationLimitOffsetOffsetParamsResponse>> {
        const input$: operations.PaginationLimitOffsetOffsetParamsRequest = {
            limit: limit,
            offset: offset,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.PaginationLimitOffsetOffsetParamsRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;
        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.PaginationLimitOffsetOffsetParamsServerList[0], {
                charEncoding: "percent",
            })();

        const path$ = this.templateURLComponent("/pagination/limitoffset/offset")();

        const query$ = [
            enc$.encodeForm("limit", payload$.limit, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("offset", payload$.offset, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "paginationLimitOffsetOffsetParams",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const nextFunc = (
            responseData: unknown
        ): Paginator<operations.PaginationLimitOffsetOffsetParamsResponse> => {
            const offset = input$.offset || 0;

            if (!responseData) {
                return () => null;
            }
            const results = jp.value(responseData, "$.resultArray");
            if (!results.length) {
                return () => null;
            }
            const limit = input$.limit || 0;
            if (results.length < limit) {
                return () => null;
            }
            const nextOffset = offset + results.length;

            return () => this.paginationLimitOffsetOffsetParams(limit, nextOffset, options);
        };

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const parsed = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.PaginationLimitOffsetOffsetParamsResponse$.inboundSchema.parse(
                        {
                            ...responseFields$,
                            res: val$,
                        }
                    );
                },
                "Response validation failed"
            );
            const next$ = nextFunc(responseBody);
            const page$ = { ...parsed, next: next$ };
            const result = { ...page$, ...createPageIterator(page$) };
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError(
                "Unexpected API response status or content-type",
                response,
                responseBody
            );
        }
    }

    async paginationLimitOffsetPageBody(
        request: shared.LimitOffsetConfig,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationLimitOffsetPageBodyResponse>> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => shared.LimitOffsetConfig$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });
        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.PaginationLimitOffsetPageBodyServerList[0], {
                charEncoding: "percent",
            })();

        const path$ = this.templateURLComponent("/pagination/limitoffset/page")();

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "paginationLimitOffsetPageBody",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PUT",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const nextFunc = (
            responseData: unknown
        ): Paginator<operations.PaginationLimitOffsetPageBodyResponse> => {
            const page = input$.page || 0;
            const nextPage = page + 1;
            const numPages = jp.value(responseData, "$.numPages");
            if (numPages == null || numPages <= page) {
                return () => null;
            }

            if (!responseData) {
                return () => null;
            }

            return () =>
                this.paginationLimitOffsetPageBody(
                    {
                        ...input$,
                        page: nextPage,
                    },
                    options
                );
        };

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const parsed = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.PaginationLimitOffsetPageBodyResponse$.inboundSchema.parse({
                        ...responseFields$,
                        res: val$,
                    });
                },
                "Response validation failed"
            );
            const next$ = nextFunc(responseBody);
            const page$ = { ...parsed, next: next$ };
            const result = { ...page$, ...createPageIterator(page$) };
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError(
                "Unexpected API response status or content-type",
                response,
                responseBody
            );
        }
    }

    async paginationLimitOffsetPageParams(
        page: number,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationLimitOffsetPageParamsResponse>> {
        const input$: operations.PaginationLimitOffsetPageParamsRequest = {
            page: page,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.PaginationLimitOffsetPageParamsRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;
        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.PaginationLimitOffsetPageParamsServerList[0], {
                charEncoding: "percent",
            })();

        const path$ = this.templateURLComponent("/pagination/limitoffset/page")();

        const query$ = [
            enc$.encodeForm("page", payload$.page, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "paginationLimitOffsetPageParams",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const nextFunc = (
            responseData: unknown
        ): Paginator<operations.PaginationLimitOffsetPageParamsResponse> => {
            const page = input$.page || 0;
            const nextPage = page + 1;

            if (!responseData) {
                return () => null;
            }
            const results = jp.value(responseData, "$.resultArray");
            if (!results.length) {
                return () => null;
            }

            return () => this.paginationLimitOffsetPageParams(nextPage, options);
        };

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const parsed = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.PaginationLimitOffsetPageParamsResponse$.inboundSchema.parse({
                        ...responseFields$,
                        res: val$,
                    });
                },
                "Response validation failed"
            );
            const next$ = nextFunc(responseBody);
            const page$ = { ...parsed, next: next$ };
            const result = { ...page$, ...createPageIterator(page$) };
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError(
                "Unexpected API response status or content-type",
                response,
                responseBody
            );
        }
    }

    async paginationURLParams(
        attempts: number,
        isReferencePath?: string | undefined,
        options?: RequestOptions & { serverURL?: string; [URL_OVERRIDE]?: URL }
    ): Promise<PageIterator<operations.PaginationURLParamsResponse>> {
        const input$: operations.PaginationURLParamsRequest = {
            attempts: attempts,
            isReferencePath: isReferencePath,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.PaginationURLParamsRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;
        const baseURL$ =
            options?.[URL_OVERRIDE] &&
            options[URL_OVERRIDE].origin &&
            options[URL_OVERRIDE].origin !== ""
                ? options[URL_OVERRIDE].origin
                : options?.serverURL ||
                  this.templateURLComponent(operations.PaginationURLParamsServerList[0], {
                      charEncoding: "percent",
                  })();

        const path$ = options?.[URL_OVERRIDE]
            ? options[URL_OVERRIDE].pathname
            : this.templateURLComponent("/pagination/url")();

        const query$ = options?.[URL_OVERRIDE]
            ? options[URL_OVERRIDE].search.substring(1)
            : [
                  enc$.encodeForm("attempts", payload$.attempts, {
                      explode: true,
                      charEncoding: "percent",
                  }),
                  enc$.encodeForm("is-reference-path", payload$["is-reference-path"], {
                      explode: true,
                      charEncoding: "percent",
                  }),
              ]
                  .filter(Boolean)
                  .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "paginationURLParams",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const nextFunc = (
            responseData: unknown
        ): Paginator<operations.PaginationURLParamsResponse> => {
            let nextURL = jp.value(responseData, "$.next");
            if (nextURL == null) {
                return () => null;
            }

            if (nextURL.startsWith("/")) {
                nextURL = `${baseURL$}${nextURL}`;
            }

            try {
                new URL(nextURL);
            } catch (_error) {
                return () => null;
            }

            return () =>
                this.paginationURLParams(attempts, isReferencePath, {
                    ...options,
                    [URL_OVERRIDE]: new URL(nextURL),
                });
        };

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const parsed = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.PaginationURLParamsResponse$.inboundSchema.parse({
                        ...responseFields$,
                        res: val$,
                    });
                },
                "Response validation failed"
            );
            const next$ = nextFunc(responseBody);
            const page$ = { ...parsed, next: next$ };
            const result = { ...page$, ...createPageIterator(page$) };
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError(
                "Unexpected API response status or content-type",
                response,
                responseBody
            );
        }
    }
}
