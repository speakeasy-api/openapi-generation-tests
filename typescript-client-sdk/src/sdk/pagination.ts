/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../sdk/models/errors";
import * as operations from "../sdk/models/operations";
import * as shared from "../sdk/models/shared";
import { createPageIterator, PageIterator, Paginator } from "../sdk/types";
import jp from "jsonpath";

export class Pagination extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }

    async paginationCursorBody(
        input: operations.PaginationCursorBodyRequestBody,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationCursorBodyResponse>> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.PaginationCursorBodyRequestBody$.outboundSchema.parse(input);
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/pagination/cursor")();

        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.PaginationCursorBodyServerList[0], {
                charEncoding: "percent",
            })();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "PUT",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const nextFunc = (
            responseData: unknown
        ): Paginator<operations.PaginationCursorBodyResponse> => {
            const nextCursor = jp.value(responseData, "$.resultArray[(@.length-1)]");
            if (nextCursor == null) {
                return () => null;
            }

            return () =>
                this.paginationCursorBody(
                    {
                        ...input,
                        cursor: nextCursor,
                    },
                    options
                );
        };

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const parsed = operations.PaginationCursorBodyResponse$.inboundSchema.parse({
                ...responseFields$,
                res: responseBody,
            });
            const next$ = nextFunc(responseBody);
            const page$ = { ...parsed, next: next$ };
            const result = { ...page$, ...createPageIterator(page$) };
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async paginationCursorParams(
        cursor: number,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationCursorParamsResponse>> {
        const input$: operations.PaginationCursorParamsRequest = {
            cursor: cursor,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.PaginationCursorParamsRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const path$ = this.templateURLComponent("/pagination/cursor")();

        const query$ = [
            enc$.encodeForm("cursor", payload$.cursor, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.PaginationCursorParamsServerList[0], {
                charEncoding: "percent",
            })();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const nextFunc = (
            responseData: unknown
        ): Paginator<operations.PaginationCursorParamsResponse> => {
            const nextCursor = jp.value(responseData, "$.resultArray[(@.length-1)]");
            if (nextCursor == null) {
                return () => null;
            }

            return () => this.paginationCursorParams(nextCursor, options);
        };

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const parsed = operations.PaginationCursorParamsResponse$.inboundSchema.parse({
                ...responseFields$,
                res: responseBody,
            });
            const next$ = nextFunc(responseBody);
            const page$ = { ...parsed, next: next$ };
            const result = { ...page$, ...createPageIterator(page$) };
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async paginationLimitOffsetOffsetBody(
        input: shared.LimitOffsetConfig,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationLimitOffsetOffsetBodyResponse>> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = shared.LimitOffsetConfig$.outboundSchema.parse(input);
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/pagination/limitoffset/offset")();

        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.PaginationLimitOffsetOffsetBodyServerList[0], {
                charEncoding: "percent",
            })();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "PUT",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const nextFunc = (
            responseData: unknown
        ): Paginator<operations.PaginationLimitOffsetOffsetBodyResponse> => {
            const offset = input.offset || 0;

            if (!responseData) {
                return () => null;
            }
            const results = jp.value(responseData, "$.resultArray");
            if (!results.length) {
                return () => null;
            }
            const limit = input.limit || 0;
            if (results.length < limit) {
                return () => null;
            }
            const nextOffset = offset + results.length;

            return () =>
                this.paginationLimitOffsetOffsetBody(
                    {
                        ...input,
                        offset: nextOffset,
                    },
                    options
                );
        };

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const parsed = operations.PaginationLimitOffsetOffsetBodyResponse$.inboundSchema.parse({
                ...responseFields$,
                res: responseBody,
            });
            const next$ = nextFunc(responseBody);
            const page$ = { ...parsed, next: next$ };
            const result = { ...page$, ...createPageIterator(page$) };
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async paginationLimitOffsetOffsetParams(
        limit?: number | undefined,
        offset?: number | undefined,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationLimitOffsetOffsetParamsResponse>> {
        const input$: operations.PaginationLimitOffsetOffsetParamsRequest = {
            limit: limit,
            offset: offset,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ =
            operations.PaginationLimitOffsetOffsetParamsRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const path$ = this.templateURLComponent("/pagination/limitoffset/offset")();

        const query$ = [
            enc$.encodeForm("limit", payload$.limit, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("offset", payload$.offset, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.PaginationLimitOffsetOffsetParamsServerList[0], {
                charEncoding: "percent",
            })();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const nextFunc = (
            responseData: unknown
        ): Paginator<operations.PaginationLimitOffsetOffsetParamsResponse> => {
            const offset = input$.offset || 0;

            if (!responseData) {
                return () => null;
            }
            const results = jp.value(responseData, "$.resultArray");
            if (!results.length) {
                return () => null;
            }
            const limit = input$.limit || 0;
            if (results.length < limit) {
                return () => null;
            }
            const nextOffset = offset + results.length;

            return () => this.paginationLimitOffsetOffsetParams(limit, nextOffset, options);
        };

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const parsed =
                operations.PaginationLimitOffsetOffsetParamsResponse$.inboundSchema.parse({
                    ...responseFields$,
                    res: responseBody,
                });
            const next$ = nextFunc(responseBody);
            const page$ = { ...parsed, next: next$ };
            const result = { ...page$, ...createPageIterator(page$) };
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async paginationLimitOffsetPageBody(
        input: shared.LimitOffsetConfig,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationLimitOffsetPageBodyResponse>> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = shared.LimitOffsetConfig$.outboundSchema.parse(input);
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/pagination/limitoffset/page")();

        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.PaginationLimitOffsetPageBodyServerList[0], {
                charEncoding: "percent",
            })();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "PUT",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const nextFunc = (
            responseData: unknown
        ): Paginator<operations.PaginationLimitOffsetPageBodyResponse> => {
            const page = input.page || 0;
            const nextPage = page + 1;
            const numPages = jp.value(responseData, "$.numPages");
            if (numPages == null || numPages <= page) {
                return () => null;
            }

            if (!responseData) {
                return () => null;
            }

            return () =>
                this.paginationLimitOffsetPageBody(
                    {
                        ...input,
                        page: nextPage,
                    },
                    options
                );
        };

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const parsed = operations.PaginationLimitOffsetPageBodyResponse$.inboundSchema.parse({
                ...responseFields$,
                res: responseBody,
            });
            const next$ = nextFunc(responseBody);
            const page$ = { ...parsed, next: next$ };
            const result = { ...page$, ...createPageIterator(page$) };
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async paginationLimitOffsetPageParams(
        page: number,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationLimitOffsetPageParamsResponse>> {
        const input$: operations.PaginationLimitOffsetPageParamsRequest = {
            page: page,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ =
            operations.PaginationLimitOffsetPageParamsRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const path$ = this.templateURLComponent("/pagination/limitoffset/page")();

        const query$ = [
            enc$.encodeForm("page", payload$.page, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.PaginationLimitOffsetPageParamsServerList[0], {
                charEncoding: "percent",
            })();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const nextFunc = (
            responseData: unknown
        ): Paginator<operations.PaginationLimitOffsetPageParamsResponse> => {
            const page = input$.page || 0;
            const nextPage = page + 1;

            if (!responseData) {
                return () => null;
            }
            const results = jp.value(responseData, "$.resultArray");
            if (!results.length) {
                return () => null;
            }

            return () => this.paginationLimitOffsetPageParams(nextPage, options);
        };

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const parsed = operations.PaginationLimitOffsetPageParamsResponse$.inboundSchema.parse({
                ...responseFields$,
                res: responseBody,
            });
            const next$ = nextFunc(responseBody);
            const page$ = { ...parsed, next: next$ };
            const result = { ...page$, ...createPageIterator(page$) };
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }
}
