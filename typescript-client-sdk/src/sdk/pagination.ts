/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { paginationPaginationCursorBody } from "../funcs/paginationPaginationCursorBody.js";
import { paginationPaginationCursorNonNumeric } from "../funcs/paginationPaginationCursorNonNumeric.js";
import { paginationPaginationCursorParams } from "../funcs/paginationPaginationCursorParams.js";
import { paginationPaginationLimitOffsetDeepOutputsPageBody } from "../funcs/paginationPaginationLimitOffsetDeepOutputsPageBody.js";
import { paginationPaginationLimitOffsetOffsetBody } from "../funcs/paginationPaginationLimitOffsetOffsetBody.js";
import { paginationPaginationLimitOffsetOffsetParams } from "../funcs/paginationPaginationLimitOffsetOffsetParams.js";
import { paginationPaginationLimitOffsetPageBody } from "../funcs/paginationPaginationLimitOffsetPageBody.js";
import { paginationPaginationLimitOffsetPageParams } from "../funcs/paginationPaginationLimitOffsetPageParams.js";
import { paginationPaginationURLParams } from "../funcs/paginationPaginationURLParams.js";
import { paginationPaginationWithRetries } from "../funcs/paginationPaginationWithRetries.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { PageIterator, unwrapResultIterator } from "../sdk/types/operations.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";

export class Pagination extends ClientSDK {
    async paginationCursorBody(
        request: operations.PaginationCursorBodyRequestBody,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationCursorBodyResponse>> {
        return unwrapResultIterator(paginationPaginationCursorBody(this, request, options));
    }

    async paginationCursorNonNumeric(
        cursor?: string | undefined,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationCursorNonNumericResponse>> {
        return unwrapResultIterator(paginationPaginationCursorNonNumeric(this, cursor, options));
    }

    async paginationCursorParams(
        cursor: number,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationCursorParamsResponse>> {
        return unwrapResultIterator(paginationPaginationCursorParams(this, cursor, options));
    }

    async paginationLimitOffsetDeepOutputsPageBody(
        request: shared.LimitOffsetConfig,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationLimitOffsetDeepOutputsPageBodyResponse>> {
        return unwrapResultIterator(
            paginationPaginationLimitOffsetDeepOutputsPageBody(this, request, options)
        );
    }

    async paginationLimitOffsetOffsetBody(
        request: shared.LimitOffsetConfig,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationLimitOffsetOffsetBodyResponse>> {
        return unwrapResultIterator(
            paginationPaginationLimitOffsetOffsetBody(this, request, options)
        );
    }

    async paginationLimitOffsetOffsetParams(
        limit?: number | undefined,
        offset?: number | undefined,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationLimitOffsetOffsetParamsResponse>> {
        return unwrapResultIterator(
            paginationPaginationLimitOffsetOffsetParams(this, limit, offset, options)
        );
    }

    async paginationLimitOffsetPageBody(
        request: shared.LimitOffsetConfig,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationLimitOffsetPageBodyResponse>> {
        return unwrapResultIterator(
            paginationPaginationLimitOffsetPageBody(this, request, options)
        );
    }

    async paginationLimitOffsetPageParams(
        page: number,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationLimitOffsetPageParamsResponse>> {
        return unwrapResultIterator(paginationPaginationLimitOffsetPageParams(this, page, options));
    }

    async paginationURLParams(
        attempts: number,
        isReferencePath?: string | undefined,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationURLParamsResponse>> {
        return unwrapResultIterator(
            paginationPaginationURLParams(this, attempts, isReferencePath, options)
        );
    }

    async paginationWithRetries(
        cursor?: string | undefined,
        faultSettings?: string | undefined,
        requestId?: string | undefined,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.PaginationWithRetriesResponse>> {
        return unwrapResultIterator(
            paginationPaginationWithRetries(this, cursor, faultSettings, requestId, options)
        );
    }
}
