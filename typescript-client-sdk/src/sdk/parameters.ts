/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { parametersDeepObjectQueryParamsDeepObject } from "../funcs/parametersDeepObjectQueryParamsDeepObject.js";
import { parametersDeepObjectQueryParamsMap } from "../funcs/parametersDeepObjectQueryParamsMap.js";
import { parametersDeepObjectQueryParamsObject } from "../funcs/parametersDeepObjectQueryParamsObject.js";
import { parametersDuplicateParam } from "../funcs/parametersDuplicateParam.js";
import { parametersFormQueryParamsArray } from "../funcs/parametersFormQueryParamsArray.js";
import { parametersFormQueryParamsCamelObject } from "../funcs/parametersFormQueryParamsCamelObject.js";
import { parametersFormQueryParamsMap } from "../funcs/parametersFormQueryParamsMap.js";
import { parametersFormQueryParamsObject } from "../funcs/parametersFormQueryParamsObject.js";
import { parametersFormQueryParamsPrimitive } from "../funcs/parametersFormQueryParamsPrimitive.js";
import { parametersFormQueryParamsRefParamObject } from "../funcs/parametersFormQueryParamsRefParamObject.js";
import { parametersHeaderParamsArray } from "../funcs/parametersHeaderParamsArray.js";
import { parametersHeaderParamsMap } from "../funcs/parametersHeaderParamsMap.js";
import { parametersHeaderParamsObject } from "../funcs/parametersHeaderParamsObject.js";
import { parametersHeaderParamsPrimitive } from "../funcs/parametersHeaderParamsPrimitive.js";
import { parametersJsonQueryParamsObject } from "../funcs/parametersJsonQueryParamsObject.js";
import { parametersJsonQueryParamsObjectSmaller } from "../funcs/parametersJsonQueryParamsObjectSmaller.js";
import { parametersMixedParametersCamelCase } from "../funcs/parametersMixedParametersCamelCase.js";
import { parametersMixedParametersPrimitives } from "../funcs/parametersMixedParametersPrimitives.js";
import { parametersMixedQueryParams } from "../funcs/parametersMixedQueryParams.js";
import { parametersPathEncoding } from "../funcs/parametersPathEncoding.js";
import { parametersPathParameterJson } from "../funcs/parametersPathParameterJson.js";
import { parametersPipeDelimitedQueryParamsArray } from "../funcs/parametersPipeDelimitedQueryParamsArray.js";
import { parametersSimplePathParameterArrays } from "../funcs/parametersSimplePathParameterArrays.js";
import { parametersSimplePathParameterMaps } from "../funcs/parametersSimplePathParameterMaps.js";
import { parametersSimplePathParameterObjects } from "../funcs/parametersSimplePathParameterObjects.js";
import { parametersSimplePathParameterPrimitives } from "../funcs/parametersSimplePathParameterPrimitives.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class ParametersT extends ClientSDK {
  async deepObjectQueryParamsDeepObject(
    deepObj: shared.DeepObjectQueryParams,
    options?: RequestOptions,
  ): Promise<operations.DeepObjectQueryParamsDeepObjectRes> {
    return unwrapAsync(parametersDeepObjectQueryParamsDeepObject(
      this,
      deepObj,
      options,
    ));
  }

  async deepObjectQueryParamsMap(
    mapParam: { [k: string]: string },
    mapArrParam?: { [k: string]: Array<string> } | undefined,
    options?: RequestOptions,
  ): Promise<operations.DeepObjectQueryParamsMapRes> {
    return unwrapAsync(parametersDeepObjectQueryParamsMap(
      this,
      mapParam,
      mapArrParam,
      options,
    ));
  }

  async deepObjectQueryParamsObject(
    objParam: shared.SimpleObject,
    objArrParam?: operations.ObjArrParam | undefined,
    options?: RequestOptions,
  ): Promise<operations.DeepObjectQueryParamsObjectRes> {
    return unwrapAsync(parametersDeepObjectQueryParamsObject(
      this,
      objParam,
      objArrParam,
      options,
    ));
  }

  async duplicateParam(
    duplicateParamRequest: string,
    options?: RequestOptions,
  ): Promise<operations.DuplicateParamDuplicateParamResponse> {
    return unwrapAsync(parametersDuplicateParam(
      this,
      duplicateParamRequest,
      options,
    ));
  }

  async formQueryParamsArray(
    arrParam?: Array<string> | undefined,
    arrParamExploded?: Array<number> | undefined,
    options?: RequestOptions,
  ): Promise<operations.FormQueryParamsArrayRes> {
    return unwrapAsync(parametersFormQueryParamsArray(
      this,
      arrParam,
      arrParamExploded,
      options,
    ));
  }

  async formQueryParamsCamelObject(
    objParamExploded: operations.ObjParamExploded,
    objParam?: operations.ObjParam | undefined,
    options?: RequestOptions,
  ): Promise<operations.FormQueryParamsCamelObjectRes> {
    return unwrapAsync(parametersFormQueryParamsCamelObject(
      this,
      objParamExploded,
      objParam,
      options,
    ));
  }

  async formQueryParamsMap(
    mapParam?: { [k: string]: string } | undefined,
    mapParamExploded?: { [k: string]: number } | undefined,
    options?: RequestOptions,
  ): Promise<operations.FormQueryParamsMapRes> {
    return unwrapAsync(parametersFormQueryParamsMap(
      this,
      mapParam,
      mapParamExploded,
      options,
    ));
  }

  async formQueryParamsObject(
    objParamExploded: shared.SimpleObject,
    objParam?: shared.SimpleObject | undefined,
    options?: RequestOptions,
  ): Promise<operations.FormQueryParamsObjectRes> {
    return unwrapAsync(parametersFormQueryParamsObject(
      this,
      objParamExploded,
      objParam,
      options,
    ));
  }

  async formQueryParamsPrimitive(
    boolParam: boolean,
    intParam: number,
    numParam: number,
    strParam: string,
    options?: RequestOptions,
  ): Promise<operations.FormQueryParamsPrimitiveRes> {
    return unwrapAsync(parametersFormQueryParamsPrimitive(
      this,
      boolParam,
      intParam,
      numParam,
      strParam,
      options,
    ));
  }

  async formQueryParamsRefParamObject(
    refObjParam?: shared.RefQueryParamObj | undefined,
    refObjParamExploded?: shared.RefQueryParamObjExploded | undefined,
    options?: RequestOptions,
  ): Promise<operations.FormQueryParamsRefParamObjectRes> {
    return unwrapAsync(parametersFormQueryParamsRefParamObject(
      this,
      refObjParam,
      refObjParamExploded,
      options,
    ));
  }

  async headerParamsArray(
    xHeaderArray: Array<string>,
    options?: RequestOptions,
  ): Promise<operations.HeaderParamsArrayRes> {
    return unwrapAsync(parametersHeaderParamsArray(
      this,
      xHeaderArray,
      options,
    ));
  }

  async headerParamsMap(
    xHeaderMap: { [k: string]: string },
    xHeaderMapExplode: { [k: string]: string },
    options?: RequestOptions,
  ): Promise<operations.HeaderParamsMapRes> {
    return unwrapAsync(parametersHeaderParamsMap(
      this,
      xHeaderMap,
      xHeaderMapExplode,
      options,
    ));
  }

  async headerParamsObject(
    xHeaderObj: shared.SimpleObject,
    xHeaderObjExplode: shared.SimpleObject,
    options?: RequestOptions,
  ): Promise<operations.HeaderParamsObjectRes> {
    return unwrapAsync(parametersHeaderParamsObject(
      this,
      xHeaderObj,
      xHeaderObjExplode,
      options,
    ));
  }

  async headerParamsPrimitive(
    xHeaderBoolean: boolean,
    xHeaderInteger: number,
    xHeaderNumber: number,
    xHeaderString: string,
    options?: RequestOptions,
  ): Promise<operations.HeaderParamsPrimitiveRes> {
    return unwrapAsync(parametersHeaderParamsPrimitive(
      this,
      xHeaderBoolean,
      xHeaderInteger,
      xHeaderNumber,
      xHeaderString,
      options,
    ));
  }

  async jsonQueryParamsObject(
    deepObjParam: shared.DeepObject,
    simpleObjParam: shared.SimpleObject,
    options?: RequestOptions,
  ): Promise<operations.JsonQueryParamsObjectRes> {
    return unwrapAsync(parametersJsonQueryParamsObject(
      this,
      deepObjParam,
      simpleObjParam,
      options,
    ));
  }

  async jsonQueryParamsObjectSmaller(
    deepObjParam: shared.DeepObjectSmaller,
    simpleObjParam: shared.SimpleObject,
    options?: RequestOptions,
  ): Promise<operations.JsonQueryParamsObjectSmallerRes> {
    return unwrapAsync(parametersJsonQueryParamsObjectSmaller(
      this,
      deepObjParam,
      simpleObjParam,
      options,
    ));
  }

  async mixedParametersCamelCase(
    headerParam: string,
    pathParam: string,
    queryStringParam: string,
    options?: RequestOptions,
  ): Promise<operations.MixedParametersCamelCaseRes> {
    return unwrapAsync(parametersMixedParametersCamelCase(
      this,
      headerParam,
      pathParam,
      queryStringParam,
      options,
    ));
  }

  async mixedParametersPrimitives(
    headerParam: string,
    pathParam: string,
    queryStringParam: string,
    options?: RequestOptions,
  ): Promise<operations.MixedParametersPrimitivesRes> {
    return unwrapAsync(parametersMixedParametersPrimitives(
      this,
      headerParam,
      pathParam,
      queryStringParam,
      options,
    ));
  }

  async mixedQueryParams(
    deepObjectParam: shared.SimpleObject,
    formParam: shared.SimpleObject,
    jsonParam: shared.SimpleObject,
    options?: RequestOptions,
  ): Promise<operations.MixedQueryParamsRes> {
    return unwrapAsync(parametersMixedQueryParams(
      this,
      deepObjectParam,
      formParam,
      jsonParam,
      options,
    ));
  }

  async pathEncoding(
    param1: string,
    param2: string,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(parametersPathEncoding(
      this,
      param1,
      param2,
      options,
    ));
  }

  async pathParameterJson(
    jsonObj: shared.SimpleObject,
    options?: RequestOptions,
  ): Promise<operations.PathParameterJsonRes> {
    return unwrapAsync(parametersPathParameterJson(
      this,
      jsonObj,
      options,
    ));
  }

  async pipeDelimitedQueryParamsArray(
    arrParam?: Array<string> | undefined,
    arrParamExploded?: Array<number> | undefined,
    mapParam?: { [k: string]: string } | undefined,
    objParam?: shared.SimpleObject | undefined,
    options?: RequestOptions,
  ): Promise<operations.PipeDelimitedQueryParamsArrayRes> {
    return unwrapAsync(parametersPipeDelimitedQueryParamsArray(
      this,
      arrParam,
      arrParamExploded,
      mapParam,
      objParam,
      options,
    ));
  }

  async simplePathParameterArrays(
    arrParam: Array<string>,
    options?: RequestOptions,
  ): Promise<operations.SimplePathParameterArraysRes> {
    return unwrapAsync(parametersSimplePathParameterArrays(
      this,
      arrParam,
      options,
    ));
  }

  async simplePathParameterMaps(
    mapParam: { [k: string]: string },
    mapParamExploded: { [k: string]: number },
    options?: RequestOptions,
  ): Promise<operations.SimplePathParameterMapsRes> {
    return unwrapAsync(parametersSimplePathParameterMaps(
      this,
      mapParam,
      mapParamExploded,
      options,
    ));
  }

  async simplePathParameterObjects(
    objParam: shared.SimpleObject,
    objParamExploded: shared.SimpleObject,
    options?: RequestOptions,
  ): Promise<operations.SimplePathParameterObjectsRes> {
    return unwrapAsync(parametersSimplePathParameterObjects(
      this,
      objParam,
      objParamExploded,
      options,
    ));
  }

  async simplePathParameterPrimitives(
    boolParam: boolean,
    intParam: number,
    numParam: number,
    strParam: string,
    options?: RequestOptions,
  ): Promise<operations.SimplePathParameterPrimitivesRes> {
    return unwrapAsync(parametersSimplePathParameterPrimitives(
      this,
      boolParam,
      intParam,
      numParam,
      strParam,
      options,
    ));
  }
}
