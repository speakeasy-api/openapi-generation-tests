/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../sdk/models/errors";
import * as operations from "../sdk/models/operations";
import * as shared from "../sdk/models/shared";

export class ParametersT extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }
    async deepObjectQueryParamsMap(
        mapParam: Record<string, string>,
        mapArrParam?: Record<string, Array<string>> | undefined,
        options?: RequestOptions
    ): Promise<operations.DeepObjectQueryParamsMapResponse> {
        const input$: operations.DeepObjectQueryParamsMapRequest = {
            mapParam: mapParam,
            mapArrParam: mapArrParam,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.DeepObjectQueryParamsMapRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const path$ = this.templateURLComponent("/anything/queryParams/deepObject/map")();

        const query$ = [
            enc$.encodeDeepObject("mapArrParam", payload$.mapArrParam, { charEncoding: "percent" }),
            enc$.encodeDeepObject("mapParam", payload$.mapParam, { charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.DeepObjectQueryParamsMapResponse$.inboundSchema.parse({
                ...responseFields$,
                res: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async deepObjectQueryParamsObject(
        objParam: shared.SimpleObject,
        objArrParam?: operations.ObjArrParam | undefined,
        options?: RequestOptions
    ): Promise<operations.DeepObjectQueryParamsObjectResponse> {
        const input$: operations.DeepObjectQueryParamsObjectRequest = {
            objParam: objParam,
            objArrParam: objArrParam,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ =
            operations.DeepObjectQueryParamsObjectRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const path$ = this.templateURLComponent("/anything/queryParams/deepObject/obj")();

        const query$ = [
            enc$.encodeDeepObject("objArrParam", payload$.objArrParam, { charEncoding: "percent" }),
            enc$.encodeDeepObject("objParam", payload$.objParam, { charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.DeepObjectQueryParamsObjectResponse$.inboundSchema.parse({
                ...responseFields$,
                res: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async duplicateParam(
        duplicateParamRequest: string,
        options?: RequestOptions
    ): Promise<operations.DuplicateParamResponse> {
        const input$: operations.DuplicateParamRequest = {
            duplicateParamRequest: duplicateParamRequest,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.DuplicateParamRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const pathParams$ = {
            duplicateParamRequest: enc$.encodeSimple(
                "duplicateParamRequest",
                payload$.duplicateParamRequest,
                { explode: false, charEncoding: "percent" }
            ),
        };

        const path$ = this.templateURLComponent("/anything/params/{duplicateParamRequest}")(
            pathParams$
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.DuplicateParamResponse$.inboundSchema.parse({
                ...responseFields$,
                duplicateParamResponse: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async formQueryParamsArray(
        arrParam?: Array<string> | undefined,
        arrParamExploded?: Array<number> | undefined,
        options?: RequestOptions
    ): Promise<operations.FormQueryParamsArrayResponse> {
        const input$: operations.FormQueryParamsArrayRequest = {
            arrParam: arrParam,
            arrParamExploded: arrParamExploded,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.FormQueryParamsArrayRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const path$ = this.templateURLComponent("/anything/queryParams/form/array")();

        const query$ = [
            enc$.encodeForm("arrParam", payload$.arrParam, {
                explode: false,
                charEncoding: "percent",
            }),
            enc$.encodeForm("arrParamExploded", payload$.arrParamExploded, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.FormQueryParamsArrayResponse$.inboundSchema.parse({
                ...responseFields$,
                res: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async formQueryParamsCamelObject(
        objParamExploded: operations.ObjParamExploded,
        objParam?: operations.ObjParam | undefined,
        options?: RequestOptions
    ): Promise<operations.FormQueryParamsCamelObjectResponse> {
        const input$: operations.FormQueryParamsCamelObjectRequest = {
            objParamExploded: objParamExploded,
            objParam: objParam,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.FormQueryParamsCamelObjectRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const path$ = this.templateURLComponent("/anything/queryParams/form/camelObj")();

        const query$ = [
            enc$.encodeForm("obj_param", payload$.obj_param, {
                explode: false,
                charEncoding: "percent",
            }),
            enc$.encodeForm("obj_param_exploded", payload$.obj_param_exploded, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.FormQueryParamsCamelObjectResponse$.inboundSchema.parse({
                ...responseFields$,
                res: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async formQueryParamsMap(
        mapParam?: Record<string, string> | undefined,
        mapParamExploded?: Record<string, number> | undefined,
        options?: RequestOptions
    ): Promise<operations.FormQueryParamsMapResponse> {
        const input$: operations.FormQueryParamsMapRequest = {
            mapParam: mapParam,
            mapParamExploded: mapParamExploded,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.FormQueryParamsMapRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const path$ = this.templateURLComponent("/anything/queryParams/form/map")();

        const query$ = [
            enc$.encodeForm("mapParam", payload$.mapParam, {
                explode: false,
                charEncoding: "percent",
            }),
            enc$.encodeForm("mapParamExploded", payload$.mapParamExploded, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.FormQueryParamsMapResponse$.inboundSchema.parse({
                ...responseFields$,
                res: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async formQueryParamsObject(
        objParamExploded: shared.SimpleObject,
        objParam?: shared.SimpleObject | undefined,
        options?: RequestOptions
    ): Promise<operations.FormQueryParamsObjectResponse> {
        const input$: operations.FormQueryParamsObjectRequest = {
            objParamExploded: objParamExploded,
            objParam: objParam,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.FormQueryParamsObjectRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const path$ = this.templateURLComponent("/anything/queryParams/form/obj")();

        const query$ = [
            enc$.encodeForm("objParam", payload$.objParam, {
                explode: false,
                charEncoding: "percent",
            }),
            enc$.encodeForm("objParamExploded", payload$.objParamExploded, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.FormQueryParamsObjectResponse$.inboundSchema.parse({
                ...responseFields$,
                res: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async formQueryParamsPrimitive(
        boolParam: boolean,
        intParam: number,
        numParam: number,
        strParam: string,
        options?: RequestOptions
    ): Promise<operations.FormQueryParamsPrimitiveResponse> {
        const input$: operations.FormQueryParamsPrimitiveRequest = {
            boolParam: boolParam,
            intParam: intParam,
            numParam: numParam,
            strParam: strParam,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.FormQueryParamsPrimitiveRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const path$ = this.templateURLComponent("/anything/queryParams/form/primitive")();

        const query$ = [
            enc$.encodeForm("boolParam", payload$.boolParam, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("intParam", payload$.intParam, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("numParam", payload$.numParam, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("strParam", payload$.strParam, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.FormQueryParamsPrimitiveResponse$.inboundSchema.parse({
                ...responseFields$,
                res: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async formQueryParamsRefParamObject(
        refObjParam?: shared.RefQueryParamObj | undefined,
        refObjParamExploded?: shared.RefQueryParamObjExploded | undefined,
        options?: RequestOptions
    ): Promise<operations.FormQueryParamsRefParamObjectResponse> {
        const input$: operations.FormQueryParamsRefParamObjectRequest = {
            refObjParam: refObjParam,
            refObjParamExploded: refObjParamExploded,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ =
            operations.FormQueryParamsRefParamObjectRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const path$ = this.templateURLComponent("/anything/queryParams/form/refParamObject")();

        const query$ = [
            enc$.encodeForm("refObjParam", payload$.refObjParam, {
                explode: false,
                charEncoding: "percent",
            }),
            enc$.encodeForm("refObjParamExploded", payload$.refObjParamExploded, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.FormQueryParamsRefParamObjectResponse$.inboundSchema.parse({
                ...responseFields$,
                res: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async headerParamsArray(
        xHeaderArray: Array<string>,
        options?: RequestOptions
    ): Promise<operations.HeaderParamsArrayResponse> {
        const input$: operations.HeaderParamsArrayRequest = {
            xHeaderArray: xHeaderArray,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.HeaderParamsArrayRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const path$ = this.templateURLComponent("/anything/headers/array")();

        headers$.set(
            "X-Header-Array",
            enc$.encodeSimple("X-Header-Array", payload$["X-Header-Array"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.HeaderParamsArrayResponse$.inboundSchema.parse({
                ...responseFields$,
                res: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async headerParamsMap(
        xHeaderMap: Record<string, string>,
        xHeaderMapExplode: Record<string, string>,
        options?: RequestOptions
    ): Promise<operations.HeaderParamsMapResponse> {
        const input$: operations.HeaderParamsMapRequest = {
            xHeaderMap: xHeaderMap,
            xHeaderMapExplode: xHeaderMapExplode,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.HeaderParamsMapRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const path$ = this.templateURLComponent("/anything/headers/map")();

        headers$.set(
            "X-Header-Map",
            enc$.encodeSimple("X-Header-Map", payload$["X-Header-Map"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "X-Header-Map-Explode",
            enc$.encodeSimple("X-Header-Map-Explode", payload$["X-Header-Map-Explode"], {
                explode: true,
                charEncoding: "none",
            })
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.HeaderParamsMapResponse$.inboundSchema.parse({
                ...responseFields$,
                res: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async headerParamsObject(
        xHeaderObj: shared.SimpleObject,
        xHeaderObjExplode: shared.SimpleObject,
        options?: RequestOptions
    ): Promise<operations.HeaderParamsObjectResponse> {
        const input$: operations.HeaderParamsObjectRequest = {
            xHeaderObj: xHeaderObj,
            xHeaderObjExplode: xHeaderObjExplode,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.HeaderParamsObjectRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const path$ = this.templateURLComponent("/anything/headers/obj")();

        headers$.set(
            "X-Header-Obj",
            enc$.encodeSimple("X-Header-Obj", payload$["X-Header-Obj"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "X-Header-Obj-Explode",
            enc$.encodeSimple("X-Header-Obj-Explode", payload$["X-Header-Obj-Explode"], {
                explode: true,
                charEncoding: "none",
            })
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.HeaderParamsObjectResponse$.inboundSchema.parse({
                ...responseFields$,
                res: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async headerParamsPrimitive(
        xHeaderBoolean: boolean,
        xHeaderInteger: number,
        xHeaderNumber: number,
        xHeaderString: string,
        options?: RequestOptions
    ): Promise<operations.HeaderParamsPrimitiveResponse> {
        const input$: operations.HeaderParamsPrimitiveRequest = {
            xHeaderBoolean: xHeaderBoolean,
            xHeaderInteger: xHeaderInteger,
            xHeaderNumber: xHeaderNumber,
            xHeaderString: xHeaderString,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.HeaderParamsPrimitiveRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const path$ = this.templateURLComponent("/anything/headers/primitive")();

        headers$.set(
            "X-Header-Boolean",
            enc$.encodeSimple("X-Header-Boolean", payload$["X-Header-Boolean"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "X-Header-Integer",
            enc$.encodeSimple("X-Header-Integer", payload$["X-Header-Integer"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "X-Header-Number",
            enc$.encodeSimple("X-Header-Number", payload$["X-Header-Number"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "X-Header-String",
            enc$.encodeSimple("X-Header-String", payload$["X-Header-String"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.HeaderParamsPrimitiveResponse$.inboundSchema.parse({
                ...responseFields$,
                res: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async jsonQueryParamsObject(
        deepObjParam: shared.DeepObject,
        simpleObjParam: shared.SimpleObject,
        options?: RequestOptions
    ): Promise<operations.JsonQueryParamsObjectResponse> {
        const input$: operations.JsonQueryParamsObjectRequest = {
            deepObjParam: deepObjParam,
            simpleObjParam: simpleObjParam,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.JsonQueryParamsObjectRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const path$ = this.templateURLComponent("/anything/queryParams/json/obj")();

        const query$ = [
            enc$.encodeJSON("deepObjParam", payload$.deepObjParam, {
                explode: false,
                charEncoding: "percent",
            }),
            enc$.encodeJSON("simpleObjParam", payload$.simpleObjParam, {
                explode: false,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.JsonQueryParamsObjectResponse$.inboundSchema.parse({
                ...responseFields$,
                res: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async mixedParametersCamelCase(
        headerParam: string,
        pathParam: string,
        queryStringParam: string,
        options?: RequestOptions
    ): Promise<operations.MixedParametersCamelCaseResponse> {
        const input$: operations.MixedParametersCamelCaseRequest = {
            headerParam: headerParam,
            pathParam: pathParam,
            queryStringParam: queryStringParam,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.MixedParametersCamelCaseRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const pathParams$ = {
            path_param: enc$.encodeSimple("path_param", payload$.path_param, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent(
            "/anything/mixedParams/path/{path_param}/camelcase"
        )(pathParams$);

        const query$ = [
            enc$.encodeForm("query_string_param", payload$.query_string_param, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        headers$.set(
            "header_param",
            enc$.encodeSimple("header_param", payload$.header_param, {
                explode: false,
                charEncoding: "none",
            })
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.MixedParametersCamelCaseResponse$.inboundSchema.parse({
                ...responseFields$,
                res: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async mixedParametersPrimitives(
        headerParam: string,
        pathParam: string,
        queryStringParam: string,
        options?: RequestOptions
    ): Promise<operations.MixedParametersPrimitivesResponse> {
        const input$: operations.MixedParametersPrimitivesRequest = {
            headerParam: headerParam,
            pathParam: pathParam,
            queryStringParam: queryStringParam,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.MixedParametersPrimitivesRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const pathParams$ = {
            pathParam: enc$.encodeSimple("pathParam", payload$.pathParam, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/anything/mixedParams/path/{pathParam}")(
            pathParams$
        );

        const query$ = [
            enc$.encodeForm("queryStringParam", payload$.queryStringParam, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        headers$.set(
            "headerParam",
            enc$.encodeSimple("headerParam", payload$.headerParam, {
                explode: false,
                charEncoding: "none",
            })
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.MixedParametersPrimitivesResponse$.inboundSchema.parse({
                ...responseFields$,
                res: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async mixedQueryParams(
        deepObjectParam: shared.SimpleObject,
        formParam: shared.SimpleObject,
        jsonParam: shared.SimpleObject,
        options?: RequestOptions
    ): Promise<operations.MixedQueryParamsResponse> {
        const input$: operations.MixedQueryParamsRequest = {
            deepObjectParam: deepObjectParam,
            formParam: formParam,
            jsonParam: jsonParam,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.MixedQueryParamsRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const path$ = this.templateURLComponent("/anything/queryParams/mixed")();

        const query$ = [
            enc$.encodeDeepObject("deepObjectParam", payload$.deepObjectParam, {
                charEncoding: "percent",
            }),
            enc$.encodeForm("formParam", payload$.formParam, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeJSON("jsonParam", payload$.jsonParam, {
                explode: false,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.MixedQueryParamsResponse$.inboundSchema.parse({
                ...responseFields$,
                res: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async pathParameterJson(
        jsonObj: shared.SimpleObject,
        options?: RequestOptions
    ): Promise<operations.PathParameterJsonResponse> {
        const input$: operations.PathParameterJsonRequest = {
            jsonObj: jsonObj,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.PathParameterJsonRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const pathParams$ = {
            jsonObj: enc$.encodeJSON("jsonObj", payload$.jsonObj, {
                explode: true,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/anything/pathParams/json/{jsonObj}")(pathParams$);

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.PathParameterJsonResponse$.inboundSchema.parse({
                ...responseFields$,
                res: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async pipeDelimitedQueryParamsArray(
        arrParam?: Array<string> | undefined,
        arrParamExploded?: Array<number> | undefined,
        mapParam?: Record<string, string> | undefined,
        objParam?: shared.SimpleObject | undefined,
        options?: RequestOptions
    ): Promise<operations.PipeDelimitedQueryParamsArrayResponse> {
        const input$: operations.PipeDelimitedQueryParamsArrayRequest = {
            arrParam: arrParam,
            arrParamExploded: arrParamExploded,
            mapParam: mapParam,
            objParam: objParam,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ =
            operations.PipeDelimitedQueryParamsArrayRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const path$ = this.templateURLComponent("/anything/queryParams/pipe/array")();

        const query$ = [
            enc$.encodePipeDelimited("arrParam", payload$.arrParam, {
                explode: false,
                charEncoding: "percent",
            }),
            enc$.encodePipeDelimited("arrParamExploded", payload$.arrParamExploded, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodePipeDelimited("mapParam", payload$.mapParam, {
                explode: false,
                charEncoding: "percent",
            }),
            enc$.encodePipeDelimited("objParam", payload$.objParam, {
                explode: false,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.PipeDelimitedQueryParamsArrayResponse$.inboundSchema.parse({
                ...responseFields$,
                res: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async simplePathParameterArrays(
        arrParam: Array<string>,
        options?: RequestOptions
    ): Promise<operations.SimplePathParameterArraysResponse> {
        const input$: operations.SimplePathParameterArraysRequest = {
            arrParam: arrParam,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.SimplePathParameterArraysRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const pathParams$ = {
            arrParam: enc$.encodeSimple("arrParam", payload$.arrParam, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/anything/pathParams/arr/{arrParam}")(pathParams$);

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.SimplePathParameterArraysResponse$.inboundSchema.parse({
                ...responseFields$,
                res: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async simplePathParameterMaps(
        mapParam: Record<string, string>,
        mapParamExploded: Record<string, number>,
        options?: RequestOptions
    ): Promise<operations.SimplePathParameterMapsResponse> {
        const input$: operations.SimplePathParameterMapsRequest = {
            mapParam: mapParam,
            mapParamExploded: mapParamExploded,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.SimplePathParameterMapsRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const pathParams$ = {
            mapParam: enc$.encodeSimple("mapParam", payload$.mapParam, {
                explode: false,
                charEncoding: "percent",
            }),
            mapParamExploded: enc$.encodeSimple("mapParamExploded", payload$.mapParamExploded, {
                explode: true,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent(
            "/anything/pathParams/map/{mapParam}/mapExploded/{mapParamExploded}"
        )(pathParams$);

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.SimplePathParameterMapsResponse$.inboundSchema.parse({
                ...responseFields$,
                res: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async simplePathParameterObjects(
        objParam: shared.SimpleObject,
        objParamExploded: shared.SimpleObject,
        options?: RequestOptions
    ): Promise<operations.SimplePathParameterObjectsResponse> {
        const input$: operations.SimplePathParameterObjectsRequest = {
            objParam: objParam,
            objParamExploded: objParamExploded,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.SimplePathParameterObjectsRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const pathParams$ = {
            objParam: enc$.encodeSimple("objParam", payload$.objParam, {
                explode: false,
                charEncoding: "percent",
            }),
            objParamExploded: enc$.encodeSimple("objParamExploded", payload$.objParamExploded, {
                explode: true,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent(
            "/anything/pathParams/obj/{objParam}/objExploded/{objParamExploded}"
        )(pathParams$);

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.SimplePathParameterObjectsResponse$.inboundSchema.parse({
                ...responseFields$,
                res: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async simplePathParameterPrimitives(
        boolParam: boolean,
        intParam: number,
        numParam: number,
        strParam: string,
        options?: RequestOptions
    ): Promise<operations.SimplePathParameterPrimitivesResponse> {
        const input$: operations.SimplePathParameterPrimitivesRequest = {
            boolParam: boolParam,
            intParam: intParam,
            numParam: numParam,
            strParam: strParam,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ =
            operations.SimplePathParameterPrimitivesRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const pathParams$ = {
            boolParam: enc$.encodeSimple("boolParam", payload$.boolParam, {
                explode: false,
                charEncoding: "percent",
            }),
            intParam: enc$.encodeSimple("intParam", payload$.intParam, {
                explode: false,
                charEncoding: "percent",
            }),
            numParam: enc$.encodeSimple("numParam", payload$.numParam, {
                explode: false,
                charEncoding: "percent",
            }),
            strParam: enc$.encodeSimple("strParam", payload$.strParam, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent(
            "/anything/pathParams/str/{strParam}/bool/{boolParam}/int/{intParam}/num/{numParam}"
        )(pathParams$);

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.SimplePathParameterPrimitivesResponse$.inboundSchema.parse({
                ...responseFields$,
                res: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }
}
