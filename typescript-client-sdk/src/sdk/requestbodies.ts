/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { requestBodiesNullableObjectPost } from "../funcs/requestBodiesNullableObjectPost.js";
import { requestBodiesNullableOptionalFieldsPost } from "../funcs/requestBodiesNullableOptionalFieldsPost.js";
import { requestBodiesNullableRequiredEmptyObjectPost } from "../funcs/requestBodiesNullableRequiredEmptyObjectPost.js";
import { requestBodiesNullableRequiredPropertyPost } from "../funcs/requestBodiesNullableRequiredPropertyPost.js";
import { requestBodiesNullableRequiredSharedObjectPost } from "../funcs/requestBodiesNullableRequiredSharedObjectPost.js";
import { requestBodiesNullEnumPost } from "../funcs/requestBodiesNullEnumPost.js";
import { requestBodiesRequestBodyDeprecatedRequestBodyRefPost } from "../funcs/requestBodiesRequestBodyDeprecatedRequestBodyRefPost.js";
import { requestBodiesRequestBodyPostApplicationJsonArray } from "../funcs/requestBodiesRequestBodyPostApplicationJsonArray.js";
import { requestBodiesRequestBodyPostApplicationJsonArrayCamelCase } from "../funcs/requestBodiesRequestBodyPostApplicationJsonArrayCamelCase.js";
import { requestBodiesRequestBodyPostApplicationJsonArrayObj } from "../funcs/requestBodiesRequestBodyPostApplicationJsonArrayObj.js";
import { requestBodiesRequestBodyPostApplicationJsonArrayObjCamelCase } from "../funcs/requestBodiesRequestBodyPostApplicationJsonArrayObjCamelCase.js";
import { requestBodiesRequestBodyPostApplicationJsonArrayOfArray } from "../funcs/requestBodiesRequestBodyPostApplicationJsonArrayOfArray.js";
import { requestBodiesRequestBodyPostApplicationJsonArrayOfArrayCamelCase } from "../funcs/requestBodiesRequestBodyPostApplicationJsonArrayOfArrayCamelCase.js";
import { requestBodiesRequestBodyPostApplicationJsonArrayOfArrayOfPrimitive } from "../funcs/requestBodiesRequestBodyPostApplicationJsonArrayOfArrayOfPrimitive.js";
import { requestBodiesRequestBodyPostApplicationJsonArrayOfMap } from "../funcs/requestBodiesRequestBodyPostApplicationJsonArrayOfMap.js";
import { requestBodiesRequestBodyPostApplicationJsonArrayOfMapCamelCase } from "../funcs/requestBodiesRequestBodyPostApplicationJsonArrayOfMapCamelCase.js";
import { requestBodiesRequestBodyPostApplicationJsonArrayOfPrimitive } from "../funcs/requestBodiesRequestBodyPostApplicationJsonArrayOfPrimitive.js";
import { requestBodiesRequestBodyPostApplicationJsonArrayOfUnions } from "../funcs/requestBodiesRequestBodyPostApplicationJsonArrayOfUnions.js";
import { requestBodiesRequestBodyPostApplicationJsonDeep } from "../funcs/requestBodiesRequestBodyPostApplicationJsonDeep.js";
import { requestBodiesRequestBodyPostApplicationJsonDeepCamelCase } from "../funcs/requestBodiesRequestBodyPostApplicationJsonDeepCamelCase.js";
import { requestBodiesRequestBodyPostApplicationJsonMap } from "../funcs/requestBodiesRequestBodyPostApplicationJsonMap.js";
import { requestBodiesRequestBodyPostApplicationJsonMapCamelCase } from "../funcs/requestBodiesRequestBodyPostApplicationJsonMapCamelCase.js";
import { requestBodiesRequestBodyPostApplicationJsonMapObj } from "../funcs/requestBodiesRequestBodyPostApplicationJsonMapObj.js";
import { requestBodiesRequestBodyPostApplicationJsonMapObjCamelCase } from "../funcs/requestBodiesRequestBodyPostApplicationJsonMapObjCamelCase.js";
import { requestBodiesRequestBodyPostApplicationJsonMapOfArray } from "../funcs/requestBodiesRequestBodyPostApplicationJsonMapOfArray.js";
import { requestBodiesRequestBodyPostApplicationJsonMapOfArrayCamelCase } from "../funcs/requestBodiesRequestBodyPostApplicationJsonMapOfArrayCamelCase.js";
import { requestBodiesRequestBodyPostApplicationJsonMapOfMap } from "../funcs/requestBodiesRequestBodyPostApplicationJsonMapOfMap.js";
import { requestBodiesRequestBodyPostApplicationJsonMapOfMapCamelCase } from "../funcs/requestBodiesRequestBodyPostApplicationJsonMapOfMapCamelCase.js";
import { requestBodiesRequestBodyPostApplicationJsonMapOfMapOfPrimitive } from "../funcs/requestBodiesRequestBodyPostApplicationJsonMapOfMapOfPrimitive.js";
import { requestBodiesRequestBodyPostApplicationJsonMapOfPrimitive } from "../funcs/requestBodiesRequestBodyPostApplicationJsonMapOfPrimitive.js";
import { requestBodiesRequestBodyPostApplicationJsonMultipleJsonFiltered } from "../funcs/requestBodiesRequestBodyPostApplicationJsonMultipleJsonFiltered.js";
import { requestBodiesRequestBodyPostApplicationJsonSimple } from "../funcs/requestBodiesRequestBodyPostApplicationJsonSimple.js";
import { requestBodiesRequestBodyPostApplicationJsonSimpleCamelCase } from "../funcs/requestBodiesRequestBodyPostApplicationJsonSimpleCamelCase.js";
import { requestBodiesRequestBodyPostComplexNumberTypes } from "../funcs/requestBodiesRequestBodyPostComplexNumberTypes.js";
import { requestBodiesRequestBodyPostDefaultsAndConsts } from "../funcs/requestBodiesRequestBodyPostDefaultsAndConsts.js";
import { requestBodiesRequestBodyPostEmptyBodyRetainedWithAllOptionalFields } from "../funcs/requestBodiesRequestBodyPostEmptyBodyRetainedWithAllOptionalFields.js";
import { requestBodiesRequestBodyPostEmptyObject } from "../funcs/requestBodiesRequestBodyPostEmptyObject.js";
import { requestBodiesRequestBodyPostFormDeep } from "../funcs/requestBodiesRequestBodyPostFormDeep.js";
import { requestBodiesRequestBodyPostFormMapPrimitive } from "../funcs/requestBodiesRequestBodyPostFormMapPrimitive.js";
import { requestBodiesRequestBodyPostFormSimple } from "../funcs/requestBodiesRequestBodyPostFormSimple.js";
import { requestBodiesRequestBodyPostJsonDataTypesArrayBigInt } from "../funcs/requestBodiesRequestBodyPostJsonDataTypesArrayBigInt.js";
import { requestBodiesRequestBodyPostJsonDataTypesArrayDate } from "../funcs/requestBodiesRequestBodyPostJsonDataTypesArrayDate.js";
import { requestBodiesRequestBodyPostJsonDataTypesArrayDecimalStr } from "../funcs/requestBodiesRequestBodyPostJsonDataTypesArrayDecimalStr.js";
import { requestBodiesRequestBodyPostJsonDataTypesBigInt } from "../funcs/requestBodiesRequestBodyPostJsonDataTypesBigInt.js";
import { requestBodiesRequestBodyPostJsonDataTypesBigIntStr } from "../funcs/requestBodiesRequestBodyPostJsonDataTypesBigIntStr.js";
import { requestBodiesRequestBodyPostJsonDataTypesBoolean } from "../funcs/requestBodiesRequestBodyPostJsonDataTypesBoolean.js";
import { requestBodiesRequestBodyPostJsonDataTypesComplexNumberArrays } from "../funcs/requestBodiesRequestBodyPostJsonDataTypesComplexNumberArrays.js";
import { requestBodiesRequestBodyPostJsonDataTypesComplexNumberMaps } from "../funcs/requestBodiesRequestBodyPostJsonDataTypesComplexNumberMaps.js";
import { requestBodiesRequestBodyPostJsonDataTypesDate } from "../funcs/requestBodiesRequestBodyPostJsonDataTypesDate.js";
import { requestBodiesRequestBodyPostJsonDataTypesDateTime } from "../funcs/requestBodiesRequestBodyPostJsonDataTypesDateTime.js";
import { requestBodiesRequestBodyPostJsonDataTypesDecimal } from "../funcs/requestBodiesRequestBodyPostJsonDataTypesDecimal.js";
import { requestBodiesRequestBodyPostJsonDataTypesDecimalStr } from "../funcs/requestBodiesRequestBodyPostJsonDataTypesDecimalStr.js";
import { requestBodiesRequestBodyPostJsonDataTypesFloat32 } from "../funcs/requestBodiesRequestBodyPostJsonDataTypesFloat32.js";
import { requestBodiesRequestBodyPostJsonDataTypesInt32 } from "../funcs/requestBodiesRequestBodyPostJsonDataTypesInt32.js";
import { requestBodiesRequestBodyPostJsonDataTypesInteger } from "../funcs/requestBodiesRequestBodyPostJsonDataTypesInteger.js";
import { requestBodiesRequestBodyPostJsonDataTypesMapBigIntStr } from "../funcs/requestBodiesRequestBodyPostJsonDataTypesMapBigIntStr.js";
import { requestBodiesRequestBodyPostJsonDataTypesMapDateTime } from "../funcs/requestBodiesRequestBodyPostJsonDataTypesMapDateTime.js";
import { requestBodiesRequestBodyPostJsonDataTypesMapDecimal } from "../funcs/requestBodiesRequestBodyPostJsonDataTypesMapDecimal.js";
import { requestBodiesRequestBodyPostJsonDataTypesNumber } from "../funcs/requestBodiesRequestBodyPostJsonDataTypesNumber.js";
import { requestBodiesRequestBodyPostJsonDataTypesString } from "../funcs/requestBodiesRequestBodyPostJsonDataTypesString.js";
import { requestBodiesRequestBodyPostMultipleContentTypesComponentFiltered } from "../funcs/requestBodiesRequestBodyPostMultipleContentTypesComponentFiltered.js";
import { requestBodiesRequestBodyPostMultipleContentTypesComponentFilteredDefaultTest } from "../funcs/requestBodiesRequestBodyPostMultipleContentTypesComponentFilteredDefaultTest.js";
import { requestBodiesRequestBodyPostMultipleContentTypesInlineFiltered } from "../funcs/requestBodiesRequestBodyPostMultipleContentTypesInlineFiltered.js";
import { requestBodiesRequestBodyPostMultipleContentTypesSplitForm } from "../funcs/requestBodiesRequestBodyPostMultipleContentTypesSplitForm.js";
import { requestBodiesRequestBodyPostMultipleContentTypesSplitJson } from "../funcs/requestBodiesRequestBodyPostMultipleContentTypesSplitJson.js";
import { requestBodiesRequestBodyPostMultipleContentTypesSplitMultipart } from "../funcs/requestBodiesRequestBodyPostMultipleContentTypesSplitMultipart.js";
import { requestBodiesRequestBodyPostMultipleContentTypesSplitParamForm } from "../funcs/requestBodiesRequestBodyPostMultipleContentTypesSplitParamForm.js";
import { requestBodiesRequestBodyPostMultipleContentTypesSplitParamJson } from "../funcs/requestBodiesRequestBodyPostMultipleContentTypesSplitParamJson.js";
import { requestBodiesRequestBodyPostMultipleContentTypesSplitParamMultipart } from "../funcs/requestBodiesRequestBodyPostMultipleContentTypesSplitParamMultipart.js";
import { requestBodiesRequestBodyPostNotNullableNotRequiredStringBody } from "../funcs/requestBodiesRequestBodyPostNotNullableNotRequiredStringBody.js";
import { requestBodiesRequestBodyPostNullableNotRequiredStringBody } from "../funcs/requestBodiesRequestBodyPostNullableNotRequiredStringBody.js";
import { requestBodiesRequestBodyPostNullableRequiredStringBody } from "../funcs/requestBodiesRequestBodyPostNullableRequiredStringBody.js";
import { requestBodiesRequestBodyPostNullArray } from "../funcs/requestBodiesRequestBodyPostNullArray.js";
import { requestBodiesRequestBodyPostNullDictionary } from "../funcs/requestBodiesRequestBodyPostNullDictionary.js";
import { requestBodiesRequestBodyPutBytes } from "../funcs/requestBodiesRequestBodyPutBytes.js";
import { requestBodiesRequestBodyPutBytesWithParams } from "../funcs/requestBodiesRequestBodyPutBytesWithParams.js";
import { requestBodiesRequestBodyPutMultipartDeep } from "../funcs/requestBodiesRequestBodyPutMultipartDeep.js";
import { requestBodiesRequestBodyPutMultipartDifferentFileName } from "../funcs/requestBodiesRequestBodyPutMultipartDifferentFileName.js";
import { requestBodiesRequestBodyPutMultipartFile } from "../funcs/requestBodiesRequestBodyPutMultipartFile.js";
import { requestBodiesRequestBodyPutMultipartOptionalRequestBody } from "../funcs/requestBodiesRequestBodyPutMultipartOptionalRequestBody.js";
import { requestBodiesRequestBodyPutMultipartSimple } from "../funcs/requestBodiesRequestBodyPutMultipartSimple.js";
import { requestBodiesRequestBodyPutString } from "../funcs/requestBodiesRequestBodyPutString.js";
import { requestBodiesRequestBodyPutStringWithParams } from "../funcs/requestBodiesRequestBodyPutStringWithParams.js";
import { requestBodiesRequestBodyReadAndWrite } from "../funcs/requestBodiesRequestBodyReadAndWrite.js";
import { requestBodiesRequestBodyReadOnlyInput } from "../funcs/requestBodiesRequestBodyReadOnlyInput.js";
import { requestBodiesRequestBodyReadOnlyUnion } from "../funcs/requestBodiesRequestBodyReadOnlyUnion.js";
import { requestBodiesRequestBodyReadWriteOnlyUnion } from "../funcs/requestBodiesRequestBodyReadWriteOnlyUnion.js";
import { requestBodiesRequestBodyWriteOnly } from "../funcs/requestBodiesRequestBodyWriteOnly.js";
import { requestBodiesRequestBodyWriteOnlyOutput } from "../funcs/requestBodiesRequestBodyWriteOnlyOutput.js";
import { requestBodiesRequestBodyWriteOnlyUnion } from "../funcs/requestBodiesRequestBodyWriteOnlyUnion.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { Decimal as Decimal$ } from "./types/decimal.js";
import { unwrapAsync } from "./types/fp.js";
import { RFCDate } from "./types/rfcdate.js";

export class RequestBodies extends ClientSDK {
  async nullEnumPost(
    request: shared.ObjectWithNullEnums,
    options?: RequestOptions,
  ): Promise<operations.NullEnumPostRes> {
    return unwrapAsync(requestBodiesNullEnumPost(
      this,
      request,
      options,
    ));
  }

  async nullableObjectPost(
    request: shared.NullableObject | null,
    options?: RequestOptions,
  ): Promise<operations.NullableObjectPostRes> {
    return unwrapAsync(requestBodiesNullableObjectPost(
      this,
      request,
      options,
    ));
  }

  async nullableOptionalFieldsPost(
    request: operations.NullableOptionalFieldsPostRequestBody,
    options?: RequestOptions,
  ): Promise<operations.NullableOptionalFieldsPostResponseBody> {
    return unwrapAsync(requestBodiesNullableOptionalFieldsPost(
      this,
      request,
      options,
    ));
  }

  async nullableRequiredEmptyObjectPost(
    request: operations.NullableRequiredEmptyObjectPostRequestBody,
    options?: RequestOptions,
  ): Promise<operations.NullableRequiredEmptyObjectPostResponseBody> {
    return unwrapAsync(requestBodiesNullableRequiredEmptyObjectPost(
      this,
      request,
      options,
    ));
  }

  async nullableRequiredPropertyPost(
    request: operations.NullableRequiredPropertyPostRequestBody,
    options?: RequestOptions,
  ): Promise<operations.NullableRequiredPropertyPostResponseBody> {
    return unwrapAsync(requestBodiesNullableRequiredPropertyPost(
      this,
      request,
      options,
    ));
  }

  async nullableRequiredSharedObjectPost(
    request: operations.NullableRequiredSharedObjectPostRequestBody,
    options?: RequestOptions,
  ): Promise<operations.NullableRequiredSharedObjectPostResponseBody> {
    return unwrapAsync(requestBodiesNullableRequiredSharedObjectPost(
      this,
      request,
      options,
    ));
  }

  async requestBodyDeprecatedRequestBodyRefPost(
    request: shared.DeprecatedObjectWithExample,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyDeprecatedRequestBodyRefPostResponseBody> {
    return unwrapAsync(requestBodiesRequestBodyDeprecatedRequestBodyRefPost(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostApplicationJsonArray(
    request: Array<shared.SimpleObject>,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<Array<shared.SimpleObject>> {
    return unwrapAsync(requestBodiesRequestBodyPostApplicationJsonArray(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostApplicationJsonArrayCamelCase(
    request: Array<shared.SimpleObjectCamelCase>,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<Array<shared.SimpleObjectCamelCase>> {
    return unwrapAsync(
      requestBodiesRequestBodyPostApplicationJsonArrayCamelCase(
        this,
        request,
        options,
      ),
    );
  }

  async requestBodyPostApplicationJsonArrayObj(
    request: Array<shared.SimpleObject>,
    options?: RequestOptions,
  ): Promise<shared.ArrObjValue> {
    return unwrapAsync(requestBodiesRequestBodyPostApplicationJsonArrayObj(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostApplicationJsonArrayObjCamelCase(
    request: Array<shared.SimpleObjectCamelCase>,
    options?: RequestOptions,
  ): Promise<shared.ArrObjValueCamelCase> {
    return unwrapAsync(
      requestBodiesRequestBodyPostApplicationJsonArrayObjCamelCase(
        this,
        request,
        options,
      ),
    );
  }

  async requestBodyPostApplicationJsonArrayOfArray(
    request: Array<Array<shared.SimpleObject>>,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<Array<Array<shared.SimpleObject>>> {
    return unwrapAsync(requestBodiesRequestBodyPostApplicationJsonArrayOfArray(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostApplicationJsonArrayOfArrayCamelCase(
    request: Array<Array<shared.SimpleObjectCamelCase>>,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<Array<Array<shared.SimpleObjectCamelCase>>> {
    return unwrapAsync(
      requestBodiesRequestBodyPostApplicationJsonArrayOfArrayCamelCase(
        this,
        request,
        options,
      ),
    );
  }

  async requestBodyPostApplicationJsonArrayOfArrayOfPrimitive(
    request: Array<Array<string>>,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<Array<Array<string>>> {
    return unwrapAsync(
      requestBodiesRequestBodyPostApplicationJsonArrayOfArrayOfPrimitive(
        this,
        request,
        options,
      ),
    );
  }

  async requestBodyPostApplicationJsonArrayOfMap(
    request: Array<{ [k: string]: shared.SimpleObject }>,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<Array<{ [k: string]: shared.SimpleObject }>> {
    return unwrapAsync(requestBodiesRequestBodyPostApplicationJsonArrayOfMap(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostApplicationJsonArrayOfMapCamelCase(
    request: Array<{ [k: string]: shared.SimpleObjectCamelCase }>,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<Array<{ [k: string]: shared.SimpleObjectCamelCase }>> {
    return unwrapAsync(
      requestBodiesRequestBodyPostApplicationJsonArrayOfMapCamelCase(
        this,
        request,
        options,
      ),
    );
  }

  async requestBodyPostApplicationJsonArrayOfPrimitive(
    request: Array<string>,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<Array<string>> {
    return unwrapAsync(
      requestBodiesRequestBodyPostApplicationJsonArrayOfPrimitive(
        this,
        request,
        options,
      ),
    );
  }

  async requestBodyPostApplicationJsonArrayOfUnions(
    request: operations.RequestBodyPostApplicationJsonArrayOfUnionsRequestBody,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<void> {
    return unwrapAsync(requestBodiesRequestBodyPostApplicationJsonArrayOfUnions(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostApplicationJsonDeep(
    request: shared.DeepObject,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostApplicationJsonDeepRes> {
    return unwrapAsync(requestBodiesRequestBodyPostApplicationJsonDeep(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostApplicationJsonDeepCamelCase(
    request: shared.DeepObjectCamelCase,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostApplicationJsonDeepCamelCaseRes> {
    return unwrapAsync(requestBodiesRequestBodyPostApplicationJsonDeepCamelCase(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostApplicationJsonMap(
    request: { [k: string]: shared.SimpleObject },
    options?: RequestOptions & { serverURL?: string },
  ): Promise<{ [k: string]: shared.SimpleObject }> {
    return unwrapAsync(requestBodiesRequestBodyPostApplicationJsonMap(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostApplicationJsonMapCamelCase(
    request: { [k: string]: shared.SimpleObjectCamelCase },
    options?: RequestOptions & { serverURL?: string },
  ): Promise<{ [k: string]: shared.SimpleObjectCamelCase }> {
    return unwrapAsync(requestBodiesRequestBodyPostApplicationJsonMapCamelCase(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostApplicationJsonMapObj(
    request: { [k: string]: shared.SimpleObject },
    options?: RequestOptions,
  ): Promise<shared.MapObjValue> {
    return unwrapAsync(requestBodiesRequestBodyPostApplicationJsonMapObj(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostApplicationJsonMapObjCamelCase(
    request: { [k: string]: shared.SimpleObjectCamelCase },
    options?: RequestOptions,
  ): Promise<shared.MapObjValueCamelCase> {
    return unwrapAsync(
      requestBodiesRequestBodyPostApplicationJsonMapObjCamelCase(
        this,
        request,
        options,
      ),
    );
  }

  async requestBodyPostApplicationJsonMapOfArray(
    request: { [k: string]: Array<shared.SimpleObject> },
    options?: RequestOptions & { serverURL?: string },
  ): Promise<{ [k: string]: Array<shared.SimpleObject> }> {
    return unwrapAsync(requestBodiesRequestBodyPostApplicationJsonMapOfArray(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostApplicationJsonMapOfArrayCamelCase(
    request: { [k: string]: Array<shared.SimpleObjectCamelCase> },
    options?: RequestOptions & { serverURL?: string },
  ): Promise<{ [k: string]: Array<shared.SimpleObjectCamelCase> }> {
    return unwrapAsync(
      requestBodiesRequestBodyPostApplicationJsonMapOfArrayCamelCase(
        this,
        request,
        options,
      ),
    );
  }

  async requestBodyPostApplicationJsonMapOfMap(
    request: { [k: string]: { [k: string]: shared.SimpleObject } },
    options?: RequestOptions & { serverURL?: string },
  ): Promise<{ [k: string]: { [k: string]: shared.SimpleObject } }> {
    return unwrapAsync(requestBodiesRequestBodyPostApplicationJsonMapOfMap(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostApplicationJsonMapOfMapCamelCase(
    request: { [k: string]: { [k: string]: shared.SimpleObjectCamelCase } },
    options?: RequestOptions & { serverURL?: string },
  ): Promise<{ [k: string]: { [k: string]: shared.SimpleObjectCamelCase } }> {
    return unwrapAsync(
      requestBodiesRequestBodyPostApplicationJsonMapOfMapCamelCase(
        this,
        request,
        options,
      ),
    );
  }

  async requestBodyPostApplicationJsonMapOfMapOfPrimitive(
    request: { [k: string]: { [k: string]: string } },
    options?: RequestOptions & { serverURL?: string },
  ): Promise<{ [k: string]: { [k: string]: string } }> {
    return unwrapAsync(
      requestBodiesRequestBodyPostApplicationJsonMapOfMapOfPrimitive(
        this,
        request,
        options,
      ),
    );
  }

  async requestBodyPostApplicationJsonMapOfPrimitive(
    request: { [k: string]: string },
    options?: RequestOptions & { serverURL?: string },
  ): Promise<{ [k: string]: string }> {
    return unwrapAsync(
      requestBodiesRequestBodyPostApplicationJsonMapOfPrimitive(
        this,
        request,
        options,
      ),
    );
  }

  async requestBodyPostApplicationJsonMultipleJsonFiltered(
    request: shared.SimpleObject,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostApplicationJsonMultipleJsonFilteredRes> {
    return unwrapAsync(
      requestBodiesRequestBodyPostApplicationJsonMultipleJsonFiltered(
        this,
        request,
        options,
      ),
    );
  }

  async requestBodyPostApplicationJsonSimple(
    request: shared.SimpleObject,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostApplicationJsonSimpleRes> {
    return unwrapAsync(requestBodiesRequestBodyPostApplicationJsonSimple(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostApplicationJsonSimpleCamelCase(
    request: shared.SimpleObjectCamelCase,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostApplicationJsonSimpleCamelCaseRes> {
    return unwrapAsync(
      requestBodiesRequestBodyPostApplicationJsonSimpleCamelCase(
        this,
        request,
        options,
      ),
    );
  }

  async requestBodyPostComplexNumberTypes(
    request: operations.RequestBodyPostComplexNumberTypesRequest,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostComplexNumberTypesResponseBody> {
    return unwrapAsync(requestBodiesRequestBodyPostComplexNumberTypes(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostDefaultsAndConsts(
    request: shared.DefaultsAndConsts,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostDefaultsAndConstsResponseBody> {
    return unwrapAsync(requestBodiesRequestBodyPostDefaultsAndConsts(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostEmptyBodyRetainedWithAllOptionalFields(
    request?:
      | operations.RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsRequestBody
      | undefined,
    options?: RequestOptions,
  ): Promise<
    operations.RequestBodyPostEmptyBodyRetainedWithAllOptionalFieldsResponseBody
  > {
    return unwrapAsync(
      requestBodiesRequestBodyPostEmptyBodyRetainedWithAllOptionalFields(
        this,
        request,
        options,
      ),
    );
  }

  async requestBodyPostEmptyObject(
    request: operations.RequestBodyPostEmptyObjectRequestBody,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostEmptyObjectResponseBody> {
    return unwrapAsync(requestBodiesRequestBodyPostEmptyObject(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostFormDeep(
    request: shared.DeepObject,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostFormDeepRes> {
    return unwrapAsync(requestBodiesRequestBodyPostFormDeep(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostFormMapPrimitive(
    request: { [k: string]: string },
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostFormMapPrimitiveRes> {
    return unwrapAsync(requestBodiesRequestBodyPostFormMapPrimitive(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostFormSimple(
    request: shared.SimpleObject,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostFormSimpleRes> {
    return unwrapAsync(requestBodiesRequestBodyPostFormSimple(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostJsonDataTypesArrayBigInt(
    request: Array<bigint>,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostJsonDataTypesArrayBigIntResponseBody> {
    return unwrapAsync(requestBodiesRequestBodyPostJsonDataTypesArrayBigInt(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostJsonDataTypesArrayDate(
    request: Array<RFCDate>,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostJsonDataTypesArrayDateResponseBody> {
    return unwrapAsync(requestBodiesRequestBodyPostJsonDataTypesArrayDate(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostJsonDataTypesArrayDecimalStr(
    request: Array<Decimal$ | number>,
    options?: RequestOptions,
  ): Promise<
    operations.RequestBodyPostJsonDataTypesArrayDecimalStrResponseBody
  > {
    return unwrapAsync(requestBodiesRequestBodyPostJsonDataTypesArrayDecimalStr(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostJsonDataTypesBigInt(
    request: bigint,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostJsonDataTypesBigIntResponseBody> {
    return unwrapAsync(requestBodiesRequestBodyPostJsonDataTypesBigInt(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostJsonDataTypesBigIntStr(
    request: bigint,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostJsonDataTypesBigIntStrResponseBody> {
    return unwrapAsync(requestBodiesRequestBodyPostJsonDataTypesBigIntStr(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostJsonDataTypesBoolean(
    request: boolean,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostJsonDataTypesBooleanResponseBody> {
    return unwrapAsync(requestBodiesRequestBodyPostJsonDataTypesBoolean(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostJsonDataTypesComplexNumberArrays(
    request: shared.ComplexNumberArrays,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostJsonDataTypesComplexNumberArraysRes> {
    return unwrapAsync(
      requestBodiesRequestBodyPostJsonDataTypesComplexNumberArrays(
        this,
        request,
        options,
      ),
    );
  }

  async requestBodyPostJsonDataTypesComplexNumberMaps(
    request: shared.ComplexNumberMaps,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostJsonDataTypesComplexNumberMapsRes> {
    return unwrapAsync(
      requestBodiesRequestBodyPostJsonDataTypesComplexNumberMaps(
        this,
        request,
        options,
      ),
    );
  }

  async requestBodyPostJsonDataTypesDate(
    request: RFCDate,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostJsonDataTypesDateResponseBody> {
    return unwrapAsync(requestBodiesRequestBodyPostJsonDataTypesDate(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostJsonDataTypesDateTime(
    request: Date,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostJsonDataTypesDateTimeResponseBody> {
    return unwrapAsync(requestBodiesRequestBodyPostJsonDataTypesDateTime(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostJsonDataTypesDecimal(
    request: Decimal$ | number,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostJsonDataTypesDecimalResponseBody> {
    return unwrapAsync(requestBodiesRequestBodyPostJsonDataTypesDecimal(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostJsonDataTypesDecimalStr(
    request: Decimal$ | number,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostJsonDataTypesDecimalStrResponseBody> {
    return unwrapAsync(requestBodiesRequestBodyPostJsonDataTypesDecimalStr(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostJsonDataTypesFloat32(
    request: number,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostJsonDataTypesFloat32ResponseBody> {
    return unwrapAsync(requestBodiesRequestBodyPostJsonDataTypesFloat32(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostJsonDataTypesInt32(
    request: number,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostJsonDataTypesInt32ResponseBody> {
    return unwrapAsync(requestBodiesRequestBodyPostJsonDataTypesInt32(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostJsonDataTypesInteger(
    request: number,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostJsonDataTypesIntegerResponseBody> {
    return unwrapAsync(requestBodiesRequestBodyPostJsonDataTypesInteger(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostJsonDataTypesMapBigIntStr(
    request: { [k: string]: bigint },
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostJsonDataTypesMapBigIntStrResponseBody> {
    return unwrapAsync(requestBodiesRequestBodyPostJsonDataTypesMapBigIntStr(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostJsonDataTypesMapDateTime(
    request: { [k: string]: Date },
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostJsonDataTypesMapDateTimeResponseBody> {
    return unwrapAsync(requestBodiesRequestBodyPostJsonDataTypesMapDateTime(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostJsonDataTypesMapDecimal(
    request: { [k: string]: Decimal$ | number },
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostJsonDataTypesMapDecimalResponseBody> {
    return unwrapAsync(requestBodiesRequestBodyPostJsonDataTypesMapDecimal(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostJsonDataTypesNumber(
    request: number,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostJsonDataTypesNumberResponseBody> {
    return unwrapAsync(requestBodiesRequestBodyPostJsonDataTypesNumber(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostJsonDataTypesString(
    request: string,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostJsonDataTypesStringResponseBody> {
    return unwrapAsync(requestBodiesRequestBodyPostJsonDataTypesString(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostMultipleContentTypesComponentFiltered(
    request: shared.SimpleObject,
    options?: RequestOptions,
  ): Promise<
    operations.RequestBodyPostMultipleContentTypesComponentFilteredRes
  > {
    return unwrapAsync(
      requestBodiesRequestBodyPostMultipleContentTypesComponentFiltered(
        this,
        request,
        options,
      ),
    );
  }

  async requestBodyPostMultipleContentTypesComponentFilteredDefaultTest(
    request: shared.SimpleObject,
    options?: RequestOptions,
  ): Promise<
    operations.RequestBodyPostMultipleContentTypesComponentFilteredDefaultTestRes
  > {
    return unwrapAsync(
      requestBodiesRequestBodyPostMultipleContentTypesComponentFilteredDefaultTest(
        this,
        request,
        options,
      ),
    );
  }

  async requestBodyPostMultipleContentTypesInlineFiltered(
    request:
      operations.RequestBodyPostMultipleContentTypesInlineFilteredRequestBody,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostMultipleContentTypesInlineFilteredRes> {
    return unwrapAsync(
      requestBodiesRequestBodyPostMultipleContentTypesInlineFiltered(
        this,
        request,
        options,
      ),
    );
  }

  async requestBodyPostMultipleContentTypesSplitParamForm(
    requestBody:
      operations.RequestBodyPostMultipleContentTypesSplitParamFormRequestBody,
    paramStr: string,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostMultipleContentTypesSplitParamFormRes> {
    return unwrapAsync(
      requestBodiesRequestBodyPostMultipleContentTypesSplitParamForm(
        this,
        requestBody,
        paramStr,
        options,
      ),
    );
  }

  async requestBodyPostMultipleContentTypesSplitParamJson(
    requestBody:
      operations.RequestBodyPostMultipleContentTypesSplitParamJsonRequestBody,
    paramStr: string,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostMultipleContentTypesSplitParamJsonRes> {
    return unwrapAsync(
      requestBodiesRequestBodyPostMultipleContentTypesSplitParamJson(
        this,
        requestBody,
        paramStr,
        options,
      ),
    );
  }

  async requestBodyPostMultipleContentTypesSplitParamMultipart(
    requestBody:
      operations.RequestBodyPostMultipleContentTypesSplitParamMultipartRequestBody,
    paramStr: string,
    options?: RequestOptions,
  ): Promise<
    operations.RequestBodyPostMultipleContentTypesSplitParamMultipartRes
  > {
    return unwrapAsync(
      requestBodiesRequestBodyPostMultipleContentTypesSplitParamMultipart(
        this,
        requestBody,
        paramStr,
        options,
      ),
    );
  }

  async requestBodyPostMultipleContentTypesSplitForm(
    request: operations.RequestBodyPostMultipleContentTypesSplitFormRequestBody,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostMultipleContentTypesSplitFormRes> {
    return unwrapAsync(
      requestBodiesRequestBodyPostMultipleContentTypesSplitForm(
        this,
        request,
        options,
      ),
    );
  }

  async requestBodyPostMultipleContentTypesSplitJson(
    request: operations.RequestBodyPostMultipleContentTypesSplitJsonRequestBody,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostMultipleContentTypesSplitJsonRes> {
    return unwrapAsync(
      requestBodiesRequestBodyPostMultipleContentTypesSplitJson(
        this,
        request,
        options,
      ),
    );
  }

  async requestBodyPostMultipleContentTypesSplitMultipart(
    request:
      operations.RequestBodyPostMultipleContentTypesSplitMultipartRequestBody,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostMultipleContentTypesSplitMultipartRes> {
    return unwrapAsync(
      requestBodiesRequestBodyPostMultipleContentTypesSplitMultipart(
        this,
        request,
        options,
      ),
    );
  }

  async requestBodyPostNotNullableNotRequiredStringBody(
    request?: string | undefined,
    options?: RequestOptions,
  ): Promise<
    operations.RequestBodyPostNotNullableNotRequiredStringBodyResponseBody
  > {
    return unwrapAsync(
      requestBodiesRequestBodyPostNotNullableNotRequiredStringBody(
        this,
        request,
        options,
      ),
    );
  }

  async requestBodyPostNullArray(
    request: Array<string> | null,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostNullArrayResponseBody> {
    return unwrapAsync(requestBodiesRequestBodyPostNullArray(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostNullDictionary(
    request: { [k: string]: string } | null,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostNullDictionaryResponseBody> {
    return unwrapAsync(requestBodiesRequestBodyPostNullDictionary(
      this,
      request,
      options,
    ));
  }

  async requestBodyPostNullableNotRequiredStringBody(
    request?: string | null | undefined,
    options?: RequestOptions,
  ): Promise<
    operations.RequestBodyPostNullableNotRequiredStringBodyResponseBody
  > {
    return unwrapAsync(
      requestBodiesRequestBodyPostNullableNotRequiredStringBody(
        this,
        request,
        options,
      ),
    );
  }

  async requestBodyPostNullableRequiredStringBody(
    request: string | null,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPostNullableRequiredStringBodyResponseBody> {
    return unwrapAsync(requestBodiesRequestBodyPostNullableRequiredStringBody(
      this,
      request,
      options,
    ));
  }

  async requestBodyPutBytes(
    request: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPutBytesRes> {
    return unwrapAsync(requestBodiesRequestBodyPutBytes(
      this,
      request,
      options,
    ));
  }

  async requestBodyPutBytesWithParams(
    requestBody: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array,
    queryStringParam: string,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPutBytesWithParamsRes> {
    return unwrapAsync(requestBodiesRequestBodyPutBytesWithParams(
      this,
      requestBody,
      queryStringParam,
      options,
    ));
  }

  async requestBodyPutMultipartDeep(
    request: shared.DeepObject,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPutMultipartDeepRes> {
    return unwrapAsync(requestBodiesRequestBodyPutMultipartDeep(
      this,
      request,
      options,
    ));
  }

  async requestBodyPutMultipartDifferentFileName(
    request: operations.RequestBodyPutMultipartDifferentFileNameRequestBody,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPutMultipartDifferentFileNameRes> {
    return unwrapAsync(requestBodiesRequestBodyPutMultipartDifferentFileName(
      this,
      request,
      options,
    ));
  }

  async requestBodyPutMultipartFile(
    request: operations.RequestBodyPutMultipartFileRequestBody,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPutMultipartFileRes> {
    return unwrapAsync(requestBodiesRequestBodyPutMultipartFile(
      this,
      request,
      options,
    ));
  }

  async requestBodyPutMultipartOptionalRequestBody(
    request?:
      | operations.RequestBodyPutMultipartOptionalRequestBodyRequestBody
      | undefined,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPutMultipartOptionalRequestBodyRes> {
    return unwrapAsync(requestBodiesRequestBodyPutMultipartOptionalRequestBody(
      this,
      request,
      options,
    ));
  }

  async requestBodyPutMultipartSimple(
    request: shared.SimpleObject,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPutMultipartSimpleRes> {
    return unwrapAsync(requestBodiesRequestBodyPutMultipartSimple(
      this,
      request,
      options,
    ));
  }

  async requestBodyPutString(
    request: string,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPutStringRes> {
    return unwrapAsync(requestBodiesRequestBodyPutString(
      this,
      request,
      options,
    ));
  }

  async requestBodyPutStringWithParams(
    requestBody: string,
    queryStringParam: string,
    options?: RequestOptions,
  ): Promise<operations.RequestBodyPutStringWithParamsRes> {
    return unwrapAsync(requestBodiesRequestBodyPutStringWithParams(
      this,
      requestBody,
      queryStringParam,
      options,
    ));
  }

  async requestBodyReadAndWrite(
    request: shared.ReadWriteObject,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<shared.ReadWriteObjectOutput> {
    return unwrapAsync(requestBodiesRequestBodyReadAndWrite(
      this,
      request,
      options,
    ));
  }

  async requestBodyReadOnlyInput(
    request: shared.ReadOnlyObjectInput,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<shared.ReadOnlyObject> {
    return unwrapAsync(requestBodiesRequestBodyReadOnlyInput(
      this,
      request,
      options,
    ));
  }

  async requestBodyReadOnlyUnion(
    request: shared.WeaklyTypedOneOfReadOnlyObjectInput,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<shared.WeaklyTypedOneOfReadOnlyObject> {
    return unwrapAsync(requestBodiesRequestBodyReadOnlyUnion(
      this,
      request,
      options,
    ));
  }

  async requestBodyReadWriteOnlyUnion(
    request: shared.WeaklyTypedOneOfReadWriteObject,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<shared.WeaklyTypedOneOfReadWriteObjectOutput> {
    return unwrapAsync(requestBodiesRequestBodyReadWriteOnlyUnion(
      this,
      request,
      options,
    ));
  }

  async requestBodyWriteOnly(
    request: shared.WriteOnlyObject,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<shared.ReadOnlyObject> {
    return unwrapAsync(requestBodiesRequestBodyWriteOnly(
      this,
      request,
      options,
    ));
  }

  async requestBodyWriteOnlyOutput(
    request: shared.WriteOnlyObject,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<shared.WriteOnlyObjectOutput> {
    return unwrapAsync(requestBodiesRequestBodyWriteOnlyOutput(
      this,
      request,
      options,
    ));
  }

  async requestBodyWriteOnlyUnion(
    request: shared.WeaklyTypedOneOfWriteOnlyObject,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<shared.WeaklyTypedOneOfWriteOnlyObjectOutput> {
    return unwrapAsync(requestBodiesRequestBodyWriteOnlyUnion(
      this,
      request,
      options,
    ));
  }
}
