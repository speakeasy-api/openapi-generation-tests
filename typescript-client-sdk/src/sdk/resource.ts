/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { resourceCreateFile } from "../funcs/resourceCreateFile.js";
import { resourceCreateResource } from "../funcs/resourceCreateResource.js";
import { resourceDeleteResource } from "../funcs/resourceDeleteResource.js";
import { resourceGetArrayDataSource } from "../funcs/resourceGetArrayDataSource.js";
import { resourceGetResource } from "../funcs/resourceGetResource.js";
import { resourceUpdateResource } from "../funcs/resourceUpdateResource.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Resource extends ClientSDK {
  async createFile(
    request: operations.CreateFileRequestBody,
    options?: RequestOptions,
  ): Promise<shared.FileResource> {
    return unwrapAsync(resourceCreateFile(
      this,
      request,
      options,
    ));
  }

  async createResource(
    request: shared.ExampleResource,
    options?: RequestOptions,
  ): Promise<shared.ExampleResource> {
    return unwrapAsync(resourceCreateResource(
      this,
      request,
      options,
    ));
  }

  async deleteResource(
    resourceId: string,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(resourceDeleteResource(
      this,
      resourceId,
      options,
    ));
  }

  async getArrayDataSource(
    filter: string,
    options?: RequestOptions,
  ): Promise<Array<string>> {
    return unwrapAsync(resourceGetArrayDataSource(
      this,
      filter,
      options,
    ));
  }

  async getResource(
    resourceId: string,
    options?: RequestOptions,
  ): Promise<shared.ExampleResource> {
    return unwrapAsync(resourceGetResource(
      this,
      resourceId,
      options,
    ));
  }

  async updateResource(
    augment: string,
    resourceId: string,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(resourceUpdateResource(
      this,
      augment,
      resourceId,
      options,
    ));
  }
}
