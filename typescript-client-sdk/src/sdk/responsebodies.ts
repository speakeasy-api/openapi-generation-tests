/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../sdk/models/errors";
import * as operations from "../sdk/models/operations";
import * as shared from "../sdk/models/shared";

export enum ResponseBodyOptionalGetAcceptEnum {
    applicationJson = "application/json",
    textPlain = "text/plain",
}

export class ResponseBodies extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }
    async responseBodyAdditionalPropertiesAnyPost(
        input: shared.ObjWithAnyAdditionalProperties,
        options?: RequestOptions
    ): Promise<operations.ResponseBodyAdditionalPropertiesAnyPostResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = shared.ObjWithAnyAdditionalProperties$.outboundSchema.parse(input);
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent(
            "/anything/responseBodies/additionalPropertiesAny"
        )();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result =
                operations.ResponseBodyAdditionalPropertiesAnyPostResponse$.inboundSchema.parse({
                    ...responseFields$,
                    object: responseBody,
                });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async responseBodyAdditionalPropertiesComplexNumbersPost(
        input: shared.ObjWithComplexNumbersAdditionalProperties,
        options?: RequestOptions
    ): Promise<operations.ResponseBodyAdditionalPropertiesComplexNumbersPostResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ =
            shared.ObjWithComplexNumbersAdditionalProperties$.outboundSchema.parse(input);
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent(
            "/anything/responseBodies/additionalPropertiesComplexNumbers"
        )();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result =
                operations.ResponseBodyAdditionalPropertiesComplexNumbersPostResponse$.inboundSchema.parse(
                    {
                        ...responseFields$,
                        object: responseBody,
                    }
                );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async responseBodyAdditionalPropertiesDatePost(
        input: shared.ObjWithDateAdditionalProperties,
        options?: RequestOptions
    ): Promise<operations.ResponseBodyAdditionalPropertiesDatePostResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = shared.ObjWithDateAdditionalProperties$.outboundSchema.parse(input);
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent(
            "/anything/responseBodies/additionalPropertiesDate"
        )();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result =
                operations.ResponseBodyAdditionalPropertiesDatePostResponse$.inboundSchema.parse({
                    ...responseFields$,
                    object: responseBody,
                });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async responseBodyAdditionalPropertiesObjectPost(
        input: shared.ObjWithObjAdditionalProperties,
        options?: RequestOptions
    ): Promise<operations.ResponseBodyAdditionalPropertiesObjectPostResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = shared.ObjWithObjAdditionalProperties$.outboundSchema.parse(input);
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent(
            "/anything/responseBodies/additionalPropertiesObject"
        )();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result =
                operations.ResponseBodyAdditionalPropertiesObjectPostResponse$.inboundSchema.parse({
                    ...responseFields$,
                    object: responseBody,
                });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async responseBodyAdditionalPropertiesPost(
        input: shared.ObjWithStringAdditionalProperties,
        options?: RequestOptions
    ): Promise<operations.ResponseBodyAdditionalPropertiesPostResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = shared.ObjWithStringAdditionalProperties$.outboundSchema.parse(input);
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/anything/responseBodies/additionalProperties")();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result =
                operations.ResponseBodyAdditionalPropertiesPostResponse$.inboundSchema.parse({
                    ...responseFields$,
                    object: responseBody,
                });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async responseBodyBytesGet(
        options?: RequestOptions
    ): Promise<operations.ResponseBodyBytesGetResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/octet-stream");

        const path$ = this.templateURLComponent("/bytes/100")();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            { security: securitySettings$, method: "GET", path: path$, headers: headers$ },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/octet-stream")) {
            const responseBody = response.body ?? undefined;
            const result = operations.ResponseBodyBytesGetResponse$.inboundSchema.parse({
                ...responseFields$,
                bytes: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async responseBodyEmptyWithHeaders(
        xNumberHeader: number,
        xStringHeader: string,
        options?: RequestOptions
    ): Promise<operations.ResponseBodyEmptyWithHeadersResponse> {
        const input$: operations.ResponseBodyEmptyWithHeadersRequest = {
            xNumberHeader: xNumberHeader,
            xStringHeader: xStringHeader,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");

        const payload$ =
            operations.ResponseBodyEmptyWithHeadersRequest$.outboundSchema.parse(input$);
        const body$ = null;

        const path$ = this.templateURLComponent("/response-headers")();

        const query$ = [
            enc$.encodeForm("X-Number-Header", payload$["X-Number-Header"], {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("X-String-Header", payload$["X-String-Header"], {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            return operations.ResponseBodyEmptyWithHeadersResponse$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
            });
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async responseBodyOptionalGet(
        options?: RequestOptions & {
            acceptHeaderOverride?: ResponseBodyOptionalGetAcceptEnum;
            serverURL?: string;
        }
    ): Promise<operations.ResponseBodyOptionalGetResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);

        const accept = options?.acceptHeaderOverride || "application/json;q=1, text/plain;q=0";
        headers$.set("Accept", accept);

        const path$ = this.templateURLComponent("/optional")();

        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.ResponseBodyOptionalGetServerList[0], {
                charEncoding: "percent",
            })();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.ResponseBodyOptionalGetResponse$.inboundSchema.parse({
                ...responseFields$,
                typedObject1: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 200, "text/plain")) {
            const responseBody = await response.text();
            const result = operations.ResponseBodyOptionalGetResponse$.inboundSchema.parse({
                ...responseFields$,
                res: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async responseBodyReadOnly(
        options?: RequestOptions & { serverURL?: string }
    ): Promise<operations.ResponseBodyReadOnlyResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const path$ = this.templateURLComponent("/readonlyorwriteonly#readOnly")();

        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.ResponseBodyReadOnlyServerList[0], {
                charEncoding: "percent",
            })();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.ResponseBodyReadOnlyResponse$.inboundSchema.parse({
                ...responseFields$,
                readOnlyObject: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async responseBodyStringGet(
        options?: RequestOptions
    ): Promise<operations.ResponseBodyStringGetResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "text/html");

        const path$ = this.templateURLComponent("/html")();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            { security: securitySettings$, method: "GET", path: path$, headers: headers$ },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "text/html")) {
            const responseBody = await response.text();
            const result = operations.ResponseBodyStringGetResponse$.inboundSchema.parse({
                ...responseFields$,
                html: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async responseBodyXmlGet(
        options?: RequestOptions
    ): Promise<operations.ResponseBodyXmlGetResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/xml");

        const path$ = this.templateURLComponent("/xml")();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            { security: securitySettings$, method: "GET", path: path$, headers: headers$ },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/xml")) {
            const responseBody = await response.text();
            const result = operations.ResponseBodyXmlGetResponse$.inboundSchema.parse({
                ...responseFields$,
                xml: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async responseBodyZeroValueComplexTypePtrsPost(
        input: shared.ObjWithZeroValueComplexTypePtrs,
        options?: RequestOptions
    ): Promise<operations.ResponseBodyZeroValueComplexTypePtrsPostResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = shared.ObjWithZeroValueComplexTypePtrs$.outboundSchema.parse(input);
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent(
            "/anything/responseBodies/zeroValueComplexTypePtrs"
        )();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result =
                operations.ResponseBodyZeroValueComplexTypePtrsPostResponse$.inboundSchema.parse({
                    ...responseFields$,
                    object: responseBody,
                });
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }
}
