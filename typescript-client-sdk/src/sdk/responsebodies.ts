/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { responseBodiesFlattenedEnvelopePaginationResponse } from "../funcs/responseBodiesFlattenedEnvelopePaginationResponse.js";
import { responseBodiesFlattenedEnvelopeResponse } from "../funcs/responseBodiesFlattenedEnvelopeResponse.js";
import { responseBodiesFlattenedEnvelopeUnionResponse } from "../funcs/responseBodiesFlattenedEnvelopeUnionResponse.js";
import { responseBodiesFlattenedUnionResponse } from "../funcs/responseBodiesFlattenedUnionResponse.js";
import { responseBodiesOverriddenFieldNamesPost } from "../funcs/responseBodiesOverriddenFieldNamesPost.js";
import { responseBodiesResponseBodyAdditionalPropertiesAnyPost } from "../funcs/responseBodiesResponseBodyAdditionalPropertiesAnyPost.js";
import { responseBodiesResponseBodyAdditionalPropertiesComplexNumbersPost } from "../funcs/responseBodiesResponseBodyAdditionalPropertiesComplexNumbersPost.js";
import { responseBodiesResponseBodyAdditionalPropertiesDatePost } from "../funcs/responseBodiesResponseBodyAdditionalPropertiesDatePost.js";
import { responseBodiesResponseBodyAdditionalPropertiesObjectPost } from "../funcs/responseBodiesResponseBodyAdditionalPropertiesObjectPost.js";
import { responseBodiesResponseBodyAdditionalPropertiesPost } from "../funcs/responseBodiesResponseBodyAdditionalPropertiesPost.js";
import { responseBodiesResponseBodyBytesGet } from "../funcs/responseBodiesResponseBodyBytesGet.js";
import { responseBodiesResponseBodyDecimalStr } from "../funcs/responseBodiesResponseBodyDecimalStr.js";
import { responseBodiesResponseBodyEmptyWithHeaders } from "../funcs/responseBodiesResponseBodyEmptyWithHeaders.js";
import { responseBodiesResponseBodyMissing2xxOr3xxGet } from "../funcs/responseBodiesResponseBodyMissing2xxOr3xxGet.js";
import { responseBodiesResponseBodyMultilineStringPost } from "../funcs/responseBodiesResponseBodyMultilineStringPost.js";
import {
  responseBodiesResponseBodyOptionalGet,
  ResponseBodyOptionalGetAcceptEnum,
} from "../funcs/responseBodiesResponseBodyOptionalGet.js";
import { responseBodiesResponseBodyReadOnly } from "../funcs/responseBodiesResponseBodyReadOnly.js";
import { responseBodiesResponseBodyStringGet } from "../funcs/responseBodiesResponseBodyStringGet.js";
import { responseBodiesResponseBodyXmlGet } from "../funcs/responseBodiesResponseBodyXmlGet.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { PageIterator, unwrapResultIterator } from "../sdk/types/operations.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { Decimal as Decimal$ } from "./types/decimal.js";
import { unwrapAsync } from "./types/fp.js";

export { ResponseBodyOptionalGetAcceptEnum } from "../funcs/responseBodiesResponseBodyOptionalGet.js";

export class ResponseBodies extends ClientSDK {
  async flattenedEnvelopePaginationResponse(
    cursor?: string | undefined,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.FlattenedEnvelopePaginationResponseResponse>
  > {
    return unwrapResultIterator(
      responseBodiesFlattenedEnvelopePaginationResponse(
        this,
        cursor,
        options,
      ),
    );
  }

  async flattenedEnvelopeResponse(
    options?: RequestOptions,
  ): Promise<operations.FlattenedEnvelopeResponseResponse> {
    return unwrapAsync(responseBodiesFlattenedEnvelopeResponse(
      this,
      options,
    ));
  }

  async flattenedEnvelopeUnionResponse(
    options?: RequestOptions,
  ): Promise<operations.FlattenedEnvelopeUnionResponseResponse> {
    return unwrapAsync(responseBodiesFlattenedEnvelopeUnionResponse(
      this,
      options,
    ));
  }

  async flattenedUnionResponse(
    options?: RequestOptions,
  ): Promise<operations.FlattenedUnionResponseResponse> {
    return unwrapAsync(responseBodiesFlattenedUnionResponse(
      this,
      options,
    ));
  }

  async overriddenFieldNamesPost(
    request: operations.OverriddenFieldNamesPostRequestBody,
    options?: RequestOptions,
  ): Promise<operations.OverriddenFieldNamesPostResponseBody> {
    return unwrapAsync(responseBodiesOverriddenFieldNamesPost(
      this,
      request,
      options,
    ));
  }

  async responseBodyAdditionalPropertiesAnyPost(
    request: shared.ObjWithAnyAdditionalProperties,
    options?: RequestOptions,
  ): Promise<operations.ResponseBodyAdditionalPropertiesAnyPostResponseBody> {
    return unwrapAsync(responseBodiesResponseBodyAdditionalPropertiesAnyPost(
      this,
      request,
      options,
    ));
  }

  async responseBodyAdditionalPropertiesComplexNumbersPost(
    request: shared.ObjWithComplexNumbersAdditionalProperties,
    options?: RequestOptions,
  ): Promise<
    operations.ResponseBodyAdditionalPropertiesComplexNumbersPostResponseBody
  > {
    return unwrapAsync(
      responseBodiesResponseBodyAdditionalPropertiesComplexNumbersPost(
        this,
        request,
        options,
      ),
    );
  }

  async responseBodyAdditionalPropertiesDatePost(
    request: shared.ObjWithDateAdditionalProperties,
    options?: RequestOptions,
  ): Promise<operations.ResponseBodyAdditionalPropertiesDatePostResponseBody> {
    return unwrapAsync(responseBodiesResponseBodyAdditionalPropertiesDatePost(
      this,
      request,
      options,
    ));
  }

  async responseBodyAdditionalPropertiesObjectPost(
    request: shared.ObjWithObjAdditionalProperties,
    options?: RequestOptions,
  ): Promise<
    operations.ResponseBodyAdditionalPropertiesObjectPostResponseBody
  > {
    return unwrapAsync(responseBodiesResponseBodyAdditionalPropertiesObjectPost(
      this,
      request,
      options,
    ));
  }

  async responseBodyAdditionalPropertiesPost(
    request: shared.ObjWithStringAdditionalProperties,
    options?: RequestOptions,
  ): Promise<operations.ResponseBodyAdditionalPropertiesPostResponseBody> {
    return unwrapAsync(responseBodiesResponseBodyAdditionalPropertiesPost(
      this,
      request,
      options,
    ));
  }

  async responseBodyBytesGet(
    options?: RequestOptions,
  ): Promise<ReadableStream<Uint8Array>> {
    return unwrapAsync(responseBodiesResponseBodyBytesGet(
      this,
      options,
    ));
  }

  async responseBodyDecimalStr(
    request: Decimal$ | number,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<Decimal$> {
    return unwrapAsync(responseBodiesResponseBodyDecimalStr(
      this,
      request,
      options,
    ));
  }

  async responseBodyEmptyWithHeaders(
    xNumberHeader: number,
    xStringHeader: string,
    options?: RequestOptions,
  ): Promise<operations.ResponseBodyEmptyWithHeadersResponse | undefined> {
    return unwrapAsync(responseBodiesResponseBodyEmptyWithHeaders(
      this,
      xNumberHeader,
      xStringHeader,
      options,
    ));
  }

  async responseBodyMissing2xxOr3xxGet(
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(responseBodiesResponseBodyMissing2xxOr3xxGet(
      this,
      options,
    ));
  }

  async responseBodyMultilineStringPost(
    request: operations.ResponseBodyMultilineStringPostRequestBody,
    options?: RequestOptions,
  ): Promise<operations.ResponseBodyMultilineStringPostResponseBody> {
    return unwrapAsync(responseBodiesResponseBodyMultilineStringPost(
      this,
      request,
      options,
    ));
  }

  async responseBodyOptionalGet(
    options?: RequestOptions & {
      acceptHeaderOverride?: ResponseBodyOptionalGetAcceptEnum;
      serverURL?: string;
    },
  ): Promise<operations.ResponseBodyOptionalGetResponse> {
    return unwrapAsync(responseBodiesResponseBodyOptionalGet(
      this,
      options,
    ));
  }

  async responseBodyReadOnly(
    options?: RequestOptions & { serverURL?: string },
  ): Promise<shared.ReadOnlyObject> {
    return unwrapAsync(responseBodiesResponseBodyReadOnly(
      this,
      options,
    ));
  }

  async responseBodyStringGet(
    options?: RequestOptions,
  ): Promise<string> {
    return unwrapAsync(responseBodiesResponseBodyStringGet(
      this,
      options,
    ));
  }

  async responseBodyXmlGet(
    options?: RequestOptions,
  ): Promise<string> {
    return unwrapAsync(responseBodiesResponseBodyXmlGet(
      this,
      options,
    ));
  }
}
