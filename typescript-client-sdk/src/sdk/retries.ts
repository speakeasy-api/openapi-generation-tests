/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { retriesRetriesAfter } from "../funcs/retriesRetriesAfter.js";
import { retriesRetriesConnectErrorGet } from "../funcs/retriesRetriesConnectErrorGet.js";
import { retriesRetriesFlatEmptyResponsePost } from "../funcs/retriesRetriesFlatEmptyResponsePost.js";
import { retriesRetriesGet } from "../funcs/retriesRetriesGet.js";
import { retriesRetriesPost } from "../funcs/retriesRetriesPost.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Retries extends ClientSDK {
  async retriesAfter(
    requestId: string,
    numRetries?: number | undefined,
    retryAfterVal?: number | undefined,
    options?: RequestOptions,
  ): Promise<operations.RetriesAfterRetries> {
    return unwrapAsync(retriesRetriesAfter(
      this,
      requestId,
      numRetries,
      retryAfterVal,
      options,
    ));
  }

  /**
   * A request to a non-valid port to test connection errors
   */
  async retriesConnectErrorGet(
    options?: RequestOptions,
  ): Promise<operations.RetriesConnectErrorGetRetries> {
    return unwrapAsync(retriesRetriesConnectErrorGet(
      this,
      options,
    ));
  }

  async retriesFlatEmptyResponsePost(
    requestId: string,
    numRetries?: number | undefined,
    requestBody?:
      | operations.RetriesFlatEmptyResponsePostRequestBody
      | undefined,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(retriesRetriesFlatEmptyResponsePost(
      this,
      requestId,
      numRetries,
      requestBody,
      options,
    ));
  }

  async retriesGet(
    requestId: string,
    numRetries?: number | undefined,
    options?: RequestOptions,
  ): Promise<operations.RetriesGetRetries> {
    return unwrapAsync(retriesRetriesGet(
      this,
      requestId,
      numRetries,
      options,
    ));
  }

  async retriesPost(
    requestId: string,
    numRetries?: number | undefined,
    requestBody?: operations.RetriesPostRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.RetriesPostRetries> {
    return unwrapAsync(retriesRetriesPost(
      this,
      requestId,
      numRetries,
      requestBody,
      options,
    ));
  }
}
