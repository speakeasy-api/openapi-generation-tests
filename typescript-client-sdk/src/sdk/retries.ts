/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
} from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { SDKError } from "./models/errors/sdkerror.js";
import { SDKValidationError } from "./models/errors/sdkvalidationerror.js";
import * as operations from "./models/operations/index.js";
import { RetriesAfterServerList } from "./models/operations/retriesafter.js";
import { RetriesConnectErrorGetServerList } from "./models/operations/retriesconnecterrorget.js";
import { RetriesFlatEmptyResponsePostServerList } from "./models/operations/retriesflatemptyresponsepost.js";
import { RetriesGetServerList } from "./models/operations/retriesget.js";
import { RetriesPostServerList } from "./models/operations/retriespost.js";
import { unwrap as unwrap$ } from "./types/fp.js";
import * as z from "zod";

export class Retries extends ClientSDK {
    async retriesAfter(
        requestId: string,
        numRetries?: number | undefined,
        retryAfterVal?: number | undefined,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<operations.RetriesAfterRetries> {
        const input$: operations.RetriesAfterRequest = {
            numRetries: numRetries,
            requestId: requestId,
            retryAfterVal: retryAfterVal,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.RetriesAfterRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const baseURL$ =
            options?.serverURL ||
            pathToFunc(RetriesAfterServerList[0], { charEncoding: "percent" })();

        const path$ = pathToFunc("/retries/after")();

        const query$ = encodeFormQuery$({
            "num-retries": payload$["num-retries"],
            "request-id": payload$["request-id"],
            "retry-after-val": payload$["retry-after-val"],
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "retriesAfter",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries ||
                this.options$.retryConfig || {
                    strategy: "backoff",
                    backoff: {
                        initialInterval: 10,
                        maxInterval: 200,
                        exponent: 1.5,
                        maxElapsedTime: 1000,
                    },
                    retryConnectionErrors: false,
                },
            retryCodes: options?.retryCodes || ["503"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.RetriesAfterRetries,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.RetriesAfterRetries$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    /**
     * A request to a non-valid port to test connection errors
     */
    async retriesConnectErrorGet(
        options?: RequestOptions & { serverURL?: string }
    ): Promise<operations.RetriesConnectErrorGetRetries> {
        const baseURL$ =
            options?.serverURL ||
            pathToFunc(RetriesConnectErrorGetServerList[0], { charEncoding: "percent" })();

        const path$ = pathToFunc("/retriesConnectError")();

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "retriesConnectErrorGet",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries ||
                this.options$.retryConfig || {
                    strategy: "backoff",
                    backoff: {
                        initialInterval: 500,
                        maxInterval: 60000,
                        exponent: 1.5,
                        maxElapsedTime: 3600000,
                    },
                    retryConnectionErrors: false,
                },
            retryCodes: options?.retryCodes || ["5XX"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.RetriesConnectErrorGetRetries,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.RetriesConnectErrorGetRetries$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async retriesFlatEmptyResponsePost(
        requestId: string,
        requestBody?: operations.RetriesFlatEmptyResponsePostRequestBody | undefined,
        numRetries?: number | undefined,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<void> {
        const input$: operations.RetriesFlatEmptyResponsePostRequest = {
            requestBody: requestBody,
            numRetries: numRetries,
            requestId: requestId,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.RetriesFlatEmptyResponsePostRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const baseURL$ =
            options?.serverURL ||
            pathToFunc(RetriesFlatEmptyResponsePostServerList[0], { charEncoding: "percent" })();

        const path$ = pathToFunc("/retriesFlatEmptyResponse")();

        const query$ = encodeFormQuery$({
            "num-retries": payload$["num-retries"],
            "request-id": payload$["request-id"],
        });

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "*/*",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "retriesFlatEmptyResponsePost",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries ||
                this.options$.retryConfig || {
                    strategy: "backoff",
                    backoff: {
                        initialInterval: 10,
                        maxInterval: 200,
                        exponent: 1.5,
                        maxElapsedTime: 1000,
                    },
                    retryConnectionErrors: false,
                },
            retryCodes: options?.retryCodes || ["503"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<void, SDKError | SDKValidationError>(
            m$.nil(200, z.void()),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async retriesGet(
        requestId: string,
        numRetries?: number | undefined,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<operations.RetriesGetRetries> {
        const input$: operations.RetriesGetRequest = {
            numRetries: numRetries,
            requestId: requestId,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.RetriesGetRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const baseURL$ =
            options?.serverURL ||
            pathToFunc(RetriesGetServerList[0], { charEncoding: "percent" })();

        const path$ = pathToFunc("/retries")();

        const query$ = encodeFormQuery$({
            "num-retries": payload$["num-retries"],
            "request-id": payload$["request-id"],
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "retriesGet",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries ||
                this.options$.retryConfig || {
                    strategy: "backoff",
                    backoff: {
                        initialInterval: 10,
                        maxInterval: 200,
                        exponent: 1.5,
                        maxElapsedTime: 1000,
                    },
                    retryConnectionErrors: false,
                },
            retryCodes: options?.retryCodes || ["503"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.RetriesGetRetries,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.RetriesGetRetries$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async retriesPost(
        requestId: string,
        requestBody?: operations.RetriesPostRequestBody | undefined,
        numRetries?: number | undefined,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<operations.RetriesPostRetries> {
        const input$: operations.RetriesPostRequest = {
            requestBody: requestBody,
            numRetries: numRetries,
            requestId: requestId,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.RetriesPostRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const baseURL$ =
            options?.serverURL ||
            pathToFunc(RetriesPostServerList[0], { charEncoding: "percent" })();

        const path$ = pathToFunc("/retries")();

        const query$ = encodeFormQuery$({
            "num-retries": payload$["num-retries"],
            "request-id": payload$["request-id"],
        });

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "retriesPost",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries ||
                this.options$.retryConfig || {
                    strategy: "backoff",
                    backoff: {
                        initialInterval: 10,
                        maxInterval: 200,
                        exponent: 1.5,
                        maxElapsedTime: 1000,
                    },
                    retryConnectionErrors: false,
                },
            retryCodes: options?.retryCodes || ["503"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<
            operations.RetriesPostRetries,
            SDKError | SDKValidationError
        >(
            m$.json(200, operations.RetriesPostRetries$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }
}
