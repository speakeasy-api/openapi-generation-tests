/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import { encodeFormQuery as encodeFormQuery$, encodeJSON as encodeJSON$ } from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as retries$ from "../lib/retries";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as operations from "./models/operations";

export class Retries extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    async retriesAfter(
        requestId: string,
        numRetries?: number | undefined,
        retryAfterVal?: number | undefined,
        options?: RequestOptions & { retries?: retries$.RetryConfig; serverURL?: string }
    ): Promise<operations.RetriesAfterResponse> {
        const input$: operations.RetriesAfterRequest = {
            numRetries: numRetries,
            requestId: requestId,
            retryAfterVal: retryAfterVal,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.RetriesAfterRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;
        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.RetriesAfterServerList[0], {
                charEncoding: "percent",
            })();

        const path$ = this.templateURLComponent("/retries/after")();

        const query$ = encodeFormQuery$({
            "num-retries": payload$["num-retries"],
            "request-id": payload$["request-id"],
            "retry-after-val": payload$["retry-after-val"],
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "retriesAfter",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const retryConfig = options?.retries ||
            this.options$.retryConfig || {
                strategy: "backoff",
                backoff: {
                    initialInterval: 10,
                    maxInterval: 200,
                    exponent: 1.5,
                    maxElapsedTime: 1000,
                },
                retryConnectionErrors: false,
            };

        const response = await retries$.retry(
            () => {
                const cloned = request$.clone();
                return this.do$(cloned, doOptions);
            },
            { config: retryConfig, statusCodes: ["503"] }
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.RetriesAfterResponse>()
            .json(200, operations.RetriesAfterResponse$, { key: "retries" })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * A request to a non-valid port to test connection errors
     */
    async retriesConnectErrorGet(
        options?: RequestOptions & { retries?: retries$.RetryConfig; serverURL?: string }
    ): Promise<operations.RetriesConnectErrorGetResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.RetriesConnectErrorGetServerList[0], {
                charEncoding: "percent",
            })();

        const path$ = this.templateURLComponent("/retriesConnectError")();

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "retriesConnectErrorGet",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
            },
            options
        );

        const retryConfig = options?.retries ||
            this.options$.retryConfig || {
                strategy: "backoff",
                backoff: {
                    initialInterval: 500,
                    maxInterval: 60000,
                    exponent: 1.5,
                    maxElapsedTime: 3600000,
                },
                retryConnectionErrors: false,
            };

        const response = await retries$.retry(
            () => {
                const cloned = request$.clone();
                return this.do$(cloned, doOptions);
            },
            { config: retryConfig, statusCodes: ["5XX"] }
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.RetriesConnectErrorGetResponse>()
            .json(200, operations.RetriesConnectErrorGetResponse$, { key: "retries" })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    async retriesFlatEmptyResponsePost(
        requestId: string,
        requestBody?: operations.RetriesFlatEmptyResponsePostRequestBody | undefined,
        numRetries?: number | undefined,
        options?: RequestOptions & { retries?: retries$.RetryConfig; serverURL?: string }
    ): Promise<operations.RetriesFlatEmptyResponsePostResponse> {
        const input$: operations.RetriesFlatEmptyResponsePostRequest = {
            requestBody: requestBody,
            numRetries: numRetries,
            requestId: requestId,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.RetriesFlatEmptyResponsePostRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });
        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.RetriesFlatEmptyResponsePostServerList[0], {
                charEncoding: "percent",
            })();

        const path$ = this.templateURLComponent("/retriesFlatEmptyResponse")();

        const query$ = encodeFormQuery$({
            "num-retries": payload$["num-retries"],
            "request-id": payload$["request-id"],
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "retriesFlatEmptyResponsePost",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const retryConfig = options?.retries ||
            this.options$.retryConfig || {
                strategy: "backoff",
                backoff: {
                    initialInterval: 10,
                    maxInterval: 200,
                    exponent: 1.5,
                    maxElapsedTime: 1000,
                },
                retryConnectionErrors: false,
            };

        const response = await retries$.retry(
            () => {
                const cloned = request$.clone();
                return this.do$(cloned, doOptions);
            },
            { config: retryConfig, statusCodes: ["503"] }
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.RetriesFlatEmptyResponsePostResponse>()
            .void(200, operations.RetriesFlatEmptyResponsePostResponse$)
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    async retriesGet(
        requestId: string,
        numRetries?: number | undefined,
        options?: RequestOptions & { retries?: retries$.RetryConfig; serverURL?: string }
    ): Promise<operations.RetriesGetResponse> {
        const input$: operations.RetriesGetRequest = {
            numRetries: numRetries,
            requestId: requestId,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.RetriesGetRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;
        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.RetriesGetServerList[0], {
                charEncoding: "percent",
            })();

        const path$ = this.templateURLComponent("/retries")();

        const query$ = encodeFormQuery$({
            "num-retries": payload$["num-retries"],
            "request-id": payload$["request-id"],
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "retriesGet",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const retryConfig = options?.retries ||
            this.options$.retryConfig || {
                strategy: "backoff",
                backoff: {
                    initialInterval: 10,
                    maxInterval: 200,
                    exponent: 1.5,
                    maxElapsedTime: 1000,
                },
                retryConnectionErrors: false,
            };

        const response = await retries$.retry(
            () => {
                const cloned = request$.clone();
                return this.do$(cloned, doOptions);
            },
            { config: retryConfig, statusCodes: ["503"] }
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.RetriesGetResponse>()
            .json(200, operations.RetriesGetResponse$, { key: "retries" })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    async retriesPost(
        requestId: string,
        requestBody?: operations.RetriesPostRequestBody | undefined,
        numRetries?: number | undefined,
        options?: RequestOptions & { retries?: retries$.RetryConfig; serverURL?: string }
    ): Promise<operations.RetriesPostResponse> {
        const input$: operations.RetriesPostRequest = {
            requestBody: requestBody,
            numRetries: numRetries,
            requestId: requestId,
        };
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.RetriesPostRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });
        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(operations.RetriesPostServerList[0], {
                charEncoding: "percent",
            })();

        const path$ = this.templateURLComponent("/retries")();

        const query$ = encodeFormQuery$({
            "num-retries": payload$["num-retries"],
            "request-id": payload$["request-id"],
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "retriesPost",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const retryConfig = options?.retries ||
            this.options$.retryConfig || {
                strategy: "backoff",
                backoff: {
                    initialInterval: 10,
                    maxInterval: 200,
                    exponent: 1.5,
                    maxElapsedTime: 1000,
                },
                retryConnectionErrors: false,
            };

        const response = await retries$.retry(
            () => {
                const cloned = request$.clone();
                return this.do$(cloned, doOptions);
            },
            { config: retryConfig, statusCodes: ["503"] }
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.RetriesPostResponse>()
            .json(200, operations.RetriesPostResponse$, { key: "retries" })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }
}
