/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ambiguousQueryParam } from "../funcs/ambiguousQueryParam.js";
import { authenticatedRequest } from "../funcs/authenticatedRequest.js";
import { conflictingEnum } from "../funcs/conflictingEnum.js";
import { ignoredGenerationPut } from "../funcs/ignoredGenerationPut.js";
import { postAdditionalPropertiesWithNullableFields } from "../funcs/postAdditionalPropertiesWithNullableFields.js";
import { responseBodyJsonGet } from "../funcs/responseBodyJsonGet.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { Auth } from "./auth.js";
import { AuthNew } from "./authnew.js";
import { CustomClient } from "./customclient.js";
import { Documentation } from "./documentation.js";
import { Errors } from "./errors.js";
import { Eventstreams } from "./eventstreams.js";
import { First } from "./first.js";
import { Flattening } from "./flattening.js";
import { Generation } from "./generation.js";
import { Globals } from "./globals.js";
import { Hooks } from "./hooks.js";
import { Methods } from "./methods.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { Nest } from "./nest.js";
import { Nested } from "./nested.js";
import { OpenEnums } from "./openenums.js";
import { Pagination } from "./pagination.js";
import { ParametersT } from "./parameters.js";
import { RequestBodies } from "./requestbodies.js";
import { Resource } from "./resource.js";
import { ResponseBodies } from "./responsebodies.js";
import { Retries } from "./retries.js";
import { Second } from "./second.js";
import { Servers } from "./servers.js";
import { Telemetry } from "./telemetry.js";
import { unwrapAsync } from "./types/fp.js";
import { Unions } from "./unions.js";

export class SDK extends ClientSDK {
    private _generation?: Generation;
    get generation(): Generation {
        return (this._generation ??= new Generation(this.options$));
    }

    private _unions?: Unions;
    get unions(): Unions {
        return (this._unions ??= new Unions(this.options$));
    }

    private _errors?: Errors;
    get errors(): Errors {
        return (this._errors ??= new Errors(this.options$));
    }

    private _customClient?: CustomClient;
    get customClient(): CustomClient {
        return (this._customClient ??= new CustomClient(this.options$));
    }

    private _responseBodies?: ResponseBodies;
    get responseBodies(): ResponseBodies {
        return (this._responseBodies ??= new ResponseBodies(this.options$));
    }

    private _flattening?: Flattening;
    get flattening(): Flattening {
        return (this._flattening ??= new Flattening(this.options$));
    }

    private _globals?: Globals;
    get globals(): Globals {
        return (this._globals ??= new Globals(this.options$));
    }

    private _parameters?: ParametersT;
    get parameters(): ParametersT {
        return (this._parameters ??= new ParametersT(this.options$));
    }

    private _hooks?: Hooks;
    get hooks(): Hooks {
        return (this._hooks ??= new Hooks(this.options$));
    }

    private _nest?: Nest;
    get nest(): Nest {
        return (this._nest ??= new Nest(this.options$));
    }

    private _nested?: Nested;
    get nested(): Nested {
        return (this._nested ??= new Nested(this.options$));
    }

    private _auth?: Auth;
    get auth(): Auth {
        return (this._auth ??= new Auth(this.options$));
    }

    private _openEnums?: OpenEnums;
    get openEnums(): OpenEnums {
        return (this._openEnums ??= new OpenEnums(this.options$));
    }

    private _requestBodies?: RequestBodies;
    get requestBodies(): RequestBodies {
        return (this._requestBodies ??= new RequestBodies(this.options$));
    }

    private _servers?: Servers;
    get servers(): Servers {
        return (this._servers ??= new Servers(this.options$));
    }

    private _telemetry?: Telemetry;
    get telemetry(): Telemetry {
        return (this._telemetry ??= new Telemetry(this.options$));
    }

    private _authNew?: AuthNew;
    get authNew(): AuthNew {
        return (this._authNew ??= new AuthNew(this.options$));
    }

    private _resource?: Resource;
    get resource(): Resource {
        return (this._resource ??= new Resource(this.options$));
    }

    private _documentation?: Documentation;
    get documentation(): Documentation {
        return (this._documentation ??= new Documentation(this.options$));
    }

    private _eventstreams?: Eventstreams;
    get eventstreams(): Eventstreams {
        return (this._eventstreams ??= new Eventstreams(this.options$));
    }

    private _first?: First;
    get first(): First {
        return (this._first ??= new First(this.options$));
    }

    private _second?: Second;
    get second(): Second {
        return (this._second ??= new Second(this.options$));
    }

    private _methods?: Methods;
    get methods(): Methods {
        return (this._methods ??= new Methods(this.options$));
    }

    private _pagination?: Pagination;
    get pagination(): Pagination {
        return (this._pagination ??= new Pagination(this.options$));
    }

    private _retries?: Retries;
    get retries(): Retries {
        return (this._retries ??= new Retries(this.options$));
    }

    /**
     * Tests conflict with C# System namespace
     */
    async ambiguousQueryParam(
        console: operations.Console,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(ambiguousQueryParam(this, console, options));
    }

    async authenticatedRequest(
        security: operations.AuthenticatedRequestSecurity,
        request?: operations.AuthenticatedRequestRequestBody | undefined,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(authenticatedRequest(this, security, request, options));
    }

    /**
     * Test potential namespace conflicts with java.lang.Object
     */
    async conflictingEnum(
        request?: shared.ConflictingEnum | undefined,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(conflictingEnum(this, request, options));
    }

    async ignoredGenerationPut(
        request: string,
        options?: RequestOptions
    ): Promise<operations.IgnoredGenerationPutResponseBody> {
        return unwrapAsync(ignoredGenerationPut(this, request, options));
    }

    async postAdditionalPropertiesWithNullableFields(
        request: operations.PostAdditionalPropertiesWithNullableFieldsRequestBody,
        options?: RequestOptions
    ): Promise<operations.PostAdditionalPropertiesWithNullableFieldsResponseBody> {
        return unwrapAsync(postAdditionalPropertiesWithNullableFields(this, request, options));
    }

    async responseBodyJsonGet(options?: RequestOptions): Promise<shared.HttpBinSimpleJsonObject> {
        return unwrapAsync(responseBodyJsonGet(this, options));
    }
}
