/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import { SecurityInput } from "../lib/security";
import { Auth } from "./auth";
import { AuthNew } from "./authnew";
import { CustomClient } from "./customclient";
import { Documentation } from "./documentation";
import { Errors } from "./errors";
import { Eventstreams } from "./eventstreams";
import { First } from "./first";
import { Flattening } from "./flattening";
import { Generation } from "./generation";
import { Globals } from "./globals";
import { Hooks } from "./hooks";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { Nest } from "./nest";
import { Nested } from "./nested";
import { OpenEnums } from "./openenums";
import { Pagination } from "./pagination";
import { ParametersT } from "./parameters";
import { RequestBodies } from "./requestbodies";
import { Resource } from "./resource";
import { ResponseBodies } from "./responsebodies";
import { Retries } from "./retries";
import { Second } from "./second";
import { Servers } from "./servers";
import { Telemetry } from "./telemetry";
import { Unions } from "./unions";
import * as z from "zod";

export class SDK extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _generation?: Generation;
    get generation(): Generation {
        return (this._generation ??= new Generation(this.options$));
    }

    private _unions?: Unions;
    get unions(): Unions {
        return (this._unions ??= new Unions(this.options$));
    }

    private _errors?: Errors;
    get errors(): Errors {
        return (this._errors ??= new Errors(this.options$));
    }

    private _customClient?: CustomClient;
    get customClient(): CustomClient {
        return (this._customClient ??= new CustomClient(this.options$));
    }

    private _responseBodies?: ResponseBodies;
    get responseBodies(): ResponseBodies {
        return (this._responseBodies ??= new ResponseBodies(this.options$));
    }

    private _flattening?: Flattening;
    get flattening(): Flattening {
        return (this._flattening ??= new Flattening(this.options$));
    }

    private _globals?: Globals;
    get globals(): Globals {
        return (this._globals ??= new Globals(this.options$));
    }

    private _parameters?: ParametersT;
    get parameters(): ParametersT {
        return (this._parameters ??= new ParametersT(this.options$));
    }

    private _hooks?: Hooks;
    get hooks(): Hooks {
        return (this._hooks ??= new Hooks(this.options$));
    }

    private _nest?: Nest;
    get nest(): Nest {
        return (this._nest ??= new Nest(this.options$));
    }

    private _nested?: Nested;
    get nested(): Nested {
        return (this._nested ??= new Nested(this.options$));
    }

    private _auth?: Auth;
    get auth(): Auth {
        return (this._auth ??= new Auth(this.options$));
    }

    private _openEnums?: OpenEnums;
    get openEnums(): OpenEnums {
        return (this._openEnums ??= new OpenEnums(this.options$));
    }

    private _requestBodies?: RequestBodies;
    get requestBodies(): RequestBodies {
        return (this._requestBodies ??= new RequestBodies(this.options$));
    }

    private _servers?: Servers;
    get servers(): Servers {
        return (this._servers ??= new Servers(this.options$));
    }

    private _telemetry?: Telemetry;
    get telemetry(): Telemetry {
        return (this._telemetry ??= new Telemetry(this.options$));
    }

    private _authNew?: AuthNew;
    get authNew(): AuthNew {
        return (this._authNew ??= new AuthNew(this.options$));
    }

    private _resource?: Resource;
    get resource(): Resource {
        return (this._resource ??= new Resource(this.options$));
    }

    private _documentation?: Documentation;
    get documentation(): Documentation {
        return (this._documentation ??= new Documentation(this.options$));
    }

    private _eventstreams?: Eventstreams;
    get eventstreams(): Eventstreams {
        return (this._eventstreams ??= new Eventstreams(this.options$));
    }

    private _first?: First;
    get first(): First {
        return (this._first ??= new First(this.options$));
    }

    private _second?: Second;
    get second(): Second {
        return (this._second ??= new Second(this.options$));
    }

    private _pagination?: Pagination;
    get pagination(): Pagination {
        return (this._pagination ??= new Pagination(this.options$));
    }

    private _retries?: Retries;
    get retries(): Retries {
        return (this._retries ??= new Retries(this.options$));
    }

    async authenticatedRequest(
        security: operations.AuthenticatedRequestSecurity,
        request?: operations.AuthenticatedRequestRequestBody | undefined,
        options?: RequestOptions
    ): Promise<operations.AuthenticatedRequestResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.AuthenticatedRequestRequestBody$.outboundSchema.optional().parse(value$),
            "Input validation failed"
        );
        const body$ =
            payload$ === undefined ? null : enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/clientcredentials/authenticatedrequest")();

        const query$ = "";

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "Authorization",
                    type: "oauth2",
                    value: security?.clientCredentials,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "authenticatedRequest",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.AuthenticatedRequestResponse>()
            .void(200, operations.AuthenticatedRequestResponse$)
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Test potential namespace conflicts with java.lang.Object
     */
    async conflictingEnum(
        request?: shared.ConflictingEnum | undefined,
        options?: RequestOptions
    ): Promise<operations.ConflictingEnumResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = schemas$.parse(
            input$,
            (value$) => shared.ConflictingEnum$.outboundSchema.optional().parse(value$),
            "Input validation failed"
        );
        const body$ =
            payload$ === undefined ? null : enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/anything/conflictingEnum/")();

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "conflictingEnum",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.ConflictingEnumResponse>()
            .void(200, operations.ConflictingEnumResponse$)
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    async ignoredGenerationPut(
        request: string,
        options?: RequestOptions
    ): Promise<operations.IgnoredGenerationPutResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => z.string().parse(value$),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/anything/ignoredGeneration")();

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "ignoredGenerationPut",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PUT",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.IgnoredGenerationPutResponse>()
            .json(200, operations.IgnoredGenerationPutResponse$, { key: "object" })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    async responseBodyJsonGet(
        options?: RequestOptions
    ): Promise<operations.ResponseBodyJsonGetResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const path$ = this.templateURLComponent("/json")();

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "responseBodyJsonGet",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.ResponseBodyJsonGetResponse>()
            .json(200, operations.ResponseBodyJsonGetResponse$, { key: "httpBinSimpleJsonObject" })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }
}
