/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../sdk/models/errors";
import * as operations from "../sdk/models/operations";
import * as shared from "../sdk/models/shared";
import { Auth } from "./auth";
import { AuthNew } from "./authnew";
import { Documentation } from "./documentation";
import { Errors } from "./errors";
import { Eventstreams } from "./eventstreams";
import { First } from "./first";
import { Flattening } from "./flattening";
import { Generation } from "./generation";
import { Globals } from "./globals";
import { Hooks } from "./hooks";
import { Nest } from "./nest";
import { Nested } from "./nested";
import { Pagination } from "./pagination";
import { ParametersT } from "./parameters";
import { RequestBodies } from "./requestbodies";
import { Resource } from "./resource";
import { ResponseBodies } from "./responsebodies";
import { Retries } from "./retries";
import { Second } from "./second";
import { Servers } from "./servers";
import { Telemetry } from "./telemetry";
import { Unions } from "./unions";
import { z } from "zod";

export class SDK extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _generation?: Generation;
    get generation() {
        return (this._generation ??= new Generation(this.options$));
    }

    private _errors?: Errors;
    get errors() {
        return (this._errors ??= new Errors(this.options$));
    }

    private _unions?: Unions;
    get unions() {
        return (this._unions ??= new Unions(this.options$));
    }

    private _flattening?: Flattening;
    get flattening() {
        return (this._flattening ??= new Flattening(this.options$));
    }

    private _globals?: Globals;
    get globals() {
        return (this._globals ??= new Globals(this.options$));
    }

    private _parameters?: ParametersT;
    get parameters() {
        return (this._parameters ??= new ParametersT(this.options$));
    }

    private _hooks?: Hooks;
    get hooks() {
        return (this._hooks ??= new Hooks(this.options$));
    }

    private _nest?: Nest;
    get nest() {
        return (this._nest ??= new Nest(this.options$));
    }

    private _nested?: Nested;
    get nested() {
        return (this._nested ??= new Nested(this.options$));
    }

    private _auth?: Auth;
    get auth() {
        return (this._auth ??= new Auth(this.options$));
    }

    private _requestBodies?: RequestBodies;
    get requestBodies() {
        return (this._requestBodies ??= new RequestBodies(this.options$));
    }

    private _responseBodies?: ResponseBodies;
    get responseBodies() {
        return (this._responseBodies ??= new ResponseBodies(this.options$));
    }

    private _servers?: Servers;
    get servers() {
        return (this._servers ??= new Servers(this.options$));
    }

    private _telemetry?: Telemetry;
    get telemetry() {
        return (this._telemetry ??= new Telemetry(this.options$));
    }

    private _authNew?: AuthNew;
    get authNew() {
        return (this._authNew ??= new AuthNew(this.options$));
    }

    private _resource?: Resource;
    get resource() {
        return (this._resource ??= new Resource(this.options$));
    }

    private _documentation?: Documentation;
    get documentation() {
        return (this._documentation ??= new Documentation(this.options$));
    }

    private _eventstreams?: Eventstreams;
    get eventstreams() {
        return (this._eventstreams ??= new Eventstreams(this.options$));
    }

    private _first?: First;
    get first() {
        return (this._first ??= new First(this.options$));
    }

    private _second?: Second;
    get second() {
        return (this._second ??= new Second(this.options$));
    }

    private _pagination?: Pagination;
    get pagination() {
        return (this._pagination ??= new Pagination(this.options$));
    }

    private _retries?: Retries;
    get retries() {
        return (this._retries ??= new Retries(this.options$));
    }

    /**
     * Test potential namespace conflicts with java.lang.Object
     */
    async conflictingEnum(
        input: shared.ConflictingEnum | undefined,
        options?: RequestOptions
    ): Promise<operations.ConflictingEnumResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = schemas$.parse(
            input,
            (value$) => shared.ConflictingEnum$.outboundSchema.optional().parse(value$),
            "Input validation failed"
        );
        const body$ =
            payload$ === undefined ? null : enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/anything/conflictingEnum/")();

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const context = { operationID: "conflictingEnum" };
        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return schemas$.parse(
            undefined,
            () => operations.ConflictingEnumResponse$.inboundSchema.parse(responseFields$),
            "Response validation failed"
        );
    }

    async putAnythingIgnoredGeneration(
        input: string,
        options?: RequestOptions
    ): Promise<operations.PutAnythingIgnoredGenerationResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input,
            (value$) => z.string().parse(value$),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/anything/ignoredGeneration")();

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const context = { operationID: "put_/anything/ignoredGeneration" };
        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "PUT",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.PutAnythingIgnoredGenerationResponse$.inboundSchema.parse({
                        ...responseFields$,
                        object: val$,
                    });
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    async responseBodyJsonGet(
        options?: RequestOptions
    ): Promise<operations.ResponseBodyJsonGetResponse> {
        const headers$ = new Headers();
        headers$.set("x-speakeasy-user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const path$ = this.templateURLComponent("/json")();

        const query$ = "";

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const context = { operationID: "responseBodyJsonGet" };
        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request = this.createRequest$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
            },
            options
        );

        const response = await this.do$(request, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return operations.ResponseBodyJsonGetResponse$.inboundSchema.parse({
                        ...responseFields$,
                        httpBinSimpleJsonObject: val$,
                    });
                },
                "Response validation failed"
            );
            return result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }
}
