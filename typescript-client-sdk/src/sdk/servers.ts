/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { HTTPClient } from "../lib/http.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import {
    SelectServerWithIDServerList,
    SelectServerWithIDServerValid,
} from "./models/operations/selectserverwithid.js";
import {
    ServersByIDWithTemplatesServerList,
    ServersByIDWithTemplatesServerMain,
} from "./models/operations/serversbyidwithtemplates.js";
import {
    ServerWithProtocolTemplateServerList,
    ServerWithProtocolTemplateServerMain,
} from "./models/operations/serverwithprotocoltemplate.js";
import { ServerWithTemplatesServerList } from "./models/operations/serverwithtemplates.js";
import * as z from "zod";

export class Servers extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    async selectGlobalServer(
        options?: RequestOptions
    ): Promise<operations.SelectGlobalServerResponse | undefined> {
        const path$ = this.templateURLComponent("/anything/selectGlobalServer")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "selectGlobalServer",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                uaHeader: "x-speakeasy-user-agent",
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["4XX", "5XX"] });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.SelectGlobalServerResponse | undefined>()
            .void(200, operations.SelectGlobalServerResponse$.inboundSchema.optional(), {
                hdrs: true,
            })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Select a server by ID.
     */
    async selectServerWithID(options?: RequestOptions & { serverURL?: string }): Promise<void> {
        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(SelectServerWithIDServerList[SelectServerWithIDServerValid], {
                charEncoding: "percent",
            })();

        const path$ = this.templateURLComponent("/anything/selectServerWithID")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "selectServerWithID",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                uaHeader: "x-speakeasy-user-agent",
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["4XX", "5XX"] });

        const [result$] = await this.matcher<void>()
            .void(200, z.void())
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }

    async serverWithProtocolTemplate(
        options?: RequestOptions & { serverURL?: string }
    ): Promise<void> {
        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(
                ServerWithProtocolTemplateServerList[ServerWithProtocolTemplateServerMain],
                { charEncoding: "percent" }
            )({
                hostname: "localhost",
                port: "35123",
                protocol: "http",
            });

        const path$ = this.templateURLComponent("/anything/serverWithProtocolTemplate")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "serverWithProtocolTemplate",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                uaHeader: "x-speakeasy-user-agent",
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["4XX", "5XX"] });

        const [result$] = await this.matcher<void>()
            .void(200, z.void())
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }

    async serverWithTemplates(options?: RequestOptions & { serverURL?: string }): Promise<void> {
        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(ServerWithTemplatesServerList[0], {
                charEncoding: "percent",
            })({
                hostname: "localhost",
                port: "35123",
            });

        const path$ = this.templateURLComponent("/anything/serverWithTemplates")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "serverWithTemplates",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                uaHeader: "x-speakeasy-user-agent",
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["4XX", "5XX"] });

        const [result$] = await this.matcher<void>()
            .void(200, z.void())
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }

    async serverWithTemplatesGlobal(options?: RequestOptions): Promise<void> {
        const path$ = this.templateURLComponent("/anything/serverWithTemplatesGlobal")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "serverWithTemplatesGlobal",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                uaHeader: "x-speakeasy-user-agent",
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["4XX", "5XX"] });

        const [result$] = await this.matcher<void>()
            .void(200, z.void())
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }

    async serversByIDWithTemplates(
        options?: RequestOptions & { serverURL?: string }
    ): Promise<void> {
        const baseURL$ =
            options?.serverURL ||
            this.templateURLComponent(
                ServersByIDWithTemplatesServerList[ServersByIDWithTemplatesServerMain],
                { charEncoding: "percent" }
            )({
                hostname: "localhost",
                port: "35123",
            });

        const path$ = this.templateURLComponent("/anything/serversByIDWithTemplates")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "serversByIDWithTemplates",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                query: query$,
                uaHeader: "x-speakeasy-user-agent",
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["4XX", "5XX"] });

        const [result$] = await this.matcher<void>()
            .void(200, z.void())
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }
}
