/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { serversSelectGlobalServer } from "../funcs/serversSelectGlobalServer.js";
import { serversSelectServerWithID } from "../funcs/serversSelectServerWithID.js";
import { serversServersByIDWithTemplates } from "../funcs/serversServersByIDWithTemplates.js";
import { serversServersOverrideGlobalServerURL } from "../funcs/serversServersOverrideGlobalServerURL.js";
import { serversServersOverrideOperationServerURL } from "../funcs/serversServersOverrideOperationServerURL.js";
import { serversServerWithProtocolTemplate } from "../funcs/serversServerWithProtocolTemplate.js";
import { serversServerWithTemplates } from "../funcs/serversServerWithTemplates.js";
import { serversServerWithTemplatesGlobal } from "../funcs/serversServerWithTemplatesGlobal.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Servers extends ClientSDK {
  async selectGlobalServer(
    options?: RequestOptions,
  ): Promise<operations.SelectGlobalServerResponse | undefined> {
    return unwrapAsync(serversSelectGlobalServer(
      this,
      options,
    ));
  }

  /**
   * Select a server by ID.
   */
  async selectServerWithID(
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(serversSelectServerWithID(
      this,
      options,
    ));
  }

  async serverWithProtocolTemplate(
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(serversServerWithProtocolTemplate(
      this,
      options,
    ));
  }

  async serverWithTemplates(
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(serversServerWithTemplates(
      this,
      options,
    ));
  }

  async serverWithTemplatesGlobal(
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(serversServerWithTemplatesGlobal(
      this,
      options,
    ));
  }

  async serversByIDWithTemplates(
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(serversServersByIDWithTemplates(
      this,
      options,
    ));
  }

  async serversOverrideGlobalServerURL(
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(serversServersOverrideGlobalServerURL(
      this,
      options,
    ));
  }

  async serversOverrideOperationServerURL(
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(serversServersOverrideOperationServerURL(
      this,
      options,
    ));
  }
}
