/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as m$ from "../lib/matchers.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { SDKError } from "./models/errors/sdkerror.js";
import { SDKValidationError } from "./models/errors/sdkvalidationerror.js";
import * as operations from "./models/operations/index.js";
import {
    SelectServerWithIDServerList,
    SelectServerWithIDServerValid,
} from "./models/operations/selectserverwithid.js";
import {
    ServersByIDWithTemplatesServerList,
    ServersByIDWithTemplatesServerMain,
} from "./models/operations/serversbyidwithtemplates.js";
import {
    ServerWithProtocolTemplateServerList,
    ServerWithProtocolTemplateServerMain,
} from "./models/operations/serverwithprotocoltemplate.js";
import { ServerWithTemplatesServerList } from "./models/operations/serverwithtemplates.js";
import { unwrap as unwrap$ } from "./types/fp.js";
import * as z from "zod";

export class Servers extends ClientSDK {
    async selectGlobalServer(
        options?: RequestOptions
    ): Promise<operations.SelectGlobalServerResponse | undefined> {
        const path$ = pathToFunc("/anything/selectGlobalServer")();

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "selectGlobalServer",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await m$.match<
            operations.SelectGlobalServerResponse | undefined,
            SDKError | SDKValidationError
        >(
            m$.nil(200, operations.SelectGlobalServerResponse$inboundSchema.optional(), {
                hdrs: true,
            }),
            m$.fail(["4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        return unwrap$(result$);
    }

    /**
     * Select a server by ID.
     */
    async selectServerWithID(options?: RequestOptions & { serverURL?: string }): Promise<void> {
        const baseURL$ =
            options?.serverURL ||
            pathToFunc(SelectServerWithIDServerList[SelectServerWithIDServerValid], {
                charEncoding: "percent",
            })();

        const path$ = pathToFunc("/anything/selectServerWithID")();

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "selectServerWithID",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<void, SDKError | SDKValidationError>(
            m$.nil(200, z.void()),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async serverWithProtocolTemplate(
        options?: RequestOptions & { serverURL?: string }
    ): Promise<void> {
        const baseURL$ =
            options?.serverURL ||
            pathToFunc(ServerWithProtocolTemplateServerList[ServerWithProtocolTemplateServerMain], {
                charEncoding: "percent",
            })({
                hostname: "localhost",
                port: "35123",
                protocol: "http",
            });

        const path$ = pathToFunc("/anything/serverWithProtocolTemplate")();

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "serverWithProtocolTemplate",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<void, SDKError | SDKValidationError>(
            m$.nil(200, z.void()),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async serverWithTemplates(options?: RequestOptions & { serverURL?: string }): Promise<void> {
        const baseURL$ =
            options?.serverURL ||
            pathToFunc(ServerWithTemplatesServerList[0], { charEncoding: "percent" })({
                hostname: "localhost",
                port: "35123",
            });

        const path$ = pathToFunc("/anything/serverWithTemplates")();

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "serverWithTemplates",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<void, SDKError | SDKValidationError>(
            m$.nil(200, z.void()),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async serverWithTemplatesGlobal(options?: RequestOptions): Promise<void> {
        const path$ = pathToFunc("/anything/serverWithTemplatesGlobal")();

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "serverWithTemplatesGlobal",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<void, SDKError | SDKValidationError>(
            m$.nil(200, z.void()),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async serversByIDWithTemplates(
        options?: RequestOptions & { serverURL?: string }
    ): Promise<void> {
        const baseURL$ =
            options?.serverURL ||
            pathToFunc(ServersByIDWithTemplatesServerList[ServersByIDWithTemplatesServerMain], {
                charEncoding: "percent",
            })({
                hostname: "localhost",
                port: "35123",
            });

        const path$ = pathToFunc("/anything/serversByIDWithTemplates")();

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "serversByIDWithTemplates",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                baseURL: baseURL$,
                path: path$,
                headers: headers$,
                uaHeader: "x-speakeasy-user-agent",
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<void, SDKError | SDKValidationError>(
            m$.nil(200, z.void()),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }
}
