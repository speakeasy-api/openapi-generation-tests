/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { encodeSimple as encodeSimple$ } from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";

export class Telemetry extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    async telemetrySpeakeasyUserAgentGet(
        userAgent: string,
        options?: RequestOptions
    ): Promise<operations.TelemetrySpeakeasyUserAgentGetRes> {
        const input$: operations.TelemetrySpeakeasyUserAgentGetRequest = {
            userAgent: userAgent,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.TelemetrySpeakeasyUserAgentGetRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/anything/telemetry/speakeasy-user-agent")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
            "User-Agent": encodeSimple$("User-Agent", payload$["User-Agent"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "telemetrySpeakeasyUserAgentGet",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                uaHeader: "x-speakeasy-user-agent",
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["4XX", "5XX"] });

        const [result$] = await this.matcher<operations.TelemetrySpeakeasyUserAgentGetRes>()
            .json(200, operations.TelemetrySpeakeasyUserAgentGetRes$inboundSchema)
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }

    async telemetryUserAgentGet(
        options?: RequestOptions
    ): Promise<operations.TelemetryUserAgentGetRes> {
        const path$ = this.templateURLComponent("/anything/telemetry/user-agent")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "telemetryUserAgentGet",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                uaHeader: "x-speakeasy-user-agent",
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["4XX", "5XX"] });

        const [result$] = await this.matcher<operations.TelemetryUserAgentGetRes>()
            .json(200, operations.TelemetryUserAgentGetRes$inboundSchema)
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }
}
