/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { unionsCollectionOneOfPost } from "../funcs/unionsCollectionOneOfPost.js";
import { unionsConstDiscriminatedOneOf } from "../funcs/unionsConstDiscriminatedOneOf.js";
import { unionsDiscriminatedOneMultipleMemberships } from "../funcs/unionsDiscriminatedOneMultipleMemberships.js";
import { unionsDiscriminatedOneMultipleMembershipsHasWheels } from "../funcs/unionsDiscriminatedOneMultipleMembershipsHasWheels.js";
import { unionsFlattenedTypedObjectPost } from "../funcs/unionsFlattenedTypedObjectPost.js";
import { unionsInfectedWithAny } from "../funcs/unionsInfectedWithAny.js";
import { unionsMixedTypeOneOfPost } from "../funcs/unionsMixedTypeOneOfPost.js";
import { unionsMixedUnionTypes } from "../funcs/unionsMixedUnionTypes.js";
import { unionsNullableOneOfRefInObjectPost } from "../funcs/unionsNullableOneOfRefInObjectPost.js";
import { unionsNullableOneOfSchemaPost } from "../funcs/unionsNullableOneOfSchemaPost.js";
import { unionsNullableOneOfTypeInObjectPost } from "../funcs/unionsNullableOneOfTypeInObjectPost.js";
import { unionsNullableTypedObjectPost } from "../funcs/unionsNullableTypedObjectPost.js";
import { unionsOneOfOverlappingObjects } from "../funcs/unionsOneOfOverlappingObjects.js";
import { unionsPrimitiveTypeOneOfPost } from "../funcs/unionsPrimitiveTypeOneOfPost.js";
import { unionsStronglyTypedOneOfDiscriminatedPost } from "../funcs/unionsStronglyTypedOneOfDiscriminatedPost.js";
import { unionsStronglyTypedOneOfPost } from "../funcs/unionsStronglyTypedOneOfPost.js";
import { unionsStronglyTypedOneOfPostWithNonStandardDiscriminatorName } from "../funcs/unionsStronglyTypedOneOfPostWithNonStandardDiscriminatorName.js";
import { unionsTypedObjectNullableOneOfPost } from "../funcs/unionsTypedObjectNullableOneOfPost.js";
import { unionsTypedObjectOneOfPost } from "../funcs/unionsTypedObjectOneOfPost.js";
import { unionsUnionBigIntStrDecimal } from "../funcs/unionsUnionBigIntStrDecimal.js";
import { unionsUnionDateNull } from "../funcs/unionsUnionDateNull.js";
import { unionsUnionDateTimeBigInt } from "../funcs/unionsUnionDateTimeBigInt.js";
import { unionsUnionDateTimeNull } from "../funcs/unionsUnionDateTimeNull.js";
import { unionsUnionMap } from "../funcs/unionsUnionMap.js";
import { unionsUnionMapOptional } from "../funcs/unionsUnionMapOptional.js";
import { unionsUnionNestedEnumsForm } from "../funcs/unionsUnionNestedEnumsForm.js";
import { unionsUnionNestedEnumsMultipart } from "../funcs/unionsUnionNestedEnumsMultipart.js";
import { unionsUnionOfArraysPost } from "../funcs/unionsUnionOfArraysPost.js";
import { unionsWeaklyTypedOneOfNullEnumPost } from "../funcs/unionsWeaklyTypedOneOfNullEnumPost.js";
import { unionsWeaklyTypedOneOfPost } from "../funcs/unionsWeaklyTypedOneOfPost.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";
import { RFCDate } from "./types/rfcdate.js";

export class Unions extends ClientSDK {
  async collectionOneOfPost(
    request: shared.CollectionOneOfObject,
    options?: RequestOptions,
  ): Promise<operations.CollectionOneOfPostRes> {
    return unwrapAsync(unionsCollectionOneOfPost(
      this,
      request,
      options,
    ));
  }

  async constDiscriminatedOneOf(
    request: shared.ConstDiscriminatedOneOf,
    options?: RequestOptions,
  ): Promise<operations.ConstDiscriminatedOneOfRes> {
    return unwrapAsync(unionsConstDiscriminatedOneOf(
      this,
      request,
      options,
    ));
  }

  async discriminatedOneMultipleMemberships(
    request: shared.Vehicle,
    options?: RequestOptions,
  ): Promise<operations.DiscriminatedOneMultipleMembershipsRes> {
    return unwrapAsync(unionsDiscriminatedOneMultipleMemberships(
      this,
      request,
      options,
    ));
  }

  async discriminatedOneMultipleMembershipsHasWheels(
    request: shared.HasWheels,
    options?: RequestOptions,
  ): Promise<operations.DiscriminatedOneMultipleMembershipsHasWheelsRes> {
    return unwrapAsync(unionsDiscriminatedOneMultipleMembershipsHasWheels(
      this,
      request,
      options,
    ));
  }

  async flattenedTypedObjectPost(
    request: shared.FlattenedTypedObject1,
    options?: RequestOptions,
  ): Promise<operations.FlattenedTypedObjectPostRes> {
    return unwrapAsync(unionsFlattenedTypedObjectPost(
      this,
      request,
      options,
    ));
  }

  async infectedWithAny(
    request: shared.InfectedWithAny,
    options?: RequestOptions,
  ): Promise<operations.InfectedWithAnyRes> {
    return unwrapAsync(unionsInfectedWithAny(
      this,
      request,
      options,
    ));
  }

  async mixedTypeOneOfPost(
    request: operations.MixedTypeOneOfPostRequestBody,
    options?: RequestOptions,
  ): Promise<operations.MixedTypeOneOfPostRes> {
    return unwrapAsync(unionsMixedTypeOneOfPost(
      this,
      request,
      options,
    ));
  }

  async mixedUnionTypes(
    request: shared.MixedUnionTypes,
    options?: RequestOptions,
  ): Promise<operations.MixedUnionTypesRes> {
    return unwrapAsync(unionsMixedUnionTypes(
      this,
      request,
      options,
    ));
  }

  async nullableOneOfRefInObjectPost(
    request: shared.NullableOneOfRefInObject,
    options?: RequestOptions,
  ): Promise<operations.NullableOneOfRefInObjectPostRes> {
    return unwrapAsync(unionsNullableOneOfRefInObjectPost(
      this,
      request,
      options,
    ));
  }

  async nullableOneOfSchemaPost(
    request: operations.NullableOneOfSchemaPostRequestBody | null,
    options?: RequestOptions,
  ): Promise<operations.NullableOneOfSchemaPostRes> {
    return unwrapAsync(unionsNullableOneOfSchemaPost(
      this,
      request,
      options,
    ));
  }

  async nullableOneOfTypeInObjectPost(
    request: shared.NullableOneOfTypeInObject,
    options?: RequestOptions,
  ): Promise<operations.NullableOneOfTypeInObjectPostRes> {
    return unwrapAsync(unionsNullableOneOfTypeInObjectPost(
      this,
      request,
      options,
    ));
  }

  async nullableTypedObjectPost(
    request: shared.TypedObject1 | null,
    options?: RequestOptions,
  ): Promise<operations.NullableTypedObjectPostRes> {
    return unwrapAsync(unionsNullableTypedObjectPost(
      this,
      request,
      options,
    ));
  }

  async oneOfOverlappingObjects(
    request: operations.OneOfOverlappingObjectsRequestBody,
    options?: RequestOptions,
  ): Promise<operations.OneOfOverlappingObjectsRes> {
    return unwrapAsync(unionsOneOfOverlappingObjects(
      this,
      request,
      options,
    ));
  }

  async primitiveTypeOneOfPost(
    request: operations.PrimitiveTypeOneOfPostRequestBody,
    options?: RequestOptions,
  ): Promise<operations.PrimitiveTypeOneOfPostRes> {
    return unwrapAsync(unionsPrimitiveTypeOneOfPost(
      this,
      request,
      options,
    ));
  }

  async stronglyTypedOneOfDiscriminatedPost(
    request: shared.StronglyTypedOneOfDiscriminatedObject,
    options?: RequestOptions,
  ): Promise<operations.StronglyTypedOneOfDiscriminatedPostRes> {
    return unwrapAsync(unionsStronglyTypedOneOfDiscriminatedPost(
      this,
      request,
      options,
    ));
  }

  async stronglyTypedOneOfPost(
    request: shared.StronglyTypedOneOfObject,
    options?: RequestOptions,
  ): Promise<operations.StronglyTypedOneOfPostRes> {
    return unwrapAsync(unionsStronglyTypedOneOfPost(
      this,
      request,
      options,
    ));
  }

  async stronglyTypedOneOfPostWithNonStandardDiscriminatorName(
    request: shared.StronglyTypedOneOfObjectWithNonStandardDiscriminatorName,
    options?: RequestOptions,
  ): Promise<
    operations.StronglyTypedOneOfPostWithNonStandardDiscriminatorNameRes
  > {
    return unwrapAsync(
      unionsStronglyTypedOneOfPostWithNonStandardDiscriminatorName(
        this,
        request,
        options,
      ),
    );
  }

  async typedObjectNullableOneOfPost(
    request: shared.TypedObjectNullableOneOf | null,
    options?: RequestOptions,
  ): Promise<operations.TypedObjectNullableOneOfPostRes> {
    return unwrapAsync(unionsTypedObjectNullableOneOfPost(
      this,
      request,
      options,
    ));
  }

  async typedObjectOneOfPost(
    request: shared.TypedObjectOneOf,
    options?: RequestOptions,
  ): Promise<operations.TypedObjectOneOfPostRes> {
    return unwrapAsync(unionsTypedObjectOneOfPost(
      this,
      request,
      options,
    ));
  }

  async unionBigIntStrDecimal(
    request: operations.UnionBigIntStrDecimalRequestBody,
    options?: RequestOptions,
  ): Promise<operations.UnionBigIntStrDecimalRes> {
    return unwrapAsync(unionsUnionBigIntStrDecimal(
      this,
      request,
      options,
    ));
  }

  async unionDateNull(
    request: RFCDate | null,
    options?: RequestOptions,
  ): Promise<operations.UnionDateNullRes> {
    return unwrapAsync(unionsUnionDateNull(
      this,
      request,
      options,
    ));
  }

  async unionDateTimeBigInt(
    request: operations.UnionDateTimeBigIntRequestBody,
    options?: RequestOptions,
  ): Promise<operations.UnionDateTimeBigIntRes> {
    return unwrapAsync(unionsUnionDateTimeBigInt(
      this,
      request,
      options,
    ));
  }

  async unionDateTimeNull(
    request: Date | null,
    options?: RequestOptions,
  ): Promise<operations.UnionDateTimeNullRes> {
    return unwrapAsync(unionsUnionDateTimeNull(
      this,
      request,
      options,
    ));
  }

  async unionMap(
    request: operations.UnionMapRequestBody,
    options?: RequestOptions,
  ): Promise<operations.UnionMapRes> {
    return unwrapAsync(unionsUnionMap(
      this,
      request,
      options,
    ));
  }

  async unionMapOptional(
    request: operations.UnionMapOptionalRequestBody,
    options?: RequestOptions,
  ): Promise<operations.UnionMapOptionalRes> {
    return unwrapAsync(unionsUnionMapOptional(
      this,
      request,
      options,
    ));
  }

  async unionNestedEnumsForm(
    request: operations.UnionNestedEnumsFormRequestBody,
    options?: RequestOptions,
  ): Promise<operations.UnionNestedEnumsFormRes> {
    return unwrapAsync(unionsUnionNestedEnumsForm(
      this,
      request,
      options,
    ));
  }

  async unionNestedEnumsMultipart(
    request: operations.UnionNestedEnumsMultipartRequestBody,
    options?: RequestOptions,
  ): Promise<operations.UnionNestedEnumsMultipartRes> {
    return unwrapAsync(unionsUnionNestedEnumsMultipart(
      this,
      request,
      options,
    ));
  }

  async unionOfArraysPost(
    request: shared.UnionOfArrays,
    options?: RequestOptions,
  ): Promise<operations.UnionOfArraysPostRes> {
    return unwrapAsync(unionsUnionOfArraysPost(
      this,
      request,
      options,
    ));
  }

  async weaklyTypedOneOfNullEnumPost(
    request: shared.WeaklyTypedOneOfNullEnumObject,
    options?: RequestOptions,
  ): Promise<operations.WeaklyTypedOneOfNullEnumPostRes> {
    return unwrapAsync(unionsWeaklyTypedOneOfNullEnumPost(
      this,
      request,
      options,
    ));
  }

  async weaklyTypedOneOfPost(
    request: shared.WeaklyTypedOneOfObject,
    options?: RequestOptions,
  ): Promise<operations.WeaklyTypedOneOfPostRes> {
    return unwrapAsync(unionsWeaklyTypedOneOfPost(
      this,
      request,
      options,
    ));
  }
}
